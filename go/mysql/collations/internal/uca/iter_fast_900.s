// Code generated by command: go run generate.go -out iter_fast_900.s -stubs iter_fast_900_stub.go. DO NOT EDIT.

#include "textflag.h"

DATA u32ShuffleMask<>+0(SB)/1, $0x00
DATA u32ShuffleMask<>+1(SB)/1, $0x80
DATA u32ShuffleMask<>+2(SB)/1, $0x80
DATA u32ShuffleMask<>+3(SB)/1, $0x80
DATA u32ShuffleMask<>+4(SB)/1, $0x01
DATA u32ShuffleMask<>+5(SB)/1, $0x80
DATA u32ShuffleMask<>+6(SB)/1, $0x80
DATA u32ShuffleMask<>+7(SB)/1, $0x80
DATA u32ShuffleMask<>+8(SB)/1, $0x02
DATA u32ShuffleMask<>+9(SB)/1, $0x80
DATA u32ShuffleMask<>+10(SB)/1, $0x80
DATA u32ShuffleMask<>+11(SB)/1, $0x80
DATA u32ShuffleMask<>+12(SB)/1, $0x03
DATA u32ShuffleMask<>+13(SB)/1, $0x80
DATA u32ShuffleMask<>+14(SB)/1, $0x80
DATA u32ShuffleMask<>+15(SB)/1, $0x80
DATA u32ShuffleMask<>+16(SB)/1, $0x04
DATA u32ShuffleMask<>+17(SB)/1, $0x80
DATA u32ShuffleMask<>+18(SB)/1, $0x80
DATA u32ShuffleMask<>+19(SB)/1, $0x80
DATA u32ShuffleMask<>+20(SB)/1, $0x05
DATA u32ShuffleMask<>+21(SB)/1, $0x80
DATA u32ShuffleMask<>+22(SB)/1, $0x80
DATA u32ShuffleMask<>+23(SB)/1, $0x80
DATA u32ShuffleMask<>+24(SB)/1, $0x06
DATA u32ShuffleMask<>+25(SB)/1, $0x80
DATA u32ShuffleMask<>+26(SB)/1, $0x80
DATA u32ShuffleMask<>+27(SB)/1, $0x80
DATA u32ShuffleMask<>+28(SB)/1, $0x07
DATA u32ShuffleMask<>+29(SB)/1, $0x80
DATA u32ShuffleMask<>+30(SB)/1, $0x80
DATA u32ShuffleMask<>+31(SB)/1, $0x80
DATA u32ShuffleMask<>+32(SB)/1, $0x00
DATA u32ShuffleMask<>+33(SB)/1, $0x01
DATA u32ShuffleMask<>+34(SB)/1, $0x04
DATA u32ShuffleMask<>+35(SB)/1, $0x05
DATA u32ShuffleMask<>+36(SB)/1, $0x08
DATA u32ShuffleMask<>+37(SB)/1, $0x09
DATA u32ShuffleMask<>+38(SB)/1, $0x0c
DATA u32ShuffleMask<>+39(SB)/1, $0x0d
DATA u32ShuffleMask<>+40(SB)/1, $0x80
DATA u32ShuffleMask<>+41(SB)/1, $0x80
DATA u32ShuffleMask<>+42(SB)/1, $0x80
DATA u32ShuffleMask<>+43(SB)/1, $0x80
DATA u32ShuffleMask<>+44(SB)/1, $0x80
DATA u32ShuffleMask<>+45(SB)/1, $0x80
DATA u32ShuffleMask<>+46(SB)/1, $0x80
DATA u32ShuffleMask<>+47(SB)/1, $0x80
DATA u32ShuffleMask<>+48(SB)/1, $0x10
DATA u32ShuffleMask<>+49(SB)/1, $0x11
DATA u32ShuffleMask<>+50(SB)/1, $0x14
DATA u32ShuffleMask<>+51(SB)/1, $0x15
DATA u32ShuffleMask<>+52(SB)/1, $0x18
DATA u32ShuffleMask<>+53(SB)/1, $0x19
DATA u32ShuffleMask<>+54(SB)/1, $0x1c
DATA u32ShuffleMask<>+55(SB)/1, $0x1d
DATA u32ShuffleMask<>+56(SB)/1, $0x80
DATA u32ShuffleMask<>+57(SB)/1, $0x80
DATA u32ShuffleMask<>+58(SB)/1, $0x80
DATA u32ShuffleMask<>+59(SB)/1, $0x80
DATA u32ShuffleMask<>+60(SB)/1, $0x80
DATA u32ShuffleMask<>+61(SB)/1, $0x80
DATA u32ShuffleMask<>+62(SB)/1, $0x80
DATA u32ShuffleMask<>+63(SB)/1, $0x80
GLOBL u32ShuffleMask<>(SB), RODATA|NOPTR, $64

// func ucaFastWeight(dst *[8]uint16, p *byte, table *[256]uint32) uint32
// Requires: AVX2, SSE2
TEXT Â·ucaFastWeight(SB), NOSPLIT, $0-28
	MOVQ         p+8(FP), AX
	MOVQ         $0x8080808080808080, CX
	TESTQ        CX, (AX)
	JNE          bail
	MOVQ         dst+0(FP), CX
	MOVQ         table+16(FP), DX
	VPCMPEQD     Y0, Y0, Y0
	VPBROADCASTQ (AX), Y1
	VPSHUFB      u32ShuffleMask<>+0(SB), Y1, Y1
	VPGATHERDD   Y0, (DX)(Y1*4), Y2
	VPMOVMSKB    Y2, AX
	ANDL         $0x88888888, AX
	MOVL         AX, ret+24(FP)
	VPSHUFB      u32ShuffleMask<>+32(SB), Y2, Y2
	MOVQ         X2, (CX)
	VEXTRACTI128 $0x01, Y2, X2
	MOVQ         X2, 8(CX)
	RET

bail:
	XORL AX, AX
	RET

/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"go/types"

	"github.com/dave/jennifer/jen"
)

type rewriterGen struct {
	cases           []jen.Code
	replaceMethods  []jen.Code
	interestingType func(types.Type) bool
	ifaceName       string
}

func newRewriterGen(f func(types.Type) bool, name string) rewriterGen {
	return rewriterGen{interestingType: f, ifaceName: name}
}

func (r *rewriterGen) visitStruct(named *types.Named, stroct *types.Struct) error {
	switchCase, err := r.structCase(named.Obj().Name(), stroct)
	if err != nil {
		return err
	}
	r.cases = append(r.cases, switchCase)

	replaceMethods, err := r.createReplaceMethods(named.String(), stroct)
	if err != nil {
		return err
	}
	r.replaceMethods = append(r.cases, replaceMethods...)
	return nil
}

func (r *rewriterGen) structCase(name string, stroct *types.Struct) (jen.Code, error) {
	var stmts []jen.Code
	for i := 0; i < stroct.NumFields(); i++ {
		field := stroct.Field(i)
		if r.interestingType(field.Type()) {
			stmts = append(stmts, jen.Id("a").Dot("apply").Call(jen.Id("node"), jen.Id("n").Dot(field.Name()), jen.Nil()))
		}
	}
	stroct.NumFields()
	return jen.Case(jen.Op("*").Id(name)).Block(stmts...), nil
}

func (r *rewriterGen) createReplaceMethods(name string, stroct *types.Struct) ([]jen.Code, error) {

	fmt.Println(stroct)
	fmt.Println(name)
	return nil, nil
}

func (r *rewriterGen) createFile(pkgName string) *jen.File {
	out := jen.NewFile(pkgName)
	out.HeaderComment(licenseFileHeader)
	out.HeaderComment("Code generated by ASTHelperGen. DO NOT EDIT.")

	out.Add(r.applyFunc())

	return out
}

func (r *rewriterGen) applyFunc() *jen.Statement {
	// func (a *application) apply(parent, node SQLNode, replacer replacerFunc) {
	apply := jen.Func().Params(
		jen.Id("a").Op("*").Id("application"),
	).Id("apply").Params(
		jen.Id("parent"),
		jen.Id("node").Id(r.ifaceName),
		jen.Id("replacer").Id("replacerFunc"),
	).Block(
		/*
			if node == nil || isNilValue(node) {
				return
			}
		*/
		jen.If(
			jen.Id("node").Op("==").Nil().Op("||").
				Id("isNilValue").Call(jen.Id("node"))).Block(
			jen.Return(),
		),
		/*
			saved := a.cursor
			a.cursor.replacer = replacer
			a.cursor.node = node
			a.cursor.parent = parent
		*/
		jen.Id("saved").Op(":=").Id("a").Dot("cursor"),
		jen.Id("a").Dot("cursor").Dot("replacer").Op("=").Id("replacer"),
		jen.Id("a").Dot("cursor").Dot("node").Op("=").Id("node"),
		jen.Id("a").Dot("cursor").Dot("parent").Op("=").Id("parent"),
		jen.If(
			jen.Id("a").Dot("pre").Op("!=").Nil().Op("&&").
				Op("!").Id("a").Dot("pre").Call(jen.Op("&").Id("a").Dot("cursor"))).Block(
			jen.Id("a").Dot("cursor").Op("=").Id("saved"),
			jen.Return(),
		),

		//	switch n := node.(type) {
		jen.Switch(jen.Id("n").Op(":=").Id("node").Assert(jen.Id("type")).Block(
			r.cases...,
		)),

		/*
			if a.post != nil && !a.post(&a.cursor) {
				panic(abort)
			}
		*/
		jen.If(
			jen.Id("a").Dot("post").Op("!=").Nil().Op("&&").
				Op("!").Id("a").Dot("post").Call(jen.Op("&").Id("a").Dot("cursor"))).Block(
			jen.Id("panic").Call(jen.Id("abort")),
		),

		// 	a.cursor = saved
		jen.Id("a").Dot("cursor").Op("=").Id("saved"),
	)
	return apply
}

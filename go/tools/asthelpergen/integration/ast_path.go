/*
Copyright 2025 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

import "encoding/binary"

type ASTStep uint16

const (
	InterfaceSliceOffset ASTStep = iota
	LeafSliceOffset
	RefOfRefContainerASTType
	RefOfRefContainerASTImplementationType
	RefOfRefSliceContainerASTElementsOffset
	RefOfRefSliceContainerASTImplementationElementsOffset
	RefOfSubImplinner
	ValueContainerASTType
	ValueContainerASTImplementationType
	ValueSliceContainerASTElementsOffset
	ValueSliceContainerASTImplementationElements
	SliceOfASTOffset
	SliceOfRefOfLeafOffset
	RefOfValueContainerASTType
	RefOfValueContainerASTImplementationType
	RefOfValueSliceContainerASTElementsOffset
	RefOfValueSliceContainerASTImplementationElements
	RefOfOptionsl
)

func (s ASTStep) DebugString() string {
	switch s {
	case InterfaceSliceOffset:
		return "(InterfaceSlice)[]Offset"
	case LeafSliceOffset:
		return "(LeafSlice)[]Offset"
	case RefOfRefContainerASTType:
		return "(*RefContainer).ASTType"
	case RefOfRefContainerASTImplementationType:
		return "(*RefContainer).ASTImplementationType"
	case RefOfRefSliceContainerASTElementsOffset:
		return "(*RefSliceContainer).ASTElementsOffset"
	case RefOfRefSliceContainerASTImplementationElementsOffset:
		return "(*RefSliceContainer).ASTImplementationElementsOffset"
	case RefOfSubImplinner:
		return "(*SubImpl).inner"
	case ValueContainerASTType:
		return "(ValueContainer).ASTType"
	case ValueContainerASTImplementationType:
		return "(ValueContainer).ASTImplementationType"
	case ValueSliceContainerASTElementsOffset:
		return "(ValueSliceContainer).ASTElementsOffset"
	case ValueSliceContainerASTImplementationElements:
		return "(ValueSliceContainer).ASTImplementationElements"
	case SliceOfASTOffset:
		return "([]AST)[]Offset"
	case SliceOfRefOfLeafOffset:
		return "([]*Leaf)[]Offset"
	case RefOfValueContainerASTType:
		return "(*ValueContainer).ASTType"
	case RefOfValueContainerASTImplementationType:
		return "(*ValueContainer).ASTImplementationType"
	case RefOfValueSliceContainerASTElementsOffset:
		return "(*ValueSliceContainer).ASTElementsOffset"
	case RefOfValueSliceContainerASTImplementationElements:
		return "(*ValueSliceContainer).ASTImplementationElements"
	case RefOfOptionsl:
		return "(*Options).l"
	}
	panic("unknown ASTStep")
}
func GetNodeFromPath(node AST, path ASTPath) AST {
	if path == "" {
		return node
	}
	step := binary.BigEndian.Uint16([]byte(path[:2]))
	path = path[2:]
	switch ASTStep(step) {
	case InterfaceSliceOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(InterfaceSlice)[idx], path)
	case LeafSliceOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(LeafSlice)[idx], path)
	case RefOfRefContainerASTType:
		return GetNodeFromPath(node.(*RefContainer).ASTType, path)
	case RefOfRefContainerASTImplementationType:
		return GetNodeFromPath(node.(*RefContainer).ASTImplementationType, path)
	case RefOfRefSliceContainerASTElementsOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(*RefSliceContainer).ASTElements[idx], path)
	case RefOfRefSliceContainerASTImplementationElementsOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(*RefSliceContainer).ASTImplementationElements[idx], path)
	case RefOfSubImplinner:
		return GetNodeFromPath(node.(*SubImpl).inner, path)
	case ValueContainerASTType:
		return GetNodeFromPath(node.(ValueContainer).ASTType, path)
	case ValueContainerASTImplementationType:
		return GetNodeFromPath(node.(ValueContainer).ASTImplementationType, path)
	case ValueSliceContainerASTElementsOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(ValueSliceContainer).ASTElements[idx], path)
	case ValueSliceContainerASTImplementationElements:
		return GetNodeFromPath(node.(ValueSliceContainer).ASTImplementationElements, path)
	case RefOfValueContainerASTType:
		return GetNodeFromPath(node.(*ValueContainer).ASTType, path)
	case RefOfValueContainerASTImplementationType:
		return GetNodeFromPath(node.(*ValueContainer).ASTImplementationType, path)
	case RefOfValueSliceContainerASTElementsOffset:
		idx, bytesRead := binary.Varint([]byte(path))
		path = path[bytesRead:]
		return GetNodeFromPath(node.(*ValueSliceContainer).ASTElements[idx], path)
	case RefOfValueSliceContainerASTImplementationElements:
		return GetNodeFromPath(node.(*ValueSliceContainer).ASTImplementationElements, path)
	}
	return nil
}

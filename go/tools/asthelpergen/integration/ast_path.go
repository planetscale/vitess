/*
Copyright 2025 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

import "encoding/binary"

type ASTStep uint16

const (
	RefOfRefContainerASTType ASTStep = iota
	RefOfRefContainerASTImplementationType
	RefOfRefSliceContainerASTElements8
	RefOfRefSliceContainerASTElements32
	RefOfRefSliceContainerASTImplementationElements8
	RefOfRefSliceContainerASTImplementationElements32
	RefOfSubImplinner
	ValueContainerASTType
	ValueContainerASTImplementationType
	ValueSliceContainerASTElements8
	ValueSliceContainerASTElements32
	ValueSliceContainerASTImplementationElements
	RefOfValueContainerASTType
	RefOfValueContainerASTImplementationType
	RefOfValueSliceContainerASTElements8
	RefOfValueSliceContainerASTElements32
	RefOfValueSliceContainerASTImplementationElements
)

func (s ASTStep) DebugString() string {
	switch s {
	case RefOfRefContainerASTType:
		return "(*RefContainer).ASTType"
	case RefOfRefContainerASTImplementationType:
		return "(*RefContainer).ASTImplementationType"
	case RefOfRefSliceContainerASTElements8:
		return "(*RefSliceContainer).ASTElements8"
	case RefOfRefSliceContainerASTElements32:
		return "(*RefSliceContainer).ASTElements32"
	case RefOfRefSliceContainerASTImplementationElements8:
		return "(*RefSliceContainer).ASTImplementationElements8"
	case RefOfRefSliceContainerASTImplementationElements32:
		return "(*RefSliceContainer).ASTImplementationElements32"
	case RefOfSubImplinner:
		return "(*SubImpl).inner"
	case ValueContainerASTType:
		return "(ValueContainer).ASTType"
	case ValueContainerASTImplementationType:
		return "(ValueContainer).ASTImplementationType"
	case ValueSliceContainerASTElements8:
		return "(ValueSliceContainer).ASTElements8"
	case ValueSliceContainerASTElements32:
		return "(ValueSliceContainer).ASTElements32"
	case ValueSliceContainerASTImplementationElements:
		return "(ValueSliceContainer).ASTImplementationElements"
	case RefOfValueContainerASTType:
		return "(*ValueContainer).ASTType"
	case RefOfValueContainerASTImplementationType:
		return "(*ValueContainer).ASTImplementationType"
	case RefOfValueSliceContainerASTElements8:
		return "(*ValueSliceContainer).ASTElements8"
	case RefOfValueSliceContainerASTElements32:
		return "(*ValueSliceContainer).ASTElements32"
	case RefOfValueSliceContainerASTImplementationElements:
		return "(*ValueSliceContainer).ASTImplementationElements"
	}
	panic("unknown ASTStep")
}
func WalkASTPath(node AST, path ASTPath) AST {
	if path == "" {
		return node
	}
	step := binary.BigEndian.Uint16([]byte(path[:2]))
	path = path[2:]
	switch ASTStep(step) {
	case RefOfRefContainerASTType:
		return WalkASTPath(node.(*RefContainer).ASTType, path)
	case RefOfRefContainerASTImplementationType:
		return WalkASTPath(node.(*RefContainer).ASTImplementationType, path)
	case RefOfRefSliceContainerASTElements8:
		idx := path[0]
		path = path[1:]
		return WalkASTPath(node.(*RefSliceContainer).ASTElements[idx], path)
	case RefOfRefSliceContainerASTElements32:
		idx := binary.BigEndian.Uint32([]byte(path[:2]))
		path = path[4:]
		return WalkASTPath(node.(*RefSliceContainer).ASTElements[idx], path)
	case RefOfRefSliceContainerASTImplementationElements8:
		idx := path[0]
		path = path[1:]
		return WalkASTPath(node.(*RefSliceContainer).ASTImplementationElements[idx], path)
	case RefOfRefSliceContainerASTImplementationElements32:
		idx := binary.BigEndian.Uint32([]byte(path[:2]))
		path = path[4:]
		return WalkASTPath(node.(*RefSliceContainer).ASTImplementationElements[idx], path)
	case RefOfSubImplinner:
		return WalkASTPath(node.(*SubImpl).inner, path)
	case ValueContainerASTType:
		return WalkASTPath(node.(ValueContainer).ASTType, path)
	case ValueContainerASTImplementationType:
		return WalkASTPath(node.(ValueContainer).ASTImplementationType, path)
	case ValueSliceContainerASTElements8:
		idx := path[0]
		path = path[1:]
		return WalkASTPath(node.(ValueSliceContainer).ASTElements[idx], path)
	case ValueSliceContainerASTElements32:
		idx := binary.BigEndian.Uint32([]byte(path[:2]))
		path = path[4:]
		return WalkASTPath(node.(ValueSliceContainer).ASTElements[idx], path)
	case ValueSliceContainerASTImplementationElements:
		return WalkASTPath(node.(ValueSliceContainer).ASTImplementationElements, path)
	case RefOfValueContainerASTType:
		return WalkASTPath(node.(*ValueContainer).ASTType, path)
	case RefOfValueContainerASTImplementationType:
		return WalkASTPath(node.(*ValueContainer).ASTImplementationType, path)
	case RefOfValueSliceContainerASTElements8:
		idx := path[0]
		path = path[1:]
		return WalkASTPath(node.(*ValueSliceContainer).ASTElements[idx], path)
	case RefOfValueSliceContainerASTElements32:
		idx := binary.BigEndian.Uint32([]byte(path[:2]))
		path = path[4:]
		return WalkASTPath(node.(*ValueSliceContainer).ASTElements[idx], path)
	case RefOfValueSliceContainerASTImplementationElements:
		return WalkASTPath(node.(*ValueSliceContainer).ASTImplementationElements, path)
	}
	return nil
}

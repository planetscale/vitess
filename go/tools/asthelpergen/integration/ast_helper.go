/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

import (
	vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"
	vterrors "vitess.io/vitess/go/vt/vterrors"
)

// CloneAST creates a deep clone of the input.
func CloneAST(in AST) AST {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case BasicType:
		return in
	case Bytes:
		return CloneBytes(in)
	case InterfaceContainer:
		return CloneInterfaceContainer(in)
	case InterfaceSlice:
		return CloneInterfaceSlice(in)
	case *Leaf:
		return CloneRefOfLeaf(in)
	case LeafSlice:
		return CloneLeafSlice(in)
	case *NoCloneType:
		return CloneRefOfNoCloneType(in)
	case *RefContainer:
		return CloneRefOfRefContainer(in)
	case *RefSliceContainer:
		return CloneRefOfRefSliceContainer(in)
	case *SubImpl:
		return CloneRefOfSubImpl(in)
	case ValueContainer:
		return CloneValueContainer(in)
	case ValueSliceContainer:
		return CloneValueSliceContainer(in)
	default:
		// this should never happen
		return nil
	}
}

// CloneBytes creates a deep clone of the input.
func CloneBytes(n Bytes) Bytes {
	res := make(Bytes, 0, len(n))
	copy(res, n)
	return res
}

// CloneInterfaceContainer creates a deep clone of the input.
func CloneInterfaceContainer(n InterfaceContainer) InterfaceContainer {
	return *CloneRefOfInterfaceContainer(&n)
}

// CloneInterfaceSlice creates a deep clone of the input.
func CloneInterfaceSlice(n InterfaceSlice) InterfaceSlice {
	res := make(InterfaceSlice, 0, len(n))
	for _, x := range n {
		res = append(res, CloneAST(x))
	}
	return res
}

// CloneLeafSlice creates a deep clone of the input.
func CloneLeafSlice(n LeafSlice) LeafSlice {
	res := make(LeafSlice, 0, len(n))
	for _, x := range n {
		res = append(res, CloneRefOfLeaf(x))
	}
	return res
}

// CloneRefOfBool creates a deep clone of the input.
func CloneRefOfBool(n *bool) *bool {
	if n == nil {
		return nil
	}
	out := *n
	return &out
}

// CloneRefOfInterfaceContainer creates a deep clone of the input.
func CloneRefOfInterfaceContainer(n *InterfaceContainer) *InterfaceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.v = n.v
	return &out
}

// CloneRefOfLeaf creates a deep clone of the input.
func CloneRefOfLeaf(n *Leaf) *Leaf {
	if n == nil {
		return nil
	}
	out := *n
	return &out
}

// CloneRefOfNoCloneType creates a deep clone of the input.
func CloneRefOfNoCloneType(n *NoCloneType) *NoCloneType {
	return n
}

// CloneRefOfRefContainer creates a deep clone of the input.
func CloneRefOfRefContainer(n *RefContainer) *RefContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTType = CloneAST(n.ASTType)
	out.ASTImplementationType = CloneRefOfLeaf(n.ASTImplementationType)
	return &out
}

// CloneRefOfRefSliceContainer creates a deep clone of the input.
func CloneRefOfRefSliceContainer(n *RefSliceContainer) *RefSliceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTElements = CloneSliceOfAST(n.ASTElements)
	out.NotASTElements = CloneSliceOfInt(n.NotASTElements)
	out.ASTImplementationElements = CloneSliceOfRefOfLeaf(n.ASTImplementationElements)
	return &out
}

// CloneRefOfSubImpl creates a deep clone of the input.
func CloneRefOfSubImpl(n *SubImpl) *SubImpl {
	if n == nil {
		return nil
	}
	out := *n
	out.inner = CloneSubIface(n.inner)
	out.field = CloneRefOfBool(n.field)
	return &out
}

// CloneRefOfValueContainer creates a deep clone of the input.
func CloneRefOfValueContainer(n *ValueContainer) *ValueContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTType = CloneAST(n.ASTType)
	out.ASTImplementationType = CloneRefOfLeaf(n.ASTImplementationType)
	return &out
}

// CloneRefOfValueSliceContainer creates a deep clone of the input.
func CloneRefOfValueSliceContainer(n *ValueSliceContainer) *ValueSliceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTElements = CloneSliceOfAST(n.ASTElements)
	out.NotASTElements = CloneSliceOfInt(n.NotASTElements)
	out.ASTImplementationElements = CloneSliceOfRefOfLeaf(n.ASTImplementationElements)
	return &out
}

// CloneSliceOfAST creates a deep clone of the input.
func CloneSliceOfAST(n []AST) []AST {
	res := make([]AST, 0, len(n))
	for _, x := range n {
		res = append(res, CloneAST(x))
	}
	return res
}

// CloneSliceOfInt creates a deep clone of the input.
func CloneSliceOfInt(n []int) []int {
	res := make([]int, 0, len(n))
	copy(res, n)
	return res
}

// CloneSliceOfRefOfLeaf creates a deep clone of the input.
func CloneSliceOfRefOfLeaf(n []*Leaf) []*Leaf {
	res := make([]*Leaf, 0, len(n))
	for _, x := range n {
		res = append(res, CloneRefOfLeaf(x))
	}
	return res
}

// CloneSubIface creates a deep clone of the input.
func CloneSubIface(in SubIface) SubIface {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *SubImpl:
		return CloneRefOfSubImpl(in)
	default:
		// this should never happen
		return nil
	}
}

// CloneValueContainer creates a deep clone of the input.
func CloneValueContainer(n ValueContainer) ValueContainer {
	return *CloneRefOfValueContainer(&n)
}

// CloneValueSliceContainer creates a deep clone of the input.
func CloneValueSliceContainer(n ValueSliceContainer) ValueSliceContainer {
	return *CloneRefOfValueSliceContainer(&n)
}

// EqualsAST does deep equals between the two objects.
func EqualsAST(inA, inB AST) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case BasicType:
		b, ok := inB.(BasicType)
		if !ok {
			return false
		}
		return a == b
	case Bytes:
		b, ok := inB.(Bytes)
		if !ok {
			return false
		}
		return EqualsBytes(a, b)
	case InterfaceContainer:
		b, ok := inB.(InterfaceContainer)
		if !ok {
			return false
		}
		return EqualsInterfaceContainer(a, b)
	case InterfaceSlice:
		b, ok := inB.(InterfaceSlice)
		if !ok {
			return false
		}
		return EqualsInterfaceSlice(a, b)
	case *Leaf:
		b, ok := inB.(*Leaf)
		if !ok {
			return false
		}
		return EqualsRefOfLeaf(a, b)
	case LeafSlice:
		b, ok := inB.(LeafSlice)
		if !ok {
			return false
		}
		return EqualsLeafSlice(a, b)
	case *NoCloneType:
		b, ok := inB.(*NoCloneType)
		if !ok {
			return false
		}
		return EqualsRefOfNoCloneType(a, b)
	case *RefContainer:
		b, ok := inB.(*RefContainer)
		if !ok {
			return false
		}
		return EqualsRefOfRefContainer(a, b)
	case *RefSliceContainer:
		b, ok := inB.(*RefSliceContainer)
		if !ok {
			return false
		}
		return EqualsRefOfRefSliceContainer(a, b)
	case *SubImpl:
		b, ok := inB.(*SubImpl)
		if !ok {
			return false
		}
		return EqualsRefOfSubImpl(a, b)
	case ValueContainer:
		b, ok := inB.(ValueContainer)
		if !ok {
			return false
		}
		return EqualsValueContainer(a, b)
	case ValueSliceContainer:
		b, ok := inB.(ValueSliceContainer)
		if !ok {
			return false
		}
		return EqualsValueSliceContainer(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsBytes does deep equals between the two objects.
func EqualsBytes(a, b Bytes) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsInterfaceContainer does deep equals between the two objects.
func EqualsInterfaceContainer(a, b InterfaceContainer) bool {
	return true
}

// EqualsInterfaceSlice does deep equals between the two objects.
func EqualsInterfaceSlice(a, b InterfaceSlice) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAST(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsLeafSlice does deep equals between the two objects.
func EqualsLeafSlice(a, b LeafSlice) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfLeaf(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsRefOfBool does deep equals between the two objects.
func EqualsRefOfBool(a, b *bool) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return *a == *b
}

// EqualsRefOfInterfaceContainer does deep equals between the two objects.
func EqualsRefOfInterfaceContainer(a, b *InterfaceContainer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return true
}

// EqualsRefOfLeaf does deep equals between the two objects.
func EqualsRefOfLeaf(a, b *Leaf) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsRefOfNoCloneType does deep equals between the two objects.
func EqualsRefOfNoCloneType(a, b *NoCloneType) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.v == b.v
}

// EqualsRefOfRefContainer does deep equals between the two objects.
func EqualsRefOfRefContainer(a, b *RefContainer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType)
}

// EqualsRefOfRefSliceContainer does deep equals between the two objects.
func EqualsRefOfRefSliceContainer(a, b *RefSliceContainer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements)
}

// EqualsRefOfSubImpl does deep equals between the two objects.
func EqualsRefOfSubImpl(a, b *SubImpl) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSubIface(a.inner, b.inner) &&
		EqualsRefOfBool(a.field, b.field)
}

// EqualsRefOfValueContainer does deep equals between the two objects.
func EqualsRefOfValueContainer(a, b *ValueContainer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType)
}

// EqualsRefOfValueSliceContainer does deep equals between the two objects.
func EqualsRefOfValueSliceContainer(a, b *ValueSliceContainer) bool {
	if a == b {
		return true
	}
	if a == nil || b == nil {
		return false
	}
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements)
}

// EqualsSliceOfAST does deep equals between the two objects.
func EqualsSliceOfAST(a, b []AST) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsAST(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSliceOfInt does deep equals between the two objects.
func EqualsSliceOfInt(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// EqualsSliceOfRefOfLeaf does deep equals between the two objects.
func EqualsSliceOfRefOfLeaf(a, b []*Leaf) bool {
	if len(a) != len(b) {
		return false
	}
	for i := 0; i < len(a); i++ {
		if !EqualsRefOfLeaf(a[i], b[i]) {
			return false
		}
	}
	return true
}

// EqualsSubIface does deep equals between the two objects.
func EqualsSubIface(inA, inB SubIface) bool {
	if inA == nil && inB == nil {
		return true
	}
	if inA == nil || inB == nil {
		return false
	}
	switch a := inA.(type) {
	case *SubImpl:
		b, ok := inB.(*SubImpl)
		if !ok {
			return false
		}
		return EqualsRefOfSubImpl(a, b)
	default:
		// this should never happen
		return false
	}
}

// EqualsValueContainer does deep equals between the two objects.
func EqualsValueContainer(a, b ValueContainer) bool {
	return a.NotASTType == b.NotASTType &&
		EqualsAST(a.ASTType, b.ASTType) &&
		EqualsRefOfLeaf(a.ASTImplementationType, b.ASTImplementationType)
}

// EqualsValueSliceContainer does deep equals between the two objects.
func EqualsValueSliceContainer(a, b ValueSliceContainer) bool {
	return EqualsSliceOfAST(a.ASTElements, b.ASTElements) &&
		EqualsSliceOfInt(a.NotASTElements, b.NotASTElements) &&
		EqualsSliceOfRefOfLeaf(a.ASTImplementationElements, b.ASTImplementationElements)
}
func VisitAST(in AST, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case BasicType:
		return VisitBasicType(in, f)
	case Bytes:
		return VisitBytes(in, f)
	case InterfaceContainer:
		return VisitInterfaceContainer(in, f)
	case InterfaceSlice:
		return VisitInterfaceSlice(in, f)
	case *Leaf:
		return VisitRefOfLeaf(in, f)
	case LeafSlice:
		return VisitLeafSlice(in, f)
	case *NoCloneType:
		return VisitRefOfNoCloneType(in, f)
	case *RefContainer:
		return VisitRefOfRefContainer(in, f)
	case *RefSliceContainer:
		return VisitRefOfRefSliceContainer(in, f)
	case *SubImpl:
		return VisitRefOfSubImpl(in, f)
	case ValueContainer:
		return VisitValueContainer(in, f)
	case ValueSliceContainer:
		return VisitValueSliceContainer(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitBasicType(in BasicType, f Visit) error {
	_, err := f(in)
	return err
}
func VisitBytes(in Bytes, f Visit) error {
	_, err := f(in)
	return err
}
func VisitInterfaceContainer(in InterfaceContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitInterfaceSlice(in InterfaceSlice, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitLeafSlice(in LeafSlice, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfInterfaceContainer(in *InterfaceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfLeaf(in *Leaf, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfNoCloneType(in *NoCloneType, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func VisitRefOfRefContainer(in *RefContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfRefSliceContainer(in *RefSliceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitRefOfSubImpl(in *SubImpl, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSubIface(in.inner, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfValueContainer(in *ValueContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitRefOfValueSliceContainer(in *ValueSliceContainer, f Visit) error {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func VisitSubIface(in SubIface, f Visit) error {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *SubImpl:
		return VisitRefOfSubImpl(in, f)
	default:
		// this should never happen
		return nil
	}
}
func VisitValueContainer(in ValueContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitAST(in.ASTType, f); err != nil {
		return err
	}
	if err := VisitRefOfLeaf(in.ASTImplementationType, f); err != nil {
		return err
	}
	return nil
}
func VisitValueSliceContainer(in ValueSliceContainer, f Visit) error {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.ASTElements {
		if err := VisitAST(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.ASTImplementationElements {
		if err := VisitRefOfLeaf(el, f); err != nil {
			return err
		}
	}
	return nil
}
func (a *application) rewriteAST(parent AST, node AST, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	switch node := node.(type) {
	case BasicType:
		return a.rewriteBasicType(parent, node, replacer)
	case Bytes:
		return a.rewriteBytes(parent, node, replacer)
	case InterfaceContainer:
		return a.rewriteInterfaceContainer(parent, node, replacer)
	case InterfaceSlice:
		return a.rewriteInterfaceSlice(parent, node, replacer)
	case *Leaf:
		return a.rewriteRefOfLeaf(parent, node, replacer)
	case LeafSlice:
		return a.rewriteLeafSlice(parent, node, replacer)
	case *NoCloneType:
		return a.rewriteRefOfNoCloneType(parent, node, replacer)
	case *RefContainer:
		return a.rewriteRefOfRefContainer(parent, node, replacer)
	case *RefSliceContainer:
		return a.rewriteRefOfRefSliceContainer(parent, node, replacer)
	case *SubImpl:
		return a.rewriteRefOfSubImpl(parent, node, replacer)
	case ValueContainer:
		return a.rewriteValueContainer(parent, node, replacer)
	case ValueSliceContainer:
		return a.rewriteValueSliceContainer(parent, node, replacer)
	default:
		// this should never happen
		return nil
	}
}
func (a *application) rewriteBasicType(parent AST, node BasicType, replacer replacerFunc) error {
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteBytes(parent AST, node Bytes, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteInterfaceContainer(parent AST, node InterfaceContainer, replacer replacerFunc) error {
	var err error
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if err != nil {
		return err
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteInterfaceSlice(parent AST, node InterfaceSlice, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	for i, el := range node {
		if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
			parent.(InterfaceSlice)[i] = newNode.(AST)
		}); errF != nil {
			return errF
		}
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteLeafSlice(parent AST, node LeafSlice, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	for i, el := range node {
		if errF := a.rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
			parent.(LeafSlice)[i] = newNode.(*Leaf)
		}); errF != nil {
			return errF
		}
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfInterfaceContainer(parent AST, node *InterfaceContainer, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfLeaf(parent AST, node *Leaf, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfNoCloneType(parent AST, node *NoCloneType, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if a.post != nil {
		if a.pre == nil {
			a.cur.replacer = replacer
			a.cur.parent = parent
			a.cur.node = node
		}
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfRefContainer(parent AST, node *RefContainer, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if errF := a.rewriteAST(node, node.ASTType, func(newNode, parent AST) {
		parent.(*RefContainer).ASTType = newNode.(AST)
	}); errF != nil {
		return errF
	}
	if errF := a.rewriteRefOfLeaf(node, node.ASTImplementationType, func(newNode, parent AST) {
		parent.(*RefContainer).ASTImplementationType = newNode.(*Leaf)
	}); errF != nil {
		return errF
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfRefSliceContainer(parent AST, node *RefSliceContainer, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	for i, el := range node.ASTElements {
		if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
			parent.(*RefSliceContainer).ASTElements[i] = newNode.(AST)
		}); errF != nil {
			return errF
		}
	}
	for i, el := range node.ASTImplementationElements {
		if errF := a.rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
			parent.(*RefSliceContainer).ASTImplementationElements[i] = newNode.(*Leaf)
		}); errF != nil {
			return errF
		}
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfSubImpl(parent AST, node *SubImpl, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if errF := a.rewriteSubIface(node, node.inner, func(newNode, parent AST) {
		parent.(*SubImpl).inner = newNode.(SubIface)
	}); errF != nil {
		return errF
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfValueContainer(parent AST, node *ValueContainer, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if errF := a.rewriteAST(node, node.ASTType, func(newNode, parent AST) {
		parent.(*ValueContainer).ASTType = newNode.(AST)
	}); errF != nil {
		return errF
	}
	if errF := a.rewriteRefOfLeaf(node, node.ASTImplementationType, func(newNode, parent AST) {
		parent.(*ValueContainer).ASTImplementationType = newNode.(*Leaf)
	}); errF != nil {
		return errF
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteRefOfValueSliceContainer(parent AST, node *ValueSliceContainer, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	for i, el := range node.ASTElements {
		if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
			parent.(*ValueSliceContainer).ASTElements[i] = newNode.(AST)
		}); errF != nil {
			return errF
		}
	}
	for i, el := range node.ASTImplementationElements {
		if errF := a.rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
			parent.(*ValueSliceContainer).ASTImplementationElements[i] = newNode.(*Leaf)
		}); errF != nil {
			return errF
		}
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteSubIface(parent AST, node SubIface, replacer replacerFunc) error {
	if node == nil {
		return nil
	}
	switch node := node.(type) {
	case *SubImpl:
		return a.rewriteRefOfSubImpl(parent, node, replacer)
	default:
		// this should never happen
		return nil
	}
}
func (a *application) rewriteValueContainer(parent AST, node ValueContainer, replacer replacerFunc) error {
	var err error
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	if errF := a.rewriteAST(node, node.ASTType, func(newNode, parent AST) {
		err = vterrors.New(vtrpc.Code_INTERNAL, "[BUG] tried to replace 'ASTType' on 'ValueContainer'")
	}); errF != nil {
		return errF
	}
	if errF := a.rewriteRefOfLeaf(node, node.ASTImplementationType, func(newNode, parent AST) {
		err = vterrors.New(vtrpc.Code_INTERNAL, "[BUG] tried to replace 'ASTImplementationType' on 'ValueContainer'")
	}); errF != nil {
		return errF
	}
	if err != nil {
		return err
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}
func (a *application) rewriteValueSliceContainer(parent AST, node ValueSliceContainer, replacer replacerFunc) error {
	var err error
	if a.pre != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.pre(&a.cur) {
			return nil
		}
	}
	for _, el := range node.ASTElements {
		if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
			err = vterrors.New(vtrpc.Code_INTERNAL, "[BUG] tried to replace 'ASTElements' on 'ValueSliceContainer'")
		}); errF != nil {
			return errF
		}
	}
	for _, el := range node.ASTImplementationElements {
		if errF := a.rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
			err = vterrors.New(vtrpc.Code_INTERNAL, "[BUG] tried to replace 'ASTImplementationElements' on 'ValueSliceContainer'")
		}); errF != nil {
			return errF
		}
	}
	if err != nil {
		return err
	}
	if a.post != nil {
		a.cur.replacer = replacer
		a.cur.parent = parent
		a.cur.node = node
		if !a.post(&a.cur) {
			return errAbort
		}
	}
	return nil
}

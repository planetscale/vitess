/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

func CloneAST(in AST) AST {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case BasicType:
		return in
	case Bytes:
		return CloneBytes(in)
	case InterfaceContainer:
		return CloneInterfaceContainer(in)
	case InterfaceSlice:
		return CloneInterfaceSlice(in)
	case *Leaf:
		return CloneRefOfLeaf(in)
	case LeafSlice:
		return CloneLeafSlice(in)
	case *RefContainer:
		return CloneRefOfRefContainer(in)
	case *RefSliceContainer:
		return CloneRefOfRefSliceContainer(in)
	case *SubImpl:
		return CloneRefOfSubImpl(in)
	case ValueContainer:
		return CloneValueContainer(in)
	case ValueSliceContainer:
		return CloneValueSliceContainer(in)
	default:
		// this should never happen
		return nil
	}
}
func CloneSubIface(in SubIface) SubIface {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *SubImpl:
		return CloneRefOfSubImpl(in)
	default:
		// this should never happen
		return nil
	}
}
func CloneBytes(n Bytes) Bytes {
	res := make(Bytes, 0, len(n))
	copy(res, n)
	return res
}
func CloneInterfaceContainer(n InterfaceContainer) InterfaceContainer {
	return *CloneRefOfInterfaceContainer(&n)
}
func CloneInterfaceSlice(n InterfaceSlice) InterfaceSlice {
	res := make(InterfaceSlice, 0, len(n))
	for _, x := range n {
		res = append(res, CloneAST(x))
	}
	return res
}
func CloneRefOfLeaf(n *Leaf) *Leaf {
	if n == nil {
		return nil
	}
	out := *n
	return &out
}
func CloneLeafSlice(n LeafSlice) LeafSlice {
	res := make(LeafSlice, 0, len(n))
	for _, x := range n {
		res = append(res, CloneRefOfLeaf(x))
	}
	return res
}
func CloneRefOfRefContainer(n *RefContainer) *RefContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTType = CloneAST(n.ASTType)
	out.ASTImplementationType = CloneRefOfLeaf(n.ASTImplementationType)
	return &out
}
func CloneRefOfRefSliceContainer(n *RefSliceContainer) *RefSliceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTElements = CloneSliceOfAST(n.ASTElements)
	out.NotASTElements = CloneSliceOfint(n.NotASTElements)
	out.ASTImplementationElements = CloneSliceOfRefOfLeaf(n.ASTImplementationElements)
	return &out
}
func CloneRefOfSubImpl(n *SubImpl) *SubImpl {
	if n == nil {
		return nil
	}
	out := *n
	out.inner = CloneSubIface(n.inner)
	return &out
}
func CloneValueContainer(n ValueContainer) ValueContainer {
	return *CloneRefOfValueContainer(&n)
}
func CloneValueSliceContainer(n ValueSliceContainer) ValueSliceContainer {
	return *CloneRefOfValueSliceContainer(&n)
}
func CloneRefOfInterfaceContainer(n *InterfaceContainer) *InterfaceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.v = n.v
	return &out
}
func CloneSliceOfAST(n []AST) []AST {
	res := make([]AST, 0, len(n))
	for _, x := range n {
		res = append(res, CloneAST(x))
	}
	return res
}
func CloneSliceOfint(n []int) []int {
	res := make([]int, 0, len(n))
	copy(res, n)
	return res
}
func CloneSliceOfRefOfLeaf(n []*Leaf) []*Leaf {
	res := make([]*Leaf, 0, len(n))
	for _, x := range n {
		res = append(res, CloneRefOfLeaf(x))
	}
	return res
}
func CloneRefOfValueContainer(n *ValueContainer) *ValueContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTType = CloneAST(n.ASTType)
	out.ASTImplementationType = CloneRefOfLeaf(n.ASTImplementationType)
	return &out
}
func CloneRefOfValueSliceContainer(n *ValueSliceContainer) *ValueSliceContainer {
	if n == nil {
		return nil
	}
	out := *n
	out.ASTElements = CloneSliceOfAST(n.ASTElements)
	out.NotASTElements = CloneSliceOfint(n.NotASTElements)
	out.ASTImplementationElements = CloneSliceOfRefOfLeaf(n.ASTImplementationElements)
	return &out
}

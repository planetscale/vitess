// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vtgate.proto

package vtgate

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
	query "vitess.io/vitess/go/vt/proto/query"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vtrpc "vitess.io/vitess/go/vt/proto/vtrpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TransactionMode controls the execution of distributed transaction
// across multiple shards.
type TransactionMode int32

const (
	// UNSPECIFIED uses the transaction mode set by the VTGate flag 'transaction_mode'.
	TransactionMode_UNSPECIFIED TransactionMode = 0
	// SINGLE disallows distributed transactions.
	TransactionMode_SINGLE TransactionMode = 1
	// MULTI allows distributed transactions with best effort commit.
	TransactionMode_MULTI TransactionMode = 2
	// TWOPC is for distributed transactions with atomic commits.
	TransactionMode_TWOPC TransactionMode = 3
)

var TransactionMode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SINGLE",
	2: "MULTI",
	3: "TWOPC",
}

var TransactionMode_value = map[string]int32{
	"UNSPECIFIED": 0,
	"SINGLE":      1,
	"MULTI":       2,
	"TWOPC":       3,
}

func (x TransactionMode) String() string {
	return proto.EnumName(TransactionMode_name, int32(x))
}

func (TransactionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{0}
}

// CommitOrder is used to designate which of the ShardSessions
// get used for transactions.
type CommitOrder int32

const (
	// NORMAL is the default commit order.
	CommitOrder_NORMAL CommitOrder = 0
	// PRE is used to designate pre_sessions.
	CommitOrder_PRE CommitOrder = 1
	// POST is used to designate post_sessions.
	CommitOrder_POST CommitOrder = 2
	// AUTOCOMMIT is used to run the statement as autocommitted transaction.
	CommitOrder_AUTOCOMMIT CommitOrder = 3
)

var CommitOrder_name = map[int32]string{
	0: "NORMAL",
	1: "PRE",
	2: "POST",
	3: "AUTOCOMMIT",
}

var CommitOrder_value = map[string]int32{
	"NORMAL":     0,
	"PRE":        1,
	"POST":       2,
	"AUTOCOMMIT": 3,
}

func (x CommitOrder) String() string {
	return proto.EnumName(CommitOrder_name, int32(x))
}

func (CommitOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{1}
}

// Session objects are exchanged like cookies through various
// calls to VTGate. The behavior differs between V2 & V3 APIs.
// V3 APIs are Execute, ExecuteBatch and StreamExecute. All
// other APIs are V2. For the V3 APIs, the session
// must be sent with every call to Execute or ExecuteBatch.
// For the V2 APIs, Begin does not accept a session. It instead
// returns a brand new one with in_transaction set to true.
// After a call to Commit or Rollback, the session can be
// discarded. If you're not in a transaction, Session is
// an optional parameter for the V2 APIs.
type Session struct {
	// in_transaction is set to true if the session is in a transaction.
	InTransaction bool `protobuf:"varint,1,opt,name=in_transaction,json=inTransaction,proto3" json:"in_transaction,omitempty"`
	// shard_sessions keep track of per-shard transaction info.
	ShardSessions []*Session_ShardSession `protobuf:"bytes,2,rep,name=shard_sessions,json=shardSessions,proto3" json:"shard_sessions,omitempty"`
	// single_db is deprecated. Use transaction_mode instead.
	// The value specifies if the transaction should be restricted
	// to a single shard.
	// TODO(sougou): remove in 3.1
	SingleDb bool `protobuf:"varint,3,opt,name=single_db,json=singleDb,proto3" json:"single_db,omitempty"`
	// autocommit specifies if the session is in autocommit mode.
	// This is used only for V3.
	Autocommit bool `protobuf:"varint,4,opt,name=autocommit,proto3" json:"autocommit,omitempty"`
	// target_string is the target expressed as a string. Valid
	// names are: keyspace:shard@target, keyspace@target or @target.
	// This is used only for V3.
	TargetString string `protobuf:"bytes,5,opt,name=target_string,json=targetString,proto3" json:"target_string,omitempty"`
	// options is used only for V3.
	Options *query.ExecuteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	// transaction_mode specifies the current transaction mode.
	TransactionMode TransactionMode `protobuf:"varint,7,opt,name=transaction_mode,json=transactionMode,proto3,enum=vtgate.TransactionMode" json:"transaction_mode,omitempty"`
	// warnings contains non-fatal warnings from the previous query
	Warnings []*query.QueryWarning `protobuf:"bytes,8,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// pre_sessions contains sessions that have to be committed first.
	PreSessions []*Session_ShardSession `protobuf:"bytes,9,rep,name=pre_sessions,json=preSessions,proto3" json:"pre_sessions,omitempty"`
	// post_sessions contains sessions that have to be committed last.
	PostSessions []*Session_ShardSession `protobuf:"bytes,10,rep,name=post_sessions,json=postSessions,proto3" json:"post_sessions,omitempty"`
	// last_insert_id keeps track of the last seen insert_id for this session
	LastInsertId uint64 `protobuf:"varint,11,opt,name=last_insert_id,json=lastInsertId,proto3" json:"last_insert_id,omitempty"`
	// found_rows keeps track of how many rows the last query returned
	FoundRows uint64 `protobuf:"varint,12,opt,name=found_rows,json=foundRows,proto3" json:"found_rows,omitempty"`
	// user_defined_variables contains all the @variables defined for this session
	UserDefinedVariables map[string]*query.BindVariable `protobuf:"bytes,13,rep,name=user_defined_variables,json=userDefinedVariables,proto3" json:"user_defined_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// system_variables keeps track of all session variables set for this connection
	// TODO: systay should we keep this so we can apply it ordered?
	SystemVariables map[string]string `protobuf:"bytes,14,rep,name=system_variables,json=systemVariables,proto3" json:"system_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// row_count keeps track of the last seen rows affected for this session
	RowCount             int64    `protobuf:"varint,15,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{0}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetInTransaction() bool {
	if m != nil {
		return m.InTransaction
	}
	return false
}

func (m *Session) GetShardSessions() []*Session_ShardSession {
	if m != nil {
		return m.ShardSessions
	}
	return nil
}

func (m *Session) GetSingleDb() bool {
	if m != nil {
		return m.SingleDb
	}
	return false
}

func (m *Session) GetAutocommit() bool {
	if m != nil {
		return m.Autocommit
	}
	return false
}

func (m *Session) GetTargetString() string {
	if m != nil {
		return m.TargetString
	}
	return ""
}

func (m *Session) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Session) GetTransactionMode() TransactionMode {
	if m != nil {
		return m.TransactionMode
	}
	return TransactionMode_UNSPECIFIED
}

func (m *Session) GetWarnings() []*query.QueryWarning {
	if m != nil {
		return m.Warnings
	}
	return nil
}

func (m *Session) GetPreSessions() []*Session_ShardSession {
	if m != nil {
		return m.PreSessions
	}
	return nil
}

func (m *Session) GetPostSessions() []*Session_ShardSession {
	if m != nil {
		return m.PostSessions
	}
	return nil
}

func (m *Session) GetLastInsertId() uint64 {
	if m != nil {
		return m.LastInsertId
	}
	return 0
}

func (m *Session) GetFoundRows() uint64 {
	if m != nil {
		return m.FoundRows
	}
	return 0
}

func (m *Session) GetUserDefinedVariables() map[string]*query.BindVariable {
	if m != nil {
		return m.UserDefinedVariables
	}
	return nil
}

func (m *Session) GetSystemVariables() map[string]string {
	if m != nil {
		return m.SystemVariables
	}
	return nil
}

func (m *Session) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

type Session_ShardSession struct {
	Target               *query.Target         `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId        int64                 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TabletAlias          *topodata.TabletAlias `protobuf:"bytes,3,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tablet_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Session_ShardSession) Reset()         { *m = Session_ShardSession{} }
func (m *Session_ShardSession) String() string { return proto.CompactTextString(m) }
func (*Session_ShardSession) ProtoMessage()    {}
func (*Session_ShardSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{0, 0}
}

func (m *Session_ShardSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session_ShardSession.Unmarshal(m, b)
}
func (m *Session_ShardSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session_ShardSession.Marshal(b, m, deterministic)
}
func (m *Session_ShardSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session_ShardSession.Merge(m, src)
}
func (m *Session_ShardSession) XXX_Size() int {
	return xxx_messageInfo_Session_ShardSession.Size(m)
}
func (m *Session_ShardSession) XXX_DiscardUnknown() {
	xxx_messageInfo_Session_ShardSession.DiscardUnknown(m)
}

var xxx_messageInfo_Session_ShardSession proto.InternalMessageInfo

func (m *Session_ShardSession) GetTarget() *query.Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Session_ShardSession) GetTransactionId() int64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *Session_ShardSession) GetTabletAlias() *topodata.TabletAlias {
	if m != nil {
		return m.TabletAlias
	}
	return nil
}

// ExecuteRequest is the payload to Execute.
type ExecuteRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// These values are deprecated. Use session instead.
	// TODO(sougou): remove in 3.1
	TabletType           topodata.TabletType   `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	KeyspaceShard        string                `protobuf:"bytes,6,opt,name=keyspace_shard,json=keyspaceShard,proto3" json:"keyspace_shard,omitempty"`
	Options              *query.ExecuteOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{1}
}

func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ExecuteRequest) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

func (m *ExecuteRequest) GetKeyspaceShard() string {
	if m != nil {
		return m.KeyspaceShard
	}
	return ""
}

func (m *ExecuteRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteResponse is the returned value from Execute.
type ExecuteResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// session is the updated session information.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// result contains the query result, only set if error is unset.
	Result               *query.QueryResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{2}
}

func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch.
type ExecuteBatchRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// session carries the session state.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// queries is a list of query and bind variables to execute.
	Queries []*query.BoundQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	// These values are deprecated. Use session instead.
	// TODO(sougou): remove in 3.1
	TabletType           topodata.TabletType   `protobuf:"varint,4,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	AsTransaction        bool                  `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction,proto3" json:"as_transaction,omitempty"`
	KeyspaceShard        string                `protobuf:"bytes,6,opt,name=keyspace_shard,json=keyspaceShard,proto3" json:"keyspace_shard,omitempty"`
	Options              *query.ExecuteOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ExecuteBatchRequest) Reset()         { *m = ExecuteBatchRequest{} }
func (m *ExecuteBatchRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchRequest) ProtoMessage()    {}
func (*ExecuteBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{3}
}

func (m *ExecuteBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBatchRequest.Unmarshal(m, b)
}
func (m *ExecuteBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBatchRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchRequest.Merge(m, src)
}
func (m *ExecuteBatchRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteBatchRequest.Size(m)
}
func (m *ExecuteBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchRequest proto.InternalMessageInfo

func (m *ExecuteBatchRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ExecuteBatchRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchRequest) GetQueries() []*query.BoundQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *ExecuteBatchRequest) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

func (m *ExecuteBatchRequest) GetAsTransaction() bool {
	if m != nil {
		return m.AsTransaction
	}
	return false
}

func (m *ExecuteBatchRequest) GetKeyspaceShard() string {
	if m != nil {
		return m.KeyspaceShard
	}
	return ""
}

func (m *ExecuteBatchRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch.
type ExecuteBatchResponse struct {
	// error contains an application level error if necessary. Note the
	// session may have changed, even when an error is returned (for
	// instance if a database integrity error happened).
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// session is the updated session information.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// results contains the query results, only set if application level error is unset.
	Results              []*query.ResultWithError `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ExecuteBatchResponse) Reset()         { *m = ExecuteBatchResponse{} }
func (m *ExecuteBatchResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteBatchResponse) ProtoMessage()    {}
func (*ExecuteBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{4}
}

func (m *ExecuteBatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteBatchResponse.Unmarshal(m, b)
}
func (m *ExecuteBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteBatchResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteBatchResponse.Merge(m, src)
}
func (m *ExecuteBatchResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteBatchResponse.Size(m)
}
func (m *ExecuteBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteBatchResponse proto.InternalMessageInfo

func (m *ExecuteBatchResponse) GetError() *vtrpc.RPCError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ExecuteBatchResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecuteBatchResponse) GetResults() []*query.ResultWithError {
	if m != nil {
		return m.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute.
type StreamExecuteRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// query is the query and bind variables to execute.
	Query *query.BoundQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// These values are deprecated. Use session instead.
	// TODO(sougou): remove in 3.1
	TabletType    topodata.TabletType   `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	KeyspaceShard string                `protobuf:"bytes,4,opt,name=keyspace_shard,json=keyspaceShard,proto3" json:"keyspace_shard,omitempty"`
	Options       *query.ExecuteOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	// session carries the session state.
	Session              *Session `protobuf:"bytes,6,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamExecuteRequest) Reset()         { *m = StreamExecuteRequest{} }
func (m *StreamExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteRequest) ProtoMessage()    {}
func (*StreamExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{5}
}

func (m *StreamExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamExecuteRequest.Unmarshal(m, b)
}
func (m *StreamExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamExecuteRequest.Marshal(b, m, deterministic)
}
func (m *StreamExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamExecuteRequest.Merge(m, src)
}
func (m *StreamExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_StreamExecuteRequest.Size(m)
}
func (m *StreamExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamExecuteRequest proto.InternalMessageInfo

func (m *StreamExecuteRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *StreamExecuteRequest) GetQuery() *query.BoundQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StreamExecuteRequest) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

func (m *StreamExecuteRequest) GetKeyspaceShard() string {
	if m != nil {
		return m.KeyspaceShard
	}
	return ""
}

func (m *StreamExecuteRequest) GetOptions() *query.ExecuteOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *StreamExecuteRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// StreamExecuteResponse is the returned value from StreamExecute.
// The session is currently not returned because StreamExecute is
// not expected to modify it.
type StreamExecuteResponse struct {
	// result contains the result data.
	// The first value contains only Fields information.
	// The next values contain the actual rows, a few values per result.
	Result               *query.QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StreamExecuteResponse) Reset()         { *m = StreamExecuteResponse{} }
func (m *StreamExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*StreamExecuteResponse) ProtoMessage()    {}
func (*StreamExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{6}
}

func (m *StreamExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamExecuteResponse.Unmarshal(m, b)
}
func (m *StreamExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamExecuteResponse.Marshal(b, m, deterministic)
}
func (m *StreamExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamExecuteResponse.Merge(m, src)
}
func (m *StreamExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_StreamExecuteResponse.Size(m)
}
func (m *StreamExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamExecuteResponse proto.InternalMessageInfo

func (m *StreamExecuteResponse) GetResult() *query.QueryResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// ResolveTransactionRequest is the payload to ResolveTransaction.
type ResolveTransactionRequest struct {
	// caller_id identifies the caller. This is the effective caller ID,
	// set by the application to further identify the caller.
	CallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// dtid is the dtid of the transaction to be resolved.
	Dtid                 string   `protobuf:"bytes,2,opt,name=dtid,proto3" json:"dtid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveTransactionRequest) Reset()         { *m = ResolveTransactionRequest{} }
func (m *ResolveTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveTransactionRequest) ProtoMessage()    {}
func (*ResolveTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{7}
}

func (m *ResolveTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveTransactionRequest.Unmarshal(m, b)
}
func (m *ResolveTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveTransactionRequest.Marshal(b, m, deterministic)
}
func (m *ResolveTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveTransactionRequest.Merge(m, src)
}
func (m *ResolveTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_ResolveTransactionRequest.Size(m)
}
func (m *ResolveTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveTransactionRequest proto.InternalMessageInfo

func (m *ResolveTransactionRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *ResolveTransactionRequest) GetDtid() string {
	if m != nil {
		return m.Dtid
	}
	return ""
}

// ResolveTransactionResponse is the returned value from Rollback.
type ResolveTransactionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveTransactionResponse) Reset()         { *m = ResolveTransactionResponse{} }
func (m *ResolveTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveTransactionResponse) ProtoMessage()    {}
func (*ResolveTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{8}
}

func (m *ResolveTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveTransactionResponse.Unmarshal(m, b)
}
func (m *ResolveTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveTransactionResponse.Marshal(b, m, deterministic)
}
func (m *ResolveTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveTransactionResponse.Merge(m, src)
}
func (m *ResolveTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_ResolveTransactionResponse.Size(m)
}
func (m *ResolveTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveTransactionResponse proto.InternalMessageInfo

// VStreamRequest is the payload for VStream.
type VStreamRequest struct {
	CallerId   *vtrpc.CallerID     `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	TabletType topodata.TabletType `protobuf:"varint,2,opt,name=tablet_type,json=tabletType,proto3,enum=topodata.TabletType" json:"tablet_type,omitempty"`
	// position specifies the starting point of the bin log positions
	// as well as the keyspace-shards to pull events from.
	// position is of the form 'ks1:0@MySQL56/<mysql_pos>|ks2:-80@MySQL56/<mysql_pos>'.
	Vgtid                *binlogdata.VGtid  `protobuf:"bytes,3,opt,name=vgtid,proto3" json:"vgtid,omitempty"`
	Filter               *binlogdata.Filter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VStreamRequest) Reset()         { *m = VStreamRequest{} }
func (m *VStreamRequest) String() string { return proto.CompactTextString(m) }
func (*VStreamRequest) ProtoMessage()    {}
func (*VStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{9}
}

func (m *VStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VStreamRequest.Unmarshal(m, b)
}
func (m *VStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VStreamRequest.Marshal(b, m, deterministic)
}
func (m *VStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStreamRequest.Merge(m, src)
}
func (m *VStreamRequest) XXX_Size() int {
	return xxx_messageInfo_VStreamRequest.Size(m)
}
func (m *VStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VStreamRequest proto.InternalMessageInfo

func (m *VStreamRequest) GetCallerId() *vtrpc.CallerID {
	if m != nil {
		return m.CallerId
	}
	return nil
}

func (m *VStreamRequest) GetTabletType() topodata.TabletType {
	if m != nil {
		return m.TabletType
	}
	return topodata.TabletType_UNKNOWN
}

func (m *VStreamRequest) GetVgtid() *binlogdata.VGtid {
	if m != nil {
		return m.Vgtid
	}
	return nil
}

func (m *VStreamRequest) GetFilter() *binlogdata.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// VStreamResponse is streamed by VStream.
type VStreamResponse struct {
	Events               []*binlogdata.VEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VStreamResponse) Reset()         { *m = VStreamResponse{} }
func (m *VStreamResponse) String() string { return proto.CompactTextString(m) }
func (*VStreamResponse) ProtoMessage()    {}
func (*VStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab96496ceaf1ebb, []int{10}
}

func (m *VStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VStreamResponse.Unmarshal(m, b)
}
func (m *VStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VStreamResponse.Marshal(b, m, deterministic)
}
func (m *VStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VStreamResponse.Merge(m, src)
}
func (m *VStreamResponse) XXX_Size() int {
	return xxx_messageInfo_VStreamResponse.Size(m)
}
func (m *VStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VStreamResponse proto.InternalMessageInfo

func (m *VStreamResponse) GetEvents() []*binlogdata.VEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterEnum("vtgate.TransactionMode", TransactionMode_name, TransactionMode_value)
	proto.RegisterEnum("vtgate.CommitOrder", CommitOrder_name, CommitOrder_value)
	proto.RegisterType((*Session)(nil), "vtgate.Session")
	proto.RegisterMapType((map[string]string)(nil), "vtgate.Session.SystemVariablesEntry")
	proto.RegisterMapType((map[string]*query.BindVariable)(nil), "vtgate.Session.UserDefinedVariablesEntry")
	proto.RegisterType((*Session_ShardSession)(nil), "vtgate.Session.ShardSession")
	proto.RegisterType((*ExecuteRequest)(nil), "vtgate.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "vtgate.ExecuteResponse")
	proto.RegisterType((*ExecuteBatchRequest)(nil), "vtgate.ExecuteBatchRequest")
	proto.RegisterType((*ExecuteBatchResponse)(nil), "vtgate.ExecuteBatchResponse")
	proto.RegisterType((*StreamExecuteRequest)(nil), "vtgate.StreamExecuteRequest")
	proto.RegisterType((*StreamExecuteResponse)(nil), "vtgate.StreamExecuteResponse")
	proto.RegisterType((*ResolveTransactionRequest)(nil), "vtgate.ResolveTransactionRequest")
	proto.RegisterType((*ResolveTransactionResponse)(nil), "vtgate.ResolveTransactionResponse")
	proto.RegisterType((*VStreamRequest)(nil), "vtgate.VStreamRequest")
	proto.RegisterType((*VStreamResponse)(nil), "vtgate.VStreamResponse")
}

func init() { proto.RegisterFile("vtgate.proto", fileDescriptor_aab96496ceaf1ebb) }

var fileDescriptor_aab96496ceaf1ebb = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xee, 0xfa, 0xdf, 0xc7, 0x7f, 0xcb, 0xd4, 0x2d, 0x5b, 0x53, 0x90, 0xe5, 0xb6, 0xaa, 0x13,
	0x90, 0x8d, 0x82, 0x40, 0x15, 0x02, 0xa1, 0xc4, 0x71, 0x2b, 0xa3, 0x24, 0x0e, 0x63, 0x27, 0x91,
	0x10, 0x68, 0xb5, 0xf1, 0x4e, 0x9c, 0x51, 0x9d, 0x9d, 0xed, 0xcc, 0xd8, 0xc1, 0x4f, 0xc1, 0x1d,
	0x17, 0xbc, 0x00, 0xef, 0xc2, 0x15, 0xbc, 0x11, 0x9a, 0x99, 0xb5, 0xbd, 0x31, 0x81, 0xa6, 0xa9,
	0x72, 0xb3, 0x9a, 0x73, 0xbe, 0x33, 0x67, 0xcf, 0x7c, 0xe7, 0x67, 0x06, 0x8a, 0x33, 0x39, 0xf6,
	0x24, 0x69, 0x85, 0x9c, 0x49, 0x86, 0x32, 0x46, 0xaa, 0xd9, 0xa7, 0x34, 0x98, 0xb0, 0xb1, 0xef,
	0x49, 0xcf, 0x20, 0xb5, 0xc2, 0x9b, 0x29, 0xe1, 0xf3, 0x48, 0x28, 0x4b, 0x16, 0xb2, 0x38, 0x38,
	0x93, 0x3c, 0x1c, 0x19, 0xa1, 0xf1, 0x57, 0x0e, 0xb2, 0x03, 0x22, 0x04, 0x65, 0x01, 0x7a, 0x06,
	0x65, 0x1a, 0xb8, 0x92, 0x7b, 0x81, 0xf0, 0x46, 0x92, 0xb2, 0xc0, 0xb1, 0xea, 0x56, 0x33, 0x87,
	0x4b, 0x34, 0x18, 0xae, 0x94, 0xa8, 0x03, 0x65, 0x71, 0xee, 0x71, 0xdf, 0x15, 0x66, 0x9f, 0x70,
	0x12, 0xf5, 0x64, 0xb3, 0xb0, 0xf5, 0xb8, 0x15, 0x45, 0x17, 0xf9, 0x6b, 0x0d, 0x94, 0x55, 0x24,
	0xe0, 0x92, 0x88, 0x49, 0x02, 0x7d, 0x04, 0x79, 0x41, 0x83, 0xf1, 0x84, 0xb8, 0xfe, 0xa9, 0x93,
	0xd4, 0xbf, 0xc9, 0x19, 0xc5, 0xee, 0x29, 0xfa, 0x04, 0xc0, 0x9b, 0x4a, 0x36, 0x62, 0x17, 0x17,
	0x54, 0x3a, 0x29, 0x8d, 0xc6, 0x34, 0xe8, 0x09, 0x94, 0xa4, 0xc7, 0xc7, 0x44, 0xba, 0x42, 0x72,
	0x1a, 0x8c, 0x9d, 0x74, 0xdd, 0x6a, 0xe6, 0x71, 0xd1, 0x28, 0x07, 0x5a, 0x87, 0xda, 0x90, 0x65,
	0xa1, 0xd4, 0xf1, 0x65, 0xea, 0x56, 0xb3, 0xb0, 0xf5, 0xa0, 0x65, 0x58, 0xe9, 0xfe, 0x42, 0x46,
	0x53, 0x49, 0xfa, 0x06, 0xc4, 0x0b, 0x2b, 0xb4, 0x03, 0x76, 0xec, 0xec, 0xee, 0x05, 0xf3, 0x89,
	0x93, 0xad, 0x5b, 0xcd, 0xf2, 0xd6, 0x87, 0x8b, 0x93, 0xc5, 0x68, 0xd8, 0x67, 0x3e, 0xc1, 0x15,
	0x79, 0x55, 0x81, 0xda, 0x90, 0xbb, 0xf4, 0x78, 0x40, 0x83, 0xb1, 0x70, 0x72, 0x9a, 0x95, 0xfb,
	0xd1, 0x5f, 0x7f, 0x50, 0xdf, 0x13, 0x83, 0xe1, 0xa5, 0x11, 0xfa, 0x0e, 0x8a, 0x21, 0x27, 0x2b,
	0x2a, 0xf3, 0x37, 0xa0, 0xb2, 0x10, 0x72, 0xb2, 0x24, 0x72, 0x1b, 0x4a, 0x21, 0x13, 0x72, 0xe5,
	0x01, 0x6e, 0xe0, 0xa1, 0xa8, 0xb6, 0x2c, 0x5d, 0x3c, 0x85, 0xf2, 0xc4, 0x13, 0xd2, 0xa5, 0x81,
	0x20, 0x5c, 0xba, 0xd4, 0x77, 0x0a, 0x75, 0xab, 0x99, 0xc2, 0x45, 0xa5, 0xed, 0x69, 0x65, 0xcf,
	0x47, 0x1f, 0x03, 0x9c, 0xb1, 0x69, 0xe0, 0xbb, 0x9c, 0x5d, 0x0a, 0xa7, 0xa8, 0x2d, 0xf2, 0x5a,
	0x83, 0xd9, 0xa5, 0x40, 0x2e, 0x3c, 0x9c, 0x0a, 0xc2, 0x5d, 0x9f, 0x9c, 0xd1, 0x80, 0xf8, 0xee,
	0xcc, 0xe3, 0xd4, 0x3b, 0x9d, 0x10, 0xe1, 0x94, 0x74, 0x40, 0x1b, 0xeb, 0x01, 0x1d, 0x09, 0xc2,
	0x77, 0x8d, 0xf1, 0xf1, 0xc2, 0xb6, 0x1b, 0x48, 0x3e, 0xc7, 0xd5, 0xe9, 0x35, 0x10, 0xea, 0x83,
	0x2d, 0xe6, 0x42, 0x92, 0x8b, 0x98, 0xeb, 0xb2, 0x76, 0xfd, 0xf4, 0x5f, 0x67, 0xd5, 0x76, 0x6b,
	0x5e, 0x2b, 0xe2, 0xaa, 0x56, 0x95, 0x20, 0x67, 0x97, 0xee, 0x88, 0x4d, 0x03, 0xe9, 0x54, 0xea,
	0x56, 0x33, 0x89, 0x73, 0x9c, 0x5d, 0x76, 0x94, 0x5c, 0xfb, 0xcd, 0x82, 0x62, 0x9c, 0x32, 0xf4,
	0x0c, 0x32, 0xa6, 0xbc, 0x74, 0x53, 0x14, 0xb6, 0x4a, 0x51, 0x5e, 0x87, 0x5a, 0x89, 0x23, 0x50,
	0xf5, 0x50, 0xbc, 0x88, 0xa8, 0xef, 0x24, 0xb4, 0xe7, 0x52, 0x4c, 0xdb, 0xf3, 0xd1, 0x0b, 0x28,
	0x4a, 0x15, 0x85, 0x74, 0xbd, 0x09, 0xf5, 0x84, 0xee, 0x00, 0x55, 0xa1, 0xcb, 0x56, 0x1d, 0x6a,
	0x74, 0x5b, 0x81, 0xb8, 0x20, 0x57, 0x42, 0xed, 0x27, 0x78, 0xf4, 0x9f, 0xcc, 0x21, 0x1b, 0x92,
	0xaf, 0xc9, 0x5c, 0x47, 0x98, 0xc7, 0x6a, 0x89, 0x36, 0x20, 0x3d, 0xf3, 0x26, 0x53, 0xa2, 0xc3,
	0x58, 0x55, 0xe3, 0x0e, 0x0d, 0x96, 0x7b, 0xb1, 0xb1, 0xf8, 0x3a, 0xf1, 0xc2, 0xaa, 0xed, 0x40,
	0xf5, 0x3a, 0xf2, 0xae, 0x71, 0x5c, 0x8d, 0x3b, 0xce, 0xc7, 0x7c, 0x34, 0xfe, 0x48, 0x40, 0x39,
	0xea, 0x31, 0x4c, 0xde, 0x4c, 0x89, 0x90, 0xe8, 0x33, 0xc8, 0x8f, 0xbc, 0xc9, 0x84, 0x70, 0x45,
	0x88, 0xe1, 0xaf, 0xd2, 0x32, 0x63, 0xa8, 0xa3, 0xf5, 0xbd, 0x5d, 0x9c, 0x33, 0x16, 0x3d, 0x1f,
	0x6d, 0x40, 0x36, 0xaa, 0xe6, 0x28, 0xea, 0xca, 0x5a, 0x82, 0xf1, 0x02, 0x47, 0xcf, 0x21, 0xad,
	0x0f, 0x14, 0x11, 0xf8, 0xc1, 0xe2, 0x78, 0xaa, 0x2c, 0x75, 0xc7, 0x61, 0x83, 0xa3, 0x2f, 0x21,
	0x62, 0xd1, 0x95, 0xf3, 0x90, 0xe8, 0x99, 0x52, 0xde, 0xaa, 0xae, 0xf3, 0x3d, 0x9c, 0x87, 0x04,
	0x83, 0x5c, 0xae, 0x55, 0x3a, 0x5f, 0x93, 0xb9, 0x08, 0xbd, 0x11, 0x71, 0xf5, 0x00, 0xd3, 0xb3,
	0x24, 0x8f, 0x4b, 0x0b, 0xad, 0xae, 0x91, 0xf8, 0xac, 0xc9, 0xde, 0x64, 0xd6, 0x7c, 0x9f, 0xca,
	0xa5, 0xed, 0x4c, 0xe3, 0x57, 0x0b, 0x2a, 0x4b, 0xa6, 0x44, 0xc8, 0x02, 0xa1, 0xfe, 0x98, 0x26,
	0x9c, 0x33, 0xbe, 0x46, 0x13, 0x3e, 0xec, 0x74, 0x95, 0x1a, 0x1b, 0xf4, 0x5d, 0x38, 0xda, 0x84,
	0x0c, 0x27, 0x62, 0x3a, 0x91, 0x11, 0x49, 0x28, 0x3e, 0x91, 0xb0, 0x46, 0x70, 0x64, 0xd1, 0xf8,
	0x3b, 0x01, 0xf7, 0xa3, 0x88, 0x76, 0x3c, 0x39, 0x3a, 0xbf, 0xf3, 0x04, 0x7e, 0x0a, 0x59, 0x15,
	0x0d, 0x25, 0xaa, 0x07, 0x92, 0xd7, 0xa7, 0x70, 0x61, 0xf1, 0x1e, 0x49, 0xf4, 0xc4, 0x95, 0x7b,
	0x2d, 0x6d, 0xee, 0x35, 0x4f, 0xc4, 0xef, 0xb5, 0x3b, 0xca, 0x75, 0xe3, 0x77, 0x0b, 0xaa, 0x57,
	0x39, 0xbd, 0xb3, 0x54, 0x7f, 0x0e, 0x59, 0x93, 0xc8, 0x05, 0x9b, 0x0f, 0xa3, 0xd8, 0x4c, 0x9a,
	0x4f, 0xa8, 0x3c, 0x37, 0xae, 0x17, 0x66, 0xaa, 0x59, 0xab, 0x03, 0xc9, 0x89, 0x77, 0xf1, 0x5e,
	0x2d, 0xbb, 0xec, 0xc3, 0xc4, 0xbb, 0xf5, 0x61, 0xf2, 0xd6, 0x7d, 0x98, 0x7a, 0x4b, 0x6e, 0xd2,
	0x37, 0xba, 0xf3, 0x63, 0xdc, 0x66, 0xfe, 0x9f, 0xdb, 0x46, 0x07, 0x1e, 0xac, 0x11, 0x15, 0xa5,
	0x71, 0xd5, 0x5f, 0xd6, 0x5b, 0xfb, 0xeb, 0x67, 0x78, 0x84, 0x89, 0x60, 0x93, 0x19, 0x89, 0x55,
	0xde, 0xed, 0x28, 0x47, 0x90, 0xf2, 0x65, 0x74, 0xbf, 0xe4, 0xb1, 0x5e, 0x37, 0x1e, 0x43, 0xed,
	0x3a, 0xf7, 0x26, 0xd0, 0xc6, 0x9f, 0x16, 0x94, 0x8f, 0xcd, 0x19, 0x6e, 0xf7, 0xcb, 0xb5, 0xe4,
	0x25, 0x6e, 0x98, 0xbc, 0xe7, 0x90, 0x9e, 0x8d, 0x55, 0xa8, 0x8b, 0x21, 0x1d, 0x7b, 0xaf, 0x1e,
	0xbf, 0x92, 0xd4, 0xc7, 0x06, 0x57, 0x4c, 0x9e, 0xd1, 0x89, 0x24, 0x5c, 0x67, 0x57, 0x31, 0x19,
	0xb3, 0x7c, 0xa9, 0x11, 0x1c, 0x59, 0x34, 0xbe, 0x85, 0xca, 0xf2, 0x2c, 0xab, 0x44, 0x90, 0x19,
	0x09, 0xa4, 0x70, 0x2c, 0x5d, 0xfc, 0x57, 0xb6, 0x1f, 0x77, 0x15, 0x84, 0x23, 0x8b, 0xcd, 0x5d,
	0xa8, 0xac, 0x3d, 0xe6, 0x50, 0x05, 0x0a, 0x47, 0x07, 0x83, 0xc3, 0x6e, 0xa7, 0xf7, 0xb2, 0xd7,
	0xdd, 0xb5, 0xef, 0x21, 0x80, 0xcc, 0xa0, 0x77, 0xf0, 0x6a, 0xaf, 0x6b, 0x5b, 0x28, 0x0f, 0xe9,
	0xfd, 0xa3, 0xbd, 0x61, 0xcf, 0x4e, 0xa8, 0xe5, 0xf0, 0xa4, 0x7f, 0xd8, 0xb1, 0x93, 0x9b, 0xdf,
	0x40, 0xa1, 0xa3, 0x9f, 0xa4, 0x7d, 0xee, 0x13, 0xae, 0x36, 0x1c, 0xf4, 0xf1, 0xfe, 0xf6, 0x9e,
	0x7d, 0x0f, 0x65, 0x21, 0x79, 0x88, 0xd5, 0xce, 0x1c, 0xa4, 0x0e, 0xfb, 0x83, 0xa1, 0x9d, 0x40,
	0x65, 0x80, 0xed, 0xa3, 0x61, 0xbf, 0xd3, 0xdf, 0xdf, 0xef, 0x0d, 0xed, 0xe4, 0xce, 0x57, 0x50,
	0xa1, 0xac, 0x35, 0xa3, 0x92, 0x08, 0x61, 0x9e, 0xe3, 0x3f, 0x3e, 0x89, 0x24, 0xca, 0xda, 0x66,
	0xd5, 0x1e, 0xb3, 0xf6, 0x4c, 0xb6, 0x35, 0xda, 0x36, 0xa5, 0x79, 0x9a, 0xd1, 0xd2, 0x17, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x07, 0xaa, 0x95, 0x79, 0x0e, 0x0c, 0x00, 0x00,
}

// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: vtboost.proto

package vtboost

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_vtboost_proto struct{}

func (drpcEncoding_File_vtboost_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_vtboost_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_vtboost_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_vtboost_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_vtboost_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCControllerServiceClient interface {
	DRPCConn() drpc.Conn

	GetRecipe(ctx context.Context, in *GetRecipeRequest) (*GetRecipeResponse, error)
	ReadyCheck(ctx context.Context, in *ReadyRequest) (*ReadyResponse, error)
	Graphviz(ctx context.Context, in *GraphvizRequest) (*GraphvizResponse, error)
	GetMaterializations(ctx context.Context, in *MaterializationsRequest) (*MaterializationsResponse, error)
}

type drpcControllerServiceClient struct {
	cc drpc.Conn
}

func NewDRPCControllerServiceClient(cc drpc.Conn) DRPCControllerServiceClient {
	return &drpcControllerServiceClient{cc}
}

func (c *drpcControllerServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcControllerServiceClient) GetRecipe(ctx context.Context, in *GetRecipeRequest) (*GetRecipeResponse, error) {
	out := new(GetRecipeResponse)
	err := c.cc.Invoke(ctx, "/vtboost.ControllerService/GetRecipe", drpcEncoding_File_vtboost_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcControllerServiceClient) ReadyCheck(ctx context.Context, in *ReadyRequest) (*ReadyResponse, error) {
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, "/vtboost.ControllerService/ReadyCheck", drpcEncoding_File_vtboost_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcControllerServiceClient) Graphviz(ctx context.Context, in *GraphvizRequest) (*GraphvizResponse, error) {
	out := new(GraphvizResponse)
	err := c.cc.Invoke(ctx, "/vtboost.ControllerService/Graphviz", drpcEncoding_File_vtboost_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcControllerServiceClient) GetMaterializations(ctx context.Context, in *MaterializationsRequest) (*MaterializationsResponse, error) {
	out := new(MaterializationsResponse)
	err := c.cc.Invoke(ctx, "/vtboost.ControllerService/GetMaterializations", drpcEncoding_File_vtboost_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCControllerServiceServer interface {
	GetRecipe(context.Context, *GetRecipeRequest) (*GetRecipeResponse, error)
	ReadyCheck(context.Context, *ReadyRequest) (*ReadyResponse, error)
	Graphviz(context.Context, *GraphvizRequest) (*GraphvizResponse, error)
	GetMaterializations(context.Context, *MaterializationsRequest) (*MaterializationsResponse, error)
}

type DRPCControllerServiceUnimplementedServer struct{}

func (s *DRPCControllerServiceUnimplementedServer) GetRecipe(context.Context, *GetRecipeRequest) (*GetRecipeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCControllerServiceUnimplementedServer) ReadyCheck(context.Context, *ReadyRequest) (*ReadyResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCControllerServiceUnimplementedServer) Graphviz(context.Context, *GraphvizRequest) (*GraphvizResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCControllerServiceUnimplementedServer) GetMaterializations(context.Context, *MaterializationsRequest) (*MaterializationsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCControllerServiceDescription struct{}

func (DRPCControllerServiceDescription) NumMethods() int { return 4 }

func (DRPCControllerServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/vtboost.ControllerService/GetRecipe", drpcEncoding_File_vtboost_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCControllerServiceServer).
					GetRecipe(
						ctx,
						in1.(*GetRecipeRequest),
					)
			}, DRPCControllerServiceServer.GetRecipe, true
	case 1:
		return "/vtboost.ControllerService/ReadyCheck", drpcEncoding_File_vtboost_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCControllerServiceServer).
					ReadyCheck(
						ctx,
						in1.(*ReadyRequest),
					)
			}, DRPCControllerServiceServer.ReadyCheck, true
	case 2:
		return "/vtboost.ControllerService/Graphviz", drpcEncoding_File_vtboost_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCControllerServiceServer).
					Graphviz(
						ctx,
						in1.(*GraphvizRequest),
					)
			}, DRPCControllerServiceServer.Graphviz, true
	case 3:
		return "/vtboost.ControllerService/GetMaterializations", drpcEncoding_File_vtboost_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCControllerServiceServer).
					GetMaterializations(
						ctx,
						in1.(*MaterializationsRequest),
					)
			}, DRPCControllerServiceServer.GetMaterializations, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterControllerService(mux drpc.Mux, impl DRPCControllerServiceServer) error {
	return mux.Register(impl, DRPCControllerServiceDescription{})
}

type DRPCControllerService_GetRecipeStream interface {
	drpc.Stream
	SendAndClose(*GetRecipeResponse) error
}

type drpcControllerService_GetRecipeStream struct {
	drpc.Stream
}

func (x *drpcControllerService_GetRecipeStream) SendAndClose(m *GetRecipeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtboost_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCControllerService_ReadyCheckStream interface {
	drpc.Stream
	SendAndClose(*ReadyResponse) error
}

type drpcControllerService_ReadyCheckStream struct {
	drpc.Stream
}

func (x *drpcControllerService_ReadyCheckStream) SendAndClose(m *ReadyResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtboost_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCControllerService_GraphvizStream interface {
	drpc.Stream
	SendAndClose(*GraphvizResponse) error
}

type drpcControllerService_GraphvizStream struct {
	drpc.Stream
}

func (x *drpcControllerService_GraphvizStream) SendAndClose(m *GraphvizResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtboost_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCControllerService_GetMaterializationsStream interface {
	drpc.Stream
	SendAndClose(*MaterializationsResponse) error
}

type drpcControllerService_GetMaterializationsStream struct {
	drpc.Stream
}

func (x *drpcControllerService_GetMaterializationsStream) SendAndClose(m *MaterializationsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtboost_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

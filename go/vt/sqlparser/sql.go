//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const SHOW = 57456
const DESCRIBE = 57457
const EXPLAIN = 57458
const DATE = 57459
const ESCAPE = 57460
const REPAIR = 57461
const OPTIMIZE = 57462
const TRUNCATE = 57463
const MAXVALUE = 57464
const PARTITION = 57465
const REORGANIZE = 57466
const LESS = 57467
const THAN = 57468
const PROCEDURE = 57469
const TRIGGER = 57470
const VINDEX = 57471
const VINDEXES = 57472
const STATUS = 57473
const VARIABLES = 57474
const BEGIN = 57475
const START = 57476
const TRANSACTION = 57477
const COMMIT = 57478
const ROLLBACK = 57479
const BIT = 57480
const TINYINT = 57481
const SMALLINT = 57482
const MEDIUMINT = 57483
const INT = 57484
const INTEGER = 57485
const BIGINT = 57486
const INTNUM = 57487
const REAL = 57488
const DOUBLE = 57489
const FLOAT_TYPE = 57490
const DECIMAL = 57491
const NUMERIC = 57492
const TIME = 57493
const TIMESTAMP = 57494
const DATETIME = 57495
const YEAR = 57496
const CHAR = 57497
const VARCHAR = 57498
const BOOL = 57499
const CHARACTER = 57500
const VARBINARY = 57501
const NCHAR = 57502
const TEXT = 57503
const TINYTEXT = 57504
const MEDIUMTEXT = 57505
const LONGTEXT = 57506
const BLOB = 57507
const TINYBLOB = 57508
const MEDIUMBLOB = 57509
const LONGBLOB = 57510
const JSON = 57511
const ENUM = 57512
const NULLX = 57513
const AUTO_INCREMENT = 57514
const APPROXNUM = 57515
const SIGNED = 57516
const UNSIGNED = 57517
const ZEROFILL = 57518
const DATABASES = 57519
const TABLES = 57520
const VITESS_KEYSPACES = 57521
const VITESS_SHARDS = 57522
const VITESS_TABLETS = 57523
const VSCHEMA_TABLES = 57524
const NAMES = 57525
const CHARSET = 57526
const GLOBAL = 57527
const SESSION = 57528
const CURRENT_TIMESTAMP = 57529
const DATABASE = 57530
const CURRENT_DATE = 57531
const CURRENT_TIME = 57532
const LOCALTIME = 57533
const LOCALTIMESTAMP = 57534
const UTC_DATE = 57535
const UTC_TIME = 57536
const UTC_TIMESTAMP = 57537
const REPLACE = 57538
const CONVERT = 57539
const CAST = 57540
const GROUP_CONCAT = 57541
const SEPARATOR = 57542
const MATCH = 57543
const AGAINST = 57544
const BOOLEAN = 57545
const LANGUAGE = 57546
const WITH = 57547
const QUERY = 57548
const EXPANSION = 57549
const UNUSED = 57550

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 215,
	109, 534,
	-2, 530,
	-1, 216,
	109, 535,
	-2, 531,
	-1, 282,
	80, 675,
	-2, 46,
	-1, 283,
	80, 648,
	-2, 47,
	-1, 288,
	80, 635,
	-2, 496,
	-1, 290,
	80, 662,
	-2, 498,
	-1, 650,
	109, 537,
	-2, 533,
	-1, 839,
	5, 28,
	-2, 349,
	-1, 859,
	5, 27,
	-2, 472,
	-1, 1055,
	5, 28,
	-2, 473,
	-1, 1095,
	5, 27,
	-2, 475,
	-1, 1144,
	5, 28,
	-2, 476,
}

const yyPrivate = 57344

const yyLast = 8974

var yyAct = [...]int{

	216, 1135, 213, 488, 786, 595, 220, 708, 975, 1000,
	739, 487, 3, 1061, 728, 783, 976, 914, 194, 533,
	245, 780, 972, 954, 831, 862, 766, 709, 188, 742,
	675, 74, 531, 879, 905, 164, 53, 868, 164, 685,
	682, 743, 752, 917, 697, 652, 427, 381, 705, 776,
	421, 281, 535, 520, 269, 433, 218, 270, 500, 193,
	52, 1163, 164, 164, 74, 441, 203, 1153, 164, 1161,
	74, 760, 189, 190, 191, 192, 279, 1142, 813, 1159,
	787, 801, 1152, 967, 1141, 1049, 385, 57, 1111, 246,
	47, 896, 759, 1073, 268, 800, 1005, 1006, 1007, 207,
	402, 1088, 767, 1044, 1010, 1008, 1042, 187, 1160, 392,
	1158, 287, 59, 60, 61, 62, 63, 413, 414, 1136,
	938, 706, 805, 393, 388, 155, 154, 1109, 155, 601,
	594, 799, 157, 158, 159, 173, 878, 47, 935, 419,
	729, 731, 877, 876, 937, 199, 383, 389, 167, 156,
	1127, 274, 477, 478, 754, 164, 1058, 164, 941, 183,
	866, 164, 404, 825, 406, 624, 445, 397, 164, 1014,
	740, 222, 74, 74, 74, 74, 465, 74, 74, 796,
	793, 794, 890, 792, 74, 621, 1024, 865, 403, 405,
	1122, 454, 453, 463, 464, 456, 457, 458, 459, 460,
	461, 462, 455, 546, 440, 465, 803, 806, 969, 168,
	74, 430, 925, 730, 455, 170, 698, 465, 623, 1015,
	767, 176, 172, 1110, 1108, 598, 479, 480, 481, 482,
	483, 484, 485, 273, 429, 936, 698, 934, 849, 684,
	923, 798, 1009, 659, 438, 753, 756, 174, 894, 401,
	178, 757, 407, 1130, 622, 797, 1140, 657, 658, 656,
	440, 408, 408, 408, 408, 435, 408, 408, 164, 395,
	439, 438, 1079, 408, 153, 164, 164, 164, 169, 1078,
	802, 74, 822, 823, 824, 50, 74, 440, 431, 47,
	676, 804, 677, 420, 909, 655, 908, 171, 177, 179,
	180, 181, 182, 924, 474, 185, 184, 476, 929, 926,
	919, 920, 927, 922, 921, 502, 503, 504, 505, 506,
	507, 508, 1123, 897, 928, 1146, 439, 438, 1091, 1076,
	931, 906, 1002, 971, 486, 267, 490, 491, 492, 493,
	494, 495, 496, 440, 499, 501, 501, 501, 501, 501,
	501, 501, 501, 509, 510, 511, 512, 545, 1149, 420,
	843, 891, 842, 844, 532, 209, 454, 453, 463, 464,
	456, 457, 458, 459, 460, 461, 462, 455, 439, 438,
	465, 754, 439, 438, 883, 74, 1099, 1133, 164, 475,
	164, 74, 789, 164, 678, 440, 164, 1115, 164, 440,
	74, 74, 74, 74, 74, 74, 74, 74, 863, 382,
	832, 439, 438, 592, 74, 74, 1099, 420, 164, 642,
	644, 645, 1099, 1100, 643, 410, 411, 412, 440, 415,
	416, 1070, 1069, 74, 995, 420, 418, 164, 1057, 420,
	1021, 1020, 1114, 74, 1017, 1018, 273, 399, 629, 394,
	651, 1017, 1016, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 382, 653,
	837, 420, 753, 542, 408, 21, 606, 751, 750, 23,
	408, 517, 420, 687, 420, 1011, 74, 553, 552, 408,
	408, 408, 408, 408, 408, 408, 408, 944, 631, 54,
	74, 244, 689, 408, 408, 864, 1094, 864, 646, 608,
	409, 687, 23, 1053, 543, 164, 541, 23, 164, 164,
	164, 164, 164, 710, 648, 973, 50, 1004, 863, 517,
	164, 198, 72, 164, 679, 680, 857, 164, 837, 858,
	837, 164, 164, 516, 689, 74, 1023, 517, 1019, 863,
	884, 702, 695, 74, 837, 544, 625, 650, 50, 50,
	1083, 424, 428, 761, 50, 286, 47, 517, 627, 628,
	630, 386, 713, 735, 284, 716, 714, 715, 446, 717,
	490, 781, 725, 989, 887, 869, 870, 596, 734, 733,
	777, 772, 768, 769, 770, 164, 737, 200, 771, 65,
	784, 747, 164, 973, 910, 164, 74, 274, 274, 274,
	274, 274, 489, 782, 439, 438, 872, 604, 417, 498,
	654, 722, 532, 637, 732, 875, 723, 686, 688, 874,
	274, 440, 762, 763, 764, 765, 719, 593, 778, 779,
	720, 700, 718, 600, 50, 721, 204, 205, 773, 774,
	775, 1157, 609, 610, 611, 612, 613, 614, 615, 616,
	828, 829, 830, 1156, 1151, 940, 617, 618, 810, 820,
	819, 727, 814, 286, 286, 286, 286, 653, 286, 286,
	815, 724, 955, 526, 527, 286, 434, 422, 901, 273,
	273, 273, 273, 273, 551, 408, 400, 1051, 893, 423,
	432, 925, 827, 1132, 273, 1131, 1092, 888, 1084, 790,
	957, 443, 273, 603, 530, 201, 202, 859, 463, 464,
	456, 457, 458, 459, 460, 461, 462, 455, 434, 923,
	465, 690, 691, 74, 195, 694, 650, 818, 1120, 826,
	196, 848, 959, 74, 963, 817, 958, 54, 956, 701,
	1119, 703, 704, 961, 873, 1086, 864, 436, 1124, 58,
	881, 882, 960, 1074, 620, 56, 540, 962, 964, 522,
	525, 526, 527, 523, 51, 524, 528, 900, 1, 902,
	903, 904, 286, 788, 885, 74, 74, 548, 74, 898,
	899, 284, 924, 913, 889, 860, 861, 929, 926, 919,
	920, 927, 922, 921, 639, 640, 795, 907, 1134, 74,
	999, 749, 741, 928, 380, 64, 748, 164, 834, 918,
	916, 1107, 835, 1072, 755, 895, 74, 758, 654, 839,
	840, 841, 1003, 1129, 845, 950, 951, 930, 892, 851,
	556, 852, 853, 854, 855, 456, 457, 458, 459, 460,
	461, 462, 455, 948, 557, 465, 489, 555, 809, 692,
	693, 74, 74, 559, 710, 974, 558, 947, 966, 554,
	710, 175, 979, 280, 965, 408, 821, 953, 529, 977,
	547, 437, 66, 968, 933, 74, 286, 74, 74, 932,
	791, 984, 286, 387, 473, 982, 816, 285, 408, 983,
	980, 286, 286, 286, 286, 286, 286, 286, 286, 1012,
	1013, 164, 738, 626, 997, 286, 286, 426, 996, 74,
	1118, 1085, 847, 836, 497, 696, 221, 641, 998, 233,
	230, 232, 74, 164, 633, 846, 231, 632, 856, 74,
	447, 219, 74, 211, 443, 164, 1025, 286, 978, 272,
	47, 513, 1035, 521, 519, 518, 649, 277, 871, 1027,
	867, 271, 1030, 943, 1048, 1121, 991, 992, 993, 1032,
	235, 234, 237, 238, 239, 240, 952, 1033, 650, 236,
	241, 1040, 636, 25, 55, 206, 19, 681, 811, 812,
	74, 428, 74, 74, 74, 164, 74, 1052, 74, 18,
	17, 699, 1060, 20, 16, 1063, 1064, 1065, 458, 459,
	460, 461, 462, 455, 1066, 1068, 465, 15, 711, 994,
	14, 29, 13, 74, 74, 74, 12, 1037, 1038, 11,
	1039, 10, 9, 1041, 274, 1043, 8, 7, 912, 885,
	6, 1081, 5, 1075, 4, 1077, 286, 197, 22, 2,
	1089, 0, 0, 838, 286, 284, 0, 1047, 74, 74,
	0, 939, 0, 744, 850, 1087, 1082, 0, 1095, 0,
	1093, 74, 0, 1071, 977, 0, 0, 0, 0, 0,
	1106, 1104, 0, 0, 74, 1105, 1112, 1034, 1113, 0,
	0, 0, 0, 0, 1036, 0, 0, 1116, 0, 0,
	74, 0, 0, 1125, 0, 1045, 1046, 286, 1126, 0,
	0, 0, 408, 0, 0, 977, 273, 0, 1054, 1055,
	1056, 0, 1059, 0, 1138, 0, 286, 0, 74, 0,
	0, 710, 1143, 0, 0, 649, 0, 74, 0, 1147,
	0, 0, 0, 978, 0, 0, 1096, 0, 0, 0,
	0, 1155, 1154, 0, 0, 0, 0, 0, 0, 0,
	425, 275, 0, 0, 0, 1164, 522, 525, 526, 527,
	523, 0, 524, 528, 1117, 0, 869, 870, 0, 0,
	0, 0, 0, 0, 978, 0, 47, 0, 1090, 0,
	0, 0, 0, 0, 0, 162, 161, 0, 186, 0,
	0, 0, 0, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	210, 0, 162, 162, 278, 0, 0, 0, 162, 384,
	985, 986, 0, 0, 880, 988, 0, 0, 990, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	1162, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 0, 1148, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 286, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 915, 0,
	0, 0, 0, 0, 1166, 1167, 0, 0, 0, 0,
	286, 420, 0, 0, 0, 162, 390, 162, 391, 0,
	574, 162, 396, 0, 0, 0, 0, 286, 162, 398,
	0, 0, 0, 0, 0, 0, 946, 1050, 0, 0,
	0, 0, 0, 0, 489, 0, 0, 454, 453, 463,
	464, 456, 457, 458, 459, 460, 461, 462, 455, 711,
	0, 465, 981, 880, 0, 711, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 949, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 286, 1001,
	0, 0, 0, 0, 0, 744, 562, 744, 454, 453,
	463, 464, 456, 457, 458, 459, 460, 461, 462, 455,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 0,
	1026, 0, 0, 0, 575, 0, 0, 0, 162, 515,
	0, 0, 0, 1028, 0, 162, 537, 162, 539, 0,
	1031, 0, 0, 286, 0, 580, 581, 582, 583, 584,
	585, 586, 946, 587, 588, 589, 590, 591, 576, 577,
	578, 579, 560, 561, 0, 0, 563, 0, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 0, 0,
	0, 0, 0, 0, 0, 1137, 489, 0, 0, 833,
	0, 1062, 0, 1062, 1062, 1062, 0, 1067, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 454,
	453, 463, 464, 456, 457, 458, 459, 460, 461, 462,
	455, 0, 0, 465, 286, 286, 286, 0, 0, 0,
	0, 0, 0, 0, 915, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 597,
	162, 599, 0, 162, 602, 0, 162, 605, 607, 1097,
	1098, 453, 463, 464, 456, 457, 458, 459, 460, 461,
	462, 455, 1001, 0, 465, 0, 0, 0, 162, 619,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 638, 0,
	0, 1128, 0, 0, 0, 0, 607, 454, 453, 463,
	464, 456, 457, 458, 459, 460, 461, 462, 455, 0,
	0, 465, 0, 0, 0, 0, 711, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 210, 210, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 210, 210, 0, 162, 707, 712, 162, 162,
	162, 162, 162, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 162, 0, 0, 449, 537, 452, 0,
	0, 162, 162, 736, 466, 467, 468, 469, 470, 471,
	472, 0, 450, 451, 448, 454, 453, 463, 464, 456,
	457, 458, 459, 460, 461, 462, 455, 0, 0, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 785, 0, 0, 0,
	0, 0, 162, 807, 113, 162, 808, 683, 0, 217,
	0, 0, 0, 90, 0, 214, 0, 0, 100, 254,
	102, 0, 0, 124, 109, 607, 0, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 210, 0, 50,
	0, 0, 215, 235, 234, 237, 238, 239, 240, 0,
	0, 84, 236, 241, 242, 243, 0, 0, 212, 228,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 208, 210, 0, 0, 265, 0, 227,
	0, 0, 223, 224, 229, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 263,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 0, 146, 147, 148, 149, 110, 83, 96, 123,
	255, 264, 261, 262, 259, 260, 258, 257, 256, 266,
	249, 250, 252, 0, 251, 75, 0, 101, 150, 118,
	92, 141, 0, 0, 0, 0, 0, 162, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	23, 24, 48, 26, 27, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 0, 28, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 712, 0, 0, 607, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 1022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 1029, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 43, 44, 0, 0,
	45, 46, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 369, 359, 0, 332, 371, 310, 324,
	379, 325, 326, 353, 298, 340, 113, 322, 0, 313,
	293, 319, 294, 311, 334, 90, 337, 309, 361, 343,
	100, 377, 102, 348, 0, 124, 109, 49, 0, 336,
	363, 338, 358, 331, 354, 303, 347, 372, 323, 351,
	373, 0, 0, 0, 73, 0, 745, 746, 0, 0,
	0, 0, 0, 84, 0, 350, 368, 321, 352, 292,
	349, 0, 296, 299, 378, 366, 316, 317, 886, 0,
	0, 0, 0, 0, 0, 335, 339, 355, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 346,
	0, 0, 0, 300, 297, 0, 333, 0, 0, 0,
	302, 0, 315, 356, 0, 291, 364, 330, 165, 367,
	328, 327, 370, 116, 0, 712, 127, 95, 94, 362,
	312, 320, 86, 318, 121, 114, 139, 345, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 295, 0, 125,
	140, 152, 308, 365, 146, 147, 148, 149, 110, 83,
	96, 123, 306, 307, 304, 305, 341, 342, 374, 375,
	376, 357, 301, 0, 0, 360, 344, 75, 0, 101,
	150, 118, 92, 141, 369, 359, 0, 332, 371, 310,
	324, 379, 325, 326, 353, 298, 340, 113, 322, 0,
	313, 293, 319, 294, 311, 334, 90, 337, 309, 361,
	343, 100, 377, 102, 348, 0, 124, 109, 0, 0,
	336, 363, 338, 358, 331, 354, 303, 347, 372, 323,
	351, 373, 0, 0, 0, 73, 0, 745, 746, 0,
	0, 0, 0, 0, 84, 0, 350, 368, 321, 352,
	292, 349, 0, 296, 299, 378, 366, 316, 317, 0,
	0, 0, 0, 0, 0, 0, 335, 339, 355, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	346, 0, 0, 0, 300, 297, 0, 333, 0, 0,
	0, 302, 0, 315, 356, 0, 291, 364, 330, 165,
	367, 328, 327, 370, 116, 0, 0, 127, 95, 94,
	362, 312, 320, 86, 318, 121, 114, 139, 345, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 295, 0,
	125, 140, 152, 308, 365, 146, 147, 148, 149, 110,
	83, 96, 123, 306, 307, 304, 305, 341, 342, 374,
	375, 376, 357, 301, 0, 0, 360, 344, 75, 0,
	101, 150, 118, 92, 141, 369, 359, 0, 332, 371,
	310, 324, 379, 325, 326, 353, 298, 340, 113, 322,
	0, 313, 293, 319, 294, 311, 334, 90, 337, 309,
	361, 343, 100, 377, 102, 348, 0, 124, 109, 0,
	0, 336, 363, 338, 358, 331, 354, 303, 347, 372,
	323, 351, 373, 50, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 350, 368, 321,
	352, 292, 349, 0, 296, 299, 378, 366, 316, 317,
	0, 0, 0, 0, 0, 0, 0, 335, 339, 355,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 346, 0, 0, 0, 300, 297, 0, 333, 0,
	0, 0, 302, 0, 315, 356, 0, 291, 364, 330,
	165, 367, 328, 327, 370, 116, 0, 0, 127, 95,
	94, 362, 312, 320, 86, 318, 121, 114, 139, 345,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 295,
	0, 125, 140, 152, 308, 365, 146, 147, 148, 149,
	110, 83, 96, 123, 306, 307, 304, 305, 341, 342,
	374, 375, 376, 357, 301, 0, 0, 360, 344, 75,
	0, 101, 150, 118, 92, 141, 369, 359, 0, 332,
	371, 310, 324, 379, 325, 326, 353, 298, 340, 113,
	322, 0, 313, 293, 319, 294, 311, 334, 90, 337,
	309, 361, 343, 100, 377, 102, 348, 0, 124, 109,
	0, 0, 336, 363, 338, 358, 331, 354, 303, 347,
	372, 323, 351, 373, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 350, 368,
	321, 352, 292, 349, 0, 296, 299, 378, 366, 316,
	317, 0, 0, 0, 0, 0, 0, 0, 335, 339,
	355, 329, 0, 0, 0, 0, 0, 0, 945, 0,
	314, 0, 346, 0, 0, 0, 300, 297, 0, 333,
	0, 0, 0, 302, 0, 315, 356, 0, 291, 364,
	330, 165, 367, 328, 327, 370, 116, 0, 0, 127,
	95, 94, 362, 312, 320, 86, 318, 121, 114, 139,
	345, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	295, 0, 125, 140, 152, 308, 365, 146, 147, 148,
	149, 110, 83, 96, 123, 306, 307, 304, 305, 341,
	342, 374, 375, 376, 357, 301, 0, 0, 360, 344,
	75, 0, 101, 150, 118, 92, 141, 369, 359, 0,
	332, 371, 310, 324, 379, 325, 326, 353, 298, 340,
	113, 322, 0, 313, 293, 319, 294, 311, 334, 90,
	337, 309, 361, 343, 100, 377, 102, 348, 0, 124,
	109, 0, 0, 336, 363, 338, 358, 331, 354, 303,
	347, 372, 323, 351, 373, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 350,
	368, 321, 352, 292, 349, 0, 296, 299, 378, 366,
	316, 317, 0, 0, 0, 0, 0, 0, 0, 335,
	339, 355, 329, 0, 0, 0, 0, 0, 0, 647,
	0, 314, 0, 346, 0, 0, 0, 300, 297, 0,
	333, 0, 0, 0, 302, 0, 315, 356, 0, 291,
	364, 330, 165, 367, 328, 327, 370, 116, 0, 0,
	127, 95, 94, 362, 312, 320, 86, 318, 121, 114,
	139, 345, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 295, 0, 125, 140, 152, 308, 365, 146, 147,
	148, 149, 110, 83, 96, 123, 306, 307, 304, 305,
	341, 342, 374, 375, 376, 357, 301, 0, 0, 360,
	344, 75, 0, 101, 150, 118, 92, 141, 369, 359,
	0, 332, 371, 310, 324, 379, 325, 326, 353, 298,
	340, 113, 322, 0, 313, 293, 319, 294, 311, 334,
	90, 337, 309, 361, 343, 100, 377, 102, 348, 0,
	124, 109, 0, 0, 336, 363, 338, 358, 331, 354,
	303, 347, 372, 323, 351, 373, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	350, 368, 321, 352, 292, 349, 0, 296, 299, 378,
	366, 316, 317, 0, 0, 0, 0, 0, 0, 0,
	335, 339, 355, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 314, 0, 346, 0, 0, 0, 300, 297,
	0, 333, 0, 0, 0, 302, 0, 315, 356, 0,
	291, 364, 330, 165, 367, 328, 327, 370, 116, 0,
	0, 127, 95, 94, 362, 312, 320, 86, 318, 121,
	114, 139, 345, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 295, 0, 125, 140, 152, 308, 365, 146,
	147, 148, 149, 110, 83, 96, 123, 306, 307, 304,
	305, 341, 342, 374, 375, 376, 357, 301, 0, 0,
	360, 344, 75, 0, 101, 150, 118, 92, 141, 369,
	359, 0, 332, 371, 310, 324, 379, 325, 326, 353,
	298, 340, 113, 322, 0, 313, 293, 319, 294, 311,
	334, 90, 337, 309, 361, 343, 100, 377, 102, 348,
	0, 124, 109, 0, 0, 336, 363, 338, 358, 331,
	354, 303, 347, 372, 323, 351, 373, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 350, 368, 321, 352, 292, 349, 0, 296, 299,
	378, 366, 316, 317, 0, 0, 0, 0, 0, 0,
	0, 335, 339, 355, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 346, 0, 0, 0, 300,
	297, 0, 333, 0, 0, 0, 302, 0, 315, 356,
	0, 291, 364, 330, 165, 367, 328, 327, 370, 116,
	0, 0, 127, 95, 94, 362, 312, 320, 86, 318,
	121, 114, 139, 345, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 295, 0, 125, 140, 152, 308, 365,
	146, 147, 148, 149, 110, 83, 96, 123, 306, 307,
	304, 305, 341, 342, 374, 375, 376, 357, 301, 0,
	0, 360, 344, 75, 0, 101, 150, 118, 92, 141,
	369, 359, 0, 332, 371, 310, 324, 379, 325, 326,
	353, 298, 340, 113, 322, 0, 313, 293, 319, 294,
	311, 334, 90, 337, 309, 361, 343, 100, 377, 102,
	348, 0, 124, 109, 0, 0, 336, 363, 338, 358,
	331, 354, 303, 347, 372, 323, 351, 373, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 350, 368, 321, 352, 292, 349, 0, 296,
	299, 378, 366, 316, 317, 0, 0, 0, 0, 0,
	0, 0, 335, 339, 355, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 314, 0, 346, 0, 0, 0,
	300, 297, 0, 333, 0, 0, 0, 302, 0, 315,
	356, 0, 291, 364, 330, 165, 367, 328, 327, 370,
	116, 0, 0, 127, 95, 94, 362, 312, 320, 86,
	318, 121, 114, 139, 345, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	289, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 295, 0, 125, 140, 152, 308,
	365, 146, 147, 148, 149, 290, 288, 96, 123, 306,
	307, 304, 305, 341, 342, 374, 375, 376, 357, 301,
	0, 0, 360, 344, 75, 0, 101, 150, 118, 92,
	141, 369, 359, 0, 332, 371, 310, 324, 379, 325,
	326, 353, 298, 340, 113, 322, 0, 313, 293, 319,
	294, 311, 334, 90, 337, 309, 361, 343, 100, 377,
	102, 348, 0, 124, 109, 0, 0, 336, 363, 338,
	358, 331, 354, 303, 347, 372, 323, 351, 373, 0,
	0, 0, 163, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 350, 368, 321, 352, 292, 349, 0,
	296, 299, 378, 366, 316, 317, 0, 0, 0, 0,
	0, 0, 0, 335, 339, 355, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 346, 0, 0,
	0, 300, 297, 0, 333, 0, 0, 0, 302, 0,
	315, 356, 0, 291, 364, 330, 165, 367, 328, 327,
	370, 116, 0, 0, 127, 95, 94, 362, 312, 320,
	86, 318, 121, 114, 139, 345, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 295, 0, 125, 140, 152,
	308, 365, 146, 147, 148, 149, 110, 83, 96, 123,
	306, 307, 304, 305, 341, 342, 374, 375, 376, 357,
	301, 0, 0, 360, 344, 75, 0, 101, 150, 118,
	92, 141, 369, 359, 0, 332, 371, 310, 324, 379,
	325, 326, 353, 298, 340, 113, 322, 0, 313, 293,
	319, 294, 311, 334, 90, 337, 309, 361, 343, 100,
	377, 102, 348, 0, 124, 109, 0, 0, 336, 363,
	338, 358, 331, 354, 303, 347, 372, 323, 351, 373,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 350, 368, 321, 352, 292, 349,
	0, 296, 299, 378, 366, 316, 317, 0, 0, 0,
	0, 0, 0, 0, 335, 339, 355, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 314, 0, 346, 0,
	0, 0, 300, 297, 0, 333, 0, 0, 0, 302,
	0, 315, 356, 0, 291, 364, 330, 165, 367, 328,
	327, 370, 116, 0, 0, 127, 95, 94, 362, 312,
	320, 86, 318, 121, 114, 139, 345, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 289, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 295, 0, 125, 140,
	152, 308, 365, 146, 147, 148, 149, 290, 288, 283,
	282, 306, 307, 304, 305, 341, 342, 374, 375, 376,
	357, 301, 0, 0, 360, 344, 75, 0, 101, 150,
	118, 92, 141, 113, 0, 0, 0, 0, 217, 0,
	0, 0, 90, 0, 214, 0, 0, 100, 254, 102,
	0, 0, 124, 109, 0, 0, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	420, 215, 235, 234, 237, 238, 239, 240, 0, 0,
	84, 236, 241, 242, 243, 0, 0, 212, 228, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 0, 0, 0, 0, 265, 0, 227, 0,
	0, 223, 224, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 263, 0,
	116, 0, 0, 127, 95, 94, 0, 0, 0, 86,
	0, 121, 114, 139, 0, 115, 120, 103, 131, 117,
	138, 166, 145, 129, 144, 76, 128, 137, 85, 122,
	78, 135, 126, 107, 97, 98, 77, 0, 119, 89,
	93, 88, 112, 132, 133, 87, 151, 81, 143, 80,
	82, 142, 111, 130, 136, 108, 105, 79, 134, 106,
	104, 99, 91, 0, 0, 0, 125, 140, 152, 0,
	0, 146, 147, 148, 149, 110, 83, 96, 123, 255,
	264, 261, 262, 259, 260, 258, 257, 256, 266, 249,
	250, 252, 0, 251, 75, 0, 101, 150, 118, 92,
	141, 113, 0, 0, 0, 0, 217, 0, 0, 0,
	90, 0, 214, 0, 0, 100, 254, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 215,
	235, 234, 237, 238, 239, 240, 0, 0, 84, 236,
	241, 242, 243, 0, 0, 212, 228, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	208, 0, 0, 0, 265, 0, 227, 0, 0, 223,
	224, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 263, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 255, 264, 261,
	262, 259, 260, 258, 257, 256, 266, 249, 250, 252,
	23, 251, 75, 0, 101, 150, 118, 92, 141, 0,
	0, 0, 113, 0, 0, 0, 0, 217, 0, 0,
	0, 90, 0, 214, 0, 0, 100, 254, 102, 0,
	0, 124, 109, 0, 0, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	215, 235, 234, 237, 238, 239, 240, 0, 0, 84,
	236, 241, 242, 243, 0, 0, 212, 228, 0, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 0, 0, 0, 0, 265, 0, 227, 0, 0,
	223, 224, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 263, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 0,
	146, 147, 148, 149, 110, 83, 96, 123, 255, 264,
	261, 262, 259, 260, 258, 257, 256, 266, 249, 250,
	252, 0, 251, 75, 0, 101, 150, 118, 92, 141,
	113, 0, 0, 0, 0, 217, 0, 0, 0, 90,
	0, 214, 0, 0, 100, 254, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 215, 235,
	234, 237, 238, 239, 240, 0, 0, 84, 236, 241,
	242, 243, 0, 0, 212, 228, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 0,
	0, 0, 0, 265, 0, 227, 0, 0, 223, 224,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 263, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 255, 264, 261, 262,
	259, 260, 258, 257, 256, 266, 249, 250, 252, 113,
	251, 75, 0, 101, 150, 118, 92, 141, 90, 0,
	0, 0, 0, 100, 254, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 215, 235, 234,
	237, 238, 239, 240, 0, 0, 84, 236, 241, 242,
	243, 0, 0, 0, 228, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 0, 0,
	0, 0, 265, 0, 227, 0, 0, 223, 224, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 263, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	1165, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 255, 264, 261, 262, 259,
	260, 258, 257, 256, 266, 249, 250, 252, 113, 251,
	75, 0, 101, 150, 118, 92, 141, 90, 0, 0,
	0, 0, 100, 254, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 215, 235, 234, 237,
	238, 239, 240, 0, 0, 84, 236, 241, 242, 243,
	0, 0, 0, 228, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 0, 0, 0,
	0, 265, 0, 227, 0, 0, 223, 224, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 263, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 0, 146, 147, 148, 149,
	110, 83, 96, 123, 255, 264, 261, 262, 259, 260,
	258, 257, 256, 266, 249, 250, 252, 113, 251, 75,
	0, 101, 150, 118, 92, 141, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 453, 463, 464, 456, 457, 458, 459, 460, 461,
	462, 455, 0, 0, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 0, 146, 147, 148, 149, 110,
	83, 96, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	101, 150, 118, 92, 141, 113, 0, 0, 0, 442,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 444, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 439, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 113, 146, 147, 148, 149, 110, 83, 96,
	123, 90, 0, 0, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 67, 0, 0, 0, 71, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	69, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 0,
	146, 147, 148, 149, 110, 83, 96, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	113, 0, 0, 0, 536, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	538, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 115, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 0, 146, 147,
	148, 149, 110, 83, 96, 123, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 75, 0, 101, 150, 118, 92, 141, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 0, 146, 147, 148,
	149, 110, 83, 96, 123, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	75, 0, 101, 150, 118, 92, 141, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 113, 146, 147, 148, 149,
	110, 83, 96, 123, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 634, 0, 0, 635,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 113, 146, 147, 148, 149, 110, 83, 96,
	123, 90, 0, 550, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 549, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 0,
	146, 147, 148, 149, 110, 83, 96, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	113, 0, 0, 0, 536, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 100, 0, 102, 0, 0, 124,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 163, 0,
	538, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 116, 0, 0,
	127, 95, 94, 0, 0, 0, 86, 0, 121, 114,
	139, 0, 534, 120, 103, 131, 117, 138, 166, 145,
	129, 144, 76, 128, 137, 85, 122, 78, 135, 126,
	107, 97, 98, 77, 0, 119, 89, 93, 88, 112,
	132, 133, 87, 151, 81, 143, 80, 82, 142, 111,
	130, 136, 108, 105, 79, 134, 106, 104, 99, 91,
	0, 0, 0, 125, 140, 152, 0, 113, 146, 147,
	148, 149, 110, 83, 96, 123, 90, 0, 0, 0,
	0, 100, 0, 102, 0, 0, 124, 109, 0, 0,
	0, 75, 0, 101, 150, 118, 92, 141, 0, 0,
	0, 0, 50, 0, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 116, 0, 0, 127, 95, 94,
	0, 0, 0, 86, 0, 121, 114, 139, 0, 115,
	120, 103, 131, 117, 138, 166, 145, 129, 144, 76,
	128, 137, 85, 122, 78, 135, 126, 107, 97, 98,
	77, 0, 119, 89, 93, 88, 112, 132, 133, 87,
	151, 81, 143, 80, 82, 142, 111, 130, 136, 108,
	105, 79, 134, 106, 104, 99, 91, 0, 0, 0,
	125, 140, 152, 0, 113, 146, 147, 148, 149, 110,
	83, 96, 123, 90, 0, 0, 0, 0, 100, 0,
	102, 0, 0, 124, 109, 0, 0, 0, 75, 0,
	101, 150, 118, 92, 141, 0, 0, 0, 0, 0,
	0, 0, 163, 0, 538, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 116, 0, 0, 127, 95, 94, 0, 0, 0,
	86, 0, 121, 114, 139, 0, 115, 120, 103, 131,
	117, 138, 166, 145, 129, 144, 76, 128, 137, 85,
	122, 78, 135, 126, 107, 97, 98, 77, 0, 119,
	89, 93, 88, 112, 132, 133, 87, 151, 81, 143,
	80, 82, 142, 111, 130, 136, 108, 105, 79, 134,
	106, 104, 99, 91, 0, 0, 0, 125, 140, 152,
	0, 113, 146, 147, 148, 149, 110, 83, 96, 123,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 75, 0, 101, 150, 118,
	92, 141, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 444, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 0, 0, 0, 125, 140, 152, 0, 0, 146,
	147, 148, 149, 110, 83, 96, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 75, 0, 101, 150, 118, 92, 141, 514,
	90, 0, 0, 0, 0, 100, 0, 102, 0, 0,
	124, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 116, 0,
	0, 127, 95, 94, 0, 0, 0, 86, 0, 121,
	114, 139, 0, 115, 120, 103, 131, 117, 138, 166,
	145, 129, 144, 76, 128, 137, 85, 122, 78, 135,
	126, 107, 97, 98, 77, 0, 119, 89, 93, 88,
	112, 132, 133, 87, 151, 81, 143, 80, 82, 142,
	111, 130, 136, 108, 105, 79, 134, 106, 104, 99,
	91, 276, 0, 0, 125, 140, 152, 0, 113, 146,
	147, 148, 149, 110, 83, 96, 123, 90, 0, 0,
	0, 0, 100, 0, 102, 0, 0, 124, 109, 0,
	0, 0, 75, 0, 101, 150, 118, 92, 141, 0,
	0, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 116, 0, 0, 127, 95,
	94, 0, 0, 0, 86, 0, 121, 114, 139, 0,
	115, 120, 103, 131, 117, 138, 166, 145, 129, 144,
	76, 128, 137, 85, 122, 78, 135, 126, 107, 97,
	98, 77, 0, 119, 89, 93, 88, 112, 132, 133,
	87, 151, 81, 143, 80, 82, 142, 111, 130, 136,
	108, 105, 79, 134, 106, 104, 99, 91, 0, 0,
	0, 125, 140, 152, 0, 113, 146, 147, 148, 149,
	110, 83, 96, 123, 90, 0, 0, 0, 0, 100,
	0, 102, 0, 0, 124, 109, 0, 0, 0, 75,
	0, 101, 150, 118, 92, 141, 0, 0, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 165, 0, 0,
	0, 0, 116, 0, 0, 127, 95, 94, 0, 0,
	0, 86, 0, 121, 114, 139, 0, 115, 120, 103,
	131, 117, 138, 166, 145, 129, 144, 76, 128, 137,
	85, 122, 78, 135, 126, 107, 97, 98, 77, 0,
	119, 89, 93, 88, 112, 132, 133, 87, 151, 81,
	143, 80, 82, 142, 111, 130, 136, 108, 105, 79,
	134, 106, 104, 99, 91, 0, 0, 0, 125, 140,
	152, 0, 113, 146, 147, 148, 149, 110, 83, 96,
	123, 90, 0, 0, 0, 0, 100, 0, 102, 0,
	0, 124, 109, 0, 0, 0, 75, 0, 101, 150,
	118, 92, 141, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 0, 0, 0, 116,
	0, 0, 127, 95, 94, 0, 0, 0, 86, 0,
	121, 114, 139, 0, 115, 120, 103, 131, 117, 138,
	166, 145, 129, 144, 76, 128, 137, 85, 122, 78,
	135, 126, 107, 97, 98, 77, 0, 119, 89, 93,
	88, 112, 132, 133, 87, 151, 81, 143, 80, 82,
	142, 111, 130, 136, 108, 105, 79, 134, 106, 104,
	99, 91, 0, 0, 0, 125, 140, 152, 0, 113,
	146, 147, 148, 149, 110, 83, 96, 123, 90, 0,
	0, 0, 0, 100, 0, 102, 0, 0, 124, 109,
	0, 0, 0, 75, 0, 101, 150, 118, 92, 141,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 116, 0, 0, 127,
	95, 94, 0, 0, 0, 86, 0, 121, 114, 139,
	0, 115, 120, 103, 131, 117, 138, 166, 145, 129,
	144, 76, 128, 137, 85, 122, 78, 135, 126, 107,
	97, 98, 77, 0, 119, 89, 93, 88, 112, 132,
	133, 87, 151, 81, 143, 80, 82, 142, 111, 130,
	136, 108, 105, 79, 134, 106, 104, 99, 91, 0,
	0, 0, 125, 140, 152, 0, 113, 146, 147, 148,
	149, 110, 83, 96, 123, 90, 0, 0, 0, 0,
	100, 0, 102, 0, 0, 124, 109, 0, 0, 0,
	75, 0, 101, 150, 118, 92, 141, 0, 0, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 116, 0, 0, 127, 95, 94, 0,
	0, 0, 86, 0, 121, 114, 139, 0, 115, 120,
	103, 131, 117, 138, 166, 145, 129, 144, 76, 128,
	137, 85, 122, 78, 135, 126, 107, 97, 98, 77,
	0, 119, 89, 93, 88, 112, 132, 133, 87, 151,
	81, 143, 80, 82, 142, 111, 130, 136, 108, 105,
	79, 134, 106, 104, 99, 91, 0, 0, 0, 125,
	140, 152, 0, 0, 146, 147, 148, 149, 110, 83,
	96, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 101,
	150, 118, 92, 141,
}
var yyPact = [...]int{

	1984, -1000, -166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 732, 760, -1000, -1000, -1000, -1000, -1000, -1000, 546,
	5964, 6, 31, 14, 8217, 30, 103, 8748, -1000, -45,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 511, -1000, -1000,
	-1000, -1000, -1000, 717, 724, 591, 695, 607, -1000, 4563,
	3, 7309, 8040, 4147, -1000, 412, 27, 8748, -127, 8394,
	1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29, 8748, -1000, 8748, 0, 393, 0,
	8748, -1000, 58, -1000, -1000, -1000, -1000, 8748, 391, 666,
	44, 2600, 2600, 2600, 2600, -31, 2600, 2600, 567, -1000,
	-1000, -1000, -1000, 2600, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 238, 668, 4982, 4982, 732, -1000, 511,
	-1000, -1000, -1000, 665, -1000, -1000, 201, 746, -1000, 5787,
	57, -1000, 4982, 1624, 505, -1000, -1000, 505, -1000, -1000,
	42, -1000, -1000, 5380, 5380, 5380, 5380, 5380, 5380, 5380,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 505, -1000, 4774, 505, 505, 505,
	505, 505, 505, 4982, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 7863, 513, 728,
	-1000, -1000, -1000, 692, 6570, 7132, 8748, 462, -1000, 501,
	3705, -1000, -1000, -1000, 123, 6924, -1000, -1000, -1000, 664,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	433, -1000, 1290, 357, 2600, 10, 535, 8748, 153, 8748,
	2600, 8, 8748, 690, 566, 8748, -1000, 3926, -1000, 2600,
	2600, 2600, 2600, 2600, 2600, 2600, 2600, -1000, -1000, -1000,
	-1000, -1000, -1000, 2600, 2600, -1000, -1000, 8748, -1000, -1000,
	-1000, -1000, 755, 95, 200, 56, 502, -1000, 544, 717,
	238, 607, 6747, 581, -1000, -1000, 8748, -1000, 4982, 4982,
	352, -1000, 7663, -1000, -1000, 3042, 117, 5380, 232, 169,
	5380, 5380, 5380, 5380, 5380, 5380, 5380, 5380, 5380, 5380,
	5380, 5380, 5380, 5380, 5380, 234, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 338, -1000, 511, 913, 913, 71,
	71, 71, 71, 71, 71, 5579, 1746, 238, 429, 312,
	4774, 4563, 4563, 4982, 4982, 4563, 707, 140, 312, 8394,
	-1000, 238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4563,
	4563, 4563, 4563, -19, 8748, -1000, 8571, 7309, 7309, 7309,
	7309, 7309, -1000, 601, 595, -1000, 599, 580, 640, 8748,
	-1000, 427, 6570, 91, 505, -1000, 7486, -1000, -1000, -19,
	7309, 8748, -1000, -1000, 3705, 501, 4982, 65, -1000, -1000,
	-1000, -1000, 2379, 353, 179, -100, -1000, -1000, 510, -1000,
	510, 510, 510, 510, -73, -73, -73, -73, -1000, -1000,
	-1000, -1000, -1000, 545, 538, -1000, 510, 510, 510, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 537, 537, 537,
	528, 528, 548, -1000, 8748, -142, 336, -1000, 686, 66,
	-1000, 8748, -1000, -1000, 8748, 2600, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 631, 4982, 4982, 3484, 4982, -1000, -1000, -1000, 668,
	-1000, 707, 726, -1000, 637, 636, 4563, -1000, -1000, 117,
	173, -1000, -1000, 215, -1000, -1000, -1000, -1000, 54, 505,
	-1000, 1516, -1000, -1000, -1000, -1000, 232, 5380, 5380, 5380,
	275, 1516, 1418, 625, 1469, 71, 911, 911, 112, 112,
	112, 112, 112, 750, 750, -1000, -1000, -1000, 238, -1000,
	-1000, -1000, 238, 4563, 500, -1000, -1000, 4982, -1000, 238,
	416, 416, 308, 341, 416, 4563, 160, -1000, 4982, 238,
	-1000, 416, 238, 416, 416, 506, 505, -1000, 495, -1000,
	107, -1000, 51, 728, 534, 565, 1125, -1000, -1000, -1000,
	-1000, 588, -1000, 584, -1000, -1000, -1000, -1000, -1000, 24,
	23, 17, 8394, -1000, 744, 493, -1000, -1000, 312, -1000,
	328, 496, 2158, -1000, -1000, -1000, -1000, -1000, -1000, 531,
	679, 126, 305, -1000, -1000, 669, -1000, 181, -102, -1000,
	-1000, 264, -73, -73, -1000, -1000, 65, 658, 65, 65,
	65, 273, 273, -1000, -1000, -1000, -1000, 237, -1000, -1000,
	-1000, 235, -1000, 553, 8394, 2600, -1000, 3263, -1000, -1000,
	-1000, -1000, 673, 184, 116, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -20, -1000, 2600, -1000,
	627, 312, 312, 49, -1000, -1000, 8748, -1000, -1000, -1000,
	-1000, 486, -1000, -1000, -1000, 2821, 4563, -1000, 275, 1516,
	1307, -1000, 5380, 5380, -1000, -1000, 416, 4563, 312, -1000,
	-1000, -1000, 576, 234, 576, -136, 484, 129, -1000, 4982,
	256, -1000, -1000, -1000, -1000, -1000, 552, 8571, 505, -1000,
	6371, 8394, 732, 8571, 4982, 4982, 3484, -1000, -1000, 4982,
	530, -1000, 4982, -1000, -1000, -1000, 505, 505, 505, 380,
	-1000, 732, -1000, -1000, 2379, -1000, 2379, 8394, -1000, 276,
	-1000, -1000, 476, 38, -1000, -1000, -1000, 430, 65, 65,
	-1000, 113, -1000, -1000, -1000, 397, -1000, 390, 494, 386,
	8748, -1000, -1000, 492, -1000, 106, -1000, -1000, 8394, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 8394, 8748, -1000, -1000, -1000, -1000, -1000, 8394, -1000,
	-1000, 3263, -1000, 744, 7309, -1000, -1000, 238, -1000, 5380,
	1516, 1516, -1000, -1000, 238, 510, 510, -1000, 510, 528,
	-1000, 510, -54, 510, -57, 238, 238, 505, -132, -1000,
	312, 4982, -1000, 670, 474, 459, -1000, -1000, 4355, 238,
	384, 47, 380, 717, -1000, 312, 312, -1000, 312, 8394,
	312, 8394, 8394, 8394, 6172, 8394, 717, 2158, -1000, 377,
	-1000, 510, -1000, -96, 754, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -73, 271, -73, 220,
	-1000, 213, 2600, 3263, 2379, -1000, 507, -1000, -1000, -1000,
	-1000, 682, 742, 475, -1000, 1516, -1000, -1000, 45, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5380, 238, 270,
	312, 678, -1000, 505, -1000, -1000, 473, 8394, 8394, -1000,
	-1000, 368, -1000, 362, 362, 362, 91, -1000, -1000, 548,
	8394, -1000, 99, -1000, -116, 65, -1000, 65, 387, 342,
	-1000, -1000, -1000, 8394, 505, 736, 722, -1000, -1000, 100,
	-1000, -1000, 749, -1000, 505, -1000, 511, 41, -1000, 8394,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 188, 677, -1000,
	675, -1000, -1000, -1000, -1000, -1000, 332, -21, -1000, 4982,
	4982, 238, 36, -146, 8571, 459, 238, 8394, -1000, -1000,
	267, -1000, -1000, 535, 304, -1000, 8394, 312, 457, -1000,
	626, -139, -157, 354, -1000, -1000, -1000, -142, -1000, -21,
	630, -1000, 613, -1000, -1000, -1000, -32, -143, -35, -154,
	505, -163, 5181, -1000, 1256, 238, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1049, 11, 475, 1048, 1047, 1044, 1042, 1040, 1037,
	1036, 1032, 1031, 1029, 1026, 1022, 1021, 1020, 1017, 1004,
	1003, 1000, 999, 986, 87, 985, 984, 983, 55, 982,
	66, 965, 964, 24, 239, 40, 39, 365, 963, 32,
	54, 57, 961, 37, 960, 958, 957, 955, 53, 954,
	953, 1161, 951, 949, 14, 25, 943, 941, 940, 938,
	56, 2, 937, 936, 931, 930, 929, 927, 45, 3,
	8, 20, 16, 926, 171, 6, 925, 44, 924, 922,
	921, 920, 36, 917, 46, 913, 18, 50, 900, 13,
	48, 33, 22, 7, 76, 897, 27, 51, 896, 274,
	894, 109, 893, 890, 889, 884, 882, 111, 0, 501,
	510, 65, 881, 15, 880, 1160, 78, 52, 19, 878,
	28, 252, 30, 873, 871, 23, 869, 866, 863, 857,
	854, 840, 71, 838, 833, 832, 26, 10, 827, 825,
	49, 21, 824, 823, 821, 34, 47, 816, 42, 815,
	814, 812, 29, 41, 811, 9, 810, 808, 1, 806,
	17, 793, 4, 783, 5, 43, 778, 774, 89, 139,
	766, 759, 58,
}
var yyR1 = [...]int{

	0, 166, 167, 167, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 170, 170,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 164, 164, 163, 162, 162, 161, 161,
	160, 16, 149, 150, 150, 150, 146, 126, 126, 126,
	129, 129, 127, 127, 127, 127, 127, 127, 127, 128,
	128, 128, 128, 128, 130, 130, 130, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 145, 145, 132, 132, 140, 140,
	141, 141, 141, 138, 138, 139, 139, 142, 142, 142,
	133, 133, 133, 133, 133, 133, 133, 135, 135, 143,
	143, 136, 136, 136, 137, 137, 144, 144, 144, 144,
	144, 134, 134, 147, 154, 154, 154, 154, 148, 148,
	156, 156, 155, 151, 151, 151, 152, 152, 152, 153,
	153, 153, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 159, 157, 157, 158, 158, 13, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 124, 124, 124,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 171, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 112, 112, 112, 111, 111, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 119, 119, 118, 118, 118, 117, 117,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 100, 100, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 172, 172, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 122, 122, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 96, 94, 94, 97, 97, 95, 95, 95, 114,
	114, 114, 98, 98, 101, 101, 102, 102, 99, 99,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	104, 104, 104, 105, 105, 106, 106, 106, 113, 113,
	109, 109, 110, 110, 115, 115, 116, 116, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 168, 169, 120,
	121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 8,
	4, 6, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 8, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 2, 2, 2, 2, 2, 0, 3, 0,
	1, 0, 3, 3, 0, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 3, 4,
	2, 4, 2, 2, 2, 2, 3, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -166, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 138, 116, 131, 49, 150, 151,
	153, 154, 25, 132, 133, 136, 137, -168, 8, 213,
	53, -167, 226, -82, 15, -26, 5, -24, -171, -24,
	-24, -24, -24, -24, -149, 53, -106, 120, 70, 146,
	118, 124, -109, 56, -108, 219, 150, 161, 155, 182,
	174, 172, 175, 201, 65, 153, 134, 170, 166, 164,
	27, 187, 224, 165, 130, 129, 202, 159, 160, 186,
	32, 221, 34, 142, 185, 181, 184, 158, 180, 38,
	200, 177, 167, 18, 137, 140, 125, 144, 223, 163,
	141, 136, 154, 203, 37, 191, 157, 128, 151, 148,
	178, 143, 168, 169, 183, 156, 179, 152, 145, 138,
	192, 225, 176, 173, 149, 147, 196, 197, 198, 199,
	222, 171, 193, -99, 120, 122, 118, 118, 119, 120,
	118, -51, -115, 56, -108, 120, 146, 118, 106, 175,
	112, 194, 119, 32, 144, -124, 118, 195, 147, 196,
	197, 198, 199, 56, 203, 202, -115, 152, -120, -120,
	-120, -120, -120, -2, -86, 17, 16, -5, -3, -168,
	6, 20, 21, -30, 39, 40, -25, -36, 97, -37,
	-115, -56, 72, -61, 29, 56, -108, 23, -60, -57,
	-75, -73, -74, 106, 107, 95, 96, 103, 73, 108,
	-65, -63, -64, -66, 58, 57, 66, 59, 60, 61,
	62, 67, 68, 69, -109, -71, -168, 43, 44, 214,
	215, 218, 216, 75, 33, 204, 212, 211, 210, 208,
	209, 206, 207, 123, 205, 101, 213, -99, -39, -40,
	-41, -42, -53, -74, -168, -51, 11, -46, -51, -94,
	-123, -97, 203, 202, -110, -95, -109, -107, 201, 175,
	200, 117, 71, 22, 24, 189, 74, 106, 16, 75,
	105, 214, 112, 47, 206, 207, 204, 205, 194, 29,
	10, 25, 132, 21, 99, 114, 78, 79, 135, 23,
	133, 69, 19, 50, 11, 13, 14, 123, 122, 90,
	119, 45, 8, 108, 26, 87, 41, 28, 43, 88,
	17, 208, 209, 31, 218, 139, 101, 48, 35, 72,
	67, 51, 70, 15, 46, 89, 115, 213, 44, 6,
	217, 30, 131, 42, 118, 195, 77, 121, 68, 5,
	124, 9, 49, 52, 210, 211, 212, 33, 76, 12,
	-150, -146, 56, 119, -51, 213, -109, -102, 123, 118,
	-51, -51, -101, 123, 56, -101, -51, 109, -51, 56,
	30, 205, 56, 144, 118, 145, 120, -121, -168, -110,
	-121, -121, -121, 148, 149, -121, -121, 51, -121, -169,
	55, -87, 19, 31, -37, -115, -83, -84, -37, -82,
	-2, -24, 35, -28, 21, 64, 11, -112, 71, 70,
	87, -111, 22, -109, 58, 109, -37, -58, 90, 72,
	88, 89, 74, 92, 91, 102, 95, 96, 97, 98,
	99, 100, 101, 93, 94, 105, 80, 81, 82, 83,
	84, 85, 86, -100, -168, -74, -168, 110, 111, -61,
	-61, -61, -61, -61, -61, -61, -168, -2, -69, -37,
	-168, -168, -168, -168, -168, -168, -168, -78, -37, -168,
	-172, -168, -172, -172, -172, -172, -172, -172, -172, -168,
	-168, -168, -168, -52, 26, -51, 30, 54, -47, -49,
	-48, -50, 41, 45, 47, 42, 43, 44, 48, -119,
	22, -39, -168, -118, 140, -117, 22, -115, 58, -51,
	-170, 54, 11, 52, 54, -94, 80, -114, -109, 58,
	29, 30, 55, 54, -126, -129, -131, -130, -127, -128,
	172, 173, 106, 176, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 30, 134, 168, 169, 170, 171,
	155, 156, 157, 158, 159, 160, 161, 163, 164, 165,
	166, 167, 56, -121, 120, -164, 52, -51, 72, -51,
	-121, 121, -51, 23, 51, -51, -116, -115, -107, -121,
	-121, -121, -121, -121, -121, -121, -121, -121, -121, -51,
	9, 90, 54, 18, 109, 54, -85, 24, 25, -86,
	-169, -30, -62, -109, 59, 62, -29, 42, -51, -37,
	-37, -67, 67, 72, 68, 69, -111, 97, -116, -110,
	-107, -61, -68, -71, -74, 63, 90, 88, 89, 74,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -122, 56, 58, 56, -60,
	-60, -109, -35, 21, -34, -36, -169, 54, -169, -2,
	-34, -34, -37, -37, -34, -28, -76, -77, 76, -109,
	-169, -34, -35, -34, -34, -90, 140, -51, -93, -96,
	-75, -109, -115, -40, -41, -41, -40, -41, 41, 41,
	41, 46, 41, 46, 41, -48, -115, -169, -54, 49,
	122, 50, -168, -117, -90, -39, -51, -97, -37, -137,
	105, -151, -152, -153, -110, 58, 59, -146, -147, -154,
	125, 124, -148, 119, 28, -142, 67, 72, -138, 192,
	-132, 53, -132, -132, -132, -132, -136, 175, -136, -136,
	-136, 53, 53, -132, -132, -132, -140, 53, -140, -140,
	-141, 53, -141, -113, 52, -51, -162, 222, -163, 56,
	23, -103, 117, 114, 115, -159, 113, 189, 175, 65,
	29, 15, 214, 140, 225, 56, 141, -51, -51, -121,
	37, -37, -37, -116, -84, -87, -98, 19, 11, 33,
	33, -34, 67, 68, 69, 109, -168, -68, -61, -61,
	-61, -33, 135, 71, -169, -169, -34, 54, -37, -169,
	-169, -169, 54, 52, 22, -169, -34, -79, -77, 78,
	-37, -169, -169, -169, -169, -169, -59, 30, 33, -2,
	-168, -168, -55, 54, 12, 80, 109, -44, -43, 51,
	52, -45, 51, -43, 41, 41, 119, 119, 119, -91,
	-109, -55, -55, 56, 54, -153, 80, 53, 28, -148,
	56, 56, -133, 29, 67, -139, 193, 59, -136, -136,
	-137, 30, -137, -137, -137, -145, 58, -145, 59, 59,
	51, -109, -121, -161, -160, -110, -120, -165, 146, 126,
	127, 130, 129, 56, 119, 28, 125, 128, 140, 124,
	-165, 146, -104, -105, 121, 22, 119, 28, 140, -121,
	38, 109, -51, -38, 11, 97, -110, -35, -33, 71,
	-61, -61, -169, -36, -125, 106, 172, 134, 170, 166,
	186, 177, 191, 168, 192, -122, -125, 219, -82, 79,
	-37, 77, -92, 51, -93, -70, -72, -71, -168, -2,
	-88, -109, -91, -82, -96, -37, -37, -110, -37, 53,
	-37, -168, -168, -168, -169, 54, -82, -152, -153, -156,
	-155, -109, 56, -135, 51, 58, 59, 60, 67, 204,
	66, 55, -137, -137, 56, 106, 55, 54, 55, 54,
	55, 54, -51, 54, 80, -120, -109, -120, -109, -51,
	-120, -109, -55, -39, -169, -61, -169, -132, -132, -132,
	-141, -132, 160, -132, 160, -169, -169, -168, -32, 217,
	-37, 27, -92, 54, -169, -169, -169, 54, 109, -169,
	-86, -89, -109, -89, -89, -89, -118, -109, -86, 55,
	54, -132, -143, 189, 9, -136, 58, -136, 59, 59,
	-121, -160, -153, 53, 26, -80, 13, -136, 56, -61,
	-169, 58, 28, -72, 33, -2, -168, -109, -109, 54,
	55, -169, -169, -169, -54, -113, -155, -144, 125, 28,
	124, 204, -137, -137, 55, 55, -89, -168, -81, 14,
	16, -31, 90, 222, 9, -70, -2, 109, -109, -134,
	65, 28, 28, 55, -157, -158, 140, -37, -69, -169,
	220, 48, 223, -93, -169, -109, 58, -164, -169, 54,
	-109, 38, 221, 224, -162, -158, 33, 38, 142, 222,
	143, 223, -168, 224, -61, 139, -169, -169,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 456, 0, 231, 231, 231, 231, 231, 231, 0,
	525, 508, 0, 0, 0, 0, 217, 221, 222, 0,
	224, 225, 709, 709, 709, 709, 709, 0, 33, 34,
	707, 1, 3, 464, 0, 0, 235, 238, 233, 0,
	508, 0, 0, 0, 48, 0, 0, 697, 0, 698,
	506, 526, 527, 530, 531, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 699, 700, 701, 702, 703,
	704, 705, 706, 0, 0, 509, 0, 504, 0, 504,
	0, 192, 302, 534, 535, 697, 698, 0, 0, 0,
	0, 710, 710, 710, 710, 0, 710, 710, 210, 212,
	213, 214, 215, 710, 218, 219, 220, 223, 226, 227,
	228, 229, 230, 27, 468, 0, 0, 456, 29, 0,
	231, 236, 237, 241, 239, 240, 232, 0, 249, 253,
	0, 310, 0, 315, 317, -2, -2, 0, 352, 353,
	354, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	379, 380, 381, 382, 441, 442, 443, 444, 445, 446,
	447, 448, 319, 320, 438, 488, 0, 0, 0, 0,
	0, 0, 0, 429, 0, 403, 403, 403, 403, 403,
	403, 403, 403, 0, 0, 0, 0, 0, 0, 260,
	262, 263, 264, 283, 0, 285, 0, 0, 40, 44,
	0, 492, -2, -2, 0, 0, 532, 533, -2, 634,
	-2, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	0, 63, 0, 0, 710, 0, 53, 0, 0, 0,
	710, 0, 0, 0, 0, 0, 191, 0, 193, 710,
	710, 710, 710, 710, 710, 710, 710, 202, 711, 712,
	203, 204, 205, 710, 710, 207, 208, 0, 216, 28,
	708, 22, 0, 0, 465, 0, 457, 458, 461, 464,
	27, 238, 0, 243, 242, 234, 0, 250, 0, 0,
	0, 254, 0, 256, 257, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 338, 339, 340,
	341, 342, 343, 316, 0, 330, 0, 0, 0, 372,
	373, 374, 375, 376, 377, 0, 245, 27, 0, 350,
	0, 0, 0, 0, 0, 0, 241, 0, 430, 0,
	395, 0, 396, 397, 398, 399, 400, 401, 402, 0,
	245, 0, 0, 42, 0, 301, 0, 0, 0, 0,
	0, 0, 290, 0, 0, 293, 0, 0, 0, 0,
	284, 0, 0, 304, 667, 286, 0, 288, 289, 42,
	0, 0, 38, 39, 0, 45, 0, 134, 499, 500,
	501, 497, 153, 0, 117, 113, 68, 69, 106, 71,
	106, 106, 106, 106, 131, 131, 131, 131, 97, 98,
	99, 100, 101, 0, 0, 84, 106, 106, 106, 88,
	72, 73, 74, 75, 76, 77, 78, 108, 108, 108,
	110, 110, 528, 50, 0, 56, 0, 61, 0, 0,
	169, 0, 188, 505, 0, 710, 303, 536, 537, 194,
	195, 196, 197, 198, 199, 200, 201, 206, 209, 211,
	469, 0, 0, 0, 0, 0, 460, 462, 463, 468,
	30, 241, 0, 449, 0, 0, 0, 244, 25, 311,
	312, 314, 331, 0, 333, 335, 255, 251, 0, 439,
	-2, 321, 322, 346, 347, 348, 0, 0, 0, 0,
	344, 326, 0, 357, 358, 359, 360, 361, 362, 363,
	364, 365, 366, 367, 368, 371, 414, 415, 0, 369,
	370, 378, 0, 0, 246, 247, 349, 0, 487, 27,
	0, 0, 0, 0, 0, 0, 436, 433, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 300, 308, 489,
	0, 438, 0, 261, 279, 281, 0, 276, 291, 292,
	294, 0, 296, 0, 298, 299, 265, 266, 267, 0,
	0, 0, 0, 287, 308, 308, 41, 493, 494, 495,
	0, 62, 154, 156, 159, 160, 161, 64, 65, 0,
	0, 0, 0, 148, 149, 120, 118, 0, 115, 114,
	70, 0, 131, 131, 91, 92, 134, 0, 134, 134,
	134, 0, 0, 85, 86, 87, 79, 0, 80, 81,
	82, 0, 83, 0, 0, 710, 52, 0, 54, 55,
	507, 709, 0, 0, 520, 170, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 0, 187, 710, 190,
	0, 466, 467, 0, 459, 23, 0, 502, 503, 450,
	451, 258, 332, 334, 336, 0, 245, 323, 344, 327,
	0, 324, 0, 0, 318, 383, 0, 0, 351, -2,
	386, 387, 0, 0, 0, 0, 456, 0, 434, 0,
	0, 394, 405, 406, 407, 408, 481, 0, 0, -2,
	0, 0, 456, 0, 0, 0, 0, 273, 280, 0,
	0, 274, 0, 275, 295, 297, 0, 0, 0, 0,
	271, 456, 37, 135, 0, 157, 0, 0, 144, 0,
	146, 147, 127, 0, 119, 67, 116, 0, 134, 134,
	93, 0, 94, 95, 96, 0, 104, 0, 0, 0,
	0, 529, 51, 57, 58, 0, 162, 709, 0, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	709, 0, 0, 709, 521, 522, 523, 524, 0, 189,
	470, 0, 24, 308, 0, 252, 440, 0, 325, 0,
	345, 328, 384, 248, 0, 106, 106, 419, 106, 110,
	422, 106, 424, 106, 427, 0, 0, 0, 431, 393,
	437, 0, 31, 0, 481, 471, 483, 485, 0, 27,
	0, 477, 0, 464, 490, 309, 491, 439, 277, 0,
	282, 0, 0, 0, 285, 0, 464, 155, 158, 0,
	150, 106, 145, 129, 0, 121, 122, 123, 124, 125,
	126, 107, 89, 90, 132, 133, 131, 0, 131, 0,
	111, 0, 710, 0, 0, 163, 0, 164, 166, 167,
	168, 0, 452, 259, 385, 329, 388, 416, 131, 420,
	421, 423, 425, 426, 428, 390, 389, 0, 0, 0,
	435, 0, 32, 0, 486, -2, 0, 0, 0, 43,
	35, 0, 269, 0, 0, 0, 304, 272, 36, 528,
	0, 152, 136, 130, 0, 134, 105, 134, 0, 0,
	49, 59, 60, 0, 0, 454, 0, 417, 418, 409,
	392, 432, 0, 484, 0, -2, 0, 479, 478, 0,
	278, 305, 306, 307, 268, 143, 151, 141, 0, 138,
	140, 128, 102, 103, 109, 112, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 474, 27, 0, 270, 66,
	0, 137, 139, 53, 0, 183, 0, 455, 453, 391,
	0, 0, 0, 482, -2, 480, 142, 56, 182, 0,
	0, 410, 0, 413, 165, 184, 0, 411, 0, 0,
	0, 0, 0, 412, 0, 0, 185, 186,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 226,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:292
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:297
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:298
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:325
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:343
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:350
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:377
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:389
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:401
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:405
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:411
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:435
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:440
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:444
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:470
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:475
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:488
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:497
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:501
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:512
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:517
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:534
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:540
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:547
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:554
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:559
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:563
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:569
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:590
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:753
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:771
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:779
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:783
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:789
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:806
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:824
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:829
		{
			yyVAL.optVal = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:858
		{
			yyVAL.optVal = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:867
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = ""
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:880
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.colKeyOpt = colKey
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:910
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:914
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:919
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:923
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:929
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:939
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:943
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:967
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:973
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:978
		{
			yyVAL.str = ""
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:986
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:998
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 166:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1057
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1062
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1122
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1130
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1135
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.str = SessionStr
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.str = GlobalStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.statement = &Begin{}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.statement = &Begin{}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &Commit{}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.statement = &Rollback{}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.statement = &OtherRead{}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.statement = &OtherRead{}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.statement = &OtherRead{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1328
		{
			setAllowComments(yylex, true)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.bytes2 = nil
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.str = UnionStr
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.str = UnionAllStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.str = UnionDistinctStr
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.str = SQLCacheStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.str = DistinctStr
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.str = StraightJoinHint
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.selectExprs = nil
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1548
		{
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1554
		{
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.empty = struct{}{}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.empty = struct{}{}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.str = JoinStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.str = JoinStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.str = StraightJoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.str = LeftJoinStr
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.str = LeftJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.str = RightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.str = RightJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.str = NaturalJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1627
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.indexHints = nil
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.str = IsNullStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.str = IsNotNullStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = IsTrueStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = IsNotTrueStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.str = IsFalseStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.str = IsNotFalseStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.str = EqualStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.str = LessThanStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.str = GreaterThanStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.str = LessEqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.str = GreaterEqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.str = NotEqualStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = nil
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1958
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 391:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.str = BooleanModeStr
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.str = QueryExpansionStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.str = string("")
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = nil
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &NullVal{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.exprs = nil
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.orderBy = nil
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = AscScr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = AscScr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.str = DescScr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.limit = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.str = ForUpdateStr
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = ShareModeStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2442
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.updateExprs = nil
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.bytes = []byte("charset")
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.expr = &Default{}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.byt = 0
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.byt = 1
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.str = IgnoreStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2859
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			decNesting(yylex)
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2873
		{
			forceEOF(yylex)
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2878
		{
			forceEOF(yylex)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			forceEOF(yylex)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const BIT = 57491
const TINYINT = 57492
const SMALLINT = 57493
const MEDIUMINT = 57494
const INT = 57495
const INTEGER = 57496
const BIGINT = 57497
const INTNUM = 57498
const REAL = 57499
const DOUBLE = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const TEXT = 57514
const TINYTEXT = 57515
const MEDIUMTEXT = 57516
const LONGTEXT = 57517
const BLOB = 57518
const TINYBLOB = 57519
const MEDIUMBLOB = 57520
const LONGBLOB = 57521
const JSON = 57522
const ENUM = 57523
const GEOMETRY = 57524
const POINT = 57525
const LINESTRING = 57526
const POLYGON = 57527
const GEOMETRYCOLLECTION = 57528
const MULTIPOINT = 57529
const MULTILINESTRING = 57530
const MULTIPOLYGON = 57531
const NULLX = 57532
const AUTO_INCREMENT = 57533
const APPROXNUM = 57534
const SIGNED = 57535
const UNSIGNED = 57536
const ZEROFILL = 57537
const COLLATION = 57538
const DATABASES = 57539
const TABLES = 57540
const VITESS_KEYSPACES = 57541
const VITESS_SHARDS = 57542
const VITESS_TABLETS = 57543
const VSCHEMA_TABLES = 57544
const VITESS_TARGET = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 291,
	160, 291,
	-2, 281,
	-1, 258,
	112, 621,
	-2, 617,
	-1, 259,
	112, 622,
	-2, 618,
	-1, 322,
	82, 790,
	-2, 60,
	-1, 323,
	82, 748,
	-2, 61,
	-1, 328,
	82, 729,
	-2, 583,
	-1, 330,
	82, 769,
	-2, 585,
	-1, 583,
	1, 343,
	5, 343,
	12, 343,
	13, 343,
	14, 343,
	15, 343,
	17, 343,
	19, 343,
	30, 343,
	31, 343,
	42, 343,
	43, 343,
	44, 343,
	45, 343,
	46, 343,
	48, 343,
	49, 343,
	52, 343,
	53, 343,
	55, 343,
	56, 343,
	262, 343,
	-2, 361,
	-1, 586,
	53, 43,
	55, 43,
	-2, 45,
	-1, 722,
	112, 624,
	-2, 620,
	-1, 934,
	5, 30,
	-2, 427,
	-1, 959,
	5, 29,
	-2, 557,
	-1, 1199,
	5, 30,
	-2, 558,
	-1, 1249,
	5, 29,
	-2, 560,
	-1, 1322,
	5, 30,
	-2, 561,
}

const yyPrivate = 57344

const yyLast = 11117

var yyAct = [...]int{

	259, 1357, 1313, 873, 548, 658, 1347, 980, 1261, 263,
	962, 1100, 1219, 1134, 801, 853, 1031, 237, 963, 1101,
	867, 289, 1097, 823, 1107, 1113, 1074, 757, 57, 926,
	747, 824, 82, 833, 754, 900, 201, 820, 687, 201,
	327, 1005, 1034, 986, 547, 3, 1022, 596, 773, 803,
	724, 756, 863, 427, 486, 788, 480, 595, 321, 492,
	799, 290, 51, 837, 246, 318, 781, 201, 82, 580,
	500, 908, 201, 261, 201, 316, 82, 56, 1350, 1334,
	1345, 1320, 1342, 874, 1333, 1319, 1092, 1193, 579, 562,
	432, 250, 1272, 1129, 1130, 453, 236, 61, 815, 816,
	228, 1142, 1143, 1144, 597, 585, 598, 1128, 993, 1147,
	1145, 992, 814, 51, 994, 890, 234, 460, 233, 1013,
	846, 242, 847, 63, 64, 65, 66, 67, 471, 889,
	196, 192, 193, 194, 1222, 472, 469, 470, 1238, 854,
	1182, 198, 441, 1180, 227, 229, 230, 231, 232, 464,
	465, 235, 1344, 1341, 1314, 1055, 782, 894, 1304, 838,
	1262, 455, 1365, 457, 1270, 442, 888, 981, 983, 435,
	1361, 190, 317, 1264, 189, 657, 190, 429, 840, 431,
	666, 1052, 840, 1123, 1122, 324, 1121, 1054, 430, 438,
	201, 204, 201, 454, 456, 191, 536, 537, 201, 1293,
	1202, 1061, 942, 920, 696, 201, 504, 1006, 448, 82,
	82, 82, 82, 1151, 82, 821, 885, 882, 883, 514,
	881, 524, 524, 82, 1288, 513, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 688, 693, 524,
	499, 1263, 1302, 902, 982, 1161, 1111, 195, 599, 428,
	939, 892, 895, 82, 517, 518, 519, 520, 521, 514,
	70, 458, 524, 478, 1152, 1271, 1269, 854, 1094, 488,
	459, 459, 459, 459, 839, 459, 1359, 452, 839, 1360,
	1146, 1358, 426, 1053, 459, 1051, 887, 489, 774, 774,
	949, 731, 1318, 497, 494, 439, 71, 440, 661, 434,
	498, 497, 1011, 447, 51, 729, 730, 728, 886, 499,
	449, 938, 1366, 937, 201, 201, 201, 499, 689, 533,
	82, 901, 535, 498, 497, 1324, 82, 714, 716, 717,
	498, 497, 1307, 715, 476, 477, 843, 444, 445, 446,
	499, 490, 844, 479, 1229, 1075, 1228, 499, 891, 1026,
	546, 1367, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 893, 561, 563, 563, 563, 563, 563, 563, 563,
	563, 571, 572, 573, 574, 578, 584, 436, 437, 54,
	1025, 840, 1077, 1014, 22, 593, 917, 918, 919, 727,
	1289, 587, 564, 565, 566, 567, 568, 569, 570, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	428, 1326, 524, 188, 1079, 748, 1083, 749, 1078, 577,
	1076, 586, 995, 1303, 996, 1081, 1245, 201, 1226, 498,
	497, 288, 82, 695, 1080, 1058, 1096, 324, 201, 201,
	82, 1023, 201, 1300, 241, 201, 499, 1082, 1084, 201,
	1006, 82, 82, 82, 82, 82, 82, 82, 82, 1001,
	699, 700, 876, 80, 750, 82, 82, 1267, 1343, 1327,
	694, 461, 462, 463, 201, 466, 672, 839, 313, 314,
	1330, 479, 836, 834, 475, 835, 671, 498, 497, 675,
	832, 838, 82, 459, 1267, 1311, 201, 1267, 479, 326,
	662, 459, 82, 660, 499, 655, 701, 433, 498, 497,
	1267, 1294, 459, 459, 459, 459, 459, 459, 459, 459,
	673, 1267, 1266, 1217, 1216, 499, 459, 459, 450, 725,
	1204, 479, 607, 1201, 479, 1158, 1157, 1154, 1155, 1154,
	1153, 932, 479, 663, 664, 722, 82, 667, 785, 479,
	670, 759, 479, 1277, 24, 703, 590, 606, 605, 279,
	278, 281, 282, 283, 284, 766, 769, 256, 280, 285,
	443, 775, 718, 1276, 1273, 1148, 720, 201, 957, 690,
	24, 1098, 958, 1064, 1110, 201, 201, 987, 987, 201,
	201, 944, 58, 82, 841, 761, 784, 51, 591, 1110,
	589, 710, 54, 762, 763, 759, 82, 778, 1248, 770,
	751, 752, 550, 941, 808, 1197, 589, 24, 771, 785,
	1160, 785, 721, 777, 1156, 779, 780, 932, 54, 243,
	785, 1110, 932, 997, 813, 943, 855, 856, 857, 932,
	326, 326, 326, 326, 592, 326, 800, 697, 54, 809,
	584, 811, 812, 807, 326, 1335, 659, 940, 201, 1310,
	828, 82, 1233, 82, 1224, 54, 848, 201, 1209, 868,
	201, 82, 1139, 1114, 1115, 869, 1000, 54, 864, 859,
	858, 871, 783, 1352, 502, 1348, 1141, 201, 265, 201,
	201, 1117, 1098, 656, 1027, 810, 790, 793, 794, 795,
	791, 665, 792, 796, 865, 866, 1114, 1115, 669, 473,
	324, 709, 676, 677, 678, 679, 680, 681, 682, 683,
	974, 1120, 459, 825, 459, 975, 684, 685, 972, 1119,
	971, 970, 459, 973, 247, 248, 1339, 722, 849, 850,
	851, 852, 790, 793, 794, 795, 791, 1332, 792, 796,
	725, 326, 909, 702, 860, 861, 862, 601, 910, 976,
	916, 794, 795, 872, 515, 516, 517, 518, 519, 520,
	521, 514, 896, 252, 524, 897, 1060, 905, 493, 922,
	1338, 915, 914, 921, 481, 1018, 201, 201, 201, 201,
	201, 604, 899, 491, 964, 1010, 482, 451, 201, 1309,
	1308, 201, 1246, 1008, 1002, 201, 1195, 931, 1234, 201,
	878, 758, 760, 668, 721, 798, 244, 245, 493, 238,
	913, 948, 1282, 946, 82, 58, 959, 776, 912, 239,
	1281, 1236, 987, 474, 538, 539, 540, 541, 542, 543,
	544, 545, 686, 960, 961, 761, 495, 584, 584, 584,
	584, 584, 977, 989, 985, 998, 966, 967, 1354, 969,
	1290, 990, 800, 326, 984, 1015, 1016, 1354, 1353, 988,
	584, 326, 82, 82, 965, 82, 1223, 968, 692, 1007,
	60, 62, 326, 326, 326, 326, 326, 326, 326, 326,
	588, 1017, 55, 1019, 1020, 1021, 326, 326, 82, 1003,
	1004, 1, 1346, 875, 1030, 884, 1024, 1312, 1260, 1133,
	831, 822, 201, 69, 425, 68, 1301, 830, 829, 1268,
	1221, 82, 877, 705, 879, 1047, 842, 1012, 845, 1140,
	1306, 1009, 898, 502, 459, 612, 326, 610, 1057, 611,
	609, 825, 614, 613, 608, 212, 319, 797, 600, 534,
	870, 496, 72, 1068, 1050, 1049, 1067, 880, 467, 459,
	1073, 82, 82, 468, 214, 532, 1086, 964, 1099, 1085,
	911, 991, 325, 1105, 698, 1093, 485, 753, 1280, 1235,
	1102, 1033, 947, 722, 559, 82, 772, 767, 767, 264,
	713, 277, 1032, 767, 1118, 274, 276, 275, 82, 704,
	82, 82, 956, 583, 506, 1104, 1109, 262, 254, 1124,
	582, 575, 483, 487, 929, 1125, 789, 1062, 930, 787,
	1103, 1131, 51, 786, 326, 934, 935, 936, 201, 505,
	1116, 1132, 1127, 1112, 945, 1136, 82, 326, 1066, 951,
	581, 952, 953, 954, 955, 1137, 1138, 1063, 1192, 82,
	201, 1287, 708, 1149, 1150, 26, 82, 59, 249, 19,
	1089, 18, 82, 979, 549, 201, 17, 20, 16, 15,
	14, 30, 21, 560, 723, 13, 12, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 326, 1169, 326, 11, 10, 9, 8, 7,
	1178, 6, 326, 5, 4, 240, 23, 1170, 2, 0,
	0, 0, 0, 0, 0, 825, 0, 825, 0, 0,
	964, 0, 1196, 0, 0, 1171, 584, 0, 326, 1206,
	0, 0, 82, 1159, 1029, 1162, 0, 0, 1205, 0,
	82, 0, 0, 1215, 0, 0, 0, 0, 1164, 0,
	0, 1167, 0, 0, 1191, 1166, 0, 0, 0, 1056,
	82, 82, 82, 998, 0, 0, 0, 0, 0, 1225,
	0, 1227, 0, 0, 0, 0, 0, 1231, 0, 1066,
	0, 0, 0, 1211, 1212, 1213, 0, 0, 0, 0,
	0, 0, 1237, 1232, 0, 1072, 726, 0, 1175, 1176,
	0, 1177, 82, 82, 1179, 82, 1181, 0, 0, 0,
	82, 0, 82, 82, 82, 201, 767, 1247, 82, 1102,
	0, 459, 1255, 1254, 1256, 1257, 1258, 0, 0, 1259,
	0, 1265, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 1249, 1278, 0, 691, 825,
	0, 0, 0, 0, 0, 326, 0, 0, 1218, 1103,
	1291, 0, 1250, 1274, 0, 1275, 0, 1298, 82, 1299,
	1102, 711, 712, 583, 0, 0, 0, 583, 1032, 825,
	199, 0, 0, 226, 0, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 82, 1292, 1279, 923, 924, 925,
	964, 1321, 0, 1028, 326, 201, 326, 0, 253, 0,
	1103, 199, 51, 0, 0, 82, 199, 1328, 199, 0,
	1190, 0, 0, 0, 549, 0, 0, 764, 765, 326,
	0, 1172, 1336, 1337, 0, 0, 82, 0, 1174, 479,
	0, 0, 0, 1042, 0, 0, 0, 0, 1340, 1183,
	1184, 1185, 326, 1351, 1188, 0, 1362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1198, 1199, 1200,
	0, 1203, 1040, 819, 326, 0, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 1214, 767,
	524, 0, 1106, 1108, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1349, 0, 524, 0,
	1325, 0, 0, 0, 1042, 0, 1108, 726, 0, 0,
	0, 1230, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 326, 1135, 0, 199, 0, 199, 0, 0, 1041,
	0, 0, 199, 1040, 1046, 1043, 1036, 1044, 1039, 199,
	0, 0, 1037, 1038, 0, 0, 1244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 1163, 906, 907,
	0, 487, 1048, 0, 583, 583, 583, 583, 583, 0,
	1165, 0, 0, 0, 0, 0, 0, 1168, 0, 583,
	0, 0, 0, 326, 0, 1070, 1071, 583, 0, 0,
	0, 0, 0, 1283, 1284, 1285, 1286, 0, 1087, 1088,
	1041, 1090, 1091, 0, 0, 1046, 1043, 1036, 1044, 1039,
	1295, 1296, 1297, 1037, 1038, 210, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 1045, 0, 0,
	0, 0, 767, 1035, 0, 0, 0, 0, 950, 222,
	0, 1317, 0, 0, 0, 0, 1322, 0, 199, 199,
	199, 0, 0, 326, 0, 0, 0, 0, 0, 0,
	0, 1220, 0, 0, 0, 0, 1329, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 326, 326, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 213, 209, 0, 0, 1363,
	1364, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 1251, 1252, 524, 1253, 1173, 0, 0,
	0, 1220, 0, 1220, 1220, 1220, 0, 211, 0, 1135,
	215, 0, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 0, 1220, 524, 0, 0, 0,
	0, 199, 0, 0, 927, 0, 1059, 0, 206, 0,
	0, 0, 199, 199, 0, 0, 199, 0, 0, 199,
	1189, 479, 0, 674, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 216, 208, 0, 217, 218,
	219, 221, 220, 225, 0, 0, 0, 0, 199, 224,
	223, 0, 767, 1095, 0, 1323, 0, 0, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	199, 0, 524, 0, 0, 0, 1331, 0, 1069, 674,
	0, 0, 0, 583, 1239, 1240, 0, 1241, 1242, 1243,
	0, 1126, 0, 0, 0, 0, 0, 1220, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	0, 0, 524, 0, 24, 25, 52, 27, 28, 0,
	0, 253, 0, 0, 0, 0, 253, 253, 0, 0,
	768, 768, 253, 43, 0, 0, 768, 0, 29, 48,
	49, 0, 0, 0, 0, 0, 253, 253, 253, 253,
	629, 199, 0, 0, 0, 0, 0, 0, 38, 199,
	805, 0, 54, 199, 199, 508, 0, 511, 0, 0,
	0, 0, 0, 525, 526, 527, 528, 529, 530, 531,
	0, 509, 510, 507, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 0, 0, 524, 0,
	1194, 0, 0, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 0, 0, 0, 1207, 0, 0, 1208, 0,
	0, 1210, 0, 31, 32, 34, 33, 36, 617, 50,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 199, 0, 0, 1355, 0, 0,
	37, 44, 45, 0, 0, 46, 47, 35, 0, 0,
	0, 199, 0, 903, 904, 630, 0, 0, 0, 39,
	40, 674, 41, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 0, 0, 643, 644, 645, 646,
	647, 648, 649, 0, 650, 651, 652, 653, 654, 631,
	632, 633, 634, 615, 616, 0, 0, 618, 0, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 635,
	636, 637, 638, 639, 640, 641, 642, 0, 0, 0,
	253, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 0, 0, 524, 253, 0, 0, 1186,
	479, 0, 0, 0, 0, 53, 0, 0, 0, 768,
	199, 199, 199, 199, 199, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 0, 199, 0, 0, 0, 805,
	0, 0, 928, 199, 0, 1315, 549, 513, 512, 522,
	523, 515, 516, 517, 518, 519, 520, 521, 514, 0,
	0, 524, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 0, 0, 524, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 0, 0, 524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 768, 0, 0, 260, 0, 0, 0, 103,
	0, 257, 0, 0, 0, 118, 300, 120, 0, 0,
	156, 129, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 817, 0, 54, 0, 0, 258,
	279, 278, 281, 282, 283, 284, 0, 0, 96, 280,
	285, 286, 287, 818, 0, 0, 255, 272, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 269,
	270, 0, 0, 0, 0, 311, 0, 271, 0, 0,
	266, 267, 268, 273, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 199,
	309, 0, 143, 0, 159, 109, 117, 84, 90, 0,
	108, 135, 148, 152, 0, 0, 0, 99, 0, 150,
	139, 171, 0, 140, 149, 121, 163, 144, 170, 203,
	178, 161, 177, 85, 160, 169, 97, 153, 87, 167,
	158, 127, 113, 114, 86, 768, 147, 102, 106, 101,
	136, 164, 165, 100, 186, 91, 176, 89, 92, 175,
	134, 162, 168, 128, 125, 88, 166, 126, 124, 116,
	104, 110, 141, 123, 142, 111, 131, 130, 132, 0,
	0, 0, 157, 173, 187, 94, 0, 0, 179, 180,
	181, 182, 183, 0, 0, 95, 107, 133, 93, 112,
	154, 115, 122, 146, 185, 138, 151, 98, 172, 155,
	301, 310, 307, 308, 305, 306, 304, 303, 302, 312,
	293, 294, 295, 296, 298, 0, 297, 83, 0, 119,
	184, 145, 105, 174, 413, 403, 0, 374, 416, 352,
	366, 424, 367, 368, 396, 338, 382, 137, 364, 805,
	355, 333, 361, 334, 353, 376, 103, 379, 351, 405,
	385, 415, 118, 422, 120, 390, 0, 156, 129, 0,
	0, 378, 407, 380, 401, 373, 397, 343, 389, 417,
	365, 394, 418, 0, 0, 0, 81, 0, 826, 827,
	0, 0, 0, 0, 0, 96, 0, 392, 412, 363,
	393, 395, 332, 391, 0, 336, 339, 423, 410, 358,
	359, 999, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 768, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 199,
	375, 0, 0, 0, 342, 0, 357, 399, 0, 331,
	0, 402, 408, 372, 202, 411, 370, 369, 414, 143,
	0, 159, 109, 117, 84, 90, 0, 108, 135, 148,
	152, 406, 354, 362, 99, 360, 150, 139, 171, 387,
	140, 149, 121, 163, 144, 170, 203, 178, 161, 177,
	85, 160, 169, 97, 153, 87, 167, 158, 127, 113,
	114, 86, 0, 147, 102, 106, 101, 136, 164, 165,
	100, 186, 91, 176, 89, 92, 175, 134, 162, 168,
	128, 125, 88, 166, 126, 124, 116, 104, 110, 141,
	123, 142, 111, 131, 130, 132, 0, 335, 0, 157,
	173, 187, 94, 350, 409, 179, 180, 181, 182, 183,
	0, 0, 95, 107, 133, 93, 112, 154, 115, 122,
	146, 185, 138, 151, 98, 172, 155, 346, 349, 344,
	345, 383, 384, 419, 420, 421, 400, 341, 0, 347,
	348, 0, 404, 386, 83, 0, 119, 184, 145, 105,
	174, 413, 403, 0, 374, 416, 352, 366, 424, 367,
	368, 396, 338, 382, 137, 364, 0, 355, 333, 361,
	334, 353, 376, 103, 379, 351, 405, 385, 415, 118,
	422, 120, 390, 0, 156, 129, 0, 0, 378, 407,
	380, 401, 373, 397, 343, 389, 417, 365, 394, 418,
	0, 0, 0, 81, 0, 826, 827, 0, 0, 0,
	0, 0, 96, 0, 392, 412, 363, 393, 395, 332,
	391, 0, 336, 339, 423, 410, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 377, 381, 398, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 388,
	0, 0, 0, 340, 337, 0, 0, 375, 0, 0,
	0, 342, 0, 357, 399, 0, 331, 0, 402, 408,
	372, 202, 411, 370, 369, 414, 143, 0, 159, 109,
	117, 84, 90, 0, 108, 135, 148, 152, 406, 354,
	362, 99, 360, 150, 139, 171, 387, 140, 149, 121,
	163, 144, 170, 203, 178, 161, 177, 85, 160, 169,
	97, 153, 87, 167, 158, 127, 113, 114, 86, 0,
	147, 102, 106, 101, 136, 164, 165, 100, 186, 91,
	176, 89, 92, 175, 134, 162, 168, 128, 125, 88,
	166, 126, 124, 116, 104, 110, 141, 123, 142, 111,
	131, 130, 132, 0, 335, 0, 157, 173, 187, 94,
	350, 409, 179, 180, 181, 182, 183, 0, 0, 95,
	107, 133, 93, 112, 154, 115, 122, 146, 185, 138,
	151, 98, 172, 155, 346, 349, 344, 345, 383, 384,
	419, 420, 421, 400, 341, 0, 347, 348, 0, 404,
	386, 83, 0, 119, 184, 145, 105, 174, 413, 403,
	0, 374, 416, 352, 366, 424, 367, 368, 396, 338,
	382, 137, 364, 0, 355, 333, 361, 334, 353, 376,
	103, 379, 351, 405, 385, 415, 118, 422, 120, 390,
	0, 156, 129, 0, 0, 378, 407, 380, 401, 373,
	397, 343, 389, 417, 365, 394, 418, 54, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 392, 412, 363, 393, 395, 332, 391, 0, 336,
	339, 423, 410, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 388, 0, 0, 0,
	340, 337, 0, 0, 375, 0, 0, 0, 342, 0,
	357, 399, 0, 331, 0, 402, 408, 372, 202, 411,
	370, 369, 414, 143, 0, 159, 109, 117, 84, 90,
	0, 108, 135, 148, 152, 406, 354, 362, 99, 360,
	150, 139, 171, 387, 140, 149, 121, 163, 144, 170,
	203, 178, 161, 177, 85, 160, 169, 97, 153, 87,
	167, 158, 127, 113, 114, 86, 0, 147, 102, 106,
	101, 136, 164, 165, 100, 186, 91, 176, 89, 92,
	175, 134, 162, 168, 128, 125, 88, 166, 126, 124,
	116, 104, 110, 141, 123, 142, 111, 131, 130, 132,
	0, 335, 0, 157, 173, 187, 94, 350, 409, 179,
	180, 181, 182, 183, 0, 0, 95, 107, 133, 93,
	112, 154, 115, 122, 146, 185, 138, 151, 98, 172,
	155, 346, 349, 344, 345, 383, 384, 419, 420, 421,
	400, 341, 0, 347, 348, 0, 404, 386, 83, 0,
	119, 184, 145, 105, 174, 413, 403, 0, 374, 416,
	352, 366, 424, 367, 368, 396, 338, 382, 137, 364,
	0, 355, 333, 361, 334, 353, 376, 103, 379, 351,
	405, 385, 415, 118, 422, 120, 390, 0, 156, 129,
	0, 0, 378, 407, 380, 401, 373, 397, 343, 389,
	417, 365, 394, 418, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 392, 412,
	363, 393, 395, 332, 391, 0, 336, 339, 423, 410,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 377,
	381, 398, 371, 0, 0, 0, 0, 0, 0, 1065,
	0, 356, 0, 388, 0, 0, 0, 340, 337, 0,
	0, 375, 0, 0, 0, 342, 0, 357, 399, 0,
	331, 0, 402, 408, 372, 202, 411, 370, 369, 414,
	143, 0, 159, 109, 117, 84, 90, 0, 108, 135,
	148, 152, 406, 354, 362, 99, 360, 150, 139, 171,
	387, 140, 149, 121, 163, 144, 170, 203, 178, 161,
	177, 85, 160, 169, 97, 153, 87, 167, 158, 127,
	113, 114, 86, 0, 147, 102, 106, 101, 136, 164,
	165, 100, 186, 91, 176, 89, 92, 175, 134, 162,
	168, 128, 125, 88, 166, 126, 124, 116, 104, 110,
	141, 123, 142, 111, 131, 130, 132, 0, 335, 0,
	157, 173, 187, 94, 350, 409, 179, 180, 181, 182,
	183, 0, 0, 95, 107, 133, 93, 112, 154, 115,
	122, 146, 185, 138, 151, 98, 172, 155, 346, 349,
	344, 345, 383, 384, 419, 420, 421, 400, 341, 0,
	347, 348, 0, 404, 386, 83, 0, 119, 184, 145,
	105, 174, 413, 403, 0, 374, 416, 352, 366, 424,
	367, 368, 396, 338, 382, 137, 364, 0, 355, 333,
	361, 334, 353, 376, 103, 379, 351, 405, 385, 415,
	118, 422, 120, 390, 0, 156, 129, 0, 0, 378,
	407, 380, 401, 373, 397, 343, 389, 417, 365, 394,
	418, 0, 0, 0, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 392, 412, 363, 393, 395,
	332, 391, 0, 336, 339, 423, 410, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 377, 381, 398, 371,
	0, 0, 0, 0, 0, 0, 719, 0, 356, 0,
	388, 0, 0, 0, 340, 337, 0, 0, 375, 0,
	0, 0, 342, 0, 357, 399, 0, 331, 0, 402,
	408, 372, 202, 411, 370, 369, 414, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 406,
	354, 362, 99, 360, 150, 139, 171, 387, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 335, 0, 157, 173, 187,
	94, 350, 409, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 346, 349, 344, 345, 383,
	384, 419, 420, 421, 400, 341, 0, 347, 348, 0,
	404, 386, 83, 0, 119, 184, 145, 105, 174, 413,
	403, 0, 374, 416, 352, 366, 424, 367, 368, 396,
	338, 382, 137, 364, 0, 355, 333, 361, 334, 353,
	376, 103, 379, 351, 405, 385, 415, 118, 422, 120,
	390, 0, 156, 129, 0, 0, 378, 407, 380, 401,
	373, 397, 343, 389, 417, 365, 394, 418, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 392, 412, 363, 393, 395, 332, 391, 0,
	336, 339, 423, 410, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 398, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 356, 0, 388, 0, 0,
	0, 340, 337, 0, 0, 375, 0, 0, 0, 342,
	0, 357, 399, 0, 331, 0, 402, 408, 372, 202,
	411, 370, 369, 414, 143, 0, 159, 109, 117, 84,
	90, 0, 108, 135, 148, 152, 406, 354, 362, 99,
	360, 150, 139, 171, 387, 140, 149, 121, 163, 144,
	170, 203, 178, 161, 177, 85, 160, 169, 97, 153,
	87, 167, 158, 127, 113, 114, 86, 0, 147, 102,
	106, 101, 136, 164, 165, 100, 186, 91, 176, 89,
	92, 175, 134, 162, 168, 128, 125, 88, 166, 126,
	124, 116, 104, 110, 141, 123, 142, 111, 131, 130,
	132, 0, 335, 0, 157, 173, 187, 94, 350, 409,
	179, 180, 181, 182, 183, 0, 0, 95, 107, 133,
	93, 112, 154, 115, 122, 146, 185, 138, 151, 98,
	172, 155, 346, 349, 344, 345, 383, 384, 419, 420,
	421, 400, 341, 0, 347, 348, 0, 404, 386, 83,
	0, 119, 184, 145, 105, 174, 413, 403, 0, 374,
	416, 352, 366, 424, 367, 368, 396, 338, 382, 137,
	364, 0, 355, 333, 361, 334, 353, 376, 103, 379,
	351, 405, 385, 415, 118, 422, 120, 390, 0, 156,
	129, 0, 0, 378, 407, 380, 401, 373, 397, 343,
	389, 417, 365, 394, 418, 0, 0, 0, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 392,
	412, 363, 393, 395, 332, 391, 0, 336, 339, 423,
	410, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	377, 381, 398, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 356, 0, 388, 0, 0, 0, 340, 337,
	0, 0, 375, 0, 0, 0, 342, 0, 357, 399,
	0, 331, 0, 402, 408, 372, 202, 411, 370, 369,
	414, 143, 0, 159, 109, 117, 84, 90, 0, 108,
	135, 148, 152, 406, 354, 362, 99, 360, 150, 139,
	171, 387, 140, 149, 121, 163, 144, 170, 203, 178,
	161, 177, 85, 160, 169, 97, 153, 87, 167, 158,
	127, 113, 114, 86, 0, 147, 102, 106, 101, 136,
	164, 165, 100, 186, 91, 176, 89, 92, 175, 134,
	162, 168, 128, 125, 88, 166, 126, 124, 116, 104,
	110, 141, 123, 142, 111, 131, 130, 132, 0, 335,
	0, 157, 173, 187, 94, 350, 409, 179, 180, 181,
	182, 183, 0, 0, 95, 107, 133, 93, 112, 154,
	115, 122, 146, 185, 138, 151, 98, 172, 155, 346,
	349, 344, 345, 383, 384, 419, 420, 421, 400, 341,
	0, 347, 348, 0, 404, 386, 83, 0, 119, 184,
	145, 105, 174, 413, 403, 0, 374, 416, 352, 366,
	424, 367, 368, 396, 338, 382, 137, 364, 0, 355,
	333, 361, 334, 353, 376, 103, 379, 351, 405, 385,
	415, 118, 422, 120, 390, 0, 156, 129, 0, 0,
	378, 407, 380, 401, 373, 397, 343, 389, 417, 365,
	394, 418, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 392, 412, 363, 393,
	395, 332, 391, 0, 336, 339, 423, 410, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 377, 381, 398,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 388, 0, 0, 0, 340, 337, 0, 0, 375,
	0, 0, 0, 342, 0, 357, 399, 0, 331, 0,
	402, 408, 372, 202, 411, 370, 369, 414, 143, 0,
	159, 109, 117, 84, 90, 0, 108, 135, 148, 152,
	406, 354, 362, 99, 360, 150, 139, 171, 387, 140,
	149, 121, 163, 144, 170, 203, 178, 161, 177, 85,
	160, 169, 97, 153, 87, 167, 158, 127, 113, 114,
	86, 0, 147, 102, 106, 101, 136, 164, 165, 100,
	186, 91, 176, 89, 329, 175, 134, 162, 168, 128,
	125, 88, 166, 126, 124, 116, 104, 110, 141, 123,
	142, 111, 131, 130, 132, 0, 335, 0, 157, 173,
	187, 94, 350, 409, 179, 180, 181, 182, 183, 0,
	0, 95, 107, 330, 328, 112, 154, 115, 122, 146,
	185, 138, 151, 98, 172, 155, 346, 349, 344, 345,
	383, 384, 419, 420, 421, 400, 341, 0, 347, 348,
	0, 404, 386, 83, 0, 119, 184, 145, 105, 174,
	413, 403, 0, 374, 416, 352, 366, 424, 367, 368,
	396, 338, 382, 137, 364, 0, 355, 333, 361, 334,
	353, 376, 103, 379, 351, 405, 385, 415, 118, 422,
	120, 390, 0, 156, 129, 0, 0, 378, 407, 380,
	401, 373, 397, 343, 389, 417, 365, 394, 418, 0,
	0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 392, 412, 363, 393, 395, 332, 391,
	0, 336, 339, 423, 410, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 388, 0,
	0, 0, 340, 337, 0, 0, 375, 0, 0, 0,
	342, 0, 357, 399, 0, 331, 0, 402, 408, 372,
	202, 411, 370, 369, 414, 143, 0, 159, 109, 117,
	84, 90, 0, 108, 135, 148, 152, 406, 354, 362,
	99, 360, 150, 139, 171, 387, 140, 149, 121, 163,
	144, 170, 203, 178, 161, 177, 85, 160, 169, 97,
	153, 87, 167, 158, 127, 113, 114, 86, 0, 147,
	102, 106, 101, 136, 164, 165, 100, 186, 91, 176,
	89, 92, 175, 134, 162, 168, 128, 125, 88, 166,
	126, 124, 116, 104, 110, 141, 123, 142, 111, 131,
	130, 132, 0, 335, 0, 157, 173, 187, 94, 350,
	409, 179, 180, 181, 182, 183, 0, 0, 95, 107,
	133, 93, 112, 154, 115, 122, 146, 185, 138, 151,
	98, 172, 155, 346, 349, 344, 345, 383, 384, 419,
	420, 421, 400, 341, 0, 347, 348, 0, 404, 386,
	83, 0, 119, 184, 145, 105, 174, 413, 403, 0,
	374, 416, 352, 366, 424, 367, 368, 396, 338, 382,
	137, 364, 0, 355, 333, 361, 334, 353, 376, 103,
	379, 351, 405, 385, 415, 118, 422, 120, 390, 0,
	156, 129, 0, 0, 378, 407, 380, 401, 373, 397,
	343, 389, 417, 365, 394, 418, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	392, 412, 363, 393, 395, 332, 391, 0, 336, 339,
	423, 410, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 377, 381, 398, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 356, 0, 388, 0, 0, 0, 340,
	337, 0, 0, 375, 0, 0, 0, 342, 0, 357,
	399, 0, 331, 0, 402, 408, 372, 202, 411, 370,
	369, 414, 143, 0, 159, 109, 117, 84, 90, 0,
	108, 135, 148, 152, 406, 354, 362, 99, 360, 150,
	139, 171, 387, 140, 149, 121, 163, 144, 170, 203,
	178, 161, 177, 85, 160, 594, 97, 153, 87, 167,
	158, 127, 113, 114, 86, 0, 147, 102, 106, 101,
	136, 164, 165, 100, 186, 91, 176, 89, 329, 175,
	134, 162, 168, 128, 125, 88, 166, 126, 124, 116,
	104, 110, 141, 123, 142, 111, 131, 130, 132, 0,
	335, 0, 157, 173, 187, 94, 350, 409, 179, 180,
	181, 182, 183, 0, 0, 95, 107, 330, 328, 112,
	154, 115, 122, 146, 185, 138, 151, 98, 172, 155,
	346, 349, 344, 345, 383, 384, 419, 420, 421, 400,
	341, 0, 347, 348, 0, 404, 386, 83, 0, 119,
	184, 145, 105, 174, 413, 403, 0, 374, 416, 352,
	366, 424, 367, 368, 396, 338, 382, 137, 364, 0,
	355, 333, 361, 334, 353, 376, 103, 379, 351, 405,
	385, 415, 118, 422, 120, 390, 0, 156, 129, 0,
	0, 378, 407, 380, 401, 373, 397, 343, 389, 417,
	365, 394, 418, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 392, 412, 363,
	393, 395, 332, 391, 0, 336, 339, 423, 410, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 340, 337, 0, 0,
	375, 0, 0, 0, 342, 0, 357, 399, 0, 331,
	0, 402, 408, 372, 202, 411, 370, 369, 414, 143,
	0, 159, 109, 117, 84, 90, 0, 108, 135, 148,
	152, 406, 354, 362, 99, 360, 150, 139, 171, 387,
	140, 149, 121, 163, 144, 170, 203, 178, 161, 177,
	85, 160, 320, 97, 153, 87, 167, 158, 127, 113,
	114, 86, 0, 147, 102, 106, 101, 136, 164, 165,
	100, 186, 91, 176, 89, 329, 175, 134, 162, 168,
	128, 125, 88, 166, 126, 124, 116, 104, 110, 141,
	123, 142, 111, 131, 130, 132, 0, 335, 0, 157,
	173, 187, 94, 350, 409, 179, 180, 181, 182, 183,
	0, 0, 95, 107, 330, 328, 323, 322, 115, 122,
	146, 185, 138, 151, 98, 172, 155, 346, 349, 344,
	345, 383, 384, 419, 420, 421, 400, 341, 0, 347,
	348, 0, 404, 386, 83, 0, 119, 184, 145, 105,
	174, 137, 0, 0, 755, 0, 260, 0, 0, 0,
	103, 0, 257, 0, 0, 0, 118, 300, 120, 0,
	0, 156, 129, 0, 0, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	258, 279, 278, 281, 282, 283, 284, 0, 0, 96,
	280, 285, 286, 287, 0, 0, 0, 255, 272, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 270, 251, 0, 0, 0, 311, 0, 271, 0,
	0, 266, 267, 268, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 309, 0, 143, 0, 159, 109, 117, 84, 90,
	0, 108, 135, 148, 152, 0, 0, 0, 99, 0,
	150, 139, 171, 0, 140, 149, 121, 163, 144, 170,
	203, 178, 161, 177, 85, 160, 169, 97, 153, 87,
	167, 158, 127, 113, 114, 86, 0, 147, 102, 106,
	101, 136, 164, 165, 100, 186, 91, 176, 89, 92,
	175, 134, 162, 168, 128, 125, 88, 166, 126, 124,
	116, 104, 110, 141, 123, 142, 111, 131, 130, 132,
	0, 0, 0, 157, 173, 187, 94, 0, 0, 179,
	180, 181, 182, 183, 0, 0, 95, 107, 133, 93,
	112, 154, 115, 122, 146, 185, 138, 151, 98, 172,
	155, 301, 310, 307, 308, 305, 306, 304, 303, 302,
	312, 293, 294, 295, 296, 298, 0, 297, 83, 0,
	119, 184, 145, 105, 174, 137, 0, 0, 0, 0,
	260, 0, 0, 0, 103, 0, 257, 0, 0, 0,
	118, 300, 120, 0, 0, 156, 129, 0, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 479, 258, 279, 278, 281, 282, 283,
	284, 0, 0, 96, 280, 285, 286, 287, 0, 0,
	0, 255, 272, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	311, 0, 271, 0, 0, 266, 267, 268, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 309, 0, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 0,
	0, 0, 99, 0, 150, 139, 171, 0, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 0, 0, 157, 173, 187,
	94, 0, 0, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 301, 310, 307, 308, 305,
	306, 304, 303, 302, 312, 293, 294, 295, 296, 298,
	0, 297, 83, 0, 119, 184, 145, 105, 174, 137,
	0, 0, 0, 0, 260, 0, 0, 0, 103, 0,
	257, 0, 0, 0, 118, 300, 120, 0, 0, 156,
	129, 0, 0, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 258, 279,
	278, 281, 282, 283, 284, 0, 0, 96, 280, 285,
	286, 287, 0, 0, 0, 255, 272, 0, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 270,
	251, 0, 0, 0, 311, 0, 271, 0, 0, 266,
	267, 268, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 309,
	0, 143, 0, 159, 109, 117, 84, 90, 0, 108,
	135, 148, 152, 0, 0, 0, 99, 0, 150, 139,
	171, 0, 140, 149, 121, 163, 144, 170, 203, 178,
	161, 177, 85, 160, 169, 97, 153, 87, 167, 158,
	127, 113, 114, 86, 0, 147, 102, 106, 101, 136,
	164, 165, 100, 186, 91, 176, 89, 92, 175, 134,
	162, 168, 128, 125, 88, 166, 126, 124, 116, 104,
	110, 141, 123, 142, 111, 131, 130, 132, 0, 0,
	0, 157, 173, 187, 94, 0, 0, 179, 180, 181,
	182, 183, 0, 0, 95, 107, 133, 93, 112, 154,
	115, 122, 146, 185, 138, 151, 98, 172, 155, 301,
	310, 307, 308, 305, 306, 304, 303, 302, 312, 293,
	294, 295, 296, 298, 24, 297, 83, 0, 119, 184,
	145, 105, 174, 0, 0, 0, 137, 0, 0, 0,
	0, 260, 0, 0, 0, 103, 0, 257, 0, 0,
	0, 118, 300, 120, 0, 0, 156, 129, 0, 0,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 258, 279, 278, 281, 282,
	283, 284, 0, 0, 96, 280, 285, 286, 287, 0,
	0, 0, 255, 272, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 311, 0, 271, 0, 0, 266, 267, 268, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 309, 0, 143, 0,
	159, 109, 117, 84, 90, 0, 108, 135, 148, 152,
	0, 0, 0, 99, 0, 150, 139, 171, 0, 140,
	149, 121, 163, 144, 170, 203, 178, 161, 177, 85,
	160, 169, 97, 153, 87, 167, 158, 127, 113, 114,
	86, 0, 147, 102, 106, 101, 136, 164, 165, 100,
	186, 91, 176, 89, 92, 175, 134, 162, 168, 128,
	125, 88, 166, 126, 124, 116, 104, 110, 141, 123,
	142, 111, 131, 130, 132, 0, 0, 0, 157, 173,
	187, 94, 0, 0, 179, 180, 181, 182, 183, 0,
	0, 95, 107, 133, 93, 112, 154, 115, 122, 146,
	185, 138, 151, 98, 172, 155, 301, 310, 307, 308,
	305, 306, 304, 303, 302, 312, 293, 294, 295, 296,
	298, 0, 297, 83, 0, 119, 184, 145, 105, 174,
	137, 0, 0, 0, 0, 260, 0, 0, 0, 103,
	0, 257, 0, 0, 0, 118, 300, 120, 0, 0,
	156, 129, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 258,
	279, 278, 281, 282, 283, 284, 0, 0, 96, 280,
	285, 286, 287, 0, 0, 0, 255, 272, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	270, 0, 0, 0, 0, 311, 0, 271, 0, 0,
	266, 267, 268, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	309, 0, 143, 0, 159, 109, 117, 84, 90, 0,
	108, 135, 148, 152, 0, 0, 0, 99, 0, 150,
	139, 171, 0, 140, 149, 121, 163, 144, 170, 203,
	178, 161, 177, 85, 160, 169, 97, 153, 87, 167,
	158, 127, 113, 114, 86, 0, 147, 102, 106, 101,
	136, 164, 165, 100, 186, 91, 176, 89, 92, 175,
	134, 162, 168, 128, 125, 88, 166, 126, 124, 116,
	104, 110, 141, 123, 142, 111, 131, 130, 132, 0,
	0, 0, 157, 173, 187, 94, 0, 0, 179, 180,
	181, 182, 183, 0, 0, 95, 107, 133, 93, 112,
	154, 115, 122, 146, 185, 138, 151, 98, 172, 155,
	301, 310, 307, 308, 305, 306, 304, 303, 302, 312,
	293, 294, 295, 296, 298, 137, 297, 83, 0, 119,
	184, 145, 105, 174, 103, 0, 0, 0, 0, 0,
	118, 300, 120, 0, 0, 156, 129, 0, 0, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 258, 279, 278, 281, 282, 283,
	284, 0, 0, 96, 280, 285, 286, 287, 0, 0,
	0, 0, 272, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	311, 0, 271, 0, 0, 266, 267, 268, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 309, 0, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 0,
	0, 0, 99, 0, 150, 139, 171, 1356, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 0, 0, 157, 173, 187,
	94, 0, 0, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 301, 310, 307, 308, 305,
	306, 304, 303, 302, 312, 293, 294, 295, 296, 298,
	137, 297, 83, 0, 119, 184, 145, 105, 174, 103,
	0, 0, 0, 0, 0, 118, 300, 120, 0, 0,
	156, 129, 0, 0, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 258,
	279, 278, 281, 282, 283, 284, 0, 0, 96, 280,
	285, 286, 287, 0, 0, 0, 0, 272, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	270, 0, 0, 0, 0, 311, 0, 271, 0, 0,
	266, 267, 268, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	309, 0, 143, 0, 159, 109, 117, 84, 90, 0,
	108, 135, 148, 152, 0, 0, 0, 99, 0, 150,
	139, 171, 0, 140, 149, 121, 163, 144, 170, 203,
	178, 161, 177, 85, 160, 169, 97, 153, 87, 167,
	158, 127, 113, 114, 86, 0, 147, 102, 106, 101,
	136, 164, 165, 100, 186, 91, 176, 89, 92, 175,
	134, 162, 168, 128, 125, 88, 166, 126, 124, 116,
	104, 110, 141, 123, 142, 111, 131, 130, 132, 0,
	0, 0, 157, 173, 187, 94, 0, 0, 179, 180,
	181, 182, 183, 0, 0, 95, 107, 133, 93, 112,
	154, 115, 122, 146, 185, 138, 151, 98, 172, 155,
	301, 310, 307, 308, 305, 306, 304, 303, 302, 312,
	293, 294, 295, 296, 298, 137, 297, 83, 0, 119,
	184, 145, 105, 174, 103, 0, 0, 0, 0, 0,
	118, 0, 120, 0, 0, 156, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 0, 0, 524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 0,
	0, 0, 99, 0, 150, 139, 171, 0, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 0, 0, 157, 173, 187,
	94, 0, 0, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 501, 0,
	0, 0, 83, 103, 119, 184, 145, 105, 174, 118,
	0, 120, 0, 0, 156, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 503, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 498, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 143, 0, 159, 109,
	117, 84, 90, 0, 108, 135, 148, 152, 0, 0,
	0, 99, 0, 150, 139, 171, 0, 140, 149, 121,
	163, 144, 170, 203, 178, 161, 177, 85, 160, 169,
	97, 153, 87, 167, 158, 127, 113, 114, 86, 0,
	147, 102, 106, 101, 136, 164, 165, 100, 186, 91,
	176, 89, 92, 175, 134, 162, 168, 128, 125, 88,
	166, 126, 124, 116, 104, 110, 141, 123, 142, 111,
	131, 130, 132, 0, 0, 0, 157, 173, 187, 94,
	0, 0, 179, 180, 181, 182, 183, 0, 0, 95,
	107, 133, 93, 112, 154, 115, 122, 146, 185, 138,
	151, 98, 172, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 83, 103, 119, 184, 145, 105, 174, 118, 0,
	120, 0, 0, 156, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	73, 0, 0, 0, 79, 143, 0, 159, 109, 117,
	84, 90, 0, 108, 135, 148, 152, 0, 0, 0,
	99, 0, 150, 139, 171, 0, 140, 149, 121, 163,
	144, 170, 75, 178, 161, 177, 85, 160, 169, 97,
	153, 87, 167, 158, 127, 113, 114, 86, 0, 147,
	102, 106, 101, 136, 164, 165, 100, 186, 91, 176,
	89, 92, 175, 134, 162, 168, 128, 125, 88, 166,
	126, 124, 116, 104, 110, 141, 123, 142, 111, 131,
	130, 132, 0, 0, 0, 157, 173, 187, 94, 0,
	0, 179, 180, 181, 182, 183, 0, 0, 95, 107,
	133, 93, 112, 154, 115, 122, 146, 185, 138, 151,
	98, 172, 155, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 804, 0, 0, 0,
	83, 103, 119, 184, 145, 105, 174, 118, 0, 120,
	0, 0, 156, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 806, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 143, 0, 159, 109, 117, 84,
	90, 0, 108, 135, 148, 152, 0, 0, 0, 99,
	0, 150, 139, 171, 0, 140, 149, 121, 163, 144,
	170, 203, 178, 161, 177, 85, 160, 169, 97, 153,
	87, 167, 158, 127, 113, 114, 86, 0, 147, 102,
	106, 101, 136, 164, 165, 100, 186, 91, 176, 89,
	92, 175, 134, 162, 168, 128, 125, 88, 166, 126,
	124, 116, 104, 110, 141, 123, 142, 111, 131, 130,
	132, 0, 0, 0, 157, 173, 187, 94, 0, 0,
	179, 180, 181, 182, 183, 0, 0, 95, 107, 133,
	93, 112, 154, 115, 122, 146, 185, 138, 151, 98,
	172, 155, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 83,
	0, 119, 184, 145, 105, 174, 103, 0, 0, 0,
	0, 0, 118, 0, 120, 0, 0, 156, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 143,
	0, 159, 109, 117, 84, 90, 0, 108, 135, 148,
	152, 0, 0, 0, 99, 0, 150, 139, 171, 0,
	140, 149, 121, 163, 144, 170, 203, 178, 161, 177,
	85, 160, 169, 97, 153, 87, 167, 158, 127, 113,
	114, 86, 0, 147, 102, 106, 101, 136, 164, 165,
	100, 186, 91, 176, 89, 92, 175, 134, 162, 168,
	128, 125, 88, 166, 126, 124, 116, 104, 110, 141,
	123, 142, 111, 131, 130, 132, 0, 0, 0, 157,
	173, 187, 94, 0, 0, 179, 180, 181, 182, 183,
	0, 0, 95, 107, 133, 93, 112, 154, 115, 122,
	146, 185, 138, 151, 98, 172, 155, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 83, 0, 119, 184, 145, 105,
	174, 103, 0, 0, 0, 0, 0, 118, 0, 120,
	0, 0, 156, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 143, 0, 159, 109, 117, 84,
	90, 0, 108, 135, 148, 152, 0, 0, 0, 99,
	0, 150, 139, 171, 0, 140, 149, 121, 163, 144,
	170, 203, 178, 161, 177, 85, 160, 169, 97, 153,
	87, 167, 158, 127, 113, 114, 86, 0, 147, 102,
	106, 101, 136, 164, 165, 100, 186, 91, 176, 89,
	92, 175, 134, 162, 168, 128, 125, 88, 166, 126,
	124, 116, 104, 110, 141, 123, 142, 111, 131, 130,
	132, 0, 0, 0, 157, 173, 187, 94, 0, 0,
	179, 180, 181, 182, 183, 0, 0, 95, 107, 133,
	93, 112, 154, 115, 122, 146, 185, 138, 151, 98,
	172, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 804, 0, 0, 0, 83,
	103, 119, 184, 145, 105, 174, 118, 0, 120, 0,
	0, 156, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 806, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 143, 0, 159, 109, 117, 84, 90,
	0, 108, 135, 148, 152, 0, 0, 0, 99, 0,
	150, 139, 171, 0, 802, 149, 121, 163, 144, 170,
	203, 178, 161, 177, 85, 160, 169, 97, 153, 87,
	167, 158, 127, 113, 114, 86, 0, 147, 102, 106,
	101, 136, 164, 165, 100, 186, 91, 176, 89, 92,
	175, 134, 162, 168, 128, 125, 88, 166, 126, 124,
	116, 104, 110, 141, 123, 142, 111, 131, 130, 132,
	0, 0, 0, 157, 173, 187, 94, 0, 0, 179,
	180, 181, 182, 183, 0, 0, 95, 107, 133, 93,
	112, 154, 115, 122, 146, 185, 138, 151, 98, 172,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 83, 103,
	119, 184, 145, 105, 174, 118, 0, 120, 0, 0,
	156, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 706, 0, 0, 707, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 143, 0, 159, 109, 117, 84, 90, 0,
	108, 135, 148, 152, 0, 0, 0, 99, 0, 150,
	139, 171, 0, 140, 149, 121, 163, 144, 170, 203,
	178, 161, 177, 85, 160, 169, 97, 153, 87, 167,
	158, 127, 113, 114, 86, 0, 147, 102, 106, 101,
	136, 164, 165, 100, 186, 91, 176, 89, 92, 175,
	134, 162, 168, 128, 125, 88, 166, 126, 124, 116,
	104, 110, 141, 123, 142, 111, 131, 130, 132, 0,
	0, 0, 157, 173, 187, 94, 0, 0, 179, 180,
	181, 182, 183, 0, 0, 95, 107, 133, 93, 112,
	154, 115, 122, 146, 185, 138, 151, 98, 172, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 83, 0, 119,
	184, 145, 105, 174, 103, 0, 603, 0, 0, 0,
	118, 0, 120, 0, 0, 156, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 602, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 0,
	0, 0, 99, 0, 150, 139, 171, 0, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 0, 0, 157, 173, 187,
	94, 0, 0, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 83, 103, 119, 184, 145, 105, 174, 118,
	0, 120, 0, 0, 156, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 143, 0, 159, 109,
	117, 84, 90, 0, 108, 135, 148, 152, 0, 0,
	0, 99, 0, 150, 139, 171, 0, 140, 149, 121,
	163, 144, 170, 203, 178, 161, 177, 85, 160, 169,
	97, 153, 87, 167, 158, 127, 113, 114, 86, 0,
	147, 102, 106, 101, 136, 164, 165, 100, 186, 91,
	176, 89, 92, 175, 134, 162, 168, 128, 125, 88,
	166, 126, 124, 116, 104, 110, 141, 123, 142, 111,
	131, 130, 132, 0, 0, 0, 157, 173, 187, 94,
	0, 0, 179, 180, 181, 182, 183, 0, 0, 95,
	107, 133, 93, 112, 154, 115, 122, 146, 185, 138,
	151, 98, 172, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 83, 103, 119, 184, 145, 105, 174, 118, 0,
	120, 0, 0, 156, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 806, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 143, 0, 159, 109, 117,
	84, 90, 0, 108, 135, 148, 152, 0, 0, 0,
	99, 0, 150, 139, 171, 0, 140, 149, 121, 163,
	144, 170, 203, 178, 161, 177, 85, 160, 169, 97,
	153, 87, 167, 158, 127, 113, 114, 86, 0, 147,
	102, 106, 101, 136, 164, 165, 100, 186, 91, 176,
	89, 92, 175, 134, 162, 168, 128, 125, 88, 166,
	126, 124, 116, 104, 110, 141, 123, 142, 111, 131,
	130, 132, 0, 0, 0, 157, 173, 187, 94, 0,
	0, 179, 180, 181, 182, 183, 0, 0, 95, 107,
	133, 93, 112, 154, 115, 122, 146, 185, 138, 151,
	98, 172, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	83, 103, 119, 184, 145, 105, 174, 118, 0, 120,
	0, 0, 156, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 503, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 143, 0, 159, 109, 117, 84,
	90, 0, 108, 135, 148, 152, 0, 0, 0, 99,
	0, 150, 139, 171, 0, 140, 149, 121, 163, 144,
	170, 203, 178, 161, 177, 85, 160, 169, 97, 153,
	87, 167, 158, 127, 113, 114, 86, 0, 147, 102,
	106, 101, 136, 164, 165, 100, 186, 91, 176, 89,
	92, 175, 134, 162, 168, 128, 125, 88, 166, 126,
	124, 116, 104, 110, 141, 123, 142, 111, 131, 130,
	132, 0, 0, 0, 157, 173, 187, 94, 0, 0,
	179, 180, 181, 182, 183, 0, 0, 95, 107, 133,
	93, 112, 154, 115, 122, 146, 185, 138, 151, 98,
	172, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 83,
	0, 119, 184, 145, 105, 174, 576, 103, 0, 0,
	0, 0, 0, 118, 0, 120, 0, 0, 156, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	143, 0, 159, 109, 117, 84, 90, 0, 108, 135,
	148, 152, 0, 0, 0, 99, 0, 150, 139, 171,
	0, 140, 149, 121, 163, 144, 170, 203, 178, 161,
	177, 85, 160, 169, 97, 153, 87, 167, 158, 127,
	113, 114, 86, 0, 147, 102, 106, 101, 136, 164,
	165, 100, 186, 91, 176, 89, 92, 175, 134, 162,
	168, 128, 125, 88, 166, 126, 124, 116, 104, 110,
	141, 123, 142, 111, 131, 130, 132, 0, 0, 0,
	157, 173, 187, 94, 0, 0, 179, 180, 181, 182,
	183, 0, 0, 95, 107, 133, 93, 112, 154, 115,
	122, 146, 185, 138, 151, 98, 172, 155, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 83, 103, 119, 184, 145,
	105, 174, 118, 0, 120, 0, 0, 156, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 143,
	0, 159, 109, 117, 84, 90, 0, 108, 135, 148,
	152, 0, 0, 0, 99, 0, 150, 139, 171, 0,
	140, 149, 121, 163, 144, 170, 203, 178, 161, 177,
	85, 160, 169, 97, 153, 87, 167, 158, 127, 113,
	114, 86, 0, 147, 102, 106, 101, 136, 164, 165,
	100, 186, 91, 176, 89, 92, 175, 134, 162, 168,
	128, 125, 88, 166, 126, 124, 116, 104, 110, 141,
	123, 142, 111, 131, 130, 132, 0, 0, 0, 157,
	173, 187, 94, 0, 0, 179, 180, 181, 182, 183,
	0, 0, 95, 107, 133, 93, 112, 154, 115, 122,
	146, 185, 138, 151, 98, 172, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 83, 103, 119, 184, 145, 105,
	174, 118, 0, 120, 0, 0, 156, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 0, 202, 0, 0, 0, 0, 143, 0,
	159, 109, 117, 84, 90, 0, 108, 135, 148, 152,
	0, 0, 0, 99, 0, 150, 139, 171, 0, 140,
	149, 121, 163, 144, 170, 203, 178, 161, 177, 85,
	160, 169, 97, 153, 87, 167, 158, 127, 113, 114,
	86, 0, 147, 102, 106, 101, 136, 164, 165, 100,
	186, 91, 176, 89, 92, 175, 134, 162, 168, 128,
	125, 88, 166, 126, 124, 116, 104, 110, 141, 123,
	142, 111, 131, 130, 132, 0, 0, 0, 157, 173,
	187, 94, 0, 0, 179, 180, 181, 182, 183, 0,
	0, 95, 107, 133, 93, 112, 154, 115, 122, 146,
	185, 138, 151, 98, 172, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 83, 103, 119, 184, 145, 105, 174,
	118, 0, 120, 0, 0, 156, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 143, 0, 159,
	109, 117, 84, 90, 0, 108, 135, 148, 152, 0,
	0, 0, 99, 0, 150, 139, 171, 0, 140, 149,
	121, 163, 144, 170, 203, 178, 161, 177, 85, 160,
	169, 97, 153, 87, 167, 158, 127, 113, 114, 86,
	0, 147, 102, 106, 101, 136, 164, 165, 100, 186,
	91, 176, 89, 92, 175, 134, 162, 168, 128, 125,
	88, 166, 126, 124, 116, 104, 110, 141, 123, 142,
	111, 131, 130, 132, 0, 0, 0, 157, 173, 187,
	94, 0, 0, 179, 180, 181, 182, 183, 0, 0,
	95, 107, 133, 93, 112, 154, 115, 122, 146, 185,
	138, 151, 98, 172, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 83, 103, 119, 184, 145, 105, 174, 118,
	0, 120, 0, 0, 156, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 143, 0, 159, 109,
	117, 84, 90, 0, 108, 135, 148, 152, 0, 0,
	0, 99, 0, 150, 139, 171, 0, 140, 149, 121,
	163, 144, 170, 203, 178, 161, 177, 85, 160, 169,
	97, 153, 87, 167, 158, 127, 113, 114, 86, 0,
	147, 102, 106, 101, 136, 164, 165, 100, 186, 91,
	176, 89, 92, 175, 134, 162, 168, 128, 125, 88,
	166, 126, 124, 116, 104, 110, 141, 123, 142, 111,
	131, 130, 132, 0, 0, 0, 157, 173, 187, 94,
	0, 0, 179, 180, 181, 182, 183, 0, 0, 95,
	107, 133, 93, 112, 154, 115, 122, 146, 185, 138,
	151, 98, 172, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 83, 103, 119, 184, 145, 105, 174, 118, 0,
	120, 0, 0, 156, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 143, 0, 159, 109, 117,
	84, 90, 0, 108, 135, 148, 152, 0, 0, 0,
	99, 0, 150, 139, 171, 0, 140, 149, 121, 163,
	144, 170, 203, 178, 161, 177, 85, 160, 169, 97,
	153, 87, 167, 158, 127, 113, 114, 86, 0, 147,
	102, 106, 101, 136, 164, 165, 100, 186, 91, 176,
	89, 92, 175, 134, 162, 168, 128, 125, 88, 166,
	126, 124, 116, 104, 110, 141, 123, 142, 111, 131,
	130, 132, 0, 0, 0, 157, 173, 187, 94, 0,
	0, 179, 180, 181, 182, 183, 0, 0, 95, 107,
	133, 93, 112, 154, 115, 122, 146, 185, 138, 151,
	98, 172, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 119, 184, 145, 105, 174,
}
var yyPact = [...]int{

	1778, -1000, -185, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 810, 875, -1000, -1000, -1000, -1000, -1000, -1000,
	206, 7395, 49, 72, 8, 10168, 68, 1492, 10626, -1000,
	-19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -97, -99,
	-1000, 611, -1000, -1000, -1000, -1000, -1000, 802, 813, 623,
	796, 694, -1000, 5741, 44, 44, 9939, 5009, -1000, -1000,
	192, 10626, 64, 10626, -157, 10397, 41, 41, 41, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 66, 10626,
	-1000, 10626, 37, 513, 37, 37, 37, 10626, -1000, 96,
	-1000, -1000, -1000, -1000, 10626, 471, 767, 38, 2953, 2953,
	2953, 2953, -10, 2953, -87, 657, 821, -1000, -1000, -1000,
	-1000, -1000, 2953, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 287, 765, 6232, 6232,
	810, -1000, 611, -1000, -1000, -1000, 757, -1000, -1000, 229,
	835, -1000, 7166, 94, -1000, 6232, 1761, 594, -1000, -1000,
	594, -1000, -1000, 83, -1000, -1000, 6702, 6702, 6702, 6702,
	6702, 6702, 6702, 6702, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 594, -1000,
	5988, 594, 594, 594, 594, 594, 594, 594, 594, 6232,
	594, 594, 594, 594, 594, 594, 594, 594, 594, 594,
	594, 594, 594, 9710, 9016, 10626, 545, -1000, 589, 4752,
	-125, -1000, -1000, -1000, 166, 8787, -1000, -1000, -1000, 761,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 502, 10626, -1000, 1790, -1000,
	448, 2953, 50, 603, 446, 224, 443, 10626, 10626, 2953,
	54, 10626, 790, 656, 10626, 429, 419, -1000, 4495, -1000,
	2953, 2953, 2953, 2953, 2953, 2953, 2953, 2953, -1000, -1000,
	-1000, -1000, -1000, -1000, 2953, 2953, -1000, 831, 226, -1000,
	-1000, -1000, -1000, 10626, 6232, -1000, -1000, -1000, -1000, -1000,
	-1000, 869, 146, 415, 92, 592, -1000, 436, 802, 287,
	694, 8552, 668, -1000, -1000, 10626, -1000, 6232, 6232, 259,
	-1000, 9474, -1000, -1000, 3467, 151, 6702, 325, 215, 6702,
	6702, 6702, 6702, 6702, 6702, 6702, 6702, 6702, 6702, 6702,
	6702, 6702, 6702, 6702, 358, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 407, -1000, 611, 501, 501, 114, 114,
	114, 114, 114, 114, 114, 6937, 5253, 287, 496, 251,
	5988, 5741, 5741, 6232, 6232, 10855, 10855, 5741, 797, 211,
	251, 10855, -1000, 287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5741, 5741, 5741, 5741, 5, 10626, -1000, 566, 700,
	-1000, -1000, -1000, 793, 8094, 8323, 5, 561, 9016, 10626,
	-1000, -1000, 4238, 589, -125, 579, -1000, -118, -134, 2182,
	108, -1000, -1000, -1000, -1000, 2696, 353, 538, 268, -91,
	-1000, -1000, -1000, 612, -1000, 612, 612, 612, 612, -47,
	-47, -47, -47, -1000, -1000, -1000, -1000, -1000, 626, 625,
	-1000, 612, 612, 612, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	624, 624, 624, 615, 615, 628, -1000, 10626, -175, 405,
	2953, 787, 2953, -1000, 100, -1000, 10626, -1000, -1000, 10626,
	2953, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10626, 231, 10626, 10626,
	-1000, 251, -1000, 739, 6232, 6232, 3981, 6232, -1000, -1000,
	-1000, 765, -1000, 797, 809, -1000, 748, 747, 5741, -1000,
	-1000, 151, 220, -1000, -1000, 318, -1000, -1000, -1000, -1000,
	91, 594, -1000, 1908, -1000, -1000, -1000, -1000, 325, 6702,
	6702, 6702, 1528, 1908, 1979, 1992, 305, 114, 155, 155,
	115, 115, 115, 115, 115, 667, 667, -1000, -1000, -1000,
	287, -1000, -1000, -1000, 287, 5741, 584, -1000, -1000, 6232,
	-1000, 287, 486, 486, 258, 228, 602, -1000, 90, 580,
	486, 5741, 210, -1000, 6232, 287, -1000, 486, 287, 486,
	486, 548, 594, -1000, 10855, 9016, 9016, 9016, 9016, 9016,
	-1000, 689, 688, -1000, 686, 678, 717, 10626, -1000, 493,
	8094, 117, 594, -1000, 9245, -1000, -1000, 820, 9016, 575,
	-1000, -1000, 579, -125, -123, -1000, -1000, -1000, -1000, 251,
	-1000, 365, 578, 2439, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 622, 402, -1000, 776, 154, 150, 393, 775, -1000,
	-1000, -1000, 766, -1000, 234, -93, -1000, -1000, 323, -47,
	-47, -1000, -1000, 108, 755, 108, 108, 108, 382, 382,
	-1000, -1000, -1000, -1000, 320, -1000, -1000, -1000, 289, -1000,
	642, 10397, 2953, -1000, 3724, -1000, -1000, -1000, -1000, -1000,
	-1000, 1386, 1315, 159, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4, -1000, 2953, -1000, 226,
	-1000, 376, 6232, -1000, -1000, 737, 251, 251, 89, -1000,
	-1000, 10626, -1000, -1000, -1000, -1000, 572, -1000, -1000, -1000,
	3210, 5741, -1000, 1528, 1908, 1675, -1000, 6702, 6702, -1000,
	-1000, 486, 5741, 251, -1000, -1000, -1000, 237, 358, 237,
	6702, 6702, 3981, 6702, 6702, -169, 577, 187, -1000, 6232,
	357, -1000, -1000, -1000, -1000, -1000, 640, 10855, 594, -1000,
	7859, 10397, 576, -1000, 164, 700, 621, 639, 654, -1000,
	-1000, -1000, -1000, 687, -1000, 679, -1000, -1000, -1000, -1000,
	-1000, 62, 60, 59, 10397, -1000, 810, 6232, 575, -1000,
	-1000, -1000, -124, -142, -1000, -1000, -1000, 2696, -1000, 2696,
	10397, 21, -1000, 393, 393, -1000, -1000, -1000, 618, 634,
	42, -1000, -1000, -1000, 519, 108, 108, -1000, 156, -1000,
	-1000, -1000, 484, -1000, 482, 569, 480, 10626, -1000, -1000,
	565, -1000, 163, -1000, -1000, 10397, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10397, 10626,
	-1000, -1000, -1000, -1000, -1000, 10397, -1000, 231, -1000, 251,
	-1000, 3724, -1000, 820, 9016, -1000, -1000, 287, -1000, 6702,
	1908, 1908, -1000, -1000, 287, 612, 612, -1000, 612, 615,
	-1000, 612, -28, 612, -31, 287, 287, 1964, 1559, -1000,
	1635, 1301, 594, -166, -1000, 251, 6232, -1000, 779, 529,
	560, -1000, -1000, 5497, 287, 478, 88, 475, -1000, 810,
	10855, 6232, -1000, -1000, 6232, 614, -1000, 6232, -1000, -1000,
	-1000, 594, 594, 594, 475, 802, 251, -1000, -1000, -1000,
	-1000, 2439, -1000, 468, -1000, 612, -1000, -1000, -1000, 10397,
	-74, 867, -1000, -1000, -1000, -1000, 610, -1000, -1000, -1000,
	-1000, -1000, -1000, -47, 369, -47, 286, -1000, 284, 2953,
	3724, 2696, -1000, 608, -1000, -1000, -1000, -1000, 782, -1000,
	818, 564, -1000, 1908, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6702, 6702, -1000, 6702,
	6702, 6702, 287, 367, 251, 774, -1000, 594, -1000, -1000,
	574, 10397, 10397, -1000, 10397, 802, -1000, 251, 251, 10397,
	251, 10397, 10397, 10397, 7624, -1000, 107, 10397, -1000, 466,
	-1000, 136, -1000, -146, 518, 108, -1000, 108, 517, 497,
	-1000, -1000, -1000, 10397, 594, 816, 806, -1000, -1000, 1283,
	1283, 1283, 1283, 132, -1000, -1000, 851, -1000, 594, -1000,
	611, 87, -1000, -1000, -1000, 455, 442, 442, 442, 117,
	107, -1000, 386, 160, 364, -1000, 18, 10397, 266, 772,
	-1000, 771, 605, -1000, -1000, -1000, -1000, -1000, 439, 3,
	-1000, 6232, 6232, -1000, -1000, -1000, -1000, 287, 36, -178,
	10855, 560, 287, 10397, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 265, -1000, -1000, 10626, -1000, -1000, 352, -1000, -1000,
	413, 603, 425, -1000, 10397, 251, 550, -1000, 708, -173,
	-181, 544, -1000, -1000, -1000, 601, -1000, -1000, -175, -1000,
	3, 746, -1000, 697, -1000, 10397, -1000, -1000, 0, -176,
	412, -2, -179, 633, 594, -182, 631, -1000, 858, 6467,
	-1000, -1000, 849, 140, 140, 1283, 287, -1000, -1000, -1000,
	27, 283, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1108, 44, 384, 1106, 1105, 1104, 1103, 1101, 1099,
	1098, 1097, 1096, 1095, 1076, 1075, 1072, 1071, 1070, 1069,
	1068, 1067, 1066, 1061, 1059, 97, 1058, 1057, 1055, 59,
	1052, 64, 1051, 1048, 29, 51, 34, 27, 773, 1047,
	60, 88, 69, 1040, 25, 1033, 1030, 75, 1023, 55,
	1019, 1016, 105, 1011, 1010, 7, 43, 1008, 1007, 1004,
	1002, 73, 567, 999, 997, 996, 995, 991, 990, 50,
	4, 11, 21, 19, 989, 688, 9, 986, 48, 984,
	982, 979, 978, 28, 976, 54, 974, 17, 56, 973,
	12, 66, 24, 22, 10, 65, 57, 972, 18, 58,
	47, 971, 970, 413, 965, 964, 38, 963, 958, 35,
	142, 299, 957, 955, 954, 952, 40, 0, 431, 117,
	70, 951, 950, 948, 1244, 71, 49, 14, 947, 100,
	261, 30, 946, 945, 26, 944, 943, 942, 940, 939,
	937, 935, 122, 931, 930, 929, 15, 37, 928, 927,
	52, 20, 926, 920, 919, 46, 53, 918, 917, 63,
	41, 916, 915, 914, 913, 911, 23, 31, 910, 13,
	909, 8, 908, 33, 907, 2, 905, 16, 904, 3,
	903, 5, 42, 1, 902, 6, 901, 892, 61, 263,
	890, 881, 89,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 28, 28, 8, 9, 9,
	9, 190, 190, 47, 47, 91, 91, 10, 10, 10,
	10, 96, 96, 100, 100, 100, 101, 101, 101, 101,
	132, 132, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 180, 179, 179, 178, 178, 177, 17, 162,
	164, 164, 163, 163, 163, 163, 156, 135, 135, 135,
	135, 138, 138, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 141, 141, 141, 141, 141,
	141, 141, 141, 155, 155, 142, 142, 150, 150, 151,
	151, 151, 148, 148, 149, 149, 152, 152, 152, 143,
	143, 143, 143, 143, 143, 143, 143, 145, 145, 145,
	153, 153, 146, 146, 146, 147, 147, 147, 154, 154,
	154, 154, 154, 144, 144, 157, 157, 172, 172, 171,
	171, 171, 161, 161, 168, 168, 168, 168, 168, 159,
	159, 160, 160, 170, 170, 169, 158, 158, 173, 173,
	173, 173, 184, 185, 183, 183, 183, 183, 183, 165,
	165, 165, 166, 166, 166, 167, 167, 167, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 176, 174,
	174, 175, 175, 13, 14, 14, 14, 14, 14, 15,
	15, 18, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 107,
	107, 105, 105, 108, 108, 106, 106, 106, 109, 109,
	109, 133, 133, 133, 20, 20, 22, 22, 23, 24,
	21, 21, 21, 21, 21, 21, 21, 16, 191, 25,
	26, 26, 27, 27, 27, 31, 31, 31, 29, 29,
	30, 30, 36, 36, 35, 35, 37, 37, 37, 37,
	121, 121, 121, 120, 120, 39, 39, 40, 40, 41,
	41, 42, 42, 42, 42, 54, 54, 90, 90, 92,
	92, 43, 43, 43, 43, 44, 44, 45, 45, 46,
	46, 128, 128, 127, 127, 127, 126, 126, 48, 48,
	48, 50, 49, 49, 49, 49, 51, 51, 53, 53,
	52, 52, 55, 55, 55, 55, 56, 56, 38, 38,
	38, 38, 38, 38, 38, 104, 104, 58, 58, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 68,
	68, 68, 68, 68, 68, 59, 59, 59, 59, 59,
	59, 59, 34, 34, 69, 69, 69, 75, 70, 70,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 66, 66, 66, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 192, 192,
	67, 67, 67, 67, 32, 32, 32, 32, 32, 131,
	131, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 79, 79, 33, 33, 77, 77,
	78, 80, 80, 76, 76, 76, 61, 61, 61, 61,
	61, 61, 61, 61, 63, 63, 63, 81, 81, 82,
	82, 83, 83, 84, 84, 85, 86, 86, 86, 87,
	87, 87, 87, 88, 88, 88, 60, 60, 60, 60,
	60, 60, 89, 89, 89, 89, 93, 93, 71, 71,
	73, 73, 72, 74, 94, 94, 98, 95, 95, 99,
	99, 99, 99, 97, 97, 97, 123, 123, 123, 102,
	102, 110, 110, 111, 111, 103, 103, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
	114, 114, 115, 115, 115, 122, 122, 118, 118, 119,
	119, 124, 124, 125, 125, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 188, 189, 129, 130,
	130, 130,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 4, 2, 0, 3, 5,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 7, 5, 4, 2,
	2, 4, 4, 2, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -18, -19, -20, -22, -23, -24,
	-21, -16, -3, -4, 6, 7, -28, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 161,
	162, 164, 165, 25, 143, 144, 147, 148, 31, 32,
	121, -188, 8, 247, 54, -187, 262, -83, 15, -27,
	5, -25, -191, -25, -25, -25, -25, -25, -162, -164,
	54, 90, -115, 125, 72, 157, 239, 122, 123, 129,
	-118, 57, -117, 255, 135, 161, 172, 166, 193, 185,
	136, 183, 186, 226, 213, 223, 66, 164, 235, 145,
	181, 177, 175, 27, 198, 260, 176, 224, 138, 133,
	199, 203, 227, 170, 171, 229, 197, 134, 33, 257,
	35, 153, 230, 201, 196, 192, 195, 169, 191, 39,
	205, 204, 206, 225, 188, 139, 178, 18, 233, 148,
	151, 200, 202, 130, 155, 259, 231, 174, 140, 152,
	147, 234, 141, 165, 228, 237, 38, 210, 168, 132,
	162, 159, 189, 154, 179, 180, 194, 167, 190, 163,
	156, 149, 236, 211, 261, 187, 184, 160, 158, 216,
	217, 218, 219, 220, 258, 232, 182, 212, -103, 125,
	127, 123, 123, 124, 125, 239, 122, 123, -52, -124,
	57, -117, 125, 157, 123, 108, 186, 115, 214, 124,
	33, 155, -133, 123, -105, 158, 213, 216, 217, 218,
	220, 219, 57, 228, 227, 221, -124, 163, -129, -129,
	-129, -129, -129, 215, 215, -129, -2, -87, 17, 16,
	-5, -3, -188, 6, 20, 21, -31, 40, 41, -26,
	-37, 99, -38, -124, -57, 74, -62, 29, 57, -117,
	23, -61, -58, -76, -74, -75, 108, 109, 110, 97,
	98, 105, 75, 111, -66, -64, -65, -67, 59, 58,
	67, 60, 61, 62, 63, 68, 69, 70, -118, -72,
	-188, 44, 45, 248, 249, 250, 251, 254, 252, 77,
	34, 238, 246, 245, 244, 242, 243, 240, 241, 128,
	239, 103, 247, -103, -103, 11, -47, -52, -95, -132,
	163, -99, 228, 227, -119, -97, -118, -116, 226, 186,
	225, 120, 73, 22, 24, 208, 76, 108, 16, 77,
	107, 248, 115, 48, 240, 241, 238, 250, 251, 239,
	214, 29, 10, 25, 143, 21, 101, 117, 80, 81,
	146, 23, 144, 70, 19, 51, 11, 13, 14, 128,
	127, 92, 124, 46, 8, 111, 26, 89, 42, 28,
	44, 90, 17, 242, 243, 31, 254, 150, 103, 49,
	36, 74, 68, 71, 52, 72, 15, 47, 91, 118,
	247, 45, 122, 6, 253, 30, 142, 43, 123, 215,
	79, 126, 69, 5, 129, 32, 9, 50, 53, 244,
	245, 246, 34, 78, 12, -163, 90, -156, 57, -52,
	124, -52, 247, -118, -111, 128, -111, -111, 123, -52,
	-52, -110, 128, 57, -110, -110, -110, -52, 112, -52,
	57, 30, 239, 57, 155, 123, 156, 125, -130, -188,
	-119, -130, -130, -130, 159, 160, -130, -108, -107, 223,
	224, 215, 222, 52, 12, -130, -129, -129, -189, 56,
	-88, 19, 31, -38, -124, -84, -85, -38, -83, -2,
	-25, 36, -29, 21, 65, 11, -121, 73, 72, 89,
	-120, 22, -118, 59, 112, -38, -59, 92, 74, 90,
	91, 76, 94, 93, 104, 97, 98, 99, 100, 101,
	102, 103, 95, 96, 107, 82, 83, 84, 85, 86,
	87, 88, -104, -188, -75, -188, 113, 114, -62, -62,
	-62, -62, -62, -62, -62, -62, -188, -2, -70, -38,
	-188, -188, -188, -188, -188, -188, -188, -188, -188, -79,
	-38, -188, -192, -188, -192, -192, -192, -192, -192, -192,
	-192, -188, -188, -188, -188, -53, 26, -52, -40, -41,
	-42, -43, -54, -75, -188, -52, -52, -47, -190, 55,
	11, 53, 55, -95, 163, -96, -100, 229, 231, 82,
	-123, -118, 59, 29, 30, 56, 55, -52, -135, -138,
	-140, -139, -141, -136, -137, 183, 184, 108, 187, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 30,
	145, 179, 180, 181, 182, 199, 200, 201, 202, 203,
	204, 205, 206, 166, 167, 168, 169, 170, 171, 172,
	174, 175, 176, 177, 178, 57, -130, 125, -181, 53,
	57, 74, 57, -52, -52, -130, 126, -52, 23, 52,
	-52, 57, 57, -125, -124, -116, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, 11, -106, 11, 92,
	-52, -38, 9, 92, 55, 18, 112, 55, -86, 24,
	25, -87, -189, -31, -63, -118, 60, 63, -30, 43,
	-52, -38, -38, -68, 68, 74, 69, 70, -120, 99,
	-125, -119, -116, -62, -69, -72, -75, 64, 92, 90,
	91, 76, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -131, 57, 59,
	57, -61, -61, -118, -36, 21, -35, -37, -189, 55,
	-189, -2, -35, -35, -38, -38, -76, -118, -124, -76,
	-35, -29, -77, -78, 78, -76, -189, -35, -36, -35,
	-35, -91, 151, -52, 30, 55, -48, -50, -49, -51,
	42, 46, 48, 43, 44, 45, 49, -128, 22, -40,
	-188, -127, 151, -126, 22, -124, 59, -91, 53, -40,
	-52, -99, -96, 55, 230, 232, 233, 52, 71, -38,
	-147, 107, -165, -166, -167, -119, 59, 60, -156, -157,
	-158, -168, 137, -173, 130, 132, 129, -159, 138, 124,
	28, 56, -152, 68, 74, -148, 211, -142, 54, -142,
	-142, -142, -142, -146, 186, -146, -146, -146, 54, 54,
	-142, -142, -142, -150, 54, -150, -150, -151, 54, -151,
	-122, 53, -52, -179, 258, -180, 57, -130, 23, -130,
	-112, 120, 117, 118, -176, 116, 208, 186, 66, 29,
	15, 248, 151, 261, 57, 152, -52, -52, -130, -52,
	-109, 90, 12, -124, -124, 38, -38, -38, -125, -85,
	-88, -102, 19, 11, 34, 34, -35, 68, 69, 70,
	112, -188, -69, -62, -62, -62, -34, 146, 73, -189,
	-189, -35, 55, -38, -189, -189, -189, 55, 53, 22,
	55, 11, 112, 55, 11, -189, -35, -80, -78, 80,
	-38, -189, -189, -189, -189, -189, -60, 30, 34, -2,
	-188, -188, -94, -98, -76, -41, -42, -42, -41, -42,
	42, 42, 42, 47, 42, 47, 42, -49, -124, -189,
	-55, 50, 127, 51, -188, -126, -56, 12, -40, -56,
	-100, -101, 234, 231, 237, 57, 59, 55, -167, 82,
	54, 57, 28, -159, -159, -160, 57, -160, 28, -143,
	29, 68, -149, 212, 60, -146, -146, -147, 30, -147,
	-147, -147, -155, 59, -155, 60, 60, 52, -118, -130,
	-178, -177, -119, -129, -182, 157, 131, 137, 138, 133,
	57, 124, 28, 130, 132, 151, 129, -182, 157, -113,
	-114, 126, 22, 124, 28, 151, -130, -106, 59, -38,
	39, 112, -52, -39, 11, 99, -119, -36, -34, 73,
	-62, -62, -189, -37, -134, 108, 183, 145, 181, 177,
	197, 188, 210, 179, 211, -131, -134, -62, -62, -119,
	-62, -62, 255, -83, 81, -38, 79, -93, 52, -94,
	-71, -73, -72, -188, -2, -89, -118, -92, -118, -56,
	55, 82, -45, -44, 52, 53, -46, 52, -44, 42,
	42, 124, 124, 124, -92, -83, -38, -56, 231, 235,
	236, -166, -167, -170, -169, -118, -173, -160, -160, 54,
	-145, 52, 59, 60, 61, 68, 238, 67, 56, -147,
	-147, 57, 108, 56, 55, 56, 55, 56, 55, -52,
	55, 82, -129, -118, -129, -118, -52, -129, -118, -109,
	-56, -40, -189, -62, -189, -142, -142, -142, -151, -142,
	171, -142, 171, -189, -189, -189, 55, 19, -189, 55,
	19, -188, -33, 253, -38, 27, -93, 55, -189, -189,
	-189, 55, 112, -189, 55, -83, -98, -38, -38, 54,
	-38, -188, -188, -188, -189, -87, 56, 55, -142, -90,
	-118, -153, 208, 9, 54, -146, 59, -146, 60, 60,
	-130, -177, -167, 54, 26, -81, 13, -146, 57, -62,
	-62, -62, -62, -62, -189, 59, 28, -73, 34, -2,
	-188, -118, -118, -118, -87, -90, -90, -90, -90, -127,
	-172, -171, 53, 134, 66, -169, 56, 55, -154, 130,
	28, 129, 238, 56, -147, -147, 56, 56, -90, -188,
	-82, 14, 16, -189, -189, -189, -189, -32, 92, 258,
	9, -71, -2, 112, 56, -189, -189, -189, -55, -171,
	57, -161, 82, 59, 140, -118, -144, 66, 28, 28,
	54, 56, -174, -175, 151, -38, -70, -189, 256, 49,
	259, -94, -189, -118, 60, -52, 59, 56, -181, -189,
	55, -118, 39, 257, 260, 54, -179, -175, 34, 39,
	-90, 153, 258, 56, 154, 259, -184, -185, 52, -188,
	260, -185, 52, 10, 9, -62, 150, -183, 141, 136,
	139, 30, -183, -189, -189, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 541, 0, 308, 308, 308, 308, 308, 308,
	0, 612, 595, 0, 0, 0, 0, -2, 295, 296,
	0, 298, 299, 828, 828, 828, 828, 828, 0, 0,
	828, 0, 35, 36, 826, 1, 3, 549, 0, 0,
	312, 315, 310, 0, 595, 595, 0, 0, 62, 63,
	0, 0, 0, 814, 0, 815, 593, 593, 593, 613,
	614, 617, 618, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 0, 0,
	596, 0, 591, 0, 591, 591, 591, 0, 250, 380,
	621, 622, 814, 815, 0, 0, 0, 0, 829, 829,
	829, 829, 0, 829, 0, 269, 270, 273, 274, 275,
	276, 277, 829, 292, 293, 282, 294, 297, 300, 301,
	302, 303, 304, 828, 828, 307, 29, 553, 0, 0,
	541, 31, 0, 308, 313, 314, 318, 316, 317, 309,
	0, 326, 330, 0, 388, 0, 393, 395, -2, -2,
	0, 430, 431, 432, 433, 434, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 459, 460, 461, 526, 527,
	528, 529, 530, 531, 532, 533, 397, 398, 523, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	0, 488, 488, 488, 488, 488, 488, 488, 488, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 47, 0,
	805, 577, -2, -2, 0, 0, 619, 620, -2, 728,
	-2, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 0, 0, 82, 0, 80,
	0, 829, 0, 70, 0, 0, 0, 0, 0, 829,
	0, 0, 0, 0, 0, 0, 0, 249, 0, 251,
	829, 829, 829, 829, 829, 829, 829, 829, 260, 830,
	831, 261, 262, 263, 829, 829, 265, 0, 285, 283,
	284, 279, 280, 0, 0, 278, 305, 306, 30, 827,
	24, 0, 0, 550, 0, 542, 543, 546, 549, 29,
	315, 0, 320, 319, 311, 0, 327, 0, 0, 0,
	331, 0, 333, 334, 0, 391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 415, 416, 417, 418, 419,
	420, 421, 394, 0, 408, 0, 0, 0, 450, 451,
	452, 453, 454, 455, 456, 0, 322, 29, 0, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	515, 0, 480, 0, 481, 482, 483, 484, 485, 486,
	487, 0, 322, 0, 0, 45, 0, 379, 0, 337,
	339, 340, 341, -2, 0, 363, -2, 0, 0, 0,
	41, 42, 0, 48, 805, 50, 51, 0, 0, 0,
	165, 586, 587, 588, 584, 209, 0, 0, 146, 142,
	88, 89, 90, 135, 92, 135, 135, 135, 135, 162,
	162, 162, 162, 118, 119, 120, 121, 122, 0, 0,
	105, 135, 135, 135, 109, 125, 126, 127, 128, 129,
	130, 131, 132, 93, 94, 95, 96, 97, 98, 99,
	137, 137, 137, 139, 139, 615, 65, 0, 73, 0,
	829, 0, 829, 78, 0, 225, 0, 244, 592, 0,
	829, 247, 248, 381, 623, 624, 252, 253, 254, 255,
	256, 257, 258, 259, 264, 268, 0, 288, 0, 0,
	272, 271, 554, 0, 0, 0, 0, 0, 545, 547,
	548, 553, 32, 318, 0, 534, 0, 0, 0, 321,
	27, 389, 390, 392, 409, 0, 411, 413, 332, 328,
	0, 524, -2, 399, 400, 424, 425, 426, 0, 0,
	0, 0, 422, 404, 0, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 449, 499, 500,
	0, 447, 448, 457, 0, 0, 323, 324, 427, 0,
	572, 29, 0, 0, 0, 0, 0, 523, 0, 0,
	0, 0, 521, 518, 0, 0, 489, 0, 0, 0,
	0, 0, 0, 378, 0, 0, 0, 0, 0, 0,
	368, 0, 0, 371, 0, 0, 0, 0, 362, 0,
	0, 382, 776, 364, 0, 366, 367, 386, 0, 386,
	44, 578, 49, 0, 0, 54, 55, 579, 580, 581,
	582, 0, 79, 210, 212, 215, 216, 217, 83, 84,
	85, 0, 0, 197, 0, 0, 191, 191, 0, 189,
	190, 81, 149, 147, 0, 144, 143, 91, 0, 162,
	162, 112, 113, 165, 0, 165, 165, 165, 0, 0,
	106, 107, 108, 100, 0, 101, 102, 103, 0, 104,
	0, 0, 829, 67, 0, 71, 72, 68, 594, 69,
	828, 0, 0, 607, 226, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 0, 243, 829, 246, 285,
	267, 0, 0, 286, 287, 0, 551, 552, 0, 544,
	25, 0, 589, 590, 535, 536, 335, 410, 412, 414,
	0, 322, 401, 422, 405, 0, 402, 0, 0, 396,
	462, 0, 0, 429, -2, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 0, 519, 0,
	0, 479, 490, 491, 492, 493, 566, 0, 0, -2,
	0, 0, 386, 574, 0, 338, 357, 359, 0, 354,
	369, 370, 372, 0, 374, 0, 376, 377, 342, 344,
	345, 0, 0, 0, 0, 365, 541, 0, 386, 40,
	52, 53, 0, 0, 59, 166, 167, 0, 213, 0,
	0, 0, 184, 191, 191, 187, 192, 188, 0, 157,
	0, 148, 87, 145, 0, 165, 165, 114, 0, 115,
	116, 117, 0, 133, 0, 0, 0, 0, 616, 66,
	74, 75, 0, 218, 828, 0, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 828, 0, 0,
	828, 608, 609, 610, 611, 0, 245, 288, 289, 290,
	555, 0, 26, 386, 0, 329, 525, 0, 403, 0,
	423, 406, 463, 325, 0, 135, 135, 504, 135, 139,
	507, 135, 509, 135, 512, 0, 0, 0, 0, 524,
	0, 0, 0, 516, 478, 522, 0, 33, 0, 566,
	556, 568, 570, 0, 29, 0, 562, 0, 349, 541,
	0, 0, 351, 358, 0, 0, 352, 0, 353, 373,
	375, 0, 0, 0, 0, 549, 387, 39, 56, 57,
	58, 211, 214, 0, 193, 135, 196, 185, 186, 0,
	160, 0, 150, 151, 152, 153, 154, 156, 136, 110,
	111, 163, 164, 162, 0, 162, 0, 140, 0, 829,
	0, 0, 219, 0, 220, 222, 223, 224, 0, 266,
	537, 336, 464, 407, 467, 501, 162, 505, 506, 508,
	510, 511, 513, 469, 468, 470, 0, 0, 473, 0,
	0, 0, 0, 0, 520, 0, 34, 0, 571, -2,
	0, 0, 0, 46, 0, 549, 575, 576, 355, 0,
	360, 0, 0, 0, 363, 38, 176, 0, 195, 0,
	347, 168, 161, 0, 0, 165, 134, 165, 0, 0,
	64, 76, 77, 0, 0, 539, 0, 502, 503, 0,
	0, 0, 0, 494, 477, 517, 0, 569, 0, -2,
	0, 564, 563, 350, 37, 0, 0, 0, 0, 382,
	175, 177, 0, 182, 0, 194, 0, 0, 173, 0,
	170, 172, 158, 155, 123, 124, 138, 141, 0, 0,
	28, 0, 0, 471, 472, 474, 475, 0, 0, 0,
	0, 559, 29, 0, 356, 383, 384, 385, 346, 178,
	179, 0, 183, 181, 0, 348, 86, 0, 169, 171,
	0, 70, 0, 239, 0, 540, 538, 476, 0, 0,
	0, 567, -2, 565, 180, 0, 174, 159, 73, 238,
	0, 0, 495, 0, 498, 0, 221, 240, 0, 496,
	0, 0, 0, 198, 0, 0, 199, 200, 0, 0,
	497, 201, 0, 0, 0, 0, 0, 202, 204, 205,
	0, 0, 203, 241, 242, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:351
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:359
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:470
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:474
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:591
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:648
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:677
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:901
		{
			yyVAL.optVal = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:910
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1013
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1205
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1209
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1215
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1296
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1300
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1327
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1360
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1366
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 241:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1376
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1380
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1392
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1400
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1405
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1495
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1500
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = "full "
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1588
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1608
		{
			yyVAL.showFilter = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1612
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = SessionStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = GlobalStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Begin{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Begin{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Commit{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &Rollback{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &OtherRead{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &OtherRead{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &OtherRead{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			setAllowComments(yylex, true)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1712
		{
			yyVAL.bytes2 = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = UnionStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = UnionAllStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = UnionDistinctStr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = SQLCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = DistinctStr
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = StraightJoinHint
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1766
		{
			yyVAL.selectExprs = nil
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1776
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1780
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1790
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1794
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1798
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 346:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1871
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1887
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1912
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1924
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1928
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1934
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1939
		{
			yyVAL.empty = struct{}{}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.empty = struct{}{}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = JoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = JoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1973
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = StraightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = LeftJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = LeftJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.str = RightJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.str = RightJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = NaturalJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.indexHints = nil
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2040
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2044
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2048
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.expr = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 407:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.str = IsNullStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			yyVAL.str = IsNotNullStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.str = IsTrueStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.str = IsNotTrueStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.str = IsFalseStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.str = IsNotFalseStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.str = EqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = LessThanStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = GreaterThanStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.str = LessEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.str = GreaterEqualStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.str = NotEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2538
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2542
		{
			yyVAL.str = BooleanModeStr
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2546
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2550
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2554
		{
			yyVAL.str = QueryExpansionStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2634
		{
			yyVAL.str = string("")
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2654
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2669
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2677
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &NullVal{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2735
		{
			yyVAL.exprs = nil
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2739
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2753
		{
			yyVAL.orderBy = nil
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2773
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2778
		{
			yyVAL.str = AscScr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.str = AscScr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.str = DescScr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2791
		{
			yyVAL.limit = nil
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2799
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2803
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2808
		{
			yyVAL.str = ""
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.str = ForUpdateStr
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2816
		{
			yyVAL.str = ShareModeStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2842
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2846
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2850
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2869
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2874
		{
			yyVAL.updateExprs = nil
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2878
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2888
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2924
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2946
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.bytes = []byte("charset")
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &Default{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2989
		{
			yyVAL.byt = 0
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.byt = 1
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2994
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2999
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = IgnoreStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3039
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3046
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			decNesting(yylex)
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3321
		{
			forceEOF(yylex)
		}
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3326
		{
			forceEOF(yylex)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			forceEOF(yylex)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

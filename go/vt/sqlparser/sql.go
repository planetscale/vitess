// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl DDLStatement) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const STATUS = 57517
const VARIABLES = 57518
const WARNINGS = 57519
const SEQUENCE = 57520
const BEGIN = 57521
const START = 57522
const TRANSACTION = 57523
const COMMIT = 57524
const ROLLBACK = 57525
const SAVEPOINT = 57526
const RELEASE = 57527
const WORK = 57528
const BIT = 57529
const TINYINT = 57530
const SMALLINT = 57531
const MEDIUMINT = 57532
const INT = 57533
const INTEGER = 57534
const BIGINT = 57535
const INTNUM = 57536
const REAL = 57537
const DOUBLE = 57538
const FLOAT_TYPE = 57539
const DECIMAL = 57540
const NUMERIC = 57541
const TIME = 57542
const TIMESTAMP = 57543
const DATETIME = 57544
const YEAR = 57545
const CHAR = 57546
const VARCHAR = 57547
const BOOL = 57548
const CHARACTER = 57549
const VARBINARY = 57550
const NCHAR = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const BLOB = 57556
const TINYBLOB = 57557
const MEDIUMBLOB = 57558
const LONGBLOB = 57559
const JSON = 57560
const ENUM = 57561
const GEOMETRY = 57562
const POINT = 57563
const LINESTRING = 57564
const POLYGON = 57565
const GEOMETRYCOLLECTION = 57566
const MULTIPOINT = 57567
const MULTILINESTRING = 57568
const MULTIPOLYGON = 57569
const NULLX = 57570
const AUTO_INCREMENT = 57571
const APPROXNUM = 57572
const SIGNED = 57573
const UNSIGNED = 57574
const ZEROFILL = 57575
const COLLATION = 57576
const DATABASES = 57577
const SCHEMAS = 57578
const TABLES = 57579
const VITESS_METADATA = 57580
const VSCHEMA = 57581
const FULL = 57582
const PROCESSLIST = 57583
const COLUMNS = 57584
const FIELDS = 57585
const ENGINES = 57586
const PLUGINS = 57587
const EXTENDED = 57588
const KEYSPACES = 57589
const VITESS_KEYSPACES = 57590
const VITESS_SHARDS = 57591
const VITESS_TABLETS = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const CURRENT_TIMESTAMP = 57606
const DATABASE = 57607
const CURRENT_DATE = 57608
const CURRENT_TIME = 57609
const LOCALTIME = 57610
const LOCALTIMESTAMP = 57611
const UTC_DATE = 57612
const UTC_TIME = 57613
const UTC_TIMESTAMP = 57614
const REPLACE = 57615
const CONVERT = 57616
const CAST = 57617
const SUBSTR = 57618
const SUBSTRING = 57619
const GROUP_CONCAT = 57620
const SEPARATOR = 57621
const TIMESTAMPADD = 57622
const TIMESTAMPDIFF = 57623
const MATCH = 57624
const AGAINST = 57625
const BOOLEAN = 57626
const LANGUAGE = 57627
const WITH = 57628
const QUERY = 57629
const EXPANSION = 57630
const UNUSED = 57631
const ARRAY = 57632
const CUME_DIST = 57633
const DESCRIPTION = 57634
const DENSE_RANK = 57635
const EMPTY = 57636
const EXCEPT = 57637
const FIRST_VALUE = 57638
const GROUPING = 57639
const GROUPS = 57640
const JSON_TABLE = 57641
const LAG = 57642
const LAST_VALUE = 57643
const LATERAL = 57644
const LEAD = 57645
const MEMBER = 57646
const NTH_VALUE = 57647
const NTILE = 57648
const OF = 57649
const OVER = 57650
const PERCENT_RANK = 57651
const RANK = 57652
const RECURSIVE = 57653
const ROW_NUMBER = 57654
const SYSTEM = 57655
const WINDOW = 57656
const ACTIVE = 57657
const ADMIN = 57658
const BUCKETS = 57659
const CLONE = 57660
const COMPONENT = 57661
const DEFINITION = 57662
const ENFORCED = 57663
const EXCLUDE = 57664
const FOLLOWING = 57665
const GEOMCOLLECTION = 57666
const GET_MASTER_PUBLIC_KEY = 57667
const HISTOGRAM = 57668
const HISTORY = 57669
const INACTIVE = 57670
const INVISIBLE = 57671
const LOCKED = 57672
const MASTER_COMPRESSION_ALGORITHMS = 57673
const MASTER_PUBLIC_KEY_PATH = 57674
const MASTER_TLS_CIPHERSUITES = 57675
const MASTER_ZSTD_COMPRESSION_LEVEL = 57676
const NESTED = 57677
const NETWORK_NAMESPACE = 57678
const NOWAIT = 57679
const NULLS = 57680
const OJ = 57681
const OLD = 57682
const OPTIONAL = 57683
const ORDINALITY = 57684
const ORGANIZATION = 57685
const OTHERS = 57686
const PATH = 57687
const PERSIST = 57688
const PERSIST_ONLY = 57689
const PRECEDING = 57690
const PRIVILEGE_CHECKS_USER = 57691
const PROCESS = 57692
const RANDOM = 57693
const REFERENCE = 57694
const REQUIRE_ROW_FORMAT = 57695
const RESOURCE = 57696
const RESPECT = 57697
const RESTART = 57698
const RETAIN = 57699
const REUSE = 57700
const ROLE = 57701
const SECONDARY = 57702
const SECONDARY_ENGINE = 57703
const SECONDARY_LOAD = 57704
const SECONDARY_UNLOAD = 57705
const SKIP = 57706
const SRID = 57707
const THREAD_PRIORITY = 57708
const TIES = 57709
const UNBOUNDED = 57710
const VCPU = 57711
const VISIBLE = 57712
const FORMAT = 57713
const TREE = 57714
const VITESS = 57715
const TRADITIONAL = 57716

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	34, 328,
	155, 328,
	167, 328,
	192, 342,
	193, 342,
	-2, 330,
	-1, 51,
	157, 352,
	-2, 350,
	-1, 75,
	55, 388,
	-2, 396,
	-1, 426,
	143, 763,
	-2, 759,
	-1, 427,
	143, 764,
	-2, 760,
	-1, 442,
	55, 389,
	-2, 401,
	-1, 443,
	55, 390,
	-2, 402,
	-1, 463,
	111, 1038,
	-2, 76,
	-1, 464,
	111, 943,
	-2, 77,
	-1, 469,
	111, 903,
	-2, 724,
	-1, 471,
	111, 980,
	-2, 726,
	-1, 1004,
	143, 766,
	-2, 762,
	-1, 1091,
	73, 58,
	81, 58,
	-2, 62,
	-1, 1465,
	5, 640,
	18, 640,
	20, 640,
	32, 640,
	82, 640,
	-2, 427,
	-1, 1664,
	45, 695,
	-2, 693,
}

const yyPrivate = 57344

const yyLast = 19799

var yyAct = [...]int{

	426, 1753, 1742, 1511, 1664, 1387, 1573, 1711, 1644, 1294,
	1610, 1593, 1314, 1113, 385, 1444, 733, 773, 1295, 370,
	435, 1441, 780, 399, 1445, 1164, 1158, 633, 1374, 1085,
	1345, 599, 1368, 1457, 1369, 1122, 468, 602, 74, 3,
	1451, 1109, 1112, 1082, 925, 111, 1281, 337, 111, 1406,
	365, 1230, 72, 349, 998, 111, 1166, 991, 944, 1361,
	818, 596, 811, 1064, 1071, 444, 1127, 651, 778, 801,
	1087, 429, 783, 1024, 800, 968, 29, 361, 1181, 372,
	1047, 595, 603, 349, 817, 1093, 349, 111, 349, 111,
	1154, 70, 815, 790, 75, 808, 368, 642, 111, 111,
	614, 615, 746, 111, 954, 624, 69, 1661, 939, 111,
	8, 7, 747, 1502, 6, 1583, 1143, 1612, 1746, 1167,
	902, 356, 653, 1708, 1740, 1689, 1733, 77, 78, 79,
	80, 81, 82, 1512, 901, 1707, 1688, 1423, 1541, 31,
	1169, 606, 63, 35, 36, 100, 97, 430, 98, 1475,
	450, 454, 1655, 695, 694, 704, 705, 697, 698, 699,
	700, 701, 702, 703, 696, 1103, 411, 706, 417, 418,
	415, 416, 414, 413, 412, 462, 89, 359, 357, 1476,
	1477, 360, 419, 420, 1104, 1105, 666, 113, 114, 115,
	107, 103, 104, 105, 358, 113, 114, 115, 900, 819,
	1353, 820, 113, 114, 115, 465, 1331, 659, 660, 1330,
	661, 1168, 1332, 62, 662, 659, 660, 1137, 1576, 1389,
	1691, 1144, 113, 114, 115, 1532, 1530, 347, 953, 91,
	92, 351, 88, 345, 664, 914, 94, 656, 806, 95,
	96, 654, 655, 913, 1391, 911, 1732, 1721, 101, 665,
	1645, 897, 894, 895, 1065, 893, 317, 1203, 955, 956,
	957, 1757, 1162, 1674, 1162, 320, 639, 1482, 641, 1759,
	1392, 1315, 1317, 330, 99, 1390, 915, 1162, 456, 912,
	623, 598, 608, 109, 1636, 649, 918, 669, 904, 907,
	886, 1131, 1468, 352, 1668, 1467, 1466, 611, 316, 102,
	638, 640, 1200, 1210, 718, 719, 1209, 328, 1202, 1557,
	1474, 1131, 1286, 335, 1259, 1238, 1327, 111, 631, 106,
	1099, 637, 619, 794, 731, 601, 629, 605, 899, 349,
	1249, 1110, 696, 706, 1656, 706, 612, 613, 349, 1246,
	1043, 621, 635, 318, 686, 945, 940, 628, 1501, 1170,
	898, 643, 349, 349, 113, 114, 115, 1191, 90, 1316,
	685, 683, 1407, 1144, 667, 113, 114, 115, 1687, 1647,
	332, 321, 322, 1425, 333, 334, 341, 686, 1375, 1455,
	325, 327, 338, 323, 324, 343, 342, 821, 319, 340,
	339, 683, 675, 888, 636, 903, 616, 679, 617, 1755,
	1692, 618, 1756, 1409, 1754, 668, 648, 686, 1493, 1025,
	905, 1187, 1188, 1189, 883, 1637, 1635, 1130, 650, 1351,
	644, 645, 646, 64, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 1201, 1677, 1199, 1130, 787, 85,
	1411, 1582, 1415, 1025, 1410, 1256, 1408, 716, 634, 657,
	1134, 1413, 770, 349, 946, 941, 111, 1135, 111, 111,
	1412, 349, 718, 719, 678, 676, 1366, 349, 677, 1581,
	771, 718, 719, 1414, 1416, 62, 1507, 734, 86, 1760,
	680, 681, 1431, 1190, 684, 685, 683, 971, 1195, 1192,
	1183, 1193, 1186, 1365, 1182, 1734, 1001, 1726, 1184, 1185,
	1364, 799, 686, 699, 700, 701, 702, 703, 696, 1173,
	784, 706, 1194, 1737, 1245, 749, 751, 753, 755, 757,
	759, 760, 1735, 1736, 1727, 750, 752, 772, 756, 758,
	1432, 761, 695, 694, 704, 705, 697, 698, 699, 700,
	701, 702, 703, 696, 1728, 1761, 706, 1719, 1702, 690,
	769, 693, 1223, 1224, 1225, 630, 1606, 707, 708, 709,
	710, 711, 712, 713, 622, 691, 692, 689, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	1579, 1545, 706, 465, 1508, 1433, 975, 1048, 1049, 1231,
	1244, 684, 685, 683, 1376, 111, 1045, 1362, 1243, 879,
	973, 974, 972, 439, 439, 938, 349, 930, 887, 686,
	889, 111, 891, 906, 349, 349, 349, 684, 685, 683,
	111, 71, 607, 111, 1633, 1738, 111, 923, 924, 1642,
	111, 1641, 349, 1633, 1685, 686, 1378, 349, 349, 349,
	111, 349, 349, 695, 694, 704, 705, 697, 698, 699,
	700, 701, 702, 703, 696, 349, 349, 706, 1044, 1282,
	929, 1282, 684, 685, 683, 1132, 927, 963, 965, 966,
	625, 626, 627, 885, 964, 1681, 439, 684, 685, 683,
	686, 908, 909, 910, 704, 705, 697, 698, 699, 700,
	701, 702, 703, 696, 798, 686, 706, 810, 439, 928,
	1454, 684, 685, 683, 932, 933, 934, 992, 936, 937,
	113, 114, 115, 969, 609, 610, 994, 948, 919, 686,
	1633, 439, 942, 943, 113, 114, 115, 1068, 993, 1454,
	349, 697, 698, 699, 700, 701, 702, 703, 696, 967,
	1067, 706, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 1008, 1442, 1013,
	1016, 455, 950, 349, 349, 1026, 947, 1454, 1004, 970,
	684, 685, 683, 113, 114, 115, 1003, 1334, 1427, 1633,
	1669, 73, 349, 1633, 1632, 882, 1572, 1095, 686, 111,
	1068, 1038, 349, 1057, 734, 1552, 111, 682, 111, 1030,
	1646, 1050, 1559, 439, 1555, 439, 111, 111, 111, 1499,
	1498, 1495, 1496, 1497, 349, 995, 996, 349, 1495, 1494,
	1034, 1035, 1056, 439, 1005, 1544, 1068, 439, 349, 349,
	1068, 1004, 1095, 829, 31, 682, 439, 882, 881, 1062,
	828, 827, 457, 458, 1083, 1321, 1056, 31, 1096, 890,
	1058, 1335, 816, 1094, 1002, 1102, 1098, 1262, 916, 1289,
	1129, 810, 1056, 1261, 922, 1056, 695, 694, 704, 705,
	697, 698, 699, 700, 701, 702, 703, 696, 935, 1094,
	706, 1290, 432, 349, 1046, 1060, 917, 111, 349, 813,
	349, 62, 1720, 1096, 1617, 1097, 427, 31, 1595, 1101,
	1464, 1094, 1564, 1092, 884, 1160, 1100, 1159, 62, 1486,
	1117, 1161, 111, 111, 111, 111, 111, 1002, 111, 111,
	880, 62, 111, 349, 694, 704, 705, 697, 698, 699,
	700, 701, 702, 703, 696, 460, 465, 706, 782, 465,
	111, 112, 1339, 1155, 112, 1149, 111, 111, 111, 350,
	1114, 112, 111, 349, 1584, 1175, 62, 1177, 1148, 1145,
	1146, 1147, 87, 1371, 1172, 1171, 1156, 1157, 1588, 1458,
	1459, 62, 1216, 1196, 1370, 1388, 1220, 1596, 1179, 350,
	1748, 1743, 350, 112, 350, 112, 1488, 1461, 1442, 1380,
	1214, 951, 1306, 921, 112, 112, 969, 1307, 1463, 112,
	1271, 1585, 1586, 1587, 1723, 112, 388, 387, 390, 391,
	392, 393, 1589, 1590, 1180, 389, 394, 1304, 1371, 1303,
	1302, 1706, 1305, 1434, 1227, 1228, 1229, 1059, 1308, 1240,
	1077, 1078, 781, 1704, 1063, 1556, 1066, 1073, 1076, 1077,
	1078, 1074, 1280, 1075, 1079, 1279, 1091, 1697, 1226, 1694,
	1725, 1710, 970, 1712, 1269, 1718, 1268, 1717, 111, 1377,
	1665, 1663, 1270, 428, 1021, 1370, 1357, 826, 1275, 111,
	111, 111, 111, 111, 774, 632, 1350, 1239, 1022, 445,
	1679, 111, 430, 1510, 1678, 111, 775, 1296, 1615, 111,
	1348, 1341, 1550, 446, 111, 111, 1041, 1255, 111, 111,
	111, 1284, 1176, 1291, 1048, 1049, 920, 1081, 433, 434,
	1287, 1333, 436, 349, 1730, 1274, 785, 786, 448, 1729,
	447, 1715, 1340, 1313, 1285, 1174, 1336, 1346, 1346, 1283,
	1278, 1698, 1549, 445, 437, 73, 927, 1322, 1277, 1298,
	1299, 1324, 1301, 1297, 1309, 1548, 1300, 446, 1437, 1282,
	1204, 1205, 1206, 1207, 1208, 1320, 1211, 1212, 1347, 1319,
	1213, 1325, 663, 1328, 1750, 1749, 1750, 71, 1373, 1250,
	442, 443, 448, 1247, 447, 349, 795, 788, 1215, 1338,
	349, 1666, 1577, 1042, 432, 1356, 1219, 1358, 1359, 1360,
	1221, 1342, 1343, 1344, 76, 68, 1, 336, 111, 1741,
	1513, 1592, 896, 1643, 349, 1367, 1165, 1120, 1111, 1363,
	84, 593, 83, 112, 349, 647, 1119, 1073, 1076, 1077,
	1078, 1074, 1372, 1075, 1079, 350, 1118, 1458, 1459, 1634,
	1352, 1136, 1009, 1010, 350, 1114, 1015, 1018, 1019, 349,
	1575, 1487, 1379, 1349, 1676, 992, 834, 832, 350, 350,
	1138, 833, 1139, 1140, 1141, 1142, 1354, 1355, 1405, 831,
	836, 1033, 1404, 835, 1036, 1037, 830, 329, 1150, 1151,
	1152, 1153, 952, 346, 1394, 1080, 1424, 111, 1395, 1396,
	822, 1393, 1398, 1399, 789, 1198, 1197, 349, 892, 1500,
	1133, 326, 1402, 349, 349, 1418, 1004, 1419, 1420, 1443,
	1421, 1422, 1417, 1382, 1003, 658, 331, 714, 1440, 1296,
	1029, 1276, 1429, 1430, 1446, 1329, 466, 459, 1383, 349,
	1385, 1448, 111, 1178, 93, 1716, 1695, 1693, 1662, 1611,
	1696, 1660, 1724, 1323, 1462, 1709, 349, 1040, 349, 777,
	349, 1453, 1547, 1346, 1346, 1346, 1436, 1254, 743, 350,
	1023, 1479, 112, 804, 112, 112, 371, 350, 1492, 1469,
	962, 1403, 386, 350, 383, 1471, 384, 1470, 1051, 1472,
	1288, 1473, 1129, 1483, 1484, 1485, 1481, 1480, 1478, 688,
	369, 111, 1428, 363, 803, 438, 796, 1072, 1070, 1514,
	349, 349, 349, 111, 1069, 809, 1490, 1491, 1460, 1505,
	1506, 1489, 1504, 1503, 1456, 802, 1055, 441, 1020, 1403,
	695, 694, 704, 705, 697, 698, 699, 700, 701, 702,
	703, 696, 1519, 1520, 706, 1523, 1654, 1540, 440, 54,
	34, 353, 671, 449, 28, 23, 1384, 22, 1528, 21,
	20, 19, 25, 18, 17, 16, 39, 620, 1521, 38,
	27, 26, 15, 14, 13, 12, 11, 10, 1114, 9,
	1114, 5, 4, 674, 24, 1551, 732, 2, 0, 0,
	0, 0, 0, 1561, 1296, 0, 1560, 0, 0, 349,
	0, 452, 0, 0, 0, 0, 0, 349, 0, 0,
	0, 112, 1336, 1570, 0, 0, 1235, 1236, 0, 0,
	0, 0, 350, 0, 0, 0, 0, 112, 0, 0,
	350, 350, 350, 349, 0, 1435, 112, 1253, 1571, 112,
	0, 0, 112, 0, 0, 0, 112, 1599, 350, 0,
	0, 0, 0, 350, 350, 350, 112, 350, 350, 0,
	0, 1597, 362, 0, 0, 0, 0, 0, 0, 1546,
	0, 350, 350, 0, 0, 0, 349, 0, 349, 0,
	349, 1605, 0, 0, 0, 349, 1614, 349, 349, 349,
	111, 1624, 1620, 1625, 1627, 1628, 1446, 1616, 0, 0,
	1446, 1623, 0, 0, 0, 0, 1600, 1601, 1602, 1603,
	1604, 1630, 1638, 1618, 1607, 1608, 349, 111, 1631, 1629,
	0, 1114, 1648, 0, 0, 0, 0, 0, 400, 30,
	0, 1578, 0, 1580, 0, 0, 0, 0, 0, 1509,
	1639, 0, 1640, 0, 0, 0, 350, 0, 0, 0,
	0, 1518, 0, 1667, 349, 1594, 0, 0, 0, 30,
	0, 1446, 1673, 1598, 0, 0, 349, 349, 349, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 1683, 350,
	350, 1684, 1609, 0, 0, 0, 0, 0, 0, 349,
	0, 1690, 0, 0, 0, 111, 1699, 0, 350, 431,
	0, 0, 0, 0, 0, 112, 1296, 1543, 350, 1537,
	1703, 1705, 112, 0, 112, 0, 0, 0, 1714, 0,
	1713, 0, 112, 112, 112, 0, 0, 0, 0, 1722,
	350, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 350, 350, 0, 1731, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	0, 0, 706, 0, 1747, 0, 0, 0, 0, 0,
	0, 0, 1758, 695, 694, 704, 705, 697, 698, 699,
	700, 701, 702, 703, 696, 1536, 0, 706, 0, 1594,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	0, 0, 0, 112, 350, 0, 350, 0, 0, 0,
	1744, 695, 694, 704, 705, 697, 698, 699, 700, 701,
	702, 703, 696, 0, 397, 706, 0, 0, 112, 112,
	112, 112, 112, 0, 112, 112, 0, 0, 112, 350,
	1535, 0, 1525, 1526, 0, 1527, 0, 0, 1529, 0,
	1531, 0, 0, 0, 0, 1649, 112, 0, 0, 0,
	0, 0, 112, 112, 112, 0, 687, 0, 112, 350,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 694, 704,
	705, 697, 698, 699, 700, 701, 702, 703, 696, 0,
	1397, 706, 362, 0, 0, 0, 0, 467, 0, 0,
	597, 744, 604, 0, 0, 0, 0, 0, 0, 0,
	695, 694, 704, 705, 697, 698, 699, 700, 701, 702,
	703, 696, 0, 1701, 706, 0, 0, 0, 776, 779,
	0, 0, 695, 694, 704, 705, 697, 698, 699, 700,
	701, 702, 703, 696, 0, 0, 706, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 30, 0, 0, 112, 112, 112, 112, 112,
	0, 0, 0, 0, 0, 715, 717, 112, 0, 0,
	0, 112, 0, 0, 0, 112, 0, 0, 0, 0,
	112, 112, 0, 0, 112, 112, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 0, 0, 350,
	735, 736, 737, 738, 739, 740, 741, 742, 0, 745,
	748, 748, 748, 754, 748, 748, 754, 748, 762, 763,
	764, 765, 766, 767, 768, 0, 0, 0, 0, 0,
	30, 0, 0, 1006, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 350, 0, 0, 0, 0, 350, 0, 0, 0,
	0, 0, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 1232, 0,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 0, 0, 931, 695, 694,
	704, 705, 697, 698, 699, 700, 701, 702, 703, 696,
	0, 0, 706, 467, 0, 350, 0, 0, 0, 0,
	0, 0, 467, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 672, 0, 0,
	0, 0, 0, 0, 958, 959, 960, 961, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 350,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 350, 0, 0, 112, 1011,
	1012, 0, 652, 652, 652, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 350, 0, 350, 0, 0, 0,
	652, 0, 0, 0, 0, 652, 652, 652, 0, 652,
	652, 0, 0, 0, 0, 0, 0, 792, 0, 0,
	0, 0, 0, 652, 652, 467, 0, 0, 0, 0,
	0, 823, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 350, 350, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1108, 0, 1233, 0, 0, 0, 1234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1241, 1242, 0, 0, 0, 0, 1248, 0, 0, 1251,
	1252, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	0, 1260, 0, 0, 1263, 1264, 1265, 1266, 1267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 350,
	467, 0, 0, 0, 1084, 0, 0, 0, 467, 467,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 0, 0, 0,
	0, 467, 467, 467, 0, 467, 467, 0, 0, 0,
	0, 0, 350, 0, 350, 0, 350, 0, 0, 467,
	467, 350, 0, 350, 350, 350, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 112, 0, 0, 652, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1272, 1273, 779, 0,
	350, 652, 0, 0, 997, 0, 467, 0, 0, 0,
	0, 0, 350, 350, 350, 0, 1400, 1401, 0, 0,
	1027, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 350, 0, 1031, 1032, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 792, 0, 0, 467,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1237, 0, 0, 431, 0, 0, 350, 467, 0,
	0, 467, 0, 0, 1465, 0, 0, 851, 0, 0,
	0, 0, 467, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 805, 805, 805,
	805, 805, 0, 0, 0, 0, 0, 604, 0, 398,
	0, 0, 467, 1084, 467, 1318, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 805, 0, 0, 0,
	0, 0, 0, 1522, 0, 0, 0, 1524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 1533, 1534,
	0, 0, 0, 839, 110, 0, 0, 344, 1426, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1222, 1553, 1554,
	0, 0, 1558, 0, 1438, 0, 0, 453, 453, 0,
	0, 0, 0, 0, 852, 0, 110, 0, 110, 0,
	1569, 0, 0, 652, 0, 0, 0, 110, 110, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 110, 0,
	865, 868, 869, 870, 871, 872, 873, 0, 874, 875,
	876, 877, 878, 853, 854, 855, 856, 837, 838, 866,
	0, 840, 652, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 857, 858, 859, 860, 861, 862, 863,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1027, 0, 0, 0, 0, 1626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 1447,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 1542,
	0, 1650, 1651, 1652, 1653, 0, 1657, 467, 1658, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	805, 0, 0, 0, 0, 0, 1670, 1562, 1671, 1672,
	1563, 0, 0, 1565, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1686, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 0, 0, 0, 1381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 1386, 31,
	32, 33, 63, 35, 36, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	1613, 362, 1539, 0, 37, 57, 58, 0, 60, 0,
	0, 0, 0, 467, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1751, 1752, 0, 0, 0,
	0, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 1566, 1567, 1568, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 467, 0, 0, 1027, 0, 0, 1450, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1591,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	467, 0, 467, 0, 604, 110, 0, 110, 812, 40,
	41, 43, 42, 45, 0, 59, 0, 0, 0, 0,
	0, 1447, 0, 30, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 66,
	65, 0, 0, 55, 56, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 1516, 1517, 0, 0, 48,
	49, 0, 50, 51, 52, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 110, 0, 0, 0, 0, 0,
	0, 1574, 0, 64, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 110, 0, 0, 110, 0, 467, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1619, 0, 1621, 0, 1622, 0, 0, 0, 0, 1574,
	0, 1574, 1574, 1574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 926, 0, 0, 0, 453, 453, 0, 0, 453,
	453, 453, 0, 0, 0, 1028, 0, 0, 1675, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1682, 467, 467, 0, 453, 453, 453, 453, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1027, 0, 1700, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 926, 110, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 110, 1089, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 110, 110, 110, 110, 0, 110, 110, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 1217, 1218, 110, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 453,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1028, 110, 110,
	110, 110, 110, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 110, 0, 0, 0, 1089, 0,
	0, 0, 0, 110, 110, 0, 0, 110, 1326, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1028, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 0,
	0, 579, 567, 0, 110, 522, 582, 495, 512, 590,
	513, 516, 553, 480, 535, 217, 510, 0, 499, 475,
	506, 476, 497, 524, 150, 528, 494, 569, 538, 581,
	184, 0, 500, 228, 555, 260, 142, 192, 190, 279,
	155, 151, 149, 141, 172, 196, 227, 276, 221, 588,
	187, 544, 0, 268, 204, 0, 0, 0, 526, 571,
	533, 563, 521, 554, 485, 543, 583, 511, 551, 584,
	176, 140, 120, 214, 269, 157, 0, 0, 0, 113,
	114, 115, 0, 1115, 1116, 0, 0, 0, 0, 0,
	136, 0, 548, 578, 508, 550, 552, 592, 474, 545,
	0, 478, 481, 589, 574, 503, 504, 1337, 0, 0,
	0, 0, 0, 0, 525, 534, 560, 519, 0, 0,
	0, 0, 0, 0, 0, 0, 501, 0, 542, 0,
	0, 0, 482, 479, 0, 0, 0, 0, 523, 0,
	0, 0, 484, 0, 502, 561, 0, 472, 162, 565,
	573, 520, 301, 577, 518, 517, 580, 239, 0, 273,
	166, 183, 132, 180, 117, 128, 0, 164, 213, 247,
	251, 570, 498, 507, 143, 505, 249, 225, 292, 541,
	229, 248, 188, 281, 240, 291, 302, 303, 277, 299,
	311, 265, 121, 275, 289, 137, 259, 0, 0, 0,
	123, 287, 272, 202, 177, 178, 122, 0, 245, 148,
	160, 145, 216, 284, 285, 144, 314, 129, 298, 125,
	130, 297, 209, 280, 288, 203, 195, 124, 286, 201,
	194, 182, 154, 168, 237, 191, 238, 169, 206, 205,
	207, 0, 477, 0, 270, 295, 315, 134, 493, 566,
	278, 307, 310, 0, 241, 135, 161, 153, 236, 159,
	185, 306, 308, 309, 208, 131, 171, 266, 181, 189,
	244, 313, 224, 250, 138, 294, 267, 489, 492, 487,
	488, 536, 537, 585, 586, 587, 562, 483, 0, 490,
	491, 0, 568, 575, 576, 540, 116, 126, 186, 312,
	242, 158, 296, 473, 486, 147, 496, 0, 0, 509,
	514, 515, 527, 529, 530, 531, 532, 539, 546, 547,
	549, 556, 557, 558, 559, 564, 572, 591, 118, 119,
	127, 133, 139, 146, 152, 156, 163, 167, 170, 173,
	174, 175, 179, 193, 197, 198, 199, 200, 210, 211,
	212, 215, 218, 219, 220, 222, 223, 226, 230, 231,
	232, 233, 234, 235, 243, 246, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 271, 274, 282,
	283, 293, 300, 304, 165, 290, 305, 579, 567, 0,
	0, 522, 582, 495, 512, 590, 513, 516, 553, 480,
	535, 217, 510, 0, 499, 475, 506, 476, 497, 524,
	150, 528, 494, 569, 538, 581, 184, 0, 500, 228,
	555, 260, 142, 192, 190, 279, 155, 151, 149, 141,
	172, 196, 227, 276, 221, 588, 187, 544, 0, 268,
	204, 0, 0, 0, 526, 571, 533, 563, 521, 554,
	485, 543, 583, 511, 551, 584, 176, 140, 120, 214,
	269, 157, 0, 0, 0, 113, 114, 115, 0, 1115,
	1116, 0, 0, 0, 0, 0, 136, 0, 548, 578,
	508, 550, 552, 592, 474, 545, 0, 478, 481, 589,
	574, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	525, 534, 560, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 0, 542, 0, 0, 0, 482, 479,
	0, 0, 0, 0, 523, 0, 0, 0, 484, 0,
	502, 561, 0, 472, 162, 565, 573, 520, 301, 577,
	518, 517, 580, 239, 0, 273, 166, 183, 132, 180,
	117, 128, 0, 164, 213, 247, 251, 570, 498, 507,
	143, 505, 249, 225, 292, 541, 229, 248, 188, 281,
	240, 291, 302, 303, 277, 299, 311, 265, 121, 275,
	289, 137, 259, 0, 0, 0, 123, 287, 272, 202,
	177, 178, 122, 0, 245, 148, 160, 145, 216, 284,
	285, 144, 314, 129, 298, 125, 130, 297, 209, 280,
	288, 203, 195, 124, 286, 201, 194, 182, 154, 168,
	237, 191, 238, 169, 206, 205, 207, 0, 477, 0,
	270, 295, 315, 134, 493, 566, 278, 307, 310, 0,
	241, 135, 161, 153, 236, 159, 185, 306, 308, 309,
	208, 131, 171, 266, 181, 189, 244, 313, 224, 250,
	138, 294, 267, 489, 492, 487, 488, 536, 537, 585,
	586, 587, 562, 483, 0, 490, 491, 0, 568, 575,
	576, 540, 116, 126, 186, 312, 242, 158, 296, 473,
	486, 147, 496, 0, 0, 509, 514, 515, 527, 529,
	530, 531, 532, 539, 546, 547, 549, 556, 557, 558,
	559, 564, 572, 591, 118, 119, 127, 133, 139, 146,
	152, 156, 163, 167, 170, 173, 174, 175, 179, 193,
	197, 198, 199, 200, 210, 211, 212, 215, 218, 219,
	220, 222, 223, 226, 230, 231, 232, 233, 234, 235,
	243, 246, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 271, 274, 282, 283, 293, 300, 304,
	165, 290, 305, 579, 567, 0, 0, 522, 582, 495,
	512, 590, 513, 516, 553, 480, 535, 217, 510, 0,
	499, 475, 506, 476, 497, 524, 150, 528, 494, 569,
	538, 581, 184, 0, 500, 228, 555, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 588, 187, 544, 0, 268, 204, 0, 0, 0,
	526, 571, 533, 563, 521, 554, 485, 543, 583, 511,
	551, 584, 176, 140, 120, 214, 269, 157, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 548, 578, 508, 550, 552, 592,
	474, 545, 0, 478, 481, 589, 574, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 525, 534, 560, 519,
	0, 0, 0, 0, 0, 0, 1439, 0, 501, 0,
	542, 0, 0, 0, 482, 479, 0, 0, 0, 0,
	523, 0, 0, 0, 484, 0, 502, 561, 0, 472,
	162, 565, 573, 520, 301, 577, 518, 517, 580, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 570, 498, 507, 143, 505, 249, 225,
	292, 541, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 130, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 477, 0, 270, 295, 315, 134,
	493, 566, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 208, 131, 171, 266,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 489,
	492, 487, 488, 536, 537, 585, 586, 587, 562, 483,
	0, 490, 491, 0, 568, 575, 576, 540, 116, 126,
	186, 312, 242, 158, 296, 473, 486, 147, 496, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 556, 557, 558, 559, 564, 572, 591,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305, 579,
	567, 0, 0, 522, 582, 495, 512, 590, 513, 516,
	553, 480, 535, 217, 510, 0, 499, 475, 506, 476,
	497, 524, 150, 528, 494, 569, 538, 581, 184, 0,
	500, 228, 555, 260, 142, 192, 190, 279, 155, 151,
	149, 141, 172, 196, 227, 276, 221, 588, 187, 544,
	0, 268, 204, 0, 0, 0, 526, 571, 533, 563,
	521, 554, 485, 543, 583, 511, 551, 584, 176, 140,
	120, 214, 269, 157, 62, 0, 0, 113, 114, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	548, 578, 508, 550, 552, 592, 474, 545, 0, 478,
	481, 589, 574, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 525, 534, 560, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 0, 542, 0, 0, 0,
	482, 479, 0, 0, 0, 0, 523, 0, 0, 0,
	484, 0, 502, 561, 0, 472, 162, 565, 573, 520,
	301, 577, 518, 517, 580, 239, 0, 273, 166, 183,
	132, 180, 117, 128, 0, 164, 213, 247, 251, 570,
	498, 507, 143, 505, 249, 225, 292, 541, 229, 248,
	188, 281, 240, 291, 302, 303, 277, 299, 311, 265,
	121, 275, 289, 137, 259, 0, 0, 0, 123, 287,
	272, 202, 177, 178, 122, 0, 245, 148, 160, 145,
	216, 284, 285, 144, 314, 129, 298, 125, 130, 297,
	209, 280, 288, 203, 195, 124, 286, 201, 194, 182,
	154, 168, 237, 191, 238, 169, 206, 205, 207, 0,
	477, 0, 270, 295, 315, 134, 493, 566, 278, 307,
	310, 0, 241, 135, 161, 153, 236, 159, 185, 306,
	308, 309, 208, 131, 171, 266, 181, 189, 244, 313,
	224, 250, 138, 294, 267, 489, 492, 487, 488, 536,
	537, 585, 586, 587, 562, 483, 0, 490, 491, 0,
	568, 575, 576, 540, 116, 126, 186, 312, 242, 158,
	296, 473, 486, 147, 496, 0, 0, 509, 514, 515,
	527, 529, 530, 531, 532, 539, 546, 547, 549, 556,
	557, 558, 559, 564, 572, 591, 118, 119, 127, 133,
	139, 146, 152, 156, 163, 167, 170, 173, 174, 175,
	179, 193, 197, 198, 199, 200, 210, 211, 212, 215,
	218, 219, 220, 222, 223, 226, 230, 231, 232, 233,
	234, 235, 243, 246, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 271, 274, 282, 283, 293,
	300, 304, 165, 290, 305, 579, 567, 0, 0, 522,
	582, 495, 512, 590, 513, 516, 553, 480, 535, 217,
	510, 0, 499, 475, 506, 476, 497, 524, 150, 528,
	494, 569, 538, 581, 184, 0, 500, 228, 555, 260,
	142, 192, 190, 279, 155, 151, 149, 141, 172, 196,
	227, 276, 221, 588, 187, 544, 0, 268, 204, 0,
	0, 0, 526, 571, 533, 563, 521, 554, 485, 543,
	583, 511, 551, 584, 176, 140, 120, 214, 269, 157,
	0, 0, 0, 113, 114, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 548, 578, 508, 550,
	552, 592, 474, 545, 0, 478, 481, 589, 574, 503,
	504, 0, 0, 0, 0, 0, 0, 0, 525, 534,
	560, 519, 0, 0, 0, 0, 0, 0, 1327, 0,
	501, 0, 542, 0, 0, 0, 482, 479, 0, 0,
	0, 0, 523, 0, 0, 0, 484, 0, 502, 561,
	0, 472, 162, 565, 573, 520, 301, 577, 518, 517,
	580, 239, 0, 273, 166, 183, 132, 180, 117, 128,
	0, 164, 213, 247, 251, 570, 498, 507, 143, 505,
	249, 225, 292, 541, 229, 248, 188, 281, 240, 291,
	302, 303, 277, 299, 311, 265, 121, 275, 289, 137,
	259, 0, 0, 0, 123, 287, 272, 202, 177, 178,
	122, 0, 245, 148, 160, 145, 216, 284, 285, 144,
	314, 129, 298, 125, 130, 297, 209, 280, 288, 203,
	195, 124, 286, 201, 194, 182, 154, 168, 237, 191,
	238, 169, 206, 205, 207, 0, 477, 0, 270, 295,
	315, 134, 493, 566, 278, 307, 310, 0, 241, 135,
	161, 153, 236, 159, 185, 306, 308, 309, 208, 131,
	171, 266, 181, 189, 244, 313, 224, 250, 138, 294,
	267, 489, 492, 487, 488, 536, 537, 585, 586, 587,
	562, 483, 0, 490, 491, 0, 568, 575, 576, 540,
	116, 126, 186, 312, 242, 158, 296, 473, 486, 147,
	496, 0, 0, 509, 514, 515, 527, 529, 530, 531,
	532, 539, 546, 547, 549, 556, 557, 558, 559, 564,
	572, 591, 118, 119, 127, 133, 139, 146, 152, 156,
	163, 167, 170, 173, 174, 175, 179, 193, 197, 198,
	199, 200, 210, 211, 212, 215, 218, 219, 220, 222,
	223, 226, 230, 231, 232, 233, 234, 235, 243, 246,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 271, 274, 282, 283, 293, 300, 304, 165, 290,
	305, 579, 567, 0, 0, 522, 582, 495, 512, 590,
	513, 516, 553, 480, 535, 217, 510, 0, 499, 475,
	506, 476, 497, 524, 150, 528, 494, 569, 538, 581,
	184, 0, 500, 228, 555, 260, 142, 192, 190, 279,
	155, 151, 149, 141, 172, 196, 227, 276, 221, 588,
	187, 544, 0, 268, 204, 0, 0, 0, 526, 571,
	533, 563, 521, 554, 485, 543, 583, 511, 551, 584,
	176, 140, 120, 214, 269, 157, 0, 0, 0, 113,
	114, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 548, 578, 508, 550, 552, 592, 474, 545,
	0, 478, 481, 589, 574, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 525, 534, 560, 519, 0, 0,
	0, 0, 0, 0, 1061, 0, 501, 0, 542, 0,
	0, 0, 482, 479, 0, 0, 0, 0, 523, 0,
	0, 0, 484, 0, 502, 561, 0, 472, 162, 565,
	573, 520, 301, 577, 518, 517, 580, 239, 0, 273,
	166, 183, 132, 180, 117, 128, 0, 164, 213, 247,
	251, 570, 498, 507, 143, 505, 249, 225, 292, 541,
	229, 248, 188, 281, 240, 291, 302, 303, 277, 299,
	311, 265, 121, 275, 289, 137, 259, 0, 0, 0,
	123, 287, 272, 202, 177, 178, 122, 0, 245, 148,
	160, 145, 216, 284, 285, 144, 314, 129, 298, 125,
	130, 297, 209, 280, 288, 203, 195, 124, 286, 201,
	194, 182, 154, 168, 237, 191, 238, 169, 206, 205,
	207, 0, 477, 0, 270, 295, 315, 134, 493, 566,
	278, 307, 310, 0, 241, 135, 161, 153, 236, 159,
	185, 306, 308, 309, 208, 131, 171, 266, 181, 189,
	244, 313, 224, 250, 138, 294, 267, 489, 492, 487,
	488, 536, 537, 585, 586, 587, 562, 483, 0, 490,
	491, 0, 568, 575, 576, 540, 116, 126, 186, 312,
	242, 158, 296, 473, 486, 147, 496, 0, 0, 509,
	514, 515, 527, 529, 530, 531, 532, 539, 546, 547,
	549, 556, 557, 558, 559, 564, 572, 591, 118, 119,
	127, 133, 139, 146, 152, 156, 163, 167, 170, 173,
	174, 175, 179, 193, 197, 198, 199, 200, 210, 211,
	212, 215, 218, 219, 220, 222, 223, 226, 230, 231,
	232, 233, 234, 235, 243, 246, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 271, 274, 282,
	283, 293, 300, 304, 165, 290, 305, 579, 567, 0,
	0, 522, 582, 495, 512, 590, 513, 516, 553, 480,
	535, 217, 510, 0, 499, 475, 506, 476, 497, 524,
	150, 528, 494, 569, 538, 581, 184, 0, 500, 228,
	555, 260, 142, 192, 190, 279, 155, 151, 149, 141,
	172, 196, 227, 276, 221, 588, 187, 544, 0, 268,
	204, 0, 0, 0, 526, 571, 533, 563, 521, 554,
	485, 543, 583, 511, 551, 584, 176, 140, 120, 214,
	269, 157, 0, 0, 0, 113, 114, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 548, 578,
	508, 550, 552, 592, 474, 545, 0, 478, 481, 589,
	574, 503, 504, 0, 0, 0, 0, 0, 0, 0,
	525, 534, 560, 519, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 0, 542, 0, 0, 0, 482, 479,
	0, 0, 0, 0, 523, 0, 0, 0, 484, 0,
	502, 561, 0, 472, 162, 565, 573, 520, 301, 577,
	518, 517, 580, 239, 0, 273, 166, 183, 132, 180,
	117, 128, 0, 164, 213, 247, 251, 570, 498, 507,
	143, 505, 249, 225, 292, 541, 229, 248, 188, 281,
	240, 291, 302, 303, 277, 299, 311, 265, 121, 275,
	289, 137, 259, 0, 0, 0, 123, 287, 272, 202,
	177, 178, 122, 0, 245, 148, 160, 145, 216, 284,
	285, 144, 314, 129, 298, 125, 130, 297, 209, 280,
	288, 203, 195, 124, 286, 201, 194, 182, 154, 168,
	237, 191, 238, 169, 206, 205, 207, 0, 477, 0,
	270, 295, 315, 134, 493, 566, 278, 307, 310, 0,
	241, 135, 161, 153, 236, 159, 185, 306, 308, 309,
	208, 131, 171, 266, 181, 189, 244, 313, 224, 250,
	138, 294, 267, 489, 492, 487, 488, 536, 537, 585,
	586, 587, 562, 483, 0, 490, 491, 0, 568, 575,
	576, 540, 116, 126, 186, 312, 242, 158, 296, 473,
	486, 147, 496, 0, 0, 509, 514, 515, 527, 529,
	530, 531, 532, 539, 546, 547, 549, 556, 557, 558,
	559, 564, 572, 591, 118, 119, 127, 133, 139, 146,
	152, 156, 163, 167, 170, 173, 174, 175, 179, 193,
	197, 198, 199, 200, 210, 211, 212, 215, 218, 219,
	220, 222, 223, 226, 230, 231, 232, 233, 234, 235,
	243, 246, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 271, 274, 282, 283, 293, 300, 304,
	165, 290, 305, 579, 567, 0, 0, 522, 582, 495,
	512, 590, 513, 516, 553, 480, 535, 217, 510, 0,
	499, 475, 506, 476, 497, 524, 150, 528, 494, 569,
	538, 581, 184, 0, 500, 228, 555, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 588, 187, 544, 0, 268, 204, 0, 0, 0,
	526, 571, 533, 563, 521, 554, 485, 543, 583, 511,
	551, 584, 176, 140, 120, 214, 269, 157, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 548, 578, 508, 550, 552, 592,
	474, 545, 0, 478, 481, 589, 574, 503, 504, 0,
	0, 0, 0, 0, 0, 0, 525, 534, 560, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 501, 0,
	542, 0, 0, 0, 482, 479, 0, 0, 0, 0,
	523, 0, 0, 0, 484, 0, 502, 561, 0, 472,
	162, 565, 573, 520, 301, 577, 518, 517, 580, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 570, 498, 507, 143, 505, 249, 225,
	292, 541, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 470, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 477, 0, 270, 295, 315, 134,
	493, 566, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 471, 469, 464, 463,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 489,
	492, 487, 488, 536, 537, 585, 586, 587, 562, 483,
	0, 490, 491, 0, 568, 575, 576, 540, 116, 126,
	186, 312, 242, 158, 296, 473, 486, 147, 496, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 556, 557, 558, 559, 564, 572, 591,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305, 579,
	567, 0, 0, 522, 582, 495, 512, 590, 513, 516,
	553, 480, 535, 217, 510, 0, 499, 475, 506, 476,
	497, 524, 150, 528, 494, 569, 538, 581, 184, 0,
	500, 228, 555, 260, 142, 192, 190, 279, 155, 151,
	149, 141, 172, 196, 227, 276, 221, 588, 187, 544,
	0, 268, 204, 0, 0, 0, 526, 571, 533, 563,
	521, 554, 485, 543, 583, 511, 551, 584, 176, 140,
	120, 214, 269, 157, 0, 0, 0, 113, 114, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	548, 578, 508, 550, 552, 592, 474, 545, 0, 478,
	481, 589, 574, 503, 504, 0, 0, 0, 0, 0,
	0, 0, 525, 534, 560, 519, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 0, 542, 0, 0, 0,
	482, 479, 0, 0, 0, 0, 523, 0, 0, 0,
	484, 0, 502, 561, 0, 472, 162, 565, 573, 520,
	301, 577, 518, 517, 580, 239, 0, 273, 166, 183,
	132, 180, 117, 128, 0, 164, 213, 247, 251, 570,
	498, 507, 143, 505, 249, 225, 292, 541, 229, 248,
	188, 281, 240, 291, 302, 303, 277, 299, 311, 265,
	121, 275, 814, 137, 259, 0, 0, 0, 123, 287,
	272, 202, 177, 178, 122, 0, 245, 148, 160, 145,
	216, 284, 285, 144, 314, 129, 298, 125, 470, 297,
	209, 280, 288, 203, 195, 124, 286, 201, 194, 182,
	154, 168, 237, 191, 238, 169, 206, 205, 207, 0,
	477, 0, 270, 295, 315, 134, 493, 566, 278, 307,
	310, 0, 241, 135, 161, 153, 236, 159, 185, 306,
	308, 309, 471, 469, 464, 463, 181, 189, 244, 313,
	224, 250, 138, 294, 267, 489, 492, 487, 488, 536,
	537, 585, 586, 587, 562, 483, 0, 490, 491, 0,
	568, 575, 576, 540, 116, 126, 186, 312, 242, 158,
	296, 473, 486, 147, 496, 0, 0, 509, 514, 515,
	527, 529, 530, 531, 532, 539, 546, 547, 549, 556,
	557, 558, 559, 564, 572, 591, 118, 119, 127, 133,
	139, 146, 152, 156, 163, 167, 170, 173, 174, 175,
	179, 193, 197, 198, 199, 200, 210, 211, 212, 215,
	218, 219, 220, 222, 223, 226, 230, 231, 232, 233,
	234, 235, 243, 246, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 271, 274, 282, 283, 293,
	300, 304, 165, 290, 305, 579, 567, 0, 0, 522,
	582, 495, 512, 590, 513, 516, 553, 480, 535, 217,
	510, 0, 499, 475, 506, 476, 497, 524, 150, 528,
	494, 569, 538, 581, 184, 0, 500, 228, 555, 260,
	142, 192, 190, 279, 155, 151, 149, 141, 172, 196,
	227, 276, 221, 588, 187, 544, 0, 268, 204, 0,
	0, 0, 526, 571, 533, 563, 521, 554, 485, 543,
	583, 511, 551, 584, 176, 140, 120, 214, 269, 157,
	0, 0, 0, 113, 114, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 548, 578, 508, 550,
	552, 592, 474, 545, 0, 478, 481, 589, 574, 503,
	504, 0, 0, 0, 0, 0, 0, 0, 525, 534,
	560, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	501, 0, 542, 0, 0, 0, 482, 479, 0, 0,
	0, 0, 523, 0, 0, 0, 484, 0, 502, 561,
	0, 472, 162, 565, 573, 520, 301, 577, 518, 517,
	580, 239, 0, 273, 166, 183, 132, 180, 117, 128,
	0, 164, 213, 247, 251, 570, 498, 507, 143, 505,
	249, 225, 292, 541, 229, 248, 188, 281, 240, 291,
	302, 303, 277, 299, 311, 265, 121, 275, 461, 137,
	259, 0, 0, 0, 123, 287, 272, 202, 177, 178,
	122, 0, 245, 148, 160, 145, 216, 284, 285, 144,
	314, 129, 298, 125, 470, 297, 209, 280, 288, 203,
	195, 124, 286, 201, 194, 182, 154, 168, 237, 191,
	238, 169, 206, 205, 207, 0, 477, 0, 270, 295,
	315, 134, 493, 566, 278, 307, 310, 0, 241, 135,
	161, 153, 236, 159, 185, 306, 308, 309, 471, 469,
	464, 463, 181, 189, 244, 313, 224, 250, 138, 294,
	267, 489, 492, 487, 488, 536, 537, 585, 586, 587,
	562, 483, 0, 490, 491, 0, 568, 575, 576, 540,
	116, 126, 186, 312, 242, 158, 296, 473, 486, 147,
	496, 0, 0, 509, 514, 515, 527, 529, 530, 531,
	532, 539, 546, 547, 549, 556, 557, 558, 559, 564,
	572, 591, 118, 119, 127, 133, 139, 146, 152, 156,
	163, 167, 170, 173, 174, 175, 179, 193, 197, 198,
	199, 200, 210, 211, 212, 215, 218, 219, 220, 222,
	223, 226, 230, 231, 232, 233, 234, 235, 243, 246,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 271, 274, 282, 283, 293, 300, 304, 165, 290,
	305, 217, 0, 0, 999, 0, 367, 0, 0, 0,
	150, 0, 366, 0, 0, 0, 184, 0, 1000, 228,
	0, 260, 142, 192, 190, 279, 155, 151, 149, 141,
	172, 196, 227, 276, 221, 410, 187, 0, 0, 268,
	204, 0, 0, 0, 0, 0, 401, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 140, 120, 214,
	269, 157, 62, 0, 0, 113, 114, 115, 388, 387,
	390, 391, 392, 393, 0, 0, 136, 389, 394, 395,
	396, 0, 0, 0, 0, 364, 381, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 379,
	451, 0, 0, 0, 424, 0, 380, 0, 0, 373,
	374, 376, 375, 377, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 423, 0, 0, 301, 0,
	0, 421, 0, 239, 0, 273, 166, 183, 132, 180,
	117, 128, 0, 164, 213, 247, 251, 0, 0, 0,
	143, 0, 249, 225, 292, 0, 229, 248, 188, 281,
	240, 291, 302, 303, 277, 299, 311, 265, 121, 275,
	289, 137, 259, 0, 0, 0, 123, 287, 272, 202,
	177, 178, 122, 0, 245, 148, 160, 145, 216, 284,
	285, 144, 314, 129, 298, 125, 130, 297, 209, 280,
	288, 203, 195, 124, 286, 201, 194, 182, 154, 168,
	237, 191, 238, 169, 206, 205, 207, 0, 0, 0,
	270, 295, 315, 134, 0, 0, 278, 307, 310, 0,
	241, 135, 161, 153, 236, 159, 185, 306, 308, 309,
	208, 131, 171, 266, 181, 189, 244, 313, 224, 250,
	138, 294, 267, 411, 422, 417, 418, 415, 416, 414,
	413, 412, 425, 403, 404, 405, 406, 408, 0, 419,
	420, 407, 116, 126, 186, 312, 242, 158, 296, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 127, 133, 139, 146,
	152, 156, 163, 167, 170, 173, 174, 175, 179, 193,
	197, 198, 199, 200, 210, 211, 212, 215, 218, 219,
	220, 222, 223, 226, 230, 231, 232, 233, 234, 235,
	243, 246, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 271, 274, 282, 283, 293, 300, 304,
	165, 290, 305, 217, 0, 0, 0, 0, 367, 0,
	0, 0, 150, 0, 366, 0, 0, 0, 184, 0,
	0, 228, 0, 260, 142, 192, 190, 279, 155, 151,
	149, 141, 172, 196, 227, 276, 221, 410, 187, 0,
	0, 268, 204, 0, 0, 0, 0, 0, 401, 402,
	0, 0, 0, 0, 0, 0, 1106, 0, 176, 140,
	120, 214, 269, 157, 62, 0, 0, 113, 114, 115,
	388, 387, 390, 391, 392, 393, 0, 0, 136, 389,
	394, 395, 396, 1107, 0, 0, 0, 364, 381, 0,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 379, 0, 0, 0, 0, 424, 0, 380, 0,
	0, 373, 374, 376, 375, 377, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 423, 0, 0,
	301, 0, 0, 421, 0, 239, 0, 273, 166, 183,
	132, 180, 117, 128, 0, 164, 213, 247, 251, 0,
	0, 0, 143, 0, 249, 225, 292, 0, 229, 248,
	188, 281, 240, 291, 302, 303, 277, 299, 311, 265,
	121, 275, 289, 137, 259, 0, 0, 0, 123, 287,
	272, 202, 177, 178, 122, 0, 245, 148, 160, 145,
	216, 284, 285, 144, 314, 129, 298, 125, 130, 297,
	209, 280, 288, 203, 195, 124, 286, 201, 194, 182,
	154, 168, 237, 191, 238, 169, 206, 205, 207, 0,
	0, 0, 270, 295, 315, 134, 0, 0, 278, 307,
	310, 0, 241, 135, 161, 153, 236, 159, 185, 306,
	308, 309, 208, 131, 171, 266, 181, 189, 244, 313,
	224, 250, 138, 294, 267, 411, 422, 417, 418, 415,
	416, 414, 413, 412, 425, 403, 404, 405, 406, 408,
	0, 419, 420, 407, 116, 126, 186, 312, 242, 158,
	296, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 119, 127, 133,
	139, 146, 152, 156, 163, 167, 170, 173, 174, 175,
	179, 193, 197, 198, 199, 200, 210, 211, 212, 215,
	218, 219, 220, 222, 223, 226, 230, 231, 232, 233,
	234, 235, 243, 246, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 271, 274, 282, 283, 293,
	300, 304, 165, 290, 305, 217, 0, 0, 0, 0,
	367, 0, 0, 0, 150, 0, 366, 0, 0, 0,
	184, 0, 0, 228, 0, 260, 142, 192, 190, 279,
	155, 151, 149, 141, 172, 196, 227, 276, 221, 410,
	187, 0, 0, 268, 204, 0, 0, 0, 0, 0,
	401, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 140, 120, 214, 269, 157, 62, 0, 439, 113,
	114, 115, 388, 387, 390, 391, 392, 393, 0, 0,
	136, 389, 394, 395, 396, 0, 0, 0, 0, 364,
	381, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 378, 379, 0, 0, 0, 0, 424, 0,
	380, 0, 0, 373, 374, 376, 375, 377, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 423,
	0, 0, 301, 0, 0, 421, 0, 239, 0, 273,
	166, 183, 132, 180, 117, 128, 0, 164, 213, 247,
	251, 0, 0, 0, 143, 0, 249, 225, 292, 0,
	229, 248, 188, 281, 240, 291, 302, 303, 277, 299,
	311, 265, 121, 275, 289, 137, 259, 0, 0, 0,
	123, 287, 272, 202, 177, 178, 122, 0, 245, 148,
	160, 145, 216, 284, 285, 144, 314, 129, 298, 125,
	130, 297, 209, 280, 288, 203, 195, 124, 286, 201,
	194, 182, 154, 168, 237, 191, 238, 169, 206, 205,
	207, 0, 0, 0, 270, 295, 315, 134, 0, 0,
	278, 307, 310, 0, 241, 135, 161, 153, 236, 159,
	185, 306, 308, 309, 208, 131, 171, 266, 181, 189,
	244, 313, 224, 250, 138, 294, 267, 411, 422, 417,
	418, 415, 416, 414, 413, 412, 425, 403, 404, 405,
	406, 408, 0, 419, 420, 407, 116, 126, 186, 312,
	242, 158, 296, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 119,
	127, 133, 139, 146, 152, 156, 163, 167, 170, 173,
	174, 175, 179, 193, 197, 198, 199, 200, 210, 211,
	212, 215, 218, 219, 220, 222, 223, 226, 230, 231,
	232, 233, 234, 235, 243, 246, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 271, 274, 282,
	283, 293, 300, 304, 165, 290, 305, 217, 0, 0,
	0, 0, 367, 0, 0, 0, 150, 0, 366, 0,
	0, 0, 184, 0, 0, 228, 0, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 410, 187, 0, 0, 268, 204, 0, 0, 0,
	0, 0, 401, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 140, 120, 214, 269, 157, 62, 0,
	0, 113, 114, 115, 388, 387, 390, 391, 392, 393,
	0, 0, 136, 389, 394, 395, 396, 0, 0, 0,
	0, 364, 381, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 378, 379, 451, 0, 0, 0,
	424, 0, 380, 0, 0, 373, 374, 376, 375, 377,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 423, 0, 0, 301, 0, 0, 421, 0, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 0, 0, 0, 143, 0, 249, 225,
	292, 0, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 130, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 0, 0, 270, 295, 315, 134,
	0, 0, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 208, 131, 171, 266,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 411,
	422, 417, 418, 415, 416, 414, 413, 412, 425, 403,
	404, 405, 406, 408, 0, 419, 420, 407, 116, 126,
	186, 312, 242, 158, 296, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305, 217,
	0, 0, 0, 0, 367, 0, 0, 0, 150, 0,
	366, 0, 0, 0, 184, 0, 0, 228, 0, 260,
	142, 192, 190, 279, 155, 151, 149, 141, 172, 196,
	227, 276, 221, 410, 187, 0, 0, 268, 204, 0,
	0, 0, 0, 0, 401, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 140, 120, 214, 269, 157,
	62, 0, 0, 113, 114, 115, 388, 1017, 390, 391,
	392, 393, 0, 0, 136, 389, 394, 395, 396, 0,
	0, 0, 0, 364, 381, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 378, 379, 451, 0,
	0, 0, 424, 0, 380, 0, 0, 373, 374, 376,
	375, 377, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 423, 0, 0, 301, 0, 0, 421,
	0, 239, 0, 273, 166, 183, 132, 180, 117, 128,
	0, 164, 213, 247, 251, 0, 0, 0, 143, 0,
	249, 225, 292, 0, 229, 248, 188, 281, 240, 291,
	302, 303, 277, 299, 311, 265, 121, 275, 289, 137,
	259, 0, 0, 0, 123, 287, 272, 202, 177, 178,
	122, 0, 245, 148, 160, 145, 216, 284, 285, 144,
	314, 129, 298, 125, 130, 297, 209, 280, 288, 203,
	195, 124, 286, 201, 194, 182, 154, 168, 237, 191,
	238, 169, 206, 205, 207, 0, 0, 0, 270, 295,
	315, 134, 0, 0, 278, 307, 310, 0, 241, 135,
	161, 153, 236, 159, 185, 306, 308, 309, 208, 131,
	171, 266, 181, 189, 244, 313, 224, 250, 138, 294,
	267, 411, 422, 417, 418, 415, 416, 414, 413, 412,
	425, 403, 404, 405, 406, 408, 0, 419, 420, 407,
	116, 126, 186, 312, 242, 158, 296, 0, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 119, 127, 133, 139, 146, 152, 156,
	163, 167, 170, 173, 174, 175, 179, 193, 197, 198,
	199, 200, 210, 211, 212, 215, 218, 219, 220, 222,
	223, 226, 230, 231, 232, 233, 234, 235, 243, 246,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 271, 274, 282, 283, 293, 300, 304, 165, 290,
	305, 217, 0, 0, 0, 0, 367, 0, 0, 0,
	150, 0, 366, 0, 0, 0, 184, 0, 0, 228,
	0, 260, 142, 192, 190, 279, 155, 151, 149, 141,
	172, 196, 227, 276, 221, 410, 187, 0, 0, 268,
	204, 0, 0, 0, 0, 0, 401, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 140, 120, 214,
	269, 157, 62, 0, 0, 113, 114, 115, 388, 1014,
	390, 391, 392, 393, 0, 0, 136, 389, 394, 395,
	396, 0, 0, 0, 0, 364, 381, 0, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 379,
	451, 0, 0, 0, 424, 0, 380, 0, 0, 373,
	374, 376, 375, 377, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 423, 0, 0, 301, 0,
	0, 421, 0, 239, 0, 273, 166, 183, 132, 180,
	117, 128, 0, 164, 213, 247, 251, 0, 0, 0,
	143, 0, 249, 225, 292, 0, 229, 248, 188, 281,
	240, 291, 302, 303, 277, 299, 311, 265, 121, 275,
	289, 137, 259, 0, 0, 0, 123, 287, 272, 202,
	177, 178, 122, 0, 245, 148, 160, 145, 216, 284,
	285, 144, 314, 129, 298, 125, 130, 297, 209, 280,
	288, 203, 195, 124, 286, 201, 194, 182, 154, 168,
	237, 191, 238, 169, 206, 205, 207, 0, 0, 0,
	270, 295, 315, 134, 0, 0, 278, 307, 310, 0,
	241, 135, 161, 153, 236, 159, 185, 306, 308, 309,
	208, 131, 171, 266, 181, 189, 244, 313, 224, 250,
	138, 294, 267, 411, 422, 417, 418, 415, 416, 414,
	413, 412, 425, 403, 404, 405, 406, 408, 0, 419,
	420, 407, 116, 126, 186, 312, 242, 158, 296, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 127, 133, 139, 146,
	152, 156, 163, 167, 170, 173, 174, 175, 179, 193,
	197, 198, 199, 200, 210, 211, 212, 215, 218, 219,
	220, 222, 223, 226, 230, 231, 232, 233, 234, 235,
	243, 246, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 271, 274, 282, 283, 293, 300, 304,
	165, 290, 305, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 367, 0, 0, 0, 150, 0, 366, 0, 0,
	0, 184, 0, 0, 228, 0, 260, 142, 192, 190,
	279, 155, 151, 149, 141, 172, 196, 227, 276, 221,
	410, 187, 0, 0, 268, 204, 0, 0, 0, 0,
	0, 401, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 140, 120, 214, 269, 157, 62, 0, 0,
	113, 114, 115, 388, 387, 390, 391, 392, 393, 0,
	0, 136, 389, 394, 395, 396, 0, 0, 0, 0,
	364, 381, 0, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 0, 0, 0, 0, 424,
	0, 380, 0, 0, 373, 374, 376, 375, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	423, 0, 0, 301, 0, 0, 421, 0, 239, 0,
	273, 166, 183, 132, 180, 117, 128, 0, 164, 213,
	247, 251, 0, 0, 0, 143, 0, 249, 225, 292,
	0, 229, 248, 188, 281, 240, 291, 302, 303, 277,
	299, 311, 265, 121, 275, 289, 137, 259, 0, 0,
	0, 123, 287, 272, 202, 177, 178, 122, 0, 245,
	148, 160, 145, 216, 284, 285, 144, 314, 129, 298,
	125, 130, 297, 209, 280, 288, 203, 195, 124, 286,
	201, 194, 182, 154, 168, 237, 191, 238, 169, 206,
	205, 207, 0, 0, 0, 270, 295, 315, 134, 0,
	0, 278, 307, 310, 0, 241, 135, 161, 153, 236,
	159, 185, 306, 308, 309, 208, 131, 171, 266, 181,
	189, 244, 313, 224, 250, 138, 294, 267, 411, 422,
	417, 418, 415, 416, 414, 413, 412, 425, 403, 404,
	405, 406, 408, 0, 419, 420, 407, 116, 126, 186,
	312, 242, 158, 296, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	119, 127, 133, 139, 146, 152, 156, 163, 167, 170,
	173, 174, 175, 179, 193, 197, 198, 199, 200, 210,
	211, 212, 215, 218, 219, 220, 222, 223, 226, 230,
	231, 232, 233, 234, 235, 243, 246, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 271, 274,
	282, 283, 293, 300, 304, 165, 290, 305, 217, 0,
	0, 0, 0, 367, 0, 0, 0, 150, 0, 366,
	0, 0, 0, 184, 0, 0, 228, 0, 260, 142,
	192, 190, 279, 155, 151, 149, 141, 172, 196, 227,
	276, 221, 410, 187, 0, 0, 268, 204, 0, 0,
	0, 0, 0, 401, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 140, 120, 214, 269, 157, 62,
	0, 0, 113, 114, 115, 388, 387, 390, 391, 392,
	393, 0, 0, 136, 389, 394, 395, 396, 0, 0,
	0, 0, 364, 381, 0, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 0, 0, 0,
	0, 424, 0, 380, 0, 0, 373, 374, 376, 375,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 423, 0, 0, 301, 0, 0, 421, 0,
	239, 0, 273, 166, 183, 132, 180, 117, 128, 0,
	164, 213, 247, 251, 0, 0, 0, 143, 0, 249,
	225, 292, 0, 229, 248, 188, 281, 240, 291, 302,
	303, 277, 299, 311, 265, 121, 275, 289, 137, 259,
	0, 0, 0, 123, 287, 272, 202, 177, 178, 122,
	0, 245, 148, 160, 145, 216, 284, 285, 144, 314,
	129, 298, 125, 130, 297, 209, 280, 288, 203, 195,
	124, 286, 201, 194, 182, 154, 168, 237, 191, 238,
	169, 206, 205, 207, 0, 0, 0, 270, 295, 315,
	134, 0, 0, 278, 307, 310, 0, 241, 135, 161,
	153, 236, 159, 185, 306, 308, 309, 208, 131, 171,
	266, 181, 189, 244, 313, 224, 250, 138, 294, 267,
	411, 422, 417, 418, 415, 416, 414, 413, 412, 425,
	403, 404, 405, 406, 408, 0, 419, 420, 407, 116,
	126, 186, 312, 242, 158, 296, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 127, 133, 139, 146, 152, 156, 163,
	167, 170, 173, 174, 175, 179, 193, 197, 198, 199,
	200, 210, 211, 212, 215, 218, 219, 220, 222, 223,
	226, 230, 231, 232, 233, 234, 235, 243, 246, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	271, 274, 282, 283, 293, 300, 304, 165, 290, 305,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 184, 0, 0, 228, 0,
	260, 142, 192, 190, 279, 155, 151, 149, 141, 172,
	196, 227, 276, 221, 410, 187, 0, 0, 268, 204,
	0, 0, 0, 0, 0, 401, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 140, 120, 214, 269,
	157, 62, 0, 0, 113, 114, 115, 388, 387, 390,
	391, 392, 393, 0, 0, 136, 389, 394, 395, 396,
	0, 0, 0, 0, 0, 381, 0, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 0,
	0, 0, 0, 424, 0, 380, 0, 0, 373, 374,
	376, 375, 377, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 423, 0, 0, 301, 0, 0,
	421, 0, 239, 0, 273, 166, 183, 132, 180, 117,
	128, 0, 164, 213, 247, 251, 0, 0, 0, 143,
	0, 249, 225, 292, 1745, 229, 248, 188, 281, 240,
	291, 302, 303, 277, 299, 311, 265, 121, 275, 289,
	137, 259, 0, 0, 0, 123, 287, 272, 202, 177,
	178, 122, 0, 245, 148, 160, 145, 216, 284, 285,
	144, 314, 129, 298, 125, 130, 297, 209, 280, 288,
	203, 195, 124, 286, 201, 194, 182, 154, 168, 237,
	191, 238, 169, 206, 205, 207, 0, 0, 0, 270,
	295, 315, 134, 0, 0, 278, 307, 310, 0, 241,
	135, 161, 153, 236, 159, 185, 306, 308, 309, 208,
	131, 171, 266, 181, 189, 244, 313, 224, 250, 138,
	294, 267, 411, 422, 417, 418, 415, 416, 414, 413,
	412, 425, 403, 404, 405, 406, 408, 0, 419, 420,
	407, 116, 126, 186, 312, 242, 158, 296, 0, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 119, 127, 133, 139, 146, 152,
	156, 163, 167, 170, 173, 174, 175, 179, 193, 197,
	198, 199, 200, 210, 211, 212, 215, 218, 219, 220,
	222, 223, 226, 230, 231, 232, 233, 234, 235, 243,
	246, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 271, 274, 282, 283, 293, 300, 304, 165,
	290, 305, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 184, 0, 0,
	228, 0, 260, 142, 192, 190, 279, 155, 151, 149,
	141, 172, 196, 227, 276, 221, 410, 187, 0, 0,
	268, 204, 0, 0, 0, 0, 0, 401, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 140, 120,
	214, 269, 157, 62, 0, 439, 113, 114, 115, 388,
	387, 390, 391, 392, 393, 0, 0, 136, 389, 394,
	395, 396, 0, 0, 0, 0, 0, 381, 0, 409,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	379, 0, 0, 0, 0, 424, 0, 380, 0, 0,
	373, 374, 376, 375, 377, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 423, 0, 0, 301,
	0, 0, 421, 0, 239, 0, 273, 166, 183, 132,
	180, 117, 128, 0, 164, 213, 247, 251, 0, 0,
	0, 143, 0, 249, 225, 292, 0, 229, 248, 188,
	281, 240, 291, 302, 303, 277, 299, 311, 265, 121,
	275, 289, 137, 259, 0, 0, 0, 123, 287, 272,
	202, 177, 178, 122, 0, 245, 148, 160, 145, 216,
	284, 285, 144, 314, 129, 298, 125, 130, 297, 209,
	280, 288, 203, 195, 124, 286, 201, 194, 182, 154,
	168, 237, 191, 238, 169, 206, 205, 207, 0, 0,
	0, 270, 295, 315, 134, 0, 0, 278, 307, 310,
	0, 241, 135, 161, 153, 236, 159, 185, 306, 308,
	309, 208, 131, 171, 266, 181, 189, 244, 313, 224,
	250, 138, 294, 267, 411, 422, 417, 418, 415, 416,
	414, 413, 412, 425, 403, 404, 405, 406, 408, 0,
	419, 420, 407, 116, 126, 186, 312, 242, 158, 296,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 119, 127, 133, 139,
	146, 152, 156, 163, 167, 170, 173, 174, 175, 179,
	193, 197, 198, 199, 200, 210, 211, 212, 215, 218,
	219, 220, 222, 223, 226, 230, 231, 232, 233, 234,
	235, 243, 246, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 271, 274, 282, 283, 293, 300,
	304, 165, 290, 305, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 184,
	0, 0, 228, 0, 260, 142, 192, 190, 279, 155,
	151, 149, 141, 172, 196, 227, 276, 221, 410, 187,
	0, 0, 268, 204, 0, 0, 0, 0, 0, 401,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	140, 120, 214, 269, 157, 62, 0, 0, 113, 114,
	115, 388, 387, 390, 391, 392, 393, 0, 0, 136,
	389, 394, 395, 396, 0, 0, 0, 0, 0, 381,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 0, 0, 0, 0, 424, 0, 380,
	0, 0, 373, 374, 376, 375, 377, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 423, 0,
	0, 301, 0, 0, 421, 0, 239, 0, 273, 166,
	183, 132, 180, 117, 128, 0, 164, 213, 247, 251,
	0, 0, 0, 143, 0, 249, 225, 292, 0, 229,
	248, 188, 281, 240, 291, 302, 303, 277, 299, 311,
	265, 121, 275, 289, 137, 259, 0, 0, 0, 123,
	287, 272, 202, 177, 178, 122, 0, 245, 148, 160,
	145, 216, 284, 285, 144, 314, 129, 298, 125, 130,
	297, 209, 280, 288, 203, 195, 124, 286, 201, 194,
	182, 154, 168, 237, 191, 238, 169, 206, 205, 207,
	0, 0, 0, 270, 295, 315, 134, 0, 0, 278,
	307, 310, 0, 241, 135, 161, 153, 236, 159, 185,
	306, 308, 309, 208, 131, 171, 266, 181, 189, 244,
	313, 224, 250, 138, 294, 267, 411, 422, 417, 418,
	415, 416, 414, 413, 412, 425, 403, 404, 405, 406,
	408, 0, 419, 420, 407, 116, 126, 186, 312, 242,
	158, 296, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 119, 127,
	133, 139, 146, 152, 156, 163, 167, 170, 173, 174,
	175, 179, 193, 197, 198, 199, 200, 210, 211, 212,
	215, 218, 219, 220, 222, 223, 226, 230, 231, 232,
	233, 234, 235, 243, 246, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 271, 274, 282, 283,
	293, 300, 304, 165, 290, 305, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 184, 0, 0, 228, 0, 260, 142, 192, 190,
	279, 155, 151, 149, 141, 172, 196, 227, 276, 221,
	0, 187, 0, 0, 268, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 140, 120, 214, 269, 157, 0, 0, 0,
	113, 114, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	694, 704, 705, 697, 698, 699, 700, 701, 702, 703,
	696, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 301, 0, 0, 0, 0, 239, 0,
	273, 166, 183, 132, 180, 117, 128, 0, 164, 213,
	247, 251, 0, 0, 0, 143, 0, 249, 225, 292,
	0, 229, 248, 188, 281, 240, 291, 302, 303, 277,
	299, 311, 265, 121, 275, 289, 137, 259, 0, 0,
	0, 123, 287, 272, 202, 177, 178, 122, 0, 245,
	148, 160, 145, 216, 284, 285, 144, 314, 129, 298,
	125, 130, 297, 209, 280, 288, 203, 195, 124, 286,
	201, 194, 182, 154, 168, 237, 191, 238, 169, 206,
	205, 207, 0, 0, 0, 270, 295, 315, 134, 0,
	0, 278, 307, 310, 0, 241, 135, 161, 153, 236,
	159, 185, 306, 308, 309, 208, 131, 171, 266, 181,
	189, 244, 313, 224, 250, 138, 294, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 126, 186,
	312, 242, 158, 296, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	119, 127, 133, 139, 146, 152, 156, 163, 167, 170,
	173, 174, 175, 179, 193, 197, 198, 199, 200, 210,
	211, 212, 215, 218, 219, 220, 222, 223, 226, 230,
	231, 232, 233, 234, 235, 243, 246, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 271, 274,
	282, 283, 293, 300, 304, 165, 290, 305, 217, 0,
	0, 0, 791, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 184, 0, 0, 228, 0, 260, 142,
	192, 190, 279, 155, 151, 149, 141, 172, 196, 227,
	276, 221, 0, 187, 0, 0, 268, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 140, 120, 214, 269, 157, 0,
	0, 0, 113, 114, 115, 0, 793, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 684,
	685, 683, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 301, 0, 0, 0, 0,
	239, 0, 273, 166, 183, 132, 180, 117, 128, 0,
	164, 213, 247, 251, 0, 0, 0, 143, 0, 249,
	225, 292, 0, 229, 248, 188, 281, 240, 291, 302,
	303, 277, 299, 311, 265, 121, 275, 289, 137, 259,
	0, 0, 0, 123, 287, 272, 202, 177, 178, 122,
	0, 245, 148, 160, 145, 216, 284, 285, 144, 314,
	129, 298, 125, 130, 297, 209, 280, 288, 203, 195,
	124, 286, 201, 194, 182, 154, 168, 237, 191, 238,
	169, 206, 205, 207, 0, 0, 0, 270, 295, 315,
	134, 0, 0, 278, 307, 310, 0, 241, 135, 161,
	153, 236, 159, 185, 306, 308, 309, 208, 131, 171,
	266, 181, 189, 244, 313, 224, 250, 138, 294, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	126, 186, 312, 242, 158, 296, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 127, 133, 139, 146, 152, 156, 163,
	167, 170, 173, 174, 175, 179, 193, 197, 198, 199,
	200, 210, 211, 212, 215, 218, 219, 220, 222, 223,
	226, 230, 231, 232, 233, 234, 235, 243, 246, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	271, 274, 282, 283, 293, 300, 304, 165, 290, 305,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	1131, 0, 0, 0, 0, 184, 0, 0, 228, 0,
	260, 142, 192, 190, 279, 155, 151, 149, 141, 172,
	196, 227, 276, 221, 0, 187, 0, 0, 268, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 140, 120, 214, 269,
	157, 0, 0, 0, 113, 114, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 1130, 301, 0, 0,
	0, 1126, 1123, 0, 1124, 1125, 183, 600, 180, 117,
	128, 1121, 1128, 213, 247, 251, 0, 0, 0, 143,
	0, 249, 225, 292, 0, 229, 248, 188, 281, 240,
	291, 302, 303, 277, 299, 311, 265, 121, 275, 289,
	137, 259, 0, 0, 0, 123, 287, 272, 202, 177,
	178, 122, 0, 245, 148, 160, 145, 216, 284, 285,
	144, 314, 129, 298, 125, 130, 297, 209, 280, 288,
	203, 195, 124, 286, 201, 194, 182, 154, 168, 237,
	191, 238, 169, 206, 205, 207, 0, 0, 0, 270,
	295, 315, 134, 0, 0, 278, 307, 310, 0, 241,
	135, 161, 153, 236, 159, 185, 306, 308, 309, 208,
	131, 171, 266, 181, 189, 244, 313, 224, 250, 138,
	294, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 126, 186, 312, 242, 158, 296, 0, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 119, 127, 133, 139, 146, 152,
	156, 163, 167, 170, 173, 174, 175, 179, 193, 197,
	198, 199, 200, 210, 211, 212, 215, 218, 219, 220,
	222, 223, 226, 230, 231, 232, 233, 234, 235, 243,
	246, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 271, 274, 282, 283, 293, 300, 304, 165,
	290, 305, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	184, 0, 0, 228, 0, 260, 142, 192, 190, 279,
	155, 151, 149, 141, 172, 196, 227, 276, 221, 0,
	187, 0, 0, 268, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 140, 120, 214, 269, 157, 62, 0, 439, 113,
	114, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 301, 0, 0, 0, 0, 239, 0, 273,
	166, 183, 132, 180, 117, 128, 0, 164, 213, 247,
	251, 0, 0, 0, 143, 0, 249, 225, 292, 0,
	229, 248, 188, 281, 240, 291, 302, 303, 277, 299,
	311, 265, 121, 275, 289, 137, 259, 0, 0, 0,
	123, 287, 272, 202, 177, 178, 122, 0, 245, 148,
	160, 145, 216, 284, 285, 144, 314, 129, 298, 125,
	130, 297, 209, 280, 288, 203, 195, 124, 286, 201,
	194, 182, 154, 168, 237, 191, 238, 169, 206, 205,
	207, 0, 0, 0, 270, 295, 315, 134, 0, 0,
	278, 307, 310, 0, 241, 135, 161, 153, 236, 159,
	185, 306, 308, 309, 208, 131, 171, 266, 181, 189,
	244, 313, 224, 250, 138, 294, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 126, 186, 312,
	242, 158, 296, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 119,
	127, 133, 139, 146, 152, 156, 163, 167, 170, 173,
	174, 175, 179, 193, 197, 198, 199, 200, 210, 211,
	212, 215, 218, 219, 220, 222, 223, 226, 230, 231,
	232, 233, 234, 235, 243, 246, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 271, 274, 282,
	283, 293, 300, 304, 165, 290, 305, 217, 0, 0,
	0, 1088, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 184, 0, 0, 228, 0, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 0, 187, 0, 0, 268, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 140, 120, 214, 269, 157, 0, 0,
	0, 113, 114, 115, 0, 1090, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 301, 0, 0, 0, 0, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 0, 0, 0, 143, 0, 249, 225,
	292, 0, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 130, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 0, 0, 270, 295, 315, 134,
	0, 0, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 208, 131, 171, 266,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 126,
	186, 312, 242, 158, 296, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 184, 0, 0,
	228, 0, 260, 142, 192, 190, 279, 155, 151, 149,
	141, 172, 196, 227, 276, 221, 0, 187, 0, 0,
	268, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 140, 120,
	214, 269, 157, 62, 0, 0, 113, 114, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 301,
	0, 0, 0, 0, 239, 0, 273, 166, 183, 132,
	180, 117, 128, 0, 164, 213, 247, 251, 0, 0,
	0, 143, 0, 249, 225, 292, 0, 229, 248, 188,
	281, 240, 291, 302, 303, 277, 299, 311, 265, 121,
	275, 289, 137, 259, 0, 0, 0, 123, 287, 272,
	202, 177, 178, 122, 0, 245, 148, 160, 145, 216,
	284, 285, 144, 314, 129, 298, 125, 130, 297, 209,
	280, 288, 203, 195, 124, 286, 201, 194, 182, 154,
	168, 237, 191, 238, 169, 206, 205, 207, 0, 0,
	0, 270, 295, 315, 134, 0, 0, 278, 307, 310,
	0, 241, 135, 161, 153, 236, 159, 185, 306, 308,
	309, 208, 131, 171, 266, 181, 189, 244, 313, 224,
	250, 138, 294, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 126, 186, 312, 242, 158, 296,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 119, 127, 133, 139,
	146, 152, 156, 163, 167, 170, 173, 174, 175, 179,
	193, 197, 198, 199, 200, 210, 211, 212, 215, 218,
	219, 220, 222, 223, 226, 230, 231, 232, 233, 234,
	235, 243, 246, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 271, 274, 282, 283, 293, 300,
	304, 165, 290, 305, 217, 0, 0, 0, 1088, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 184,
	0, 0, 228, 0, 260, 142, 192, 190, 279, 155,
	151, 149, 141, 172, 196, 227, 276, 221, 0, 187,
	0, 0, 268, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	140, 120, 214, 269, 157, 0, 0, 0, 113, 114,
	115, 0, 1090, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 301, 0, 0, 0, 0, 239, 0, 273, 166,
	183, 132, 180, 117, 128, 0, 164, 213, 247, 251,
	0, 0, 0, 143, 0, 249, 225, 292, 0, 1086,
	248, 188, 281, 240, 291, 302, 303, 277, 299, 311,
	265, 121, 275, 289, 137, 259, 0, 0, 0, 123,
	287, 272, 202, 177, 178, 122, 0, 245, 148, 160,
	145, 216, 284, 285, 144, 314, 129, 298, 125, 130,
	297, 209, 280, 288, 203, 195, 124, 286, 201, 194,
	182, 154, 168, 237, 191, 238, 169, 206, 205, 207,
	0, 0, 0, 270, 295, 315, 134, 0, 0, 278,
	307, 310, 0, 241, 135, 161, 153, 236, 159, 185,
	306, 308, 309, 208, 131, 171, 266, 181, 189, 244,
	313, 224, 250, 138, 294, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 126, 186, 312, 242,
	158, 296, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 119, 127,
	133, 139, 146, 152, 156, 163, 167, 170, 173, 174,
	175, 179, 193, 197, 198, 199, 200, 210, 211, 212,
	215, 218, 219, 220, 222, 223, 226, 230, 231, 232,
	233, 234, 235, 243, 246, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 271, 274, 282, 283,
	293, 300, 304, 165, 290, 305, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 184, 0, 0, 228, 0, 260, 142, 192, 190,
	279, 155, 151, 149, 141, 172, 196, 227, 276, 221,
	0, 187, 0, 0, 268, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 140, 120, 214, 269, 157, 0, 0, 0,
	113, 114, 115, 0, 0, 1053, 0, 0, 1054, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 301, 0, 0, 0, 0, 239, 0,
	273, 166, 183, 132, 180, 117, 128, 0, 164, 213,
	247, 251, 0, 0, 0, 143, 0, 249, 225, 292,
	0, 229, 248, 188, 281, 240, 291, 302, 303, 277,
	299, 311, 265, 121, 275, 289, 137, 259, 0, 0,
	0, 123, 287, 272, 202, 177, 178, 122, 0, 245,
	148, 160, 145, 216, 284, 285, 144, 314, 129, 298,
	125, 130, 297, 209, 280, 288, 203, 195, 124, 286,
	201, 194, 182, 154, 168, 237, 191, 238, 169, 206,
	205, 207, 0, 0, 0, 270, 295, 315, 134, 0,
	0, 278, 307, 310, 0, 241, 135, 161, 153, 236,
	159, 185, 306, 308, 309, 208, 131, 171, 266, 181,
	189, 244, 313, 224, 250, 138, 294, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 126, 186,
	312, 242, 158, 296, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	119, 127, 133, 139, 146, 152, 156, 163, 167, 170,
	173, 174, 175, 179, 193, 197, 198, 199, 200, 210,
	211, 212, 215, 218, 219, 220, 222, 223, 226, 230,
	231, 232, 233, 234, 235, 243, 246, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 271, 274,
	282, 283, 293, 300, 304, 165, 290, 305, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 825,
	0, 0, 0, 184, 0, 0, 228, 0, 260, 142,
	192, 190, 279, 155, 151, 149, 141, 172, 196, 227,
	276, 221, 0, 187, 0, 0, 268, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 140, 120, 214, 269, 157, 0,
	0, 0, 113, 114, 115, 0, 824, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 301, 0, 0, 0, 0,
	239, 0, 273, 166, 183, 132, 180, 117, 128, 0,
	164, 213, 247, 251, 0, 0, 0, 143, 0, 249,
	225, 292, 0, 229, 248, 188, 281, 240, 291, 302,
	303, 277, 299, 311, 265, 121, 275, 289, 137, 259,
	0, 0, 0, 123, 287, 272, 202, 177, 178, 122,
	0, 245, 148, 160, 145, 216, 284, 285, 144, 314,
	129, 298, 125, 130, 297, 209, 280, 288, 203, 195,
	124, 286, 201, 194, 182, 154, 168, 237, 191, 238,
	169, 206, 205, 207, 0, 0, 0, 270, 295, 315,
	134, 0, 0, 278, 307, 310, 0, 241, 135, 161,
	153, 236, 159, 185, 306, 308, 309, 208, 131, 171,
	266, 181, 189, 244, 313, 224, 250, 138, 294, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	126, 186, 312, 242, 158, 296, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 127, 133, 139, 146, 152, 156, 163,
	167, 170, 173, 174, 175, 179, 193, 197, 198, 199,
	200, 210, 211, 212, 215, 218, 219, 220, 222, 223,
	226, 230, 231, 232, 233, 234, 235, 243, 246, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	271, 274, 282, 283, 293, 300, 304, 165, 290, 305,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 184, 0, 0, 228, 0,
	260, 142, 192, 190, 279, 155, 151, 149, 141, 172,
	196, 227, 276, 221, 0, 187, 0, 0, 268, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 140, 120, 214, 269,
	157, 0, 0, 0, 113, 114, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 301, 0, 0,
	0, 0, 239, 0, 273, 166, 183, 600, 180, 117,
	128, 598, 164, 213, 247, 251, 0, 0, 0, 143,
	0, 249, 225, 292, 0, 229, 248, 188, 281, 240,
	291, 302, 303, 277, 299, 311, 265, 121, 275, 289,
	137, 259, 0, 0, 0, 123, 287, 272, 202, 177,
	178, 122, 0, 245, 148, 160, 145, 216, 284, 285,
	144, 314, 129, 298, 125, 130, 297, 209, 280, 288,
	203, 195, 124, 286, 201, 194, 182, 154, 168, 237,
	191, 238, 169, 206, 205, 207, 0, 0, 0, 270,
	295, 315, 134, 0, 0, 278, 307, 310, 0, 241,
	135, 161, 153, 236, 159, 185, 306, 308, 309, 208,
	131, 171, 266, 181, 189, 244, 313, 224, 250, 138,
	294, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 126, 186, 312, 242, 158, 296, 0, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 119, 127, 133, 139, 146, 152,
	156, 163, 167, 170, 173, 174, 175, 179, 193, 197,
	198, 199, 200, 210, 211, 212, 215, 218, 219, 220,
	222, 223, 226, 230, 231, 232, 233, 234, 235, 243,
	246, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 271, 274, 282, 283, 293, 300, 304, 165,
	290, 305, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 184, 0, 0,
	228, 0, 260, 142, 192, 190, 279, 155, 151, 149,
	141, 172, 196, 227, 276, 221, 0, 187, 0, 0,
	268, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 140, 120,
	214, 269, 157, 0, 0, 439, 113, 114, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 301,
	0, 0, 0, 0, 239, 0, 273, 166, 183, 132,
	180, 117, 128, 0, 164, 213, 247, 251, 0, 0,
	0, 143, 0, 249, 225, 292, 0, 229, 248, 188,
	281, 240, 291, 302, 303, 277, 299, 311, 265, 121,
	275, 289, 137, 259, 0, 0, 0, 123, 287, 272,
	202, 177, 178, 122, 0, 245, 148, 160, 145, 216,
	284, 285, 144, 314, 129, 298, 125, 130, 297, 209,
	280, 288, 203, 195, 124, 286, 201, 194, 182, 154,
	168, 237, 191, 238, 169, 206, 205, 207, 0, 0,
	0, 270, 295, 315, 134, 0, 0, 278, 307, 310,
	0, 241, 135, 161, 153, 236, 159, 185, 306, 308,
	309, 208, 131, 171, 266, 181, 189, 244, 313, 224,
	250, 138, 294, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 126, 186, 312, 242, 158, 296,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 119, 127, 133, 139,
	146, 152, 156, 163, 167, 170, 173, 174, 175, 179,
	193, 197, 198, 199, 200, 210, 211, 212, 215, 218,
	219, 220, 222, 223, 226, 230, 231, 232, 233, 234,
	235, 243, 246, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 271, 274, 282, 283, 293, 300,
	304, 165, 290, 305, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 184,
	0, 0, 228, 0, 260, 142, 192, 190, 279, 155,
	151, 149, 141, 172, 196, 227, 276, 221, 0, 187,
	0, 0, 268, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	140, 120, 214, 269, 157, 62, 0, 0, 113, 114,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 301, 0, 0, 0, 0, 239, 0, 273, 166,
	183, 132, 180, 117, 128, 0, 164, 213, 247, 251,
	0, 0, 0, 143, 0, 249, 225, 292, 0, 229,
	248, 188, 281, 240, 291, 302, 303, 277, 299, 311,
	265, 121, 275, 289, 137, 259, 0, 0, 0, 123,
	287, 272, 202, 177, 178, 122, 0, 245, 148, 160,
	145, 216, 284, 285, 144, 314, 129, 298, 125, 130,
	297, 209, 280, 288, 203, 195, 124, 286, 201, 194,
	182, 154, 168, 237, 191, 238, 169, 206, 205, 207,
	0, 0, 0, 270, 295, 315, 134, 0, 0, 278,
	307, 310, 0, 241, 135, 161, 153, 236, 159, 185,
	306, 308, 309, 208, 131, 171, 266, 181, 189, 244,
	313, 224, 250, 138, 294, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 126, 186, 312, 242,
	158, 296, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 119, 127,
	133, 139, 146, 152, 156, 163, 167, 170, 173, 174,
	175, 179, 193, 197, 198, 199, 200, 210, 211, 212,
	215, 218, 219, 220, 222, 223, 226, 230, 231, 232,
	233, 234, 235, 243, 246, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 271, 274, 282, 283,
	293, 300, 304, 165, 290, 305, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 184, 0, 0, 228, 0, 260, 142, 192, 190,
	279, 155, 151, 149, 141, 172, 196, 227, 276, 221,
	0, 187, 0, 0, 268, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 140, 120, 214, 269, 157, 0, 0, 0,
	113, 114, 115, 0, 1090, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 301, 0, 0, 0, 0, 239, 0,
	273, 166, 183, 132, 180, 117, 128, 0, 164, 213,
	247, 251, 0, 0, 0, 143, 0, 249, 225, 292,
	0, 229, 248, 188, 281, 240, 291, 302, 303, 277,
	299, 311, 265, 121, 275, 289, 137, 259, 0, 0,
	0, 123, 287, 272, 202, 177, 178, 122, 0, 245,
	148, 160, 145, 216, 284, 285, 144, 314, 129, 298,
	125, 130, 297, 209, 280, 288, 203, 195, 124, 286,
	201, 194, 182, 154, 168, 237, 191, 238, 169, 206,
	205, 207, 0, 0, 0, 270, 295, 315, 134, 0,
	0, 278, 307, 310, 0, 241, 135, 161, 153, 236,
	159, 185, 306, 308, 309, 208, 131, 171, 266, 181,
	189, 244, 313, 224, 250, 138, 294, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 126, 186,
	312, 242, 158, 296, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	119, 127, 133, 139, 146, 152, 156, 163, 167, 170,
	173, 174, 175, 179, 193, 197, 198, 199, 200, 210,
	211, 212, 215, 218, 219, 220, 222, 223, 226, 230,
	231, 232, 233, 234, 235, 243, 246, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 271, 274,
	282, 283, 293, 300, 304, 165, 290, 305, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 184, 0, 0, 228, 0, 260, 142,
	192, 190, 279, 155, 151, 149, 141, 172, 196, 227,
	276, 221, 0, 187, 0, 0, 268, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 140, 120, 214, 269, 157, 0,
	0, 0, 113, 114, 115, 0, 793, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 301, 0, 0, 0, 0,
	239, 0, 273, 166, 183, 132, 180, 117, 128, 0,
	164, 213, 247, 251, 0, 0, 0, 143, 0, 249,
	225, 292, 0, 229, 248, 188, 281, 240, 291, 302,
	303, 277, 299, 311, 265, 121, 275, 289, 137, 259,
	0, 0, 0, 123, 287, 272, 202, 177, 178, 122,
	0, 245, 148, 160, 145, 216, 284, 285, 144, 314,
	129, 298, 125, 130, 297, 209, 280, 288, 203, 195,
	124, 286, 201, 194, 182, 154, 168, 237, 191, 238,
	169, 206, 205, 207, 0, 0, 0, 270, 295, 315,
	134, 0, 0, 278, 307, 310, 0, 241, 135, 161,
	153, 236, 159, 185, 306, 308, 309, 208, 131, 171,
	266, 181, 189, 244, 313, 224, 250, 138, 294, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	126, 186, 312, 242, 158, 296, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 119, 127, 133, 139, 146, 152, 156, 163,
	167, 170, 173, 174, 175, 179, 193, 197, 198, 199,
	200, 210, 211, 212, 215, 218, 219, 220, 222, 223,
	226, 230, 231, 232, 233, 234, 235, 243, 246, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	271, 274, 282, 283, 293, 300, 304, 165, 290, 305,
	807, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 184, 0, 0, 228, 0, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 0, 187, 0, 0, 268, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 140, 120, 214, 269, 157, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 301, 0, 0, 0, 0, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 0, 0, 0, 143, 0, 249, 225,
	292, 0, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 130, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 0, 0, 270, 295, 315, 134,
	0, 0, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 208, 131, 171, 266,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 126,
	186, 312, 242, 158, 296, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305, 217,
	0, 0, 0, 0, 0, 0, 0, 797, 150, 0,
	0, 0, 0, 0, 184, 0, 0, 228, 0, 260,
	142, 192, 190, 279, 155, 151, 149, 141, 172, 196,
	227, 276, 221, 0, 187, 0, 0, 268, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 140, 120, 214, 269, 157,
	0, 0, 0, 113, 114, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 301, 0, 0, 0,
	0, 239, 0, 273, 166, 183, 132, 180, 117, 128,
	0, 164, 213, 247, 251, 0, 0, 0, 143, 0,
	249, 225, 292, 0, 229, 248, 188, 281, 240, 291,
	302, 303, 277, 299, 311, 265, 121, 275, 289, 137,
	259, 0, 0, 0, 123, 287, 272, 202, 177, 178,
	122, 0, 245, 148, 160, 145, 216, 284, 285, 144,
	314, 129, 298, 125, 130, 297, 209, 280, 288, 203,
	195, 124, 286, 201, 194, 182, 154, 168, 237, 191,
	238, 169, 206, 205, 207, 0, 0, 0, 270, 295,
	315, 134, 0, 0, 278, 307, 310, 0, 241, 135,
	161, 153, 236, 159, 185, 306, 308, 309, 208, 131,
	171, 266, 181, 189, 244, 313, 224, 250, 138, 294,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 126, 186, 312, 242, 158, 296, 0, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 119, 127, 133, 139, 146, 152, 156,
	163, 167, 170, 173, 174, 175, 179, 193, 197, 198,
	199, 200, 210, 211, 212, 215, 218, 219, 220, 222,
	223, 226, 230, 231, 232, 233, 234, 235, 243, 246,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 271, 274, 282, 283, 293, 300, 304, 165, 290,
	305, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 184, 0, 0, 228,
	0, 260, 142, 192, 190, 279, 155, 151, 149, 141,
	172, 196, 227, 276, 221, 0, 187, 0, 0, 268,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 140, 120, 214,
	269, 157, 0, 0, 0, 113, 114, 115, 0, 673,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 301, 0,
	0, 0, 0, 239, 0, 273, 166, 183, 132, 180,
	117, 128, 0, 164, 213, 247, 251, 0, 0, 0,
	143, 0, 249, 225, 292, 0, 229, 248, 188, 281,
	240, 291, 302, 303, 277, 299, 311, 265, 121, 275,
	289, 137, 259, 0, 0, 0, 123, 287, 272, 202,
	177, 178, 122, 0, 245, 148, 160, 145, 216, 284,
	285, 144, 314, 129, 298, 125, 130, 297, 209, 280,
	288, 203, 195, 124, 286, 201, 194, 182, 154, 168,
	237, 191, 238, 169, 206, 205, 207, 0, 0, 0,
	270, 295, 315, 134, 0, 0, 278, 307, 310, 0,
	241, 135, 161, 153, 236, 159, 185, 306, 308, 309,
	208, 131, 171, 266, 181, 189, 244, 313, 224, 250,
	138, 294, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 126, 186, 312, 242, 158, 296, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 127, 133, 139, 146,
	152, 156, 163, 167, 170, 173, 174, 175, 179, 193,
	197, 198, 199, 200, 210, 211, 212, 215, 218, 219,
	220, 222, 223, 226, 230, 231, 232, 233, 234, 235,
	243, 246, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 271, 274, 282, 283, 293, 300, 304,
	165, 290, 305, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 184, 0,
	0, 228, 0, 260, 142, 192, 190, 279, 155, 151,
	149, 141, 172, 196, 227, 276, 221, 0, 187, 0,
	0, 268, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 140,
	120, 214, 269, 157, 0, 0, 0, 113, 114, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 162, 0, 0, 0,
	301, 0, 0, 0, 0, 239, 0, 273, 166, 183,
	132, 180, 117, 128, 0, 164, 213, 247, 251, 0,
	0, 0, 143, 0, 249, 225, 292, 0, 229, 248,
	188, 281, 240, 291, 302, 303, 277, 299, 311, 265,
	121, 275, 289, 137, 259, 0, 0, 0, 123, 287,
	272, 202, 177, 178, 122, 0, 245, 148, 160, 145,
	216, 284, 285, 144, 314, 129, 298, 125, 130, 297,
	209, 280, 288, 203, 195, 124, 286, 201, 194, 182,
	154, 168, 237, 191, 238, 169, 206, 205, 207, 0,
	0, 0, 270, 295, 315, 134, 0, 0, 278, 307,
	310, 0, 241, 135, 161, 153, 236, 159, 185, 306,
	308, 309, 208, 131, 171, 266, 181, 189, 244, 313,
	224, 250, 138, 294, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 126, 186, 312, 242, 158,
	296, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 119, 127, 133,
	139, 146, 152, 156, 163, 167, 170, 173, 174, 175,
	179, 193, 197, 198, 199, 200, 210, 211, 212, 215,
	218, 219, 220, 222, 223, 226, 230, 231, 232, 233,
	234, 235, 243, 246, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 271, 274, 282, 283, 293,
	300, 304, 354, 290, 305, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	184, 0, 0, 228, 0, 260, 142, 192, 190, 279,
	155, 151, 149, 141, 172, 196, 227, 276, 221, 0,
	187, 0, 0, 268, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 140, 120, 214, 269, 157, 0, 0, 0, 113,
	114, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	108, 0, 301, 0, 0, 0, 0, 239, 0, 273,
	166, 183, 132, 180, 117, 128, 0, 164, 213, 247,
	251, 0, 0, 0, 143, 0, 249, 225, 292, 0,
	229, 248, 188, 281, 240, 291, 302, 303, 277, 299,
	311, 265, 121, 275, 289, 137, 259, 0, 0, 0,
	123, 287, 272, 202, 177, 178, 122, 0, 245, 148,
	160, 145, 216, 284, 285, 144, 314, 129, 298, 125,
	130, 297, 209, 280, 288, 203, 195, 124, 286, 201,
	194, 182, 154, 168, 237, 191, 238, 169, 206, 205,
	207, 0, 0, 0, 270, 295, 315, 134, 0, 0,
	278, 307, 310, 0, 241, 135, 161, 153, 236, 159,
	185, 306, 308, 309, 208, 131, 171, 266, 181, 189,
	244, 313, 224, 250, 138, 294, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 126, 186, 312,
	242, 158, 296, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 119,
	127, 133, 139, 146, 152, 156, 163, 167, 170, 173,
	174, 175, 179, 193, 197, 198, 199, 200, 210, 211,
	212, 215, 218, 219, 220, 222, 223, 226, 230, 231,
	232, 233, 234, 235, 243, 246, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 271, 274, 282,
	283, 293, 300, 304, 165, 290, 305, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 184, 0, 0, 228, 0, 260, 142, 192,
	190, 279, 155, 151, 149, 141, 172, 196, 227, 276,
	221, 0, 187, 0, 0, 268, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 140, 120, 214, 269, 157, 0, 0,
	0, 113, 114, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 301, 0, 0, 0, 0, 239,
	0, 273, 166, 183, 132, 180, 117, 128, 0, 164,
	213, 247, 251, 0, 0, 0, 143, 0, 249, 225,
	292, 0, 229, 248, 188, 281, 240, 291, 302, 303,
	277, 299, 311, 265, 121, 275, 289, 137, 259, 0,
	0, 0, 123, 287, 272, 202, 177, 178, 122, 0,
	245, 148, 160, 145, 216, 284, 285, 144, 314, 129,
	298, 125, 130, 297, 209, 280, 288, 203, 195, 124,
	286, 201, 194, 182, 154, 168, 237, 191, 238, 169,
	206, 205, 207, 0, 0, 0, 270, 295, 315, 134,
	0, 0, 278, 307, 310, 0, 241, 135, 161, 153,
	236, 159, 185, 306, 308, 309, 208, 131, 171, 266,
	181, 189, 244, 313, 224, 250, 138, 294, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 126,
	186, 312, 242, 158, 296, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 119, 127, 133, 139, 146, 152, 156, 163, 167,
	170, 173, 174, 175, 179, 193, 197, 198, 199, 200,
	210, 211, 212, 215, 218, 219, 220, 222, 223, 226,
	230, 231, 232, 233, 234, 235, 243, 246, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 271,
	274, 282, 283, 293, 300, 304, 165, 290, 305,
}
var yyPact = [...]int{

	3003, -1000, -286, 1162, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1119,
	891, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 359, 882,
	76, -8, 145, 37, 19036, 144, 119, 19408, -1000, 35,
	-1000, 24, 19408, 30, 18664, -1000, -1000, -60, -77, -1000,
	10819, 1023, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	876, 1087, 1094, 1117, 616, 1111, -1000, 9318, 9318, 120,
	120, 120, 7830, -1000, -1000, 15681, 19408, 19408, 19408, -149,
	123, 123, 123, 142, -1000, -1000, -1000, 19408, 19408, 627,
	627, 250, 19408, 121, 627, 121, 121, 121, 19408, -1000,
	183, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19408, 627, 1044, 329,
	112, 232, 232, 232, 232, -1000, 251, -1000, 5514, 49,
	45, -44, 1149, 41, -5, -1000, 329, 5514, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 130, -1000, -1000, -1000,
	-1000, 19408, 18292, 133, 286, -1000, -1000, -1000, -1000, -1000,
	-1000, 716, 601, -1000, 10819, 446, 811, 811, -1000, -1000,
	160, -1000, -1000, 11935, 11935, 11935, 11935, 11935, 11935, 11935,
	11935, 11935, 11935, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 811, 181, -1000,
	10447, 811, 811, 811, 811, 811, 811, 811, 811, 10819,
	811, 811, 811, 811, 811, 811, 811, 811, 811, 811,
	811, 811, 811, 811, 811, 811, -1000, -1000, -1000, 1119,
	-1000, 891, -1000, -1000, -1000, 1054, 10819, 10819, 1119, -1000,
	977, 9318, -1000, -1000, 1057, -1000, -1000, -1000, -1000, 345,
	1165, -1000, 12679, 180, 1164, 17920, -1000, 16425, 17548, 808,
	7444, -73, -1000, -1000, -1000, 276, 15309, -1000, -1000, -1000,
	1036, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 759, 19408, -1000, -1000, 2596, 627, -1000,
	840, -1000, 756, -1000, 824, 5514, 134, 627, 290, 627,
	19408, 627, 104, 5514, 5514, 5514, 55, 89, 81, 19408,
	805, 129, 19408, 1082, 921, 19408, 627, 627, -1000, 6672,
	-1000, 5514, 329, -1000, 520, 10819, 5514, 5514, 5514, 19408,
	5514, 5514, -1000, 518, -1000, -1000, -1000, 334, -1000, -1000,
	-1000, -1000, -1000, -1000, 5514, 5514, 333, 334, 333, -1000,
	-1000, -1000, -1000, 10819, 232, -1000, 919, -1000, -1000, 27,
	-1000, -1000, -1000, -1000, -1000, 1162, -1000, -1000, -1000, -131,
	-1000, -1000, 10819, 10819, 10819, 10819, 571, 226, 11935, 395,
	481, 11935, 11935, 11935, 11935, 11935, 11935, 11935, 11935, 11935,
	11935, 11935, 11935, 11935, 11935, 11935, 641, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 627, -1000, 1178, 920, 920,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 12307,
	8202, 6672, 616, 754, 1119, 9318, 9318, 10819, 10819, 10062,
	9690, 9318, 1042, 302, 601, 19408, -1000, -1000, 11563, -1000,
	-1000, -1000, -1000, -1000, 522, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19408, 19408, 9318, 9318, 9318, 9318, 9318, -1000,
	1094, 616, 1057, 1069, 1173, 219, 577, 803, -1000, 562,
	1094, 14937, 781, -1000, 1057, -1000, -1000, -1000, 19408, -1000,
	-1000, 17169, -1000, -1000, 6286, 19408, 70, 19408, -1000, 709,
	975, -1000, -1000, -1000, 1084, 14193, 14565, 19408, 820, 775,
	-1000, -1000, 177, 7058, -73, -1000, 7058, 774, -1000, -108,
	-91, 8574, 195, -1000, -1000, -1000, -1000, 4742, 13051, 583,
	354, -32, -1000, -1000, -1000, 824, -1000, 824, 824, 824,
	824, -3, -3, -3, -3, -1000, -1000, -1000, -1000, -1000,
	878, 865, -1000, 824, 824, 824, 824, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 863, 863, 863, 827, 827, 98,
	10819, 46, 19408, 1079, 421, -1000, 19408, 5514, 1078, 5514,
	-1000, 905, -1000, 328, 328, 279, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 73, -1000, -1000,
	-1000, 19408, 19408, 19408, 19408, 19408, 155, 19408, 19408, 798,
	-1000, 19408, 5514, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 601, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19408,
	-1000, -1000, -1000, -1000, 329, 19408, 19408, 19408, 329, 601,
	-1000, 19408, 19408, -1000, -1000, -1000, -1000, -1000, 601, 226,
	259, 289, -1000, -1000, 456, -1000, -1000, 1288, -1000, -1000,
	-1000, -1000, 395, 11935, 11935, 11935, 410, 1288, 1996, 560,
	801, 197, 375, 375, 199, 199, 199, 199, 199, 605,
	605, -1000, -1000, -1000, 522, -1000, -1000, -1000, 522, 9318,
	9318, 784, 811, 172, -1000, 876, -1000, -1000, 1094, 741,
	741, 517, 491, 327, 1161, 741, 318, 1157, 741, 741,
	9318, -1000, -1000, 336, -1000, 10819, 522, -1000, 171, -1000,
	521, 782, 776, 741, 522, 522, 741, 741, 1054, -1000,
	-1000, 1016, -1000, 943, 10819, 10819, 10819, -1000, -1000, -1000,
	1054, 1118, -1000, 992, 989, 1136, 9318, 16425, 1057, -1000,
	-1000, -1000, 169, 1136, 828, 811, -1000, 19408, 16425, 16425,
	16425, 16425, 16425, -1000, 958, 957, -1000, 955, 930, 966,
	19408, -1000, 745, 616, 14193, 201, 811, -1000, 16797, -1000,
	-1000, 70, 772, 16425, 19408, -1000, -1000, 16425, 19408, 5900,
	-1000, 774, -73, -68, -1000, -1000, -1000, -1000, 601, -1000,
	690, 770, 4356, -1000, -1000, -1000, -1000, 111, -1000, -1000,
	862, 627, -1000, 1062, 262, 262, 282, 627, 1061, -1000,
	-1000, -1000, -1000, 1046, -1000, 323, -50, -1000, -1000, -3,
	-3, -1000, -1000, 195, 1035, 195, 195, 195, 510, 510,
	-1000, -1000, -1000, -1000, -1000, 412, -1000, -1000, -1000, 405,
	-1000, -1000, 840, 384, 942, 46, -1000, 627, 267, 507,
	1022, -1000, -1000, 554, 5514, -1000, -1000, -1000, 917, 19408,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19408, -1000, -1000,
	-1000, -1000, -1000, 19408, 902, -1000, -1000, -1000, -1000, 29,
	54, 113, -1000, 5514, -1000, 333, -1000, -1000, -1000, 333,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, 1288, 1778,
	-1000, 11935, 11935, -1000, -1000, 741, 741, 9318, 6672, 1119,
	1054, -1000, -1000, 225, 641, 225, 11935, 11935, -1000, 11935,
	11935, -1000, -163, 765, 263, -1000, 10819, 670, -1000, 6672,
	-1000, 11935, 11935, -1000, -1000, -1000, -1000, -1000, -1000, 443,
	498, 965, 601, 601, -1000, -1000, 19408, -1000, -1000, -1000,
	-1000, 1134, 10819, -1000, 749, -1000, 5128, 1094, 916, 19408,
	811, 1162, 13436, 19408, 648, -1000, 268, 975, 897, 915,
	1155, -1000, -1000, -1000, -1000, 936, -1000, 838, -1000, -1000,
	-1000, -1000, -1000, 616, -1000, 141, 140, 137, 19408, -1000,
	1136, 16425, 646, -1000, 646, -1000, 167, -1000, -1000, -1000,
	-125, -99, -1000, -1000, -1000, 4742, -1000, 4742, -1000, 19408,
	96, -1000, 627, 627, 627, -1000, -1000, -1000, 829, 914,
	11935, -1000, -1000, -1000, 195, 195, -1000, 271, -1000, -1000,
	-1000, 737, -1000, 730, 732, 728, 10, -1000, 887, 1033,
	267, 267, -1000, -1000, 388, -1000, -1000, 497, -1000, -1000,
	19408, -1000, -1000, -1000, -1000, -1000, 1056, -170, 627, 19408,
	19408, 19408, 19408, -1000, 329, 329, -1000, 11935, 1288, 1288,
	-1000, -1000, 522, -1000, 1094, -1000, 522, 824, 824, -1000,
	824, 827, -1000, 824, 17, 824, 16, 522, 522, 1800,
	1745, 1669, 1631, 811, -158, -1000, 601, 10819, -1000, 1606,
	744, 494, -3, -1000, -1000, -1000, 1130, 1115, 601, -1000,
	-1000, -1000, 1064, 686, 714, -1000, -1000, 8946, 723, 982,
	166, 721, -1000, 1119, 19408, 10819, -1000, -1000, 10819, 822,
	-1000, 10819, -1000, -1000, -1000, 1119, 811, 811, 811, 721,
	1119, 646, -1000, -1000, 188, -1000, -1000, -1000, 4356, -1000,
	704, -1000, 1061, -1000, -1000, -1000, 19408, -28, 1172, 1288,
	-1000, -1000, -1000, -1000, -3, 493, -3, 381, -1000, 353,
	-1000, -1000, -223, -1000, -1000, 924, 938, -1000, -1000, -1000,
	811, -1000, 6672, -1000, -1000, 818, 904, -1000, -1000, -1000,
	-1000, 1288, -1000, 1054, -1000, -1000, 139, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11935, 11935, 11935, 11935, 11935,
	1094, 469, 601, 11935, 11935, -3, -52, -1000, 10819, 10819,
	1059, -1000, 811, -1000, 841, 19408, 811, 19408, -1000, 19408,
	1094, -1000, 601, 601, 19408, 601, 16053, 19408, 19408, 13808,
	1094, -1000, 46, 702, -1000, 255, -1000, -115, 195, -1000,
	195, 549, 547, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 66, 719, -1000, 258, 19408, 19408, -1000, -1000, -1000,
	521, 521, 521, 521, 31, 522, -1000, 521, 521, -281,
	-1000, 1019, 1017, 601, 716, 1171, -1000, 811, 1162, 151,
	714, -1000, -1000, -1000, 698, 639, -1000, 639, 639, 201,
	-1000, -1000, 90, 19408, 341, 1055, -1000, 1051, -1000, -1000,
	-1000, -1000, -1000, 594, -1000, 19408, 6672, 4742, 552, -1000,
	-1000, -1000, -1000, -1000, 522, 67, -179, -1000, -1000, -1000,
	-52, 173, -1000, 998, 995, 1114, 19408, 714, 19408, -1000,
	-1000, -1000, -1000, -1000, 19408, -1000, -1000, 461, -1000, -1000,
	-1000, 66, 980, -1000, -1000, 902, -1000, 963, -167, -182,
	1002, 1005, 1005, 1017, 1104, 1013, 1010, -1000, 460, 619,
	-1000, 812, -1000, -1000, 61, -170, -1000, 946, -1000, 1000,
	425, -1000, -1000, -1000, -1000, 457, -1000, 1102, 1097, -1000,
	19408, 59, -1000, -177, -1000, 423, -1000, -1000, -1000, 436,
	426, 543, 811, -180, -1000, -1000, -1000, -1000, 909, 11191,
	-187, 908, -1000, 1154, 521, 522, -1000, -1000, 1156, 230,
	230, -1000, -1000, -1000, -1000, -1000, 101, 449, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1467, 1466, 38, 76, 71, 1464, 1463, 1462, 1461,
	114, 111, 110, 1459, 1457, 1456, 1455, 1454, 1453, 1452,
	1451, 1450, 1449, 1447, 1446, 1445, 1444, 1443, 1442, 1441,
	1440, 1439, 1437, 1435, 1434, 94, 1433, 1432, 1431, 1430,
	1429, 1428, 1427, 1426, 1408, 91, 51, 496, 54, 72,
	1407, 65, 1481, 1406, 43, 74, 69, 1405, 33, 1404,
	1398, 95, 1395, 1394, 64, 1388, 1387, 238, 1386, 62,
	1384, 12, 46, 1383, 1380, 1379, 1370, 96, 50, 1368,
	1366, 14, 1364, 1362, 112, 1360, 75, 16, 15, 23,
	24, 1356, 79, 1353, 19, 1350, 73, 1348, 1347, 1346,
	1342, 22, 1339, 68, 80, 20, 1337, 7, 10, 1335,
	1332, 1331, 1330, 1329, 1328, 4, 1327, 1326, 1325, 1324,
	1323, 17, 1321, 6, 63, 40, 21, 9, 1317, 1316,
	18, 92, 60, 84, 1315, 1311, 1307, 761, 1306, 58,
	1305, 117, 1291, 27, 97, 564, 622, 1290, 1289, 1288,
	1286, 1285, 36, 896, 1804, 122, 93, 1284, 1280, 2689,
	44, 70, 29, 1275, 1273, 1272, 121, 67, 57, 852,
	1267, 49, 1266, 1263, 1260, 1259, 1251, 1247, 1246, 414,
	1244, 1243, 1241, 116, 41, 90, 26, 1240, 1231, 1230,
	1229, 59, 81, 1226, 1216, 61, 66, 1215, 108, 30,
	28, 1212, 1211, 1210, 1208, 42, 13, 1207, 82, 37,
	56, 32, 34, 1206, 25, 1205, 35, 31, 1203, 8,
	1202, 11, 1201, 3, 0, 1200, 5, 78, 1, 1199,
	2, 1197, 1196, 1195, 1608, 1310, 85, 1194, 102,
}
var yyR1 = [...]int{

	0, 232, 233, 233, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 224, 224, 224, 21, 34, 3, 3, 3, 3,
	2, 2, 8, 9, 4, 5, 5, 10, 10, 39,
	39, 11, 12, 12, 12, 12, 236, 236, 61, 61,
	62, 62, 124, 124, 13, 14, 14, 133, 133, 132,
	132, 132, 134, 134, 134, 134, 169, 169, 15, 15,
	15, 15, 15, 15, 15, 226, 226, 225, 223, 223,
	222, 222, 221, 22, 24, 201, 203, 203, 202, 202,
	202, 202, 202, 202, 192, 172, 172, 172, 172, 175,
	175, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	174, 174, 174, 174, 174, 176, 176, 176, 176, 176,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 178, 178, 178, 178, 178,
	178, 178, 178, 191, 191, 179, 179, 185, 185, 186,
	186, 186, 188, 188, 189, 189, 147, 147, 147, 181,
	181, 182, 182, 187, 187, 183, 183, 183, 184, 184,
	184, 190, 190, 190, 190, 190, 180, 180, 193, 214,
	214, 213, 213, 210, 210, 210, 210, 200, 200, 207,
	207, 207, 207, 207, 207, 197, 197, 197, 198, 198,
	196, 196, 199, 199, 209, 209, 208, 194, 194, 195,
	195, 216, 216, 216, 216, 216, 217, 229, 230, 228,
	228, 228, 228, 228, 148, 148, 148, 204, 204, 204,
	205, 205, 205, 206, 206, 206, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 220, 218, 218,
	219, 219, 17, 23, 23, 18, 18, 18, 18, 18,
	19, 19, 25, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 140, 140, 231, 231, 142, 142,
	138, 138, 141, 141, 139, 139, 139, 143, 143, 143,
	144, 144, 170, 170, 170, 27, 27, 29, 29, 30,
	31, 31, 164, 164, 165, 165, 32, 33, 38, 38,
	38, 38, 38, 38, 40, 40, 40, 7, 7, 7,
	7, 37, 37, 37, 6, 6, 28, 28, 28, 28,
	20, 237, 35, 36, 36, 45, 45, 45, 41, 41,
	41, 44, 44, 44, 48, 48, 50, 50, 50, 50,
	50, 51, 51, 51, 51, 51, 51, 47, 47, 49,
	49, 49, 49, 157, 157, 157, 156, 156, 53, 53,
	54, 54, 55, 55, 56, 56, 56, 93, 70, 70,
	123, 123, 125, 125, 57, 57, 57, 57, 58, 58,
	59, 59, 60, 60, 163, 163, 162, 162, 162, 161,
	161, 63, 63, 63, 65, 64, 64, 64, 64, 66,
	66, 68, 68, 67, 67, 69, 71, 71, 71, 71,
	71, 72, 72, 52, 52, 52, 52, 52, 52, 52,
	52, 136, 136, 74, 74, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 85, 85, 85, 85, 85,
	85, 75, 75, 75, 75, 75, 75, 75, 46, 46,
	86, 86, 86, 92, 87, 87, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	82, 82, 82, 82, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 238, 238, 84, 83, 83, 83, 83,
	83, 83, 83, 43, 43, 43, 43, 43, 168, 168,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 97, 97, 42, 42, 95, 95, 96,
	98, 98, 94, 94, 94, 77, 77, 77, 77, 77,
	77, 77, 77, 79, 79, 79, 99, 99, 100, 100,
	101, 101, 102, 102, 103, 104, 104, 104, 105, 105,
	105, 105, 215, 215, 215, 215, 215, 211, 211, 211,
	211, 212, 212, 212, 121, 121, 121, 106, 106, 106,
	106, 111, 111, 111, 107, 107, 109, 109, 109, 110,
	110, 110, 108, 114, 114, 116, 116, 115, 115, 113,
	113, 118, 118, 117, 117, 112, 112, 76, 76, 76,
	76, 76, 122, 122, 122, 122, 126, 126, 88, 88,
	90, 90, 89, 91, 127, 127, 130, 128, 128, 131,
	131, 131, 131, 131, 129, 129, 129, 158, 158, 158,
	135, 135, 145, 145, 146, 146, 137, 137, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 150, 150,
	150, 151, 151, 119, 119, 119, 119, 120, 120, 154,
	154, 155, 155, 159, 159, 160, 160, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 234, 235,
	166, 167, 167, 167,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 3, 5, 6, 6, 7,
	4, 6, 5, 7, 8, 1, 3, 7, 8, 1,
	1, 9, 9, 8, 7, 7, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	6, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 7, 4, 2, 4, 1, 1,
	3, 4, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 0,
	1, 1, 2, 2, 3, 2, 3, 0, 1, 2,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 3, 1, 3,
	1, 10, 11, 11, 12, 1, 5, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 5, 6, 6, 6,
	6, 4, 4, 4, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 3, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 2, 7, 2, 3,
	4, 5, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 3, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 5, 0, 1, 0, 1, 2, 3, 0, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 3, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 4, 5,
	5, 0, 2, 1, 3, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 8, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 2, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 2, 4, 0, 9, 3,
	5, 0, 3, 3, 0, 1, 0, 2, 2, 0,
	2, 2, 2, 0, 3, 0, 3, 0, 3, 0,
	4, 0, 3, 0, 4, 0, 1, 2, 1, 5,
	4, 4, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -232, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -25, -26, -27, -29,
	-30, -31, -32, -33, -6, -28, -20, -21, -34, -4,
	-234, 6, 7, 8, -39, 10, 11, 31, -22, -24,
	146, 147, 149, 148, 182, 150, 175, 70, 196, 197,
	199, 200, 201, 202, -40, 180, 181, 32, 33, 152,
	35, 41, 80, 9, 290, 177, 176, 26, -233, 392,
	-45, 5, -101, 16, -3, -35, -237, -35, -35, -35,
	-35, -35, -35, -201, -203, 80, 119, 80, 156, 100,
	282, 153, 154, -119, 160, 163, 164, 154, 156, 282,
	153, 256, 154, 154, 155, 156, 282, 153, 154, -67,
	-159, -224, -153, 83, 84, 85, 300, 168, 332, 333,
	76, 196, 210, 204, 231, 223, 301, 334, 169, 221,
	224, 269, 166, 335, 251, 259, 94, 199, 278, 336,
	75, 47, 40, 178, 219, 215, 337, 309, 213, 46,
	28, 45, 338, 261, 236, 44, 339, 79, 305, 263,
	214, 260, 152, 340, 171, 388, 164, 341, 237, 241,
	342, 270, 48, 343, 344, 345, 74, 208, 209, 346,
	167, 272, 235, 165, 34, 264, 302, 54, 186, 273,
	42, 239, 41, 347, 234, 230, 49, 348, 349, 350,
	351, 233, 207, 229, 58, 243, 242, 244, 268, 226,
	352, 353, 354, 172, 77, 355, 216, 19, 356, 357,
	358, 52, 359, 360, 276, 181, 361, 50, 37, 184,
	362, 363, 364, 365, 366, 367, 262, 238, 240, 161,
	188, 258, 304, 368, 274, 212, 369, 173, 185, 180,
	277, 174, 370, 371, 372, 373, 374, 375, 376, 200,
	39, 377, 378, 379, 380, 195, 271, 280, 57, 78,
	248, 381, 206, 163, 382, 197, 51, 192, 254, 43,
	227, 187, 383, 384, 217, 218, 232, 205, 228, 198,
	389, 189, 182, 385, 279, 249, 306, 225, 222, 193,
	386, 156, 190, 191, 387, 390, 265, 255, 266, 267,
	256, 194, 303, 275, 220, 250, 154, 137, 224, 269,
	146, 252, 253, 264, 265, 261, -142, 262, 188, -170,
	154, -138, 251, 255, 256, 194, -231, -224, 263, 271,
	270, 257, 267, 266, -159, 198, -164, 203, -154, -224,
	-153, 201, -67, -38, 388, 150, -166, -166, 254, 254,
	-166, -87, -52, -73, 103, -78, 30, 24, -77, -74,
	-94, -91, -92, 137, 138, 140, 139, 141, 126, 127,
	134, 104, 142, -82, -80, -81, -83, 87, 86, 95,
	88, 89, 90, 91, 96, 97, 98, -154, -159, -89,
	-234, 64, 65, 291, 292, 293, 294, 299, 295, 106,
	53, 281, 289, 288, 287, 285, 286, 283, 284, 297,
	298, 159, 282, 153, 132, 290, -224, -153, 40, -5,
	-4, -234, 6, 21, 22, -105, 18, 17, -235, 82,
	-41, -50, 59, 60, -51, 22, 36, 63, 61, -36,
	-49, 128, -52, -159, -49, -137, 158, -137, -137, -128,
	-169, 198, -131, 271, 270, -155, -129, -154, -152, 269,
	224, 268, 151, 307, 102, 23, 25, 246, 105, 137,
	17, 106, 136, 291, 146, 68, 308, 283, 284, 281,
	293, 294, 282, 252, 30, 11, 310, 26, 176, 22,
	36, 130, 148, 109, 110, 179, 24, 177, 98, 313,
	20, 71, 12, 14, 314, 315, 15, 159, 158, 121,
	155, 66, 9, 142, 27, 118, 62, 316, 29, 317,
	318, 319, 320, 64, 119, 18, 285, 286, 32, 321,
	299, 183, 132, 69, 55, 103, 322, 323, 96, 324,
	99, 72, 100, 16, 67, 38, 325, 326, 327, 328,
	120, 149, 290, 65, 329, 153, 253, 6, 296, 31,
	175, 63, 330, 154, 108, 297, 298, 157, 97, 5,
	160, 33, 10, 70, 73, 287, 288, 289, 53, 107,
	13, 331, 101, -202, 119, -192, -195, -154, 170, -217,
	166, -67, -209, -208, -154, -67, 290, -146, 159, -146,
	-146, 155, -67, -67, -224, -224, 146, 148, 151, 72,
	-23, -67, -145, 159, -224, -145, -145, -145, -67, 143,
	-67, -224, 31, -143, 119, 13, 282, -224, 188, 154,
	189, 156, -144, 119, -144, -144, -144, -197, 155, 34,
	167, -167, -234, -155, 192, 193, 192, -141, -140, 259,
	260, 254, 258, 13, 193, 254, 191, -143, -167, 157,
	-154, -37, -154, 87, -7, -3, -11, -10, -12, 111,
	-166, -166, 81, 102, 100, 101, 118, -52, -75, 121,
	103, 119, 120, 105, 123, 122, 133, 126, 127, 128,
	129, 130, 131, 132, 124, 125, 136, 111, 112, 113,
	114, 115, 116, 117, -136, -234, -92, -234, 144, 145,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-234, 143, -2, -87, -4, -234, -234, -234, -234, -234,
	-234, -234, -234, -97, -52, -234, -238, -84, -234, -238,
	-84, -238, -84, -238, -234, -238, -84, -238, -84, -238,
	-238, -84, -234, -234, -234, -234, -234, -234, -234, -166,
	-101, -3, -35, -121, 20, 32, -52, -102, -103, -52,
	-101, 55, -47, -49, -51, 59, 60, 93, 12, -157,
	-156, 23, -154, 87, 143, 12, -68, 27, -67, -54,
	-55, -56, -57, -70, -93, -234, -67, 12, -61, -62,
	-67, -69, -159, 81, 198, -131, -169, -133, -132, 272,
	274, 111, -158, -154, 87, 30, 31, 82, 81, -67,
	-172, -175, -177, -176, -178, -173, -174, 221, 222, 137,
	225, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 31, 178, 217, 218, 219, 220, 237, 238, 239,
	240, 241, 242, 243, 244, 204, 223, 301, 205, 206,
	207, 208, 209, 210, 212, 213, 214, 215, 216, -224,
	80, 82, 81, -179, 80, -167, 156, -224, 103, -224,
	-67, -224, -149, 151, 148, 149, -220, 147, 246, 224,
	94, 30, 16, 291, 184, 306, -224, 185, -167, -167,
	-167, 190, 190, 154, 154, 195, -67, 81, 157, -61,
	24, 72, -67, -224, -224, -160, -159, -152, -167, -143,
	87, -52, -167, -167, -167, -67, -167, -167, 87, -198,
	12, 121, -167, -167, -139, 12, 121, -198, -139, -52,
	-144, 72, -165, 201, 235, 389, 390, 391, -52, -52,
	-52, -52, -85, 96, 103, 97, 98, -78, -86, -89,
	-92, 92, 121, 119, 120, 105, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -168, -224, 87, -224, -77, -77, -154, -48, 22,
	36, -47, -155, -160, -152, -45, -235, -235, -101, -47,
	-47, -52, -52, -94, 87, -47, -94, 87, -47, -47,
	-44, 22, 36, -95, -96, 107, -94, -154, -159, -235,
	-78, -154, -154, -47, -48, -48, -47, -47, -105, -235,
	-106, 27, 10, 121, 81, 19, 81, -104, 25, 26,
	-105, -79, -154, 88, 91, -53, 81, 12, -51, -67,
	-156, 128, -160, -67, -124, 184, -67, 31, 81, -63,
	-65, -64, -66, 62, 66, 68, 63, 64, 65, 69,
	-163, 23, -54, -3, -234, -162, 184, -161, 23, -159,
	87, -67, -61, -236, 81, 12, 73, -236, 81, 143,
	-131, -133, 81, 273, 275, 276, 72, 99, -52, -184,
	136, -204, -205, -206, -155, 87, 88, -192, -193, -194,
	-207, 170, -216, 161, 163, 164, 160, -196, 171, -217,
	155, 29, 82, -147, 96, 103, -188, 249, -179, -179,
	-179, -179, -179, -183, 224, -183, -183, -183, 80, 80,
	-179, -179, -179, -179, -185, 80, -185, -185, -186, 80,
	-186, -217, 166, -52, -214, -213, -210, 73, 165, 94,
	303, -208, -104, 88, -67, -167, 24, -167, -120, 73,
	-166, -227, 166, 162, 170, 171, 164, 83, 84, 85,
	155, 29, 161, 163, 184, 160, -227, -150, -151, 157,
	23, 155, 29, 184, -67, -67, -67, -67, -67, 151,
	148, -67, -67, -67, -167, -67, -143, -159, -159, -67,
	-143, -67, -154, 96, 97, 98, -86, -78, -78, -78,
	-46, 179, 102, -235, -235, -47, -47, -234, 143, -5,
	-105, -235, -235, 81, 73, 23, 12, 12, -235, 12,
	12, -235, -235, -47, -98, -96, 109, -52, -235, 143,
	-235, 81, 81, -235, -235, -235, -235, -235, -121, 38,
	46, 57, -52, -52, -103, -121, -135, 20, 12, 53,
	53, -72, 13, -49, -54, -51, 143, -72, -76, 31,
	53, -3, -234, -234, -127, -130, -94, -55, -56, -56,
	-55, -56, 62, 62, 62, 67, 62, 67, 62, -64,
	-159, -235, -235, -3, -71, 70, 158, 71, -234, -161,
	-124, 73, -54, -67, -54, -69, -159, 128, -132, -134,
	277, 274, 280, -224, 87, 81, -206, 111, -195, 80,
	-224, 29, -196, -196, -196, -199, -224, -199, 29, -181,
	30, 96, -189, 250, -183, -183, -184, 31, -184, -184,
	-184, -191, 87, -191, 88, 88, 82, -215, -211, -212,
	32, 76, -210, -224, -200, 111, 87, 37, 82, -167,
	72, -154, -166, -166, -67, -166, -154, -226, 73, 190,
	246, 190, 157, -167, -139, -139, -46, 102, -78, -78,
	-235, -235, -48, -155, -101, -121, -171, 137, 221, 178,
	219, 215, 235, 226, 248, 217, 249, -168, -171, -78,
	-78, -78, -78, 300, -101, 110, -52, 108, -155, -78,
	-78, 39, 87, 87, 58, -67, -99, 14, -52, 128,
	-105, -126, 72, -127, -88, -90, -89, -234, -122, -235,
	-154, -125, -154, -72, 81, 111, -59, -58, 72, 73,
	-60, 72, -58, 62, 62, -235, 155, 155, 155, -125,
	-72, -54, -72, -72, 143, 274, 278, 279, -205, -206,
	-209, -216, 171, -199, -199, -199, 80, -182, 72, -78,
	-184, -184, -224, 137, 82, 81, 82, 81, 82, 81,
	-148, 338, 103, -212, -211, -200, -200, 88, 87, -67,
	27, -223, 303, -225, -224, -154, -154, -154, -67, -143,
	-143, -78, -235, -105, -235, -179, -179, -179, -186, -179,
	209, -179, 209, -235, -235, 20, 20, 20, 20, -234,
	-42, 296, -52, 81, 81, 87, -183, -100, 15, 17,
	28, -126, 81, -235, -235, 81, 53, 143, -235, 81,
	-101, -130, -52, -52, 80, -52, -234, -234, -234, -235,
	-101, -72, 82, -123, -154, -187, 246, 10, -183, 87,
	-183, 88, 88, 338, 30, 77, 78, 79, 30, 74,
	75, -234, -222, -221, -155, 80, 73, -121, -183, -224,
	-78, -78, -78, -78, -78, -105, 87, -78, -78, -183,
	-108, -113, -141, -52, -87, 29, -90, 53, -3, -154,
	-88, -154, -154, -105, -123, -123, -235, -123, -123, -162,
	-105, -214, 82, 81, -190, 161, 29, 160, -81, -184,
	-184, 82, 82, -218, -219, 184, 81, 111, -123, -67,
	-235, -235, -235, -235, -43, 121, 303, -235, -235, -235,
	-111, 388, -114, 42, -115, 43, 10, -88, 143, 82,
	-235, -235, -235, -71, 173, -154, -180, 94, 29, 29,
	-235, 81, -154, -221, -206, 82, -235, 301, 69, 304,
	-108, 47, 227, -116, 51, -117, -112, 52, 17, -127,
	-154, -67, 87, -219, 53, -226, 58, 302, 305, -109,
	49, -107, 48, -107, -115, 17, -118, 44, 45, 87,
	80, 186, -223, 58, -110, 50, 72, 99, 87, 17,
	17, -123, 187, 303, 72, 99, 87, 87, 82, -234,
	304, -229, -230, 72, -78, 183, 305, -230, 72, 11,
	10, -235, -235, -228, 174, 169, 172, 31, -228, 168,
	30, 96,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 640,
	0, 381, 381, 381, 381, 381, 381, 381, 0, 0,
	753, 0, 0, 0, 0, 0, -2, 346, 347, 0,
	349, -2, 0, 0, 358, 1090, 1090, 0, 0, 1090,
	0, 0, 1088, 49, 50, 364, 365, 366, 1, 3,
	0, 385, 648, 0, 0, -2, 383, 0, 0, 736,
	736, 736, 0, 78, 79, 0, 0, 0, 0, 0,
	734, 734, 734, 0, 754, 755, 756, 0, 0, 0,
	0, 0, 0, 732, 0, 732, 732, 732, 0, 291,
	463, 763, 764, 31, 32, 33, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 0, 0, 0, 337,
	0, 340, 340, 340, 340, 306, 0, 308, 1091, 0,
	0, 0, 315, 0, 0, 321, 337, 1091, 329, 343,
	344, 331, 326, 327, 345, 348, 0, 353, 356, 759,
	760, 0, 371, 0, 937, 363, 376, 377, 1090, 1090,
	380, 34, 514, 473, 0, 479, 481, 0, 516, 517,
	518, 519, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 546, 547, 548, 549, 625, 626, 627,
	628, 629, 630, 631, 632, 483, 484, 622, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 583, 583, 583, 583, 583, 583, 583, 583, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 1090, 640,
	45, 0, 381, 386, 387, 664, 0, 0, 640, 1089,
	0, 0, -2, -2, 397, 403, 404, 405, 406, 382,
	0, 409, 413, 0, 0, 0, 737, 0, 0, 64,
	0, 1061, 717, -2, -2, 0, 0, 761, 762, -2,
	902, -2, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 0, 0, 98, 99, 0, 0, 220,
	904, 96, 0, 214, 155, 1091, 0, 0, 0, 0,
	0, 0, 0, 1091, 1091, 1091, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	292, 1091, 337, 295, 0, 0, 1091, 1091, 1091, 0,
	1091, 1091, 302, 0, 303, 304, 305, 0, 205, 206,
	207, 309, 1092, 1093, 1091, 1091, 334, 0, 334, 332,
	333, 324, 325, 0, 340, 318, 319, 322, 323, 354,
	357, 374, 372, 373, 375, 367, 368, 369, 370, 0,
	378, 379, 0, 0, 0, 0, 0, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 501, 502, 503,
	504, 505, 506, 507, 480, 0, 494, 0, 0, 0,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 0,
	394, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 614, 0, 567, 575, 0, 568,
	576, 569, 577, 570, 0, 571, 578, 572, 579, 573,
	574, 580, 0, 0, 0, 394, 394, 0, 0, 35,
	648, 0, 396, 667, 0, 0, 649, 641, 642, 645,
	648, 0, 418, 407, 398, 401, 402, 384, 0, 410,
	414, 0, 416, 417, 0, 0, 62, 0, 462, 0,
	420, 422, 423, 424, 444, 0, 446, 0, 0, 0,
	58, 60, 463, 0, 1061, 723, 0, 66, 67, 0,
	0, 0, 178, 727, 728, 729, 725, 237, 0, 0,
	166, 162, 106, 107, 108, 155, 110, 155, 155, 155,
	155, 175, 175, 175, 175, 138, 139, 140, 141, 142,
	0, 0, 125, 155, 155, 155, 155, 145, 146, 147,
	148, 149, 150, 151, 152, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 157, 157, 157, 159, 159, 0,
	0, 189, 0, 645, 0, 81, 0, 1091, 0, 1091,
	93, 757, 1090, 0, 0, 748, 252, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 0, 251, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	733, 0, 1091, 288, 289, 464, 765, 766, 293, 294,
	338, 339, 296, 297, 298, 299, 300, 301, 341, 0,
	208, 209, 310, 314, 337, 0, 0, 0, 337, 316,
	317, 0, 0, 355, 359, 360, 361, 362, 515, 474,
	475, 476, 478, 495, 0, 497, 499, 485, 486, 510,
	511, 512, 0, 0, 0, 0, 508, 490, 0, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 535, 598, 599, 0, 533, 534, 545, 0, 0,
	0, 395, 623, 0, -2, 0, 513, 712, 648, 0,
	0, 0, 0, 518, 625, 0, 518, 625, 0, 0,
	0, 392, 393, 620, 617, 0, 0, 622, 0, 584,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 46,
	36, 0, 665, 0, 0, 0, 0, 644, 646, 647,
	664, 0, 633, 0, 0, 471, 0, 0, 399, 42,
	415, 411, 0, 471, 0, 0, 461, 0, 0, 0,
	0, 0, 0, 451, 0, 0, 454, 0, 0, 0,
	0, 445, 0, 0, 0, 466, 1001, 447, 0, 449,
	450, -2, 0, 0, 0, 56, 57, 0, 0, 0,
	718, 65, 0, 0, 70, 71, 719, 720, 721, 722,
	0, 95, 238, 240, 243, 244, 245, 100, 102, 103,
	0, 0, 218, 1011, 1045, 938, 212, 212, 936, 225,
	210, 211, 97, 169, 167, 0, 164, 163, 109, 175,
	175, 132, 133, 178, 0, 178, 178, 178, 0, 0,
	126, 127, 128, 129, 120, 0, 121, 122, 123, 0,
	124, 219, 0, 0, 652, 190, 191, 0, 197, 0,
	0, 215, 216, 0, 1091, 83, 735, 84, 0, 0,
	246, 1090, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 1090, 0, 1090, 749,
	750, 751, 752, 0, 85, 256, 258, 257, 261, 0,
	0, 0, 283, 1091, 287, 334, 311, 335, 336, 334,
	313, 320, 351, 496, 498, 500, 487, 508, 491, 0,
	488, 0, 0, 482, 550, 0, 0, 394, 0, 640,
	664, 554, 555, 0, 0, 0, 0, 0, 591, 0,
	0, 592, 0, 640, 0, 618, 0, 0, 566, 0,
	585, 0, 0, 586, 587, 588, 589, 590, 38, 0,
	0, 0, 650, 651, 643, 37, 0, 730, 731, 634,
	635, 636, 0, 408, 419, 400, 0, 648, 706, 0,
	0, 698, 0, 0, 471, 714, 0, 421, 440, 442,
	0, 437, 452, 453, 455, 0, 457, 0, 459, 460,
	425, 426, 427, 0, 428, 0, 0, 0, 0, 448,
	471, 0, 471, 59, 471, 61, 0, 465, 68, 69,
	0, 0, 75, 179, 180, 0, 241, 0, 101, 0,
	0, 199, 212, 212, 212, 203, 213, 204, 0, 171,
	0, 168, 105, 165, 178, 178, 134, 0, 135, 136,
	137, 0, 153, 0, 0, 0, 234, 80, 656, 655,
	197, 197, 192, 193, 0, 198, 195, 0, 156, 82,
	0, 758, 247, 248, 249, 250, 0, 88, 0, 0,
	0, 0, 0, 286, 337, 337, 489, 0, 509, 492,
	551, 552, 0, 624, 648, 40, 0, 155, 155, 603,
	155, 159, 606, 155, 608, 155, 611, 0, 0, 0,
	0, 0, 0, 0, 615, 565, 621, 0, 623, 0,
	0, 0, 175, 669, 666, 39, 638, 0, 472, 412,
	43, 47, 0, 706, 697, 708, 710, 0, 0, 0,
	702, 0, 432, 640, 0, 0, 434, 441, 0, 0,
	435, 0, 436, 456, 458, -2, 0, 0, 0, 0,
	640, 471, 54, 55, 0, 72, 73, 74, 239, 242,
	0, 217, 0, 200, 201, 202, 0, 173, 0, 170,
	130, 131, 176, 177, 175, 0, 175, 0, 160, 0,
	226, 235, 0, 653, 654, 0, 0, 194, 196, 94,
	0, 255, 0, 86, 87, 0, 0, 260, 284, 307,
	312, 493, 553, 664, 556, 600, 175, 604, 605, 607,
	609, 610, 612, 558, 557, 0, 0, 0, 0, 0,
	648, 0, 619, 0, 0, 175, 689, 44, 0, 0,
	0, 48, 0, 711, 0, 0, 0, 0, 63, 0,
	648, 715, 716, 438, 0, 443, 0, 0, 0, 446,
	648, 53, 189, 0, 430, 181, 174, 0, 178, 154,
	178, 0, 0, 236, 657, 658, 659, 660, 661, 662,
	663, 0, 89, 90, 0, 0, 0, 41, 601, 602,
	0, 0, 0, 0, 593, 0, 616, 0, 0, 671,
	670, 683, 687, 639, 637, 0, 709, 0, 701, 704,
	700, 703, 433, 51, 0, 0, 468, 0, 0, 466,
	52, 188, 0, 0, 186, 0, 183, 185, 172, 143,
	144, 158, 161, 0, 278, 0, 0, 0, 0, 262,
	559, 561, 560, 562, 0, 0, 0, 564, 581, 582,
	689, 0, 682, 685, -2, 0, 0, 699, 0, 439,
	467, 469, 470, 429, 0, 431, 104, 0, 182, 184,
	277, 0, 0, 91, 92, 85, 563, 0, 0, 0,
	676, 674, 674, 687, 0, 691, 0, 696, 0, 707,
	705, 0, 187, 279, 0, 88, 594, 0, 597, 679,
	0, 672, 675, 673, 684, 0, 690, 0, 0, 688,
	0, 0, 259, 595, 668, 0, 677, 678, 686, 0,
	0, 0, 0, 0, 680, 681, 692, 694, 221, 0,
	0, 222, 223, 0, 0, 0, 596, 224, 0, 0,
	0, 280, 281, 227, 229, 230, 0, 0, 228, 231,
	232, 233,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 392,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:363
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:368
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:402
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:408
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:412
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:422
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &Load{}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:434
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:443
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:451
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:474
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:482
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:502
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:512
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:519
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:531
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.insertAction = InsertAct
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:563
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:576
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:585
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:595
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:600
		{
			yyVAL.partitions = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:604
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:630
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.characteristic = ReadWrite
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			yyVAL.characteristic = ReadOnly
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:654
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.isolationLevel = Serializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.scope = SessionScope
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:672
		{
			yyVAL.scope = GlobalScope
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:678
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:689
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:700
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:704
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:708
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:713
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:728
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:750
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:756
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:763
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, IndexType: yyDollar[5].str, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:771
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:782
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:798
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:802
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:807
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:817
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.literal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1062
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1080
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1088
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1097
		{
			yyVAL.boolean = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.boolean = true
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.boolean = false
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.boolean = false
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.boolean = true
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1120
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.optVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1138
		{
			yyVAL.boolean = false
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.boolean = true
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1173
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.colKeyOpt = colKey
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1194
		{
			yyVAL.literal = nil
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1198
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexOptions = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1332
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1344
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 221:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1364
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 222:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1368
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1372
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 224:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1376
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1380
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1386
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1398
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1412
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1416
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1420
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1425
		{
			yyVAL.boolean = true
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.boolean = true
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.boolean = false
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1446
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = yyDollar[1].str
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1494
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1499
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1504
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1606
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1616
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1622
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1626
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1638
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1642
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1654
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1698
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1733
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1743
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1752
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1777
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = "extended "
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = "full "
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.showFilter = nil
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.showFilter = nil
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.scope = ImplicitScope
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.scope = SessionScope
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.scope = GlobalScope
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Begin{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &Begin{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &Commit{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &Rollback{}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.empty = struct{}{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2001
		{
			yyVAL.explainType = EmptyType
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.explainType = JSONType
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.explainType = TreeType
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.explainType = VitessType
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.explainType = TraditionalType
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.explainType = AnalyzeType
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &OtherRead{}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2090
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2094
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			setAllowComments(yylex, true)
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.bytes2 = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolean = true
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolean = false
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.boolean = true
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = SQLCacheStr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.boolean = false
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.boolean = true
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.boolean = true
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2163
		{
			yyVAL.selectExprs = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2172
		{
			yyVAL.strs = nil
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2188
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = SQLCacheStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = DistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = DistinctStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = StraightJoinHint
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2242
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2247
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 429:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2315
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2356
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.joinType = NormalJoinType
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.joinType = NormalJoinType
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.joinType = NormalJoinType
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.joinType = StraightJoinType
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.joinType = LeftJoinType
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.joinType = LeftJoinType
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.joinType = RightJoinType
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.joinType = RightJoinType
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2471
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2486
		{
			yyVAL.indexHints = nil
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2490
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2502
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = nil
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3056
		{
			yyVAL.matchExprOption = NoOption
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3064
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 596:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3068
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = nil
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3152
		{
			yyVAL.str = string("")
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3172
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3191
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3195
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = &NullVal{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3253
		{
			yyVAL.exprs = nil
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3262
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3271
		{
			yyVAL.orderBy = nil
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3296
		{
			yyVAL.orderDirection = AscOrder
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.orderDirection = AscOrder
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.orderDirection = DescOrder
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.limit = nil
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3317
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3321
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3326
		{
			yyVAL.indexOptions = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3330
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3334
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3349
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3357
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3361
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3371
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3375
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3380
		{
			yyVAL.lock = NoLock
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3384
		{
			yyVAL.lock = ForUpdateLock
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3388
		{
			yyVAL.lock = ShareModeLock
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3393
		{
			yyVAL.selectInto = nil
		}
	case 668:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3397
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3401
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3405
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = ""
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3414
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3418
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3423
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3427
		{
			yyVAL.str = " header"
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3432
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3436
		{
			yyVAL.str = " manifest on"
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3440
		{
			yyVAL.str = " manifest off"
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3445
		{
			yyVAL.str = ""
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3449
		{
			yyVAL.str = " overwrite on"
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3453
		{
			yyVAL.str = " overwrite off"
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3468
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3473
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3477
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3482
		{
			yyVAL.str = ""
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3486
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3491
		{
			yyVAL.str = ""
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3495
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3500
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3504
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3509
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3513
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3518
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.str = " optionally"
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3535
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3543
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3547
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3551
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3561
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3565
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3569
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3574
		{
			yyVAL.updateExprs = nil
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3578
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3588
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3598
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3604
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3610
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3624
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3630
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3636
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3640
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3646
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3650
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3654
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3658
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3662
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3670
		{
			yyVAL.bytes = []byte("charset")
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3681
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3685
		{
			yyVAL.expr = &Default{}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3694
		{
			yyVAL.boolean = false
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3696
		{
			yyVAL.boolean = true
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3699
		{
			yyVAL.boolean = false
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3701
		{
			yyVAL.boolean = true
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3704
		{
			yyVAL.ignore = false
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3706
		{
			yyVAL.ignore = true
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3710
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3714
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3716
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3720
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3724
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3726
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3732
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3734
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3742
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3745
		{
			yyVAL.str = ""
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3754
		{
			yyVAL.str = ""
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3756
		{
			yyVAL.str = yyDollar[2].colIdent.val
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3760
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3764
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3771
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3777
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3781
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3788
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4135
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4144
		{
			decNesting(yylex)
		}
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4149
		{
			skipToEnd(yylex)
		}
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4154
		{
			skipToEnd(yylex)
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			skipToEnd(yylex)
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4162
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const AT_ID = 57398
const AT_AT_ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const INDEXES = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const WARNINGS = 57491
const SEQUENCE = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const TABLES = 57547
const VITESS_METADATA = 57548
const VSCHEMA = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const EXTENDED = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const ARRAY = 57596
const CUME_DIST = 57597
const DESCRIPTION = 57598
const DENSE_RANK = 57599
const EMPTY = 57600
const EXCEPT = 57601
const FIRST_VALUE = 57602
const GROUPING = 57603
const GROUPS = 57604
const JSON_TABLE = 57605
const LAG = 57606
const LAST_VALUE = 57607
const LATERAL = 57608
const LEAD = 57609
const MEMBER = 57610
const NTH_VALUE = 57611
const NTILE = 57612
const OF = 57613
const OVER = 57614
const PERCENT_RANK = 57615
const RANK = 57616
const RECURSIVE = 57617
const ROW_NUMBER = 57618
const SYSTEM = 57619
const WINDOW = 57620
const ACTIVE = 57621
const ADMIN = 57622
const BUCKETS = 57623
const CLONE = 57624
const COMPONENT = 57625
const DEFINITION = 57626
const ENFORCED = 57627
const EXCLUDE = 57628
const FOLLOWING = 57629
const GEOMCOLLECTION = 57630
const GET_MASTER_PUBLIC_KEY = 57631
const HISTOGRAM = 57632
const HISTORY = 57633
const INACTIVE = 57634
const INVISIBLE = 57635
const LOCKED = 57636
const MASTER_COMPRESSION_ALGORITHMS = 57637
const MASTER_PUBLIC_KEY_PATH = 57638
const MASTER_TLS_CIPHERSUITES = 57639
const MASTER_ZSTD_COMPRESSION_LEVEL = 57640
const NESTED = 57641
const NETWORK_NAMESPACE = 57642
const NOWAIT = 57643
const NULLS = 57644
const OJ = 57645
const OLD = 57646
const OPTIONAL = 57647
const ORDINALITY = 57648
const ORGANIZATION = 57649
const OTHERS = 57650
const PATH = 57651
const PERSIST = 57652
const PERSIST_ONLY = 57653
const PRECEDING = 57654
const PRIVILEGE_CHECKS_USER = 57655
const PROCESS = 57656
const RANDOM = 57657
const REFERENCE = 57658
const REQUIRE_ROW_FORMAT = 57659
const RESOURCE = 57660
const RESPECT = 57661
const RESTART = 57662
const RETAIN = 57663
const REUSE = 57664
const ROLE = 57665
const SECONDARY = 57666
const SECONDARY_ENGINE = 57667
const SECONDARY_LOAD = 57668
const SECONDARY_UNLOAD = 57669
const SKIP = 57670
const SRID = 57671
const THREAD_PRIORITY = 57672
const TIES = 57673
const UNBOUNDED = 57674
const VCPU = 57675
const VISIBLE = 57676

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 38,
	33, 299,
	127, 299,
	139, 299,
	164, 313,
	165, 313,
	-2, 301,
	-1, 62,
	37, 337,
	-2, 345,
	-1, 318,
	37, 338,
	-2, 349,
	-1, 319,
	37, 339,
	-2, 350,
	-1, 333,
	115, 665,
	-2, 661,
	-1, 334,
	115, 666,
	-2, 662,
	-1, 403,
	85, 916,
	-2, 66,
	-1, 404,
	85, 833,
	-2, 67,
	-1, 409,
	85, 801,
	-2, 627,
	-1, 411,
	85, 864,
	-2, 629,
	-1, 714,
	1, 373,
	5, 373,
	12, 373,
	13, 373,
	14, 373,
	15, 373,
	17, 373,
	19, 373,
	30, 373,
	31, 373,
	43, 373,
	44, 373,
	45, 373,
	46, 373,
	47, 373,
	49, 373,
	50, 373,
	53, 373,
	54, 373,
	56, 373,
	57, 373,
	352, 373,
	-2, 391,
	-1, 717,
	54, 48,
	56, 48,
	-2, 52,
	-1, 873,
	115, 668,
	-2, 664,
	-1, 1107,
	5, 34,
	-2, 459,
	-1, 1138,
	5, 33,
	-2, 600,
	-1, 1385,
	5, 34,
	-2, 601,
	-1, 1438,
	5, 33,
	-2, 603,
	-1, 1513,
	5, 34,
	-2, 604,
}

const yyPrivate = 57344

const yyLast = 15811

var yyAct = [...]int{

	333, 1547, 1537, 1345, 1503, 1234, 1141, 989, 1451, 1418,
	1405, 1286, 669, 1319, 351, 574, 1018, 1142, 962, 1287,
	1032, 1159, 985, 58, 1283, 1185, 338, 988, 1293, 998,
	563, 905, 816, 81, 364, 1299, 1258, 271, 1099, 291,
	271, 898, 408, 1211, 1202, 835, 1086, 1002, 964, 928,
	730, 949, 875, 598, 611, 960, 668, 3, 604, 1028,
	532, 402, 711, 729, 336, 397, 298, 942, 271, 81,
	719, 394, 533, 271, 710, 271, 683, 57, 552, 621,
	1540, 1524, 1535, 1051, 405, 1511, 1532, 908, 1346, 684,
	1523, 1275, 320, 1377, 62, 537, 1510, 1050, 1313, 307,
	376, 979, 382, 383, 380, 381, 379, 378, 377, 306,
	1314, 1315, 299, 300, 301, 302, 384, 385, 305, 325,
	592, 64, 65, 66, 67, 68, 83, 84, 85, 304,
	83, 84, 85, 267, 263, 264, 265, 1049, 1477, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 980, 981, 645, 83, 84, 85, 1173, 303, 731,
	1172, 732, 1193, 1174, 1259, 1236, 1011, 259, 1408, 587,
	257, 1019, 261, 588, 585, 586, 1368, 1366, 805, 591,
	83, 84, 85, 297, 580, 581, 590, 1046, 1043, 1044,
	804, 1042, 1238, 802, 1534, 1531, 1504, 1233, 569, 1496,
	571, 943, 1003, 1261, 553, 1555, 539, 275, 1452, 261,
	1239, 1160, 1162, 809, 278, 793, 1309, 1308, 1237, 806,
	1307, 1551, 285, 1454, 1053, 1056, 803, 535, 542, 274,
	577, 262, 568, 570, 1005, 1460, 1230, 1263, 1485, 1267,
	1012, 1262, 1232, 1260, 1063, 1116, 1388, 1062, 1265, 1244,
	1113, 657, 658, 1169, 266, 1126, 283, 1264, 271, 544,
	545, 1048, 290, 271, 1093, 554, 260, 846, 725, 271,
	1266, 1268, 625, 559, 635, 271, 561, 645, 986, 567,
	81, 645, 1005, 1047, 81, 975, 81, 843, 258, 276,
	1161, 1453, 81, 549, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 365, 52, 645, 565,
	1478, 1509, 83, 84, 85, 1019, 287, 279, 566, 288,
	289, 295, 1221, 1052, 576, 280, 282, 292, 81, 277,
	294, 293, 1549, 1004, 606, 1550, 578, 1548, 1054, 1461,
	1459, 1231, 1005, 1229, 555, 556, 557, 836, 840, 1100,
	657, 658, 1217, 1218, 1219, 657, 658, 620, 546, 52,
	547, 830, 1494, 548, 83, 84, 85, 312, 71, 607,
	594, 595, 83, 84, 85, 638, 639, 640, 641, 642,
	635, 1004, 1277, 645, 882, 1469, 1001, 999, 1297, 1000,
	564, 929, 271, 271, 271, 845, 997, 1003, 880, 881,
	879, 81, 1111, 733, 1110, 610, 72, 81, 608, 83,
	84, 85, 929, 612, 1123, 795, 405, 1332, 619, 618,
	1191, 1220, 618, 619, 618, 1279, 1225, 1222, 1213, 1223,
	1216, 837, 1212, 844, 1499, 620, 1214, 1215, 620, 55,
	620, 1004, 615, 1008, 531, 831, 619, 618, 709, 1009,
	1224, 878, 619, 618, 686, 688, 690, 692, 694, 696,
	697, 1517, 728, 620, 1556, 718, 723, 687, 689, 620,
	693, 695, 597, 698, 1515, 629, 538, 632, 1495, 849,
	850, 1112, 1414, 646, 647, 648, 649, 650, 651, 652,
	363, 630, 631, 628, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 1557, 1413, 645, 1206,
	1205, 634, 633, 643, 644, 636, 637, 638, 639, 640,
	641, 642, 635, 80, 1194, 645, 1432, 865, 867, 868,
	619, 618, 271, 866, 619, 618, 791, 81, 1411, 794,
	1203, 796, 271, 271, 81, 81, 81, 620, 256, 1374,
	271, 620, 1073, 271, 540, 541, 271, 814, 815, 407,
	271, 821, 81, 1090, 1091, 1092, 721, 81, 81, 81,
	271, 81, 81, 636, 637, 638, 639, 640, 641, 642,
	635, 81, 81, 645, 23, 597, 573, 83, 84, 85,
	573, 900, 573, 820, 1087, 83, 84, 85, 573, 1176,
	1457, 1533, 818, 354, 353, 356, 357, 358, 359, 722,
	81, 724, 355, 360, 391, 392, 1466, 271, 1465, 52,
	83, 84, 85, 81, 810, 1328, 634, 633, 643, 644,
	636, 637, 638, 639, 640, 641, 642, 635, 946, 654,
	645, 872, 656, 1519, 597, 311, 899, 1457, 1507, 1006,
	951, 954, 955, 956, 952, 901, 953, 957, 871, 1284,
	1300, 1301, 1296, 876, 1457, 597, 1373, 81, 873, 969,
	667, 720, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 945, 682, 685, 685, 685, 691, 685, 685, 691,
	685, 699, 700, 701, 702, 703, 704, 705, 933, 715,
	81, 81, 869, 917, 920, 860, 851, 946, 271, 930,
	1457, 1486, 1457, 1456, 1403, 1402, 271, 271, 1390, 597,
	271, 271, 902, 903, 271, 271, 271, 81, 912, 1387,
	597, 1338, 1337, 1296, 938, 939, 1334, 1335, 1334, 1333,
	81, 533, 405, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 990, 1087, 645, 858, 597,
	913, 914, 946, 597, 919, 922, 923, 25, 818, 1383,
	407, 1020, 1021, 1022, 407, 970, 407, 910, 597, 972,
	740, 739, 407, 910, 25, 968, 1468, 1336, 976, 937,
	973, 977, 940, 941, 271, 81, 1437, 81, 946, 1055,
	1296, 993, 1177, 271, 271, 271, 271, 271, 59, 271,
	271, 1034, 25, 271, 81, 978, 55, 55, 623, 633,
	643, 644, 636, 637, 638, 639, 640, 641, 642, 635,
	271, 340, 645, 55, 1525, 271, 1136, 271, 271, 721,
	859, 1137, 271, 573, 1129, 1128, 858, 1030, 1031, 858,
	573, 573, 573, 720, 847, 808, 726, 1420, 1013, 313,
	271, 55, 872, 1395, 1033, 1324, 1070, 1180, 573, 1029,
	334, 1300, 1301, 573, 573, 573, 1380, 573, 573, 1078,
	1024, 1023, 722, 1542, 720, 858, 1235, 573, 573, 873,
	1421, 407, 951, 954, 955, 956, 952, 735, 953, 957,
	1036, 1538, 1529, 82, 1326, 1080, 1079, 272, 55, 1303,
	272, 1284, 1207, 1088, 876, 1089, 634, 633, 643, 644,
	636, 637, 638, 639, 640, 641, 642, 635, 841, 812,
	645, 1153, 1095, 1306, 1305, 1151, 1154, 1150, 272, 82,
	1152, 1149, 1522, 272, 321, 272, 1243, 271, 271, 271,
	271, 271, 1155, 1075, 955, 956, 609, 322, 925, 271,
	321, 1527, 271, 52, 613, 614, 271, 323, 1085, 1084,
	271, 926, 1143, 322, 599, 1198, 738, 1122, 671, 562,
	318, 319, 1190, 323, 1501, 1500, 600, 1175, 1435, 81,
	1014, 1015, 1016, 1017, 1104, 1105, 1178, 1188, 1181, 1138,
	1182, 1381, 1186, 1186, 990, 596, 1025, 1026, 1027, 1156,
	1145, 1146, 1120, 1148, 1164, 1165, 1416, 1167, 912, 1168,
	1039, 1144, 961, 811, 1147, 1166, 715, 407, 1187, 1170,
	715, 1195, 1196, 959, 407, 407, 407, 81, 81, 314,
	315, 1197, 1083, 1199, 1200, 1201, 308, 59, 1183, 1184,
	1082, 1357, 407, 309, 1356, 1247, 1087, 407, 407, 407,
	589, 407, 407, 1544, 1543, 1544, 1117, 81, 1114, 1204,
	834, 407, 407, 616, 1482, 1409, 842, 61, 63, 56,
	1, 1536, 271, 1347, 1417, 1045, 1502, 1226, 1450, 1318,
	996, 987, 70, 530, 81, 69, 1493, 829, 575, 995,
	854, 573, 994, 573, 1458, 1407, 1007, 1192, 1210, 1250,
	1010, 1325, 899, 623, 1241, 1242, 407, 1189, 1498, 331,
	573, 746, 744, 745, 743, 748, 1251, 747, 272, 742,
	284, 400, 958, 272, 734, 1252, 1035, 617, 73, 272,
	81, 81, 1280, 1285, 1276, 272, 1228, 1227, 1041, 1270,
	82, 839, 281, 1269, 82, 583, 82, 904, 584, 1078,
	286, 653, 82, 1143, 81, 1081, 715, 655, 1171, 873,
	406, 399, 1288, 931, 1291, 848, 603, 1355, 81, 1094,
	81, 81, 1246, 1304, 1186, 1186, 1121, 1317, 1295, 1311,
	935, 936, 1310, 990, 680, 990, 1290, 927, 82, 1331,
	339, 864, 352, 349, 350, 1316, 853, 1135, 271, 1322,
	1323, 1321, 627, 1312, 337, 329, 713, 407, 1329, 1330,
	706, 950, 948, 947, 714, 395, 1302, 1298, 271, 712,
	407, 857, 317, 1376, 81, 1476, 1348, 81, 81, 81,
	271, 316, 924, 27, 60, 81, 324, 20, 19, 1139,
	1140, 18, 21, 715, 715, 715, 715, 715, 17, 16,
	1250, 15, 272, 272, 272, 550, 31, 22, 961, 14,
	1163, 82, 1353, 1354, 13, 12, 715, 82, 1340, 11,
	10, 9, 8, 7, 1364, 407, 6, 407, 5, 4,
	310, 24, 2, 1341, 0, 1343, 0, 0, 0, 0,
	0, 0, 0, 0, 407, 0, 852, 0, 0, 0,
	1382, 0, 0, 0, 1392, 0, 0, 81, 0, 1391,
	0, 0, 0, 1143, 1178, 81, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 407, 0, 0,
	81, 0, 0, 0, 573, 0, 0, 81, 0, 0,
	1410, 327, 1412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1425, 0, 0, 0, 909, 911, 0,
	1423, 0, 0, 573, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 81,
	0, 81, 0, 0, 0, 0, 81, 0, 81, 81,
	81, 271, 272, 1436, 81, 0, 1444, 82, 1445, 1447,
	1448, 1401, 272, 272, 82, 82, 82, 1455, 1288, 1449,
	272, 81, 271, 272, 1462, 0, 272, 0, 0, 0,
	272, 1470, 82, 1463, 0, 1464, 931, 82, 82, 82,
	272, 82, 82, 1438, 1289, 0, 52, 0, 0, 1483,
	0, 82, 82, 1492, 0, 0, 0, 0, 81, 1491,
	877, 659, 660, 661, 662, 663, 664, 665, 666, 81,
	81, 1490, 1288, 0, 0, 0, 1431, 1506, 1505, 407,
	82, 0, 0, 0, 1419, 990, 81, 272, 0, 1512,
	0, 1443, 0, 82, 0, 0, 1484, 271, 0, 0,
	1361, 1362, 0, 1363, 0, 81, 1365, 0, 1367, 1143,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1526, 1528, 81, 1208, 407, 0,
	0, 0, 0, 0, 0, 0, 1530, 82, 0, 1541,
	0, 0, 0, 0, 0, 0, 1552, 714, 0, 0,
	0, 714, 0, 0, 0, 714, 0, 407, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 82, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 1375, 0, 407, 0, 272, 272, 0, 0,
	272, 272, 0, 0, 272, 272, 272, 82, 0, 0,
	1102, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	82, 1107, 1108, 1109, 1397, 1398, 1399, 407, 1115, 0,
	0, 1118, 1119, 0, 0, 0, 0, 931, 0, 1125,
	1292, 1294, 0, 1127, 0, 0, 1130, 1131, 1132, 1133,
	1134, 0, 0, 0, 0, 0, 573, 0, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 1158,
	601, 605, 0, 0, 272, 82, 0, 82, 407, 0,
	407, 1320, 0, 272, 272, 272, 272, 272, 0, 272,
	272, 0, 626, 272, 82, 0, 0, 0, 0, 0,
	1289, 714, 0, 1439, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 272, 0, 272, 272, 0,
	0, 877, 272, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 1467, 1344, 0, 681, 1349, 1350, 1351,
	272, 0, 0, 0, 0, 407, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 0, 52, 874, 0, 0,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 0, 0, 645, 714, 714,
	714, 714, 714, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 714, 716, 0, 0, 0, 0, 0,
	0, 714, 1379, 1256, 1257, 934, 0, 407, 0, 0,
	0, 0, 0, 0, 0, 1406, 0, 272, 272, 272,
	272, 272, 0, 0, 0, 0, 0, 0, 0, 272,
	407, 269, 272, 0, 0, 0, 272, 407, 0, 0,
	272, 1539, 634, 633, 643, 644, 636, 637, 638, 639,
	640, 641, 642, 635, 0, 0, 645, 0, 0, 82,
	602, 0, 396, 0, 0, 0, 0, 534, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 1441,
	572, 1442, 0, 0, 0, 0, 1406, 0, 1406, 1406,
	1406, 0, 0, 0, 1320, 0, 0, 270, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 82, 82, 0,
	0, 1406, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 398, 0,
	0, 0, 0, 270, 0, 270, 0, 82, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 1497, 0,
	1358, 0, 272, 0, 0, 0, 0, 1360, 1372, 407,
	407, 0, 0, 0, 82, 0, 0, 0, 1369, 1370,
	862, 863, 0, 931, 0, 0, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1384, 1385,
	1386, 0, 1389, 0, 0, 1520, 0, 0, 0, 0,
	1096, 1097, 1098, 0, 0, 0, 0, 0, 0, 1400,
	82, 82, 0, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 915, 916, 0, 0,
	0, 0, 0, 0, 82, 634, 633, 643, 644, 636,
	637, 638, 639, 640, 641, 642, 635, 0, 82, 645,
	82, 82, 543, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 558, 0, 0, 0, 0, 0, 560,
	0, 1371, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 272, 0,
	0, 0, 0, 0, 82, 0, 0, 82, 82, 82,
	272, 0, 0, 0, 0, 82, 0, 0, 270, 0,
	0, 0, 0, 270, 0, 1472, 1473, 1474, 1475, 270,
	1479, 0, 1480, 1481, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 1488, 1489, 634, 633,
	643, 644, 636, 637, 638, 639, 640, 641, 642, 635,
	0, 0, 645, 0, 579, 0, 582, 0, 0, 0,
	0, 0, 593, 0, 0, 1508, 0, 0, 328, 0,
	0, 0, 0, 1513, 0, 0, 708, 82, 717, 0,
	0, 0, 0, 0, 0, 82, 1076, 1077, 0, 605,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	1254, 1255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1271, 1272, 0, 1273, 1274, 0, 0,
	0, 0, 0, 0, 1553, 1554, 0, 0, 1281, 1282,
	0, 0, 270, 270, 270, 0, 0, 0, 82, 82,
	0, 82, 1106, 0, 0, 0, 82, 0, 82, 82,
	82, 272, 0, 1253, 82, 0, 0, 0, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 272, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 0, 0, 645, 0, 0,
	1327, 634, 633, 643, 644, 636, 637, 638, 639, 640,
	641, 642, 635, 0, 0, 645, 741, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 797, 798, 0, 82,
	82, 0, 0, 0, 807, 0, 0, 396, 0, 0,
	813, 0, 0, 0, 0, 0, 82, 1101, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 272, 0, 0,
	0, 0, 0, 1359, 0, 82, 0, 634, 633, 643,
	644, 636, 637, 638, 639, 640, 641, 642, 635, 0,
	0, 645, 270, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 270, 270, 0, 0, 0, 0, 0, 0,
	270, 861, 0, 270, 0, 0, 270, 792, 0, 0,
	817, 0, 0, 0, 799, 800, 801, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 819, 0, 0, 0, 0, 823, 824, 825,
	0, 827, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 1426, 1427, 1428, 1429, 1430, 0, 0, 0, 1433,
	1434, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 0,
	0, 0, 0, 328, 328, 0, 0, 328, 328, 328,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 328, 328, 328, 328, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 270, 966, 0, 763,
	270, 270, 0, 0, 270, 974, 817, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 1057, 1058, 1059,
	1060, 1061, 0, 1064, 1065, 0, 0, 1066, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 1069,
	0, 1378, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 670, 0, 0, 0, 0, 0, 0, 0, 1393,
	0, 0, 1394, 0, 270, 1396, 0, 0, 0, 1545,
	751, 0, 0, 270, 270, 270, 270, 270, 0, 270,
	270, 0, 0, 270, 0, 1038, 0, 1040, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 1067, 270, 0, 1071, 1072, 764,
	0, 0, 270, 0, 0, 0, 0, 817, 1422, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	270, 0, 777, 780, 781, 782, 783, 784, 785, 0,
	786, 787, 788, 789, 790, 765, 766, 767, 768, 749,
	750, 778, 0, 752, 0, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 769, 770, 771, 772, 773,
	774, 775, 776, 0, 0, 0, 0, 328, 328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 25, 26,
	53, 28, 29, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 30, 49, 50, 0, 932, 270, 270, 270,
	270, 270, 0, 0, 779, 0, 0, 0, 0, 1157,
	0, 0, 270, 39, 0, 0, 966, 55, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 33, 35, 34, 37, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1209, 38,
	45, 46, 0, 0, 47, 48, 36, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 41, 270, 42, 43, 0, 0, 1240, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 1352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 517, 505, 0, 462, 520, 435, 452, 528,
	453, 456, 493, 420, 475, 171, 450, 0, 439, 415,
	446, 416, 437, 464, 115, 468, 434, 507, 478, 519,
	143, 440, 526, 145, 484, 0, 217, 159, 0, 0,
	466, 509, 473, 502, 461, 494, 425, 483, 521, 451,
	491, 522, 0, 932, 0, 83, 84, 85, 0, 991,
	992, 0, 0, 0, 0, 0, 105, 270, 488, 516,
	448, 490, 492, 414, 485, 0, 418, 421, 527, 512,
	443, 444, 1179, 0, 0, 0, 0, 0, 0, 465,
	474, 499, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 441, 0, 482, 0, 0, 0, 422, 419, 0,
	0, 463, 0, 0, 0, 424, 0, 442, 500, 0,
	412, 124, 504, 511, 460, 273, 515, 458, 457, 518,
	190, 0, 221, 127, 142, 101, 139, 87, 97, 0,
	126, 168, 197, 201, 508, 438, 447, 109, 445, 199,
	178, 237, 481, 180, 198, 146, 227, 191, 236, 246,
	247, 224, 244, 251, 214, 90, 223, 235, 106, 209,
	92, 233, 220, 157, 136, 137, 91, 0, 195, 114,
	122, 111, 170, 230, 231, 110, 254, 98, 243, 94,
	99, 242, 164, 226, 234, 158, 151, 93, 232, 156,
	150, 141, 118, 129, 188, 148, 189, 130, 161, 160,
	162, 0, 417, 0, 218, 240, 255, 103, 433, 225,
	249, 250, 0, 0, 104, 123, 117, 187, 121, 163,
	100, 132, 215, 140, 147, 194, 253, 177, 200, 107,
	239, 216, 429, 432, 427, 428, 476, 477, 523, 524,
	525, 501, 423, 0, 430, 431, 0, 506, 513, 514,
	480, 86, 95, 144, 252, 192, 120, 241, 413, 426,
	113, 436, 0, 0, 449, 454, 455, 467, 469, 470,
	471, 472, 479, 486, 487, 489, 495, 496, 497, 498,
	503, 510, 529, 88, 89, 96, 102, 108, 112, 116,
	119, 125, 128, 131, 133, 134, 135, 138, 149, 152,
	153, 154, 155, 165, 166, 167, 169, 172, 173, 174,
	175, 176, 179, 181, 182, 183, 184, 185, 186, 193,
	196, 202, 203, 204, 205, 206, 207, 208, 210, 211,
	212, 213, 219, 222, 228, 229, 238, 245, 248, 517,
	505, 0, 462, 520, 435, 452, 528, 453, 456, 493,
	420, 475, 171, 450, 0, 439, 415, 446, 416, 437,
	464, 115, 468, 434, 507, 478, 519, 143, 440, 526,
	145, 484, 0, 217, 159, 0, 0, 466, 509, 473,
	502, 461, 494, 425, 483, 521, 451, 491, 522, 0,
	0, 0, 83, 84, 85, 0, 991, 992, 0, 0,
	0, 0, 0, 105, 0, 488, 516, 448, 490, 492,
	414, 485, 0, 418, 421, 527, 512, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 465, 474, 499, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	482, 0, 0, 0, 422, 419, 0, 0, 463, 0,
	0, 0, 424, 0, 442, 500, 0, 412, 124, 504,
	511, 460, 273, 515, 458, 457, 518, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 508, 438, 447, 109, 445, 199, 178, 237, 481,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 417,
	0, 218, 240, 255, 103, 433, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 429,
	432, 427, 428, 476, 477, 523, 524, 525, 501, 423,
	0, 430, 431, 0, 506, 513, 514, 480, 86, 95,
	144, 252, 192, 120, 241, 413, 426, 113, 436, 0,
	0, 449, 454, 455, 467, 469, 470, 471, 472, 479,
	486, 487, 489, 495, 496, 497, 498, 503, 510, 529,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 517, 505, 0, 462,
	520, 435, 452, 528, 453, 456, 493, 420, 475, 171,
	450, 0, 439, 415, 446, 416, 437, 464, 115, 468,
	434, 507, 478, 519, 143, 440, 526, 145, 484, 0,
	217, 159, 0, 0, 466, 509, 473, 502, 461, 494,
	425, 483, 521, 451, 491, 522, 55, 0, 0, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 488, 516, 448, 490, 492, 414, 485, 0,
	418, 421, 527, 512, 443, 444, 0, 0, 0, 0,
	0, 0, 0, 465, 474, 499, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 441, 0, 482, 0, 0,
	0, 422, 419, 0, 0, 463, 0, 0, 0, 424,
	0, 442, 500, 0, 412, 124, 504, 511, 460, 273,
	515, 458, 457, 518, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 508, 438,
	447, 109, 445, 199, 178, 237, 481, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 417, 0, 218, 240,
	255, 103, 433, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 429, 432, 427, 428,
	476, 477, 523, 524, 525, 501, 423, 0, 430, 431,
	0, 506, 513, 514, 480, 86, 95, 144, 252, 192,
	120, 241, 413, 426, 113, 436, 0, 0, 449, 454,
	455, 467, 469, 470, 471, 472, 479, 486, 487, 489,
	495, 496, 497, 498, 503, 510, 529, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 517, 505, 0, 462, 520, 435, 452,
	528, 453, 456, 493, 420, 475, 171, 450, 0, 439,
	415, 446, 416, 437, 464, 115, 468, 434, 507, 478,
	519, 143, 440, 526, 145, 484, 0, 217, 159, 0,
	0, 466, 509, 473, 502, 461, 494, 425, 483, 521,
	451, 491, 522, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 488,
	516, 448, 490, 492, 414, 485, 0, 418, 421, 527,
	512, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	465, 474, 499, 459, 0, 0, 0, 0, 0, 0,
	1249, 0, 441, 0, 482, 0, 0, 0, 422, 419,
	0, 0, 463, 0, 0, 0, 424, 0, 442, 500,
	0, 412, 124, 504, 511, 460, 273, 515, 458, 457,
	518, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 508, 438, 447, 109, 445,
	199, 178, 237, 481, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 417, 0, 218, 240, 255, 103, 433,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 429, 432, 427, 428, 476, 477, 523,
	524, 525, 501, 423, 0, 430, 431, 0, 506, 513,
	514, 480, 86, 95, 144, 252, 192, 120, 241, 413,
	426, 113, 436, 0, 0, 449, 454, 455, 467, 469,
	470, 471, 472, 479, 486, 487, 489, 495, 496, 497,
	498, 503, 510, 529, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	517, 505, 0, 462, 520, 435, 452, 528, 453, 456,
	493, 420, 475, 171, 450, 0, 439, 415, 446, 416,
	437, 464, 115, 468, 434, 507, 478, 519, 143, 440,
	526, 145, 484, 0, 217, 159, 0, 0, 466, 509,
	473, 502, 461, 494, 425, 483, 521, 451, 491, 522,
	0, 0, 0, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 488, 516, 448, 490,
	492, 414, 485, 0, 418, 421, 527, 512, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 465, 474, 499,
	459, 0, 0, 0, 0, 0, 0, 975, 0, 441,
	0, 482, 0, 0, 0, 422, 419, 0, 0, 463,
	0, 0, 0, 424, 0, 442, 500, 0, 412, 124,
	504, 511, 460, 273, 515, 458, 457, 518, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 508, 438, 447, 109, 445, 199, 178, 237,
	481, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	417, 0, 218, 240, 255, 103, 433, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	429, 432, 427, 428, 476, 477, 523, 524, 525, 501,
	423, 0, 430, 431, 0, 506, 513, 514, 480, 86,
	95, 144, 252, 192, 120, 241, 413, 426, 113, 436,
	0, 0, 449, 454, 455, 467, 469, 470, 471, 472,
	479, 486, 487, 489, 495, 496, 497, 498, 503, 510,
	529, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 517, 505, 0,
	462, 520, 435, 452, 528, 453, 456, 493, 420, 475,
	171, 450, 0, 439, 415, 446, 416, 437, 464, 115,
	468, 434, 507, 478, 519, 143, 440, 526, 145, 484,
	0, 217, 159, 0, 0, 466, 509, 473, 502, 461,
	494, 425, 483, 521, 451, 491, 522, 0, 0, 0,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 488, 516, 448, 490, 492, 414, 485,
	0, 418, 421, 527, 512, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 465, 474, 499, 459, 0, 0,
	0, 0, 0, 0, 870, 0, 441, 0, 482, 0,
	0, 0, 422, 419, 0, 0, 463, 0, 0, 0,
	424, 0, 442, 500, 0, 412, 124, 504, 511, 460,
	273, 515, 458, 457, 518, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 508,
	438, 447, 109, 445, 199, 178, 237, 481, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 417, 0, 218,
	240, 255, 103, 433, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 429, 432, 427,
	428, 476, 477, 523, 524, 525, 501, 423, 0, 430,
	431, 0, 506, 513, 514, 480, 86, 95, 144, 252,
	192, 120, 241, 413, 426, 113, 436, 0, 0, 449,
	454, 455, 467, 469, 470, 471, 472, 479, 486, 487,
	489, 495, 496, 497, 498, 503, 510, 529, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 517, 505, 0, 462, 520, 435,
	452, 528, 453, 456, 493, 420, 475, 171, 450, 0,
	439, 415, 446, 416, 437, 464, 115, 468, 434, 507,
	478, 519, 143, 440, 526, 145, 484, 0, 217, 159,
	0, 0, 466, 509, 473, 502, 461, 494, 425, 483,
	521, 451, 491, 522, 0, 0, 0, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	488, 516, 448, 490, 492, 414, 485, 0, 418, 421,
	527, 512, 443, 444, 0, 0, 0, 0, 0, 0,
	0, 465, 474, 499, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 441, 0, 482, 0, 0, 0, 422,
	419, 0, 0, 463, 0, 0, 0, 424, 0, 442,
	500, 0, 412, 124, 504, 511, 460, 273, 515, 458,
	457, 518, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 508, 438, 447, 109,
	445, 199, 178, 237, 481, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 417, 0, 218, 240, 255, 103,
	433, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 429, 432, 427, 428, 476, 477,
	523, 524, 525, 501, 423, 0, 430, 431, 0, 506,
	513, 514, 480, 86, 95, 144, 252, 192, 120, 241,
	413, 426, 113, 436, 0, 0, 449, 454, 455, 467,
	469, 470, 471, 472, 479, 486, 487, 489, 495, 496,
	497, 498, 503, 510, 529, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248, 517, 505, 0, 462, 520, 435, 452, 528, 453,
	456, 493, 420, 475, 171, 450, 0, 439, 415, 446,
	416, 437, 464, 115, 468, 434, 507, 478, 519, 143,
	440, 526, 145, 484, 0, 217, 159, 0, 0, 466,
	509, 473, 502, 461, 494, 425, 483, 521, 451, 491,
	522, 0, 0, 0, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 488, 516, 448,
	490, 492, 414, 485, 0, 418, 421, 527, 512, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 465, 474,
	499, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	441, 0, 482, 0, 0, 0, 422, 419, 0, 0,
	463, 0, 0, 0, 424, 0, 442, 500, 0, 412,
	124, 504, 511, 460, 273, 515, 458, 457, 518, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 508, 438, 447, 109, 445, 199, 178,
	237, 481, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 410,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 417, 0, 218, 240, 255, 103, 433, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 411, 409,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 429, 432, 427, 428, 476, 477, 523, 524, 525,
	501, 423, 0, 430, 431, 0, 506, 513, 514, 480,
	86, 95, 144, 252, 192, 120, 241, 413, 426, 113,
	436, 0, 0, 449, 454, 455, 467, 469, 470, 471,
	472, 479, 486, 487, 489, 495, 496, 497, 498, 503,
	510, 529, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 517, 505,
	0, 462, 520, 435, 452, 528, 453, 456, 493, 420,
	475, 171, 450, 0, 439, 415, 446, 416, 437, 464,
	115, 468, 434, 507, 478, 519, 143, 440, 526, 145,
	484, 0, 217, 159, 0, 0, 466, 509, 473, 502,
	461, 494, 425, 483, 521, 451, 491, 522, 0, 0,
	0, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 488, 516, 448, 490, 492, 414,
	485, 0, 418, 421, 527, 512, 443, 444, 0, 0,
	0, 0, 0, 0, 0, 465, 474, 499, 459, 0,
	0, 0, 0, 0, 0, 0, 0, 441, 0, 482,
	0, 0, 0, 422, 419, 0, 0, 463, 0, 0,
	0, 424, 0, 442, 500, 0, 412, 124, 504, 511,
	460, 273, 515, 458, 457, 518, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	508, 438, 447, 109, 445, 199, 178, 237, 481, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 727, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 410, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 417, 0,
	218, 240, 255, 103, 433, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 411, 409, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 429, 432,
	427, 428, 476, 477, 523, 524, 525, 501, 423, 0,
	430, 431, 0, 506, 513, 514, 480, 86, 95, 144,
	252, 192, 120, 241, 413, 426, 113, 436, 0, 0,
	449, 454, 455, 467, 469, 470, 471, 472, 479, 486,
	487, 489, 495, 496, 497, 498, 503, 510, 529, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 517, 505, 0, 462, 520,
	435, 452, 528, 453, 456, 493, 420, 475, 171, 450,
	0, 439, 415, 446, 416, 437, 464, 115, 468, 434,
	507, 478, 519, 143, 440, 526, 145, 484, 0, 217,
	159, 0, 0, 466, 509, 473, 502, 461, 494, 425,
	483, 521, 451, 491, 522, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 488, 516, 448, 490, 492, 414, 485, 0, 418,
	421, 527, 512, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 465, 474, 499, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 441, 0, 482, 0, 0, 0,
	422, 419, 0, 0, 463, 0, 0, 0, 424, 0,
	442, 500, 0, 412, 124, 504, 511, 460, 273, 515,
	458, 457, 518, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 508, 438, 447,
	109, 445, 199, 178, 237, 481, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	401, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 410, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 417, 0, 218, 240, 255,
	103, 433, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 411, 409, 404, 403, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 429, 432, 427, 428, 476,
	477, 523, 524, 525, 501, 423, 0, 430, 431, 0,
	506, 513, 514, 480, 86, 95, 144, 252, 192, 120,
	241, 413, 426, 113, 436, 0, 0, 449, 454, 455,
	467, 469, 470, 471, 472, 479, 486, 487, 489, 495,
	496, 497, 498, 503, 510, 529, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 906, 0, 335, 0, 0,
	0, 115, 0, 332, 0, 0, 0, 143, 907, 375,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 354, 353, 356, 357, 358,
	359, 0, 0, 105, 355, 360, 361, 362, 0, 0,
	0, 330, 347, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 326, 0, 0, 0,
	389, 0, 346, 0, 0, 341, 342, 343, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 388,
	0, 0, 273, 0, 0, 386, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 376,
	387, 382, 383, 380, 381, 379, 378, 377, 390, 368,
	369, 370, 371, 373, 0, 384, 385, 372, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 335, 0, 0, 0, 115, 0, 332, 0, 0,
	0, 143, 0, 375, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 982, 0, 55, 0, 0, 83, 84, 85, 354,
	353, 356, 357, 358, 359, 0, 0, 105, 355, 360,
	361, 362, 983, 0, 0, 330, 347, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	0, 0, 0, 0, 389, 0, 346, 0, 0, 341,
	342, 343, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 388, 0, 0, 273, 0, 0, 386,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 376, 387, 382, 383, 380, 381, 379,
	378, 377, 390, 368, 369, 370, 371, 373, 0, 384,
	385, 372, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 335, 0, 0, 0, 115,
	0, 332, 0, 0, 0, 143, 0, 375, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 597,
	83, 84, 85, 354, 353, 356, 357, 358, 359, 0,
	0, 105, 355, 360, 361, 362, 0, 0, 0, 330,
	347, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 345, 0, 0, 0, 0, 389, 0,
	346, 0, 0, 341, 342, 343, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 388, 0, 0,
	273, 0, 0, 386, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 376, 387, 382,
	383, 380, 381, 379, 378, 377, 390, 368, 369, 370,
	371, 373, 0, 384, 385, 372, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 171, 0, 0, 0, 0, 335,
	0, 0, 0, 115, 0, 332, 0, 0, 0, 143,
	0, 375, 145, 0, 0, 217, 159, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 83, 84, 85, 354, 353, 356,
	357, 358, 359, 0, 0, 105, 355, 360, 361, 362,
	0, 0, 0, 330, 347, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 345, 326, 0,
	0, 0, 389, 0, 346, 0, 0, 341, 342, 343,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 388, 0, 0, 273, 0, 0, 386, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 376, 387, 382, 383, 380, 381, 379, 378, 377,
	390, 368, 369, 370, 371, 373, 0, 384, 385, 372,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 335, 0, 0, 0, 115, 0, 332,
	0, 0, 0, 143, 0, 375, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 83, 84,
	85, 354, 921, 356, 357, 358, 359, 0, 0, 105,
	355, 360, 361, 362, 0, 0, 0, 330, 347, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 345, 326, 0, 0, 0, 389, 0, 346, 0,
	0, 341, 342, 343, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 388, 0, 0, 273, 0,
	0, 386, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 376, 387, 382, 383, 380,
	381, 379, 378, 377, 390, 368, 369, 370, 371, 373,
	0, 384, 385, 372, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 0, 335, 0, 0,
	0, 115, 0, 332, 0, 0, 0, 143, 0, 375,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 354, 918, 356, 357, 358,
	359, 0, 0, 105, 355, 360, 361, 362, 0, 0,
	0, 330, 347, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 326, 0, 0, 0,
	389, 0, 346, 0, 0, 341, 342, 343, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 388,
	0, 0, 273, 0, 0, 386, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 376,
	387, 382, 383, 380, 381, 379, 378, 377, 390, 368,
	369, 370, 371, 373, 0, 384, 385, 372, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 335, 0, 0, 0, 115, 0, 332,
	0, 0, 0, 143, 0, 375, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 83, 84,
	85, 354, 353, 356, 357, 358, 359, 0, 0, 105,
	355, 360, 361, 362, 0, 0, 0, 330, 347, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 345, 0, 0, 0, 0, 389, 0, 346, 0,
	0, 341, 342, 343, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 388, 0, 0, 273, 0,
	0, 386, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 376, 387, 382, 383, 380,
	381, 379, 378, 377, 390, 368, 369, 370, 371, 373,
	0, 384, 385, 372, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 0, 335, 0, 0,
	0, 115, 0, 332, 0, 0, 0, 143, 0, 375,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 354, 353, 356, 357, 358,
	359, 0, 0, 105, 355, 360, 361, 362, 0, 0,
	0, 330, 347, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 0, 0, 0, 0,
	389, 0, 346, 0, 0, 341, 342, 343, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 388,
	0, 0, 273, 0, 0, 386, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 376,
	387, 382, 383, 380, 381, 379, 378, 377, 390, 368,
	369, 370, 371, 373, 0, 384, 385, 372, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 143, 0, 375, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 83, 84, 85, 354,
	353, 356, 357, 358, 359, 0, 0, 105, 355, 360,
	361, 362, 0, 0, 0, 0, 347, 0, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	0, 0, 0, 0, 389, 0, 346, 0, 0, 341,
	342, 343, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 388, 0, 0, 273, 0, 0, 386,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 1546, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 376, 387, 382, 383, 380, 381, 379,
	378, 377, 390, 368, 369, 370, 371, 373, 0, 384,
	385, 372, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 375, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 597,
	83, 84, 85, 354, 353, 356, 357, 358, 359, 0,
	0, 105, 355, 360, 361, 362, 0, 0, 0, 0,
	347, 0, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 345, 0, 0, 0, 0, 389, 0,
	346, 0, 0, 341, 342, 343, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 388, 0, 0,
	273, 0, 0, 386, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 376, 387, 382,
	383, 380, 381, 379, 378, 377, 390, 368, 369, 370,
	371, 373, 0, 384, 385, 372, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 143,
	0, 375, 145, 0, 0, 217, 159, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 83, 84, 85, 354, 353, 356,
	357, 358, 359, 0, 0, 105, 355, 360, 361, 362,
	0, 0, 0, 0, 347, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 345, 0, 0,
	0, 0, 389, 0, 346, 0, 0, 341, 342, 343,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 388, 0, 0, 273, 0, 0, 386, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 376, 387, 382, 383, 380, 381, 379, 378, 377,
	390, 368, 369, 370, 371, 373, 0, 384, 385, 372,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 633, 643, 644,
	636, 637, 638, 639, 640, 641, 642, 635, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 622, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 143, 0, 0,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 85, 0, 624, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 619,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 273, 0, 0, 0, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 143, 0, 0, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 77, 78, 0, 74, 0, 0, 0,
	79, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 965, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 85, 0, 967, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	273, 0, 0, 0, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 143, 0, 0, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 965, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 85, 0, 967, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	273, 0, 0, 0, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 963, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 143,
	0, 0, 145, 0, 0, 217, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 85, 0, 0, 855,
	0, 0, 856, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 737,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 736, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 143, 0, 0,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 273, 0, 0, 0, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 143, 0, 0, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 84, 85, 0, 967, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	273, 0, 0, 0, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 143,
	0, 0, 145, 0, 0, 217, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 85, 0, 624, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 707, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 393, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 143, 0, 0, 145, 0, 0,
	217, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 273,
	0, 0, 0, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 143, 0,
	0, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 268, 0, 273, 0, 0, 0, 0, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 0, 0, 0, 109, 0, 199, 178, 237,
	0, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	0, 0, 218, 240, 255, 103, 0, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	95, 144, 252, 192, 120, 241, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 143, 0, 0, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 273, 0, 0,
	0, 0, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 0, 0, 0, 109,
	0, 199, 178, 237, 0, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 0, 0, 218, 240, 255, 103,
	0, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 95, 144, 252, 192, 120, 241,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248,
}
var yyPact = [...]int{

	2772, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1032, 1072, -1000, -1000, -1000, -1000, -1000,
	-1000, 313, 11098, 42, 105, 8, 15125, 103, 96, 15459,
	-1000, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -64,
	-93, -1000, 778, -1000, -1000, -1000, -1000, -1000, 1029, 1037,
	853, 1019, 939, -1000, 7746, 79, 79, 14791, 6410, -1000,
	-1000, 351, 15459, 100, 15459, -159, 75, 75, 75, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 102, 15459, 562, 562,
	240, -1000, 15459, 73, 562, 73, 73, 73, 15459, -1000,
	158, -1000, -1000, -1000, 15459, 562, 949, 297, 72, 3981,
	-1000, 197, -1000, 3981, 20, 3981, -53, 1048, 21, -43,
	-1000, 3981, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 528, 955, 9094, 9094,
	1032, -1000, 778, -1000, -1000, -1000, 919, 7746, -1000, -1000,
	923, -1000, -1000, -1000, 374, 1062, -1000, 10764, 157, -1000,
	9094, 398, 762, -1000, -1000, 762, -1000, -1000, 135, -1000,
	-1000, 10096, 10096, 10096, 10096, 10096, 10096, 10096, 10096, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 762, -1000, 8760, 762, 762, 762, 762,
	762, 762, 762, 762, 9094, 762, 762, 762, 762, 762,
	762, 762, 762, 762, 762, 762, 762, 762, 762, 762,
	762, 14450, 13448, 15459, 828, 555, -1000, -1000, 153, 800,
	6063, -77, -1000, -1000, -1000, 318, 12780, -1000, -1000, -1000,
	946, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	724, 15459, -1000, 2549, -1000, 562, 3981, 87, 562, 338,
	562, 15459, 15459, 3981, 3981, 3981, 31, 64, 52, 15459,
	799, 84, 15459, 1000, 876, 15459, 562, 562, -1000, 5369,
	-1000, 3981, 297, -1000, 499, 9094, 3981, 3981, 3981, 15459,
	3981, 3981, -1000, -1000, -1000, 350, -1000, -1000, -1000, -1000,
	3981, 3981, -1000, 1059, 336, -1000, -1000, -1000, -1000, 9094,
	255, -1000, 875, -1000, -1000, -1000, -1000, -1000, -1000, 1067,
	192, 377, 152, 798, -1000, 455, 1029, 528, 923, 12446,
	829, -1000, 923, -1000, -1000, -1000, 15459, -1000, 9094, 9094,
	456, -1000, 14116, -1000, -1000, 5022, 265, 10096, 384, 305,
	10096, 10096, 10096, 10096, 10096, 10096, 10096, 10096, 10096, 10096,
	10096, 10096, 10096, 10096, 10096, 529, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 562, -1000, 778, 542, 542, 171,
	171, 171, 171, 171, 171, 171, 10430, 6744, 528, 721,
	371, 8760, 7746, 7746, 9094, 9094, 8414, 8080, 7746, 937,
	310, 371, 15459, -1000, -1000, 9762, -1000, -1000, -1000, -1000,
	-1000, 528, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15459,
	15459, 7746, 7746, 7746, 7746, 7746, 45, 15459, -1000, 651,
	849, -1000, -1000, -1000, 1011, 11778, 12112, 45, 615, 13448,
	15459, -1000, -1000, 13448, 15459, 4675, 5716, -77, -1000, 759,
	-1000, -136, -88, 7078, 168, -1000, -1000, -1000, -1000, 3634,
	254, 592, 372, -52, -1000, -1000, -1000, 803, -1000, 803,
	803, 803, 803, -22, -22, -22, -22, -1000, -1000, -1000,
	-1000, -1000, 826, 825, -1000, 803, 803, 803, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 814, 814, 814, 809,
	809, 846, -1000, 15459, 3981, 997, 3981, -1000, 68, -1000,
	-1000, -1000, 15459, 15459, 15459, 15459, 15459, 124, 15459, 15459,
	797, -1000, 15459, 3981, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 371, -1000, -1000, -1000, -1000, -1000, -1000, 15459,
	-1000, -1000, -1000, -1000, 15459, 297, 15459, 15459, 371, -1000,
	490, 15459, -1000, 914, 9094, 9094, 5369, 9094, -1000, -1000,
	-1000, 955, -1000, 1031, -1000, 934, 933, 1044, 7746, 13448,
	-1000, -1000, 265, 346, -1000, -1000, 492, -1000, -1000, -1000,
	-1000, 149, 762, -1000, 2215, -1000, -1000, -1000, -1000, 384,
	10096, 10096, 10096, 198, 2215, 2281, 1667, 722, 171, 273,
	273, 167, 167, 167, 167, 167, 473, 473, -1000, -1000,
	-1000, 528, -1000, -1000, -1000, 528, 7746, 7746, 790, -1000,
	9094, -1000, 528, 702, 702, 348, 459, 239, 1057, 702,
	234, 1055, 702, 702, 7746, -1000, -1000, 331, -1000, 9094,
	528, -1000, 140, -1000, 415, 789, 788, 702, 528, 528,
	702, 702, 806, 762, -1000, 15459, 13448, 13448, 13448, 13448,
	13448, -1000, 898, 894, -1000, 892, 888, 909, 15459, -1000,
	706, 11778, 160, 762, -1000, 13782, -1000, -1000, 1044, 13448,
	582, -1000, 582, -1000, 138, -1000, -1000, 759, -77, -81,
	-1000, -1000, -1000, -1000, 371, -1000, 537, 746, 3287, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 812, 562, -1000, 972,
	206, 314, 562, 969, -1000, -1000, -1000, 953, -1000, 349,
	-57, -1000, -1000, 461, -22, -22, -1000, -1000, 168, 945,
	168, 168, 168, 478, 478, -1000, -1000, -1000, -1000, 447,
	-1000, -1000, -1000, 446, -1000, 859, 15459, 3981, -1000, -1000,
	-1000, -1000, 294, 294, 214, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, 832, -1000, -1000,
	-1000, -1000, 3, 30, 81, -1000, 3981, -1000, 336, 336,
	-1000, -1000, -1000, -1000, -1000, 906, 371, 371, 134, -1000,
	-1000, 15459, -1000, -1000, -1000, -1000, 1042, 9094, -1000, 742,
	-1000, -1000, -1000, 4328, 7746, -1000, 198, 2215, 2197, -1000,
	10096, 10096, -1000, -1000, 702, 702, 371, -1000, -1000, -1000,
	53, 529, 53, 10096, 10096, -1000, 10096, 10096, -1000, -173,
	793, 298, -1000, 9094, 343, -1000, 5369, -1000, 10096, 10096,
	-1000, -1000, -1000, -1000, -1000, 858, 15459, 762, -1000, 11778,
	15459, 744, -1000, 303, 849, 818, 856, 607, -1000, -1000,
	-1000, -1000, 891, -1000, 890, -1000, -1000, -1000, -1000, -1000,
	93, 90, 89, 15459, -1000, 1032, 582, -1000, -1000, 183,
	-1000, -1000, -140, -132, -1000, -1000, -1000, 3634, -1000, 3634,
	15459, 59, -1000, 562, 562, -1000, -1000, -1000, 810, 851,
	10096, -1000, -1000, -1000, 568, 168, 168, -1000, 306, -1000,
	-1000, -1000, 682, -1000, 680, 731, 675, 15459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15459, -1000, -1000,
	-1000, -1000, -1000, 15459, -179, 562, 15459, 15459, 15459, 15459,
	-1000, 297, 297, -1000, 5369, -1000, 1040, 1035, 371, -1000,
	-1000, 528, -1000, 10096, 2215, 2215, -1000, -1000, 528, 803,
	803, -1000, 803, 809, -1000, 803, -1, 803, -2, 528,
	528, 2052, 1939, 647, 530, 762, -167, -1000, 371, 9094,
	-1000, 1746, 820, -1000, 974, 606, 713, -1000, -1000, 7412,
	528, 673, 131, 662, -1000, 1032, 15459, 9094, -1000, -1000,
	9094, 808, -1000, 9094, -1000, -1000, -1000, 762, 762, 762,
	662, 1029, -1000, -1000, -1000, -1000, 3287, -1000, 658, -1000,
	803, -1000, -1000, -1000, 15459, -47, 1066, 2215, -1000, -1000,
	-1000, -1000, -1000, -22, 476, -22, 444, -1000, 419, 3981,
	-1000, -1000, -1000, -1000, 990, -1000, 5369, -1000, -1000, 802,
	836, -1000, -1000, -1000, -1000, -1000, 9094, 9094, -1000, 2215,
	-1000, -1000, 122, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10096, 10096, 10096, 10096, 10096, 1029, 464, 371, 10096,
	10096, 960, -1000, 762, -1000, -1000, 761, 15459, 15459, -1000,
	15459, 1029, -1000, 371, 371, 15459, 371, 13114, 15459, 15459,
	11432, -1000, 154, 15459, -1000, 656, -1000, 207, -1000, -145,
	168, -1000, 168, 561, 559, -1000, 762, 730, -1000, 300,
	15459, 15459, 371, 727, -1000, -1000, 415, 415, 415, 415,
	43, 528, -1000, 415, 415, 1065, -1000, 762, -1000, 778,
	123, -1000, -1000, -1000, 654, 608, -1000, 608, 608, 160,
	154, -1000, 562, 277, 416, -1000, 54, 15459, 365, 957,
	-1000, 956, -1000, -1000, -1000, -1000, -1000, 40, 5369, 3634,
	591, -1000, -1000, -1000, -1000, -1000, 528, 46, -183, -1000,
	-1000, -1000, 15459, 713, 528, 15459, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 411, -1000, -1000, 15459, -1000, -1000, 399,
	-1000, -1000, 587, -1000, 15459, -1000, -1000, 832, -1000, 902,
	-176, -188, 677, -1000, -1000, -1000, 779, -1000, -1000, 40,
	926, -179, -1000, 862, -1000, 15459, -1000, 37, -1000, -181,
	544, 35, -186, 848, 762, -189, 830, -1000, 1054, 9428,
	-1000, -1000, 1056, 191, 191, 415, 528, -1000, -1000, -1000,
	65, 435, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1292, 56, 584, 1291, 1290, 1289, 1288, 1286, 1283,
	1282, 1281, 1280, 1279, 1275, 1274, 1269, 1267, 1266, 1265,
	1261, 1259, 1258, 1252, 1251, 1248, 1247, 94, 1246, 1244,
	1243, 1242, 1241, 1235, 1233, 38, 87, 31, 54, 1232,
	92, 1351, 1231, 55, 74, 62, 1229, 35, 1227, 1226,
	71, 1225, 1223, 51, 1222, 1221, 1794, 1220, 65, 1216,
	21, 46, 1215, 1214, 1212, 1207, 64, 1119, 1206, 1204,
	14, 1203, 1202, 89, 1201, 52, 12, 11, 34, 19,
	1200, 831, 26, 1197, 49, 1194, 1186, 1182, 1177, 23,
	1176, 58, 1175, 99, 53, 1174, 10, 67, 28, 24,
	6, 1171, 1170, 17, 61, 50, 63, 1168, 1165, 548,
	1161, 1160, 45, 1158, 1155, 1152, 30, 1151, 78, 476,
	1148, 1147, 1146, 1138, 42, 870, 490, 15, 79, 1137,
	1136, 1134, 1860, 32, 48, 18, 1132, 66, 1880, 41,
	1131, 1130, 36, 1129, 1127, 1125, 1124, 1123, 1122, 1121,
	240, 1118, 1117, 1111, 16, 22, 1110, 1107, 59, 20,
	1106, 1105, 1104, 44, 60, 1102, 1099, 47, 1098, 1097,
	25, 1096, 1095, 1093, 1092, 1091, 27, 7, 1090, 13,
	1089, 8, 1088, 29, 1086, 4, 1085, 9, 1084, 3,
	0, 1083, 5, 43, 1, 1081, 2, 1080, 1079, 306,
	698, 70, 1078, 76,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 190, 190, 190, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 30,
	30, 8, 9, 9, 9, 9, 201, 201, 50, 50,
	51, 51, 97, 97, 10, 11, 11, 106, 106, 105,
	105, 105, 107, 107, 107, 107, 140, 140, 12, 12,
	12, 12, 12, 12, 12, 192, 192, 191, 189, 189,
	188, 188, 187, 18, 172, 174, 174, 173, 173, 173,
	173, 164, 143, 143, 143, 143, 146, 146, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 147, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	163, 163, 150, 150, 158, 158, 159, 159, 159, 156,
	156, 157, 157, 160, 160, 160, 152, 152, 153, 153,
	161, 161, 154, 154, 154, 155, 155, 155, 162, 162,
	162, 162, 162, 151, 151, 165, 165, 182, 182, 181,
	181, 181, 171, 171, 178, 178, 178, 178, 178, 168,
	168, 168, 169, 169, 167, 167, 170, 170, 180, 180,
	179, 166, 166, 183, 183, 183, 183, 195, 196, 194,
	194, 194, 194, 194, 175, 175, 175, 176, 176, 176,
	177, 177, 177, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 186, 184, 184, 185, 185, 14,
	19, 19, 15, 15, 15, 15, 15, 16, 16, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 113, 113, 115,
	115, 111, 111, 114, 114, 112, 112, 112, 116, 116,
	116, 117, 117, 141, 141, 141, 22, 22, 24, 24,
	25, 26, 23, 23, 23, 23, 23, 23, 23, 17,
	202, 27, 28, 28, 29, 29, 29, 32, 32, 32,
	31, 31, 31, 37, 37, 39, 39, 39, 39, 40,
	40, 40, 40, 40, 36, 36, 38, 38, 38, 38,
	129, 129, 129, 128, 128, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 45, 59, 59, 96, 96, 98,
	98, 46, 46, 46, 46, 47, 47, 48, 48, 49,
	49, 136, 136, 135, 135, 135, 134, 134, 52, 52,
	52, 54, 53, 53, 53, 53, 55, 55, 57, 57,
	56, 56, 58, 60, 60, 60, 60, 60, 61, 61,
	41, 41, 41, 41, 41, 41, 41, 110, 110, 63,
	63, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 74, 74, 74, 74, 74, 74, 64, 64, 64,
	64, 64, 64, 64, 35, 35, 75, 75, 75, 81,
	76, 76, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 71, 71, 71, 71, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 203, 203, 73,
	72, 72, 72, 72, 72, 72, 72, 33, 33, 33,
	33, 33, 139, 139, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 85, 85, 34,
	34, 83, 83, 84, 86, 86, 82, 82, 82, 66,
	66, 66, 66, 66, 66, 66, 66, 68, 68, 68,
	87, 87, 88, 88, 89, 89, 90, 90, 91, 92,
	92, 92, 93, 93, 93, 93, 94, 94, 94, 65,
	65, 65, 65, 65, 65, 95, 95, 95, 95, 99,
	99, 77, 77, 79, 79, 78, 80, 100, 100, 103,
	101, 101, 101, 104, 104, 104, 104, 102, 102, 102,
	131, 131, 131, 108, 108, 118, 118, 119, 119, 109,
	109, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 121, 121, 121, 122, 122, 123, 123, 123, 130,
	130, 126, 126, 127, 127, 132, 132, 133, 133, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 199, 200,
	137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 4, 6,
	7, 5, 8, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 2, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -20, -21, -22, -24, -25,
	-26, -23, -17, -3, -4, 6, 7, -30, 9, 10,
	30, -18, 118, 119, 121, 120, 154, 122, 147, 51,
	168, 169, 171, 172, 25, 148, 149, 152, 153, 31,
	32, 124, -199, 8, 254, 55, -198, 352, -89, 15,
	-29, 5, -27, -202, -27, -27, -27, -27, -27, -172,
	-174, 55, 93, -123, 128, 75, 246, 125, 126, 132,
	-126, -190, -125, 58, 59, 60, 264, 140, 296, 297,
	168, 179, 173, 200, 192, 265, 298, 141, 190, 193,
	233, 138, 299, 220, 227, 69, 171, 242, 300, 150,
	188, 184, 301, 273, 182, 27, 302, 229, 205, 303,
	269, 231, 183, 228, 124, 304, 143, 136, 305, 206,
	210, 306, 234, 307, 308, 309, 177, 178, 310, 139,
	236, 204, 137, 33, 266, 36, 158, 237, 208, 311,
	203, 199, 312, 313, 314, 315, 202, 176, 198, 40,
	212, 211, 213, 232, 195, 316, 317, 318, 144, 319,
	185, 18, 320, 321, 322, 323, 324, 240, 153, 325,
	156, 326, 327, 328, 329, 330, 331, 230, 207, 209,
	133, 160, 268, 332, 238, 181, 333, 145, 157, 152,
	241, 146, 334, 335, 336, 337, 338, 339, 340, 172,
	341, 342, 343, 344, 167, 235, 244, 39, 217, 345,
	175, 135, 346, 169, 164, 222, 196, 159, 347, 348,
	186, 187, 201, 174, 197, 170, 161, 154, 349, 243,
	218, 270, 194, 191, 165, 350, 162, 163, 351, 223,
	224, 166, 267, 239, 189, 219, -109, 128, 246, 125,
	224, 130, 126, 126, 127, 128, 246, 125, 126, -56,
	-132, -190, -125, 128, 126, 111, 193, 233, 118, 221,
	229, -115, 230, 160, -141, 126, -111, 220, 223, 224,
	166, -190, 231, 235, 234, 225, -132, 170, -137, -137,
	-137, -137, -137, 222, 222, -137, -2, -93, 17, 16,
	-5, -3, -199, 6, 20, 21, -32, -39, 41, 42,
	-40, 21, 34, 44, -28, -38, 102, -41, -132, -62,
	77, -67, 29, -190, -125, 23, -66, -63, -82, -80,
	-81, 111, 112, 113, 100, 101, 108, 78, 114, -71,
	-69, -70, -72, 62, 61, 70, 63, 64, 65, 66,
	71, 72, 73, -126, -78, -199, 45, 46, 255, 256,
	257, 258, 263, 259, 80, 35, 245, 253, 252, 251,
	249, 250, 247, 248, 261, 262, 131, 246, 125, 106,
	254, -109, -109, 11, -50, -51, -56, -58, -132, -101,
	-140, 170, -104, 235, 234, -127, -102, -126, -124, 233,
	193, 232, 123, 271, 76, 22, 24, 215, 79, 111,
	16, 80, 110, 255, 118, 49, 272, 247, 248, 245,
	257, 258, 246, 221, 29, 10, 274, 25, 148, 21,
	34, 104, 120, 83, 84, 151, 23, 149, 73, 277,
	19, 52, 11, 13, 278, 279, 14, 131, 130, 95,
	127, 47, 8, 114, 26, 92, 43, 280, 28, 281,
	282, 283, 284, 45, 93, 17, 249, 250, 31, 285,
	263, 155, 106, 50, 37, 77, 286, 287, 71, 288,
	74, 53, 75, 15, 48, 289, 290, 291, 292, 94,
	121, 254, 46, 293, 125, 6, 260, 30, 147, 44,
	294, 126, 82, 261, 262, 129, 72, 5, 132, 32,
	9, 51, 54, 251, 252, 253, 35, 81, 12, 295,
	-173, 93, -164, -190, -56, 127, -56, 254, -119, 131,
	-119, -119, 126, -56, -190, -190, 118, 120, 123, 53,
	-19, -56, -118, 131, -190, -118, -118, -118, -56, 115,
	-56, -190, 30, -116, 93, 12, 246, -190, 160, 126,
	161, 128, -138, -199, -127, -168, 127, 33, 139, -138,
	164, 165, -138, -114, -113, 227, 228, 222, 226, 12,
	165, 222, 163, -138, -137, -137, -200, 57, -94, 19,
	31, -41, -132, -90, -91, -41, -89, -2, -27, 37,
	-36, -38, -40, 41, 42, 68, 11, -129, 76, 75,
	92, -128, 22, -126, 62, 115, -41, -64, 95, 77,
	93, 94, 79, 97, 96, 107, 100, 101, 102, 103,
	104, 105, 106, 98, 99, 110, 85, 86, 87, 88,
	89, 90, 91, -110, -199, -81, -199, 116, 117, -67,
	-67, -67, -67, -67, -67, -67, -67, -199, -2, -76,
	-41, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-85, -41, -199, -203, -73, -199, -203, -73, -203, -73,
	-203, -199, -203, -73, -203, -73, -203, -203, -73, -199,
	-199, -199, -199, -199, -199, -199, -57, 26, -56, -43,
	-44, -45, -46, -59, -81, -199, -56, -56, -50, -201,
	56, 11, 54, -201, 56, 115, 56, 170, -104, -106,
	-105, 236, 238, 85, -131, -126, 62, 29, 30, 57,
	56, -56, -143, -146, -148, -147, -149, -144, -145, 190,
	191, 111, 194, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 30, 150, 186, 187, 188, 189, 206,
	207, 208, 209, 210, 211, 212, 213, 173, 192, 265,
	174, 175, 176, 177, 178, 179, 181, 182, 183, 184,
	185, -190, -138, 128, -190, 77, -190, -56, -56, -138,
	-138, -138, 162, 162, 126, 126, 167, -56, 56, 129,
	-50, 23, 53, -56, -190, -190, -133, -132, -124, -138,
	-116, 62, -41, -138, -138, -138, -56, -138, -138, -169,
	11, 95, -138, -138, 11, -112, 11, 95, -41, -117,
	93, 53, 9, 95, 56, 18, 115, 56, -92, 24,
	25, -93, -200, -68, -126, 63, 66, -42, 56, 11,
	-40, -56, -41, -41, -74, 71, 77, 72, 73, -128,
	102, -133, -127, -124, -67, -75, -78, -81, 67, 95,
	93, 94, 79, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -139, -190,
	62, -190, -66, -66, -126, -37, 21, 34, -36, -200,
	56, -200, -2, -36, -36, -41, -41, -82, 62, -36,
	-82, 62, -36, -36, -31, 21, 34, -83, -84, 81,
	-82, -126, -132, -200, -67, -126, -126, -36, -37, -37,
	-36, -36, -97, 156, -56, 30, 56, -52, -54, -53,
	-55, 43, 47, 49, 44, 45, 46, 50, -136, 22,
	-43, -199, -135, 156, -134, 22, -132, 62, -97, 54,
	-43, -56, -43, -58, -132, 102, -104, -106, 56, 237,
	239, 240, 53, 74, -41, -155, 110, -175, -176, -177,
	-127, 62, 63, -164, -165, -166, -178, 142, -183, 133,
	135, 132, -167, 143, 127, 28, 57, -160, 71, 77,
	-156, 218, -150, 55, -150, -150, -150, -150, -154, 193,
	-154, -154, -154, 55, 55, -150, -150, -150, -158, 55,
	-158, -158, -159, 55, -159, -130, 54, -56, -138, 23,
	-138, -120, 123, 120, 121, -186, 119, 215, 193, 69,
	29, 15, 255, 156, 270, -190, 157, -56, -56, -56,
	-56, -56, 123, 120, -56, -56, -56, -138, -56, -56,
	-116, -132, -132, 62, -56, 39, -41, -41, -133, -91,
	-94, -108, 19, 11, 35, 35, -61, 12, -38, -43,
	71, 72, 73, 115, -199, -75, -67, -67, -67, -35,
	151, 76, -200, -200, -36, -36, -41, -200, -200, -200,
	56, 54, 22, 11, 11, -200, 11, 11, -200, -200,
	-36, -86, -84, 83, -41, -200, 115, -200, 56, 56,
	-200, -200, -200, -200, -200, -65, 30, 35, -2, -199,
	-199, -100, -103, -82, -44, -45, -45, -44, -45, 43,
	43, 43, 48, 43, 48, 43, -53, -132, -200, -60,
	51, 130, 52, -199, -134, -61, -43, -61, -61, 115,
	-105, -107, 241, 238, 244, -190, 62, 56, -177, 85,
	55, -190, 28, -167, -167, -170, -190, -170, 28, -152,
	29, 71, -157, 219, 63, -154, -154, -155, 30, -155,
	-155, -155, -163, 62, -163, 63, 63, 53, -126, -138,
	-137, -193, 138, 134, 142, 143, 136, 58, 59, 60,
	127, 28, 133, 135, 156, 132, -193, -121, -122, 129,
	22, 127, 28, 156, -192, 54, 162, 215, 162, 129,
	-138, -112, -112, 40, 115, -56, -87, 13, -41, 102,
	-127, -37, -35, 76, -67, -67, -200, -200, -142, 111,
	190, 150, 188, 184, 204, 195, 217, 186, 218, -139,
	-142, -67, -67, -67, -67, 264, -89, 84, -41, 82,
	-127, -67, -67, -99, 53, -100, -77, -79, -78, -199,
	-2, -95, -126, -98, -126, -61, 56, 85, -48, -47,
	53, 54, -49, 53, -47, 43, 43, 127, 127, 127,
	-98, -89, -61, 238, 242, 243, -176, -177, -180, -179,
	-126, -183, -170, -170, 55, -153, 53, -67, 57, -155,
	-155, -190, 111, 57, 56, 57, 56, 57, 56, -56,
	-137, -137, -56, -137, -126, -189, 267, -191, -190, -126,
	-126, -126, -56, -116, -116, -88, 14, 16, -200, -67,
	-200, -150, -150, -150, -159, -150, 178, -150, 178, -200,
	-200, 19, 19, 19, 19, -199, -34, 260, -41, 56,
	56, 27, -99, 56, -200, -200, -200, 56, 115, -200,
	56, -89, -103, -41, -41, 55, -41, -199, -199, -199,
	-200, -93, 57, 56, -150, -96, -126, -161, 215, 9,
	-154, 62, -154, 63, 63, -138, 26, -188, -187, -127,
	55, 54, -41, -76, -154, -190, -67, -67, -67, -67,
	-67, -93, 62, -67, -67, 28, -79, 35, -2, -199,
	-126, -126, -126, -93, -96, -96, -200, -96, -96, -135,
	-182, -181, 54, 137, 69, -179, 57, 56, -162, 133,
	28, 132, -70, -155, -155, 57, 57, -199, 56, 85,
	-96, -56, -200, -200, -200, -200, -33, 95, 267, -200,
	-200, -200, 9, -77, -2, 115, 57, -200, -200, -200,
	-60, -181, -190, -171, 85, 62, 145, -126, -151, 69,
	28, 28, -184, -185, 156, -187, -177, 57, -200, 265,
	50, 268, -100, -200, -126, 63, -56, 62, -200, 56,
	-126, -192, 40, 266, 269, 55, -185, 35, -189, 40,
	-96, 158, 267, 57, 159, 268, -195, -196, 53, -199,
	269, -196, 53, 10, 9, -67, 155, -194, 146, 141,
	144, 30, -194, -200, -200, 140, 29, 71,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 584, 0, 330, 330, 330, 330, 330,
	330, 0, 656, 639, 0, 0, 0, 0, -2, 317,
	318, 0, 320, 321, 960, 960, 960, 960, 960, 0,
	0, 960, 0, 39, 40, 958, 1, 3, 592, 0,
	0, 334, -2, 332, 0, 639, 639, 0, 0, 68,
	69, 0, 0, 0, 947, 0, 637, 637, 637, 657,
	658, 661, 662, 25, 26, 27, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 0, 0, 0, 0,
	0, 640, 0, 635, 0, 635, 635, 635, 0, 268,
	410, 665, 666, 947, 0, 0, 0, 308, 0, 961,
	280, 0, 282, 961, 0, 961, 0, 289, 0, 0,
	295, 961, 300, 314, 315, 302, 316, 319, 322, 323,
	324, 325, 326, 960, 960, 329, 33, 596, 0, 0,
	584, 35, 0, 330, 335, 336, 0, 0, -2, -2,
	346, 351, 352, 353, 331, 0, 356, 360, 0, 420,
	0, 425, 427, -2, -2, 0, 462, 463, 464, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 490,
	491, 492, 493, 569, 570, 571, 572, 573, 574, 575,
	576, 429, 430, 566, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 527, 527, 527, 527,
	527, 527, 527, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 50, 410, 54,
	0, 936, 620, -2, -2, 0, 0, 663, 664, -2,
	800, -2, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	0, 0, 87, 0, 85, 0, 961, 0, 0, 0,
	0, 0, 0, 961, 961, 961, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	269, 961, 308, 272, 0, 0, 961, 961, 961, 0,
	961, 961, 279, 962, 963, 0, 189, 190, 191, 283,
	961, 961, 285, 0, 305, 303, 304, 297, 298, 0,
	311, 292, 293, 296, 327, 328, 34, 959, 28, 0,
	0, 593, 0, 585, 586, 589, 592, 33, 345, 0,
	365, 354, 347, 349, 350, 333, 0, 357, 0, 0,
	0, 361, 0, 363, 364, 0, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 447, 448, 449, 450,
	451, 452, 453, 426, 0, 440, 0, 0, 0, 482,
	483, 484, 485, 486, 487, 488, 0, 343, 33, 0,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	0, 558, 0, 511, 519, 0, 512, 520, 513, 521,
	514, 0, 515, 522, 516, 523, 517, 518, 524, 0,
	0, 0, 343, 343, 0, 0, 52, 0, 409, 0,
	367, 369, 370, 371, -2, 0, 393, -2, 0, 0,
	0, 46, 47, 0, 0, 0, 0, 936, 621, 56,
	57, 0, 0, 0, 165, 630, 631, 632, 628, 214,
	0, 0, 153, 149, 93, 94, 95, 142, 97, 142,
	142, 142, 142, 162, 162, 162, 162, 125, 126, 127,
	128, 129, 0, 0, 112, 142, 142, 142, 116, 132,
	133, 134, 135, 136, 137, 138, 139, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 144, 144, 144, 146,
	146, 659, 71, 0, 961, 0, 961, 83, 0, 228,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 636, 0, 961, 265, 266, 411, 667, 668, 270,
	271, 309, 310, 273, 274, 275, 276, 277, 278, 0,
	192, 193, 284, 288, 0, 308, 0, 0, 290, 291,
	0, 0, 597, 0, 0, 0, 0, 0, 588, 590,
	591, 596, 36, 0, 577, 0, 0, 418, 0, 0,
	348, 31, 421, 422, 424, 441, 0, 443, 445, 362,
	358, 0, 567, -2, 431, 432, 456, 457, 458, 0,
	0, 0, 0, 454, 436, 0, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 481, 542,
	543, 0, 479, 480, 489, 0, 0, 0, 344, 459,
	0, 615, 33, 0, 0, 0, 0, 464, 569, 0,
	464, 569, 0, 0, 0, 341, 342, 564, 561, 0,
	0, 566, 0, 528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 398, 0, 0, 401, 0, 0, 0, 0, 392,
	0, 0, 413, 881, 394, 0, 396, 397, 418, 0,
	418, 49, 418, 51, 0, 412, 622, 55, 0, 0,
	60, 61, 623, 624, 625, 626, 0, 84, 215, 217,
	220, 221, 222, 88, 89, 90, 0, 0, 202, 0,
	0, 196, 196, 0, 194, 195, 86, 156, 154, 0,
	151, 150, 96, 0, 162, 162, 119, 120, 165, 0,
	165, 165, 165, 0, 0, 113, 114, 115, 107, 0,
	108, 109, 110, 0, 111, 0, 0, 961, 73, 638,
	74, 960, 0, 0, 651, 229, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 0, 75, 233, 235,
	234, 238, 0, 0, 0, 260, 961, 264, 305, 305,
	287, 306, 307, 312, 294, 0, 594, 595, 0, 587,
	29, 0, 633, 634, 578, 579, 580, 0, 355, 366,
	442, 444, 446, 0, 343, 433, 454, 437, 0, 434,
	0, 0, 428, 494, 0, 0, 461, -2, 498, 499,
	0, 0, 0, 0, 0, 535, 0, 0, 536, 0,
	584, 0, 562, 0, 0, 510, 0, 529, 0, 0,
	530, 531, 532, 533, 534, 609, 0, 0, -2, 0,
	0, 418, 617, 0, 368, 387, 389, 0, 384, 399,
	400, 402, 0, 404, 0, 406, 407, 372, 374, 375,
	0, 0, 0, 0, 395, 584, 418, 44, 45, 0,
	58, 59, 0, 0, 65, 166, 167, 0, 218, 0,
	0, 0, 184, 196, 196, 187, 197, 188, 0, 158,
	0, 155, 92, 152, 0, 165, 165, 121, 0, 122,
	123, 124, 0, 140, 0, 0, 0, 0, 660, 72,
	223, 960, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 960, 0, 960, 652,
	653, 654, 655, 0, 78, 0, 0, 0, 0, 0,
	263, 308, 308, 598, 0, 30, 582, 0, 419, 359,
	568, 0, 435, 0, 455, 438, 495, 496, 0, 142,
	142, 547, 142, 146, 550, 142, 552, 142, 555, 0,
	0, 0, 0, 0, 0, 0, 559, 509, 565, 0,
	567, 0, 0, 37, 0, 609, 599, 611, 613, 0,
	33, 0, 605, 0, 379, 584, 0, 0, 381, 388,
	0, 0, 382, 0, 383, 403, 405, 0, 0, 0,
	0, 592, 43, 62, 63, 64, 216, 219, 0, 198,
	142, 201, 185, 186, 0, 160, 0, 157, 143, 117,
	118, 163, 164, 162, 0, 162, 0, 147, 0, 961,
	224, 225, 226, 227, 0, 232, 0, 76, 77, 0,
	0, 237, 261, 281, 286, 32, 0, 0, 497, 439,
	500, 544, 162, 548, 549, 551, 553, 554, 556, 502,
	501, 0, 0, 0, 0, 0, 592, 0, 563, 0,
	0, 0, 38, 0, 614, -2, 0, 0, 0, 53,
	0, 592, 618, 619, 385, 0, 390, 0, 0, 0,
	393, 42, 176, 0, 200, 0, 377, 168, 161, 0,
	165, 141, 165, 0, 0, 70, 0, 79, 80, 0,
	0, 0, 583, 581, 545, 546, 0, 0, 0, 0,
	537, 0, 560, 0, 0, 0, 612, 0, -2, 0,
	607, 606, 380, 41, 0, 0, 415, 0, 0, 413,
	175, 177, 0, 182, 0, 199, 0, 0, 173, 0,
	170, 172, 159, 130, 131, 145, 148, 0, 0, 0,
	0, 239, 503, 505, 504, 506, 0, 0, 0, 508,
	525, 526, 0, 602, 33, 0, 386, 414, 416, 417,
	376, 178, 179, 0, 183, 181, 0, 378, 91, 0,
	169, 171, 0, 255, 0, 81, 82, 75, 507, 0,
	0, 0, 610, -2, 608, 180, 0, 174, 254, 0,
	0, 78, 538, 0, 541, 0, 256, 0, 236, 539,
	0, 0, 0, 203, 0, 0, 204, 205, 0, 0,
	540, 206, 0, 0, 0, 0, 0, 207, 209, 210,
	0, 0, 208, 257, 258, 211, 212, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 105, 97, 3,
	55, 57, 102, 100, 56, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 352,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:331
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:336
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:341
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:495
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = RepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.str = ReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.str = ReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = Serializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:607
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:644
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:679
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:690
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:705
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:715
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:942
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:947
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:951
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:956
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:960
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1049
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1229
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1240
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 204:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1244
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1248
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1252
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1282
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1291
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1459
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1469
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1475
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1479
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1495
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1511
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1516
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &OtherRead{}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1624
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1648
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1685
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = "extended "
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = "full "
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1739
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1743
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1753
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1763
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = SessionStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = GlobalStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Begin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.statement = &Commit{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &Rollback{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1902
		{
			yyVAL.selectExprs = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1911
		{
			yyVAL.strs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1929
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = SQLCacheStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = DistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = DistinctStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = StraightJoinHint
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1965
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1973
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1998
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2026
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2079
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2083
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2087
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2099
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2103
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.empty = struct{}{}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = StraightJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = LeftJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = RightJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = NaturalJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2182
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2217
		{
			yyVAL.indexHints = nil
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2221
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2225
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2229
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2233
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = nil
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.str = IsNullStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.str = IsNotNullStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = IsTrueStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.str = IsNotTrueStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = IsFalseStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = IsNotFalseStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = EqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.str = LessThanStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.str = GreaterThanStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2378
		{
			yyVAL.str = LessEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.str = GreaterEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.str = NotEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2775
		{
			yyVAL.str = ""
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.str = BooleanModeStr
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2783
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2787
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.str = QueryExpansionStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2871
		{
			yyVAL.str = string("")
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2891
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2910
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2914
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &NullVal{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
			yyVAL.exprs = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2976
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = nil
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2990
		{
			yyVAL.orderBy = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3004
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.str = AscScr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = AscScr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = DescScr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.limit = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3036
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3040
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3045
		{
			yyVAL.str = ""
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.str = ForUpdateStr
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3053
		{
			yyVAL.str = ShareModeStr
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3079
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3083
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3087
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3102
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3106
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3111
		{
			yyVAL.updateExprs = nil
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3115
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3125
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3141
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3161
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3167
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3177
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3182
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3200
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.bytes = []byte("charset")
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &Default{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.byt = 0
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3233
		{
			yyVAL.byt = 1
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.str = IgnoreStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3290
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3637
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3646
		{
			decNesting(yylex)
		}
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3651
		{
			skipToEnd(yylex)
		}
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3656
		{
			skipToEnd(yylex)
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			skipToEnd(yylex)
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

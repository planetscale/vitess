//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const SHOW = 57457
const DESCRIBE = 57458
const EXPLAIN = 57459
const DATE = 57460
const ESCAPE = 57461
const REPAIR = 57462
const OPTIMIZE = 57463
const TRUNCATE = 57464
const MAXVALUE = 57465
const PARTITION = 57466
const REORGANIZE = 57467
const LESS = 57468
const THAN = 57469
const PROCEDURE = 57470
const TRIGGER = 57471
const VINDEX = 57472
const VINDEXES = 57473
const STATUS = 57474
const VARIABLES = 57475
const BEGIN = 57476
const START = 57477
const TRANSACTION = 57478
const COMMIT = 57479
const ROLLBACK = 57480
const BIT = 57481
const TINYINT = 57482
const SMALLINT = 57483
const MEDIUMINT = 57484
const INT = 57485
const INTEGER = 57486
const BIGINT = 57487
const INTNUM = 57488
const REAL = 57489
const DOUBLE = 57490
const FLOAT_TYPE = 57491
const DECIMAL = 57492
const NUMERIC = 57493
const TIME = 57494
const TIMESTAMP = 57495
const DATETIME = 57496
const YEAR = 57497
const CHAR = 57498
const VARCHAR = 57499
const BOOL = 57500
const CHARACTER = 57501
const VARBINARY = 57502
const NCHAR = 57503
const TEXT = 57504
const TINYTEXT = 57505
const MEDIUMTEXT = 57506
const LONGTEXT = 57507
const BLOB = 57508
const TINYBLOB = 57509
const MEDIUMBLOB = 57510
const LONGBLOB = 57511
const JSON = 57512
const ENUM = 57513
const GEOMETRY = 57514
const POINT = 57515
const LINESTRING = 57516
const POLYGON = 57517
const GEOMETRYCOLLECTION = 57518
const MULTIPOINT = 57519
const MULTILINESTRING = 57520
const MULTIPOLYGON = 57521
const NULLX = 57522
const AUTO_INCREMENT = 57523
const APPROXNUM = 57524
const SIGNED = 57525
const UNSIGNED = 57526
const ZEROFILL = 57527
const DATABASES = 57528
const TABLES = 57529
const VITESS_KEYSPACES = 57530
const VITESS_SHARDS = 57531
const VITESS_TABLETS = 57532
const VSCHEMA_TABLES = 57533
const NAMES = 57534
const CHARSET = 57535
const GLOBAL = 57536
const SESSION = 57537
const CURRENT_TIMESTAMP = 57538
const DATABASE = 57539
const CURRENT_DATE = 57540
const CURRENT_TIME = 57541
const LOCALTIME = 57542
const LOCALTIMESTAMP = 57543
const UTC_DATE = 57544
const UTC_TIME = 57545
const UTC_TIMESTAMP = 57546
const REPLACE = 57547
const CONVERT = 57548
const CAST = 57549
const SUBSTR = 57550
const SUBSTRING = 57551
const GROUP_CONCAT = 57552
const SEPARATOR = 57553
const MATCH = 57554
const AGAINST = 57555
const BOOLEAN = 57556
const LANGUAGE = 57557
const WITH = 57558
const QUERY = 57559
const EXPANSION = 57560
const UNUSED = 57561

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 227,
	109, 554,
	-2, 550,
	-1, 228,
	109, 555,
	-2, 551,
	-1, 296,
	80, 706,
	-2, 46,
	-1, 297,
	80, 673,
	-2, 47,
	-1, 302,
	80, 658,
	-2, 516,
	-1, 304,
	80, 691,
	-2, 518,
	-1, 686,
	109, 557,
	-2, 553,
	-1, 880,
	5, 28,
	-2, 363,
	-1, 905,
	5, 27,
	-2, 492,
	-1, 1112,
	5, 28,
	-2, 493,
	-1, 1156,
	5, 27,
	-2, 495,
	-1, 1209,
	5, 28,
	-2, 496,
}

const yyPrivate = 57344

const yyLast = 9538

var yyAct = [...]int{

	258, 47, 627, 509, 748, 1026, 232, 1200, 257, 1118,
	1050, 825, 822, 766, 1027, 781, 805, 960, 554, 556,
	1023, 206, 780, 819, 777, 924, 53, 908, 749, 872,
	951, 1000, 718, 711, 913, 508, 3, 963, 791, 737,
	688, 721, 442, 448, 295, 558, 200, 454, 47, 398,
	745, 230, 815, 462, 301, 854, 211, 799, 293, 523,
	215, 52, 288, 543, 1187, 475, 474, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 1228, 1218, 486,
	282, 1226, 1207, 205, 1224, 826, 1217, 283, 1018, 1106,
	201, 202, 203, 204, 402, 1056, 1057, 1058, 57, 1206,
	1172, 219, 942, 1061, 1059, 798, 284, 171, 167, 168,
	169, 1130, 1145, 806, 1095, 1093, 199, 434, 435, 1225,
	1223, 1201, 984, 59, 60, 61, 62, 63, 423, 746,
	767, 769, 412, 411, 475, 474, 484, 485, 477, 478,
	479, 480, 481, 482, 483, 476, 405, 164, 486, 165,
	165, 635, 626, 923, 793, 922, 1170, 793, 921, 400,
	408, 179, 1192, 166, 793, 1065, 477, 478, 479, 480,
	481, 482, 483, 476, 1115, 228, 486, 498, 499, 873,
	778, 486, 399, 987, 429, 429, 429, 429, 888, 429,
	429, 425, 936, 427, 866, 981, 429, 660, 466, 418,
	657, 983, 476, 170, 768, 486, 76, 1188, 461, 695,
	176, 1075, 47, 176, 911, 1066, 1020, 424, 426, 459,
	569, 738, 234, 693, 694, 692, 738, 495, 895, 1001,
	497, 630, 806, 940, 404, 461, 450, 176, 176, 76,
	1195, 456, 1136, 176, 428, 76, 792, 451, 163, 792,
	1060, 790, 788, 1171, 1169, 789, 792, 507, 1003, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 1135, 522,
	524, 524, 524, 524, 524, 524, 524, 524, 532, 533,
	534, 535, 1205, 712, 287, 713, 422, 50, 842, 555,
	1005, 955, 1009, 982, 1004, 980, 1002, 691, 885, 954,
	943, 1007, 841, 414, 415, 416, 406, 407, 1211, 281,
	1006, 452, 474, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 1008, 1010, 486, 460, 459, 1152, 846,
	525, 526, 527, 528, 529, 530, 531, 1053, 840, 795,
	176, 1133, 176, 461, 796, 952, 460, 459, 176, 460,
	459, 1214, 441, 568, 1052, 176, 1022, 663, 664, 76,
	76, 76, 76, 461, 76, 76, 461, 678, 680, 681,
	937, 76, 679, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 225, 971, 486, 837, 834, 835, 441,
	833, 479, 480, 481, 482, 483, 476, 76, 928, 486,
	1160, 1198, 429, 460, 459, 863, 864, 865, 1160, 441,
	429, 828, 969, 714, 844, 847, 1160, 1161, 1127, 1126,
	461, 429, 429, 429, 429, 429, 429, 429, 429, 431,
	432, 433, 641, 436, 437, 429, 429, 1045, 441, 1176,
	439, 640, 884, 631, 883, 1114, 441, 1175, 720, 839,
	1072, 1071, 496, 1068, 1069, 1068, 1067, 176, 878, 441,
	460, 459, 629, 659, 176, 176, 176, 23, 540, 441,
	76, 838, 665, 644, 642, 76, 970, 461, 689, 723,
	441, 975, 972, 965, 966, 973, 968, 967, 624, 576,
	575, 903, 420, 565, 904, 413, 843, 974, 47, 658,
	399, 21, 23, 977, 256, 1024, 1062, 539, 909, 845,
	990, 287, 511, 667, 50, 460, 459, 682, 910, 910,
	54, 686, 684, 730, 733, 909, 723, 1110, 430, 1155,
	540, 540, 461, 1074, 566, 74, 564, 1070, 890, 23,
	929, 288, 288, 288, 288, 288, 750, 725, 878, 50,
	715, 716, 887, 878, 567, 661, 555, 210, 770, 878,
	540, 909, 212, 50, 288, 1140, 742, 735, 300, 545,
	548, 549, 550, 546, 403, 547, 551, 76, 800, 914,
	915, 889, 773, 176, 176, 76, 50, 176, 820, 1039,
	176, 725, 298, 932, 176, 886, 76, 76, 76, 76,
	76, 76, 76, 76, 816, 771, 807, 808, 809, 50,
	76, 76, 775, 772, 176, 763, 914, 915, 628, 500,
	501, 502, 503, 504, 505, 506, 785, 811, 751, 76,
	429, 754, 429, 176, 810, 65, 823, 1055, 1024, 76,
	429, 956, 801, 802, 803, 804, 625, 821, 752, 753,
	917, 755, 638, 438, 634, 673, 971, 760, 812, 813,
	814, 440, 761, 920, 919, 645, 646, 647, 648, 649,
	650, 651, 652, 817, 818, 762, 758, 549, 550, 653,
	654, 759, 76, 757, 969, 756, 867, 1222, 300, 300,
	300, 300, 690, 300, 300, 216, 217, 1216, 76, 986,
	300, 689, 851, 1221, 861, 855, 860, 455, 856, 947,
	443, 574, 421, 176, 939, 686, 176, 176, 176, 176,
	176, 453, 444, 1197, 1196, 1153, 464, 933, 176, 1108,
	1141, 176, 830, 868, 637, 176, 553, 213, 214, 176,
	176, 455, 859, 76, 207, 1181, 906, 907, 970, 208,
	858, 76, 54, 975, 972, 965, 966, 973, 968, 967,
	1180, 1143, 457, 287, 287, 287, 287, 287, 910, 974,
	1189, 221, 1131, 656, 56, 964, 894, 58, 287, 563,
	51, 905, 1, 827, 959, 836, 287, 1199, 1049, 918,
	787, 545, 548, 549, 550, 546, 930, 547, 551, 300,
	926, 927, 176, 779, 571, 76, 397, 76, 64, 786,
	1168, 176, 1129, 794, 176, 76, 941, 797, 944, 945,
	1054, 1194, 938, 298, 581, 429, 579, 580, 934, 935,
	946, 578, 948, 949, 950, 247, 246, 249, 250, 251,
	252, 583, 953, 582, 248, 253, 577, 187, 294, 552,
	429, 441, 687, 570, 458, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	66, 979, 976, 978, 829, 832, 831, 494, 857, 962,
	299, 1031, 662, 447, 850, 1179, 1142, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 994,
	993, 486, 893, 520, 736, 1029, 300, 47, 1025, 233,
	750, 677, 245, 1028, 300, 690, 750, 1012, 1011, 1019,
	999, 242, 1041, 1042, 1043, 300, 300, 300, 300, 300,
	300, 300, 300, 1033, 244, 1034, 243, 668, 1035, 300,
	300, 902, 1030, 686, 468, 231, 76, 1048, 223, 286,
	536, 544, 1047, 1046, 542, 541, 76, 291, 669, 916,
	912, 726, 727, 285, 989, 1105, 1186, 734, 464, 1063,
	1064, 300, 672, 25, 55, 218, 19, 18, 17, 445,
	449, 741, 20, 743, 744, 16, 15, 14, 29, 13,
	12, 288, 11, 10, 9, 685, 467, 8, 7, 76,
	76, 6, 76, 5, 4, 209, 22, 2, 0, 1084,
	1076, 717, 0, 0, 0, 0, 0, 1083, 0, 1104,
	0, 731, 731, 1078, 0, 76, 1081, 739, 0, 1091,
	510, 0, 0, 176, 0, 0, 0, 0, 0, 521,
	0, 0, 76, 0, 731, 0, 1109, 0, 0, 0,
	0, 1120, 1121, 1122, 0, 0, 1117, 0, 0, 1088,
	1089, 0, 1090, 930, 1123, 1092, 0, 1094, 1125, 958,
	0, 0, 300, 0, 429, 0, 0, 869, 870, 871,
	300, 0, 76, 76, 1132, 0, 1134, 0, 0, 0,
	0, 1139, 1138, 0, 985, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 782, 76, 1144, 76, 76, 1128,
	0, 1029, 0, 666, 1157, 0, 0, 0, 0, 1028,
	0, 862, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 0, 176, 0, 300, 0, 300, 1165, 1167, 1166,
	76, 0, 1178, 0, 300, 0, 0, 0, 0, 1156,
	1177, 0, 0, 76, 176, 0, 1029, 1173, 47, 1174,
	76, 1190, 0, 76, 1028, 300, 176, 0, 877, 0,
	722, 724, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 1203, 740, 0, 0, 685,
	0, 0, 0, 1191, 1208, 0, 750, 1102, 441, 0,
	0, 1212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 76, 765, 76, 76, 76,
	176, 76, 1220, 76, 1219, 0, 1227, 0, 0, 0,
	0, 675, 676, 0, 475, 474, 484, 485, 477, 478,
	479, 480, 481, 482, 483, 476, 0, 0, 486, 76,
	76, 76, 0, 0, 0, 0, 0, 996, 997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	1013, 1014, 0, 1016, 1017, 925, 0, 0, 0, 0,
	0, 0, 0, 510, 0, 300, 728, 729, 0, 0,
	76, 76, 0, 195, 0, 0, 0, 0, 0, 446,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 76, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 300,
	0, 300, 0, 0, 174, 0, 76, 198, 0, 289,
	0, 776, 0, 180, 0, 0, 1103, 0, 0, 182,
	0, 0, 0, 0, 300, 961, 188, 184, 0, 222,
	0, 174, 174, 0, 0, 0, 0, 174, 76, 0,
	0, 300, 0, 0, 173, 0, 875, 76, 0, 1086,
	876, 0, 186, 0, 0, 190, 0, 880, 881, 882,
	0, 0, 0, 300, 0, 992, 891, 0, 0, 0,
	0, 897, 292, 898, 899, 900, 901, 401, 731, 0,
	0, 1032, 925, 181, 731, 0, 0, 1015, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	852, 853, 486, 449, 300, 0, 300, 1051, 0, 0,
	183, 189, 191, 192, 193, 194, 0, 0, 197, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 782, 0,
	782, 0, 0, 0, 174, 0, 174, 0, 0, 1077,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 174,
	0, 1100, 1079, 1146, 1147, 0, 1148, 1149, 1150, 1082,
	1099, 441, 300, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 0, 410, 0, 0, 0,
	896, 0, 417, 0, 0, 0, 992, 0, 0, 419,
	0, 0, 0, 0, 0, 0, 0, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 998,
	0, 486, 0, 0, 1119, 0, 1119, 1119, 1119, 0,
	1124, 0, 300, 475, 474, 484, 485, 477, 478, 479,
	480, 481, 482, 483, 476, 0, 0, 486, 0, 0,
	0, 995, 0, 0, 0, 0, 782, 0, 300, 300,
	300, 174, 0, 0, 0, 0, 1044, 0, 174, 560,
	174, 475, 474, 484, 485, 477, 478, 479, 480, 481,
	482, 483, 476, 961, 782, 486, 0, 0, 0, 0,
	0, 1229, 0, 874, 0, 0, 0, 0, 0, 1158,
	1159, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 0, 1051, 475, 474, 484, 485, 477, 478, 479,
	480, 481, 482, 483, 476, 1119, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 1087, 0, 0, 1193, 0, 1021, 0, 0,
	0, 0, 0, 1096, 1097, 1098, 0, 0, 1101, 0,
	0, 0, 1036, 1037, 0, 0, 1038, 0, 0, 1040,
	0, 1111, 1112, 1113, 731, 1116, 0, 1210, 0, 0,
	0, 0, 0, 0, 0, 0, 1215, 174, 174, 0,
	0, 174, 0, 0, 174, 0, 0, 0, 643, 475,
	474, 484, 485, 477, 478, 479, 480, 481, 482, 483,
	476, 0, 0, 486, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 633, 0,
	0, 636, 0, 0, 639, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 643, 1151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 655, 0,
	0, 0, 1162, 1163, 1164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 674, 0, 0,
	0, 510, 0, 0, 0, 0, 0, 222, 1182, 1183,
	1184, 1185, 222, 222, 0, 0, 732, 732, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 222, 222, 222, 0, 174, 0, 732,
	174, 174, 174, 174, 174, 0, 0, 0, 1204, 0,
	0, 0, 764, 1209, 0, 174, 0, 0, 0, 560,
	0, 1213, 0, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1231, 1232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 174, 0, 0, 92,
	0, 0, 0, 0, 104, 174, 106, 0, 174, 134,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1202, 510, 0, 0, 0, 0, 75, 0,
	643, 0, 0, 0, 0, 0, 824, 86, 0, 0,
	0, 0, 222, 0, 0, 848, 0, 0, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 474, 484, 485, 477, 478, 479,
	480, 481, 482, 483, 476, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 177, 0, 0, 0, 0, 126, 0,
	0, 137, 97, 96, 0, 222, 0, 88, 0, 131,
	122, 149, 0, 123, 130, 107, 141, 127, 148, 178,
	155, 139, 154, 78, 138, 147, 87, 132, 80, 145,
	136, 112, 101, 102, 79, 0, 129, 91, 95, 90,
	120, 142, 143, 89, 161, 83, 153, 82, 84, 152,
	119, 140, 146, 113, 110, 81, 144, 111, 109, 103,
	93, 98, 124, 108, 125, 99, 116, 115, 117, 0,
	0, 0, 135, 150, 162, 0, 0, 156, 157, 158,
	159, 118, 85, 100, 133, 0, 0, 0, 0, 0,
	0, 23, 24, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 77, 0, 105, 160, 128, 94, 151, 0,
	42, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 222, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 0, 0, 0, 0, 988, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 30, 31, 33,
	32, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 470, 0, 473, 0, 0, 0, 0,
	0, 487, 488, 489, 490, 491, 492, 493, 1080, 471,
	472, 469, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 0, 0, 486, 49, 0, 0,
	0, 0, 0, 0, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 386, 376, 0, 348,
	388, 326, 340, 396, 341, 342, 369, 312, 356, 121,
	338, 0, 329, 307, 335, 308, 327, 350, 92, 353,
	325, 378, 359, 104, 394, 106, 364, 0, 134, 114,
	0, 0, 352, 380, 354, 374, 347, 370, 317, 363,
	389, 339, 367, 390, 0, 0, 0, 75, 0, 783,
	784, 0, 0, 0, 0, 0, 86, 0, 366, 385,
	337, 368, 306, 365, 0, 310, 313, 395, 383, 332,
	333, 931, 0, 0, 0, 0, 0, 0, 351, 355,
	371, 345, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 362, 0, 0, 0, 314, 311, 0, 349,
	0, 0, 0, 316, 0, 331, 372, 0, 305, 375,
	381, 346, 177, 384, 344, 343, 387, 126, 0, 732,
	137, 97, 96, 379, 328, 336, 88, 334, 131, 122,
	149, 361, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 309,
	0, 135, 150, 162, 324, 382, 156, 157, 158, 159,
	118, 85, 100, 133, 320, 323, 318, 319, 357, 358,
	391, 392, 393, 373, 315, 0, 321, 322, 0, 377,
	360, 77, 0, 105, 160, 128, 94, 151, 386, 376,
	0, 348, 388, 326, 340, 396, 341, 342, 369, 312,
	356, 121, 338, 0, 329, 307, 335, 308, 327, 350,
	92, 353, 325, 378, 359, 104, 394, 106, 364, 0,
	134, 114, 0, 0, 352, 380, 354, 374, 347, 370,
	317, 363, 389, 339, 367, 390, 0, 0, 0, 75,
	0, 783, 784, 0, 0, 0, 0, 0, 86, 0,
	366, 385, 337, 368, 306, 365, 0, 310, 313, 395,
	383, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	351, 355, 371, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 362, 0, 0, 0, 314, 311,
	0, 349, 0, 0, 0, 316, 0, 331, 372, 0,
	305, 375, 381, 346, 177, 384, 344, 343, 387, 126,
	0, 0, 137, 97, 96, 379, 328, 336, 88, 334,
	131, 122, 149, 361, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 309, 0, 135, 150, 162, 324, 382, 156, 157,
	158, 159, 118, 85, 100, 133, 320, 323, 318, 319,
	357, 358, 391, 392, 393, 373, 315, 0, 321, 322,
	0, 377, 360, 77, 0, 105, 160, 128, 94, 151,
	386, 376, 0, 348, 388, 326, 340, 396, 341, 342,
	369, 312, 356, 121, 338, 0, 329, 307, 335, 308,
	327, 350, 92, 353, 325, 378, 359, 104, 394, 106,
	364, 0, 134, 114, 0, 0, 352, 380, 354, 374,
	347, 370, 317, 363, 389, 339, 367, 390, 50, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 366, 385, 337, 368, 306, 365, 0, 310,
	313, 395, 383, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 351, 355, 371, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 362, 0, 0, 0,
	314, 311, 0, 349, 0, 0, 0, 316, 0, 331,
	372, 0, 305, 375, 381, 346, 177, 384, 344, 343,
	387, 126, 0, 0, 137, 97, 96, 379, 328, 336,
	88, 334, 131, 122, 149, 361, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 309, 0, 135, 150, 162, 324, 382,
	156, 157, 158, 159, 118, 85, 100, 133, 320, 323,
	318, 319, 357, 358, 391, 392, 393, 373, 315, 0,
	321, 322, 0, 377, 360, 77, 0, 105, 160, 128,
	94, 151, 386, 376, 0, 348, 388, 326, 340, 396,
	341, 342, 369, 312, 356, 121, 338, 0, 329, 307,
	335, 308, 327, 350, 92, 353, 325, 378, 359, 104,
	394, 106, 364, 0, 134, 114, 0, 0, 352, 380,
	354, 374, 347, 370, 317, 363, 389, 339, 367, 390,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 366, 385, 337, 368, 306, 365,
	0, 310, 313, 395, 383, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 351, 355, 371, 345, 0, 0,
	0, 0, 0, 0, 991, 0, 330, 0, 362, 0,
	0, 0, 314, 311, 0, 349, 0, 0, 0, 316,
	0, 331, 372, 0, 305, 375, 381, 346, 177, 384,
	344, 343, 387, 126, 0, 0, 137, 97, 96, 379,
	328, 336, 88, 334, 131, 122, 149, 361, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 309, 0, 135, 150, 162,
	324, 382, 156, 157, 158, 159, 118, 85, 100, 133,
	320, 323, 318, 319, 357, 358, 391, 392, 393, 373,
	315, 0, 321, 322, 0, 377, 360, 77, 0, 105,
	160, 128, 94, 151, 386, 376, 0, 348, 388, 326,
	340, 396, 341, 342, 369, 312, 356, 121, 338, 0,
	329, 307, 335, 308, 327, 350, 92, 353, 325, 378,
	359, 104, 394, 106, 364, 0, 134, 114, 0, 0,
	352, 380, 354, 374, 347, 370, 317, 363, 389, 339,
	367, 390, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 366, 385, 337, 368,
	306, 365, 0, 310, 313, 395, 383, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 351, 355, 371, 345,
	0, 0, 0, 0, 0, 0, 683, 0, 330, 0,
	362, 0, 0, 0, 314, 311, 0, 349, 0, 0,
	0, 316, 0, 331, 372, 0, 305, 375, 381, 346,
	177, 384, 344, 343, 387, 126, 0, 0, 137, 97,
	96, 379, 328, 336, 88, 334, 131, 122, 149, 361,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 309, 0, 135,
	150, 162, 324, 382, 156, 157, 158, 159, 118, 85,
	100, 133, 320, 323, 318, 319, 357, 358, 391, 392,
	393, 373, 315, 0, 321, 322, 0, 377, 360, 77,
	0, 105, 160, 128, 94, 151, 386, 376, 0, 348,
	388, 326, 340, 396, 341, 342, 369, 312, 356, 121,
	338, 0, 329, 307, 335, 308, 327, 350, 92, 353,
	325, 378, 359, 104, 394, 106, 364, 0, 134, 114,
	0, 0, 352, 380, 354, 374, 347, 370, 317, 363,
	389, 339, 367, 390, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 366, 385,
	337, 368, 306, 365, 0, 310, 313, 395, 383, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 351, 355,
	371, 345, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 362, 0, 0, 0, 314, 311, 0, 349,
	0, 0, 0, 316, 0, 331, 372, 0, 305, 375,
	381, 346, 177, 384, 344, 343, 387, 126, 0, 0,
	137, 97, 96, 379, 328, 336, 88, 334, 131, 122,
	149, 361, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 309,
	0, 135, 150, 162, 324, 382, 156, 157, 158, 159,
	118, 85, 100, 133, 320, 323, 318, 319, 357, 358,
	391, 392, 393, 373, 315, 0, 321, 322, 0, 377,
	360, 77, 0, 105, 160, 128, 94, 151, 386, 376,
	0, 348, 388, 326, 340, 396, 341, 342, 369, 312,
	356, 121, 338, 0, 329, 307, 335, 308, 327, 350,
	92, 353, 325, 378, 359, 104, 394, 106, 364, 0,
	134, 114, 0, 0, 352, 380, 354, 374, 347, 370,
	317, 363, 389, 339, 367, 390, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	366, 385, 337, 368, 306, 365, 0, 310, 313, 395,
	383, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	351, 355, 371, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 362, 0, 0, 0, 314, 311,
	0, 349, 0, 0, 0, 316, 0, 331, 372, 0,
	305, 375, 381, 346, 177, 384, 344, 343, 387, 126,
	0, 0, 137, 97, 96, 379, 328, 336, 88, 334,
	131, 122, 149, 361, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 309, 0, 135, 150, 162, 324, 382, 156, 157,
	158, 159, 118, 85, 100, 133, 320, 323, 318, 319,
	357, 358, 391, 392, 393, 373, 315, 0, 321, 322,
	0, 377, 360, 77, 0, 105, 160, 128, 94, 151,
	386, 376, 0, 348, 388, 326, 340, 396, 341, 342,
	369, 312, 356, 121, 338, 0, 329, 307, 335, 308,
	327, 350, 92, 353, 325, 378, 359, 104, 394, 106,
	364, 0, 134, 114, 0, 0, 352, 380, 354, 374,
	347, 370, 317, 363, 389, 339, 367, 390, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 366, 385, 337, 368, 306, 365, 0, 310,
	313, 395, 383, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 351, 355, 371, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 362, 0, 0, 0,
	314, 311, 0, 349, 0, 0, 0, 316, 0, 331,
	372, 0, 305, 375, 381, 346, 177, 384, 344, 343,
	387, 126, 0, 0, 137, 97, 96, 379, 328, 336,
	88, 334, 131, 122, 149, 361, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 303, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 309, 0, 135, 150, 162, 324, 382,
	156, 157, 158, 159, 304, 302, 100, 133, 320, 323,
	318, 319, 357, 358, 391, 392, 393, 373, 315, 0,
	321, 322, 0, 377, 360, 77, 0, 105, 160, 128,
	94, 151, 386, 376, 0, 348, 388, 326, 340, 396,
	341, 342, 369, 312, 356, 121, 338, 0, 329, 307,
	335, 308, 327, 350, 92, 353, 325, 378, 359, 104,
	394, 106, 364, 0, 134, 114, 0, 0, 352, 380,
	354, 374, 347, 370, 317, 363, 389, 339, 367, 390,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 366, 385, 337, 368, 306, 365,
	0, 310, 313, 395, 383, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 351, 355, 371, 345, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 362, 0,
	0, 0, 314, 311, 0, 349, 0, 0, 0, 316,
	0, 331, 372, 0, 305, 375, 381, 346, 177, 384,
	344, 343, 387, 126, 0, 0, 137, 97, 96, 379,
	328, 336, 88, 334, 131, 122, 149, 361, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 309, 0, 135, 150, 162,
	324, 382, 156, 157, 158, 159, 118, 85, 100, 133,
	320, 323, 318, 319, 357, 358, 391, 392, 393, 373,
	315, 0, 321, 322, 0, 377, 360, 77, 0, 105,
	160, 128, 94, 151, 386, 376, 0, 348, 388, 326,
	340, 396, 341, 342, 369, 312, 356, 121, 338, 0,
	329, 307, 335, 308, 327, 350, 92, 353, 325, 378,
	359, 104, 394, 106, 364, 0, 134, 114, 0, 0,
	352, 380, 354, 374, 347, 370, 317, 363, 389, 339,
	367, 390, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 366, 385, 337, 368,
	306, 365, 0, 310, 313, 395, 383, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 351, 355, 371, 345,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	362, 0, 0, 0, 314, 311, 0, 349, 0, 0,
	0, 316, 0, 331, 372, 0, 305, 375, 381, 346,
	177, 384, 344, 343, 387, 126, 0, 0, 137, 97,
	96, 379, 328, 336, 88, 334, 131, 122, 149, 361,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 303, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 309, 0, 135,
	150, 162, 324, 382, 156, 157, 158, 159, 304, 302,
	297, 296, 320, 323, 318, 319, 357, 358, 391, 392,
	393, 373, 315, 0, 321, 322, 0, 377, 360, 77,
	0, 105, 160, 128, 94, 151, 121, 0, 0, 719,
	0, 229, 0, 0, 0, 92, 0, 226, 0, 0,
	104, 268, 106, 0, 0, 134, 114, 0, 0, 0,
	0, 259, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 227, 247, 246, 249, 250, 251,
	252, 0, 0, 86, 248, 253, 254, 255, 0, 0,
	224, 240, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 238, 220, 0, 0, 0, 279,
	0, 239, 0, 0, 235, 236, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 277, 0, 126, 0, 0, 137, 97, 96,
	0, 0, 0, 88, 0, 131, 122, 149, 0, 123,
	130, 107, 141, 127, 148, 178, 155, 139, 154, 78,
	138, 147, 87, 132, 80, 145, 136, 112, 101, 102,
	79, 0, 129, 91, 95, 90, 120, 142, 143, 89,
	161, 83, 153, 82, 84, 152, 119, 140, 146, 113,
	110, 81, 144, 111, 109, 103, 93, 98, 124, 108,
	125, 99, 116, 115, 117, 0, 0, 0, 135, 150,
	162, 0, 0, 156, 157, 158, 159, 118, 85, 100,
	133, 269, 278, 275, 276, 273, 274, 272, 271, 270,
	280, 261, 262, 263, 264, 266, 0, 265, 77, 0,
	105, 160, 128, 94, 151, 121, 0, 0, 0, 0,
	229, 0, 0, 0, 92, 0, 226, 0, 0, 104,
	268, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 441, 227, 247, 246, 249, 250, 251, 252,
	0, 0, 86, 248, 253, 254, 255, 0, 0, 224,
	240, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 238, 0, 0, 0, 0, 279, 0,
	239, 0, 0, 235, 236, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 277, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 0, 156, 157, 158, 159, 118, 85, 100, 133,
	269, 278, 275, 276, 273, 274, 272, 271, 270, 280,
	261, 262, 263, 264, 266, 0, 265, 77, 0, 105,
	160, 128, 94, 151, 121, 0, 0, 0, 0, 229,
	0, 0, 0, 92, 0, 226, 0, 0, 104, 268,
	106, 0, 0, 134, 114, 0, 0, 0, 0, 259,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 227, 247, 246, 249, 250, 251, 252, 0,
	0, 86, 248, 253, 254, 255, 0, 0, 224, 240,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 238, 220, 0, 0, 0, 279, 0, 239,
	0, 0, 235, 236, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	277, 0, 126, 0, 0, 137, 97, 96, 0, 0,
	0, 88, 0, 131, 122, 149, 0, 123, 130, 107,
	141, 127, 148, 178, 155, 139, 154, 78, 138, 147,
	87, 132, 80, 145, 136, 112, 101, 102, 79, 0,
	129, 91, 95, 90, 120, 142, 143, 89, 161, 83,
	153, 82, 84, 152, 119, 140, 146, 113, 110, 81,
	144, 111, 109, 103, 93, 98, 124, 108, 125, 99,
	116, 115, 117, 0, 0, 0, 135, 150, 162, 0,
	0, 156, 157, 158, 159, 118, 85, 100, 133, 269,
	278, 275, 276, 273, 274, 272, 271, 270, 280, 261,
	262, 263, 264, 266, 23, 265, 77, 0, 105, 160,
	128, 94, 151, 0, 0, 0, 121, 0, 0, 0,
	0, 229, 0, 0, 0, 92, 0, 226, 0, 0,
	104, 268, 106, 0, 0, 134, 114, 0, 0, 0,
	0, 259, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 227, 247, 246, 249, 250, 251,
	252, 0, 0, 86, 248, 253, 254, 255, 0, 0,
	224, 240, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 238, 0, 0, 0, 0, 279,
	0, 239, 0, 0, 235, 236, 241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 277, 0, 126, 0, 0, 137, 97, 96,
	0, 0, 0, 88, 0, 131, 122, 149, 0, 123,
	130, 107, 141, 127, 148, 178, 155, 139, 154, 78,
	138, 147, 87, 132, 80, 145, 136, 112, 101, 102,
	79, 0, 129, 91, 95, 90, 120, 142, 143, 89,
	161, 83, 153, 82, 84, 152, 119, 140, 146, 113,
	110, 81, 144, 111, 109, 103, 93, 98, 124, 108,
	125, 99, 116, 115, 117, 0, 0, 0, 135, 150,
	162, 0, 0, 156, 157, 158, 159, 118, 85, 100,
	133, 269, 278, 275, 276, 273, 274, 272, 271, 270,
	280, 261, 262, 263, 264, 266, 0, 265, 77, 0,
	105, 160, 128, 94, 151, 121, 0, 0, 0, 0,
	229, 0, 0, 0, 92, 0, 226, 0, 0, 104,
	268, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 227, 247, 246, 249, 250, 251, 252,
	0, 0, 86, 248, 253, 254, 255, 0, 0, 224,
	240, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 238, 0, 0, 0, 0, 279, 0,
	239, 0, 0, 235, 236, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 277, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 0, 156, 157, 158, 159, 118, 85, 100, 133,
	269, 278, 275, 276, 273, 274, 272, 271, 270, 280,
	261, 262, 263, 264, 266, 121, 265, 77, 0, 105,
	160, 128, 94, 151, 92, 0, 0, 0, 0, 104,
	268, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 227, 247, 246, 249, 250, 251, 252,
	0, 0, 86, 248, 253, 254, 255, 0, 0, 0,
	240, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 238, 0, 0, 0, 0, 279, 0,
	239, 0, 0, 235, 236, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 277, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 1230, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 0, 156, 157, 158, 159, 118, 85, 100, 133,
	269, 278, 275, 276, 273, 274, 272, 271, 270, 280,
	261, 262, 263, 264, 266, 121, 265, 77, 0, 105,
	160, 128, 94, 151, 92, 0, 0, 0, 0, 104,
	268, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 227, 247, 246, 249, 250, 251, 252,
	0, 0, 86, 248, 253, 254, 255, 0, 0, 0,
	240, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 238, 0, 0, 0, 0, 279, 0,
	239, 0, 0, 235, 236, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 277, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 0, 156, 157, 158, 159, 118, 85, 100, 133,
	269, 278, 275, 276, 273, 274, 272, 271, 270, 280,
	261, 262, 263, 264, 266, 0, 265, 77, 0, 105,
	160, 128, 94, 151, 121, 0, 0, 0, 463, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 104, 0,
	106, 0, 0, 134, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 465, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 460, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 0, 126, 0, 0, 137, 97, 96, 0, 0,
	0, 88, 0, 131, 122, 149, 0, 123, 130, 107,
	141, 127, 148, 178, 155, 139, 154, 78, 138, 147,
	87, 132, 80, 145, 136, 112, 101, 102, 79, 0,
	129, 91, 95, 90, 120, 142, 143, 89, 161, 83,
	153, 82, 84, 152, 119, 140, 146, 113, 110, 81,
	144, 111, 109, 103, 93, 98, 124, 108, 125, 99,
	116, 115, 117, 0, 0, 0, 135, 150, 162, 0,
	121, 156, 157, 158, 159, 118, 85, 100, 133, 92,
	0, 0, 0, 0, 104, 0, 106, 0, 0, 134,
	114, 0, 0, 0, 0, 0, 77, 0, 105, 160,
	128, 94, 151, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 72, 0, 67, 0, 0, 0, 73, 126, 0,
	0, 137, 97, 96, 0, 0, 0, 88, 0, 131,
	122, 149, 0, 123, 130, 107, 141, 127, 148, 69,
	155, 139, 154, 78, 138, 147, 87, 132, 80, 145,
	136, 112, 101, 102, 79, 598, 129, 91, 95, 90,
	120, 142, 143, 89, 161, 83, 153, 82, 84, 152,
	119, 140, 146, 113, 110, 81, 144, 111, 109, 103,
	93, 98, 124, 108, 125, 99, 116, 115, 117, 0,
	0, 0, 135, 150, 162, 0, 0, 156, 157, 158,
	159, 118, 85, 100, 133, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 105, 160, 128, 94, 151, 121,
	0, 586, 0, 559, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	599, 0, 0, 0, 0, 0, 0, 175, 0, 561,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 612, 613, 614, 615, 616, 617, 618, 0, 619,
	620, 621, 622, 623, 600, 601, 602, 603, 584, 585,
	0, 0, 587, 0, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 604, 605, 606, 607, 608, 609,
	610, 611, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 0,
	0, 135, 150, 162, 0, 0, 156, 157, 158, 159,
	118, 85, 100, 133, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 77, 0, 105, 160, 128, 94, 151, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 0,
	0, 135, 150, 162, 0, 0, 156, 157, 158, 159,
	118, 85, 100, 133, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 77, 0, 105, 160, 128, 94, 151, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 0,
	0, 135, 150, 162, 0, 121, 156, 157, 158, 159,
	118, 85, 100, 133, 92, 0, 0, 0, 0, 104,
	0, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	0, 77, 0, 105, 160, 128, 94, 151, 0, 0,
	0, 0, 0, 75, 0, 0, 670, 0, 0, 671,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 121, 156, 157, 158, 159, 118, 85, 100, 133,
	92, 0, 573, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 77, 0, 105,
	160, 128, 94, 151, 0, 0, 0, 0, 0, 75,
	0, 572, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 0, 156, 157,
	158, 159, 118, 85, 100, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 105, 160, 128, 94, 151,
	121, 0, 0, 0, 559, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 104, 0, 106, 0, 0, 134,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	561, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 126, 0,
	0, 137, 97, 96, 0, 0, 0, 88, 0, 131,
	122, 149, 0, 557, 130, 107, 141, 127, 148, 178,
	155, 139, 154, 78, 138, 147, 87, 132, 80, 145,
	136, 112, 101, 102, 79, 0, 129, 91, 95, 90,
	120, 142, 143, 89, 161, 83, 153, 82, 84, 152,
	119, 140, 146, 113, 110, 81, 144, 111, 109, 103,
	93, 98, 124, 108, 125, 99, 116, 115, 117, 0,
	0, 0, 135, 150, 162, 0, 121, 156, 157, 158,
	159, 118, 85, 100, 133, 92, 0, 0, 0, 0,
	104, 0, 106, 0, 0, 134, 114, 0, 0, 0,
	0, 0, 77, 0, 105, 160, 128, 94, 151, 0,
	0, 50, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 126, 0, 0, 137, 97, 96,
	0, 0, 0, 88, 0, 131, 122, 149, 0, 123,
	130, 107, 141, 127, 148, 178, 155, 139, 154, 78,
	138, 147, 87, 132, 80, 145, 136, 112, 101, 102,
	79, 0, 129, 91, 95, 90, 120, 142, 143, 89,
	161, 83, 153, 82, 84, 152, 119, 140, 146, 113,
	110, 81, 144, 111, 109, 103, 93, 98, 124, 108,
	125, 99, 116, 115, 117, 0, 0, 0, 135, 150,
	162, 0, 121, 156, 157, 158, 159, 118, 85, 100,
	133, 92, 0, 0, 0, 0, 104, 0, 106, 0,
	0, 134, 114, 0, 0, 0, 0, 0, 77, 0,
	105, 160, 128, 94, 151, 0, 0, 0, 0, 0,
	175, 0, 561, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	126, 0, 0, 137, 97, 96, 0, 0, 0, 88,
	0, 131, 122, 149, 0, 123, 130, 107, 141, 127,
	148, 178, 155, 139, 154, 78, 138, 147, 87, 132,
	80, 145, 136, 112, 101, 102, 79, 0, 129, 91,
	95, 90, 120, 142, 143, 89, 161, 83, 153, 82,
	84, 152, 119, 140, 146, 113, 110, 81, 144, 111,
	109, 103, 93, 98, 124, 108, 125, 99, 116, 115,
	117, 0, 0, 0, 135, 150, 162, 0, 121, 156,
	157, 158, 159, 118, 85, 100, 133, 92, 0, 0,
	0, 0, 104, 0, 106, 0, 0, 134, 114, 0,
	0, 0, 0, 0, 77, 0, 105, 160, 128, 94,
	151, 0, 0, 0, 0, 0, 75, 0, 465, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 126, 0, 0, 137,
	97, 96, 0, 0, 0, 88, 0, 131, 122, 149,
	0, 123, 130, 107, 141, 127, 148, 178, 155, 139,
	154, 78, 138, 147, 87, 132, 80, 145, 136, 112,
	101, 102, 79, 0, 129, 91, 95, 90, 120, 142,
	143, 89, 161, 83, 153, 82, 84, 152, 119, 140,
	146, 113, 110, 81, 144, 111, 109, 103, 93, 98,
	124, 108, 125, 99, 116, 115, 117, 0, 0, 0,
	135, 150, 162, 0, 0, 156, 157, 158, 159, 118,
	85, 100, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	77, 0, 105, 160, 128, 94, 151, 537, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 290, 0,
	0, 135, 150, 162, 0, 121, 156, 157, 158, 159,
	118, 85, 100, 133, 92, 0, 0, 0, 0, 104,
	0, 106, 0, 0, 134, 114, 0, 0, 0, 0,
	0, 77, 0, 105, 160, 128, 94, 151, 0, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 126, 0, 0, 137, 97, 96, 0,
	0, 0, 88, 0, 131, 122, 149, 0, 123, 130,
	107, 141, 127, 148, 178, 155, 139, 154, 78, 138,
	147, 87, 132, 80, 145, 136, 112, 101, 102, 79,
	0, 129, 91, 95, 90, 120, 142, 143, 89, 161,
	83, 153, 82, 84, 152, 119, 140, 146, 113, 110,
	81, 144, 111, 109, 103, 93, 98, 124, 108, 125,
	99, 116, 115, 117, 0, 0, 0, 135, 150, 162,
	0, 121, 156, 157, 158, 159, 118, 85, 100, 133,
	92, 0, 0, 0, 0, 104, 0, 106, 0, 0,
	134, 114, 0, 0, 0, 0, 0, 77, 0, 105,
	160, 128, 94, 151, 0, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 177, 0, 0, 0, 0, 126,
	0, 0, 137, 97, 96, 0, 0, 0, 88, 0,
	131, 122, 149, 0, 123, 130, 107, 141, 127, 148,
	178, 155, 139, 154, 78, 138, 147, 87, 132, 80,
	145, 136, 112, 101, 102, 79, 0, 129, 91, 95,
	90, 120, 142, 143, 89, 161, 83, 153, 82, 84,
	152, 119, 140, 146, 113, 110, 81, 144, 111, 109,
	103, 93, 98, 124, 108, 125, 99, 116, 115, 117,
	0, 0, 0, 135, 150, 162, 0, 121, 156, 157,
	158, 159, 118, 85, 100, 133, 92, 0, 0, 0,
	0, 104, 0, 106, 0, 0, 134, 114, 0, 0,
	0, 0, 0, 77, 0, 105, 160, 128, 94, 151,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 126, 0, 0, 137, 97,
	96, 0, 0, 0, 88, 0, 131, 122, 149, 0,
	123, 130, 107, 141, 127, 148, 178, 155, 139, 154,
	78, 138, 147, 87, 132, 80, 145, 136, 112, 101,
	102, 79, 0, 129, 91, 95, 90, 120, 142, 143,
	89, 161, 83, 153, 82, 84, 152, 119, 140, 146,
	113, 110, 81, 144, 111, 109, 103, 93, 98, 124,
	108, 125, 99, 116, 115, 117, 0, 0, 0, 135,
	150, 162, 0, 121, 156, 157, 158, 159, 118, 85,
	100, 133, 92, 0, 0, 0, 0, 104, 0, 106,
	0, 0, 134, 114, 0, 0, 0, 0, 0, 77,
	0, 105, 160, 128, 94, 151, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	0, 126, 0, 0, 137, 97, 96, 0, 0, 0,
	88, 0, 131, 122, 149, 0, 123, 130, 107, 141,
	127, 148, 178, 155, 139, 154, 78, 138, 147, 87,
	132, 80, 145, 136, 112, 101, 102, 79, 0, 129,
	91, 95, 90, 120, 142, 143, 89, 161, 83, 153,
	82, 84, 152, 119, 140, 146, 113, 110, 81, 144,
	111, 109, 103, 93, 98, 124, 108, 125, 99, 116,
	115, 117, 0, 0, 0, 135, 150, 162, 0, 121,
	156, 157, 158, 159, 118, 85, 100, 133, 92, 0,
	0, 0, 0, 104, 0, 106, 0, 0, 134, 114,
	0, 0, 0, 0, 0, 77, 0, 105, 160, 128,
	94, 151, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 126, 0, 0,
	137, 97, 96, 0, 0, 0, 88, 0, 131, 122,
	149, 0, 123, 130, 107, 141, 127, 148, 178, 155,
	139, 154, 78, 138, 147, 87, 132, 80, 145, 136,
	112, 101, 102, 79, 0, 129, 91, 95, 90, 120,
	142, 143, 89, 161, 83, 153, 82, 84, 152, 119,
	140, 146, 113, 110, 81, 144, 111, 109, 103, 93,
	98, 124, 108, 125, 99, 116, 115, 117, 0, 0,
	0, 135, 150, 162, 0, 0, 156, 157, 158, 159,
	118, 85, 100, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 105, 160, 128, 94, 151,
}
var yyPact = [...]int{

	2115, -1000, -176, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 737, 769, -1000, -1000, -1000, -1000, -1000, -1000, 582,
	6372, 26, 44, -11, 8743, 42, 1237, 9301, -1000, -37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, -1000, -1000,
	-1000, -1000, -1000, 727, 733, 556, 717, 656, -1000, 5106,
	27, 7788, 8557, 4449, -1000, 444, 39, 9301, -128, 8929,
	22, 22, 22, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41, 9301, -1000, 9301, 8, 439, 8,
	8, 8, 9301, -1000, 90, -1000, -1000, -1000, -1000, 9301,
	436, 682, 72, 2825, 2825, 2825, 2825, -32, 2825, 2825,
	602, -1000, -1000, -1000, -1000, 2825, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 334, 691, 5547, 5547, 737,
	-1000, 533, -1000, -1000, -1000, 686, -1000, -1000, 177, 751,
	-1000, 6186, 89, -1000, 5547, 2231, 510, -1000, -1000, 510,
	-1000, -1000, 67, -1000, -1000, 5967, 5967, 5967, 5967, 5967,
	5967, 5967, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 510, -1000, 5328, 510,
	510, 510, 510, 510, 510, 510, 510, 5547, 510, 510,
	510, 510, 510, 510, 510, 510, 510, 510, 510, 510,
	510, 8371, 477, 750, -1000, -1000, -1000, 714, 7011, 7602,
	9301, 482, -1000, 500, 3985, -1000, -1000, -1000, 140, 7383,
	-1000, -1000, -1000, 681, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 435, -1000, 6505,
	432, 2825, 31, 566, 406, 159, 387, 9301, 9301, 2825,
	29, 9301, 711, 601, 9301, 385, 376, -1000, 4217, -1000,
	2825, 2825, 2825, 2825, 2825, 2825, 2825, 2825, -1000, -1000,
	-1000, -1000, -1000, -1000, 2825, 2825, -1000, -1000, 9301, -1000,
	-1000, -1000, -1000, 764, 110, 445, 88, 501, -1000, 333,
	727, 334, 656, 7197, 613, -1000, -1000, 9301, -1000, 5547,
	5547, 300, -1000, 8160, -1000, -1000, 3289, 121, 5967, 234,
	135, 5967, 5967, 5967, 5967, 5967, 5967, 5967, 5967, 5967,
	5967, 5967, 5967, 5967, 5967, 5967, 227, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 357, -1000, 533, 778, 778,
	76, 76, 76, 76, 76, 76, 1902, 4668, 334, 425,
	256, 5328, 5106, 5106, 5547, 5547, 9115, 9115, 5106, 720,
	145, 256, 8929, -1000, 334, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5106, 5106, 5106, 5106, -12, 9301, -1000, 9115,
	7788, 7788, 7788, 7788, 7788, -1000, 644, 642, -1000, 635,
	616, 634, 9301, -1000, 414, 7011, 81, 510, -1000, 7974,
	-1000, -1000, -12, 7788, 9301, -1000, -1000, 3985, 500, 5547,
	75, -1000, -1000, -1000, -1000, 2593, 126, 272, -96, -1000,
	-1000, -1000, 525, -1000, 525, 525, 525, 525, -63, -63,
	-63, -63, -1000, -1000, -1000, -1000, -1000, 581, 574, -1000,
	525, 525, 525, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 551,
	551, 551, 535, 535, 584, -1000, 9301, -148, 355, 2825,
	709, 2825, -1000, 273, -1000, 9301, -1000, -1000, 9301, 2825,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 665, 5547, 5547,
	3753, 5547, -1000, -1000, -1000, 691, -1000, 720, 731, -1000,
	673, 671, 5106, -1000, -1000, 121, 148, -1000, -1000, 338,
	-1000, -1000, -1000, -1000, 85, 510, -1000, 1628, -1000, -1000,
	-1000, -1000, 234, 5967, 5967, 5967, 43, 1628, 1542, 280,
	220, 76, 294, 294, 100, 100, 100, 100, 100, 71,
	71, -1000, -1000, -1000, 334, -1000, -1000, -1000, 334, 5106,
	494, -1000, -1000, 5547, -1000, 334, 404, 404, 390, 276,
	541, -1000, 79, 527, 404, 5106, 150, -1000, 5547, 334,
	-1000, 404, 334, 404, 404, 461, 510, -1000, 507, -1000,
	134, 750, 565, 599, 528, -1000, -1000, -1000, -1000, 623,
	-1000, 622, -1000, -1000, -1000, -1000, -1000, 38, 35, 33,
	8929, -1000, 756, 506, -1000, -1000, 256, -1000, 342, 486,
	2361, -1000, -1000, -1000, -1000, -1000, -1000, 540, 699, 129,
	136, 314, -1000, -1000, 685, -1000, 166, -100, -1000, -1000,
	241, -63, -63, -1000, -1000, 75, 679, 75, 75, 75,
	287, 287, -1000, -1000, -1000, -1000, 240, -1000, -1000, -1000,
	232, -1000, 590, 8929, 2825, -1000, 3521, -1000, -1000, -1000,
	-1000, -1000, -1000, 628, 356, 173, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -19, -1000, 2825,
	-1000, 661, 256, 256, 74, -1000, -1000, 9301, -1000, -1000,
	-1000, -1000, 499, -1000, -1000, -1000, 3057, 5106, -1000, 43,
	1628, 1500, -1000, 5967, 5967, -1000, -1000, 404, 5106, 256,
	-1000, -1000, -1000, 123, 227, 123, 5967, 5967, 3753, 5967,
	5967, -142, 505, 137, -1000, 5547, 279, -1000, -1000, -1000,
	-1000, -1000, 587, 9115, 510, -1000, 6801, 8929, 737, 9115,
	5547, 5547, -1000, -1000, 5547, 536, -1000, 5547, -1000, -1000,
	-1000, 510, 510, 510, 383, -1000, 737, -1000, -1000, 2593,
	-1000, 2593, 8929, -1000, 298, 281, -1000, -1000, 586, 37,
	-1000, -1000, -1000, 451, 75, 75, -1000, 109, -1000, -1000,
	-1000, 401, -1000, 399, 483, 396, 9301, -1000, -1000, 479,
	-1000, 131, -1000, -1000, 8929, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8929, 9301, -1000,
	-1000, -1000, -1000, -1000, 8929, -1000, -1000, 3521, -1000, 756,
	7788, -1000, -1000, 334, -1000, 5967, 1628, 1628, -1000, -1000,
	334, 525, 525, -1000, 525, 535, -1000, 525, -46, 525,
	-47, 334, 334, 1436, 1462, -1000, 1143, 1327, 510, -139,
	-1000, 256, 5547, -1000, 702, 454, 473, -1000, -1000, 4887,
	334, 391, 65, 383, 727, -1000, 256, 256, 256, 8929,
	256, 8929, 8929, 8929, 6591, 8929, 727, 2361, -1000, 364,
	-1000, 525, -1000, -1000, -87, 763, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -63, 283, -63,
	209, -1000, 183, 2825, 3521, 2593, -1000, 512, -1000, -1000,
	-1000, -1000, 704, 748, 476, -1000, 1628, -1000, -1000, 56,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5967,
	5967, -1000, 5967, 5967, 5967, 334, 270, 256, 697, -1000,
	510, -1000, -1000, 496, 8929, 8929, -1000, -1000, 362, -1000,
	354, 354, 354, 81, -1000, -1000, 584, 8929, -1000, 128,
	-1000, -113, 75, -1000, 75, 392, 384, -1000, -1000, -1000,
	8929, 510, 746, 729, -1000, -1000, 796, 796, 796, 796,
	-26, -1000, -1000, 761, -1000, 510, -1000, 533, 53, -1000,
	8929, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 175, 696,
	-1000, 695, -1000, -1000, -1000, -1000, -1000, 346, -20, -1000,
	5547, 5547, -1000, -1000, -1000, -1000, 334, 51, -152, 9115,
	473, 334, 8929, -1000, -1000, 250, -1000, -1000, 566, 297,
	-1000, 8929, 256, 472, -1000, 659, -146, -157, 471, -1000,
	-1000, -1000, -148, -1000, -20, 670, -1000, 649, -1000, -1000,
	-1000, -23, -149, -25, -153, 510, -158, 5757, -1000, 796,
	334, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1007, 35, 501, 1006, 1005, 1004, 1003, 1001, 998,
	997, 994, 993, 992, 990, 989, 988, 987, 986, 985,
	982, 978, 977, 976, 98, 975, 974, 973, 47, 972,
	60, 966, 965, 29, 448, 32, 41, 771, 964, 18,
	87, 106, 963, 34, 960, 959, 957, 955, 63, 954,
	951, 1339, 950, 949, 13, 27, 948, 945, 944, 941,
	51, 383, 937, 936, 934, 921, 912, 911, 40, 3,
	5, 8, 14, 909, 222, 6, 904, 39, 903, 902,
	886, 885, 26, 883, 43, 882, 21, 42, 881, 9,
	50, 25, 20, 4, 58, 880, 28, 44, 878, 248,
	877, 133, 234, 875, 873, 871, 870, 54, 175, 504,
	528, 53, 854, 12, 853, 1299, 55, 45, 19, 849,
	46, 244, 33, 848, 847, 31, 846, 843, 841, 831,
	827, 826, 824, 57, 822, 821, 820, 16, 24, 817,
	816, 52, 23, 813, 812, 810, 30, 49, 809, 38,
	808, 806, 803, 22, 15, 790, 10, 788, 787, 7,
	785, 17, 784, 11, 783, 2, 37, 782, 780, 0,
	661, 779, 777, 59,
}
var yyR1 = [...]int{

	0, 167, 168, 168, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 171, 171,
	46, 46, 90, 90, 10, 10, 123, 123, 11, 11,
	11, 11, 11, 11, 11, 165, 165, 164, 163, 163,
	162, 162, 161, 16, 150, 151, 151, 151, 147, 126,
	126, 126, 126, 129, 129, 127, 127, 127, 127, 127,
	127, 127, 128, 128, 128, 128, 128, 130, 130, 130,
	130, 130, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 132, 132, 132,
	132, 132, 132, 132, 132, 146, 146, 133, 133, 141,
	141, 142, 142, 142, 139, 139, 140, 140, 143, 143,
	143, 134, 134, 134, 134, 134, 134, 134, 136, 136,
	144, 144, 137, 137, 137, 138, 138, 145, 145, 145,
	145, 145, 135, 135, 148, 155, 155, 155, 155, 155,
	149, 149, 157, 157, 156, 152, 152, 152, 153, 153,
	153, 154, 154, 154, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 160, 158, 158, 159, 159, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 124, 124, 124, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 172, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 112, 112, 112,
	111, 111, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 119, 119, 118,
	118, 118, 117, 117, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 100, 100, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 173, 173, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 122, 122, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 96, 94, 94, 97, 97, 95, 95, 95, 114,
	114, 114, 98, 98, 101, 101, 102, 102, 99, 99,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	104, 104, 104, 105, 105, 106, 106, 106, 113, 113,
	109, 109, 110, 110, 115, 115, 116, 116, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 169, 170,
	120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 1, 1, 2, 8,
	4, 6, 5, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 1, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 3, 4, 2, 4, 2, 2, 2, 2,
	3, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -167, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 139, 116, 132, 49, 151, 152,
	154, 155, 25, 133, 134, 137, 138, -169, 8, 222,
	53, -168, 237, -82, 15, -26, 5, -24, -172, -24,
	-24, -24, -24, -24, -150, 53, -106, 121, 70, 147,
	214, 118, 119, 125, -109, 56, -108, 230, 151, 162,
	156, 183, 175, 173, 176, 210, 65, 154, 135, 171,
	167, 165, 27, 188, 235, 166, 131, 130, 189, 193,
	211, 160, 161, 187, 32, 232, 34, 143, 191, 186,
	182, 185, 159, 181, 38, 195, 194, 196, 209, 178,
	168, 18, 138, 141, 190, 192, 126, 145, 234, 164,
	142, 137, 155, 212, 37, 200, 158, 129, 152, 149,
	179, 144, 169, 170, 184, 157, 180, 153, 146, 139,
	201, 236, 177, 174, 150, 148, 205, 206, 207, 208,
	233, 172, 202, -99, 121, 123, 119, 119, 120, 121,
	214, 118, 119, -51, -115, 56, -108, 121, 147, 119,
	106, 176, 112, 203, 120, 32, 145, -124, 119, 204,
	148, 205, 206, 207, 208, 56, 212, 211, -115, 153,
	-120, -120, -120, -120, -120, -2, -86, 17, 16, -5,
	-3, -169, 6, 20, 21, -30, 39, 40, -25, -36,
	97, -37, -115, -56, 72, -61, 29, 56, -108, 23,
	-60, -57, -75, -73, -74, 106, 107, 95, 96, 103,
	73, 108, -65, -63, -64, -66, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -109, -71, -169, 43,
	44, 223, 224, 225, 226, 229, 227, 75, 33, 213,
	221, 220, 219, 217, 218, 215, 216, 124, 214, 101,
	222, -99, -39, -40, -41, -42, -53, -74, -169, -51,
	11, -46, -51, -94, -123, -97, 212, 211, -110, -95,
	-109, -107, 210, 176, 209, 117, 71, 22, 24, 198,
	74, 106, 16, 75, 105, 223, 112, 47, 215, 216,
	213, 225, 226, 214, 203, 29, 10, 25, 133, 21,
	99, 114, 78, 79, 136, 23, 134, 69, 19, 50,
	11, 13, 14, 124, 123, 90, 120, 45, 8, 108,
	26, 87, 41, 28, 43, 88, 17, 217, 218, 31,
	229, 140, 101, 48, 35, 72, 67, 51, 70, 15,
	46, 89, 115, 222, 44, 118, 6, 228, 30, 132,
	42, 119, 204, 77, 122, 68, 5, 125, 9, 49,
	52, 219, 220, 221, 33, 76, 12, -151, -147, 56,
	120, -51, 222, -109, -102, 124, -102, -102, 119, -51,
	-51, -101, 124, 56, -101, -101, -101, -51, 109, -51,
	56, 30, 214, 56, 145, 119, 146, 121, -121, -169,
	-110, -121, -121, -121, 149, 150, -121, -121, 51, -121,
	-170, 55, -87, 19, 31, -37, -115, -83, -84, -37,
	-82, -2, -24, 35, -28, 21, 64, 11, -112, 71,
	70, 87, -111, 22, -109, 58, 109, -37, -58, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -100, -169, -74, -169, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -169, -2, -69,
	-37, -169, -169, -169, -169, -169, -169, -169, -169, -169,
	-78, -37, -169, -173, -169, -173, -173, -173, -173, -173,
	-173, -173, -169, -169, -169, -169, -52, 26, -51, 30,
	54, -47, -49, -48, -50, 41, 45, 47, 42, 43,
	44, 48, -119, 22, -39, -169, -118, 141, -117, 22,
	-115, 58, -51, -171, 54, 11, 52, 54, -94, 80,
	-114, -109, 58, 29, 30, 55, 54, -126, -129, -131,
	-130, -132, -127, -128, 173, 174, 106, 177, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 30, 135,
	169, 170, 171, 172, 189, 190, 191, 192, 193, 194,
	195, 196, 156, 157, 158, 159, 160, 161, 162, 164,
	165, 166, 167, 168, 56, -121, 121, -165, 52, 56,
	72, 56, -51, -51, -121, 122, -51, 23, 51, -51,
	56, 56, -116, -115, -107, -121, -121, -121, -121, -121,
	-121, -121, -121, -121, -121, -51, 9, 90, 54, 18,
	109, 54, -85, 24, 25, -86, -170, -30, -62, -109,
	59, 62, -29, 42, -51, -37, -37, -67, 67, 72,
	68, 69, -111, 97, -116, -110, -107, -61, -68, -71,
	-74, 63, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -122, 56, 58, 56, -60, -60, -109, -35, 21,
	-34, -36, -170, 54, -170, -2, -34, -34, -37, -37,
	-75, -109, -115, -75, -34, -28, -76, -77, 76, -109,
	-170, -34, -35, -34, -34, -90, 141, -51, -93, -96,
	-75, -40, -41, -41, -40, -41, 41, 41, 41, 46,
	41, 46, 41, -48, -115, -170, -54, 49, 123, 50,
	-169, -117, -90, -39, -51, -97, -37, -138, 105, -152,
	-153, -154, -110, 58, 59, -147, -148, -155, 126, 129,
	125, -149, 120, 28, -143, 67, 72, -139, 201, -133,
	53, -133, -133, -133, -133, -137, 176, -137, -137, -137,
	53, 53, -133, -133, -133, -141, 53, -141, -141, -142,
	53, -142, -113, 52, -51, -163, 233, -164, 56, -121,
	23, -121, -103, 117, 114, 115, -160, 113, 198, 176,
	65, 29, 15, 223, 141, 236, 56, 142, -51, -51,
	-121, 37, -37, -37, -116, -84, -87, -98, 19, 11,
	33, 33, -34, 67, 68, 69, 109, -169, -68, -61,
	-61, -61, -33, 136, 71, -170, -170, -34, 54, -37,
	-170, -170, -170, 54, 52, 22, 54, 11, 109, 54,
	11, -170, -34, -79, -77, 78, -37, -170, -170, -170,
	-170, -170, -59, 30, 33, -2, -169, -169, -55, 54,
	12, 80, -44, -43, 51, 52, -45, 51, -43, 41,
	41, 120, 120, 120, -91, -109, -55, -55, 56, 54,
	-154, 80, 53, 28, -149, -149, 56, 56, -134, 29,
	67, -140, 202, 59, -137, -137, -138, 30, -138, -138,
	-138, -146, 58, -146, 59, 59, 51, -109, -121, -162,
	-161, -110, -120, -166, 147, 127, 128, 131, 130, 56,
	120, 28, 126, 129, 141, 125, -166, 147, -104, -105,
	122, 22, 120, 28, 141, -121, 38, 109, -51, -38,
	11, 97, -110, -35, -33, 71, -61, -61, -170, -36,
	-125, 106, 173, 135, 171, 167, 187, 178, 200, 169,
	201, -122, -125, -61, -61, -110, -61, -61, 230, -82,
	79, -37, 77, -92, 51, -93, -70, -72, -71, -169,
	-2, -88, -109, -91, -82, -96, -37, -37, -37, 53,
	-37, -169, -169, -169, -170, 54, -82, -153, -154, -157,
	-156, -109, 56, 56, -136, 51, 58, 59, 60, 67,
	213, 66, 55, -138, -138, 56, 106, 55, 54, 55,
	54, 55, 54, -51, 54, 80, -120, -109, -120, -109,
	-51, -120, -109, -55, -39, -170, -61, -170, -133, -133,
	-133, -142, -133, 161, -133, 161, -170, -170, -170, 54,
	19, -170, 54, 19, -169, -32, 228, -37, 27, -92,
	54, -170, -170, -170, 54, 109, -170, -86, -89, -109,
	-89, -89, -89, -118, -109, -86, 55, 54, -133, -144,
	198, 9, -137, 58, -137, 59, 59, -121, -161, -154,
	53, 26, -80, 13, -137, 56, -61, -61, -61, -61,
	-61, -170, 58, 28, -72, 33, -2, -169, -109, -109,
	54, 55, -170, -170, -170, -54, -113, -156, -145, 126,
	28, 125, 213, -138, -138, 55, 55, -89, -169, -81,
	14, 16, -170, -170, -170, -170, -31, 90, 233, 9,
	-70, -2, 109, -109, -135, 65, 28, 28, 55, -158,
	-159, 141, -37, -69, -170, 231, 48, 234, -93, -170,
	-109, 58, -165, -170, 54, -109, 38, 232, 235, -163,
	-159, 33, 38, 143, 233, 144, 234, -169, 235, -61,
	140, -170, -170,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 476, 0, 245, 245, 245, 245, 245, 245, 0,
	545, 528, 0, 0, 0, 0, 231, 235, 236, 0,
	238, 239, 740, 740, 740, 740, 740, 0, 33, 34,
	738, 1, 3, 484, 0, 0, 249, 252, 247, 0,
	528, 0, 0, 0, 48, 0, 0, 728, 0, 729,
	526, 526, 526, 546, 547, 550, 551, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 730, 731, 732, 733, 734,
	735, 736, 737, 0, 0, 529, 0, 524, 0, 524,
	524, 524, 0, 206, 316, 554, 555, 728, 729, 0,
	0, 0, 0, 741, 741, 741, 741, 0, 741, 741,
	224, 226, 227, 228, 229, 741, 232, 233, 234, 237,
	240, 241, 242, 243, 244, 27, 488, 0, 0, 476,
	29, 0, 245, 250, 251, 255, 253, 254, 246, 0,
	263, 267, 0, 324, 0, 329, 331, -2, -2, 0,
	366, 367, 368, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 393, 394, 395, 396, 461, 462, 463, 464,
	465, 466, 467, 468, 333, 334, 458, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 423,
	423, 423, 423, 423, 423, 423, 423, 0, 0, 0,
	0, 0, 0, 274, 276, 277, 278, 297, 0, 299,
	0, 0, 40, 44, 0, 512, -2, -2, 0, 0,
	552, 553, -2, 657, -2, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 0, 65, 0,
	0, 741, 0, 55, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 207,
	741, 741, 741, 741, 741, 741, 741, 741, 216, 742,
	743, 217, 218, 219, 741, 741, 221, 222, 0, 230,
	28, 739, 22, 0, 0, 485, 0, 477, 478, 481,
	484, 27, 252, 0, 257, 256, 248, 0, 264, 0,
	0, 0, 268, 0, 270, 271, 0, 327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 352, 353,
	354, 355, 356, 357, 330, 0, 344, 0, 0, 0,
	386, 387, 388, 389, 390, 391, 0, 259, 27, 0,
	364, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	0, 450, 0, 415, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 259, 0, 0, 42, 0, 315, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 307, 0,
	0, 0, 0, 298, 0, 0, 318, 696, 300, 0,
	302, 303, 42, 0, 0, 38, 39, 0, 45, 0,
	145, 519, 520, 521, 517, 165, 0, 128, 124, 70,
	71, 72, 117, 74, 117, 117, 117, 117, 142, 142,
	142, 142, 100, 101, 102, 103, 104, 0, 0, 87,
	117, 117, 117, 91, 107, 108, 109, 110, 111, 112,
	113, 114, 75, 76, 77, 78, 79, 80, 81, 119,
	119, 119, 121, 121, 548, 50, 0, 58, 0, 741,
	0, 741, 63, 0, 181, 0, 200, 525, 0, 741,
	203, 204, 317, 556, 557, 208, 209, 210, 211, 212,
	213, 214, 215, 220, 223, 225, 489, 0, 0, 0,
	0, 0, 480, 482, 483, 488, 30, 255, 0, 469,
	0, 0, 0, 258, 25, 325, 326, 328, 345, 0,
	347, 349, 269, 265, 0, 459, -2, 335, 336, 360,
	361, 362, 0, 0, 0, 0, 358, 340, 0, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 385, 434, 435, 0, 383, 384, 392, 0, 0,
	260, 261, 363, 0, 507, 27, 0, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 456, 453, 0, 0,
	424, 0, 0, 0, 0, 0, 0, 314, 322, 509,
	0, 275, 293, 295, 0, 290, 305, 306, 308, 0,
	310, 0, 312, 313, 279, 280, 281, 0, 0, 0,
	0, 301, 322, 322, 41, 513, 514, 515, 0, 64,
	166, 168, 171, 172, 173, 66, 67, 0, 0, 0,
	0, 0, 160, 161, 131, 129, 0, 126, 125, 73,
	0, 142, 142, 94, 95, 145, 0, 145, 145, 145,
	0, 0, 88, 89, 90, 82, 0, 83, 84, 85,
	0, 86, 0, 0, 741, 52, 0, 56, 57, 53,
	527, 54, 740, 0, 0, 540, 182, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 0, 199, 741,
	202, 0, 486, 487, 0, 479, 23, 0, 522, 523,
	470, 471, 272, 346, 348, 350, 0, 259, 337, 358,
	341, 0, 338, 0, 0, 332, 397, 0, 0, 365,
	-2, 400, 401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 454, 0, 0, 414, 425, 426,
	427, 428, 501, 0, 0, -2, 0, 0, 476, 0,
	0, 0, 287, 294, 0, 0, 288, 0, 289, 309,
	311, 0, 0, 0, 0, 285, 476, 37, 146, 0,
	169, 0, 0, 155, 0, 0, 158, 159, 138, 0,
	130, 69, 127, 0, 145, 145, 96, 0, 97, 98,
	99, 0, 115, 0, 0, 0, 0, 549, 51, 59,
	60, 0, 174, 740, 0, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 740, 0, 0, 740,
	541, 542, 543, 544, 0, 201, 490, 0, 24, 322,
	0, 266, 460, 0, 339, 0, 359, 342, 398, 262,
	0, 117, 117, 439, 117, 121, 442, 117, 444, 117,
	447, 0, 0, 0, 0, 459, 0, 0, 0, 451,
	413, 457, 0, 31, 0, 501, 491, 503, 505, 0,
	27, 0, 497, 0, 484, 510, 323, 511, 291, 0,
	296, 0, 0, 0, 299, 0, 484, 167, 170, 0,
	162, 117, 156, 157, 140, 0, 132, 133, 134, 135,
	136, 137, 118, 92, 93, 143, 144, 142, 0, 142,
	0, 122, 0, 741, 0, 0, 175, 0, 176, 178,
	179, 180, 0, 472, 273, 399, 343, 402, 436, 142,
	440, 441, 443, 445, 446, 448, 404, 403, 405, 0,
	0, 408, 0, 0, 0, 0, 0, 455, 0, 32,
	0, 506, -2, 0, 0, 0, 43, 35, 0, 283,
	0, 0, 0, 318, 286, 36, 548, 0, 164, 147,
	141, 0, 145, 116, 145, 0, 0, 49, 61, 62,
	0, 0, 474, 0, 437, 438, 0, 0, 0, 0,
	429, 412, 452, 0, 504, 0, -2, 0, 499, 498,
	0, 292, 319, 320, 321, 282, 154, 163, 152, 0,
	149, 151, 139, 105, 106, 120, 123, 0, 0, 26,
	0, 0, 406, 407, 409, 410, 0, 0, 0, 0,
	494, 27, 0, 284, 68, 0, 148, 150, 55, 0,
	195, 0, 475, 473, 411, 0, 0, 0, 502, -2,
	500, 153, 58, 194, 0, 0, 430, 0, 433, 177,
	196, 0, 431, 0, 0, 0, 0, 0, 432, 0,
	0, 197, 198,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 237,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:294
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:299
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:300
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:304
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:327
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:345
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:352
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:368
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:372
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:379
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:391
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:419
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:423
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:429
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:433
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:437
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:442
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:446
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:456
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:462
		{
			yyVAL.str = SessionStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:466
		{
			yyVAL.str = GlobalStr
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:472
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:477
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:482
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:486
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:490
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:498
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:502
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:507
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:517
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:522
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:527
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:538
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:544
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:550
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:557
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:564
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:569
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:579
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:590
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:803
		{
			yyVAL.optVal = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:807
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:812
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:816
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:824
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:828
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:834
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:842
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:846
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:851
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:861
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:874
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:886
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:890
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:903
		{
			yyVAL.optVal = nil
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = ""
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:934
		{
			yyVAL.str = ""
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:938
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:943
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.colKeyOpt = colKey
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:955
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:974
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:980
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:984
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:988
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:992
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:996
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.str = yyDollar[1].str
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 177:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 178:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1106
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1111
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 197:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1171
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1179
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1184
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = SessionStr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = GlobalStr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Begin{}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Begin{}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &Commit{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &Rollback{}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &OtherRead{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &OtherRead{}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &OtherRead{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1385
		{
			setAllowComments(yylex, true)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.bytes2 = nil
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.str = UnionStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.str = UnionAllStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.str = UnionDistinctStr
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.str = ""
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = SQLCacheStr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.str = DistinctStr
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.str = StraightJoinHint
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.selectExprs = nil
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.empty = struct{}{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.empty = struct{}{}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.str = JoinStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.str = JoinStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.str = JoinStr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = StraightJoinStr
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.str = LeftJoinStr
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.str = LeftJoinStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = RightJoinStr
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = RightJoinStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.str = NaturalJoinStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.indexHints = nil
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 343:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.str = IsNullStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.str = IsNotNullStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.str = IsTrueStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.str = IsNotTrueStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = IsFalseStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.str = IsNotFalseStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.str = EqualStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.str = LessThanStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.str = GreaterThanStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.str = LessEqualStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = GreaterEqualStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = NotEqualStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2015
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2023
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 406:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 409:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 411:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = BooleanModeStr
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.str = QueryExpansionStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = nil
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.str = string("")
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = &NullVal{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.exprs = nil
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.orderBy = nil
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.str = AscScr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.str = AscScr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.str = DescScr
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.limit = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.str = ""
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = ForUpdateStr
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.str = ShareModeStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2510
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2523
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.updateExprs = nil
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.bytes = []byte("charset")
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.expr = &Default{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.byt = 0
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.byt = 1
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2666
		{
			yyVAL.str = IgnoreStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.empty = struct{}{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.empty = struct{}{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.empty = struct{}{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2680
		{
			yyVAL.empty = struct{}{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.empty = struct{}{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.empty = struct{}{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.empty = struct{}{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2734
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			decNesting(yylex)
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2965
		{
			forceEOF(yylex)
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2970
		{
			forceEOF(yylex)
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2974
		{
			forceEOF(yylex)
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2978
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

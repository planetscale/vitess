//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const BIT_LITERAL = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const INTERVAL = 57430
const JSON_EXTRACT_OP = 57431
const JSON_UNQUOTE_EXTRACT_OP = 57432
const CREATE = 57433
const ALTER = 57434
const DROP = 57435
const RENAME = 57436
const ANALYZE = 57437
const TABLE = 57438
const INDEX = 57439
const VIEW = 57440
const TO = 57441
const IGNORE = 57442
const IF = 57443
const UNIQUE = 57444
const USING = 57445
const PRIMARY = 57446
const SHOW = 57447
const DESCRIBE = 57448
const EXPLAIN = 57449
const DATE = 57450
const ESCAPE = 57451
const REPAIR = 57452
const OPTIMIZE = 57453
const TRUNCATE = 57454
const MAXVALUE = 57455
const PARTITION = 57456
const REORGANIZE = 57457
const BIT = 57458
const TINYINT = 57459
const SMALLINT = 57460
const MEDIUMINT = 57461
const INT = 57462
const INTEGER = 57463
const BIGINT = 57464
const INTNUM = 57465
const REAL = 57466
const DOUBLE = 57467
const FLOAT_TYPE = 57468
const DECIMAL = 57469
const NUMERIC = 57470
const TIME = 57471
const TIMESTAMP = 57472
const DATETIME = 57473
const YEAR = 57474
const CHAR = 57475
const VARCHAR = 57476
const BOOL = 57477
const CHARACTER = 57478
const VARBINARY = 57479
const NCHAR = 57480
const TEXT = 57481
const TINYTEXT = 57482
const MEDIUMTEXT = 57483
const LONGTEXT = 57484
const BLOB = 57485
const TINYBLOB = 57486
const MEDIUMBLOB = 57487
const LONGBLOB = 57488
const JSON = 57489
const ENUM = 57490
const NULLX = 57491
const AUTO_INCREMENT = 57492
const APPROXNUM = 57493
const SIGNED = 57494
const UNSIGNED = 57495
const ZEROFILL = 57496
const DATABASES = 57497
const TABLES = 57498
const VITESS_KEYSPACES = 57499
const VITESS_SHARDS = 57500
const VSCHEMA_TABLES = 57501
const NAMES = 57502
const CHARSET = 57503
const CURRENT_TIMESTAMP = 57504
const DATABASE = 57505
const CURRENT_DATE = 57506
const CURRENT_TIME = 57507
const LOCALTIME = 57508
const LOCALTIMESTAMP = 57509
const UTC_DATE = 57510
const UTC_TIME = 57511
const UTC_TIMESTAMP = 57512
const REPLACE = 57513
const CONVERT = 57514
const CAST = 57515
const GROUP_CONCAT = 57516
const SEPARATOR = 57517
const MATCH = 57518
const AGAINST = 57519
const BOOLEAN = 57520
const LANGUAGE = 57521
const WITH = 57522
const QUERY = 57523
const EXPANSION = 57524
const UNUSED = 57525

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 261,
	77, 549,
	105, 549,
	-2, 38,
	-1, 263,
	77, 570,
	105, 570,
	-2, 40,
	-1, 268,
	105, 450,
	-2, 446,
	-1, 269,
	105, 451,
	-2, 447,
	-1, 537,
	5, 21,
	-2, 397,
	-1, 574,
	105, 453,
	-2, 449,
	-1, 726,
	5, 22,
	-2, 275,
	-1, 817,
	5, 22,
	-2, 398,
	-1, 889,
	5, 21,
	-2, 400,
	-1, 956,
	5, 22,
	-2, 401,
}

const yyNprod = 608
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 6935

var yyAct = [...]int{

	269, 961, 496, 832, 714, 866, 300, 613, 260, 894,
	375, 3, 600, 671, 43, 325, 715, 390, 573, 678,
	233, 374, 435, 779, 576, 62, 577, 787, 681, 750,
	133, 225, 289, 711, 695, 648, 586, 565, 348, 264,
	298, 226, 354, 609, 378, 271, 363, 132, 232, 42,
	249, 225, 225, 988, 242, 979, 985, 225, 974, 265,
	47, 983, 978, 248, 973, 879, 926, 275, 746, 593,
	836, 601, 247, 921, 227, 228, 229, 230, 231, 919,
	49, 50, 51, 52, 962, 770, 948, 281, 629, 964,
	463, 462, 472, 473, 465, 466, 467, 468, 469, 470,
	471, 464, 627, 588, 474, 386, 617, 282, 277, 903,
	867, 558, 560, 124, 594, 767, 443, 18, 38, 20,
	21, 769, 326, 37, 225, 438, 225, 633, 295, 272,
	225, 796, 869, 729, 323, 31, 626, 123, 728, 124,
	22, 126, 127, 128, 588, 727, 385, 451, 450, 273,
	437, 871, 278, 875, 129, 870, 125, 868, 30, 60,
	37, 40, 873, 508, 452, 486, 487, 933, 238, 751,
	740, 872, 286, 253, 911, 820, 874, 876, 791, 680,
	733, 559, 495, 623, 628, 621, 601, 266, 287, 394,
	587, 302, 382, 845, 474, 585, 449, 584, 798, 965,
	797, 904, 454, 902, 464, 631, 622, 474, 768, 450,
	766, 452, 393, 972, 655, 387, 284, 696, 881, 24,
	25, 27, 26, 28, 696, 452, 803, 625, 653, 654,
	652, 587, 590, 29, 32, 33, 453, 591, 34, 35,
	36, 624, 252, 846, 451, 450, 744, 225, 440, 351,
	940, 350, 451, 450, 225, 225, 356, 225, 40, 907,
	62, 452, 906, 630, 451, 450, 451, 450, 651, 452,
	672, 883, 673, 405, 632, 62, 759, 225, 758, 225,
	62, 452, 225, 452, 747, 225, 465, 466, 467, 468,
	469, 470, 471, 464, 959, 417, 474, 951, 905, 39,
	352, 757, 442, 422, 423, 424, 425, 426, 427, 428,
	844, 429, 430, 431, 432, 433, 418, 419, 420, 421,
	403, 404, 969, 288, 406, 834, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 463, 462, 472, 473,
	465, 466, 467, 468, 469, 470, 471, 464, 935, 288,
	474, 641, 643, 644, 62, 741, 642, 899, 898, 225,
	674, 37, 225, 225, 225, 225, 434, 265, 537, 540,
	283, 525, 272, 225, 780, 288, 376, 225, 785, 288,
	225, 851, 850, 225, 944, 225, 225, 556, 772, 773,
	774, 848, 847, 943, 389, 841, 62, 436, 265, 686,
	564, 562, 436, 819, 288, 391, 567, 527, 815, 389,
	388, 361, 574, 542, 389, 544, 686, 288, 552, 483,
	485, 602, 603, 604, 561, 541, 849, 543, 361, 288,
	569, 570, 488, 489, 490, 491, 492, 493, 712, 225,
	391, 615, 581, 785, 225, 252, 494, 225, 62, 498,
	499, 500, 501, 502, 503, 504, 44, 507, 509, 509,
	509, 509, 509, 509, 509, 509, 517, 518, 519, 520,
	636, 523, 524, 649, 611, 612, 396, 395, 734, 18,
	538, 837, 838, 839, 253, 253, 253, 253, 529, 484,
	840, 566, 18, 785, 62, 266, 521, 239, 760, 376,
	510, 511, 512, 513, 514, 515, 516, 253, 62, 556,
	812, 40, 595, 574, 614, 451, 450, 888, 596, 597,
	598, 599, 566, 40, 737, 18, 266, 675, 676, 389,
	389, 361, 452, 606, 607, 608, 40, 360, 700, 62,
	526, 40, 265, 610, 713, 572, 578, 693, 535, 718,
	536, 785, 716, 252, 252, 252, 252, 605, 704, 361,
	703, 122, 391, 554, 555, 54, 722, 533, 252, 40,
	436, 712, 446, 725, 724, 546, 252, 62, 721, 16,
	730, 549, 389, 545, 981, 647, 550, 977, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 735, 551, 732, 369, 370, 37, 748,
	749, 246, 467, 468, 469, 470, 471, 464, 62, 62,
	474, 498, 739, 771, 547, 237, 243, 244, 677, 548,
	389, 637, 753, 754, 755, 314, 313, 316, 317, 318,
	319, 762, 697, 976, 315, 320, 685, 709, 708, 650,
	365, 368, 369, 370, 366, 290, 367, 371, 355, 717,
	723, 37, 763, 752, 392, 909, 942, 291, 649, 743,
	266, 353, 941, 720, 886, 738, 813, 619, 445, 688,
	689, 373, 707, 692, 62, 687, 240, 241, 775, 355,
	706, 234, 954, 235, 44, 953, 683, 699, 698, 701,
	702, 365, 368, 369, 370, 366, 225, 367, 371, 929,
	566, 389, 710, 930, 448, 324, 472, 473, 465, 466,
	467, 468, 469, 470, 471, 464, 46, 578, 474, 802,
	48, 384, 41, 1, 62, 62, 821, 62, 62, 960,
	831, 436, 583, 575, 270, 726, 223, 814, 53, 582,
	756, 827, 761, 389, 901, 835, 589, 745, 592, 829,
	939, 225, 742, 830, 399, 225, 255, 255, 267, 400,
	398, 62, 255, 402, 401, 397, 130, 372, 842, 843,
	377, 786, 776, 777, 778, 616, 55, 765, 764, 62,
	620, 276, 482, 705, 259, 719, 522, 347, 952, 928,
	856, 801, 505, 694, 878, 301, 640, 854, 792, 574,
	864, 877, 865, 225, 861, 880, 862, 312, 789, 309,
	62, 62, 311, 310, 528, 62, 62, 62, 534, 889,
	62, 716, 887, 456, 885, 896, 897, 299, 293, 255,
	557, 255, 893, 251, 650, 255, 357, 364, 362, 884,
	824, 825, 826, 62, 257, 250, 735, 811, 925, 784,
	963, 532, 19, 782, 45, 245, 15, 783, 389, 389,
	14, 389, 833, 800, 13, 908, 12, 794, 795, 917,
	23, 799, 11, 10, 828, 578, 805, 578, 806, 807,
	808, 809, 9, 931, 8, 7, 6, 5, 4, 236,
	62, 932, 17, 938, 716, 855, 816, 817, 818, 858,
	859, 2, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 0, 389, 0, 947, 0,
	0, 292, 349, 0, 62, 253, 62, 265, 717, 955,
	0, 890, 685, 0, 0, 0, 0, 0, 900, 0,
	0, 0, 0, 0, 891, 892, 0, 967, 0, 895,
	895, 895, 255, 62, 389, 0, 0, 0, 0, 255,
	380, 975, 255, 860, 0, 436, 0, 62, 0, 0,
	578, 62, 914, 915, 0, 916, 910, 389, 918, 0,
	920, 455, 255, 254, 255, 0, 0, 255, 0, 0,
	255, 0, 924, 0, 252, 0, 0, 0, 0, 0,
	0, 717, 0, 37, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 497, 0, 0, 0, 0, 0, 0,
	506, 0, 945, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 389, 0, 0, 0,
	274, 0, 0, 949, 912, 913, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 266, 922, 923, 957, 0,
	958, 0, 0, 0, 255, 0, 267, 255, 255, 255,
	255, 0, 0, 934, 0, 936, 937, 0, 553, 288,
	571, 0, 255, 0, 0, 380, 0, 970, 563, 0,
	255, 255, 0, 0, 0, 984, 0, 267, 0, 0,
	563, 980, 0, 986, 950, 982, 0, 279, 0, 280,
	0, 956, 0, 285, 0, 463, 462, 472, 473, 465,
	466, 467, 468, 469, 470, 471, 464, 0, 0, 474,
	0, 0, 0, 857, 0, 0, 0, 638, 639, 968,
	645, 646, 971, 0, 255, 0, 0, 0, 0, 255,
	0, 0, 255, 463, 462, 472, 473, 465, 466, 467,
	468, 469, 470, 471, 464, 989, 990, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 788, 0, 0, 0, 497, 76, 0, 690, 691,
	0, 0, 84, 0, 0, 102, 90, 0, 0, 0,
	684, 563, 0, 0, 0, 684, 684, 0, 349, 684,
	0, 0, 0, 61, 0, 790, 0, 0, 0, 0,
	0, 0, 71, 684, 684, 684, 684, 451, 450, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 684, 0,
	383, 267, 0, 0, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 0, 0,
	439, 0, 441, 0, 0, 444, 0, 0, 447, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 72, 0, 101, 95, 111,
	0, 96, 100, 65, 109, 104, 88, 80, 81, 64,
	0, 99, 75, 79, 74, 93, 106, 107, 73, 120,
	68, 115, 67, 69, 114, 92, 105, 110, 89, 86,
	66, 108, 87, 85, 82, 77, 0, 0, 0, 103,
	112, 121, 0, 0, 116, 117, 118, 91, 70, 0,
	0, 0, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 83, 119, 98, 78,
	113, 0, 0, 0, 0, 0, 781, 0, 0, 568,
	0, 0, 0, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 804, 0, 684, 463, 462, 472, 473,
	465, 466, 467, 468, 469, 470, 471, 464, 0, 684,
	474, 0, 0, 0, 497, 94, 0, 0, 0, 822,
	823, 255, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 618, 102, 90, 0, 0, 634, 0, 0,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	255, 463, 462, 472, 473, 465, 466, 467, 468, 469,
	470, 471, 464, 0, 0, 474, 0, 0, 0, 0,
	882, 684, 0, 0, 0, 0, 0, 563, 684, 0,
	0, 58, 0, 56, 0, 0, 0, 59, 0, 97,
	0, 0, 0, 72, 0, 101, 95, 111, 255, 96,
	100, 65, 109, 104, 88, 80, 81, 64, 0, 99,
	75, 79, 74, 93, 106, 107, 73, 120, 68, 115,
	67, 69, 114, 92, 105, 110, 89, 86, 66, 108,
	87, 85, 82, 77, 0, 0, 0, 103, 112, 121,
	0, 0, 116, 117, 118, 91, 70, 0, 0, 0,
	927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 458, 63, 461, 83, 119, 98, 78, 113, 475,
	476, 477, 478, 479, 480, 481, 0, 459, 460, 457,
	463, 462, 472, 473, 465, 466, 467, 468, 469, 470,
	471, 464, 0, 0, 474, 462, 472, 473, 465, 466,
	467, 468, 469, 470, 471, 464, 0, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	966, 497, 0, 0, 211, 201, 174, 213, 152, 166,
	221, 167, 168, 195, 140, 182, 94, 164, 0, 155,
	135, 161, 136, 153, 176, 76, 179, 151, 203, 185,
	219, 84, 190, 0, 102, 90, 0, 0, 178, 205,
	180, 200, 173, 196, 145, 189, 214, 165, 193, 810,
	0, 0, 61, 0, 579, 580, 0, 0, 0, 0,
	0, 71, 0, 192, 210, 163, 194, 134, 191, 0,
	138, 141, 220, 208, 158, 159, 736, 0, 0, 0,
	0, 0, 0, 177, 181, 197, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 188, 0, 0,
	0, 142, 139, 175, 852, 0, 0, 144, 853, 157,
	198, 0, 206, 172, 222, 209, 170, 169, 212, 215,
	97, 204, 154, 162, 72, 160, 101, 95, 111, 187,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 137, 0, 103, 112,
	121, 150, 207, 116, 117, 118, 91, 70, 148, 149,
	146, 147, 183, 184, 216, 217, 218, 199, 143, 0,
	0, 202, 186, 63, 0, 83, 119, 98, 78, 113,
	211, 201, 174, 213, 152, 166, 221, 167, 168, 195,
	140, 182, 94, 164, 0, 155, 135, 161, 136, 153,
	176, 76, 179, 151, 203, 185, 219, 84, 190, 0,
	102, 90, 0, 0, 178, 205, 180, 200, 173, 196,
	145, 189, 214, 165, 193, 0, 0, 0, 61, 0,
	579, 580, 0, 0, 0, 0, 0, 71, 0, 192,
	210, 163, 194, 134, 191, 0, 138, 141, 220, 208,
	158, 159, 0, 0, 0, 0, 0, 0, 0, 177,
	181, 197, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 188, 0, 0, 0, 142, 139, 175,
	0, 0, 0, 144, 0, 157, 198, 0, 206, 172,
	222, 209, 170, 169, 212, 215, 97, 204, 154, 162,
	72, 160, 101, 95, 111, 187, 96, 100, 65, 109,
	104, 88, 80, 81, 64, 0, 99, 75, 79, 74,
	93, 106, 107, 73, 120, 68, 115, 67, 69, 114,
	92, 105, 110, 89, 86, 66, 108, 87, 85, 82,
	77, 0, 137, 0, 103, 112, 121, 150, 207, 116,
	117, 118, 91, 70, 148, 149, 146, 147, 183, 184,
	216, 217, 218, 199, 143, 0, 0, 202, 186, 63,
	0, 83, 119, 98, 78, 113, 211, 201, 174, 213,
	152, 166, 221, 167, 168, 195, 140, 182, 94, 164,
	0, 155, 135, 161, 136, 153, 176, 76, 179, 151,
	203, 185, 219, 84, 190, 0, 102, 90, 0, 0,
	178, 205, 180, 200, 173, 196, 145, 189, 214, 165,
	193, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 192, 210, 163, 194, 134,
	191, 0, 138, 141, 220, 208, 158, 159, 0, 0,
	0, 0, 0, 0, 0, 177, 181, 197, 171, 0,
	0, 0, 0, 0, 0, 946, 0, 156, 0, 188,
	0, 0, 0, 142, 139, 175, 0, 0, 0, 144,
	0, 157, 198, 0, 206, 172, 222, 209, 170, 169,
	212, 215, 97, 204, 154, 162, 72, 160, 101, 95,
	111, 187, 96, 100, 65, 109, 104, 88, 80, 81,
	64, 0, 99, 75, 79, 74, 93, 106, 107, 73,
	120, 68, 115, 67, 69, 114, 92, 105, 110, 89,
	86, 66, 108, 87, 85, 82, 77, 0, 137, 0,
	103, 112, 121, 150, 207, 116, 117, 118, 91, 70,
	148, 149, 146, 147, 183, 184, 216, 217, 218, 199,
	143, 0, 0, 202, 186, 63, 0, 83, 119, 98,
	78, 113, 211, 201, 174, 213, 152, 166, 221, 167,
	168, 195, 140, 182, 94, 164, 0, 155, 135, 161,
	136, 153, 176, 76, 179, 151, 203, 185, 219, 84,
	190, 0, 102, 90, 0, 0, 178, 205, 180, 200,
	173, 196, 145, 189, 214, 165, 193, 40, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 192, 210, 163, 194, 134, 191, 0, 138, 141,
	220, 208, 158, 159, 0, 0, 0, 0, 0, 0,
	0, 177, 181, 197, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 188, 0, 0, 0, 142,
	139, 175, 0, 0, 0, 144, 0, 157, 198, 0,
	206, 172, 222, 209, 170, 169, 212, 215, 97, 204,
	154, 162, 72, 160, 101, 95, 111, 187, 96, 100,
	65, 109, 104, 88, 80, 81, 64, 0, 99, 75,
	79, 74, 93, 106, 107, 73, 120, 68, 115, 67,
	69, 114, 92, 105, 110, 89, 86, 66, 108, 87,
	85, 82, 77, 0, 137, 0, 103, 112, 121, 150,
	207, 116, 117, 118, 91, 70, 148, 149, 146, 147,
	183, 184, 216, 217, 218, 199, 143, 0, 0, 202,
	186, 63, 0, 83, 119, 98, 78, 113, 211, 201,
	174, 213, 152, 166, 221, 167, 168, 195, 140, 182,
	94, 164, 0, 155, 135, 161, 136, 153, 176, 76,
	179, 151, 203, 185, 219, 84, 190, 0, 102, 90,
	0, 0, 178, 205, 180, 200, 173, 196, 145, 189,
	214, 165, 193, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 192, 210, 163,
	194, 134, 191, 0, 138, 141, 220, 208, 158, 159,
	0, 0, 0, 0, 0, 0, 0, 177, 181, 197,
	171, 0, 0, 0, 0, 0, 0, 863, 0, 156,
	0, 188, 0, 0, 0, 142, 139, 175, 0, 0,
	0, 144, 0, 157, 198, 0, 206, 172, 222, 209,
	170, 169, 212, 215, 97, 204, 154, 162, 72, 160,
	101, 95, 111, 187, 96, 100, 65, 109, 104, 88,
	80, 81, 64, 0, 99, 75, 79, 74, 93, 106,
	107, 73, 120, 68, 115, 67, 69, 114, 92, 105,
	110, 89, 86, 66, 108, 87, 85, 82, 77, 0,
	137, 0, 103, 112, 121, 150, 207, 116, 117, 118,
	91, 70, 148, 149, 146, 147, 183, 184, 216, 217,
	218, 199, 143, 0, 0, 202, 186, 63, 0, 83,
	119, 98, 78, 113, 211, 201, 174, 213, 152, 166,
	221, 167, 168, 195, 140, 182, 94, 164, 0, 155,
	135, 161, 136, 153, 176, 76, 179, 151, 203, 185,
	219, 84, 190, 0, 102, 90, 0, 0, 178, 205,
	180, 200, 173, 196, 145, 189, 214, 165, 193, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 192, 210, 163, 194, 134, 191, 0,
	138, 141, 220, 208, 158, 159, 0, 0, 0, 0,
	0, 0, 0, 177, 181, 197, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 188, 0, 0,
	0, 142, 139, 175, 0, 0, 0, 144, 0, 157,
	198, 0, 206, 172, 222, 209, 170, 169, 212, 215,
	97, 204, 154, 162, 72, 160, 101, 95, 111, 187,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 137, 0, 103, 112,
	121, 150, 207, 116, 117, 118, 91, 70, 148, 149,
	146, 147, 183, 184, 216, 217, 218, 199, 143, 0,
	0, 202, 186, 63, 0, 83, 119, 98, 78, 113,
	211, 201, 174, 213, 152, 166, 221, 167, 168, 195,
	140, 182, 94, 164, 0, 155, 135, 161, 136, 153,
	176, 76, 179, 151, 203, 185, 219, 84, 190, 0,
	102, 90, 0, 0, 178, 205, 180, 200, 173, 196,
	145, 189, 214, 165, 193, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 192,
	210, 163, 194, 134, 191, 0, 138, 141, 220, 208,
	158, 159, 0, 0, 0, 0, 0, 0, 0, 177,
	181, 197, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 188, 0, 0, 0, 142, 139, 175,
	0, 0, 0, 144, 0, 157, 198, 0, 206, 172,
	222, 209, 170, 169, 212, 215, 97, 204, 154, 162,
	72, 160, 101, 95, 111, 187, 96, 100, 65, 109,
	104, 88, 80, 81, 64, 0, 99, 75, 79, 74,
	93, 106, 107, 73, 120, 68, 115, 67, 69, 114,
	92, 105, 110, 89, 86, 66, 108, 87, 85, 82,
	77, 0, 137, 0, 103, 112, 121, 150, 207, 116,
	117, 118, 91, 70, 148, 149, 146, 147, 183, 184,
	216, 217, 218, 199, 143, 0, 0, 202, 186, 63,
	0, 83, 119, 98, 78, 113, 211, 201, 174, 213,
	152, 166, 221, 167, 168, 195, 140, 182, 94, 164,
	0, 155, 135, 161, 136, 153, 176, 76, 179, 151,
	203, 185, 219, 84, 190, 0, 102, 90, 0, 0,
	178, 205, 180, 200, 173, 196, 145, 189, 214, 165,
	193, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 192, 210, 163, 194, 134,
	191, 0, 138, 141, 220, 208, 158, 159, 0, 0,
	0, 0, 0, 0, 0, 177, 181, 197, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 188,
	0, 0, 0, 142, 139, 175, 0, 0, 0, 144,
	0, 157, 198, 0, 206, 172, 222, 209, 170, 169,
	212, 215, 97, 204, 154, 162, 72, 160, 101, 95,
	111, 187, 96, 100, 65, 109, 104, 88, 80, 81,
	64, 0, 99, 75, 79, 74, 93, 106, 107, 73,
	120, 68, 115, 67, 69, 114, 92, 105, 110, 89,
	86, 66, 108, 87, 85, 82, 77, 0, 137, 0,
	103, 112, 121, 150, 207, 116, 117, 118, 91, 70,
	148, 149, 146, 147, 183, 184, 216, 217, 218, 199,
	143, 0, 0, 202, 186, 63, 0, 83, 119, 98,
	78, 113, 211, 201, 174, 213, 152, 166, 221, 167,
	168, 195, 140, 182, 94, 164, 0, 155, 135, 161,
	136, 153, 176, 76, 179, 151, 203, 185, 219, 84,
	190, 0, 102, 90, 0, 0, 178, 205, 180, 200,
	173, 196, 145, 189, 214, 165, 193, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 192, 210, 163, 194, 134, 191, 0, 138, 141,
	220, 208, 158, 159, 0, 0, 0, 0, 0, 0,
	0, 177, 181, 197, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 188, 0, 0, 0, 142,
	139, 175, 0, 0, 0, 144, 0, 157, 198, 0,
	206, 172, 222, 209, 170, 169, 212, 215, 97, 204,
	154, 162, 72, 160, 101, 95, 111, 187, 96, 100,
	65, 109, 104, 88, 80, 81, 64, 0, 99, 75,
	79, 74, 93, 106, 107, 73, 120, 68, 115, 67,
	69, 114, 92, 105, 110, 89, 86, 66, 108, 87,
	85, 82, 77, 0, 137, 0, 103, 112, 121, 150,
	207, 116, 117, 118, 91, 70, 148, 149, 146, 147,
	183, 184, 216, 217, 218, 199, 143, 0, 0, 202,
	186, 63, 0, 83, 119, 98, 78, 113, 94, 0,
	0, 679, 0, 297, 0, 0, 0, 76, 0, 296,
	0, 0, 334, 84, 0, 0, 102, 90, 0, 0,
	0, 0, 327, 328, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 268, 314, 313, 316, 317, 318,
	319, 0, 0, 71, 315, 320, 321, 322, 0, 0,
	294, 307, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 305, 682, 0, 0, 0, 345,
	0, 306, 0, 0, 303, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 343,
	0, 0, 97, 0, 0, 0, 72, 0, 101, 95,
	111, 0, 96, 100, 65, 109, 104, 88, 80, 81,
	64, 0, 99, 75, 79, 74, 93, 106, 107, 73,
	120, 68, 115, 67, 69, 114, 92, 105, 110, 89,
	86, 66, 108, 87, 85, 82, 77, 0, 0, 0,
	103, 112, 121, 0, 0, 116, 117, 118, 91, 70,
	335, 344, 341, 342, 339, 340, 338, 337, 336, 346,
	329, 330, 332, 0, 331, 63, 0, 83, 119, 98,
	78, 113, 94, 0, 0, 0, 0, 297, 0, 0,
	0, 76, 0, 296, 0, 0, 334, 84, 0, 0,
	102, 90, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 268, 314,
	313, 316, 317, 318, 319, 0, 0, 71, 315, 320,
	321, 322, 0, 0, 294, 307, 0, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 305, 682,
	0, 0, 0, 345, 0, 306, 0, 0, 303, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 343, 0, 0, 97, 0, 0, 0,
	72, 0, 101, 95, 111, 0, 96, 100, 65, 109,
	104, 88, 80, 81, 64, 0, 99, 75, 79, 74,
	93, 106, 107, 73, 120, 68, 115, 67, 69, 114,
	92, 105, 110, 89, 86, 66, 108, 87, 85, 82,
	77, 0, 0, 0, 103, 112, 121, 0, 0, 116,
	117, 118, 91, 70, 335, 344, 341, 342, 339, 340,
	338, 337, 336, 346, 329, 330, 332, 0, 331, 63,
	0, 83, 119, 98, 78, 113, 94, 0, 0, 0,
	0, 297, 0, 0, 0, 76, 0, 296, 0, 0,
	334, 84, 0, 0, 102, 90, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 288, 268, 314, 313, 316, 317, 318, 319, 0,
	0, 71, 315, 320, 321, 322, 0, 0, 294, 307,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 345, 0, 306,
	0, 0, 303, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 343, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 0, 0, 116, 117, 118, 91, 70, 335, 344,
	341, 342, 339, 340, 338, 337, 336, 346, 329, 330,
	332, 18, 331, 63, 0, 83, 119, 98, 78, 113,
	0, 0, 94, 0, 0, 0, 0, 297, 0, 0,
	0, 76, 0, 296, 0, 0, 334, 84, 0, 0,
	102, 90, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 268, 314,
	313, 316, 317, 318, 319, 0, 0, 71, 315, 320,
	321, 322, 0, 0, 294, 307, 0, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 345, 0, 306, 0, 0, 303, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 343, 0, 0, 97, 0, 0, 0,
	72, 0, 101, 95, 111, 0, 96, 100, 65, 109,
	104, 88, 80, 81, 64, 0, 99, 75, 79, 74,
	93, 106, 107, 73, 120, 68, 115, 67, 69, 114,
	92, 105, 110, 89, 86, 66, 108, 87, 85, 82,
	77, 0, 0, 0, 103, 112, 121, 0, 0, 116,
	117, 118, 91, 70, 335, 344, 341, 342, 339, 340,
	338, 337, 336, 346, 329, 330, 332, 0, 331, 63,
	0, 83, 119, 98, 78, 113, 94, 0, 0, 0,
	0, 297, 0, 0, 0, 76, 0, 296, 0, 0,
	334, 84, 0, 0, 102, 90, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 268, 314, 313, 316, 317, 318, 319, 0,
	0, 71, 315, 320, 321, 322, 0, 0, 294, 307,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 345, 0, 306,
	0, 0, 303, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 343, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 0, 0, 116, 117, 118, 91, 70, 335, 344,
	341, 342, 339, 340, 338, 337, 336, 346, 329, 330,
	332, 94, 331, 63, 0, 83, 119, 98, 78, 113,
	76, 0, 0, 0, 0, 334, 84, 0, 0, 102,
	90, 0, 0, 0, 0, 327, 328, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 268, 314, 313,
	316, 317, 318, 319, 0, 0, 71, 315, 320, 321,
	322, 0, 0, 0, 307, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 345, 0, 306, 0, 0, 303, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 343, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 987, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 69, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 0, 0, 116, 117,
	118, 91, 70, 335, 344, 341, 342, 339, 340, 338,
	337, 336, 346, 329, 330, 332, 94, 331, 63, 0,
	83, 119, 98, 78, 113, 76, 0, 0, 0, 0,
	334, 84, 0, 0, 102, 90, 0, 0, 0, 0,
	327, 328, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 268, 314, 313, 316, 317, 318, 319, 0,
	0, 71, 315, 320, 321, 322, 0, 0, 0, 307,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 345, 0, 306,
	0, 0, 303, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 343, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 0, 0, 116, 117, 118, 91, 70, 335, 344,
	341, 342, 339, 340, 338, 337, 336, 346, 329, 330,
	332, 94, 331, 63, 0, 83, 119, 98, 78, 113,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 102,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 463, 462, 472, 473, 465, 466, 467, 468,
	469, 470, 471, 464, 0, 0, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 0, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 69, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 0, 0, 116, 117,
	118, 91, 70, 0, 0, 18, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 63, 0,
	83, 119, 98, 78, 113, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 102, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 0, 0, 116, 117, 118, 91, 70, 0, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 63, 0, 83, 119, 98, 78, 113,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 102,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 0, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 69, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 94, 0, 116, 117,
	118, 91, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 102, 90, 0, 0, 63, 0,
	83, 119, 98, 78, 113, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 530, 0, 0, 531, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 0, 0, 116, 117, 118, 91, 70, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 379,
	0, 0, 0, 63, 76, 83, 119, 98, 78, 113,
	84, 0, 0, 102, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 381, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 72, 0, 101, 95, 111, 0, 96,
	100, 65, 109, 104, 88, 80, 81, 64, 0, 99,
	75, 79, 74, 93, 106, 107, 73, 120, 68, 115,
	67, 69, 114, 92, 105, 110, 89, 86, 66, 108,
	87, 85, 82, 77, 0, 0, 0, 103, 112, 121,
	94, 0, 116, 117, 118, 91, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 102, 90,
	0, 0, 63, 0, 83, 119, 98, 78, 113, 0,
	0, 0, 0, 40, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 72, 0,
	101, 95, 111, 0, 96, 100, 65, 109, 104, 88,
	80, 81, 64, 0, 99, 75, 79, 74, 93, 106,
	107, 73, 120, 68, 115, 67, 69, 114, 92, 105,
	110, 89, 86, 66, 108, 87, 85, 82, 77, 0,
	0, 0, 103, 112, 121, 94, 0, 116, 117, 118,
	91, 70, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 102, 90, 0, 0, 63, 0, 83,
	119, 98, 78, 113, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 790, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 72, 0, 101, 95, 111, 0, 96,
	100, 65, 109, 104, 88, 80, 81, 64, 0, 99,
	75, 79, 74, 93, 106, 107, 73, 120, 68, 115,
	67, 69, 114, 92, 105, 110, 89, 86, 66, 108,
	87, 85, 82, 77, 0, 0, 0, 103, 112, 121,
	94, 0, 116, 117, 118, 91, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 102, 90,
	0, 0, 63, 0, 83, 119, 98, 78, 113, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 381, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 72, 0,
	101, 95, 111, 0, 96, 100, 65, 109, 104, 88,
	80, 81, 64, 0, 99, 75, 79, 74, 93, 106,
	107, 73, 120, 68, 115, 67, 69, 114, 92, 105,
	110, 89, 86, 66, 108, 87, 85, 82, 77, 0,
	0, 0, 103, 112, 121, 94, 0, 116, 117, 118,
	91, 70, 0, 358, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 102, 90, 0, 0, 63, 0, 83,
	119, 98, 78, 113, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 72, 0, 101, 95, 111, 0, 96,
	100, 65, 109, 104, 88, 80, 81, 64, 0, 99,
	75, 79, 74, 93, 106, 107, 73, 120, 68, 115,
	67, 69, 114, 92, 105, 110, 89, 86, 66, 108,
	87, 85, 82, 77, 256, 0, 0, 103, 112, 121,
	0, 94, 116, 117, 118, 91, 70, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 102,
	90, 0, 63, 0, 83, 119, 98, 78, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 0, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 69, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 94, 0, 116, 117,
	118, 91, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 102, 90, 0, 0, 63, 0,
	83, 119, 98, 78, 113, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 94, 0, 116, 117, 118, 91, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 102,
	90, 0, 0, 63, 0, 83, 119, 98, 78, 113,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 0, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 69, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 94, 0, 116, 117,
	118, 91, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 102, 90, 0, 0, 63, 0,
	83, 119, 98, 78, 113, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 72, 0, 101, 95, 111, 0,
	96, 100, 65, 109, 104, 88, 80, 81, 64, 0,
	99, 75, 79, 74, 93, 106, 107, 73, 120, 68,
	115, 67, 69, 114, 92, 105, 110, 89, 86, 66,
	108, 87, 85, 82, 77, 0, 0, 0, 103, 112,
	121, 94, 0, 116, 117, 118, 91, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 102,
	90, 0, 0, 63, 0, 83, 119, 98, 78, 113,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 72,
	0, 101, 95, 111, 0, 96, 100, 65, 109, 104,
	88, 80, 81, 64, 0, 99, 75, 79, 74, 93,
	106, 107, 73, 120, 68, 115, 67, 262, 114, 92,
	105, 110, 89, 86, 66, 108, 87, 85, 82, 77,
	0, 0, 0, 103, 112, 121, 0, 0, 116, 117,
	118, 263, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	83, 119, 98, 78, 113,
}
var yyPact = [...]int{

	111, -1000, -152, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 680, 721, -1000, -1000,
	-1000, -1000, -1000, 515, 1398, 22, 43, 28, 41, 3217,
	6579, -1000, -1000, -1000, -1000, -1000, -1000, 473, -1000, -1000,
	-1000, -1000, -1000, 675, 678, 491, 667, 589, -1000, -4,
	5493, 6114, 6734, -1000, 319, 35, 6579, -121, -10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 39, 6579, -1000, 6579, -11, 317, -11, 6579,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 323, 637, 4139, 4139, 680, -1000, 473, -1000,
	-1000, -1000, 638, -1000, -1000, 195, 5958, 508, 662, -1000,
	-1000, -1000, 660, 5014, 5338, 87, 6579, 95, -1000, 2629,
	354, -1000, 635, -1000, -1000, 135, -1000, 84, -1000, -1000,
	425, -1000, 170, 313, 2237, 10, 6579, 179, 6579, 2237,
	0, 6579, 656, 523, 6579, -1000, -1000, -1000, -1000, -1000,
	706, 109, 185, -1000, 4139, 1522, 461, 461, -1000, -1000,
	59, -1000, -1000, 4489, 4489, 4489, 4489, 4489, 4489, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 461, 77, -1000, 3955, 461, 461, 461,
	461, 461, 461, 4139, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 445, -1000, 448,
	675, 323, 589, 5169, 527, -1000, -1000, 519, 6579, -1000,
	6424, 5493, 5493, 5493, 5493, -1000, 544, 536, -1000, 585,
	542, 565, 6579, -1000, 377, 323, 5014, 64, -1000, 5803,
	-1000, -1000, 3021, 699, 5493, 6579, -1000, -1000, -1000, -1000,
	-1000, 6424, -1000, 4139, 2825, 1845, 76, 168, -101, -1000,
	-1000, 462, -1000, 462, 462, 462, 462, -82, -82, -82,
	-82, -1000, -1000, -1000, -1000, -1000, 507, -1000, 462, 462,
	462, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 493,
	493, 493, 464, 464, -14, -1000, -1000, -1000, 6579, -1000,
	655, 74, -1000, 6579, -1000, -1000, 6579, 2237, -1000, 596,
	4139, 4139, 287, 4139, 4139, 127, 4489, 208, 143, 4489,
	4489, 4489, 4489, 4489, 4489, 4489, 4489, 4489, 4489, 4489,
	4489, 4489, 4489, 4489, 217, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 307, -1000, 473, 581, 581, 92, 92,
	92, 92, 92, 4664, 3401, 2825, 365, 199, 3955, 3585,
	3585, 4139, 4139, 3585, 669, 144, 199, 6269, -1000, 323,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3585, 3585, 3585,
	3585, 4139, -1000, -1000, -1000, 637, -1000, 669, 672, -1000,
	617, 616, 3585, -1000, 522, 6424, 461, -1000, 4839, -1000,
	511, 662, 517, 611, -1000, -1000, -1000, -1000, 535, -1000,
	534, -1000, -1000, -1000, -1000, -1000, 323, -1000, 31, 24,
	19, -1000, -1000, -1000, -1000, 680, 4139, 480, -1000, -1000,
	-1000, 199, -1000, 75, -1000, 427, 1649, -1000, -1000, -1000,
	-1000, -1000, -1000, 474, 648, 117, 302, -1000, -1000, 641,
	-1000, 182, -103, -1000, -1000, 228, -82, -82, -1000, -1000,
	67, 634, 67, 67, 67, 246, -1000, -1000, -1000, -1000,
	222, -1000, -1000, -1000, 220, -1000, 449, 6269, 2237, -1000,
	-1000, 94, -46, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 587, 127, 141,
	-1000, -1000, 324, -1000, -1000, 199, 199, 1393, -1000, -1000,
	-1000, -1000, 208, 4489, 4489, 4489, 248, 1393, 1308, 626,
	1536, 92, 518, 518, 105, 105, 105, 105, 105, 194,
	194, -1000, -1000, -1000, 323, -1000, -1000, -1000, 323, 3585,
	392, -1000, -1000, 1170, 73, 461, 4139, -1000, 327, 327,
	80, 177, 327, 3585, 151, -1000, 4139, 323, -1000, 327,
	323, 327, 327, -1000, -1000, 6579, -1000, -1000, -1000, -1000,
	500, -1000, 650, 389, 357, -1000, -1000, 3769, 323, 352,
	70, 680, 4139, 4139, -1000, -1000, -1000, 461, 461, 461,
	675, 199, -1000, 2629, 1845, -1000, 1845, 6269, -1000, 272,
	-1000, -1000, -97, 426, -1000, -1000, -1000, 343, 67, 67,
	-1000, 257, 140, -1000, -1000, -1000, 340, -1000, 375, 330,
	6579, -1000, -1000, -1000, 6579, -1000, -1000, -1000, -1000, -1000,
	6269, -1000, -1000, -1000, -1000, -1000, 248, 1393, 1075, -1000,
	4489, 4489, -1000, -1000, 327, 3585, -1000, -1000, 5648, -1000,
	-1000, 2433, 3585, 199, -1000, -1000, 7, 217, 7, -129,
	442, 142, -1000, 4139, 197, -1000, -1000, -1000, -1000, -1000,
	-1000, 699, 5493, 647, -1000, 461, -1000, -1000, 486, 6269,
	6269, 675, 199, 199, 6269, 6269, 6269, -1000, -1000, 1649,
	-1000, 306, -1000, 462, -1000, 82, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 243, 206,
	-1000, 203, 2237, -1000, -1000, 640, -1000, 4489, 1393, 1393,
	-1000, -1000, -1000, -1000, 69, 323, 323, 462, 462, -1000,
	462, 464, -1000, 462, -59, 462, -65, 323, 323, 461,
	-126, -1000, 199, 4139, 697, 360, 705, -1000, 461, -1000,
	473, 62, -1000, -1000, 297, -1000, 297, 297, -1000, 6269,
	-1000, 188, 645, -1000, 639, -1000, 341, 332, -1000, 461,
	1393, 2041, -1000, -1000, -1000, 33, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4489, 323, 242, 199, 682, 677,
	6424, 357, 323, 6269, -1000, 6269, -1000, -1000, -1000, -1000,
	239, -1000, -1000, -1000, -1000, -47, -1000, -1000, -1000, 2,
	-1000, -1000, -1000, 4139, 4139, 354, -1000, -1000, -1000, -1000,
	271, -1000, 6269, 323, 18, -140, 199, 348, -1000, -47,
	612, -1000, 551, -134, -144, -1000, 6269, -1000, 548, -1000,
	6269, -136, 461, -142, 4314, -146, 1037, 323, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 911, 10, 579, 902, 899, 898, 897, 896, 895,
	894, 892, 883, 882, 880, 876, 874, 870, 866, 60,
	865, 864, 862, 42, 861, 54, 860, 858, 23, 179,
	19, 28, 696, 857, 21, 63, 50, 855, 854, 848,
	46, 847, 993, 846, 843, 840, 9, 37, 838, 837,
	833, 828, 40, 128, 824, 823, 822, 819, 817, 806,
	35, 2, 4, 15, 16, 805, 191, 6, 803, 34,
	802, 801, 799, 798, 14, 797, 38, 796, 20, 32,
	795, 33, 8, 794, 39, 793, 561, 792, 87, 791,
	790, 788, 787, 786, 785, 17, 0, 134, 150, 27,
	781, 715, 18, 44, 780, 777, 41, 22, 13, 5,
	776, 775, 774, 773, 770, 769, 764, 114, 762, 760,
	12, 29, 758, 757, 43, 7, 756, 755, 754, 750,
	45, 749, 36, 748, 744, 743, 24, 26, 742, 3,
	740, 739, 1, 733, 732, 122, 188, 731, 730, 163,
}
var yyR1 = [...]int{

	0, 143, 144, 144, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 147, 147, 38, 38, 9, 9, 83, 83,
	83, 10, 10, 10, 10, 14, 133, 134, 134, 134,
	130, 111, 111, 111, 114, 114, 112, 112, 112, 112,
	112, 112, 112, 113, 113, 113, 113, 113, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 129, 129, 117,
	117, 124, 124, 125, 125, 125, 122, 122, 123, 123,
	126, 126, 126, 118, 118, 118, 118, 118, 127, 127,
	120, 120, 120, 121, 121, 128, 128, 128, 128, 128,
	119, 119, 131, 138, 138, 138, 138, 132, 132, 140,
	140, 139, 135, 135, 135, 136, 136, 136, 137, 137,
	137, 11, 11, 11, 11, 11, 141, 141, 142, 142,
	12, 13, 13, 13, 15, 110, 110, 110, 16, 17,
	18, 18, 18, 18, 18, 18, 148, 19, 20, 20,
	21, 21, 21, 25, 25, 25, 23, 23, 24, 24,
	30, 30, 29, 29, 31, 31, 31, 31, 100, 100,
	100, 99, 99, 33, 33, 34, 34, 35, 35, 36,
	36, 36, 44, 37, 37, 37, 37, 105, 105, 104,
	104, 104, 103, 103, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 43, 43, 42, 42, 45, 45,
	45, 45, 46, 46, 47, 47, 32, 32, 32, 32,
	32, 32, 32, 87, 87, 49, 49, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 59, 59, 59,
	59, 59, 59, 50, 50, 50, 50, 50, 50, 50,
	28, 28, 60, 60, 60, 66, 61, 61, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 57, 57,
	57, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	56, 56, 56, 56, 56, 56, 56, 56, 149, 149,
	58, 58, 58, 58, 26, 26, 26, 26, 26, 108,
	108, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 70, 70, 27, 27, 68, 68,
	69, 71, 71, 67, 67, 67, 52, 52, 52, 52,
	52, 52, 52, 52, 54, 54, 54, 72, 72, 73,
	73, 74, 74, 75, 75, 76, 77, 77, 77, 78,
	78, 78, 78, 79, 79, 79, 51, 51, 51, 51,
	51, 51, 80, 80, 80, 80, 81, 81, 62, 62,
	64, 64, 63, 65, 82, 82, 84, 85, 85, 88,
	88, 89, 89, 86, 86, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 91, 91, 91, 92,
	92, 93, 93, 93, 94, 94, 97, 97, 98, 98,
	101, 101, 102, 102, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 145, 146, 106, 107, 107, 107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 2, 8, 4, 6, 4, 4, 1, 3, 3,
	7, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 0, 1,
	0, 3, 3, 0, 2, 0, 2, 1, 2, 1,
	0, 2, 4, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 4, 11, 1, 3, 8, 8,
	5, 4, 5, 5, 3, 1, 1, 1, 3, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -143, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 108, 109, 111, 110, 112, 122,
	47, 24, 123, 124, 127, 128, 129, -145, 7, 188,
	50, -144, 201, -74, 14, -21, 5, -19, -148, -19,
	-19, -19, -19, -133, 50, -93, 115, 67, 113, 119,
	-97, 53, -96, 194, 139, 133, 160, 152, 150, 153,
	178, 62, 125, 148, 144, 142, 26, 165, 199, 143,
	137, 138, 164, 196, 32, 163, 159, 162, 136, 158,
	36, 177, 155, 145, 17, 128, 131, 121, 198, 141,
	132, 127, 35, 169, 135, 156, 146, 147, 161, 134,
	157, 129, 170, 200, 154, 151, 174, 175, 176, 197,
	149, 171, -86, 115, 117, 113, 113, 114, 115, 113,
	-110, 53, -95, -96, 68, 21, 23, 167, 71, 103,
	15, 72, 102, 189, 108, 45, 181, 182, 179, 180,
	172, 28, 9, 24, 123, 20, 96, 110, 75, 76,
	126, 22, 124, 66, 18, 48, 10, 12, 13, 118,
	117, 87, 114, 43, 7, 104, 25, 84, 39, 27,
	41, 85, 16, 183, 184, 30, 193, 130, 98, 46,
	33, 69, 64, 49, 67, 14, 44, 86, 111, 188,
	42, 6, 192, 29, 122, 40, 113, 173, 74, 116,
	65, 5, 119, 8, 47, 120, 185, 186, 187, 31,
	73, 11, 115, -101, 53, -96, -106, -106, -106, -106,
	-106, -106, -2, -78, 16, 15, -5, -3, -145, 6,
	19, 20, -25, 37, 38, -20, -86, -34, -35, -36,
	-37, -44, -66, -145, -42, -101, 10, -38, -42, -83,
	-82, 178, 153, 177, -84, -67, -97, -101, 53, -96,
	-134, -130, 53, 114, -42, 188, -89, 118, 113, -42,
	-42, -88, 118, 53, -88, -42, -106, -146, 52, -79,
	18, 30, -32, -48, 69, -53, 28, 22, -52, -49,
	-67, -65, -66, 103, 92, 93, 100, 70, 104, -57,
	-55, -56, -58, 55, 54, 63, 56, 57, 58, 59,
	64, 65, 66, -97, -101, -63, -145, 41, 42, 189,
	190, 193, 191, 72, 31, 179, 187, 186, 185, 183,
	184, 181, 182, 118, 180, 98, 188, -75, -76, -32,
	-74, -2, -19, 33, -23, 20, 61, -43, 25, -42,
	29, 51, -39, -40, -41, 39, 43, 45, 40, 41,
	42, 46, -105, 21, -34, -2, -145, -104, -103, 21,
	-101, 55, 105, -42, -147, 51, 10, 120, -98, -97,
	-95, 51, 29, 77, 105, 52, 51, -111, -114, -116,
	-115, -112, -113, 150, 151, 103, 154, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 125, 146, 147,
	148, 149, 133, 134, 135, 136, 137, 138, 139, 141,
	142, 143, 144, 145, 53, -107, -145, -98, 115, -42,
	69, -42, -107, 116, -42, 22, 49, -42, 8, 87,
	68, 67, 84, 51, 17, -32, -50, 87, 69, 85,
	86, 71, 89, 88, 99, 92, 93, 94, 95, 96,
	97, 98, 90, 91, 102, 77, 78, 79, 80, 81,
	82, 83, -87, -145, -66, -145, 106, 107, -53, -53,
	-53, -53, -53, -53, -145, 105, -61, -32, -145, -145,
	-145, -145, -145, -145, -145, -70, -32, -145, -149, -145,
	-149, -149, -149, -149, -149, -149, -149, -145, -145, -145,
	-145, 51, -77, 23, 24, -78, -146, -25, -54, -97,
	56, 59, -24, 40, -51, 29, 31, -2, -145, -42,
	-82, -35, -36, -35, -36, 39, 39, 39, 44, 39,
	44, 39, -40, -101, -146, -146, -2, -45, 47, 117,
	48, -103, -102, -101, -95, -47, 11, -34, -42, -106,
	-84, -32, -98, -102, -95, -135, -136, -137, -98, 55,
	56, -130, -131, -138, 121, 119, -132, 114, 27, -126,
	64, 69, -122, 170, -117, 50, -117, -117, -117, -117,
	-120, 153, -120, -120, -120, 50, -117, -117, -117, -124,
	50, -124, -124, -125, 50, -125, -94, 120, -42, 22,
	-90, 111, 132, 109, 167, 153, 62, 28, 110, 14,
	189, 131, 200, 53, -42, -42, -107, 35, -32, -32,
	-59, 64, 69, 65, 66, -32, -32, -53, -60, -63,
	-66, 60, 87, 85, 86, 71, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -108, 53, 55, 53, -52, -52, -97, -30, 20,
	-29, -31, 94, -32, -101, -98, 51, -146, -29, -29,
	-32, -32, -29, -23, -68, -69, 73, -97, -146, -29,
	-30, -29, -29, -76, -79, -85, 18, 10, 31, 31,
	-29, -81, 49, -82, -62, -64, -63, -145, -2, -80,
	-97, -47, 49, 49, 39, 39, -146, 114, 114, 114,
	-74, -32, -47, 105, 51, -137, 77, 50, 27, -132,
	53, 53, -118, 28, 64, -123, 171, 56, -120, -120,
	-121, 102, 29, -121, -121, -121, -129, 55, 56, 56,
	49, -97, -107, -106, -91, -92, 116, 21, 114, 27,
	131, 36, 64, 65, 66, -60, -53, -53, -53, -28,
	126, 68, -146, -146, -29, 51, -100, -99, 21, -97,
	55, 105, -145, -32, -146, -146, 51, 120, 21, -146,
	-29, -71, -69, 75, -32, -146, -146, -146, -146, -146,
	-42, -33, 10, 26, -81, 51, -146, -146, -146, 51,
	105, -74, -32, -32, -145, -145, -145, -78, -98, -136,
	-137, -140, -139, -97, 53, -127, 167, 55, 56, 57,
	64, 52, -121, -121, 53, 53, 103, 52, 51, 51,
	52, 51, -42, -42, -106, -97, -28, 68, -53, -53,
	-146, -31, -99, 94, -102, -30, -109, 103, 150, 125,
	148, 144, 164, 155, 169, 146, 170, -108, -109, 194,
	-74, 76, -32, 74, -47, -34, 27, -64, 31, -2,
	-145, -97, -97, -78, -46, -97, -46, -46, 52, 51,
	-117, -128, 121, 27, 119, 55, 56, 56, -107, 25,
	-53, 105, -146, -146, -117, -117, -117, -125, -117, 138,
	-117, 138, -146, -146, -145, -27, 192, -32, -72, 12,
	8, -62, -2, 105, -146, 51, -146, -146, -139, -119,
	62, 27, 27, 52, 52, -145, 94, -120, 53, -53,
	-146, 55, -73, 13, 15, -82, -146, -97, -97, 55,
	-141, -142, 131, -26, 87, 197, -32, -61, -146, 51,
	-97, -146, 195, 46, 198, -142, 31, 36, 196, 199,
	-97, 36, -97, 197, -145, 198, -53, 130, 199, -146,
	-146,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 381, 0, 166, 166,
	166, 166, 166, 0, 441, 423, 0, 0, 0, 0,
	0, 604, 604, 604, 604, 604, 604, 0, 27, 28,
	602, 1, 3, 389, 0, 0, 170, 173, 168, 423,
	0, 0, 0, 41, 0, 0, 595, 0, 421, 442,
	443, 446, 447, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 596, 597, 598, 599,
	600, 601, 0, 0, 424, 0, 419, 0, 419, 0,
	604, 155, 156, 157, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 595, 159, 450, 451, 160, 161, 162, 163,
	164, 165, 21, 393, 0, 0, 381, 23, 0, 166,
	171, 172, 176, 174, 175, 167, 0, 0, 195, 197,
	198, 199, 207, 0, 209, 226, 0, 0, 34, 0,
	37, -2, 548, -2, 414, 0, 363, 0, -2, -2,
	0, 47, 0, 0, 605, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 0, 154, 158, 22, 603, 17,
	0, 0, 390, 236, 0, 241, 243, 0, 278, 279,
	280, 281, 282, 0, 0, 0, 0, 0, 0, 304,
	305, 306, 307, 366, 367, 368, 369, 370, 371, 372,
	373, 245, 246, 363, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 328, 328, 328, 328, 328,
	328, 328, 328, 0, 0, 0, 0, 382, 383, 386,
	389, 21, 173, 0, 178, 177, 169, 0, 0, 225,
	0, 0, 0, 0, 0, 214, 0, 0, 217, 0,
	0, 0, 0, 208, 0, 21, 0, 228, 210, 0,
	212, 213, 0, 234, 0, 0, 32, 33, 604, 448,
	449, 0, 39, 0, 0, 132, 0, 100, 96, 52,
	53, 89, 55, 89, 89, 89, 89, 110, 110, 110,
	110, 81, 82, 83, 84, 85, 0, 68, 89, 89,
	89, 72, 56, 57, 58, 59, 60, 61, 62, 91,
	91, 91, 93, 93, 444, 43, 606, 607, 0, 45,
	0, 0, 144, 0, 151, 420, 0, 605, 394, 0,
	0, 0, 0, 0, 0, 239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 267,
	268, 269, 242, 0, 256, 0, 0, 0, 298, 299,
	300, 301, 302, 0, 180, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 176, 0, 355, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 0, 180, 0,
	0, 0, 385, 387, 388, 393, 24, 176, 0, 374,
	0, 0, 0, 179, 406, 0, 0, -2, 0, 224,
	234, 196, 203, 0, 206, 215, 216, 218, 0, 220,
	0, 222, 223, 200, 201, 275, 21, 202, 0, 0,
	0, 211, 227, 452, 453, 381, 0, 234, 35, 36,
	415, 416, 364, 0, -2, 46, 133, 135, 138, 139,
	140, 48, 49, 0, 0, 0, 0, 127, 128, 103,
	101, 0, 98, 97, 54, 0, 110, 110, 75, 76,
	113, 0, 113, 113, 113, 0, 69, 70, 71, 63,
	0, 64, 65, 66, 0, 67, 0, 0, 605, 422,
	604, 436, 0, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 150, 152, 153, 0, 237, 238,
	240, 257, 0, 259, 261, 391, 392, 247, 248, 272,
	273, 274, 0, 0, 0, 0, 270, 252, 0, 283,
	284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
	294, 297, 339, 340, 0, 295, 296, 303, 0, 0,
	181, 182, 184, 188, 0, 364, 0, 412, 0, 0,
	0, 0, 0, 0, 361, 358, 0, 0, 329, 0,
	0, 0, 0, 384, 18, 0, 417, 418, 375, 376,
	193, 25, 0, 406, 396, 408, 410, 0, 21, 0,
	402, 381, 0, 0, 219, 221, -2, 0, 0, 0,
	389, 235, 31, 0, 0, 136, 0, 0, 123, 0,
	125, 126, 108, 0, 102, 51, 99, 0, 113, 113,
	77, 0, 0, 78, 79, 80, 0, 87, 0, 0,
	0, 445, 44, 141, 0, 604, 437, 438, 439, 440,
	0, 395, 258, 260, 262, 249, 270, 253, 0, 250,
	0, 0, 244, 308, 0, 0, 185, 189, 0, 191,
	192, 0, 180, 277, 311, 312, 0, 0, 0, 0,
	381, 0, 359, 0, 0, 319, 330, 331, 332, 333,
	19, 234, 0, 0, 26, 0, 411, -2, 0, 0,
	0, 389, 204, 205, 0, 0, 0, 30, 365, 134,
	137, 0, 129, 89, 124, 115, 109, 104, 105, 106,
	107, 90, 73, 74, 114, 111, 112, 86, 0, 0,
	94, 0, 605, 142, 143, 0, 251, 0, 271, 254,
	309, 183, 190, 186, 0, 0, 0, 89, 89, 344,
	89, 93, 347, 89, 349, 89, 352, 0, 0, 0,
	356, 318, 362, 0, 377, 194, 0, 409, 0, -2,
	0, 404, 403, 29, 0, 232, 0, 0, 122, 0,
	131, 120, 0, 117, 119, 88, 0, 0, 42, 0,
	255, 0, 310, 313, 341, 110, 345, 346, 348, 350,
	351, 353, 315, 314, 0, 0, 0, 360, 379, 0,
	0, 399, 21, 0, 229, 0, 230, 231, 130, 50,
	0, 116, 118, 92, 95, 0, 187, 342, 343, 334,
	317, 357, 20, 0, 0, 407, -2, 405, 233, 121,
	0, 146, 0, 0, 0, 0, 380, 378, 145, 0,
	0, 316, 0, 0, 0, 147, 0, 335, 0, 338,
	0, 336, 0, 0, 0, 0, 0, 0, 337, 148,
	149,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	50, 52, 94, 92, 51, 93, 105, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 201,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:268
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:273
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:274
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:278
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:296
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:304
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:308
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:342
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:353
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:369
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:375
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:381
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:390
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:391
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:395
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:399
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:405
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:421
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:426
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:441
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:448
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:460
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:470
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:490
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:648
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:653
		{
			yyVAL.optVal = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:662
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:666
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:674
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:678
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:701
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:705
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:715
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:724
		{
			yyVAL.optVal = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:732
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:745
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:754
		{
			yyVAL.str = ""
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:758
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:762
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:771
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.colKeyOpt = colKey
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.optVal = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:801
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:807
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:813
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:821
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:825
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:845
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:856
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:880
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:886
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:900
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:904
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:909
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:914
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 145:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:918
		{
			yyVAL.statement = &DDL{Action: ReorganizeStr, Table: yyDollar[4].tableName, PartitionName: yyDollar[7].colIdent, PartitionDefinitions: yyDollar[10].partDefs}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 148:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:934
		{
			if yyDollar[4].colIdent.Lowered() != "less" || yyDollar[5].colIdent.Lowered() != "than" {
				yylex.Error("expecting less than after values")
				return 1
			}
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 149:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:942
		{
			if yyDollar[4].colIdent.Lowered() != "less" || yyDollar[5].colIdent.Lowered() != "than" {
				yylex.Error("expecting less than after values")
				return 1
			}
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:958
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:966
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:971
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.statement = &OtherRead{}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.statement = &OtherRead{}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &OtherRead{}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1048
		{
			setAllowComments(yylex, true)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.bytes2 = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = UnionStr
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = UnionAllStr
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.str = UnionDistinctStr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.str = SQLCacheStr
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = DistinctStr
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = StraightJoinHint
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.selectExprs = nil
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.empty = struct{}{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.empty = struct{}{}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = JoinStr
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.str = JoinStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.str = JoinStr
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.str = StraightJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = LeftJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = LeftJoinStr
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.str = RightJoinStr
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = RightJoinStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = NaturalJoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.indexHints = nil
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.expr = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = IsNullStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = IsNotNullStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = IsTrueStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = IsNotTrueStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = IsFalseStr
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = IsNotFalseStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.str = EqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = LessThanStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = GreaterThanStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = LessEqualStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = GreaterEqualStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = NotEqualStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.expr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 316:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.str = BooleanModeStr
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = QueryExpansionStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = nil
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = string("")
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = nil
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &NullVal{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.exprs = nil
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.orderBy = nil
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.str = AscScr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.str = AscScr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.str = DescScr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.limit = nil
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.str = ForUpdateStr
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = ShareModeStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2124
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.updateExprs = nil
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.byt = 0
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.byt = 1
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.str = IgnoreStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			decNesting(yylex)
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2494
		{
			forceEOF(yylex)
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2499
		{
			forceEOF(yylex)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			forceEOF(yylex)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

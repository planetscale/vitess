// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const KEY_BLOCK_SIZE = 57457
const ACTION = 57458
const CASCADE = 57459
const CONSTRAINT = 57460
const FOREIGN = 57461
const NO = 57462
const REFERENCES = 57463
const RESTRICT = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const COLLATION = 57536
const DATABASES = 57537
const TABLES = 57538
const VITESS_KEYSPACES = 57539
const VITESS_SHARDS = 57540
const VITESS_TABLETS = 57541
const VSCHEMA_TABLES = 57542
const VITESS_TARGET = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const FIELDS = 57547
const NAMES = 57548
const CHARSET = 57549
const GLOBAL = 57550
const SESSION = 57551
const ISOLATION = 57552
const LEVEL = 57553
const READ = 57554
const WRITE = 57555
const ONLY = 57556
const REPEATABLE = 57557
const COMMITTED = 57558
const UNCOMMITTED = 57559
const SERIALIZABLE = 57560
const CURRENT_TIMESTAMP = 57561
const DATABASE = 57562
const CURRENT_DATE = 57563
const CURRENT_TIME = 57564
const LOCALTIME = 57565
const LOCALTIMESTAMP = 57566
const UTC_DATE = 57567
const UTC_TIME = 57568
const UTC_TIMESTAMP = 57569
const REPLACE = 57570
const CONVERT = 57571
const CAST = 57572
const SUBSTR = 57573
const SUBSTRING = 57574
const GROUP_CONCAT = 57575
const SEPARATOR = 57576
const MATCH = 57577
const AGAINST = 57578
const BOOLEAN = 57579
const LANGUAGE = 57580
const WITH = 57581
const QUERY = 57582
const EXPANSION = 57583
const UNUSED = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	157, 290,
	158, 290,
	-2, 280,
	-1, 255,
	111, 617,
	-2, 613,
	-1, 256,
	111, 618,
	-2, 614,
	-1, 326,
	81, 785,
	-2, 59,
	-1, 327,
	81, 743,
	-2, 60,
	-1, 332,
	81, 724,
	-2, 579,
	-1, 334,
	81, 764,
	-2, 581,
	-1, 604,
	53, 42,
	55, 42,
	-2, 44,
	-1, 740,
	111, 620,
	-2, 616,
	-1, 952,
	5, 29,
	-2, 424,
	-1, 977,
	5, 28,
	-2, 554,
	-1, 1204,
	5, 29,
	-2, 555,
	-1, 1250,
	5, 28,
	-2, 557,
	-1, 1316,
	5, 29,
	-2, 558,
}

const yyPrivate = 57344

const yyLast = 11215

var yyAct = [...]int{

	256, 1351, 1341, 1307, 891, 676, 802, 1261, 249, 551,
	1111, 260, 1210, 286, 1139, 820, 1112, 1042, 550, 3,
	871, 598, 918, 596, 1108, 980, 996, 885, 234, 1016,
	838, 80, 842, 851, 775, 199, 1085, 55, 199, 841,
	803, 944, 331, 765, 772, 1033, 1045, 614, 985, 791,
	742, 483, 489, 855, 613, 881, 585, 705, 287, 49,
	600, 799, 430, 325, 199, 199, 80, 313, 233, 495,
	199, 926, 199, 258, 80, 243, 503, 322, 320, 54,
	1344, 1328, 1339, 1314, 1336, 262, 892, 311, 1327, 1313,
	226, 565, 312, 1103, 1198, 435, 247, 1271, 865, 59,
	1134, 1135, 1133, 1147, 1148, 1149, 232, 1004, 49, 456,
	1003, 1152, 1150, 1005, 834, 835, 239, 194, 190, 191,
	192, 615, 317, 616, 61, 62, 63, 64, 65, 833,
	231, 1024, 474, 864, 227, 228, 229, 230, 908, 475,
	472, 473, 1223, 444, 1239, 1086, 872, 1187, 1185, 316,
	225, 1338, 907, 467, 468, 1335, 1287, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 1308,
	1066, 527, 800, 458, 1355, 460, 1359, 1299, 856, 445,
	912, 1088, 438, 188, 1262, 1269, 1063, 318, 199, 906,
	199, 187, 1065, 188, 684, 675, 199, 1264, 858, 821,
	823, 858, 995, 199, 994, 457, 459, 80, 80, 80,
	80, 993, 80, 1090, 774, 1094, 858, 1089, 433, 1087,
	441, 80, 196, 202, 1092, 189, 1292, 1017, 539, 540,
	431, 1207, 1072, 1091, 193, 960, 938, 714, 903, 900,
	901, 507, 899, 451, 486, 490, 1093, 1095, 517, 1156,
	80, 527, 321, 839, 527, 920, 711, 432, 492, 434,
	502, 508, 706, 1263, 1297, 462, 462, 462, 462, 68,
	462, 872, 910, 913, 822, 491, 501, 500, 1353, 462,
	1151, 1354, 431, 1352, 1270, 1268, 1064, 1166, 1062, 455,
	983, 617, 857, 502, 1312, 857, 552, 1105, 49, 1157,
	854, 852, 679, 853, 69, 563, 1053, 905, 850, 856,
	857, 199, 749, 536, 429, 481, 538, 500, 199, 199,
	199, 1288, 479, 480, 80, 792, 747, 748, 746, 904,
	80, 1360, 919, 502, 713, 1051, 447, 448, 449, 792,
	493, 967, 707, 537, 549, 1022, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 437, 564, 566, 566, 566,
	566, 566, 566, 566, 566, 574, 575, 576, 577, 909,
	1361, 712, 501, 500, 1301, 442, 597, 443, 497, 1107,
	861, 1053, 911, 450, 186, 862, 1318, 501, 500, 502,
	452, 567, 568, 569, 570, 571, 572, 573, 605, 1230,
	1052, 611, 52, 316, 502, 1057, 1054, 1047, 1055, 1050,
	1051, 1229, 745, 1048, 1049, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 1056, 1037, 527,
	199, 439, 440, 1059, 766, 80, 767, 1320, 463, 1036,
	1025, 199, 199, 80, 1298, 199, 253, 310, 199, 935,
	936, 937, 199, 1246, 80, 80, 80, 80, 80, 80,
	80, 80, 1006, 1227, 1007, 1069, 1034, 945, 80, 80,
	1295, 732, 734, 735, 1017, 1052, 733, 199, 1254, 1337,
	1057, 1054, 1047, 1055, 1050, 21, 709, 1012, 1048, 1049,
	894, 1194, 482, 462, 693, 80, 768, 957, 580, 199,
	690, 462, 1056, 689, 328, 80, 680, 604, 1046, 729,
	730, 678, 462, 462, 462, 462, 462, 462, 462, 462,
	719, 1324, 482, 691, 743, 673, 462, 462, 516, 515,
	525, 526, 518, 519, 520, 521, 522, 523, 524, 517,
	1254, 1305, 527, 238, 1254, 1266, 501, 500, 453, 80,
	740, 515, 525, 526, 518, 519, 520, 521, 522, 523,
	524, 517, 552, 502, 527, 782, 783, 1254, 482, 721,
	784, 787, 779, 285, 1254, 1255, 793, 1219, 1218, 738,
	199, 736, 446, 199, 199, 199, 199, 199, 482, 717,
	718, 1130, 482, 804, 1321, 199, 744, 49, 199, 1206,
	482, 1276, 199, 956, 78, 955, 56, 199, 199, 1163,
	1162, 80, 553, 769, 770, 1275, 779, 625, 1159, 1160,
	796, 501, 500, 1272, 80, 1153, 837, 859, 681, 682,
	828, 789, 685, 1159, 1158, 688, 501, 500, 502, 330,
	608, 317, 317, 317, 317, 317, 950, 436, 950, 482,
	817, 806, 807, 502, 809, 1075, 597, 981, 824, 873,
	874, 875, 825, 982, 708, 317, 826, 831, 316, 316,
	316, 316, 316, 777, 830, 805, 199, 1109, 808, 80,
	981, 80, 609, 316, 607, 199, 728, 846, 199, 80,
	582, 482, 316, 520, 521, 522, 523, 524, 517, 950,
	887, 527, 982, 23, 1202, 199, 582, 199, 199, 962,
	541, 542, 543, 544, 545, 546, 547, 548, 777, 482,
	959, 924, 925, 582, 490, 883, 884, 975, 624, 623,
	23, 976, 867, 868, 869, 870, 827, 462, 607, 462,
	581, 1165, 23, 1161, 1008, 981, 832, 462, 878, 879,
	880, 52, 240, 961, 950, 610, 715, 740, 1249, 52,
	743, 1329, 328, 1346, 958, 582, 1304, 801, 927, 780,
	781, 928, 1234, 1225, 866, 788, 886, 1144, 52, 1124,
	330, 330, 330, 330, 1011, 330, 951, 986, 987, 795,
	52, 797, 798, 882, 330, 829, 877, 940, 939, 876,
	52, 968, 677, 889, 1342, 1146, 1109, 1038, 720, 518,
	519, 520, 521, 522, 523, 524, 517, 989, 977, 527,
	687, 476, 814, 505, 812, 80, 727, 815, 199, 813,
	992, 991, 744, 811, 276, 275, 278, 279, 280, 281,
	966, 810, 80, 277, 282, 816, 1333, 591, 592, 244,
	245, 999, 998, 1326, 1000, 1071, 923, 990, 978, 979,
	1332, 496, 933, 890, 932, 484, 776, 778, 1029, 622,
	1303, 454, 914, 1021, 1009, 915, 494, 485, 1302, 1247,
	1001, 1019, 794, 1013, 1200, 1018, 317, 1235, 1026, 1027,
	80, 80, 917, 80, 896, 686, 595, 330, 461, 241,
	242, 496, 1028, 619, 1030, 1031, 1032, 1014, 1015, 931,
	235, 1281, 819, 316, 1280, 236, 80, 930, 587, 590,
	591, 592, 588, 1035, 589, 593, 56, 1237, 982, 1070,
	199, 477, 1348, 1347, 60, 704, 498, 1348, 1289, 80,
	1224, 934, 710, 58, 606, 53, 739, 1058, 1, 462,
	1340, 893, 1041, 902, 1306, 1260, 741, 1138, 849, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 462, 1068, 1106, 840, 67, 80,
	80, 428, 1110, 1079, 1078, 1084, 66, 804, 949, 1044,
	1113, 1121, 1122, 804, 1097, 1123, 1296, 1115, 1125, 848,
	1096, 847, 1104, 740, 964, 1267, 1118, 1222, 330, 80,
	860, 80, 80, 1023, 863, 1145, 330, 1300, 1119, 1020,
	630, 628, 1120, 629, 627, 1132, 632, 330, 330, 330,
	330, 330, 330, 330, 330, 1114, 1131, 49, 631, 199,
	626, 330, 330, 1137, 1142, 1143, 1141, 80, 1136, 328,
	210, 323, 1126, 1127, 1128, 594, 618, 1154, 1155, 888,
	80, 199, 843, 499, 70, 1061, 1060, 80, 723, 898,
	470, 471, 212, 80, 535, 929, 199, 1002, 505, 329,
	1116, 330, 716, 488, 947, 1279, 1236, 965, 948, 562,
	790, 1174, 261, 731, 274, 952, 953, 954, 271, 1176,
	1175, 273, 272, 722, 963, 974, 464, 465, 466, 969,
	469, 970, 971, 972, 973, 509, 1199, 1073, 1183, 478,
	259, 251, 771, 552, 315, 80, 578, 80, 80, 80,
	199, 80, 785, 785, 317, 1201, 1167, 80, 785, 1212,
	1213, 1214, 586, 584, 583, 80, 988, 984, 1209, 1169,
	314, 1215, 1172, 739, 1074, 785, 1197, 1221, 1286, 726,
	1217, 316, 1196, 25, 57, 80, 80, 80, 246, 1009,
	19, 18, 17, 20, 16, 15, 14, 29, 13, 1226,
	12, 1228, 11, 1232, 330, 1180, 1181, 10, 1182, 9,
	8, 1184, 7, 1186, 941, 942, 943, 330, 6, 1233,
	5, 4, 1238, 237, 22, 2, 0, 80, 80, 0,
	0, 587, 590, 591, 592, 588, 1113, 589, 593, 1248,
	80, 986, 987, 462, 1250, 0, 1164, 0, 0, 0,
	0, 1259, 0, 0, 1265, 80, 0, 0, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 1277, 1171, 0,
	0, 0, 330, 0, 330, 80, 0, 1273, 0, 1274,
	1290, 1114, 330, 1113, 1251, 1083, 0, 0, 1294, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 330, 1309,
	552, 1310, 0, 80, 1278, 0, 1315, 0, 0, 208,
	199, 804, 0, 0, 0, 0, 0, 0, 1114, 80,
	49, 1322, 1129, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 220, 0, 527, 0, 1330, 1331, 0,
	80, 1043, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 683, 1334, 1345, 0, 0, 0, 0, 0, 0,
	1356, 0, 694, 695, 696, 697, 698, 699, 700, 701,
	0, 0, 0, 0, 0, 0, 702, 703, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 1077, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 211, 207, 0,
	0, 0, 1081, 1082, 1177, 0, 0, 1343, 997, 1100,
	0, 1179, 0, 487, 0, 1098, 1099, 0, 1101, 1102,
	0, 0, 1188, 1189, 1190, 330, 0, 1193, 0, 209,
	0, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	1203, 1204, 1205, 0, 1208, 0, 0, 0, 197, 0,
	0, 224, 0, 0, 0, 0, 0, 843, 0, 843,
	204, 0, 0, 0, 0, 0, 1191, 482, 0, 0,
	0, 0, 0, 1039, 330, 250, 330, 197, 197, 0,
	0, 0, 0, 197, 0, 197, 0, 214, 206, 0,
	215, 216, 217, 219, 218, 223, 0, 1319, 0, 330,
	0, 222, 221, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 0, 0, 527, 0, 0,
	0, 1077, 330, 1245, 0, 0, 23, 24, 50, 26,
	27, 0, 0, 0, 0, 0, 0, 1178, 1256, 1257,
	1258, 0, 0, 0, 330, 42, 0, 0, 0, 0,
	28, 47, 48, 0, 0, 0, 0, 0, 0, 785,
	0, 0, 1117, 997, 0, 785, 1282, 1283, 1284, 1285,
	37, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 895, 0, 897,
	0, 0, 330, 0, 330, 1140, 0, 916, 0, 0,
	0, 197, 0, 197, 0, 0, 0, 0, 0, 197,
	0, 0, 1311, 0, 1043, 843, 197, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 0, 1323, 0, 30, 31, 33, 32, 35, 0,
	0, 0, 0, 1170, 0, 0, 0, 0, 1240, 1241,
	1173, 1242, 1243, 1244, 482, 0, 330, 0, 0, 0,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 0, 0, 0, 0, 1357, 1358, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	516, 515, 525, 526, 518, 519, 520, 521, 522, 523,
	524, 517, 0, 0, 527, 0, 0, 0, 1211, 0,
	1211, 1211, 1211, 0, 1216, 0, 0, 0, 0, 0,
	330, 0, 0, 0, 197, 0, 0, 0, 1211, 0,
	0, 197, 602, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 330, 330,
	330, 0, 1195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 0,
	647, 527, 0, 0, 0, 946, 0, 0, 0, 0,
	1252, 1253, 0, 0, 0, 0, 0, 0, 0, 1040,
	1349, 0, 0, 1140, 1192, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 0, 1211, 527,
	0, 0, 0, 0, 1067, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 0, 1293, 527,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 197, 0, 635, 197, 0,
	0, 197, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 1317, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 0,
	197, 527, 1325, 648, 516, 515, 525, 526, 518, 519,
	520, 521, 522, 523, 524, 517, 0, 0, 527, 0,
	0, 0, 197, 1211, 661, 662, 663, 664, 665, 666,
	667, 692, 668, 669, 670, 671, 672, 649, 650, 651,
	652, 633, 634, 0, 0, 636, 0, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 653, 654, 655,
	656, 657, 658, 659, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 0, 0, 250, 250,
	0, 0, 786, 786, 250, 0, 0, 0, 786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 250,
	250, 250, 0, 197, 0, 786, 197, 197, 197, 197,
	197, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 197, 0, 0, 511, 602, 514, 0, 0, 0,
	197, 197, 528, 529, 530, 531, 532, 533, 534, 0,
	512, 513, 510, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 0, 0, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 197, 0,
	921, 922, 0, 0, 0, 0, 101, 0, 692, 0,
	0, 0, 116, 0, 118, 0, 0, 154, 127, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 516, 515, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 250, 0, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 141, 0, 157,
	107, 115, 82, 88, 0, 106, 133, 146, 150, 0,
	0, 197, 97, 0, 148, 137, 169, 0, 138, 147,
	119, 161, 142, 168, 201, 176, 159, 175, 83, 158,
	167, 95, 151, 85, 165, 156, 125, 111, 112, 84,
	0, 145, 100, 104, 99, 134, 162, 163, 98, 184,
	89, 174, 87, 90, 173, 132, 160, 166, 126, 123,
	86, 164, 124, 122, 114, 102, 108, 139, 121, 140,
	109, 129, 128, 130, 0, 0, 0, 155, 171, 185,
	92, 0, 0, 177, 178, 179, 180, 181, 0, 0,
	93, 105, 131, 91, 110, 152, 113, 120, 144, 183,
	136, 149, 96, 170, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 250, 117, 182, 143, 103, 172, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 786,
	0, 0, 0, 0, 0, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 0,
	0, 0, 79, 0, 844, 845, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 1010, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 786, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 197, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 416, 406, 0, 378, 419,
	356, 370, 427, 371, 372, 399, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	408, 389, 418, 116, 425, 118, 394, 0, 154, 127,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	420, 369, 397, 421, 0, 0, 0, 79, 0, 844,
	845, 0, 0, 0, 0, 0, 94, 0, 396, 415,
	367, 398, 336, 395, 0, 340, 343, 426, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 200, 414, 374, 373, 417, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	409, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 412, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 422, 423, 424, 403, 345, 0, 351, 352,
	0, 407, 390, 81, 0, 117, 182, 143, 103, 172,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 52,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 416, 406, 0, 378, 419,
	356, 370, 427, 371, 372, 399, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	408, 389, 418, 116, 425, 118, 394, 0, 154, 127,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	420, 369, 397, 421, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 396, 415,
	367, 398, 336, 395, 0, 340, 343, 426, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 1076, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 200, 414, 374, 373, 417, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	409, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 412, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 422, 423, 424, 403, 345, 0, 351, 352,
	0, 407, 390, 81, 0, 117, 182, 143, 103, 172,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 737, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 416, 406, 0, 378, 419,
	356, 370, 427, 371, 372, 399, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	408, 389, 418, 116, 425, 118, 394, 0, 154, 127,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	420, 369, 397, 421, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 396, 415,
	367, 398, 336, 395, 0, 340, 343, 426, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 200, 414, 374, 373, 417, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	409, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 412, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 422, 423, 424, 403, 345, 0, 351, 352,
	0, 407, 390, 81, 0, 117, 182, 143, 103, 172,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 416, 406, 0, 378, 419,
	356, 370, 427, 371, 372, 399, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	408, 389, 418, 116, 425, 118, 394, 0, 154, 127,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	420, 369, 397, 421, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 396, 415,
	367, 398, 336, 395, 0, 340, 343, 426, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 200, 414, 374, 373, 417, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	409, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 333, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 412, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 334, 332, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 422, 423, 424, 403, 345, 0, 351, 352,
	0, 407, 390, 81, 0, 117, 182, 143, 103, 172,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 0,
	0, 0, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 416, 406, 0, 378, 419,
	356, 370, 427, 371, 372, 399, 342, 386, 135, 368,
	0, 359, 337, 365, 338, 357, 380, 101, 383, 355,
	408, 389, 418, 116, 425, 118, 394, 0, 154, 127,
	0, 0, 382, 410, 384, 404, 377, 400, 347, 393,
	420, 369, 397, 421, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 396, 415,
	367, 398, 336, 395, 0, 340, 343, 426, 413, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 381, 385,
	401, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 0, 392, 0, 0, 0, 344, 341, 0, 0,
	379, 0, 0, 0, 346, 0, 361, 402, 0, 335,
	405, 411, 376, 200, 414, 374, 373, 417, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	409, 358, 366, 97, 364, 148, 137, 169, 391, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 612, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 333, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 339, 0, 155, 171,
	185, 92, 354, 412, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 334, 332, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 350, 353, 348, 349,
	387, 388, 422, 423, 424, 403, 345, 0, 351, 352,
	0, 407, 390, 81, 0, 117, 182, 143, 103, 172,
	416, 406, 0, 378, 419, 356, 370, 427, 371, 372,
	399, 342, 386, 135, 368, 0, 359, 337, 365, 338,
	357, 380, 101, 383, 355, 408, 389, 418, 116, 425,
	118, 394, 0, 154, 127, 0, 0, 382, 410, 384,
	404, 377, 400, 347, 393, 420, 369, 397, 421, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 396, 415, 367, 398, 336, 395, 0,
	340, 343, 426, 413, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 381, 385, 401, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 0, 392, 0, 0,
	0, 344, 341, 0, 0, 379, 0, 0, 0, 346,
	0, 361, 402, 0, 335, 405, 411, 376, 200, 414,
	374, 373, 417, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 409, 358, 366, 97, 364,
	148, 137, 169, 391, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 324, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 333,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 339, 0, 155, 171, 185, 92, 354, 412, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 334, 332,
	327, 326, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 350, 353, 348, 349, 387, 388, 422, 423, 424,
	403, 345, 0, 351, 352, 0, 407, 390, 81, 0,
	117, 182, 143, 103, 172, 135, 0, 0, 773, 0,
	257, 0, 0, 0, 101, 0, 254, 0, 0, 0,
	116, 297, 118, 0, 0, 154, 127, 0, 0, 0,
	0, 288, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 255, 276, 275, 278, 279, 280,
	281, 0, 0, 94, 277, 282, 283, 284, 0, 0,
	252, 269, 0, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 267, 248, 0, 0, 0, 308,
	0, 268, 0, 0, 263, 264, 265, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 306, 0, 141, 0, 157, 107, 115,
	82, 88, 0, 106, 133, 146, 150, 0, 0, 0,
	97, 0, 148, 137, 169, 0, 138, 147, 119, 161,
	142, 168, 201, 176, 159, 175, 83, 158, 167, 95,
	151, 85, 165, 156, 125, 111, 112, 84, 0, 145,
	100, 104, 99, 134, 162, 163, 98, 184, 89, 174,
	87, 90, 173, 132, 160, 166, 126, 123, 86, 164,
	124, 122, 114, 102, 108, 139, 121, 140, 109, 129,
	128, 130, 0, 0, 0, 155, 171, 185, 92, 0,
	0, 177, 178, 179, 180, 181, 0, 0, 93, 105,
	131, 91, 110, 152, 113, 120, 144, 183, 136, 149,
	96, 170, 153, 298, 307, 304, 305, 302, 303, 301,
	300, 299, 309, 290, 291, 292, 293, 295, 0, 294,
	81, 0, 117, 182, 143, 103, 172, 135, 0, 0,
	0, 0, 257, 0, 0, 0, 101, 0, 254, 0,
	0, 0, 116, 297, 118, 0, 0, 154, 127, 0,
	0, 0, 0, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 482, 255, 276, 275, 278,
	279, 280, 281, 0, 0, 94, 277, 282, 283, 284,
	0, 0, 252, 269, 0, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 267, 0, 0, 0,
	0, 308, 0, 268, 0, 0, 263, 264, 265, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 306, 0, 141, 0, 157,
	107, 115, 82, 88, 0, 106, 133, 146, 150, 0,
	0, 0, 97, 0, 148, 137, 169, 0, 138, 147,
	119, 161, 142, 168, 201, 176, 159, 175, 83, 158,
	167, 95, 151, 85, 165, 156, 125, 111, 112, 84,
	0, 145, 100, 104, 99, 134, 162, 163, 98, 184,
	89, 174, 87, 90, 173, 132, 160, 166, 126, 123,
	86, 164, 124, 122, 114, 102, 108, 139, 121, 140,
	109, 129, 128, 130, 0, 0, 0, 155, 171, 185,
	92, 0, 0, 177, 178, 179, 180, 181, 0, 0,
	93, 105, 131, 91, 110, 152, 113, 120, 144, 183,
	136, 149, 96, 170, 153, 298, 307, 304, 305, 302,
	303, 301, 300, 299, 309, 290, 291, 292, 293, 295,
	0, 294, 81, 0, 117, 182, 143, 103, 172, 135,
	0, 0, 0, 0, 257, 0, 0, 0, 101, 0,
	254, 0, 0, 0, 116, 297, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 288, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 255, 276,
	275, 278, 279, 280, 281, 0, 0, 94, 277, 282,
	283, 284, 0, 0, 252, 269, 0, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 267, 248,
	0, 0, 0, 308, 0, 268, 0, 0, 263, 264,
	265, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 306, 0, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 0, 0, 0, 97, 0, 148, 137, 169, 0,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 0, 0, 155,
	171, 185, 92, 0, 0, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 298, 307, 304,
	305, 302, 303, 301, 300, 299, 309, 290, 291, 292,
	293, 295, 0, 294, 81, 0, 117, 182, 143, 103,
	172, 135, 0, 0, 0, 0, 257, 0, 0, 0,
	101, 0, 254, 0, 0, 0, 116, 297, 118, 0,
	0, 154, 127, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 836, 0, 52, 0, 0,
	255, 276, 275, 278, 279, 280, 281, 0, 0, 94,
	277, 282, 283, 284, 0, 0, 252, 269, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 308, 0, 268, 0, 0,
	263, 264, 265, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 306,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 0, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 309, 290,
	291, 292, 293, 295, 23, 294, 81, 0, 117, 182,
	143, 103, 172, 0, 0, 0, 135, 0, 0, 0,
	0, 257, 0, 0, 0, 101, 0, 254, 0, 0,
	0, 116, 297, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 288, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 255, 276, 275, 278, 279,
	280, 281, 0, 0, 94, 277, 282, 283, 284, 0,
	0, 252, 269, 0, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 267, 0, 0, 0, 0,
	308, 0, 268, 0, 0, 263, 264, 265, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 306, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 298, 307, 304, 305, 302, 303,
	301, 300, 299, 309, 290, 291, 292, 293, 295, 0,
	294, 81, 0, 117, 182, 143, 103, 172, 135, 0,
	0, 0, 0, 257, 0, 0, 0, 101, 0, 254,
	0, 0, 0, 116, 297, 118, 0, 0, 154, 127,
	0, 0, 0, 0, 288, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 255, 276, 275,
	278, 279, 280, 281, 0, 0, 94, 277, 282, 283,
	284, 0, 0, 252, 269, 0, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 267, 0, 0,
	0, 0, 308, 0, 268, 0, 0, 263, 264, 265,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 306, 0, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	0, 0, 0, 97, 0, 148, 137, 169, 0, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 0, 0, 155, 171,
	185, 92, 0, 0, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 298, 307, 304, 305,
	302, 303, 301, 300, 299, 309, 290, 291, 292, 293,
	295, 135, 294, 81, 0, 117, 182, 143, 103, 172,
	101, 0, 0, 0, 0, 0, 116, 297, 118, 0,
	0, 154, 127, 0, 0, 0, 0, 288, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	255, 276, 275, 278, 279, 280, 281, 0, 0, 94,
	277, 282, 283, 284, 0, 0, 0, 269, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	267, 0, 0, 0, 0, 308, 0, 268, 0, 0,
	263, 264, 265, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 306,
	0, 141, 0, 157, 107, 115, 82, 88, 0, 106,
	133, 146, 150, 0, 0, 0, 97, 0, 148, 137,
	169, 1350, 138, 147, 119, 161, 142, 168, 201, 176,
	159, 175, 83, 158, 167, 95, 151, 85, 165, 156,
	125, 111, 112, 84, 0, 145, 100, 104, 99, 134,
	162, 163, 98, 184, 89, 174, 87, 90, 173, 132,
	160, 166, 126, 123, 86, 164, 124, 122, 114, 102,
	108, 139, 121, 140, 109, 129, 128, 130, 0, 0,
	0, 155, 171, 185, 92, 0, 0, 177, 178, 179,
	180, 181, 0, 0, 93, 105, 131, 91, 110, 152,
	113, 120, 144, 183, 136, 149, 96, 170, 153, 298,
	307, 304, 305, 302, 303, 301, 300, 299, 309, 290,
	291, 292, 293, 295, 135, 294, 81, 0, 117, 182,
	143, 103, 172, 101, 0, 0, 0, 0, 0, 116,
	297, 118, 0, 0, 154, 127, 0, 0, 0, 0,
	288, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 255, 276, 275, 278, 279, 280, 281,
	0, 0, 94, 277, 282, 283, 284, 0, 0, 0,
	269, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 267, 0, 0, 0, 0, 308, 0,
	268, 0, 0, 263, 264, 265, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 306, 0, 141, 0, 157, 107, 115, 82,
	88, 0, 106, 133, 146, 150, 0, 0, 0, 97,
	0, 148, 137, 169, 0, 138, 147, 119, 161, 142,
	168, 201, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 0, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 0, 0, 155, 171, 185, 92, 0, 0,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 298, 307, 304, 305, 302, 303, 301, 300,
	299, 309, 290, 291, 292, 293, 295, 0, 294, 81,
	0, 117, 182, 143, 103, 172, 135, 0, 0, 0,
	504, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 116, 0, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 506, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 501,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 81, 101, 117, 182, 143, 103, 172, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 76, 0, 71, 0,
	0, 0, 77, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	73, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 601, 0, 0, 0, 81, 101,
	117, 182, 143, 103, 172, 116, 0, 118, 0, 0,
	154, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 603, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 0, 0, 0, 97, 0, 148, 137, 169,
	0, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 0, 0,
	155, 171, 185, 92, 0, 0, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 81, 0, 117, 182, 143,
	103, 172, 101, 0, 0, 0, 0, 0, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 81, 0,
	117, 182, 143, 103, 172, 101, 0, 0, 0, 0,
	0, 116, 0, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 81, 101, 117, 182, 143, 103, 172, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 724, 0, 0, 725, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 81, 0,
	117, 182, 143, 103, 172, 101, 0, 621, 0, 0,
	0, 116, 0, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 620, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 601, 0, 0,
	0, 81, 101, 117, 182, 143, 103, 172, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 603, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 599, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 81, 101,
	117, 182, 143, 103, 172, 116, 0, 118, 0, 0,
	154, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	141, 0, 157, 107, 115, 82, 88, 0, 106, 133,
	146, 150, 0, 0, 0, 97, 0, 148, 137, 169,
	0, 138, 147, 119, 161, 142, 168, 201, 176, 159,
	175, 83, 158, 167, 95, 151, 85, 165, 156, 125,
	111, 112, 84, 0, 145, 100, 104, 99, 134, 162,
	163, 98, 184, 89, 174, 87, 90, 173, 132, 160,
	166, 126, 123, 86, 164, 124, 122, 114, 102, 108,
	139, 121, 140, 109, 129, 128, 130, 0, 0, 0,
	155, 171, 185, 92, 0, 0, 177, 178, 179, 180,
	181, 0, 0, 93, 105, 131, 91, 110, 152, 113,
	120, 144, 183, 136, 149, 96, 170, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 81, 101, 117, 182, 143,
	103, 172, 116, 0, 118, 0, 0, 154, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 603, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 0, 0, 141, 0, 157,
	107, 115, 82, 88, 0, 106, 133, 146, 150, 0,
	0, 0, 97, 0, 148, 137, 169, 0, 138, 147,
	119, 161, 142, 168, 201, 176, 159, 175, 83, 158,
	167, 95, 151, 85, 165, 156, 125, 111, 112, 84,
	0, 145, 100, 104, 99, 134, 162, 163, 98, 184,
	89, 174, 87, 90, 173, 132, 160, 166, 126, 123,
	86, 164, 124, 122, 114, 102, 108, 139, 121, 140,
	109, 129, 128, 130, 0, 0, 0, 155, 171, 185,
	92, 0, 0, 177, 178, 179, 180, 181, 0, 0,
	93, 105, 131, 91, 110, 152, 113, 120, 144, 183,
	136, 149, 96, 170, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 81, 101, 117, 182, 143, 103, 172, 116,
	0, 118, 0, 0, 154, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 506, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 0, 141, 0, 157, 107, 115, 82,
	88, 0, 106, 133, 146, 150, 0, 0, 0, 97,
	0, 148, 137, 169, 0, 138, 147, 119, 161, 142,
	168, 201, 176, 159, 175, 83, 158, 167, 95, 151,
	85, 165, 156, 125, 111, 112, 84, 0, 145, 100,
	104, 99, 134, 162, 163, 98, 184, 89, 174, 87,
	90, 173, 132, 160, 166, 126, 123, 86, 164, 124,
	122, 114, 102, 108, 139, 121, 140, 109, 129, 128,
	130, 0, 0, 0, 155, 171, 185, 92, 0, 0,
	177, 178, 179, 180, 181, 0, 0, 93, 105, 131,
	91, 110, 152, 113, 120, 144, 183, 136, 149, 96,
	170, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 81,
	0, 117, 182, 143, 103, 172, 579, 101, 0, 0,
	0, 0, 0, 116, 0, 118, 0, 0, 154, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 141, 0,
	157, 107, 115, 82, 88, 0, 106, 133, 146, 150,
	0, 0, 0, 97, 0, 148, 137, 169, 0, 138,
	147, 119, 161, 142, 168, 201, 176, 159, 175, 83,
	158, 167, 95, 151, 85, 165, 156, 125, 111, 112,
	84, 0, 145, 100, 104, 99, 134, 162, 163, 98,
	184, 89, 174, 87, 90, 173, 132, 160, 166, 126,
	123, 86, 164, 124, 122, 114, 102, 108, 139, 121,
	140, 109, 129, 128, 130, 0, 0, 0, 155, 171,
	185, 92, 0, 0, 177, 178, 179, 180, 181, 0,
	0, 93, 105, 131, 91, 110, 152, 113, 120, 144,
	183, 136, 149, 96, 170, 153, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 81, 101, 117, 182, 143, 103, 172,
	116, 0, 118, 0, 0, 154, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 0, 141, 0, 157, 107, 115,
	82, 88, 0, 106, 133, 146, 150, 0, 0, 0,
	97, 0, 148, 137, 169, 0, 138, 147, 119, 161,
	142, 168, 201, 176, 159, 175, 83, 158, 167, 95,
	151, 85, 165, 156, 125, 111, 112, 84, 0, 145,
	100, 104, 99, 134, 162, 163, 98, 184, 89, 174,
	87, 90, 173, 132, 160, 166, 126, 123, 86, 164,
	124, 122, 114, 102, 108, 139, 121, 140, 109, 129,
	128, 130, 0, 0, 0, 155, 171, 185, 92, 0,
	0, 177, 178, 179, 180, 181, 0, 0, 93, 105,
	131, 91, 110, 152, 113, 120, 144, 183, 136, 149,
	96, 170, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 0, 0,
	81, 101, 117, 182, 143, 103, 172, 116, 0, 118,
	0, 0, 154, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 200, 0, 0,
	0, 0, 141, 0, 157, 107, 115, 82, 88, 0,
	106, 133, 146, 150, 0, 0, 0, 97, 0, 148,
	137, 169, 0, 138, 147, 119, 161, 142, 168, 201,
	176, 159, 175, 83, 158, 167, 95, 151, 85, 165,
	156, 125, 111, 112, 84, 0, 145, 100, 104, 99,
	134, 162, 163, 98, 184, 89, 174, 87, 90, 173,
	132, 160, 166, 126, 123, 86, 164, 124, 122, 114,
	102, 108, 139, 121, 140, 109, 129, 128, 130, 0,
	0, 0, 155, 171, 185, 92, 0, 0, 177, 178,
	179, 180, 181, 0, 0, 93, 105, 131, 91, 110,
	152, 113, 120, 144, 183, 136, 149, 96, 170, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 81, 101, 117,
	182, 143, 103, 172, 116, 0, 118, 0, 0, 154,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 141,
	0, 157, 107, 115, 82, 88, 0, 106, 133, 146,
	150, 0, 0, 0, 97, 0, 148, 137, 169, 0,
	138, 147, 119, 161, 142, 168, 201, 176, 159, 175,
	83, 158, 167, 95, 151, 85, 165, 156, 125, 111,
	112, 84, 0, 145, 100, 104, 99, 134, 162, 163,
	98, 184, 89, 174, 87, 90, 173, 132, 160, 166,
	126, 123, 86, 164, 124, 122, 114, 102, 108, 139,
	121, 140, 109, 129, 128, 130, 0, 0, 0, 155,
	171, 185, 92, 0, 0, 177, 178, 179, 180, 181,
	0, 0, 93, 105, 131, 91, 110, 152, 113, 120,
	144, 183, 136, 149, 96, 170, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 81, 101, 117, 182, 143, 103,
	172, 116, 0, 118, 0, 0, 154, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 0, 141, 0, 157, 107,
	115, 82, 88, 0, 106, 133, 146, 150, 0, 0,
	0, 97, 0, 148, 137, 169, 0, 138, 147, 119,
	161, 142, 168, 201, 176, 159, 175, 83, 158, 167,
	95, 151, 85, 165, 156, 125, 111, 112, 84, 0,
	145, 100, 104, 99, 134, 162, 163, 98, 184, 89,
	174, 87, 90, 173, 132, 160, 166, 126, 123, 86,
	164, 124, 122, 114, 102, 108, 139, 121, 140, 109,
	129, 128, 130, 0, 0, 0, 155, 171, 185, 92,
	0, 0, 177, 178, 179, 180, 181, 0, 0, 93,
	105, 131, 91, 110, 152, 113, 120, 144, 183, 136,
	149, 96, 170, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 81, 101, 117, 182, 143, 103, 172, 116, 0,
	118, 0, 0, 154, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 0, 141, 0, 157, 107, 115, 82, 88,
	0, 106, 133, 146, 150, 0, 0, 0, 97, 0,
	148, 137, 169, 0, 138, 147, 119, 161, 142, 168,
	201, 176, 159, 175, 83, 158, 167, 95, 151, 85,
	165, 156, 125, 111, 112, 84, 0, 145, 100, 104,
	99, 134, 162, 163, 98, 184, 89, 174, 87, 90,
	173, 132, 160, 166, 126, 123, 86, 164, 124, 122,
	114, 102, 108, 139, 121, 140, 109, 129, 128, 130,
	0, 0, 0, 155, 171, 185, 92, 0, 0, 177,
	178, 179, 180, 181, 0, 0, 93, 105, 131, 91,
	110, 152, 113, 120, 144, 183, 136, 149, 96, 170,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	117, 182, 143, 103, 172,
}
var yyPact = [...]int{

	1510, -1000, -181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 911, 938, -1000, -1000, -1000, -1000, -1000, -1000, 215,
	7525, 68, 104, -3, 10274, 102, 1266, 10728, -1000, -11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -83, -107, 736,
	-1000, -1000, -1000, -1000, -1000, 893, 899, 746, 879, 809,
	-1000, 5861, 58, 9132, 10047, 5135, -1000, -1000, 225, 10728,
	96, 10728, -150, 10501, 56, 56, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, 10728, -1000, 10728,
	53, 525, 53, 53, 53, 10728, -1000, 132, -1000, -1000,
	-1000, -1000, 10728, 491, 841, 52, 3095, 3095, 3095, 3095,
	-4, 3095, -81, 769, 919, -1000, -1000, -1000, -1000, -1000,
	3095, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 532, 846, 6590, 6590, 911, -1000, 736,
	-1000, -1000, -1000, 840, -1000, -1000, 313, 925, -1000, 7298,
	130, -1000, 6590, 1931, 705, -1000, -1000, 705, -1000, -1000,
	116, -1000, -1000, 7056, 7056, 7056, 7056, 7056, 7056, 7056,
	7056, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 705, -1000, 6348, 705, 705,
	705, 705, 705, 705, 705, 705, 6590, 705, 705, 705,
	705, 705, 705, 705, 705, 705, 705, 705, 705, 705,
	9820, 710, 876, -1000, -1000, -1000, 874, 8218, 8905, 10728,
	629, -1000, 700, 4880, -106, -1000, -1000, -1000, 210, 8678,
	-1000, -1000, -1000, 839, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 673, 10728,
	-1000, 1740, -1000, 468, 3095, 72, 749, 454, 229, 449,
	10728, 10728, 3095, 70, 10728, 872, 768, 10728, 446, 443,
	-1000, 4625, -1000, 3095, 3095, 3095, 3095, 3095, 3095, 3095,
	3095, -1000, -1000, -1000, -1000, -1000, -1000, 3095, 3095, -1000,
	924, 251, -1000, -1000, -1000, -1000, 10728, 6590, -1000, -1000,
	-1000, -1000, -1000, -1000, 933, 165, 316, 126, 701, -1000,
	565, 893, 532, 809, 8445, 783, -1000, -1000, 10728, -1000,
	6590, 6590, 403, -1000, 9586, -1000, -1000, 3605, 172, 7056,
	348, 237, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056,
	7056, 7056, 7056, 7056, 7056, 7056, 7056, 377, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 439, -1000, 736, 776,
	776, 148, 148, 148, 148, 148, 148, 148, 2089, 5377,
	532, 663, 205, 6348, 5861, 5861, 6590, 6590, 10955, 10955,
	5861, 880, 248, 205, 10955, -1000, 532, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5861, 5861, 5861, 5861, 23, 10728,
	-1000, 10955, 9132, 9132, 9132, 9132, 9132, -1000, 799, 791,
	-1000, 782, 780, 803, 10728, -1000, 635, 8218, 149, 705,
	-1000, 9359, -1000, -1000, 23, 683, 9132, 10728, -1000, -1000,
	4370, 700, -106, 691, -1000, -99, -116, 6103, 147, -1000,
	-1000, -1000, -1000, 2840, 173, 571, 312, -76, -1000, -1000,
	-1000, 720, -1000, 720, 720, 720, 720, -38, -38, -38,
	-38, -1000, -1000, -1000, -1000, -1000, 745, 742, -1000, 720,
	720, 720, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 739, 739,
	739, 722, 722, 750, -1000, 10728, -170, 433, 3095, 871,
	3095, -1000, 123, -1000, 10728, -1000, -1000, 10728, 3095, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10728, 243, 10728, 10728, -1000, 205,
	-1000, 818, 6590, 6590, 4115, 6590, -1000, -1000, -1000, 846,
	-1000, 880, 898, -1000, 830, 828, 5861, -1000, -1000, 172,
	245, -1000, -1000, 381, -1000, -1000, -1000, -1000, 125, 705,
	-1000, 1792, -1000, -1000, -1000, -1000, 348, 7056, 7056, 7056,
	323, 1792, 1703, 1219, 458, 148, 595, 595, 145, 145,
	145, 145, 145, 713, 713, -1000, -1000, -1000, 532, -1000,
	-1000, -1000, 532, 5861, 699, -1000, -1000, 6590, -1000, 532,
	593, 593, 550, 475, 709, -1000, 124, 698, 593, 5861,
	262, -1000, 6590, 532, -1000, 593, 532, 593, 593, 697,
	705, -1000, 690, -1000, 209, 876, 735, 765, 1169, -1000,
	-1000, -1000, -1000, 789, -1000, 788, -1000, -1000, -1000, -1000,
	-1000, 89, 82, 80, 10501, -1000, 916, 9132, 651, -1000,
	-1000, 691, -106, -122, -1000, -1000, -1000, 205, -1000, 405,
	689, 2585, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 730,
	430, -1000, 855, 188, 170, 417, 853, -1000, -1000, -1000,
	844, -1000, 277, -79, -1000, -1000, 380, -38, -38, -1000,
	-1000, 147, 838, 147, 147, 147, 407, 407, -1000, -1000,
	-1000, -1000, 379, -1000, -1000, -1000, 368, -1000, 755, 10501,
	3095, -1000, 3860, -1000, -1000, -1000, -1000, -1000, -1000, 353,
	278, 164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21, -1000, 3095, -1000, 251, -1000, 406,
	6590, -1000, -1000, 816, 205, 205, 121, -1000, -1000, 10728,
	-1000, -1000, -1000, -1000, 644, -1000, -1000, -1000, 3350, 5861,
	-1000, 323, 1792, 1665, -1000, 7056, 7056, -1000, -1000, 593,
	5861, 205, -1000, -1000, -1000, 38, 377, 38, 7056, 7056,
	4115, 7056, 7056, -160, 591, 217, -1000, 6590, 301, -1000,
	-1000, -1000, -1000, -1000, 754, 10955, 705, -1000, 7985, 10501,
	911, 10955, 6590, 6590, -1000, -1000, 6590, 725, -1000, 6590,
	-1000, -1000, -1000, 705, 705, 705, 536, -1000, 911, 651,
	-1000, -1000, -1000, -127, -133, -1000, -1000, -1000, 2840, -1000,
	2840, 10501, 42, -1000, 417, 417, -1000, -1000, -1000, 723,
	753, 44, -1000, -1000, -1000, 569, 147, 147, -1000, 192,
	-1000, -1000, -1000, 578, -1000, 563, 688, 554, 10728, -1000,
	-1000, 686, -1000, 206, -1000, -1000, 10501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10501,
	10728, -1000, -1000, -1000, -1000, -1000, 10501, -1000, 243, -1000,
	205, -1000, 3860, -1000, 916, 9132, -1000, -1000, 532, -1000,
	7056, 1792, 1792, -1000, -1000, 532, 720, 720, -1000, 720,
	722, -1000, 720, -21, 720, -22, 532, 532, 1401, 1775,
	-1000, 436, 1723, 705, -157, -1000, 205, 6590, -1000, 857,
	625, 649, -1000, -1000, 5619, 532, 544, 120, 536, 893,
	-1000, 205, 205, 205, 10501, 205, 10501, 10501, 10501, 7752,
	10501, 893, -1000, -1000, -1000, -1000, 2585, -1000, 522, -1000,
	720, -1000, -1000, -1000, 10501, -64, 931, -1000, -1000, -1000,
	-1000, 719, -1000, -1000, -1000, -1000, -1000, -1000, -38, 404,
	-38, 351, -1000, 339, 3095, 3860, 2840, -1000, 718, -1000,
	-1000, -1000, -1000, 861, -1000, 914, 668, -1000, 1792, -1000,
	-1000, 87, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7056, 7056, -1000, 7056, 7056, 7056, 532, 394, 205,
	851, -1000, 705, -1000, -1000, 724, 10501, 10501, -1000, -1000,
	519, -1000, 512, 512, 512, 149, -1000, -1000, 131, 10501,
	-1000, 489, 157, -1000, -139, 567, 147, -1000, 147, 559,
	545, -1000, -1000, -1000, 10501, 705, 900, 895, -1000, -1000,
	1588, 1588, 1588, 1588, 65, -1000, -1000, 929, -1000, 705,
	-1000, 736, 115, -1000, 10501, -1000, -1000, -1000, -1000, -1000,
	131, -1000, 413, 183, 385, -1000, 39, 308, 850, -1000,
	842, 712, -1000, -1000, -1000, -1000, -1000, 485, 20, -1000,
	6590, 6590, -1000, -1000, -1000, -1000, 532, 40, -174, 10955,
	649, 532, 10501, -1000, -1000, -1000, 326, -1000, -1000, 10728,
	-1000, 378, -1000, -1000, 538, 749, 466, -1000, 10501, 205,
	618, -1000, 814, -167, -177, 602, -1000, -1000, -1000, 707,
	-1000, -1000, -170, -1000, 20, 826, -1000, 807, -1000, 10501,
	-1000, -1000, 4, -172, 423, -1, -175, 752, 705, -178,
	711, -1000, 923, 6823, -1000, -1000, 928, 144, 144, 1588,
	532, -1000, -1000, -1000, 43, 302, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1205, 18, 485, 1204, 1203, 1201, 1200, 1198, 1192,
	1190, 1189, 1187, 1182, 1180, 1178, 1177, 1176, 1175, 1174,
	1173, 1172, 1171, 1170, 99, 1168, 1164, 1163, 69, 1159,
	75, 1158, 1156, 41, 214, 44, 34, 8, 1154, 23,
	92, 67, 1150, 48, 1147, 1146, 78, 1144, 56, 1143,
	1142, 187, 1126, 1124, 15, 25, 1121, 1120, 1115, 1105,
	73, 446, 1103, 1102, 1101, 1098, 1094, 1093, 50, 9,
	10, 13, 16, 1092, 85, 11, 1090, 49, 1089, 1087,
	1086, 1085, 37, 1083, 52, 1082, 28, 51, 1080, 12,
	61, 26, 24, 6, 77, 54, 1079, 40, 63, 47,
	1077, 1075, 384, 1074, 1072, 57, 1071, 1070, 22, 143,
	355, 1069, 1066, 1065, 1064, 42, 0, 573, 438, 76,
	1063, 1059, 1056, 1403, 71, 60, 21, 1055, 90, 898,
	43, 1051, 1050, 36, 1040, 1038, 1026, 1024, 1023, 1021,
	1020, 98, 1019, 1017, 1015, 20, 30, 1014, 1013, 55,
	27, 1010, 1007, 1005, 45, 62, 1001, 999, 53, 29,
	996, 986, 981, 978, 977, 39, 32, 958, 14, 957,
	7, 955, 33, 954, 3, 953, 17, 952, 4, 951,
	5, 46, 1, 950, 2, 948, 945, 58, 315, 944,
	934, 91,
}
var yyR1 = [...]int{

	0, 185, 186, 186, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	189, 189, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 131,
	131, 11, 11, 11, 11, 11, 11, 11, 11, 180,
	180, 179, 178, 178, 177, 177, 176, 16, 161, 163,
	163, 162, 162, 162, 162, 155, 134, 134, 134, 134,
	137, 137, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 154, 154, 141, 141, 149, 149, 150, 150,
	150, 147, 147, 148, 148, 151, 151, 151, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 152,
	152, 145, 145, 145, 146, 146, 146, 153, 153, 153,
	153, 153, 143, 143, 156, 156, 171, 171, 170, 170,
	170, 160, 160, 167, 167, 167, 167, 167, 158, 158,
	159, 159, 169, 169, 168, 157, 157, 172, 172, 172,
	172, 183, 184, 182, 182, 182, 182, 182, 164, 164,
	164, 165, 165, 165, 166, 166, 166, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 175, 173, 173,
	174, 174, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 106, 106,
	104, 104, 107, 107, 105, 105, 105, 108, 108, 108,
	132, 132, 132, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 20, 20, 190, 24, 25, 25,
	26, 26, 26, 30, 30, 30, 28, 28, 29, 29,
	35, 35, 34, 34, 36, 36, 36, 36, 120, 120,
	120, 119, 119, 38, 38, 39, 39, 40, 40, 41,
	41, 41, 53, 53, 89, 89, 91, 91, 42, 42,
	42, 42, 43, 43, 44, 44, 45, 45, 127, 127,
	126, 126, 126, 125, 125, 47, 47, 47, 49, 48,
	48, 48, 48, 50, 50, 52, 52, 51, 51, 54,
	54, 54, 54, 55, 55, 37, 37, 37, 37, 37,
	37, 37, 103, 103, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 67, 67, 67, 67,
	67, 67, 58, 58, 58, 58, 58, 58, 58, 33,
	33, 68, 68, 68, 74, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 191, 191, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 130, 130, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 93, 93, 97, 94, 94, 98, 98, 98, 96,
	96, 96, 122, 122, 122, 101, 101, 109, 109, 110,
	110, 102, 102, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 112, 112, 112, 113, 113, 114, 114,
	114, 121, 121, 117, 117, 118, 118, 123, 123, 124,
	124, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 187, 188, 128, 129, 129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 4, 2, 0, 3, 5, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 7, 5, 4, 2, 2,
	4, 4, 2, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -185, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 147, 118, 140, 50, 159, 160,
	162, 163, 25, 141, 142, 145, 146, 31, 32, -187,
	8, 245, 54, -186, 260, -82, 15, -26, 5, -24,
	-190, -24, -24, -24, -24, -24, -161, -163, 54, 89,
	-114, 123, 71, 155, 237, 120, 121, 127, -117, 57,
	-116, 253, 133, 159, 170, 164, 191, 183, 134, 181,
	184, 224, 211, 221, 66, 162, 233, 143, 179, 175,
	173, 27, 196, 258, 174, 222, 136, 131, 197, 201,
	225, 168, 169, 227, 195, 132, 33, 255, 35, 151,
	228, 199, 194, 190, 193, 167, 189, 39, 203, 202,
	204, 223, 186, 137, 176, 18, 231, 146, 149, 198,
	200, 128, 153, 257, 229, 172, 138, 150, 145, 232,
	139, 163, 226, 235, 38, 208, 166, 130, 160, 157,
	187, 152, 177, 178, 192, 165, 188, 161, 154, 147,
	234, 209, 259, 185, 182, 158, 156, 214, 215, 216,
	217, 218, 256, 230, 180, 210, -102, 123, 125, 121,
	121, 122, 123, 237, 120, 121, -51, -123, 57, -116,
	123, 155, 121, 107, 184, 114, 212, 122, 33, 153,
	-132, 121, -104, 156, 211, 214, 215, 216, 218, 217,
	57, 226, 225, 219, -123, 161, -128, -128, -128, -128,
	-128, 213, 213, -2, -86, 17, 16, -5, -3, -187,
	6, 20, 21, -30, 40, 41, -25, -36, 98, -37,
	-123, -56, 73, -61, 29, 57, -116, 23, -60, -57,
	-75, -73, -74, 107, 108, 109, 96, 97, 104, 74,
	110, -65, -63, -64, -66, 59, 58, 67, 60, 61,
	62, 63, 68, 69, 70, -117, -71, -187, 44, 45,
	246, 247, 248, 249, 252, 250, 76, 34, 236, 244,
	243, 242, 240, 241, 238, 239, 126, 237, 102, 245,
	-102, -39, -40, -41, -42, -53, -74, -187, -51, 11,
	-46, -51, -94, -131, 161, -98, 226, 225, -118, -96,
	-117, -115, 224, 184, 223, 119, 72, 22, 24, 206,
	75, 107, 16, 76, 106, 246, 114, 48, 238, 239,
	236, 248, 249, 237, 212, 29, 10, 25, 141, 21,
	100, 116, 79, 80, 144, 23, 142, 70, 19, 51,
	11, 13, 14, 126, 125, 91, 122, 46, 8, 110,
	26, 88, 42, 28, 44, 89, 17, 240, 241, 31,
	252, 148, 102, 49, 36, 73, 68, 52, 71, 15,
	47, 90, 117, 245, 45, 120, 6, 251, 30, 140,
	43, 121, 213, 78, 124, 69, 5, 127, 32, 9,
	50, 53, 242, 243, 244, 34, 77, 12, -162, 89,
	-155, 57, -51, 122, -51, 245, -117, -110, 126, -110,
	-110, 121, -51, -51, -109, 126, 57, -109, -109, -109,
	-51, 111, -51, 57, 30, 237, 57, 153, 121, 154,
	123, -129, -187, -118, -129, -129, -129, 157, 158, -129,
	-107, -106, 221, 222, 213, 220, 52, 12, -129, -128,
	-128, -188, 56, -87, 19, 31, -37, -123, -83, -84,
	-37, -82, -2, -24, 36, -28, 21, 65, 11, -120,
	72, 71, 88, -119, 22, -117, 59, 111, -37, -58,
	91, 73, 89, 90, 75, 93, 92, 103, 96, 97,
	98, 99, 100, 101, 102, 94, 95, 106, 81, 82,
	83, 84, 85, 86, 87, -103, -187, -74, -187, 112,
	113, -61, -61, -61, -61, -61, -61, -61, -61, -187,
	-2, -69, -37, -187, -187, -187, -187, -187, -187, -187,
	-187, -187, -78, -37, -187, -191, -187, -191, -191, -191,
	-191, -191, -191, -191, -187, -187, -187, -187, -52, 26,
	-51, 30, 55, -47, -49, -48, -50, 42, 46, 48,
	43, 44, 45, 49, -127, 22, -39, -187, -126, 149,
	-125, 22, -123, 59, -51, -46, -189, 55, 11, 53,
	55, -94, 161, -95, -99, 227, 229, 81, -122, -117,
	59, 29, 30, 56, 55, -51, -134, -137, -139, -138,
	-140, -135, -136, 181, 182, 107, 185, 187, 188, 189,
	190, 191, 192, 193, 194, 195, 196, 30, 143, 177,
	178, 179, 180, 197, 198, 199, 200, 201, 202, 203,
	204, 164, 165, 166, 167, 168, 169, 170, 172, 173,
	174, 175, 176, 57, -129, 123, -180, 53, 57, 73,
	57, -51, -51, -129, 124, -51, 23, 52, -51, 57,
	57, -124, -123, -115, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, 11, -105, 11, 91, -51, -37,
	9, 91, 55, 18, 111, 55, -85, 24, 25, -86,
	-188, -30, -62, -117, 60, 63, -29, 43, -51, -37,
	-37, -67, 68, 73, 69, 70, -119, 98, -124, -118,
	-115, -61, -68, -71, -74, 64, 91, 89, 90, 75,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -130, 57, 59, 57, -60,
	-60, -117, -35, 21, -34, -36, -188, 55, -188, -2,
	-34, -34, -37, -37, -75, -117, -123, -75, -34, -28,
	-76, -77, 77, -75, -188, -34, -35, -34, -34, -90,
	149, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	42, 42, 42, 47, 42, 47, 42, -48, -123, -188,
	-54, 50, 125, 51, -187, -125, -90, 53, -39, -51,
	-98, -95, 55, 228, 230, 231, 52, -37, -146, 106,
	-164, -165, -166, -118, 59, 60, -155, -156, -157, -167,
	135, -172, 128, 130, 127, -158, 136, 122, 28, 56,
	-151, 68, 73, -147, 209, -141, 54, -141, -141, -141,
	-141, -145, 184, -145, -145, -145, 54, 54, -141, -141,
	-141, -149, 54, -149, -149, -150, 54, -150, -121, 53,
	-51, -178, 256, -179, 57, -129, 23, -129, -111, 119,
	116, 117, -175, 115, 206, 184, 66, 29, 15, 246,
	149, 259, 57, 150, -51, -51, -129, -51, -108, 89,
	12, -123, -123, 38, -37, -37, -124, -84, -87, -101,
	19, 11, 34, 34, -34, 68, 69, 70, 111, -187,
	-68, -61, -61, -61, -33, 144, 72, -188, -188, -34,
	55, -37, -188, -188, -188, 55, 53, 22, 55, 11,
	111, 55, 11, -188, -34, -79, -77, 79, -37, -188,
	-188, -188, -188, -188, -59, 30, 34, -2, -187, -187,
	-55, 55, 12, 81, -44, -43, 52, 53, -45, 52,
	-43, 42, 42, 122, 122, 122, -91, -117, -55, -39,
	-55, -99, -100, 232, 229, 235, 57, 59, 55, -166,
	81, 54, 57, 28, -158, -158, -159, 57, -159, 28,
	-142, 29, 68, -148, 210, 60, -145, -145, -146, 30,
	-146, -146, -146, -154, 59, -154, 60, 60, 52, -117,
	-129, -177, -176, -118, -128, -181, 155, 129, 135, 136,
	131, 57, 122, 28, 128, 130, 149, 127, -181, 155,
	-112, -113, 124, 22, 122, 28, 149, -129, -105, 59,
	-37, 39, 111, -51, -38, 11, 98, -118, -35, -33,
	72, -61, -61, -188, -36, -133, 107, 181, 143, 179,
	175, 195, 186, 208, 177, 209, -130, -133, -61, -61,
	-118, -61, -61, 253, -82, 80, -37, 78, -92, 52,
	-93, -70, -72, -71, -187, -2, -88, -117, -91, -82,
	-97, -37, -37, -37, 54, -37, -187, -187, -187, -188,
	55, -82, -55, 229, 233, 234, -165, -166, -169, -168,
	-117, -172, -159, -159, 54, -144, 52, 59, 60, 61,
	68, 236, 67, 56, -146, -146, 57, 107, 56, 55,
	56, 55, 56, 55, -51, 55, 81, -128, -117, -128,
	-117, -51, -128, -117, -108, -55, -39, -188, -61, -188,
	-141, -141, -141, -150, -141, 169, -141, 169, -188, -188,
	-188, 55, 19, -188, 55, 19, -187, -32, 251, -37,
	27, -92, 55, -188, -188, -188, 55, 111, -188, -86,
	-89, -117, -89, -89, -89, -126, -117, -86, 56, 55,
	-141, -89, -152, 206, 9, 54, -145, 59, -145, 60,
	60, -129, -176, -166, 54, 26, -80, 13, -145, 57,
	-61, -61, -61, -61, -61, -188, 59, 28, -72, 34,
	-2, -187, -117, -117, 55, 56, -188, -188, -188, -54,
	-171, -170, 53, 132, 66, -168, 56, -153, 128, 28,
	127, 236, 56, -146, -146, 56, 56, -89, -187, -81,
	14, 16, -188, -188, -188, -188, -31, 91, 256, 9,
	-70, -2, 111, -117, -170, 57, -160, 81, 59, 138,
	-143, 66, 28, 28, 54, 56, -173, -174, 149, -37,
	-69, -188, 254, 49, 257, -93, -188, -117, 60, -51,
	59, 56, -180, -188, 55, -117, 39, 255, 258, 54,
	-178, -174, 34, 39, -89, 151, 256, 56, 152, 257,
	-183, -184, 52, -187, 258, -184, 52, 10, 9, -61,
	148, -182, 139, 134, 137, 30, -182, -188, -188, 133,
	29, 68,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 538, 0, 306, 306, 306, 306, 306, 306, 0,
	608, 591, 0, 0, 0, 0, -2, 294, 295, 0,
	297, 298, 823, 823, 823, 823, 823, 0, 0, 0,
	34, 35, 821, 1, 3, 546, 0, 0, 310, 313,
	308, 0, 591, 0, 0, 0, 61, 62, 0, 0,
	0, 809, 0, 810, 589, 589, 589, 609, 610, 613,
	614, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 0, 0, 592, 0,
	587, 0, 587, 587, 587, 0, 249, 377, 617, 618,
	809, 810, 0, 0, 0, 0, 824, 824, 824, 824,
	0, 824, 0, 268, 269, 272, 273, 274, 275, 276,
	824, 291, 292, 281, 293, 296, 299, 300, 301, 302,
	303, 823, 823, 28, 550, 0, 0, 538, 30, 0,
	306, 311, 312, 316, 314, 315, 307, 0, 324, 328,
	0, 385, 0, 390, 392, -2, -2, 0, 427, 428,
	429, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 456, 457, 458, 523, 524, 525, 526, 527,
	528, 529, 530, 394, 395, 520, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 0, 485, 485,
	485, 485, 485, 485, 485, 485, 0, 0, 0, 0,
	0, 0, 335, 337, 338, 339, 358, 0, 360, 0,
	0, 42, 46, 0, 800, 574, -2, -2, 0, 0,
	615, 616, -2, 723, -2, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 0, 0,
	81, 0, 79, 0, 824, 0, 69, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 250, 824, 824, 824, 824, 824, 824, 824,
	824, 259, 825, 826, 260, 261, 262, 824, 824, 264,
	0, 284, 282, 283, 278, 279, 0, 0, 277, 304,
	305, 29, 822, 23, 0, 0, 547, 0, 539, 540,
	543, 546, 28, 313, 0, 318, 317, 309, 0, 325,
	0, 0, 0, 329, 0, 331, 332, 0, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 413,
	414, 415, 416, 417, 418, 391, 0, 405, 0, 0,
	0, 447, 448, 449, 450, 451, 452, 453, 0, 320,
	28, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 512, 0, 477, 0, 478, 479, 480,
	481, 482, 483, 484, 0, 320, 0, 0, 44, 0,
	376, 0, 0, 0, 0, 0, 0, 365, 0, 0,
	368, 0, 0, 0, 0, 359, 0, 0, 379, 771,
	361, 0, 363, 364, -2, 0, 0, 0, 40, 41,
	0, 47, 800, 49, 50, 0, 0, 0, 164, 582,
	583, 584, 580, 208, 0, 0, 145, 141, 87, 88,
	89, 134, 91, 134, 134, 134, 134, 161, 161, 161,
	161, 117, 118, 119, 120, 121, 0, 0, 104, 134,
	134, 134, 108, 124, 125, 126, 127, 128, 129, 130,
	131, 92, 93, 94, 95, 96, 97, 98, 136, 136,
	136, 138, 138, 611, 64, 0, 72, 0, 824, 0,
	824, 77, 0, 224, 0, 243, 588, 0, 824, 246,
	247, 378, 619, 620, 251, 252, 253, 254, 255, 256,
	257, 258, 263, 267, 0, 287, 0, 0, 271, 270,
	551, 0, 0, 0, 0, 0, 542, 544, 545, 550,
	31, 316, 0, 531, 0, 0, 0, 319, 26, 386,
	387, 389, 406, 0, 408, 410, 330, 326, 0, 521,
	-2, 396, 397, 421, 422, 423, 0, 0, 0, 0,
	419, 401, 0, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 446, 496, 497, 0, 444,
	445, 454, 0, 0, 321, 322, 424, 0, 569, 28,
	0, 0, 0, 0, 0, 520, 0, 0, 0, 0,
	518, 515, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 375, 383, 571, 0, 336, 354, 356, 0, 351,
	366, 367, 369, 0, 371, 0, 373, 374, 340, 341,
	342, 0, 0, 0, 0, 362, 383, 0, 383, 43,
	575, 48, 0, 0, 53, 54, 576, 577, 578, 0,
	78, 209, 211, 214, 215, 216, 82, 83, 84, 0,
	0, 196, 0, 0, 190, 190, 0, 188, 189, 80,
	148, 146, 0, 143, 142, 90, 0, 161, 161, 111,
	112, 164, 0, 164, 164, 164, 0, 0, 105, 106,
	107, 99, 0, 100, 101, 102, 0, 103, 0, 0,
	824, 66, 0, 70, 71, 67, 590, 68, 823, 0,
	0, 603, 225, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 0, 242, 824, 245, 284, 266, 0,
	0, 285, 286, 0, 548, 549, 0, 541, 24, 0,
	585, 586, 532, 533, 333, 407, 409, 411, 0, 320,
	398, 419, 402, 0, 399, 0, 0, 393, 459, 0,
	0, 426, -2, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 538, 0, 516, 0, 0, 476,
	487, 488, 489, 490, 563, 0, 0, -2, 0, 0,
	538, 0, 0, 0, 348, 355, 0, 0, 349, 0,
	350, 370, 372, 0, 0, 0, 0, 346, 538, 383,
	39, 51, 52, 0, 0, 58, 165, 166, 0, 212,
	0, 0, 0, 183, 190, 190, 186, 191, 187, 0,
	156, 0, 147, 86, 144, 0, 164, 164, 113, 0,
	114, 115, 116, 0, 132, 0, 0, 0, 0, 612,
	65, 73, 74, 0, 217, 823, 0, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 823, 0,
	0, 823, 604, 605, 606, 607, 0, 244, 287, 288,
	289, 552, 0, 25, 383, 0, 327, 522, 0, 400,
	0, 420, 403, 460, 323, 0, 134, 134, 501, 134,
	138, 504, 134, 506, 134, 509, 0, 0, 0, 0,
	521, 0, 0, 0, 513, 475, 519, 0, 32, 0,
	563, 553, 565, 567, 0, 28, 0, 559, 0, 546,
	572, 384, 573, 352, 0, 357, 0, 0, 0, 360,
	0, 546, 38, 55, 56, 57, 210, 213, 0, 192,
	134, 195, 184, 185, 0, 159, 0, 149, 150, 151,
	152, 153, 155, 135, 109, 110, 162, 163, 161, 0,
	161, 0, 139, 0, 824, 0, 0, 218, 0, 219,
	221, 222, 223, 0, 265, 534, 334, 461, 404, 464,
	498, 161, 502, 503, 505, 507, 508, 510, 466, 465,
	467, 0, 0, 470, 0, 0, 0, 0, 0, 517,
	0, 33, 0, 568, -2, 0, 0, 0, 45, 36,
	0, 344, 0, 0, 0, 379, 347, 37, 175, 0,
	194, 0, 167, 160, 0, 0, 164, 133, 164, 0,
	0, 63, 75, 76, 0, 0, 536, 0, 499, 500,
	0, 0, 0, 0, 491, 474, 514, 0, 566, 0,
	-2, 0, 561, 560, 0, 353, 380, 381, 382, 343,
	174, 176, 0, 181, 0, 193, 0, 172, 0, 169,
	171, 157, 154, 122, 123, 137, 140, 0, 0, 27,
	0, 0, 468, 469, 471, 472, 0, 0, 0, 0,
	556, 28, 0, 345, 177, 178, 0, 182, 180, 0,
	85, 0, 168, 170, 0, 69, 0, 238, 0, 537,
	535, 473, 0, 0, 0, 564, -2, 562, 179, 0,
	173, 158, 72, 237, 0, 0, 492, 0, 495, 0,
	220, 239, 0, 493, 0, 0, 0, 197, 0, 0,
	198, 199, 0, 0, 494, 200, 0, 0, 0, 0,
	0, 201, 203, 204, 0, 0, 202, 240, 241, 205,
	206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 260,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:344
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:368
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:402
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:414
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:469
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:473
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:497
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:501
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:521
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:560
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:585
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:605
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:651
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:676
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:900
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:904
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:971
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:995
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:999
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1326
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1331
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 240:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 241:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1391
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1399
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1404
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1494
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1499
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1521
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = "full "
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.showFilter = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = SessionStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = GlobalStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.statement = &Begin{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.statement = &Begin{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.statement = &Commit{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.statement = &Rollback{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.statement = &OtherRead{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.statement = &OtherRead{}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.statement = &OtherRead{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1696
		{
			setAllowComments(yylex, true)
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.bytes2 = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.str = UnionStr
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = UnionAllStr
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.str = UnionDistinctStr
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.str = SQLCacheStr
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.str = DistinctStr
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.str = StraightJoinHint
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.selectExprs = nil
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.empty = struct{}{}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.empty = struct{}{}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = JoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = JoinStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.str = JoinStr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.str = StraightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = LeftJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.str = LeftJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.str = RightJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.str = RightJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.str = NaturalJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.indexHints = nil
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = IsNullStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.str = IsNotNullStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.str = IsTrueStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.str = IsNotTrueStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = IsFalseStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = IsNotFalseStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.str = EqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.str = LessThanStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.str = GreaterThanStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.str = LessEqualStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.str = GreaterEqualStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.str = NotEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2330
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2338
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2360
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 472:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 473:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.str = BooleanModeStr
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 494:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.str = QueryExpansionStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.expr = nil
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.str = string("")
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = &NullVal{}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.exprs = nil
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.orderBy = nil
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.str = AscScr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.str = AscScr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.str = DescScr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.limit = nil
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2791
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.str = ""
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2800
		{
			yyVAL.str = ForUpdateStr
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.str = ShareModeStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2825
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2838
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2857
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.updateExprs = nil
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2898
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.bytes = []byte("charset")
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.expr = &Default{}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.byt = 0
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.byt = 1
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2983
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.str = IgnoreStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3290
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3299
		{
			decNesting(yylex)
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3304
		{
			forceEOF(yylex)
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3309
		{
			forceEOF(yylex)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3313
		{
			forceEOF(yylex)
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3317
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

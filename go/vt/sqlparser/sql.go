// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const UNIQUE = 57455
const PRIMARY = 57456
const COLUMN = 57457
const SPATIAL = 57458
const FULLTEXT = 57459
const KEY_BLOCK_SIZE = 57460
const CHECK = 57461
const ACTION = 57462
const CASCADE = 57463
const CONSTRAINT = 57464
const FOREIGN = 57465
const NO = 57466
const REFERENCES = 57467
const RESTRICT = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const WARNINGS = 57488
const SEQUENCE = 57489
const BEGIN = 57490
const START = 57491
const TRANSACTION = 57492
const COMMIT = 57493
const ROLLBACK = 57494
const BIT = 57495
const TINYINT = 57496
const SMALLINT = 57497
const MEDIUMINT = 57498
const INT = 57499
const INTEGER = 57500
const BIGINT = 57501
const INTNUM = 57502
const REAL = 57503
const DOUBLE = 57504
const FLOAT_TYPE = 57505
const DECIMAL = 57506
const NUMERIC = 57507
const TIME = 57508
const TIMESTAMP = 57509
const DATETIME = 57510
const YEAR = 57511
const CHAR = 57512
const VARCHAR = 57513
const BOOL = 57514
const CHARACTER = 57515
const VARBINARY = 57516
const NCHAR = 57517
const TEXT = 57518
const TINYTEXT = 57519
const MEDIUMTEXT = 57520
const LONGTEXT = 57521
const BLOB = 57522
const TINYBLOB = 57523
const MEDIUMBLOB = 57524
const LONGBLOB = 57525
const JSON = 57526
const ENUM = 57527
const GEOMETRY = 57528
const POINT = 57529
const LINESTRING = 57530
const POLYGON = 57531
const GEOMETRYCOLLECTION = 57532
const MULTIPOINT = 57533
const MULTILINESTRING = 57534
const MULTIPOLYGON = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const COLLATION = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_METADATA = 57545
const VSCHEMA = 57546
const FULL = 57547
const PROCESSLIST = 57548
const COLUMNS = 57549
const FIELDS = 57550
const ENGINES = 57551
const PLUGINS = 57552
const NAMES = 57553
const CHARSET = 57554
const GLOBAL = 57555
const SESSION = 57556
const ISOLATION = 57557
const LEVEL = 57558
const READ = 57559
const WRITE = 57560
const ONLY = 57561
const REPEATABLE = 57562
const COMMITTED = 57563
const UNCOMMITTED = 57564
const SERIALIZABLE = 57565
const CURRENT_TIMESTAMP = 57566
const DATABASE = 57567
const CURRENT_DATE = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const SUBSTR = 57578
const SUBSTRING = 57579
const GROUP_CONCAT = 57580
const SEPARATOR = 57581
const TIMESTAMPADD = 57582
const TIMESTAMPDIFF = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const ARRAY = 57592
const CUME_DIST = 57593
const DESCRIPTION = 57594
const DENSE_RANK = 57595
const EMPTY = 57596
const EXCEPT = 57597
const FIRST_VALUE = 57598
const GROUPING = 57599
const GROUPS = 57600
const JSON_TABLE = 57601
const LAG = 57602
const LAST_VALUE = 57603
const LATERAL = 57604
const LEAD = 57605
const MEMBER = 57606
const NTH_VALUE = 57607
const NTILE = 57608
const OF = 57609
const OVER = 57610
const PERCENT_RANK = 57611
const RANK = 57612
const RECURSIVE = 57613
const ROW_NUMBER = 57614
const SYSTEM = 57615
const WINDOW = 57616
const ACTIVE = 57617
const ADMIN = 57618
const BUCKETS = 57619
const CLONE = 57620
const COMPONENT = 57621
const DEFINITION = 57622
const ENFORCED = 57623
const EXCLUDE = 57624
const FOLLOWING = 57625
const GEOMCOLLECTION = 57626
const GET_MASTER_PUBLIC_KEY = 57627
const HISTOGRAM = 57628
const HISTORY = 57629
const INACTIVE = 57630
const INVISIBLE = 57631
const LOCKED = 57632
const MASTER_COMPRESSION_ALGORITHMS = 57633
const MASTER_PUBLIC_KEY_PATH = 57634
const MASTER_TLS_CIPHERSUITES = 57635
const MASTER_ZSTD_COMPRESSION_LEVEL = 57636
const NESTED = 57637
const NETWORK_NAMESPACE = 57638
const NOWAIT = 57639
const NULLS = 57640
const OJ = 57641
const OLD = 57642
const OPTIONAL = 57643
const ORDINALITY = 57644
const ORGANIZATION = 57645
const OTHERS = 57646
const PATH = 57647
const PERSIST = 57648
const PERSIST_ONLY = 57649
const PRECEDING = 57650
const PRIVILEGE_CHECKS_USER = 57651
const PROCESS = 57652
const RANDOM = 57653
const REFERENCE = 57654
const REQUIRE_ROW_FORMAT = 57655
const RESOURCE = 57656
const RESPECT = 57657
const RESTART = 57658
const RETAIN = 57659
const REUSE = 57660
const ROLE = 57661
const SECONDARY = 57662
const SECONDARY_ENGINE = 57663
const SECONDARY_LOAD = 57664
const SECONDARY_UNLOAD = 57665
const SKIP = 57666
const SRID = 57667
const THREAD_PRIORITY = 57668
const TIES = 57669
const UNBOUNDED = 57670
const VCPU = 57671
const VISIBLE = 57672

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 30,
	-2, 4,
	-1, 38,
	161, 303,
	162, 303,
	-2, 291,
	-1, 323,
	113, 647,
	-2, 643,
	-1, 324,
	113, 648,
	-2, 644,
	-1, 393,
	83, 896,
	-2, 64,
	-1, 394,
	83, 814,
	-2, 65,
	-1, 399,
	83, 783,
	-2, 609,
	-1, 401,
	83, 844,
	-2, 611,
	-1, 700,
	1, 356,
	5, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	30, 356,
	31, 356,
	43, 356,
	44, 356,
	45, 356,
	46, 356,
	47, 356,
	49, 356,
	50, 356,
	53, 356,
	54, 356,
	56, 356,
	57, 356,
	348, 356,
	-2, 374,
	-1, 703,
	54, 45,
	56, 45,
	-2, 49,
	-1, 855,
	113, 650,
	-2, 646,
	-1, 1085,
	5, 31,
	-2, 442,
	-1, 1116,
	5, 30,
	-2, 583,
	-1, 1360,
	5, 31,
	-2, 584,
	-1, 1413,
	5, 30,
	-2, 586,
	-1, 1493,
	5, 31,
	-2, 587,
}

const yyPrivate = 57344

const yyLast = 17106

var yyAct = [...]int{

	324, 1527, 1517, 655, 1481, 1322, 1119, 1380, 1393, 1426,
	1211, 317, 1137, 1262, 970, 341, 1296, 943, 1259, 999,
	1013, 58, 966, 1120, 979, 1263, 328, 1275, 354, 1164,
	1269, 969, 293, 82, 302, 941, 1234, 267, 880, 553,
	267, 818, 891, 1076, 887, 1190, 398, 802, 1143, 267,
	267, 267, 1181, 983, 716, 857, 654, 3, 945, 909,
	586, 696, 930, 592, 392, 923, 355, 52, 267, 82,
	1009, 522, 715, 267, 697, 267, 598, 387, 294, 607,
	311, 389, 705, 326, 300, 669, 57, 384, 1520, 1504,
	542, 1515, 670, 62, 1032, 366, 1491, 372, 373, 370,
	371, 369, 368, 367, 1512, 1323, 1503, 315, 1031, 301,
	1490, 374, 375, 1251, 1352, 527, 277, 993, 1290, 52,
	64, 65, 66, 67, 68, 564, 960, 307, 262, 258,
	259, 260, 717, 254, 718, 557, 252, 1036, 256, 1152,
	296, 287, 1151, 890, 295, 1153, 1030, 1455, 620, 619,
	629, 630, 622, 623, 624, 625, 626, 627, 628, 621,
	1291, 1292, 631, 961, 962, 575, 580, 1172, 992, 576,
	573, 574, 1383, 1213, 1400, 1000, 1343, 1341, 292, 791,
	568, 569, 578, 790, 1215, 788, 1514, 1511, 1482, 1210,
	924, 1474, 270, 984, 395, 1535, 1027, 1024, 1025, 273,
	1023, 559, 1427, 561, 543, 1435, 256, 281, 276, 1138,
	1140, 529, 1531, 1216, 986, 1429, 795, 779, 789, 792,
	1285, 1284, 1283, 525, 539, 579, 1214, 914, 532, 986,
	269, 255, 1034, 1037, 558, 560, 257, 1207, 1044, 1463,
	279, 1043, 1363, 1209, 1165, 1220, 286, 261, 643, 644,
	1148, 1104, 253, 267, 1070, 1094, 829, 1091, 267, 711,
	986, 967, 611, 549, 267, 621, 956, 631, 631, 1029,
	267, 1308, 826, 271, 819, 82, 823, 82, 82, 606,
	82, 1472, 82, 1428, 910, 1444, 1139, 536, 82, 537,
	523, 1028, 538, 1273, 624, 625, 626, 627, 628, 621,
	283, 274, 631, 284, 285, 290, 1000, 1436, 1434, 275,
	278, 985, 272, 289, 288, 589, 593, 1456, 82, 556,
	1529, 1489, 1309, 1530, 719, 1528, 985, 594, 582, 583,
	1033, 604, 612, 749, 1253, 555, 781, 523, 605, 604,
	1208, 563, 1206, 563, 563, 1035, 563, 606, 563, 832,
	833, 545, 546, 547, 563, 606, 820, 985, 643, 644,
	643, 644, 982, 980, 595, 981, 1170, 656, 605, 604,
	521, 978, 984, 528, 52, 1255, 667, 1477, 910, 864,
	1101, 71, 267, 267, 267, 606, 1067, 1068, 1069, 640,
	989, 82, 642, 862, 863, 861, 990, 82, 605, 604,
	601, 55, 596, 622, 623, 624, 625, 626, 627, 628,
	621, 860, 737, 631, 554, 606, 1495, 72, 695, 1389,
	653, 1388, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 1185, 668, 671, 671, 671, 677, 671, 671, 677,
	671, 685, 686, 687, 688, 689, 690, 691, 251, 701,
	750, 530, 531, 672, 674, 676, 678, 680, 682, 683,
	673, 675, 1184, 679, 681, 881, 684, 882, 709, 1173,
	1497, 704, 713, 763, 766, 767, 768, 769, 770, 771,
	1536, 772, 773, 774, 775, 776, 751, 752, 753, 754,
	735, 736, 764, 828, 738, 23, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 755, 756, 757, 758,
	759, 760, 761, 762, 381, 382, 395, 1473, 1407, 1089,
	1537, 1088, 267, 1386, 847, 849, 850, 82, 1182, 584,
	848, 827, 267, 267, 82, 82, 82, 1053, 605, 604,
	267, 807, 1154, 267, 1155, 1470, 267, 1325, 605, 604,
	267, 1165, 82, 1090, 1160, 606, 306, 82, 82, 82,
	267, 82, 82, 883, 765, 606, 801, 808, 800, 82,
	82, 1432, 1513, 1235, 1499, 585, 585, 620, 619, 629,
	630, 622, 623, 624, 625, 626, 627, 628, 621, 821,
	782, 631, 806, 563, 1432, 1485, 804, 780, 82, 777,
	563, 563, 563, 267, 605, 604, 1432, 585, 1441, 82,
	551, 1237, 1432, 1464, 1432, 1431, 844, 845, 563, 1378,
	1377, 606, 544, 563, 563, 563, 321, 563, 563, 834,
	796, 1077, 1365, 585, 1440, 563, 563, 1362, 585, 1315,
	1314, 1311, 1312, 858, 535, 1239, 534, 1243, 707, 1238,
	1305, 1236, 987, 82, 1311, 1310, 1241, 1144, 855, 853,
	932, 935, 936, 937, 933, 1240, 934, 938, 25, 656,
	1276, 1277, 898, 899, 1083, 585, 707, 836, 1242, 1244,
	927, 585, 893, 585, 726, 725, 82, 82, 851, 900,
	903, 708, 1114, 710, 267, 911, 1260, 1115, 59, 1272,
	1272, 927, 267, 267, 926, 893, 267, 267, 1358, 52,
	267, 267, 267, 82, 895, 25, 1443, 55, 1223, 708,
	927, 706, 1144, 950, 657, 706, 82, 884, 885, 25,
	927, 965, 1313, 919, 920, 1156, 959, 854, 1107, 1083,
	1106, 951, 907, 1083, 1412, 953, 619, 629, 630, 622,
	623, 624, 625, 626, 627, 628, 621, 706, 804, 631,
	1001, 1002, 1003, 1083, 55, 308, 1272, 712, 942, 949,
	830, 794, 701, 55, 1505, 1395, 701, 957, 55, 353,
	267, 82, 994, 82, 1370, 1014, 1301, 958, 954, 267,
	267, 267, 267, 267, 1159, 267, 267, 1015, 974, 267,
	82, 1010, 896, 897, 1276, 1277, 902, 905, 906, 1005,
	1004, 1212, 80, 1522, 55, 1396, 1017, 1518, 267, 1303,
	267, 267, 1279, 835, 1260, 267, 932, 935, 936, 937,
	933, 918, 934, 938, 921, 922, 842, 1186, 395, 1056,
	1057, 824, 593, 798, 1011, 1012, 1282, 563, 397, 563,
	1281, 971, 1131, 995, 996, 997, 998, 1132, 1050, 1129,
	1133, 1128, 936, 937, 1130, 1127, 563, 312, 313, 1006,
	1007, 1008, 1509, 1502, 1219, 1055, 855, 1058, 1507, 1065,
	599, 1064, 892, 894, 599, 1177, 587, 724, 552, 1169,
	858, 1391, 1479, 600, 1059, 1060, 597, 600, 588, 1478,
	1410, 1167, 1161, 1356, 1020, 1084, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 797, 1072, 631, 940,
	1449, 1071, 1102, 309, 310, 1063, 303, 304, 267, 267,
	267, 267, 267, 1062, 59, 1448, 1398, 1144, 577, 1095,
	267, 1198, 1092, 267, 1524, 1523, 63, 267, 817, 602,
	1524, 267, 1460, 1121, 1384, 854, 825, 61, 645, 646,
	647, 648, 649, 650, 651, 652, 56, 1, 1100, 1516,
	82, 1196, 1324, 1392, 1026, 330, 1480, 1425, 1295, 977,
	1116, 968, 70, 520, 1157, 1066, 1145, 69, 1471, 1122,
	1117, 1118, 1125, 976, 701, 701, 701, 701, 701, 895,
	1146, 1134, 1147, 1123, 1124, 1142, 1126, 975, 1433, 942,
	1382, 1141, 988, 1166, 1149, 1174, 1175, 701, 82, 82,
	1171, 991, 1176, 1302, 1178, 1179, 1180, 1168, 1476, 732,
	730, 731, 1081, 1082, 1355, 1162, 1163, 729, 1197, 734,
	733, 728, 280, 1202, 1199, 1192, 1200, 1195, 82, 1191,
	390, 1098, 1193, 1194, 397, 1189, 397, 397, 1183, 397,
	1354, 397, 267, 939, 720, 1016, 1201, 397, 603, 73,
	1203, 82, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 1205, 563, 631, 1204, 1022, 822,
	571, 1218, 572, 282, 639, 971, 1061, 609, 620, 619,
	629, 630, 622, 623, 624, 625, 626, 627, 628, 621,
	1150, 1079, 631, 1254, 563, 1080, 1226, 1227, 82, 82,
	1252, 1261, 396, 1085, 1086, 1087, 1233, 1246, 1245, 1267,
	1093, 831, 591, 1096, 1097, 1447, 1397, 1099, 666, 1103,
	908, 1121, 82, 1105, 1264, 329, 1108, 1109, 1110, 1111,
	1112, 855, 1058, 1280, 846, 342, 1288, 82, 339, 82,
	82, 340, 837, 1113, 613, 1287, 327, 319, 1271, 1136,
	397, 699, 1286, 1294, 1266, 692, 721, 931, 929, 928,
	385, 1278, 1265, 1274, 52, 1298, 698, 267, 1293, 1222,
	1351, 1454, 1299, 1300, 1289, 841, 1225, 1306, 1307, 344,
	343, 346, 347, 348, 349, 267, 27, 60, 345, 350,
	314, 82, 19, 18, 82, 82, 82, 267, 17, 20,
	21, 82, 16, 1317, 267, 15, 14, 540, 31, 22,
	1256, 13, 12, 11, 10, 9, 1318, 8, 1320, 7,
	856, 6, 5, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 1330, 1332,
	1339, 4, 305, 24, 2, 0, 0, 1353, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 656, 0, 0,
	1357, 0, 971, 0, 971, 1368, 0, 0, 1369, 0,
	701, 1371, 0, 1366, 82, 562, 1367, 0, 915, 1121,
	0, 641, 82, 0, 0, 0, 397, 0, 1157, 1231,
	1232, 0, 0, 397, 397, 397, 0, 82, 1350, 0,
	0, 0, 1376, 0, 82, 0, 0, 0, 0, 0,
	1385, 397, 1387, 0, 0, 0, 397, 397, 397, 0,
	397, 397, 0, 0, 0, 0, 1225, 0, 397, 397,
	1372, 1373, 1374, 1336, 1337, 0, 1338, 1399, 700, 1340,
	0, 1342, 0, 82, 82, 0, 82, 0, 0, 0,
	0, 82, 0, 82, 82, 82, 267, 838, 1419, 82,
	1420, 1422, 1423, 563, 1411, 0, 1406, 1264, 609, 0,
	0, 397, 0, 1424, 0, 1430, 82, 267, 0, 0,
	1437, 1418, 0, 1445, 0, 0, 0, 0, 1438, 0,
	1439, 0, 0, 0, 0, 1379, 0, 0, 1413, 971,
	0, 0, 0, 0, 0, 1265, 1461, 0, 1414, 0,
	0, 0, 886, 82, 0, 1469, 0, 1468, 0, 0,
	0, 1264, 0, 0, 82, 82, 0, 0, 912, 1394,
	0, 0, 1483, 1487, 1333, 0, 0, 0, 1442, 1484,
	1486, 656, 1335, 0, 82, 916, 917, 1492, 0, 0,
	0, 1462, 0, 1344, 1345, 267, 0, 0, 0, 1265,
	0, 52, 0, 82, 0, 0, 0, 1121, 0, 1073,
	1074, 1075, 397, 1359, 1360, 1361, 1501, 1364, 0, 0,
	0, 0, 0, 590, 1506, 397, 82, 1508, 1228, 0,
	0, 0, 0, 1510, 1375, 0, 0, 0, 0, 1521,
	0, 0, 0, 0, 0, 0, 1532, 0, 620, 619,
	629, 630, 622, 623, 624, 625, 626, 627, 628, 621,
	265, 0, 631, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 265, 265, 0, 0, 0, 0, 0,
	397, 0, 397, 0, 0, 0, 0, 0, 318, 1394,
	971, 388, 565, 566, 0, 567, 265, 570, 265, 397,
	0, 1519, 0, 581, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 615, 0, 618, 0, 0, 0,
	1421, 0, 632, 633, 634, 635, 636, 637, 638, 397,
	616, 617, 614, 620, 619, 629, 630, 622, 623, 624,
	625, 626, 627, 628, 621, 585, 0, 631, 0, 1450,
	1451, 1452, 1453, 0, 1457, 0, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 0, 0, 631, 700, 0, 0,
	0, 700, 1488, 0, 0, 700, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1229, 1230, 912, 0, 1498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1247, 1248,
	0, 1249, 1250, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 1258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 0, 0, 397,
	0, 0, 0, 1533, 1534, 0, 265, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 297, 298, 299, 1304, 1187, 397, 620,
	619, 629, 630, 622, 623, 624, 625, 626, 627, 628,
	621, 0, 386, 631, 0, 0, 0, 524, 0, 526,
	0, 0, 778, 0, 0, 0, 0, 397, 0, 785,
	786, 787, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	397, 0, 809, 810, 811, 1334, 813, 814, 0, 0,
	0, 0, 0, 0, 815, 816, 620, 619, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 1347, 0,
	631, 0, 0, 0, 397, 265, 265, 265, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 1268, 1270, 0,
	0, 0, 0, 700, 700, 700, 700, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 1270, 0, 0, 0, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 0, 397, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 619, 629, 630, 622, 623, 624,
	625, 626, 627, 628, 621, 0, 0, 631, 0, 0,
	0, 0, 0, 1401, 1402, 1403, 1404, 1405, 0, 0,
	0, 1408, 1409, 0, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 1326, 1327, 1328, 0, 533, 0, 0,
	397, 0, 541, 0, 0, 0, 0, 0, 548, 0,
	0, 0, 0, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 265, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 265, 0, 0, 265,
	0, 0, 912, 803, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 0, 1019, 0, 1021, 0,
	0, 1381, 0, 620, 619, 629, 630, 622, 623, 624,
	625, 626, 627, 628, 621, 1048, 397, 631, 0, 0,
	0, 0, 0, 397, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 694, 0, 703, 0,
	620, 619, 629, 630, 622, 623, 624, 625, 626, 627,
	628, 621, 1415, 1416, 631, 1417, 1525, 0, 0, 0,
	1381, 0, 1381, 1381, 1381, 0, 1078, 318, 1297, 0,
	0, 0, 318, 318, 0, 0, 318, 318, 318, 0,
	0, 0, 913, 0, 0, 1381, 620, 619, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 0, 0,
	631, 318, 318, 318, 318, 318, 0, 265, 0, 700,
	0, 0, 0, 0, 0, 265, 947, 0, 0, 265,
	265, 0, 1475, 265, 955, 803, 0, 0, 0, 0,
	0, 0, 0, 397, 397, 25, 26, 53, 28, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 1494, 48, 0, 0, 0, 0, 30,
	46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 727, 0, 0, 0,
	39, 0, 0, 0, 55, 0, 783, 784, 0, 0,
	0, 0, 0, 265, 793, 1381, 0, 386, 0, 0,
	799, 0, 265, 265, 265, 265, 265, 0, 265, 265,
	0, 0, 265, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1188, 0, 0, 0, 0, 0,
	0, 265, 0, 1051, 1052, 0, 0, 0, 265, 0,
	0, 0, 0, 803, 0, 32, 33, 35, 34, 37,
	0, 51, 0, 1217, 0, 318, 0, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 49, 50, 0, 0, 44, 45,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 41, 0, 42, 43, 0,
	0, 0, 318, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	913, 265, 265, 265, 265, 265, 0, 0, 925, 0,
	0, 0, 0, 1135, 0, 0, 265, 0, 0, 0,
	947, 952, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 1038, 1039, 1040, 1041, 1042, 0, 1045,
	1046, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 265, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 0, 1390, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 947,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 913, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 507, 495, 0,
	452, 510, 425, 442, 518, 443, 446, 483, 410, 465,
	166, 440, 0, 429, 405, 436, 406, 427, 454, 112,
	458, 424, 497, 468, 509, 138, 430, 516, 140, 474,
	0, 212, 154, 0, 0, 456, 499, 463, 492, 451,
	484, 415, 473, 511, 441, 481, 512, 0, 0, 0,
	81, 0, 972, 973, 0, 0, 0, 0, 0, 102,
	0, 478, 506, 438, 480, 482, 404, 475, 0, 408,
	411, 517, 502, 433, 434, 1158, 0, 0, 0, 0,
	0, 0, 455, 464, 489, 449, 0, 0, 0, 0,
	0, 1446, 0, 0, 431, 0, 472, 0, 0, 0,
	412, 409, 0, 0, 453, 0, 0, 0, 414, 0,
	432, 490, 0, 402, 120, 494, 501, 450, 268, 505,
	448, 447, 508, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 498, 428, 437, 106,
	435, 194, 173, 232, 471, 175, 193, 141, 222, 186,
	231, 241, 242, 219, 239, 246, 209, 87, 218, 230,
	103, 204, 89, 228, 215, 152, 132, 133, 88, 1496,
	190, 111, 118, 108, 165, 225, 226, 107, 249, 95,
	238, 91, 96, 237, 159, 221, 229, 153, 146, 90,
	227, 151, 145, 136, 115, 125, 183, 143, 184, 126,
	156, 155, 157, 0, 407, 0, 213, 235, 250, 100,
	423, 220, 244, 245, 0, 0, 101, 119, 114, 182,
	158, 97, 128, 210, 135, 142, 189, 248, 172, 195,
	104, 234, 211, 419, 422, 417, 418, 466, 467, 513,
	514, 515, 491, 413, 0, 420, 421, 0, 496, 503,
	504, 470, 83, 92, 139, 247, 187, 117, 236, 403,
	416, 110, 426, 0, 0, 439, 444, 445, 457, 459,
	460, 461, 462, 469, 476, 477, 479, 485, 486, 487,
	488, 493, 500, 519, 85, 86, 93, 99, 105, 109,
	113, 116, 121, 124, 127, 129, 130, 131, 134, 144,
	147, 148, 149, 150, 160, 161, 162, 164, 167, 168,
	169, 170, 171, 174, 176, 177, 178, 179, 180, 181,
	188, 191, 197, 198, 199, 200, 201, 202, 203, 205,
	206, 207, 208, 214, 217, 223, 224, 233, 240, 243,
	507, 495, 0, 452, 510, 425, 442, 518, 443, 446,
	483, 410, 465, 166, 440, 0, 429, 405, 436, 406,
	427, 454, 112, 458, 424, 497, 468, 509, 138, 430,
	516, 140, 474, 0, 212, 154, 0, 0, 456, 499,
	463, 492, 451, 484, 415, 473, 511, 441, 481, 512,
	0, 0, 0, 81, 0, 972, 973, 0, 0, 0,
	0, 0, 102, 0, 478, 506, 438, 480, 482, 404,
	475, 0, 408, 411, 517, 502, 433, 434, 0, 0,
	0, 0, 0, 0, 0, 455, 464, 489, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 0, 472,
	0, 0, 0, 412, 409, 0, 0, 453, 0, 0,
	0, 414, 0, 432, 490, 0, 402, 120, 494, 501,
	450, 268, 505, 448, 447, 508, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 498,
	428, 437, 106, 435, 194, 173, 232, 471, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 407, 0, 213,
	235, 250, 100, 423, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 419, 422, 417, 418,
	466, 467, 513, 514, 515, 491, 413, 0, 420, 421,
	0, 496, 503, 504, 470, 83, 92, 139, 247, 187,
	117, 236, 403, 416, 110, 426, 0, 0, 439, 444,
	445, 457, 459, 460, 461, 462, 469, 476, 477, 479,
	485, 486, 487, 488, 493, 500, 519, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 507, 495, 0, 452, 510, 425, 442,
	518, 443, 446, 483, 410, 465, 166, 440, 0, 429,
	405, 436, 406, 427, 454, 112, 458, 424, 497, 468,
	509, 138, 430, 516, 140, 474, 0, 212, 154, 0,
	0, 456, 499, 463, 492, 451, 484, 415, 473, 511,
	441, 481, 512, 55, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 478, 506, 438,
	480, 482, 404, 475, 0, 408, 411, 517, 502, 433,
	434, 0, 0, 0, 0, 0, 0, 0, 455, 464,
	489, 449, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 0, 472, 0, 0, 0, 412, 409, 0, 0,
	453, 0, 0, 0, 414, 0, 432, 490, 0, 402,
	120, 494, 501, 450, 268, 505, 448, 447, 508, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 498, 428, 437, 106, 435, 194, 173, 232,
	471, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	407, 0, 213, 235, 250, 100, 423, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 419,
	422, 417, 418, 466, 467, 513, 514, 515, 491, 413,
	0, 420, 421, 0, 496, 503, 504, 470, 83, 92,
	139, 247, 187, 117, 236, 403, 416, 110, 426, 0,
	0, 439, 444, 445, 457, 459, 460, 461, 462, 469,
	476, 477, 479, 485, 486, 487, 488, 493, 500, 519,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243, 507, 495, 0, 452,
	510, 425, 442, 518, 443, 446, 483, 410, 465, 166,
	440, 0, 429, 405, 436, 406, 427, 454, 112, 458,
	424, 497, 468, 509, 138, 430, 516, 140, 474, 0,
	212, 154, 0, 0, 456, 499, 463, 492, 451, 484,
	415, 473, 511, 441, 481, 512, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	478, 506, 438, 480, 482, 404, 475, 0, 408, 411,
	517, 502, 433, 434, 0, 0, 0, 0, 0, 0,
	0, 455, 464, 489, 449, 0, 0, 0, 0, 0,
	0, 1224, 0, 431, 0, 472, 0, 0, 0, 412,
	409, 0, 0, 453, 0, 0, 0, 414, 0, 432,
	490, 0, 402, 120, 494, 501, 450, 268, 505, 448,
	447, 508, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 498, 428, 437, 106, 435,
	194, 173, 232, 471, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 407, 0, 213, 235, 250, 100, 423,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 419, 422, 417, 418, 466, 467, 513, 514,
	515, 491, 413, 0, 420, 421, 0, 496, 503, 504,
	470, 83, 92, 139, 247, 187, 117, 236, 403, 416,
	110, 426, 0, 0, 439, 444, 445, 457, 459, 460,
	461, 462, 469, 476, 477, 479, 485, 486, 487, 488,
	493, 500, 519, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 507,
	495, 0, 452, 510, 425, 442, 518, 443, 446, 483,
	410, 465, 166, 440, 0, 429, 405, 436, 406, 427,
	454, 112, 458, 424, 497, 468, 509, 138, 430, 516,
	140, 474, 0, 212, 154, 0, 0, 456, 499, 463,
	492, 451, 484, 415, 473, 511, 441, 481, 512, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 478, 506, 438, 480, 482, 404, 475,
	0, 408, 411, 517, 502, 433, 434, 0, 0, 0,
	0, 0, 0, 0, 455, 464, 489, 449, 0, 0,
	0, 0, 0, 0, 956, 0, 431, 0, 472, 0,
	0, 0, 412, 409, 0, 0, 453, 0, 0, 0,
	414, 0, 432, 490, 0, 402, 120, 494, 501, 450,
	268, 505, 448, 447, 508, 185, 0, 216, 123, 137,
	98, 84, 94, 0, 122, 163, 192, 196, 498, 428,
	437, 106, 435, 194, 173, 232, 471, 175, 193, 141,
	222, 186, 231, 241, 242, 219, 239, 246, 209, 87,
	218, 230, 103, 204, 89, 228, 215, 152, 132, 133,
	88, 0, 190, 111, 118, 108, 165, 225, 226, 107,
	249, 95, 238, 91, 96, 237, 159, 221, 229, 153,
	146, 90, 227, 151, 145, 136, 115, 125, 183, 143,
	184, 126, 156, 155, 157, 0, 407, 0, 213, 235,
	250, 100, 423, 220, 244, 245, 0, 0, 101, 119,
	114, 182, 158, 97, 128, 210, 135, 142, 189, 248,
	172, 195, 104, 234, 211, 419, 422, 417, 418, 466,
	467, 513, 514, 515, 491, 413, 0, 420, 421, 0,
	496, 503, 504, 470, 83, 92, 139, 247, 187, 117,
	236, 403, 416, 110, 426, 0, 0, 439, 444, 445,
	457, 459, 460, 461, 462, 469, 476, 477, 479, 485,
	486, 487, 488, 493, 500, 519, 85, 86, 93, 99,
	105, 109, 113, 116, 121, 124, 127, 129, 130, 131,
	134, 144, 147, 148, 149, 150, 160, 161, 162, 164,
	167, 168, 169, 170, 171, 174, 176, 177, 178, 179,
	180, 181, 188, 191, 197, 198, 199, 200, 201, 202,
	203, 205, 206, 207, 208, 214, 217, 223, 224, 233,
	240, 243, 507, 495, 0, 452, 510, 425, 442, 518,
	443, 446, 483, 410, 465, 166, 440, 0, 429, 405,
	436, 406, 427, 454, 112, 458, 424, 497, 468, 509,
	138, 430, 516, 140, 474, 0, 212, 154, 0, 0,
	456, 499, 463, 492, 451, 484, 415, 473, 511, 441,
	481, 512, 0, 0, 0, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 478, 506, 438, 480,
	482, 404, 475, 0, 408, 411, 517, 502, 433, 434,
	0, 0, 0, 0, 0, 0, 0, 455, 464, 489,
	449, 0, 0, 0, 0, 0, 0, 852, 0, 431,
	0, 472, 0, 0, 0, 412, 409, 0, 0, 453,
	0, 0, 0, 414, 0, 432, 490, 0, 402, 120,
	494, 501, 450, 268, 505, 448, 447, 508, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 498, 428, 437, 106, 435, 194, 173, 232, 471,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 407,
	0, 213, 235, 250, 100, 423, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 419, 422,
	417, 418, 466, 467, 513, 514, 515, 491, 413, 0,
	420, 421, 0, 496, 503, 504, 470, 83, 92, 139,
	247, 187, 117, 236, 403, 416, 110, 426, 0, 0,
	439, 444, 445, 457, 459, 460, 461, 462, 469, 476,
	477, 479, 485, 486, 487, 488, 493, 500, 519, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 507, 495, 0, 452, 510,
	425, 442, 518, 443, 446, 483, 410, 465, 166, 440,
	0, 429, 405, 436, 406, 427, 454, 112, 458, 424,
	497, 468, 509, 138, 430, 516, 140, 474, 0, 212,
	154, 0, 0, 456, 499, 463, 492, 451, 484, 415,
	473, 511, 441, 481, 512, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 478,
	506, 438, 480, 482, 404, 475, 0, 408, 411, 517,
	502, 433, 434, 0, 0, 0, 0, 0, 0, 0,
	455, 464, 489, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 0, 472, 0, 0, 0, 412, 409,
	0, 0, 453, 0, 0, 0, 414, 0, 432, 490,
	0, 402, 120, 494, 501, 450, 268, 505, 448, 447,
	508, 185, 0, 216, 123, 137, 98, 84, 94, 0,
	122, 163, 192, 196, 498, 428, 437, 106, 435, 194,
	173, 232, 471, 175, 193, 141, 222, 186, 231, 241,
	242, 219, 239, 246, 209, 87, 218, 230, 103, 204,
	89, 228, 215, 152, 132, 133, 88, 0, 190, 111,
	118, 108, 165, 225, 226, 107, 249, 95, 238, 91,
	96, 237, 159, 221, 229, 153, 146, 90, 227, 151,
	145, 136, 115, 125, 183, 143, 184, 126, 156, 155,
	157, 0, 407, 0, 213, 235, 250, 100, 423, 220,
	244, 245, 0, 0, 101, 119, 114, 182, 158, 97,
	128, 210, 135, 142, 189, 248, 172, 195, 104, 234,
	211, 419, 422, 417, 418, 466, 467, 513, 514, 515,
	491, 413, 0, 420, 421, 0, 496, 503, 504, 470,
	83, 92, 139, 247, 187, 117, 236, 403, 416, 110,
	426, 0, 0, 439, 444, 445, 457, 459, 460, 461,
	462, 469, 476, 477, 479, 485, 486, 487, 488, 493,
	500, 519, 85, 86, 93, 99, 105, 109, 113, 116,
	121, 124, 127, 129, 130, 131, 134, 144, 147, 148,
	149, 150, 160, 161, 162, 164, 167, 168, 169, 170,
	171, 174, 176, 177, 178, 179, 180, 181, 188, 191,
	197, 198, 199, 200, 201, 202, 203, 205, 206, 207,
	208, 214, 217, 223, 224, 233, 240, 243, 507, 495,
	0, 452, 510, 425, 442, 518, 443, 446, 483, 410,
	465, 166, 440, 0, 429, 405, 436, 406, 427, 454,
	112, 458, 424, 497, 468, 509, 138, 430, 516, 140,
	474, 0, 212, 154, 0, 0, 456, 499, 463, 492,
	451, 484, 415, 473, 511, 441, 481, 512, 0, 0,
	0, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 478, 506, 438, 480, 482, 404, 475, 0,
	408, 411, 517, 502, 433, 434, 0, 0, 0, 0,
	0, 0, 0, 455, 464, 489, 449, 0, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 472, 0, 0,
	0, 412, 409, 0, 0, 453, 0, 0, 0, 414,
	0, 432, 490, 0, 402, 120, 494, 501, 450, 268,
	505, 448, 447, 508, 185, 0, 216, 123, 137, 98,
	84, 94, 0, 122, 163, 192, 196, 498, 428, 437,
	106, 435, 194, 173, 232, 471, 175, 193, 141, 222,
	186, 231, 241, 242, 219, 239, 246, 209, 87, 218,
	230, 103, 204, 89, 228, 215, 152, 132, 133, 88,
	0, 190, 111, 118, 108, 165, 225, 226, 107, 249,
	95, 238, 91, 96, 237, 159, 221, 229, 153, 146,
	90, 227, 151, 145, 136, 115, 125, 183, 143, 184,
	126, 156, 155, 157, 0, 407, 0, 213, 235, 250,
	100, 423, 220, 244, 245, 0, 0, 101, 119, 114,
	182, 158, 97, 128, 210, 135, 142, 189, 248, 172,
	195, 104, 234, 211, 419, 422, 417, 418, 466, 467,
	513, 514, 515, 491, 413, 0, 420, 421, 0, 496,
	503, 504, 470, 83, 92, 139, 247, 187, 117, 236,
	403, 416, 110, 426, 0, 0, 439, 444, 445, 457,
	459, 460, 461, 462, 469, 476, 477, 479, 485, 486,
	487, 488, 493, 500, 519, 85, 86, 93, 99, 105,
	109, 113, 116, 121, 124, 127, 129, 130, 131, 134,
	144, 147, 148, 149, 150, 160, 161, 162, 164, 167,
	168, 169, 170, 171, 174, 176, 177, 178, 179, 180,
	181, 188, 191, 197, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 214, 217, 223, 224, 233, 240,
	243, 507, 495, 0, 452, 510, 425, 442, 518, 443,
	446, 483, 410, 465, 166, 440, 0, 429, 405, 436,
	406, 427, 454, 112, 458, 424, 497, 468, 509, 138,
	430, 516, 140, 474, 0, 212, 154, 0, 0, 456,
	499, 463, 492, 451, 484, 415, 473, 511, 441, 481,
	512, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 478, 506, 438, 480, 482,
	404, 475, 0, 408, 411, 517, 502, 433, 434, 0,
	0, 0, 0, 0, 0, 0, 455, 464, 489, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 0,
	472, 0, 0, 0, 412, 409, 0, 0, 453, 0,
	0, 0, 414, 0, 432, 490, 0, 402, 120, 494,
	501, 450, 268, 505, 448, 447, 508, 185, 0, 216,
	123, 137, 98, 84, 94, 0, 122, 163, 192, 196,
	498, 428, 437, 106, 435, 194, 173, 232, 471, 175,
	193, 141, 222, 186, 231, 241, 242, 219, 239, 246,
	209, 87, 218, 230, 103, 204, 89, 228, 215, 152,
	132, 133, 88, 0, 190, 111, 118, 108, 165, 225,
	226, 107, 249, 95, 238, 91, 400, 237, 159, 221,
	229, 153, 146, 90, 227, 151, 145, 136, 115, 125,
	183, 143, 184, 126, 156, 155, 157, 0, 407, 0,
	213, 235, 250, 100, 423, 220, 244, 245, 0, 0,
	101, 119, 114, 182, 401, 399, 128, 210, 135, 142,
	189, 248, 172, 195, 104, 234, 211, 419, 422, 417,
	418, 466, 467, 513, 514, 515, 491, 413, 0, 420,
	421, 0, 496, 503, 504, 470, 83, 92, 139, 247,
	187, 117, 236, 403, 416, 110, 426, 0, 0, 439,
	444, 445, 457, 459, 460, 461, 462, 469, 476, 477,
	479, 485, 486, 487, 488, 493, 500, 519, 85, 86,
	93, 99, 105, 109, 113, 116, 121, 124, 127, 129,
	130, 131, 134, 144, 147, 148, 149, 150, 160, 161,
	162, 164, 167, 168, 169, 170, 171, 174, 176, 177,
	178, 179, 180, 181, 188, 191, 197, 198, 199, 200,
	201, 202, 203, 205, 206, 207, 208, 214, 217, 223,
	224, 233, 240, 243, 507, 495, 0, 452, 510, 425,
	442, 518, 443, 446, 483, 410, 465, 166, 440, 0,
	429, 405, 436, 406, 427, 454, 112, 458, 424, 497,
	468, 509, 138, 430, 516, 140, 474, 0, 212, 154,
	0, 0, 456, 499, 463, 492, 451, 484, 415, 473,
	511, 441, 481, 512, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 478, 506,
	438, 480, 482, 404, 475, 0, 408, 411, 517, 502,
	433, 434, 0, 0, 0, 0, 0, 0, 0, 455,
	464, 489, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 0, 472, 0, 0, 0, 412, 409, 0,
	0, 453, 0, 0, 0, 414, 0, 432, 490, 0,
	402, 120, 494, 501, 450, 268, 505, 448, 447, 508,
	185, 0, 216, 123, 137, 98, 84, 94, 0, 122,
	163, 192, 196, 498, 428, 437, 106, 435, 194, 173,
	232, 471, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 407, 0, 213, 235, 250, 100, 423, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	419, 422, 417, 418, 466, 467, 513, 514, 515, 491,
	413, 0, 420, 421, 0, 496, 503, 504, 470, 83,
	92, 139, 247, 187, 117, 236, 403, 416, 110, 426,
	0, 0, 439, 444, 445, 457, 459, 460, 461, 462,
	469, 476, 477, 479, 485, 486, 487, 488, 493, 500,
	519, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 507, 495, 0,
	452, 510, 425, 442, 518, 443, 446, 483, 410, 465,
	166, 440, 0, 429, 405, 436, 406, 427, 454, 112,
	458, 424, 497, 468, 509, 138, 430, 516, 140, 474,
	0, 212, 154, 0, 0, 456, 499, 463, 492, 451,
	484, 415, 473, 511, 441, 481, 512, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 478, 506, 438, 480, 482, 404, 475, 0, 408,
	411, 517, 502, 433, 434, 0, 0, 0, 0, 0,
	0, 0, 455, 464, 489, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 0, 472, 0, 0, 0,
	412, 409, 0, 0, 453, 0, 0, 0, 414, 0,
	432, 490, 0, 402, 120, 494, 501, 450, 268, 505,
	448, 447, 508, 185, 0, 216, 123, 137, 98, 84,
	94, 0, 122, 163, 192, 196, 498, 428, 437, 106,
	435, 194, 173, 232, 471, 175, 193, 141, 222, 186,
	231, 241, 242, 219, 239, 246, 209, 87, 218, 714,
	103, 204, 89, 228, 215, 152, 132, 133, 88, 0,
	190, 111, 118, 108, 165, 225, 226, 107, 249, 95,
	238, 91, 400, 237, 159, 221, 229, 153, 146, 90,
	227, 151, 145, 136, 115, 125, 183, 143, 184, 126,
	156, 155, 157, 0, 407, 0, 213, 235, 250, 100,
	423, 220, 244, 245, 0, 0, 101, 119, 114, 182,
	401, 399, 128, 210, 135, 142, 189, 248, 172, 195,
	104, 234, 211, 419, 422, 417, 418, 466, 467, 513,
	514, 515, 491, 413, 0, 420, 421, 0, 496, 503,
	504, 470, 83, 92, 139, 247, 187, 117, 236, 403,
	416, 110, 426, 0, 0, 439, 444, 445, 457, 459,
	460, 461, 462, 469, 476, 477, 479, 485, 486, 487,
	488, 493, 500, 519, 85, 86, 93, 99, 105, 109,
	113, 116, 121, 124, 127, 129, 130, 131, 134, 144,
	147, 148, 149, 150, 160, 161, 162, 164, 167, 168,
	169, 170, 171, 174, 176, 177, 178, 179, 180, 181,
	188, 191, 197, 198, 199, 200, 201, 202, 203, 205,
	206, 207, 208, 214, 217, 223, 224, 233, 240, 243,
	507, 495, 0, 452, 510, 425, 442, 518, 443, 446,
	483, 410, 465, 166, 440, 0, 429, 405, 436, 406,
	427, 454, 112, 458, 424, 497, 468, 509, 138, 430,
	516, 140, 474, 0, 212, 154, 0, 0, 456, 499,
	463, 492, 451, 484, 415, 473, 511, 441, 481, 512,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 478, 506, 438, 480, 482, 404,
	475, 0, 408, 411, 517, 502, 433, 434, 0, 0,
	0, 0, 0, 0, 0, 455, 464, 489, 449, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 0, 472,
	0, 0, 0, 412, 409, 0, 0, 453, 0, 0,
	0, 414, 0, 432, 490, 0, 402, 120, 494, 501,
	450, 268, 505, 448, 447, 508, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 498,
	428, 437, 106, 435, 194, 173, 232, 471, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 391, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 400, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 407, 0, 213,
	235, 250, 100, 423, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 401, 399, 394, 393, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 419, 422, 417, 418,
	466, 467, 513, 514, 515, 491, 413, 0, 420, 421,
	0, 496, 503, 504, 470, 83, 92, 139, 247, 187,
	117, 236, 403, 416, 110, 426, 0, 0, 439, 444,
	445, 457, 459, 460, 461, 462, 469, 476, 477, 479,
	485, 486, 487, 488, 493, 500, 519, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 888, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 889,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 323, 344, 343, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 0, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 316, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 0,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 963, 0,
	55, 0, 0, 323, 344, 343, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 964, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 0, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 0,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 585, 323, 344, 343, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 0, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 0, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 0,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 323, 344, 343, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 0, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 316, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 0,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 323, 344, 904, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 0, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 316, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 166, 0, 0, 0, 0, 325, 0,
	0, 0, 112, 0, 322, 0, 0, 0, 138, 0,
	365, 140, 0, 0, 212, 154, 0, 0, 0, 0,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 323, 344, 901, 346, 347, 348, 349,
	0, 0, 102, 345, 350, 351, 352, 0, 0, 0,
	320, 337, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 316, 0, 0, 0, 379,
	0, 336, 0, 0, 331, 332, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 378, 0,
	0, 268, 0, 0, 376, 0, 185, 0, 216, 123,
	137, 98, 84, 94, 0, 122, 163, 192, 196, 0,
	0, 0, 106, 0, 194, 173, 232, 0, 175, 193,
	141, 222, 186, 231, 241, 242, 219, 239, 246, 209,
	87, 218, 230, 103, 204, 89, 228, 215, 152, 132,
	133, 88, 0, 190, 111, 118, 108, 165, 225, 226,
	107, 249, 95, 238, 91, 96, 237, 159, 221, 229,
	153, 146, 90, 227, 151, 145, 136, 115, 125, 183,
	143, 184, 126, 156, 155, 157, 0, 0, 0, 213,
	235, 250, 100, 0, 220, 244, 245, 0, 0, 101,
	119, 114, 182, 158, 97, 128, 210, 135, 142, 189,
	248, 172, 195, 104, 234, 211, 366, 377, 372, 373,
	370, 371, 369, 368, 367, 380, 358, 359, 360, 361,
	363, 0, 374, 375, 362, 83, 92, 139, 247, 187,
	117, 236, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 93,
	99, 105, 109, 113, 116, 121, 124, 127, 129, 130,
	131, 134, 144, 147, 148, 149, 150, 160, 161, 162,
	164, 167, 168, 169, 170, 171, 174, 176, 177, 178,
	179, 180, 181, 188, 191, 197, 198, 199, 200, 201,
	202, 203, 205, 206, 207, 208, 214, 217, 223, 224,
	233, 240, 243, 25, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	325, 0, 0, 0, 112, 0, 322, 0, 0, 0,
	138, 0, 365, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 323, 344, 343, 346, 347,
	348, 349, 0, 0, 102, 345, 350, 351, 352, 0,
	0, 0, 320, 337, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 379, 0, 336, 0, 0, 331, 332, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	378, 0, 0, 268, 0, 0, 376, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 366, 377,
	372, 373, 370, 371, 369, 368, 367, 380, 358, 359,
	360, 361, 363, 0, 374, 375, 362, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	325, 0, 0, 0, 112, 0, 322, 0, 0, 0,
	138, 0, 365, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 323, 344, 343, 346, 347,
	348, 349, 0, 0, 102, 345, 350, 351, 352, 0,
	0, 0, 320, 337, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 379, 0, 336, 0, 0, 331, 332, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	378, 0, 0, 268, 0, 0, 376, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 366, 377,
	372, 373, 370, 371, 369, 368, 367, 380, 358, 359,
	360, 361, 363, 0, 374, 375, 362, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 365, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 323, 344, 343, 346, 347,
	348, 349, 0, 0, 102, 345, 350, 351, 352, 0,
	0, 0, 0, 337, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 379, 0, 336, 0, 0, 331, 332, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	378, 0, 0, 268, 0, 0, 376, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 1526,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 366, 377,
	372, 373, 370, 371, 369, 368, 367, 380, 358, 359,
	360, 361, 363, 0, 374, 375, 362, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 365, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 585, 323, 344, 343, 346, 347,
	348, 349, 0, 0, 102, 345, 350, 351, 352, 0,
	0, 0, 0, 337, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 379, 0, 336, 0, 0, 331, 332, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	378, 0, 0, 268, 0, 0, 376, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 366, 377,
	372, 373, 370, 371, 369, 368, 367, 380, 358, 359,
	360, 361, 363, 0, 374, 375, 362, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 365, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 323, 344, 343, 346, 347,
	348, 349, 0, 0, 102, 345, 350, 351, 352, 0,
	0, 0, 0, 337, 0, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 379, 0, 336, 0, 0, 331, 332, 333, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	378, 0, 0, 268, 0, 0, 376, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 366, 377,
	372, 373, 370, 371, 369, 368, 367, 380, 358, 359,
	360, 361, 363, 0, 374, 375, 362, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 0, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 619, 629, 630, 622, 623, 624, 625, 626,
	627, 628, 621, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 268, 0, 0, 0, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 608,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 0, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 610, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	605, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 268, 0, 0, 0, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 0, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	77, 78, 0, 74, 0, 0, 0, 79, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 166, 0, 0, 0, 946,
	0, 0, 0, 0, 112, 0, 0, 0, 0, 0,
	138, 0, 0, 140, 0, 0, 212, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 948, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 268, 0, 0, 0, 0, 185, 0,
	216, 123, 137, 98, 84, 94, 0, 122, 163, 192,
	196, 0, 0, 0, 106, 0, 194, 173, 232, 0,
	175, 193, 141, 222, 186, 231, 241, 242, 219, 239,
	246, 209, 87, 218, 230, 103, 204, 89, 228, 215,
	152, 132, 133, 88, 0, 190, 111, 118, 108, 165,
	225, 226, 107, 249, 95, 238, 91, 96, 237, 159,
	221, 229, 153, 146, 90, 227, 151, 145, 136, 115,
	125, 183, 143, 184, 126, 156, 155, 157, 0, 0,
	0, 213, 235, 250, 100, 0, 220, 244, 245, 0,
	0, 101, 119, 114, 182, 158, 97, 128, 210, 135,
	142, 189, 248, 172, 195, 104, 234, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 92, 139,
	247, 187, 117, 236, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 93, 99, 105, 109, 113, 116, 121, 124, 127,
	129, 130, 131, 134, 144, 147, 148, 149, 150, 160,
	161, 162, 164, 167, 168, 169, 170, 171, 174, 176,
	177, 178, 179, 180, 181, 188, 191, 197, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 214, 217,
	223, 224, 233, 240, 243, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 138, 0, 0, 140, 0, 0, 212, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 268, 0, 0, 0, 0,
	185, 0, 216, 123, 137, 98, 84, 94, 0, 122,
	163, 192, 196, 0, 0, 0, 106, 0, 194, 173,
	232, 0, 175, 193, 141, 222, 186, 231, 241, 242,
	219, 239, 246, 209, 87, 218, 230, 103, 204, 89,
	228, 215, 152, 132, 133, 88, 0, 190, 111, 118,
	108, 165, 225, 226, 107, 249, 95, 238, 91, 96,
	237, 159, 221, 229, 153, 146, 90, 227, 151, 145,
	136, 115, 125, 183, 143, 184, 126, 156, 155, 157,
	0, 0, 0, 213, 235, 250, 100, 0, 220, 244,
	245, 0, 0, 101, 119, 114, 182, 158, 97, 128,
	210, 135, 142, 189, 248, 172, 195, 104, 234, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	92, 139, 247, 187, 117, 236, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 93, 99, 105, 109, 113, 116, 121,
	124, 127, 129, 130, 131, 134, 144, 147, 148, 149,
	150, 160, 161, 162, 164, 167, 168, 169, 170, 171,
	174, 176, 177, 178, 179, 180, 181, 188, 191, 197,
	198, 199, 200, 201, 202, 203, 205, 206, 207, 208,
	214, 217, 223, 224, 233, 240, 243, 25, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 946, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 948, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 944, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 839, 0, 0, 840, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	723, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 722, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 948, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 610, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 166,
	0, 0, 0, 0, 0, 0, 0, 693, 112, 0,
	0, 0, 0, 0, 138, 0, 0, 140, 0, 0,
	212, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 266,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 268, 0, 0,
	0, 0, 185, 0, 216, 123, 137, 98, 84, 94,
	0, 122, 163, 192, 196, 0, 0, 0, 106, 0,
	194, 173, 232, 0, 175, 193, 141, 222, 186, 231,
	241, 242, 219, 239, 246, 209, 87, 218, 230, 103,
	204, 89, 228, 215, 152, 132, 133, 88, 0, 190,
	111, 118, 108, 165, 225, 226, 107, 249, 95, 238,
	91, 96, 237, 159, 221, 229, 153, 146, 90, 227,
	151, 145, 136, 115, 125, 183, 143, 184, 126, 156,
	155, 157, 0, 0, 0, 213, 235, 250, 100, 0,
	220, 244, 245, 0, 0, 101, 119, 114, 182, 158,
	97, 128, 210, 135, 142, 189, 248, 172, 195, 104,
	234, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 92, 139, 247, 187, 117, 236, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 86, 93, 99, 105, 109, 113,
	116, 121, 124, 127, 129, 130, 131, 134, 144, 147,
	148, 149, 150, 160, 161, 162, 164, 167, 168, 169,
	170, 171, 174, 176, 177, 178, 179, 180, 181, 188,
	191, 197, 198, 199, 200, 201, 202, 203, 205, 206,
	207, 208, 214, 217, 223, 224, 233, 240, 243, 383,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 268, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 263, 0, 268, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 268, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 268, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 0, 0, 0, 0,
	0, 138, 0, 0, 140, 0, 0, 212, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 268, 0, 0, 0, 0, 185,
	0, 216, 123, 137, 98, 84, 94, 0, 122, 163,
	192, 196, 0, 0, 0, 106, 0, 194, 173, 232,
	0, 175, 193, 141, 222, 186, 231, 241, 242, 219,
	239, 246, 209, 87, 218, 230, 103, 204, 89, 228,
	215, 152, 132, 133, 88, 0, 190, 111, 118, 108,
	165, 225, 226, 107, 249, 95, 238, 91, 96, 237,
	159, 221, 229, 153, 146, 90, 227, 151, 145, 136,
	115, 125, 183, 143, 184, 126, 156, 155, 157, 0,
	0, 0, 213, 235, 250, 100, 0, 220, 244, 245,
	0, 0, 101, 119, 114, 182, 158, 97, 128, 210,
	135, 142, 189, 248, 172, 195, 104, 234, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 92,
	139, 247, 187, 117, 236, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 93, 99, 105, 109, 113, 116, 121, 124,
	127, 129, 130, 131, 134, 144, 147, 148, 149, 150,
	160, 161, 162, 164, 167, 168, 169, 170, 171, 174,
	176, 177, 178, 179, 180, 181, 188, 191, 197, 198,
	199, 200, 201, 202, 203, 205, 206, 207, 208, 214,
	217, 223, 224, 233, 240, 243,
}
var yyPact = [...]int{

	2219, -1000, -262, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 919, 952, -1000, -1000, -1000, -1000, -1000,
	-1000, 326, 11447, 10, 112, 5, 15768, 106, 83, 16428,
	-1000, 11, -1000, -1000, -1000, -1000, -75, -79, 16428, 16428,
	16428, -1000, 723, -1000, -1000, -1000, -1000, -1000, 909, 911,
	759, 903, 826, -1000, 8135, 78, 78, 15438, 6815, -1000,
	-1000, 279, 16428, 98, 16428, -135, 82, 82, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 104, 16428, 588, 586, 171, -1000, 16428, 75, 564,
	75, 75, 75, 16428, -1000, 150, -1000, -1000, -1000, 16428,
	552, 858, 323, 77, 3728, -1000, 3728, 3728, -1000, 3728,
	19, 3728, -54, 926, 20, 6, -1000, 3728, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 519, 867, 9467, 9467, 919, -1000, 723, -1000, -1000,
	-1000, 859, -1000, -1000, 334, 938, -1000, 11117, 149, -1000,
	9467, 1519, 718, -1000, -1000, 718, -1000, -1000, 134, -1000,
	-1000, 10457, 10457, 10457, 10457, 10457, 10457, 10457, 10457, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 718, -1000, 9137, 718, 718, 718, 718,
	718, 718, 718, 718, 9467, 718, 718, 718, 718, 718,
	718, 718, 718, 718, 718, 718, 718, 718, 718, 718,
	718, 15101, 14111, 16428, 665, 637, -1000, -1000, 146, 711,
	6472, -100, -1000, -1000, -1000, 241, 13451, -1000, -1000, -1000,
	857, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	628, 16428, -1000, 303, -1000, 541, 3728, 91, 539, 261,
	532, 16428, 16428, 3728, 3728, 3728, 26, 59, 55, 16428,
	715, 89, 16428, 893, 790, 16428, 510, 508, -1000, 6129,
	-1000, 3728, 323, -1000, 481, 9467, 3728, 3728, 3728, 16428,
	3728, 3728, -1000, -1000, -1000, -1000, -1000, -1000, 3728, 3728,
	-1000, 937, 263, -1000, -1000, -1000, -1000, 9467, 185, -1000,
	788, -1000, -1000, -1000, -1000, -1000, -1000, 947, 179, 475,
	143, 714, -1000, 325, 909, 519, 826, 13121, 792, -1000,
	-1000, -1000, 16428, -1000, 9467, 9467, 455, -1000, 14771, -1000,
	-1000, 4757, 189, 10457, 346, 302, 10457, 10457, 10457, 10457,
	10457, 10457, 10457, 10457, 10457, 10457, 10457, 10457, 10457, 10457,
	10457, 407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	505, -1000, 723, 1140, 1140, 159, 159, 159, 159, 159,
	159, 159, 10787, 7145, 519, 626, 265, 9137, 8135, 8135,
	9467, 9467, 8795, 8465, 8135, 863, 205, 265, 16758, -1000,
	-1000, 10127, -1000, -1000, -1000, -1000, -1000, 519, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16098, 16098, 8135, 8135, 8135,
	8135, 8135, 37, 16428, -1000, 674, 783, -1000, -1000, -1000,
	897, 12461, 12791, 37, 669, 14111, 16428, -1000, -1000, 14111,
	16428, 4414, 5786, 711, -100, 680, -1000, -107, -72, 7475,
	153, -1000, -1000, -1000, -1000, 3385, 232, 595, 321, -47,
	-1000, -1000, -1000, 727, -1000, 727, 727, 727, 727, -15,
	-15, -15, -15, -1000, -1000, -1000, -1000, -1000, 755, 754,
	-1000, 727, 727, 727, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 746, 746, 746, 730, 730, 762, -1000, 16428,
	3728, 881, 3728, -1000, 79, -1000, -1000, -1000, 16428, 16428,
	16428, 16428, 16428, 120, 16428, 16428, 701, -1000, 16428, 3728,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16428, 323, 16428,
	16428, 265, -1000, 477, 16428, -1000, 836, 9467, 9467, 5443,
	9467, -1000, -1000, -1000, 867, -1000, 863, 914, -1000, 846,
	844, 8135, -1000, -1000, 189, 257, -1000, -1000, 317, -1000,
	-1000, -1000, -1000, 141, 718, -1000, 1989, -1000, -1000, -1000,
	-1000, 346, 10457, 10457, 10457, 483, 1989, 2082, 810, 651,
	159, 194, 194, 160, 160, 160, 160, 160, 305, 305,
	-1000, -1000, -1000, 519, -1000, -1000, -1000, 519, 8135, 8135,
	687, -1000, -1000, 9467, -1000, 519, 618, 618, 465, 531,
	246, 931, 618, 244, 928, 618, 618, 8135, 299, -1000,
	9467, 519, -1000, 138, -1000, 1568, 684, 682, 618, 519,
	519, 618, 618, 662, 718, -1000, 16758, 14111, 14111, 14111,
	14111, 14111, -1000, 822, 818, -1000, 816, 809, 817, 16428,
	-1000, 624, 12461, 158, 718, -1000, 14441, -1000, -1000, 925,
	14111, 645, -1000, 645, -1000, 137, -1000, -1000, 680, -100,
	-95, -1000, -1000, -1000, -1000, 265, -1000, 484, 679, 3042,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 739, 496, -1000,
	874, 201, 186, 493, 873, -1000, -1000, -1000, 860, -1000,
	297, -49, -1000, -1000, 408, -15, -15, -1000, -1000, 153,
	855, 153, 153, 153, 468, 468, -1000, -1000, -1000, -1000,
	401, -1000, -1000, -1000, 370, -1000, 784, 16098, 3728, -1000,
	-1000, -1000, -1000, 913, 913, 215, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36, 757, -1000,
	-1000, -1000, -1000, 14, 25, 86, -1000, 3728, -1000, 263,
	-1000, -1000, -1000, -1000, -1000, 834, 265, 265, 132, -1000,
	-1000, 16428, -1000, -1000, -1000, -1000, 707, -1000, -1000, -1000,
	4071, 8135, -1000, 483, 1989, 1434, -1000, 10457, 10457, -1000,
	-1000, 618, 618, 8135, 265, -1000, -1000, -1000, 464, 407,
	464, 10457, 10457, -1000, 10457, 10457, -1000, -147, 683, 252,
	-1000, 9467, 295, -1000, 5443, -1000, 10457, 10457, -1000, -1000,
	-1000, -1000, -1000, 771, 16758, 718, -1000, 12119, 16098, 710,
	-1000, 210, 783, 751, 769, 617, -1000, -1000, -1000, -1000,
	807, -1000, 803, -1000, -1000, -1000, -1000, -1000, 97, 96,
	95, 16098, -1000, 919, 9467, 645, -1000, -1000, 166, -1000,
	-1000, -116, -78, -1000, -1000, -1000, 3385, -1000, 3385, 16098,
	53, -1000, 493, 493, -1000, -1000, -1000, 731, 766, 10457,
	-1000, -1000, -1000, 593, 153, 153, -1000, 213, -1000, -1000,
	-1000, 598, -1000, 585, 676, 583, 16428, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16428, -1000, -1000, -1000, -1000, -1000,
	16098, -158, 489, 16098, 16098, 16098, 16428, -1000, 323, -1000,
	5100, -1000, 925, 14111, -1000, -1000, 519, -1000, 10457, 1989,
	1989, -1000, -1000, -1000, 519, 727, 727, -1000, 727, 730,
	-1000, 727, 2, 727, 1, 519, 519, 2036, 1859, 1772,
	1705, 718, -142, -1000, 265, 9467, -1000, 1004, 978, -1000,
	876, 643, 652, -1000, -1000, 7805, 519, 581, 129, 576,
	-1000, 919, 16758, 9467, -1000, -1000, 9467, 729, -1000, 9467,
	-1000, -1000, -1000, 718, 718, 718, 576, 909, 265, -1000,
	-1000, -1000, -1000, 3042, -1000, 563, -1000, 727, -1000, -1000,
	-1000, 16098, -40, 945, 1989, -1000, -1000, -1000, -1000, -1000,
	-15, 463, -15, 360, -1000, 358, 3728, -1000, -1000, -1000,
	-1000, 865, -1000, 5100, -1000, -1000, 720, 761, -1000, -1000,
	-1000, 923, 664, -1000, 1989, -1000, -1000, 116, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10457, 10457, 10457, 10457,
	10457, 909, 458, 265, 10457, 10457, 872, -1000, 718, -1000,
	-1000, 709, 16098, 16098, -1000, 16098, 909, -1000, 265, 265,
	16098, 265, 13781, 16098, 16098, 11777, -1000, 148, 16098, -1000,
	558, -1000, 177, -1000, -146, 153, -1000, 153, 577, 551,
	-1000, 718, 660, -1000, 202, 16098, 16428, 921, 904, -1000,
	-1000, 1568, 1568, 1568, 1568, 54, 519, -1000, 1568, 1568,
	943, -1000, 718, -1000, 723, 126, -1000, -1000, -1000, 556,
	550, -1000, 550, 550, 158, 148, -1000, 487, 198, 457,
	-1000, 49, 16098, 310, 871, -1000, 864, -1000, -1000, -1000,
	-1000, -1000, 35, 5100, 3385, 538, -1000, -1000, 9467, 9467,
	-1000, -1000, -1000, -1000, 519, 60, -168, -1000, -1000, -1000,
	16758, 652, 519, 16098, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 355, -1000, -1000, 16428, -1000, -1000, 410, -1000, -1000,
	518, -1000, 16098, -1000, -1000, 757, 265, 649, -1000, 833,
	-156, -176, 644, -1000, -1000, -1000, 719, -1000, -1000, 35,
	843, -158, -1000, 832, -1000, 16098, -1000, 32, -1000, -159,
	515, 30, -173, 764, 718, -177, 760, -1000, 935, 9797,
	-1000, -1000, 941, 182, 182, 1568, 519, -1000, -1000, -1000,
	58, 451, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1264, 56, 495, 1263, 1262, 1261, 1242, 1241, 1239,
	1237, 1235, 1234, 1233, 1232, 1231, 1229, 1228, 1227, 1226,
	1225, 1222, 1220, 1219, 1218, 1213, 1212, 93, 1210, 1207,
	1206, 76, 1195, 80, 1191, 1190, 43, 143, 44, 42,
	11, 1189, 35, 61, 74, 1186, 27, 1183, 1181, 87,
	1180, 1179, 62, 1178, 1177, 1744, 1175, 77, 1171, 12,
	48, 1167, 1166, 1164, 1163, 83, 626, 1162, 1161, 15,
	1158, 1155, 92, 1154, 55, 3, 13, 28, 25, 1145,
	975, 26, 1140, 59, 1138, 1137, 1136, 1135, 21, 1132,
	63, 1131, 34, 60, 1129, 7, 65, 30, 18, 6,
	81, 72, 1122, 23, 64, 54, 1110, 1096, 448, 1094,
	1093, 41, 1092, 1090, 39, 1089, 90, 373, 1088, 1087,
	1084, 1069, 46, 0, 779, 125, 79, 1068, 1065, 1064,
	1503, 47, 58, 17, 1063, 32, 1295, 38, 1050, 1042,
	36, 1041, 1040, 1039, 1037, 1031, 1030, 1029, 117, 1028,
	1027, 1023, 19, 22, 1021, 1020, 70, 20, 1012, 1010,
	1008, 52, 71, 1007, 993, 53, 29, 988, 987, 983,
	982, 981, 31, 14, 979, 16, 978, 9, 977, 24,
	976, 4, 974, 8, 973, 5, 972, 10, 45, 1,
	969, 2, 967, 966, 66, 227, 82, 946, 85,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 30, 30, 8, 9,
	9, 9, 9, 196, 196, 49, 49, 50, 50, 96,
	96, 10, 10, 10, 10, 101, 101, 105, 105, 105,
	106, 106, 106, 106, 138, 138, 11, 11, 11, 11,
	11, 11, 11, 187, 187, 186, 185, 185, 184, 184,
	183, 17, 168, 170, 170, 169, 169, 169, 169, 162,
	141, 141, 141, 141, 144, 144, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 143, 143, 143, 143, 143,
	145, 145, 145, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	147, 147, 147, 147, 147, 147, 147, 147, 161, 161,
	148, 148, 156, 156, 157, 157, 157, 154, 154, 155,
	155, 158, 158, 158, 150, 150, 151, 151, 159, 159,
	152, 152, 152, 153, 153, 153, 160, 160, 160, 160,
	160, 149, 149, 163, 163, 178, 178, 177, 177, 177,
	167, 167, 174, 174, 174, 174, 174, 165, 165, 166,
	166, 176, 176, 175, 164, 164, 179, 179, 179, 179,
	190, 191, 189, 189, 189, 189, 189, 171, 171, 171,
	172, 172, 172, 173, 173, 173, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 182, 180, 180, 181, 181,
	13, 18, 18, 14, 14, 14, 14, 14, 15, 15,
	19, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 112,
	112, 110, 110, 113, 113, 111, 111, 111, 114, 114,
	114, 115, 115, 139, 139, 139, 21, 21, 24, 24,
	25, 26, 22, 22, 22, 23, 23, 23, 23, 16,
	197, 27, 28, 28, 29, 29, 29, 33, 33, 33,
	31, 31, 31, 32, 32, 38, 38, 37, 37, 39,
	39, 39, 39, 127, 127, 127, 126, 126, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 44, 58, 58,
	95, 95, 97, 97, 45, 45, 45, 45, 46, 46,
	47, 47, 48, 48, 134, 134, 133, 133, 133, 132,
	132, 51, 51, 51, 53, 52, 52, 52, 52, 54,
	54, 56, 56, 55, 55, 57, 59, 59, 59, 59,
	59, 60, 60, 40, 40, 40, 40, 40, 40, 40,
	109, 109, 62, 62, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 73, 73, 73, 73, 73, 73,
	63, 63, 63, 63, 63, 63, 63, 36, 36, 74,
	74, 74, 80, 75, 75, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 70, 70, 70,
	70, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	198, 198, 72, 71, 71, 71, 71, 71, 71, 71,
	34, 34, 34, 34, 34, 137, 137, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	84, 84, 35, 35, 82, 82, 83, 85, 85, 81,
	81, 81, 65, 65, 65, 65, 65, 65, 65, 65,
	67, 67, 67, 86, 86, 87, 87, 88, 88, 89,
	89, 90, 91, 91, 91, 92, 92, 92, 92, 93,
	93, 93, 64, 64, 64, 64, 64, 64, 94, 94,
	94, 94, 98, 98, 76, 76, 78, 78, 77, 79,
	99, 99, 103, 100, 100, 104, 104, 104, 104, 102,
	102, 102, 129, 129, 129, 107, 107, 116, 116, 117,
	117, 108, 108, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 119, 119, 120, 120, 121, 121,
	121, 128, 128, 124, 124, 125, 125, 130, 130, 131,
	131, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 194, 195,
	135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 7, 8, 1, 1, 9, 8,
	7, 6, 6, 1, 1, 1, 3, 1, 3, 0,
	4, 3, 4, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 7,
	7, 4, 5, 4, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 3, 3, 2, 3, 4, 3, 7, 5,
	4, 2, 4, 4, 3, 3, 5, 2, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 4, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -24, -25, -26,
	-23, -22, -16, -3, -4, 6, 7, -30, 9, 10,
	30, -17, 116, 117, 119, 118, 151, 120, 144, 51,
	165, 166, 168, 169, 149, 150, 31, 32, 25, 145,
	146, 122, -194, 8, 250, 55, -193, 348, -88, 15,
	-29, 5, -27, -197, -27, -27, -27, -27, -27, -168,
	-170, 55, 91, -121, 126, 73, 242, 123, 124, 130,
	-124, 58, -123, 260, 137, 292, 293, 165, 176, 170,
	197, 189, 261, 294, 138, 187, 190, 229, 136, 295,
	217, 224, 67, 168, 238, 296, 147, 185, 181, 297,
	269, 179, 27, 298, 226, 202, 299, 265, 180, 225,
	122, 300, 140, 134, 301, 203, 207, 302, 230, 303,
	304, 305, 174, 175, 306, 232, 201, 135, 33, 262,
	36, 155, 233, 205, 307, 200, 196, 308, 309, 310,
	311, 199, 173, 195, 40, 209, 208, 210, 228, 192,
	312, 313, 314, 141, 315, 182, 18, 316, 317, 318,
	319, 320, 236, 150, 321, 153, 322, 323, 324, 325,
	326, 327, 227, 204, 206, 131, 157, 264, 328, 234,
	178, 329, 142, 154, 149, 237, 143, 330, 331, 332,
	333, 334, 335, 336, 169, 337, 338, 339, 340, 164,
	231, 240, 39, 214, 341, 172, 133, 342, 166, 161,
	219, 193, 156, 343, 344, 183, 184, 198, 171, 194,
	167, 158, 151, 345, 239, 215, 266, 191, 188, 162,
	346, 159, 160, 347, 220, 221, 163, 263, 235, 186,
	216, -108, 126, 242, 123, 221, 128, 124, 124, 125,
	126, 242, 123, 124, -55, -130, 58, -123, 126, 124,
	109, 190, 229, 116, 218, 226, 125, 33, 227, 157,
	-139, 124, -110, 217, 220, 221, 163, 58, 231, 230,
	222, -130, 167, -135, -135, 219, 219, -55, -55, -55,
	-135, -2, -92, 17, 16, -5, -3, -194, 6, 20,
	21, -33, 41, 42, -28, -39, 100, -40, -130, -61,
	75, -66, 29, 58, -123, 23, -65, -62, -81, -79,
	-80, 109, 110, 111, 98, 99, 106, 76, 112, -70,
	-68, -69, -71, 60, 59, 68, 61, 62, 63, 64,
	69, 70, 71, -124, -77, -194, 45, 46, 251, 252,
	253, 254, 259, 255, 78, 35, 241, 249, 248, 247,
	245, 246, 243, 244, 257, 258, 129, 242, 123, 104,
	250, -108, -108, 11, -49, -50, -55, -57, -130, -100,
	-138, 167, -104, 231, 230, -125, -102, -124, -122, 229,
	190, 228, 121, 267, 74, 22, 24, 212, 77, 109,
	16, 78, 108, 251, 116, 49, 268, 243, 244, 241,
	253, 254, 242, 218, 29, 10, 270, 25, 145, 21,
	34, 102, 118, 81, 82, 148, 23, 146, 71, 273,
	19, 52, 11, 13, 274, 275, 14, 129, 128, 93,
	125, 47, 8, 112, 26, 90, 43, 276, 28, 277,
	278, 279, 280, 45, 91, 17, 245, 246, 31, 281,
	259, 152, 104, 50, 37, 75, 282, 283, 69, 284,
	72, 53, 73, 15, 48, 285, 286, 287, 288, 92,
	119, 250, 46, 289, 123, 6, 256, 30, 144, 44,
	290, 124, 80, 257, 258, 127, 70, 5, 130, 32,
	9, 51, 54, 247, 248, 249, 35, 79, 12, 291,
	-169, 91, -162, 58, -55, 125, -55, 250, -117, 129,
	-117, -117, 124, -55, 58, 58, 116, 118, 121, 53,
	-18, -55, -116, 129, 58, -116, -116, -116, -55, 113,
	-55, 58, 30, -114, 91, 12, 242, 58, 157, 124,
	158, 126, -136, -194, -125, -136, -136, -136, 161, 162,
	-136, -113, -112, 224, 225, 219, 223, 12, 162, 219,
	160, -136, -135, -135, -195, 57, -93, 19, 31, -40,
	-130, -89, -90, -40, -88, -2, -27, 37, -31, 21,
	34, 66, 11, -127, 74, 73, 90, -126, 22, -124,
	60, 113, -40, -63, 93, 75, 91, 92, 77, 95,
	94, 105, 98, 99, 100, 101, 102, 103, 104, 96,
	97, 108, 83, 84, 85, 86, 87, 88, 89, -109,
	-194, -80, -194, 114, 115, -66, -66, -66, -66, -66,
	-66, -66, -66, -194, -2, -75, -40, -194, -194, -194,
	-194, -194, -194, -194, -194, -194, -84, -40, -194, -198,
	-72, -194, -198, -72, -198, -72, -198, -194, -198, -72,
	-198, -72, -198, -198, -72, -194, -194, -194, -194, -194,
	-194, -194, -56, 26, -55, -42, -43, -44, -45, -58,
	-80, -194, -55, -55, -49, -196, 56, 11, 54, -196,
	56, 113, 56, -100, 167, -101, -105, 232, 234, 83,
	-129, -124, 60, 29, 30, 57, 56, -55, -141, -144,
	-146, -145, -147, -142, -143, 187, 188, 109, 191, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 30,
	147, 183, 184, 185, 186, 203, 204, 205, 206, 207,
	208, 209, 210, 170, 189, 261, 171, 172, 173, 174,
	175, 176, 178, 179, 180, 181, 182, 58, -136, 126,
	58, 75, 58, -55, -55, -136, -136, -136, 159, 159,
	124, 124, 164, -55, 56, 127, -49, 23, 53, -55,
	58, 58, -131, -130, -122, -136, -114, 60, -40, -136,
	-136, -136, -55, -136, -136, -136, -136, 11, -111, 11,
	93, -40, -115, 91, 53, 9, 93, 56, 18, 113,
	56, -91, 24, 25, -92, -195, -33, -67, -124, 61,
	64, -32, 44, -55, -40, -40, -73, 69, 75, 70,
	71, -126, 100, -131, -125, -122, -66, -74, -77, -80,
	65, 93, 91, 92, 77, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-137, 58, 60, 58, -65, -65, -124, -38, 21, 34,
	-37, -39, -195, 56, -195, -2, -37, -37, -40, -40,
	-81, 60, -37, -81, 60, -37, -37, -31, -82, -83,
	79, -81, -124, -130, -195, -66, -124, -124, -37, -38,
	-38, -37, -37, -96, 153, -55, 30, 56, -51, -53,
	-52, -54, 43, 47, 49, 44, 45, 46, 50, -134,
	22, -42, -194, -133, 153, -132, 22, -130, 60, -96,
	54, -42, -55, -42, -57, -130, 100, -104, -101, 56,
	233, 235, 236, 53, 72, -40, -153, 108, -171, -172,
	-173, -125, 60, 61, -162, -163, -164, -174, 139, -179,
	131, 133, 130, -165, 140, 125, 28, 57, -158, 69,
	75, -154, 215, -148, 55, -148, -148, -148, -148, -152,
	190, -152, -152, -152, 55, 55, -148, -148, -148, -156,
	55, -156, -156, -157, 55, -157, -128, 54, -55, -136,
	23, -136, -118, 121, 118, 119, -182, 117, 212, 190,
	67, 29, 15, 251, 153, 266, 58, 154, -55, -55,
	-55, -55, -55, 121, 118, -55, -55, -55, -136, -55,
	-114, -130, -130, 60, -55, 39, -40, -40, -131, -90,
	-93, -107, 19, 11, 35, 35, -37, 69, 70, 71,
	113, -194, -74, -66, -66, -66, -36, 148, 74, -195,
	-195, -37, -37, 56, -40, -195, -195, -195, 56, 54,
	22, 11, 11, -195, 11, 11, -195, -195, -37, -85,
	-83, 81, -40, -195, 113, -195, 56, 56, -195, -195,
	-195, -195, -195, -64, 30, 35, -2, -194, -194, -99,
	-103, -81, -43, -44, -44, -43, -44, 43, 43, 43,
	48, 43, 48, 43, -52, -130, -195, -59, 51, 128,
	52, -194, -132, -60, 12, -42, -60, -60, 113, -105,
	-106, 237, 234, 240, 58, 60, 56, -173, 83, 55,
	58, 28, -165, -165, -166, 58, -166, 28, -150, 29,
	69, -155, 216, 61, -152, -152, -153, 30, -153, -153,
	-153, -161, 60, -161, 61, 61, 53, -124, -136, -135,
	-188, 136, 132, 139, 140, 134, 58, 125, 28, 131,
	133, 153, 130, -188, -119, -120, 127, 22, 125, 28,
	153, -187, 54, 159, 212, 159, 127, -136, -111, 40,
	113, -55, -41, 11, 100, -125, -38, -36, 74, -66,
	-66, -195, -195, -39, -140, 109, 187, 147, 185, 181,
	201, 192, 214, 183, 215, -137, -140, -66, -66, -66,
	-66, 260, -88, 82, -40, 80, -125, -66, -66, -98,
	53, -99, -76, -78, -77, -194, -2, -94, -124, -97,
	-124, -60, 56, 83, -47, -46, 53, 54, -48, 53,
	-46, 43, 43, 125, 125, 125, -97, -88, -40, -60,
	234, 238, 239, -172, -173, -176, -175, -124, -179, -166,
	-166, 55, -151, 53, -66, 57, -153, -153, 58, 109,
	57, 56, 57, 56, 57, 56, -55, -135, -135, -55,
	-135, -124, -185, 263, -186, 58, -124, -124, -124, -55,
	-114, -60, -42, -195, -66, -195, -148, -148, -148, -157,
	-148, 175, -148, 175, -195, -195, 19, 19, 19, 19,
	-194, -35, 256, -40, 56, 56, 27, -98, 56, -195,
	-195, -195, 56, 113, -195, 56, -88, -103, -40, -40,
	55, -40, -194, -194, -194, -195, -92, 57, 56, -148,
	-95, -124, -159, 212, 9, -152, 60, -152, 61, 61,
	-136, 26, -184, -183, -125, 55, 54, -86, 13, -152,
	58, -66, -66, -66, -66, -66, -92, 60, -66, -66,
	28, -78, 35, -2, -194, -124, -124, -124, -92, -95,
	-95, -195, -95, -95, -133, -178, -177, 54, 135, 67,
	-175, 57, 56, -160, 131, 28, 130, -69, -153, -153,
	57, 57, -194, 56, 83, -95, -55, -87, 14, 16,
	-195, -195, -195, -195, -34, 93, 263, -195, -195, -195,
	9, -76, -2, 113, 57, -195, -195, -195, -59, -177,
	58, -167, 83, 60, 142, -124, -149, 67, 28, 28,
	-180, -181, 153, -183, -173, 57, -40, -75, -195, 261,
	50, 264, -99, -195, -124, 61, -55, 60, -195, 56,
	-124, -187, 40, 262, 265, 55, -181, 35, -185, 40,
	-95, 155, 263, 57, 156, 264, -190, -191, 53, -194,
	265, -191, 53, 10, 9, -66, 152, -189, 143, 138,
	141, 30, -189, -195, -195, 137, 29, 69,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 567, 0, 320, 320, 320, 320, 320,
	320, 0, 638, 621, 0, 0, 0, 0, -2, 307,
	308, 0, 310, 311, 940, 940, 0, 0, 0, 0,
	0, 940, 0, 36, 37, 938, 1, 3, 575, 0,
	0, 324, 327, 322, 0, 621, 621, 0, 0, 66,
	67, 0, 0, 0, 927, 0, 619, 619, 619, 639,
	640, 643, 644, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 0, 0, 0, 0, 0, 622, 0, 617, 0,
	617, 617, 617, 0, 259, 393, 647, 648, 927, 0,
	0, 0, 298, 0, 941, 271, 941, 941, 274, 941,
	0, 941, 0, 281, 0, 0, 287, 941, 304, 305,
	292, 306, 309, 315, 316, 940, 940, 312, 313, 314,
	319, 30, 579, 0, 0, 567, 32, 0, 320, 325,
	326, 330, 328, 329, 321, 0, 339, 343, 0, 403,
	0, 408, 410, -2, -2, 0, 445, 446, 447, 448,
	449, 0, 0, 0, 0, 0, 0, 0, 0, 473,
	474, 475, 476, 552, 553, 554, 555, 556, 557, 558,
	559, 412, 413, 549, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 0, 510, 510, 510, 510,
	510, 510, 510, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 47, 393, 51,
	0, 916, 603, -2, -2, 0, 0, 645, 646, -2,
	782, -2, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	0, 0, 85, 0, 83, 0, 941, 0, 0, 0,
	0, 0, 0, 941, 941, 941, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 258, 0,
	260, 941, 298, 263, 0, 0, 941, 941, 941, 0,
	941, 941, 270, 942, 943, 272, 273, 275, 941, 941,
	277, 0, 295, 293, 294, 289, 290, 0, 301, 284,
	285, 288, 317, 318, 31, 939, 25, 0, 0, 576,
	0, 568, 569, 572, 575, 30, 327, 0, 333, 331,
	332, 323, 0, 340, 0, 0, 0, 344, 0, 346,
	347, 0, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 431, 432, 433, 434, 435, 436, 409,
	0, 423, 0, 0, 0, 465, 466, 467, 468, 469,
	470, 471, 0, 335, 30, 0, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 541, 0, 494,
	502, 0, 495, 503, 496, 504, 497, 0, 498, 505,
	499, 506, 500, 501, 507, 0, 0, 0, 335, 335,
	0, 0, 49, 0, 392, 0, 350, 352, 353, 354,
	-2, 0, 376, -2, 0, 0, 0, 43, 44, 0,
	0, 0, 0, 52, 916, 54, 55, 0, 0, 0,
	163, 612, 613, 614, 610, 207, 0, 0, 151, 147,
	91, 92, 93, 140, 95, 140, 140, 140, 140, 160,
	160, 160, 160, 123, 124, 125, 126, 127, 0, 0,
	110, 140, 140, 140, 114, 130, 131, 132, 133, 134,
	135, 136, 137, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 142, 142, 142, 144, 144, 641, 69, 0,
	941, 0, 941, 81, 0, 221, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 618, 0, 941,
	256, 257, 394, 649, 650, 261, 262, 299, 300, 264,
	265, 266, 267, 268, 269, 276, 280, 0, 298, 0,
	0, 282, 283, 0, 0, 580, 0, 0, 0, 0,
	0, 571, 573, 574, 579, 33, 330, 0, 560, 0,
	0, 0, 334, 28, 404, 405, 407, 424, 0, 426,
	428, 345, 341, 0, 550, -2, 414, 415, 439, 440,
	441, 0, 0, 0, 0, 437, 419, 0, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	464, 525, 526, 0, 462, 463, 472, 0, 0, 0,
	336, 337, 442, 0, 598, 30, 0, 0, 0, 0,
	447, 552, 0, 447, 552, 0, 0, 0, 547, 544,
	0, 0, 549, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 391, 0, 0, 0, 0,
	0, 0, 381, 0, 0, 384, 0, 0, 0, 0,
	375, 0, 0, 396, 861, 377, 0, 379, 380, 401,
	0, 401, 46, 401, 48, 0, 395, 604, 53, 0,
	0, 58, 59, 605, 606, 607, 608, 0, 82, 208,
	210, 213, 214, 215, 86, 87, 88, 0, 0, 195,
	0, 0, 189, 189, 0, 187, 188, 84, 154, 152,
	0, 149, 148, 94, 0, 160, 160, 117, 118, 163,
	0, 163, 163, 163, 0, 0, 111, 112, 113, 105,
	0, 106, 107, 108, 0, 109, 0, 0, 941, 71,
	620, 72, 940, 0, 0, 633, 222, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 0, 73, 226,
	228, 227, 231, 0, 0, 0, 251, 941, 255, 295,
	279, 296, 297, 302, 286, 0, 577, 578, 0, 570,
	26, 0, 615, 616, 561, 562, 348, 425, 427, 429,
	0, 335, 416, 437, 420, 0, 417, 0, 0, 411,
	477, 0, 0, 0, 444, -2, 481, 482, 0, 0,
	0, 0, 0, 518, 0, 0, 519, 0, 567, 0,
	545, 0, 0, 493, 0, 512, 0, 0, 513, 514,
	515, 516, 517, 592, 0, 0, -2, 0, 0, 401,
	600, 0, 351, 370, 372, 0, 367, 382, 383, 385,
	0, 387, 0, 389, 390, 355, 357, 358, 0, 0,
	0, 0, 378, 567, 0, 401, 41, 42, 0, 56,
	57, 0, 0, 63, 164, 165, 0, 211, 0, 0,
	0, 182, 189, 189, 185, 190, 186, 0, 156, 0,
	153, 90, 150, 0, 163, 163, 119, 0, 120, 121,
	122, 0, 138, 0, 0, 0, 0, 642, 70, 216,
	940, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 940, 0, 940, 634, 635, 636, 637,
	0, 76, 0, 0, 0, 0, 0, 254, 298, 581,
	0, 27, 401, 0, 342, 551, 0, 418, 0, 438,
	421, 478, 479, 338, 0, 140, 140, 530, 140, 144,
	533, 140, 535, 140, 538, 0, 0, 0, 0, 0,
	0, 0, 542, 492, 548, 0, 550, 0, 0, 34,
	0, 592, 582, 594, 596, 0, 30, 0, 588, 0,
	362, 567, 0, 0, 364, 371, 0, 0, 365, 0,
	366, 386, 388, 0, 0, 0, 0, 575, 402, 40,
	60, 61, 62, 209, 212, 0, 191, 140, 194, 183,
	184, 0, 158, 0, 155, 141, 115, 116, 161, 162,
	160, 0, 160, 0, 145, 0, 941, 217, 218, 219,
	220, 0, 225, 0, 74, 75, 0, 0, 230, 252,
	278, 563, 349, 480, 422, 483, 527, 160, 531, 532,
	534, 536, 537, 539, 485, 484, 0, 0, 0, 0,
	0, 575, 0, 546, 0, 0, 0, 35, 0, 597,
	-2, 0, 0, 0, 50, 0, 575, 601, 602, 368,
	0, 373, 0, 0, 0, 376, 39, 174, 0, 193,
	0, 360, 166, 159, 0, 163, 139, 163, 0, 0,
	68, 0, 77, 78, 0, 0, 0, 565, 0, 528,
	529, 0, 0, 0, 0, 520, 0, 543, 0, 0,
	0, 595, 0, -2, 0, 590, 589, 363, 38, 0,
	0, 398, 0, 0, 396, 173, 175, 0, 180, 0,
	192, 0, 0, 171, 0, 168, 170, 157, 128, 129,
	143, 146, 0, 0, 0, 0, 232, 29, 0, 0,
	486, 488, 487, 489, 0, 0, 0, 491, 508, 509,
	0, 585, 30, 0, 369, 397, 399, 400, 359, 176,
	177, 0, 181, 179, 0, 361, 89, 0, 167, 169,
	0, 246, 0, 79, 80, 73, 566, 564, 490, 0,
	0, 0, 593, -2, 591, 178, 0, 172, 245, 0,
	0, 76, 521, 0, 524, 0, 247, 0, 229, 522,
	0, 0, 0, 196, 0, 0, 197, 198, 0, 0,
	523, 199, 0, 0, 0, 0, 0, 200, 202, 203,
	0, 0, 201, 248, 249, 204, 205, 206,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 348,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:324
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:329
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:330
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:334
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:357
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:363
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:381
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 29:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:415
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:487
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:491
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:496
		{
			yyVAL.partitions = nil
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:500
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:524
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:560
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
			yyVAL.str = SessionStr
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
			yyVAL.str = GlobalStr
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:587
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:613
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:624
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:646
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:666
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:670
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:689
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:695
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:922
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:927
		{
			yyVAL.sqlVal = nil
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:931
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:936
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:948
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:952
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:958
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1007
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1011
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1029
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1046
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKey
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1072
		{
			yyVAL.sqlVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1106
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1111
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1195
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1199
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1203
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1207
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1219
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1237
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = yyDollar[1].str
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1294
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1298
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1302
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1307
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1316
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1412
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1428
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1432
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1444
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1456
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1464
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1469
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1574
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1579
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1603
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = "full "
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1684
		{
			yyVAL.showFilter = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1692
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1698
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = SessionStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.str = GlobalStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &Commit{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Rollback{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &Describe{Name: yyDollar[2].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &Describe{Name: yyDollar[2].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &Describe{Name: yyDollar[2].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			setAllowComments(yylex, true)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1800
		{
			yyVAL.bytes2 = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = UnionStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.str = UnionAllStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = UnionDistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = SQLCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = DistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1858
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1882
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1890
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1895
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1963
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1973
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2014
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2016
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2044
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2051
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = JoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = StraightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = LeftJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = RightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = NaturalJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2134
		{
			yyVAL.indexHints = nil
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2138
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2146
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = BooleanModeStr
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = QueryExpansionStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2788
		{
			yyVAL.str = string("")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2802
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2808
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2827
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2831
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &NullVal{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2889
		{
			yyVAL.exprs = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2907
		{
			yyVAL.orderBy = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = AscScr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = DescScr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2945
		{
			yyVAL.limit = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2953
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2957
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.str = ForUpdateStr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2970
		{
			yyVAL.str = ShareModeStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2996
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3000
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3004
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3023
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.updateExprs = nil
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3032
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3078
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3094
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3104
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.bytes = []byte("charset")
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = &Default{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3145
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3148
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = IgnoreStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3193
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3200
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			decNesting(yylex)
		}
	case 940:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3561
		{
			skipToEnd(yylex)
		}
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3566
		{
			skipToEnd(yylex)
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3570
		{
			skipToEnd(yylex)
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

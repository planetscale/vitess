// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA = 57545
const VSCHEMA_TABLES = 57546
const VITESS_TARGET = 57547
const FULL = 57548
const PROCESSLIST = 57549
const COLUMNS = 57550
const FIELDS = 57551
const ENGINES = 57552
const PLUGINS = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 298,
	160, 298,
	-2, 288,
	-1, 268,
	112, 634,
	-2, 630,
	-1, 269,
	112, 635,
	-2, 631,
	-1, 332,
	82, 805,
	-2, 60,
	-1, 333,
	82, 762,
	-2, 61,
	-1, 338,
	82, 741,
	-2, 596,
	-1, 340,
	82, 783,
	-2, 598,
	-1, 596,
	1, 350,
	5, 350,
	12, 350,
	13, 350,
	14, 350,
	15, 350,
	17, 350,
	19, 350,
	30, 350,
	31, 350,
	42, 350,
	43, 350,
	44, 350,
	45, 350,
	46, 350,
	48, 350,
	49, 350,
	52, 350,
	53, 350,
	55, 350,
	56, 350,
	266, 350,
	-2, 368,
	-1, 599,
	53, 43,
	55, 43,
	-2, 45,
	-1, 737,
	112, 637,
	-2, 633,
	-1, 952,
	5, 30,
	-2, 434,
	-1, 981,
	5, 29,
	-2, 570,
	-1, 1234,
	5, 30,
	-2, 571,
	-1, 1289,
	5, 29,
	-2, 573,
	-1, 1370,
	5, 30,
	-2, 574,
}

const yyPrivate = 57344

const yyLast = 11975

var yyAct = [...]int{

	269, 1405, 1395, 1191, 1358, 1073, 984, 1254, 1268, 561,
	273, 1301, 1126, 1002, 1160, 1123, 884, 841, 818, 57,
	985, 918, 840, 850, 837, 560, 3, 1127, 1133, 772,
	299, 247, 81, 870, 1096, 1139, 208, 337, 762, 208,
	238, 702, 1008, 944, 1053, 820, 1044, 816, 300, 51,
	609, 805, 593, 1027, 790, 739, 769, 854, 592, 493,
	499, 798, 880, 436, 505, 608, 271, 208, 81, 331,
	926, 513, 208, 256, 208, 326, 328, 246, 56, 1398,
	575, 1382, 1393, 1368, 1390, 239, 240, 241, 242, 1192,
	1381, 245, 1367, 260, 1118, 1228, 441, 1312, 1155, 1156,
	51, 610, 468, 611, 61, 1154, 598, 466, 252, 1334,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 832, 833, 537, 831, 244, 1168, 1169, 1170,
	63, 64, 65, 66, 67, 1173, 1171, 903, 203, 199,
	200, 201, 205, 243, 1015, 484, 195, 1014, 197, 275,
	1016, 902, 1035, 485, 482, 483, 863, 1257, 871, 464,
	1274, 1211, 1209, 237, 477, 478, 1076, 1075, 470, 678,
	472, 677, 1392, 327, 1350, 334, 1389, 1359, 438, 907,
	440, 1072, 453, 799, 855, 1413, 1409, 454, 901, 443,
	197, 1302, 1077, 681, 670, 1149, 208, 1148, 1310, 208,
	469, 471, 1147, 439, 1304, 208, 446, 210, 857, 1003,
	1005, 208, 857, 198, 81, 703, 81, 1097, 81, 81,
	1339, 81, 1237, 81, 912, 1069, 1083, 911, 549, 550,
	962, 1071, 938, 81, 838, 711, 857, 1028, 898, 895,
	896, 196, 894, 530, 531, 532, 533, 534, 527, 450,
	537, 537, 517, 460, 1099, 527, 708, 512, 537, 202,
	510, 1348, 465, 81, 465, 437, 465, 465, 1320, 465,
	501, 465, 1303, 905, 908, 864, 512, 1177, 502, 1335,
	437, 465, 70, 1137, 489, 490, 1004, 1101, 467, 1105,
	871, 1100, 1407, 1098, 612, 1408, 704, 1406, 1103, 1311,
	1309, 51, 447, 1366, 856, 452, 1060, 1102, 856, 900,
	1172, 459, 448, 435, 449, 1120, 546, 461, 71, 548,
	1104, 1106, 511, 510, 208, 208, 208, 1070, 1178, 1068,
	81, 899, 856, 791, 672, 1058, 81, 853, 851, 512,
	852, 920, 791, 1033, 971, 849, 855, 559, 771, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 503, 574,
	576, 576, 576, 576, 576, 576, 576, 576, 584, 585,
	586, 587, 591, 597, 904, 473, 1353, 474, 475, 1414,
	476, 507, 479, 491, 456, 457, 458, 906, 1372, 746,
	714, 715, 488, 577, 578, 579, 580, 581, 582, 583,
	1264, 600, 1059, 744, 745, 743, 606, 1064, 1061, 1054,
	1062, 1057, 710, 1263, 1048, 1055, 1056, 1047, 1415, 919,
	547, 528, 529, 530, 531, 532, 533, 534, 527, 1063,
	590, 537, 599, 935, 936, 937, 208, 334, 511, 510,
	956, 81, 955, 957, 860, 442, 208, 208, 81, 709,
	861, 208, 54, 1036, 208, 512, 763, 208, 764, 511,
	510, 208, 742, 81, 81, 22, 511, 510, 81, 81,
	81, 81, 81, 81, 596, 1017, 512, 1018, 81, 81,
	1346, 1374, 194, 512, 1349, 511, 510, 208, 1285, 465,
	1261, 262, 1122, 511, 510, 1080, 465, 1045, 690, 1307,
	1391, 492, 512, 1377, 492, 81, 1307, 1362, 1375, 208,
	512, 465, 465, 1307, 492, 81, 465, 465, 465, 465,
	465, 465, 444, 445, 1194, 251, 465, 465, 1028, 682,
	1023, 688, 765, 716, 729, 731, 732, 1307, 1340, 1317,
	730, 687, 620, 1307, 1306, 1316, 298, 323, 324, 1252,
	1251, 740, 674, 675, 686, 737, 673, 679, 671, 81,
	327, 1239, 492, 685, 535, 536, 528, 529, 530, 531,
	532, 533, 534, 527, 1236, 492, 537, 718, 79, 781,
	785, 1184, 1183, 1180, 1181, 792, 733, 668, 735, 776,
	208, 1180, 1179, 705, 950, 492, 24, 51, 208, 208,
	669, 462, 208, 208, 802, 492, 81, 676, 774, 492,
	619, 618, 563, 455, 336, 725, 766, 767, 1313, 81,
	979, 1174, 691, 692, 980, 736, 58, 693, 694, 695,
	696, 697, 698, 1009, 1009, 858, 788, 699, 700, 825,
	1124, 602, 795, 1136, 54, 54, 817, 1136, 1086, 826,
	597, 966, 24, 289, 288, 291, 292, 293, 294, 603,
	774, 824, 290, 295, 964, 1232, 950, 872, 873, 874,
	741, 208, 81, 829, 81, 828, 802, 1136, 81, 81,
	1288, 208, 208, 845, 886, 208, 81, 807, 810, 811,
	812, 808, 950, 809, 813, 965, 800, 1140, 1141, 961,
	54, 604, 208, 602, 208, 208, 959, 801, 963, 827,
	24, 1319, 802, 334, 1182, 1019, 830, 950, 602, 605,
	465, 712, 465, 680, 253, 1383, 842, 882, 883, 1356,
	1270, 1074, 802, 1259, 465, 865, 1244, 885, 1165, 1022,
	496, 500, 888, 960, 1140, 1141, 923, 596, 881, 737,
	958, 596, 876, 875, 1400, 1396, 724, 518, 54, 1167,
	336, 1143, 336, 1124, 336, 336, 1049, 336, 684, 336,
	996, 486, 54, 927, 740, 997, 928, 889, 994, 336,
	1146, 1145, 993, 995, 992, 939, 1387, 913, 914, 257,
	258, 915, 562, 998, 1380, 811, 812, 1082, 506, 940,
	1385, 573, 933, 208, 208, 208, 208, 208, 917, 515,
	932, 494, 986, 504, 1040, 208, 617, 463, 208, 736,
	1032, 1355, 208, 495, 981, 1354, 208, 1286, 1030, 1024,
	1230, 890, 1266, 892, 891, 683, 815, 254, 255, 506,
	248, 81, 931, 776, 970, 916, 1324, 982, 983, 249,
	930, 597, 597, 597, 597, 597, 988, 989, 1020, 991,
	58, 987, 1323, 1272, 990, 999, 817, 1007, 1006, 1011,
	1009, 487, 701, 1010, 597, 508, 336, 1402, 1401, 1402,
	1336, 1012, 614, 1258, 707, 60, 717, 62, 601, 81,
	81, 55, 1, 741, 1394, 1039, 1193, 1041, 1042, 1043,
	1037, 1038, 1267, 897, 866, 867, 868, 869, 1029, 1357,
	1025, 1026, 1300, 777, 778, 1159, 81, 848, 839, 787,
	877, 878, 879, 1046, 69, 807, 810, 811, 812, 808,
	208, 809, 813, 794, 1052, 796, 797, 434, 465, 81,
	1065, 68, 1347, 847, 773, 775, 846, 1308, 842, 1256,
	859, 1034, 596, 596, 596, 596, 596, 862, 1166, 1079,
	793, 1352, 1031, 625, 465, 623, 624, 596, 622, 627,
	626, 621, 221, 329, 814, 596, 613, 887, 509, 706,
	1095, 72, 1067, 81, 81, 1090, 1125, 336, 1119, 1066,
	986, 893, 1108, 480, 336, 1107, 1089, 481, 223, 545,
	737, 929, 726, 727, 1013, 335, 1131, 81, 1130, 336,
	336, 1128, 266, 713, 336, 336, 336, 336, 336, 336,
	81, 498, 81, 81, 336, 336, 1144, 1135, 1151, 1129,
	1322, 51, 1271, 969, 572, 1150, 1084, 789, 274, 1158,
	728, 287, 1157, 284, 286, 285, 1088, 1162, 719, 1051,
	208, 720, 978, 1153, 519, 562, 272, 264, 779, 780,
	595, 515, 1175, 1176, 336, 588, 806, 208, 804, 803,
	1113, 1142, 934, 81, 1138, 1078, 81, 81, 208, 1163,
	1164, 594, 1085, 1227, 81, 1333, 723, 208, 26, 59,
	259, 19, 18, 17, 1186, 20, 16, 15, 14, 451,
	30, 1198, 21, 13, 836, 768, 1187, 12, 1189, 11,
	10, 9, 8, 7, 6, 783, 783, 5, 1207, 949,
	4, 783, 250, 23, 2, 0, 0, 842, 1199, 842,
	0, 0, 0, 0, 1200, 597, 0, 968, 0, 0,
	0, 1231, 0, 0, 0, 0, 0, 986, 0, 947,
	0, 0, 336, 948, 0, 1240, 1185, 1241, 81, 0,
	952, 953, 954, 0, 0, 336, 81, 1226, 0, 0,
	0, 967, 0, 1188, 0, 1020, 973, 0, 974, 975,
	976, 977, 0, 1250, 1197, 0, 81, 0, 0, 0,
	0, 1088, 0, 81, 0, 0, 1246, 1247, 1248, 0,
	1001, 924, 925, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 1260, 0, 1262, 0, 0, 336, 0,
	336, 0, 0, 0, 909, 910, 0, 0, 0, 0,
	0, 0, 336, 0, 465, 0, 596, 81, 81, 1273,
	81, 0, 0, 0, 0, 81, 0, 81, 81, 81,
	208, 0, 1295, 81, 1296, 1297, 1298, 0, 336, 0,
	1287, 1289, 0, 1128, 0, 842, 951, 1305, 1299, 0,
	0, 81, 1294, 0, 0, 0, 0, 0, 1321, 0,
	0, 1129, 0, 972, 1290, 1314, 0, 1315, 0, 551,
	552, 553, 554, 555, 556, 557, 558, 0, 0, 0,
	1269, 1337, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 1345, 1344, 0, 1318, 1338, 0, 0, 1128,
	81, 81, 0, 0, 0, 0, 0, 0, 1360, 0,
	0, 0, 0, 1094, 1364, 0, 0, 1129, 1361, 51,
	81, 0, 0, 1369, 0, 1265, 0, 986, 783, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 1379, 0,
	0, 0, 0, 1204, 1205, 0, 1206, 0, 0, 1208,
	0, 1210, 1384, 1386, 81, 0, 0, 336, 0, 0,
	0, 1388, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 1269, 842, 537,
	0, 0, 0, 0, 0, 1050, 336, 1253, 497, 0,
	0, 1397, 0, 0, 0, 0, 24, 25, 52, 27,
	28, 0, 0, 0, 0, 0, 0, 1373, 0, 0,
	0, 0, 336, 1121, 0, 43, 0, 0, 945, 0,
	29, 48, 49, 1201, 206, 0, 0, 236, 0, 0,
	1203, 0, 0, 0, 0, 336, 0, 0, 0, 0,
	38, 1212, 1213, 1214, 54, 1217, 0, 0, 1220, 0,
	1223, 1152, 263, 0, 0, 206, 0, 0, 0, 336,
	206, 0, 206, 1233, 1234, 1235, 1225, 1238, 0, 0,
	0, 0, 0, 0, 0, 0, 783, 0, 0, 1132,
	1134, 0, 738, 0, 1249, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	0, 0, 0, 1134, 0, 31, 32, 34, 33, 36,
	0, 50, 0, 0, 0, 0, 336, 0, 336, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 44, 45, 0, 0, 46, 47, 35,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 39, 40, 537, 41, 42, 0, 0, 0,
	0, 1284, 0, 0, 1229, 0, 0, 0, 0, 1190,
	0, 562, 1195, 1196, 218, 0, 0, 0, 0, 1242,
	336, 0, 1243, 0, 206, 1245, 0, 206, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 232, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 1342, 1343, 783, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 0, 0, 336, 0, 214, 0, 0, 0,
	0, 0, 1255, 0, 222, 217, 0, 1365, 0, 0,
	0, 0, 1370, 0, 0, 0, 0, 1224, 492, 0,
	0, 0, 336, 0, 0, 0, 0, 0, 0, 336,
	0, 1376, 0, 0, 0, 0, 220, 0, 0, 224,
	0, 0, 231, 0, 0, 0, 0, 941, 942, 943,
	0, 0, 206, 206, 206, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 212, 537,
	0, 0, 0, 1291, 1292, 0, 1293, 1411, 1412, 1221,
	492, 1255, 0, 1255, 1255, 1255, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 225, 215, 0, 226, 227,
	228, 0, 230, 229, 235, 1363, 562, 1255, 216, 219,
	0, 213, 234, 233, 0, 0, 0, 526, 525, 535,
	536, 528, 529, 530, 531, 532, 533, 534, 527, 0,
	0, 537, 526, 525, 535, 536, 528, 529, 530, 531,
	532, 533, 534, 527, 1351, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 336, 0, 1218,
	492, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 783, 206, 206, 1371, 0, 0, 206,
	0, 0, 206, 1215, 492, 206, 0, 0, 0, 689,
	0, 0, 0, 0, 0, 642, 1378, 526, 525, 535,
	536, 528, 529, 530, 531, 532, 533, 534, 527, 0,
	0, 537, 0, 0, 0, 206, 0, 0, 0, 0,
	1255, 526, 525, 535, 536, 528, 529, 530, 531, 532,
	533, 534, 527, 0, 0, 537, 0, 206, 492, 0,
	0, 0, 0, 0, 0, 0, 689, 0, 1092, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 1110, 1111, 1112, 0, 1114, 1115, 1116, 1117,
	0, 0, 0, 630, 0, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 263, 537,
	0, 0, 0, 263, 263, 0, 0, 784, 784, 263,
	1222, 0, 0, 784, 0, 0, 0, 0, 0, 0,
	643, 0, 0, 263, 263, 263, 263, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 206, 822, 0, 0,
	206, 206, 656, 657, 658, 659, 660, 661, 662, 0,
	663, 664, 665, 666, 667, 644, 645, 646, 647, 628,
	629, 0, 0, 631, 0, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 648, 649, 650, 651, 652,
	653, 654, 655, 0, 526, 525, 535, 536, 528, 529,
	530, 531, 532, 533, 534, 527, 0, 0, 537, 0,
	0, 0, 0, 0, 1202, 1091, 0, 1219, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	206, 0, 1216, 206, 0, 526, 525, 535, 536, 528,
	529, 530, 531, 532, 533, 534, 527, 0, 0, 537,
	206, 0, 921, 922, 0, 0, 0, 521, 0, 524,
	689, 0, 0, 0, 0, 538, 539, 540, 541, 542,
	543, 544, 263, 522, 523, 520, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 0, 0,
	537, 526, 525, 535, 536, 528, 529, 530, 531, 532,
	533, 534, 527, 0, 0, 537, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 0, 263,
	537, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 0, 0, 537, 0, 0, 263, 1275, 1276,
	0, 1277, 1278, 0, 1279, 1280, 0, 1281, 1282, 1283,
	784, 206, 206, 206, 206, 206, 946, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 206, 0, 0, 0,
	822, 0, 0, 0, 206, 0, 526, 525, 535, 536,
	528, 529, 530, 531, 532, 533, 534, 527, 0, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 784, 138,
	0, 0, 0, 0, 270, 0, 0, 0, 102, 0,
	267, 0, 0, 0, 119, 310, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 834, 0, 54, 0, 0, 268, 289,
	288, 291, 292, 293, 294, 0, 0, 95, 290, 295,
	296, 297, 835, 0, 0, 265, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 321, 206, 281, 0, 0, 276,
	277, 278, 283, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 108, 0, 0, 206, 209, 0, 0, 319,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 784, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 311, 320, 317, 318, 315, 316, 314,
	313, 312, 322, 303, 304, 305, 306, 308, 0, 307,
	82, 0, 120, 190, 147, 105, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 422, 413, 0, 384, 425, 362, 376, 433,
	377, 378, 406, 348, 392, 138, 374, 0, 365, 343,
	371, 344, 363, 386, 102, 389, 361, 415, 395, 424,
	119, 431, 121, 400, 0, 158, 130, 0, 0, 388,
	417, 390, 411, 383, 407, 353, 399, 426, 375, 404,
	427, 0, 0, 0, 80, 0, 843, 844, 0, 0,
	0, 0, 0, 95, 0, 402, 421, 373, 403, 405,
	342, 401, 0, 346, 349, 432, 419, 368, 369, 1021,
	0, 0, 0, 0, 0, 784, 387, 391, 408, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 206,
	398, 0, 0, 0, 350, 347, 0, 0, 385, 0,
	0, 0, 352, 0, 367, 409, 0, 341, 108, 412,
	418, 382, 209, 420, 380, 379, 423, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 416,
	364, 372, 98, 370, 152, 140, 174, 397, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 345, 0, 159, 176,
	193, 93, 360, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 356,
	359, 354, 355, 393, 394, 428, 429, 430, 410, 351,
	0, 357, 358, 0, 414, 396, 82, 0, 120, 190,
	147, 105, 177, 422, 413, 0, 384, 425, 362, 376,
	433, 377, 378, 406, 348, 392, 138, 374, 0, 365,
	343, 371, 344, 363, 386, 102, 389, 361, 415, 395,
	424, 119, 431, 121, 400, 0, 158, 130, 0, 0,
	388, 417, 390, 411, 383, 407, 353, 399, 426, 375,
	404, 427, 0, 0, 0, 80, 0, 843, 844, 0,
	0, 0, 0, 0, 95, 0, 402, 421, 373, 403,
	405, 342, 401, 0, 346, 349, 432, 419, 368, 369,
	0, 0, 0, 0, 0, 0, 0, 387, 391, 408,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 398, 0, 0, 0, 350, 347, 0, 0, 385,
	0, 0, 0, 352, 0, 367, 409, 0, 341, 108,
	412, 418, 382, 209, 420, 380, 379, 423, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	416, 364, 372, 98, 370, 152, 140, 174, 397, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 345, 0, 159,
	176, 193, 93, 360, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	356, 359, 354, 355, 393, 394, 428, 429, 430, 410,
	351, 0, 357, 358, 0, 414, 396, 82, 0, 120,
	190, 147, 105, 177, 422, 413, 0, 384, 425, 362,
	376, 433, 377, 378, 406, 348, 392, 138, 374, 0,
	365, 343, 371, 344, 363, 386, 102, 389, 361, 415,
	395, 424, 119, 431, 121, 400, 0, 158, 130, 0,
	0, 388, 417, 390, 411, 383, 407, 353, 399, 426,
	375, 404, 427, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 402, 421, 373,
	403, 405, 342, 401, 0, 346, 349, 432, 419, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 387, 391,
	408, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 0, 398, 0, 0, 0, 350, 347, 0, 0,
	385, 0, 0, 0, 352, 0, 367, 409, 0, 341,
	108, 412, 418, 382, 209, 420, 380, 379, 423, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 416, 364, 372, 98, 370, 152, 140, 174, 397,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 345, 0,
	159, 176, 193, 93, 360, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 356, 359, 354, 355, 393, 394, 428, 429, 430,
	410, 351, 0, 357, 358, 0, 414, 396, 82, 0,
	120, 190, 147, 105, 177, 422, 413, 0, 384, 425,
	362, 376, 433, 377, 378, 406, 348, 392, 138, 374,
	0, 365, 343, 371, 344, 363, 386, 102, 389, 361,
	415, 395, 424, 119, 431, 121, 400, 0, 158, 130,
	0, 0, 388, 417, 390, 411, 383, 407, 353, 399,
	426, 375, 404, 427, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 402, 421,
	373, 403, 405, 342, 401, 0, 346, 349, 432, 419,
	368, 369, 0, 0, 0, 0, 0, 0, 0, 387,
	391, 408, 381, 0, 0, 0, 0, 0, 0, 1087,
	0, 366, 0, 398, 0, 0, 0, 350, 347, 0,
	0, 385, 0, 0, 0, 352, 0, 367, 409, 0,
	341, 108, 412, 418, 382, 209, 420, 380, 379, 423,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 416, 364, 372, 98, 370, 152, 140, 174,
	397, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 345,
	0, 159, 176, 193, 93, 360, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 356, 359, 354, 355, 393, 394, 428, 429,
	430, 410, 351, 0, 357, 358, 0, 414, 396, 82,
	0, 120, 190, 147, 105, 177, 422, 413, 0, 384,
	425, 362, 376, 433, 377, 378, 406, 348, 392, 138,
	374, 0, 365, 343, 371, 344, 363, 386, 102, 389,
	361, 415, 395, 424, 119, 431, 121, 400, 0, 158,
	130, 0, 0, 388, 417, 390, 411, 383, 407, 353,
	399, 426, 375, 404, 427, 0, 0, 0, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 402,
	421, 373, 403, 405, 342, 401, 0, 346, 349, 432,
	419, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	387, 391, 408, 381, 0, 0, 0, 0, 0, 0,
	734, 0, 366, 0, 398, 0, 0, 0, 350, 347,
	0, 0, 385, 0, 0, 0, 352, 0, 367, 409,
	0, 341, 108, 412, 418, 382, 209, 420, 380, 379,
	423, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 416, 364, 372, 98, 370, 152, 140,
	174, 397, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	345, 0, 159, 176, 193, 93, 360, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 356, 359, 354, 355, 393, 394, 428,
	429, 430, 410, 351, 0, 357, 358, 0, 414, 396,
	82, 0, 120, 190, 147, 105, 177, 422, 413, 0,
	384, 425, 362, 376, 433, 377, 378, 406, 348, 392,
	138, 374, 0, 365, 343, 371, 344, 363, 386, 102,
	389, 361, 415, 395, 424, 119, 431, 121, 400, 0,
	158, 130, 0, 0, 388, 417, 390, 411, 383, 407,
	353, 399, 426, 375, 404, 427, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	402, 421, 373, 403, 405, 342, 401, 0, 346, 349,
	432, 419, 368, 369, 0, 0, 0, 0, 0, 0,
	0, 387, 391, 408, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 366, 0, 398, 0, 0, 0, 350,
	347, 0, 0, 385, 0, 0, 0, 352, 0, 367,
	409, 0, 341, 108, 412, 418, 382, 209, 420, 380,
	379, 423, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 416, 364, 372, 98, 370, 152,
	140, 174, 397, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 345, 0, 159, 176, 193, 93, 360, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 356, 359, 354, 355, 393, 394,
	428, 429, 430, 410, 351, 0, 357, 358, 0, 414,
	396, 82, 0, 120, 190, 147, 105, 177, 422, 413,
	0, 384, 425, 362, 376, 433, 377, 378, 406, 348,
	392, 138, 374, 0, 365, 343, 371, 344, 363, 386,
	102, 389, 361, 415, 395, 424, 119, 431, 121, 400,
	0, 158, 130, 0, 0, 388, 417, 390, 411, 383,
	407, 353, 399, 426, 375, 404, 427, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 402, 421, 373, 403, 405, 342, 401, 0, 346,
	349, 432, 419, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 387, 391, 408, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 0, 398, 0, 0, 0,
	350, 347, 0, 0, 385, 0, 0, 0, 352, 0,
	367, 409, 0, 341, 108, 412, 418, 382, 209, 420,
	380, 379, 423, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 416, 364, 372, 98, 370,
	152, 140, 174, 397, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 345, 0, 159, 176, 193, 93, 360, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 356, 359, 354, 355, 393,
	394, 428, 429, 430, 410, 351, 0, 357, 358, 0,
	414, 396, 82, 0, 120, 190, 147, 105, 177, 422,
	413, 0, 384, 425, 362, 376, 433, 377, 378, 406,
	348, 392, 138, 374, 0, 365, 343, 371, 344, 363,
	386, 102, 389, 361, 415, 395, 424, 119, 431, 121,
	400, 0, 158, 130, 0, 0, 388, 417, 390, 411,
	383, 407, 353, 399, 426, 375, 404, 427, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 402, 421, 373, 403, 405, 342, 401, 0,
	346, 349, 432, 419, 368, 369, 0, 0, 0, 0,
	0, 0, 0, 387, 391, 408, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 366, 0, 398, 0, 0,
	0, 350, 347, 0, 0, 385, 0, 0, 0, 352,
	0, 367, 409, 0, 341, 108, 412, 418, 382, 209,
	420, 380, 379, 423, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 416, 364, 372, 98,
	370, 152, 140, 174, 397, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 339, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 345, 0, 159, 176, 193, 93, 360,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 340, 338, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 356, 359, 354, 355,
	393, 394, 428, 429, 430, 410, 351, 0, 357, 358,
	0, 414, 396, 82, 0, 120, 190, 147, 105, 177,
	422, 413, 0, 384, 425, 362, 376, 433, 377, 378,
	406, 348, 392, 138, 374, 0, 365, 343, 371, 344,
	363, 386, 102, 389, 361, 415, 395, 424, 119, 431,
	121, 400, 0, 158, 130, 0, 0, 388, 417, 390,
	411, 383, 407, 353, 399, 426, 375, 404, 427, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 402, 421, 373, 403, 405, 342, 401,
	0, 346, 349, 432, 419, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 387, 391, 408, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 0, 398, 0,
	0, 0, 350, 347, 0, 0, 385, 0, 0, 0,
	352, 0, 367, 409, 0, 341, 108, 412, 418, 382,
	209, 420, 380, 379, 423, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 416, 364, 372,
	98, 370, 152, 140, 174, 397, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 345, 0, 159, 176, 193, 93,
	360, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 356, 359, 354,
	355, 393, 394, 428, 429, 430, 410, 351, 0, 357,
	358, 0, 414, 396, 82, 0, 120, 190, 147, 105,
	177, 422, 413, 0, 384, 425, 362, 376, 433, 377,
	378, 406, 348, 392, 138, 374, 0, 365, 343, 371,
	344, 363, 386, 102, 389, 361, 415, 395, 424, 119,
	431, 121, 400, 0, 158, 130, 0, 0, 388, 417,
	390, 411, 383, 407, 353, 399, 426, 375, 404, 427,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 402, 421, 373, 403, 405, 342,
	401, 0, 346, 349, 432, 419, 368, 369, 0, 0,
	0, 0, 0, 0, 0, 387, 391, 408, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 0, 398,
	0, 0, 0, 350, 347, 0, 0, 385, 0, 0,
	0, 352, 0, 367, 409, 0, 341, 108, 412, 418,
	382, 209, 420, 380, 379, 423, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 416, 364,
	372, 98, 370, 152, 140, 174, 397, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	607, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 339, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 345, 0, 159, 176, 193,
	93, 360, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 340, 338, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 356, 359,
	354, 355, 393, 394, 428, 429, 430, 410, 351, 0,
	357, 358, 0, 414, 396, 82, 0, 120, 190, 147,
	105, 177, 422, 413, 0, 384, 425, 362, 376, 433,
	377, 378, 406, 348, 392, 138, 374, 0, 365, 343,
	371, 344, 363, 386, 102, 389, 361, 415, 395, 424,
	119, 431, 121, 400, 0, 158, 130, 0, 0, 388,
	417, 390, 411, 383, 407, 353, 399, 426, 375, 404,
	427, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 402, 421, 373, 403, 405,
	342, 401, 0, 346, 349, 432, 419, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 387, 391, 408, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 0,
	398, 0, 0, 0, 350, 347, 0, 0, 385, 0,
	0, 0, 352, 0, 367, 409, 0, 341, 108, 412,
	418, 382, 209, 420, 380, 379, 423, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 416,
	364, 372, 98, 370, 152, 140, 174, 397, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 330, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 339, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 345, 0, 159, 176,
	193, 93, 360, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 340, 338, 333, 332,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 356,
	359, 354, 355, 393, 394, 428, 429, 430, 410, 351,
	0, 357, 358, 0, 414, 396, 82, 0, 120, 190,
	147, 105, 177, 138, 0, 0, 770, 0, 270, 0,
	0, 0, 102, 0, 267, 0, 0, 0, 119, 310,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 301,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 268, 289, 288, 291, 292, 293, 294, 0,
	0, 95, 290, 295, 296, 297, 0, 0, 0, 265,
	282, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 261, 0, 0, 0, 321, 0,
	281, 0, 0, 276, 277, 278, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 319, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 311, 320, 317,
	318, 315, 316, 314, 313, 312, 322, 303, 304, 305,
	306, 308, 0, 307, 82, 0, 120, 190, 147, 105,
	177, 138, 0, 0, 0, 0, 270, 0, 0, 0,
	102, 0, 267, 0, 0, 0, 119, 310, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 492,
	268, 289, 288, 291, 292, 293, 294, 0, 0, 95,
	290, 295, 296, 297, 0, 0, 0, 265, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 321, 0, 281, 0,
	0, 276, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 319, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 311, 320, 317, 318, 315,
	316, 314, 313, 312, 322, 303, 304, 305, 306, 308,
	0, 307, 82, 0, 120, 190, 147, 105, 177, 138,
	0, 0, 0, 0, 270, 0, 0, 0, 102, 0,
	267, 0, 0, 0, 119, 310, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 268, 289,
	288, 291, 292, 293, 294, 0, 0, 95, 290, 295,
	296, 297, 0, 0, 0, 265, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	261, 0, 0, 0, 321, 0, 281, 0, 0, 276,
	277, 278, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 319,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 311, 320, 317, 318, 315, 316, 314,
	313, 312, 322, 303, 304, 305, 306, 308, 24, 307,
	82, 0, 120, 190, 147, 105, 177, 0, 0, 0,
	138, 0, 0, 0, 0, 270, 0, 0, 0, 102,
	0, 267, 0, 0, 0, 119, 310, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 301, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 268,
	289, 288, 291, 292, 293, 294, 0, 0, 95, 290,
	295, 296, 297, 0, 0, 0, 265, 282, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 321, 0, 281, 0, 0,
	276, 277, 278, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	319, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 311, 320, 317, 318, 315, 316,
	314, 313, 312, 322, 303, 304, 305, 306, 308, 0,
	307, 82, 0, 120, 190, 147, 105, 177, 138, 0,
	0, 0, 0, 270, 0, 0, 0, 102, 0, 267,
	0, 0, 0, 119, 310, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 301, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 268, 289, 288,
	291, 292, 293, 294, 0, 0, 95, 290, 295, 296,
	297, 0, 0, 0, 265, 282, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 321, 0, 281, 0, 0, 276, 277,
	278, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 319, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 311, 320, 317, 318, 315, 316, 314, 313,
	312, 322, 303, 304, 305, 306, 308, 138, 307, 82,
	0, 120, 190, 147, 105, 177, 102, 0, 0, 0,
	0, 0, 119, 310, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 301, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 268, 289, 288, 291,
	292, 293, 294, 0, 0, 95, 290, 295, 296, 297,
	0, 0, 0, 0, 282, 0, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 321, 0, 281, 0, 0, 276, 277, 278,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 319, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 1404,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 311, 320, 317, 318, 315, 316, 314, 313, 312,
	322, 303, 304, 305, 306, 308, 138, 307, 82, 0,
	120, 190, 147, 105, 177, 102, 0, 0, 0, 0,
	0, 119, 310, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 268, 289, 288, 291, 292,
	293, 294, 0, 0, 95, 290, 295, 296, 297, 0,
	0, 0, 0, 282, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 321, 0, 281, 0, 0, 276, 277, 278, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 319, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	311, 320, 317, 318, 315, 316, 314, 313, 312, 322,
	303, 304, 305, 306, 308, 138, 307, 82, 0, 120,
	190, 147, 105, 177, 102, 0, 0, 0, 0, 0,
	119, 0, 121, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 525, 535, 536, 528, 529, 530, 531, 532, 533,
	534, 527, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 209, 0, 0, 0, 0, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 0,
	0, 0, 98, 0, 152, 140, 174, 0, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 0, 0, 159, 176,
	193, 93, 0, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 514, 0, 0, 0, 82, 102, 120, 190,
	147, 105, 177, 119, 0, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 516,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 0, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 82,
	102, 120, 190, 147, 105, 177, 119, 0, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 76, 77, 0, 73, 0,
	0, 0, 78, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 821, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 823, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 82, 0, 120, 190, 147,
	105, 177, 102, 0, 0, 0, 0, 0, 119, 0,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 0, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 82, 0, 120, 190, 147, 105,
	177, 102, 0, 0, 0, 0, 0, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 821,
	0, 0, 0, 82, 102, 120, 190, 147, 105, 177,
	119, 0, 121, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 823, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 209, 0, 0, 0, 0, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 0,
	0, 0, 98, 0, 152, 140, 174, 0, 819, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 0, 0, 159, 176,
	193, 93, 0, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 82, 102, 120, 190,
	147, 105, 177, 119, 0, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	721, 0, 0, 722, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 0, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 82,
	0, 120, 190, 147, 105, 177, 102, 0, 616, 0,
	0, 0, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 615, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 82, 102,
	120, 190, 147, 105, 177, 119, 0, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	0, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 82, 102, 120, 190, 147, 105, 177, 119, 0,
	121, 0, 0, 158, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 823, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	209, 0, 0, 0, 0, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 0, 0, 0,
	98, 0, 152, 140, 174, 0, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 0, 0, 159, 176, 193, 93,
	0, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 82, 102, 120, 190, 147, 105,
	177, 119, 0, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 786, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 0, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	782, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	82, 102, 120, 190, 147, 105, 177, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 516, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 82, 0, 120, 190, 147, 105, 177,
	589, 102, 0, 0, 0, 0, 0, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 82, 102, 120, 190, 147, 105, 177,
	119, 0, 121, 0, 0, 158, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 209, 0, 0, 0, 0, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 0,
	0, 0, 98, 0, 152, 140, 174, 0, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 0, 0, 159, 176,
	193, 93, 0, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 82, 102, 120, 190,
	147, 105, 177, 119, 0, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 204, 0, 209, 0, 0, 0, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 82,
	102, 120, 190, 147, 105, 177, 119, 0, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 0, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 82, 102, 120, 190, 147,
	105, 177, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	120, 190, 147, 105, 177,
}
var yyPact = [...]int{

	1440, -1000, -188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 845, 880, -1000, -1000, -1000, -1000, -1000, -1000,
	228, 7723, 21, 90, 16, 11010, 84, 1591, 11476, -1000,
	-1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -73, -90,
	-1000, 704, -1000, -1000, -1000, -1000, -1000, 823, 833, 718,
	817, 749, -1000, 6041, 63, 63, 10777, 5297, -1000, -1000,
	223, 11476, 79, 11476, -155, 61, 61, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 83, 11476, 197, -1000, 11476, 59,
	556, 59, 59, 59, 11476, -1000, 141, -1000, -1000, -1000,
	11476, 544, 787, 3209, 45, 3209, -1000, 3209, 3209, -1000,
	3209, 5, 3209, -71, 719, 859, -1000, -1000, -1000, -1000,
	-1000, -1000, 3209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 445, 792, 6540, 6540,
	845, -1000, 704, -1000, -1000, -1000, 777, -1000, -1000, 316,
	864, -1000, 7490, 140, -1000, 6540, 2073, 591, -1000, -1000,
	591, -1000, -1000, 115, -1000, -1000, 7018, 7018, 7018, 7018,
	7018, 7018, 7018, 7018, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 591, -1000,
	6292, 591, 591, 591, 591, 591, 591, 591, 591, 6540,
	591, 591, 591, 591, 591, 591, 591, 591, 591, 591,
	591, 591, 591, 10544, 9372, 11476, 648, -1000, 664, 5036,
	-132, -1000, -1000, -1000, 212, 9139, -1000, -1000, -1000, 786,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 555, 11476, -1000, 1875, -1000, 530,
	3209, 69, 501, 260, 499, 11476, 11476, 3209, 14, 12,
	11476, 668, 67, 11476, 812, 716, 11476, 497, 484, -1000,
	4775, -1000, 3209, 3209, -1000, -1000, -1000, 3209, 3209, 3209,
	3209, 3209, 3209, -1000, -1000, -1000, -1000, 3209, 3209, -1000,
	861, 204, -1000, -1000, -1000, -1000, 11476, 6540, -1000, -1000,
	-1000, -1000, -1000, -1000, 875, 164, 394, 123, 666, -1000,
	366, 823, 445, 749, 8900, 713, -1000, -1000, 11476, -1000,
	6540, 6540, 466, -1000, 10304, -1000, -1000, 3731, 168, 7018,
	398, 313, 7018, 7018, 7018, 7018, 7018, 7018, 7018, 7018,
	7018, 7018, 7018, 7018, 7018, 7018, 7018, 399, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 475, -1000, 704, 595,
	595, 143, 143, 143, 143, 143, 143, 143, 7257, 5545,
	445, 553, 250, 6292, 6041, 6041, 6540, 6540, 10071, 9838,
	6041, 818, 255, 250, 11709, -1000, 445, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6041, 6041, 6041, 6041, 32, 11476,
	-1000, 677, 883, -1000, -1000, -1000, 814, 8434, 8667, 32,
	586, 9372, 11476, -1000, -1000, 4514, 664, -132, 661, -1000,
	-109, -114, 2401, 127, -1000, -1000, -1000, -1000, 2948, 208,
	579, 376, -56, -1000, -1000, -1000, 681, -1000, 681, 681,
	681, 681, -29, -29, -29, -29, -1000, -1000, -1000, -1000,
	-1000, 699, 698, -1000, 681, 681, 681, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 694, 694, 694, 683, 683, 689, -1000,
	11476, 3209, 811, 3209, -1000, 122, -1000, 11243, 11243, 107,
	11476, 11476, 663, -1000, 11476, 3209, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11476, 329, 11476, 11476, -1000, 250, -1000, 708, 6540,
	6540, 4253, 6540, -1000, -1000, -1000, 792, -1000, 818, 831,
	-1000, 776, 768, 6041, -1000, -1000, 168, 187, -1000, -1000,
	365, -1000, -1000, -1000, -1000, 120, 591, -1000, 1749, -1000,
	-1000, -1000, -1000, 398, 7018, 7018, 7018, 1322, 1749, 2173,
	469, 2117, 143, 144, 144, 151, 151, 151, 151, 151,
	324, 324, -1000, -1000, -1000, 445, -1000, -1000, -1000, 445,
	6041, 662, -1000, -1000, 6540, -1000, 445, 539, 539, 387,
	421, 695, 688, -1000, 118, 653, 640, 539, 6041, 264,
	-1000, 6540, 445, -1000, 539, 445, 539, 539, 590, 591,
	-1000, 11709, 9372, 9372, 9372, 9372, 9372, -1000, 742, 740,
	-1000, 736, 728, 751, 11476, -1000, 549, 8434, 159, 591,
	-1000, 9605, -1000, -1000, 858, 9372, 621, -1000, -1000, 661,
	-132, -91, -1000, -1000, -1000, -1000, 250, -1000, 418, 660,
	2687, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 685, 473,
	-1000, 801, 184, 180, 471, 800, -1000, -1000, -1000, 791,
	-1000, 275, -61, -1000, -1000, 393, -29, -29, -1000, -1000,
	127, 784, 127, 127, 127, 438, 438, -1000, -1000, -1000,
	-1000, 357, -1000, -1000, -1000, 354, -1000, 714, 11243, 3209,
	-1000, -1000, -1000, -1000, 278, 278, 203, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 30, 678,
	-1000, 10, 9, 66, -1000, 3209, -1000, 204, -1000, 436,
	6540, -1000, -1000, 758, 250, 250, 114, -1000, -1000, 11476,
	-1000, -1000, -1000, -1000, 637, -1000, -1000, -1000, 3470, 6041,
	-1000, 1322, 1749, 2032, -1000, 7018, 7018, -1000, -1000, 539,
	6041, 250, -1000, -1000, -1000, 109, 399, 109, 7018, 7018,
	7018, 7018, 4253, 7018, 7018, 7018, 7018, -165, 611, 234,
	-1000, 6540, 413, -1000, -1000, -1000, -1000, -1000, 711, 11709,
	591, -1000, 8195, 11243, 622, -1000, 201, 883, 692, 709,
	645, -1000, -1000, -1000, -1000, 739, -1000, 738, -1000, -1000,
	-1000, -1000, -1000, 78, 73, 71, 11243, -1000, 845, 6540,
	621, -1000, -1000, -1000, -130, -141, -1000, -1000, -1000, 2948,
	-1000, 2948, 11243, 46, -1000, 471, 471, -1000, -1000, -1000,
	684, 707, 68, -1000, -1000, -1000, 565, 127, 127, -1000,
	220, -1000, -1000, -1000, 536, -1000, 528, 659, 526, 11476,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11476, -1000, -1000, -1000,
	-1000, -1000, 11243, -173, 467, 11243, 11243, 11476, -1000, 329,
	-1000, 250, -1000, 3992, -1000, 858, 9372, -1000, -1000, 445,
	-1000, 7018, 1749, 1749, -1000, -1000, 445, 681, 681, -1000,
	681, 683, -1000, 681, -10, 681, -11, 445, 445, 1838,
	2103, 1814, 2088, -1000, 1734, 1991, 1672, 1497, 591, -162,
	-1000, 250, 6540, -1000, 803, 588, 610, -1000, -1000, 5793,
	445, 519, 110, 506, -1000, 845, 11709, 6540, -1000, -1000,
	6540, 682, -1000, 6540, -1000, -1000, -1000, 591, 591, 591,
	506, 823, 250, -1000, -1000, -1000, -1000, 2687, -1000, 494,
	-1000, 681, -1000, -1000, -1000, 11243, -52, 874, -1000, -1000,
	-1000, -1000, 679, -1000, -1000, -1000, -1000, -1000, -1000, -29,
	431, -29, 353, -1000, 340, 3209, -1000, -1000, -1000, -1000,
	806, -1000, 3992, -1000, -1000, 676, -1000, -1000, -1000, 850,
	657, -1000, 1749, -1000, -1000, 103, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7018, 7018, -1000, 7018, 7018,
	-1000, 7018, 7018, -1000, 7018, 7018, 7018, 445, 429, 250,
	799, -1000, 591, -1000, -1000, 646, 11243, 11243, -1000, 11243,
	823, -1000, 250, 250, 11243, 250, 11243, 11243, 11243, 7956,
	-1000, 138, 11243, -1000, 488, -1000, 170, -1000, -145, 562,
	127, -1000, 127, 489, 483, -1000, 591, 656, -1000, 186,
	11243, 848, 830, -1000, -1000, 1892, 1892, 1892, 1892, 1892,
	1892, 1892, 1892, 17, -1000, -1000, 871, -1000, 591, -1000,
	704, 108, -1000, -1000, -1000, 482, 458, 458, 458, 159,
	138, -1000, 423, 179, 425, -1000, 34, 11243, 310, 797,
	-1000, 793, 675, -1000, -1000, -1000, -1000, -1000, 26, 3992,
	2948, 451, -1000, 6540, 6540, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 445, 43, -180, 11709, 610, 445, 11243,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 328, -1000, -1000,
	11476, -1000, -1000, 422, -1000, -1000, 452, 448, -1000, 11243,
	-1000, -1000, 678, 250, 605, -1000, 755, -171, -183, 592,
	-1000, -1000, -1000, 671, -1000, -1000, -1000, 26, 766, -173,
	-1000, 747, -1000, 11243, -1000, 23, -1000, -178, 444, 18,
	-181, 703, 591, -185, 702, -1000, 868, 6779, -1000, -1000,
	870, 156, 156, 1892, 445, -1000, -1000, -1000, 50, 350,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1124, 25, 465, 1123, 1122, 1120, 1117, 1114, 1113,
	1112, 1111, 1110, 1109, 1107, 1103, 1102, 1100, 1099, 1098,
	1097, 1096, 1095, 1093, 1092, 1091, 104, 1090, 1089, 1088,
	64, 1086, 73, 1085, 1083, 43, 348, 56, 29, 491,
	1082, 47, 58, 52, 1081, 35, 1074, 1071, 75, 1069,
	51, 1068, 1066, 106, 1065, 1060, 13, 42, 1057, 1056,
	1054, 1052, 66, 1012, 1048, 1045, 1044, 1043, 1041, 1040,
	55, 9, 12, 30, 27, 1038, 149, 10, 1037, 54,
	1034, 1033, 1032, 1030, 19, 1021, 60, 1013, 31, 59,
	1006, 7, 61, 28, 15, 6, 76, 65, 1005, 20,
	69, 50, 1004, 1001, 482, 999, 998, 41, 997, 993,
	21, 182, 445, 991, 989, 982, 981, 37, 0, 546,
	107, 71, 978, 977, 976, 1438, 70, 45, 18, 974,
	40, 159, 38, 973, 972, 34, 971, 970, 969, 968,
	966, 965, 963, 275, 962, 961, 958, 33, 24, 957,
	951, 62, 16, 950, 949, 947, 46, 63, 946, 943,
	57, 53, 942, 941, 937, 924, 918, 22, 17, 917,
	14, 915, 11, 912, 23, 909, 4, 903, 8, 902,
	3, 896, 5, 44, 1, 894, 2, 892, 891, 48,
	383, 888, 887, 80,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 191, 191, 48, 48, 92, 92, 10, 10, 10,
	10, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	133, 133, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 181, 180, 180, 179, 179, 178, 17, 163, 165,
	165, 164, 164, 164, 164, 157, 136, 136, 136, 136,
	139, 139, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 142,
	142, 142, 156, 156, 143, 143, 151, 151, 152, 152,
	152, 149, 149, 150, 150, 153, 153, 153, 144, 144,
	144, 144, 144, 144, 144, 144, 146, 146, 146, 154,
	154, 147, 147, 147, 148, 148, 148, 155, 155, 155,
	155, 155, 145, 145, 158, 158, 173, 173, 172, 172,
	172, 162, 162, 169, 169, 169, 169, 169, 160, 160,
	161, 161, 171, 171, 170, 159, 159, 174, 174, 174,
	174, 185, 186, 184, 184, 184, 184, 184, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 177,
	175, 175, 176, 176, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 108, 108, 106, 106,
	109, 109, 107, 107, 107, 110, 110, 110, 134, 134,
	134, 21, 21, 23, 23, 24, 25, 22, 22, 22,
	22, 22, 22, 22, 16, 192, 26, 27, 27, 28,
	28, 28, 32, 32, 32, 30, 30, 31, 31, 37,
	37, 36, 36, 38, 38, 38, 38, 122, 122, 122,
	121, 121, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 55, 55, 91, 91, 93, 93, 44, 44,
	44, 44, 45, 45, 46, 46, 47, 47, 129, 129,
	128, 128, 128, 127, 127, 49, 49, 49, 51, 50,
	50, 50, 50, 52, 52, 54, 54, 53, 53, 56,
	56, 56, 56, 57, 57, 39, 39, 39, 39, 39,
	39, 39, 105, 105, 59, 59, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 69, 69, 69, 69,
	69, 69, 60, 60, 60, 60, 60, 60, 60, 35,
	35, 70, 70, 70, 76, 71, 71, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
	66, 193, 193, 68, 68, 68, 68, 33, 33, 33,
	33, 33, 132, 132, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 80, 80, 34,
	34, 78, 78, 79, 81, 81, 77, 77, 77, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	82, 82, 83, 83, 84, 84, 85, 85, 86, 87,
	87, 87, 88, 88, 88, 88, 89, 89, 89, 61,
	61, 61, 61, 61, 61, 90, 90, 90, 90, 94,
	94, 72, 72, 74, 74, 73, 75, 95, 95, 99,
	96, 96, 100, 100, 100, 100, 98, 98, 98, 124,
	124, 124, 103, 103, 111, 111, 112, 112, 104, 104,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	114, 114, 114, 115, 115, 116, 116, 116, 123, 123,
	119, 119, 120, 120, 125, 125, 126, 126, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 189, 190, 130, 131, 131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 4, 2, 0, 3, 5, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 7, 5, 12, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 3, 3, 2, 3,
	4, 3, 7, 5, 4, 2, 2, 4, 4, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -189, 8, 251, 54, -188, 266, -84, 15, -28,
	5, -26, -192, -26, -26, -26, -26, -26, -163, -165,
	54, 90, -116, 125, 72, 243, 122, 123, 129, -119,
	57, -118, 259, 135, 162, 173, 167, 194, 186, 136,
	184, 187, 230, 214, 225, 66, 165, 239, 145, 182,
	178, 176, 27, 227, 199, 264, 177, 226, 121, 138,
	133, 200, 204, 231, 171, 172, 233, 198, 134, 33,
	261, 35, 153, 234, 202, 197, 193, 196, 170, 192,
	39, 206, 205, 207, 229, 189, 139, 179, 18, 237,
	148, 151, 228, 201, 203, 130, 155, 263, 235, 175,
	140, 152, 147, 238, 141, 166, 232, 241, 38, 211,
	169, 132, 163, 159, 216, 190, 154, 180, 181, 195,
	168, 191, 164, 156, 149, 240, 212, 265, 188, 185,
	160, 157, 158, 217, 218, 219, 220, 221, 222, 161,
	262, 236, 183, 213, -104, 125, 220, 127, 123, 123,
	124, 125, 243, 122, 123, -53, -125, 57, -118, 125,
	123, 108, 187, 230, 115, 215, 227, 124, 33, 228,
	155, -134, 123, -106, 158, 214, 217, 218, 219, 222,
	221, 161, 57, 232, 231, 223, -125, 164, -130, -130,
	-130, -130, -130, 216, 216, -130, -2, -88, 17, 16,
	-5, -3, -189, 6, 20, 21, -32, 40, 41, -27,
	-38, 99, -39, -125, -58, 74, -63, 29, 57, -118,
	23, -62, -59, -77, -75, -76, 108, 109, 110, 97,
	98, 105, 75, 111, -67, -65, -66, -68, 59, 58,
	67, 60, 61, 62, 63, 68, 69, 70, -119, -73,
	-189, 44, 45, 252, 253, 254, 255, 258, 256, 77,
	34, 242, 250, 249, 248, 246, 247, 244, 245, 128,
	243, 103, 251, -104, -104, 11, -48, -53, -96, -133,
	164, -100, 232, 231, -120, -98, -119, -117, 230, 187,
	229, 120, 73, 22, 24, 209, 76, 108, 16, 77,
	107, 252, 115, 48, 244, 245, 242, 254, 255, 243,
	215, 29, 10, 25, 143, 21, 101, 117, 80, 81,
	146, 23, 144, 70, 19, 51, 11, 13, 14, 128,
	127, 92, 124, 46, 8, 111, 26, 89, 42, 28,
	44, 90, 17, 246, 247, 31, 258, 150, 103, 49,
	36, 74, 68, 71, 52, 72, 15, 47, 91, 118,
	251, 45, 122, 6, 257, 30, 142, 43, 123, 79,
	126, 69, 5, 129, 32, 9, 50, 53, 248, 249,
	250, 34, 78, 12, -164, 90, -157, 57, -53, 124,
	-53, 251, -112, 128, -112, -112, 123, -53, 115, 117,
	52, -18, -53, -111, 128, 57, -111, -111, -111, -53,
	112, -53, 57, 30, -131, -189, -120, 243, 57, 155,
	123, 156, 125, -131, -131, -131, -131, 159, 160, -131,
	-109, -108, 225, 226, 216, 224, 52, 12, -131, -130,
	-130, -190, 56, -89, 19, 31, -39, -125, -85, -86,
	-39, -84, -2, -26, 36, -30, 21, 65, 11, -122,
	73, 72, 89, -121, 22, -119, 59, 112, -39, -60,
	92, 74, 90, 91, 76, 94, 93, 104, 97, 98,
	99, 100, 101, 102, 103, 95, 96, 107, 82, 83,
	84, 85, 86, 87, 88, -105, -189, -76, -189, 113,
	114, -63, -63, -63, -63, -63, -63, -63, -63, -189,
	-2, -71, -39, -189, -189, -189, -189, -189, -189, -189,
	-189, -189, -80, -39, -189, -193, -189, -193, -193, -193,
	-193, -193, -193, -193, -189, -189, -189, -189, -54, 26,
	-53, -41, -42, -43, -44, -55, -76, -189, -53, -53,
	-48, -191, 55, 11, 53, 55, -96, 164, -97, -101,
	233, 235, 82, -124, -119, 59, 29, 30, 56, 55,
	-53, -136, -139, -141, -140, -142, -137, -138, 184, 185,
	108, 188, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 30, 145, 180, 181, 182, 183, 200, 201,
	202, 203, 204, 205, 206, 207, 167, 168, 169, 170,
	171, 172, 173, 175, 176, 177, 178, 179, 57, -131,
	125, 57, 74, 57, -53, -53, -131, 157, 157, -53,
	55, 126, -48, 23, 52, -53, 57, 57, -126, -125,
	-117, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, 11, -107, 11, 92, -53, -39, 9, 92, 55,
	18, 112, 55, -87, 24, 25, -88, -190, -32, -64,
	-119, 60, 63, -31, 43, -53, -39, -39, -69, 68,
	74, 69, 70, -121, 99, -126, -120, -117, -63, -70,
	-73, -76, 64, 92, 90, 91, 76, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -132, 57, 59, 57, -62, -62, -119, -37,
	21, -36, -38, -190, 55, -190, -2, -36, -36, -39,
	-39, -77, 59, -119, -125, -77, 59, -36, -30, -78,
	-79, 78, -77, -190, -36, -37, -36, -36, -92, 151,
	-53, 30, 55, -49, -51, -50, -52, 42, 46, 48,
	43, 44, 45, 49, -129, 22, -41, -189, -128, 151,
	-127, 22, -125, 59, -92, 53, -41, -53, -100, -97,
	55, 234, 236, 237, 52, 71, -39, -148, 107, -166,
	-167, -168, -120, 59, 60, -157, -158, -159, -169, 137,
	-174, 130, 132, 129, -160, 138, 124, 28, 56, -153,
	68, 74, -149, 212, -143, 54, -143, -143, -143, -143,
	-147, 187, -147, -147, -147, 54, 54, -143, -143, -143,
	-151, 54, -151, -151, -152, 54, -152, -123, 53, -53,
	-131, 23, -131, -113, 120, 117, 118, -177, 116, 209,
	187, 66, 29, 15, 252, 151, 265, 57, 152, -119,
	-119, 120, 117, -53, -53, -53, -131, -53, -110, 90,
	12, -125, -125, 38, -39, -39, -126, -86, -89, -103,
	19, 11, 34, 34, -36, 68, 69, 70, 112, -189,
	-70, -63, -63, -63, -35, 146, 73, -190, -190, -36,
	55, -39, -190, -190, -190, 55, 53, 22, 55, 11,
	55, 11, 112, 55, 11, 55, 11, -190, -36, -81,
	-79, 80, -39, -190, -190, -190, -190, -190, -61, 30,
	34, -2, -189, -189, -95, -99, -77, -42, -43, -43,
	-42, -43, 42, 42, 42, 47, 42, 47, 42, -50,
	-125, -190, -56, 50, 127, 51, -189, -127, -57, 12,
	-41, -57, -101, -102, 238, 235, 241, 57, 59, 55,
	-168, 82, 54, 57, 28, -160, -160, -161, 57, -161,
	28, -144, 29, 68, -150, 213, 60, -147, -147, -148,
	30, -148, -148, -148, -156, 59, -156, 60, 60, 52,
	-119, -131, -130, -183, 131, 137, 138, 133, 57, 124,
	28, 130, 132, 151, 129, -183, -114, -115, 126, 22,
	124, 28, 151, -182, 53, 157, 157, 126, -131, -107,
	59, -39, 39, 112, -53, -40, 11, 99, -120, -37,
	-35, 73, -63, -63, -190, -38, -135, 108, 184, 145,
	182, 178, 198, 189, 211, 180, 212, -132, -135, -63,
	-63, -63, -63, -120, -63, -63, -63, -63, 259, -84,
	81, -39, 79, -94, 52, -95, -72, -74, -73, -189,
	-2, -90, -119, -93, -119, -57, 55, 82, -46, -45,
	52, 53, -47, 52, -45, 42, 42, 124, 124, 124,
	-93, -84, -39, -57, 235, 239, 240, -167, -168, -171,
	-170, -119, -174, -161, -161, 54, -146, 52, 59, 60,
	61, 68, 242, 67, 56, -148, -148, 57, 108, 56,
	55, 56, 55, 56, 55, -53, -130, -130, -53, -130,
	-119, -180, 262, -181, 57, -119, -119, -53, -110, -57,
	-41, -190, -63, -190, -143, -143, -143, -152, -143, 172,
	-143, 172, -190, -190, -190, 55, 19, -190, 55, 19,
	-190, 55, 19, -190, 55, 19, -189, -34, 257, -39,
	27, -94, 55, -190, -190, -190, 55, 112, -190, 55,
	-84, -99, -39, -39, 54, -39, -189, -189, -189, -190,
	-88, 56, 55, -143, -91, -119, -154, 209, 9, 54,
	-147, 59, -147, 60, 60, -131, 26, -179, -178, -120,
	54, -82, 13, -147, 57, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -190, 59, 28, -74, 34, -2,
	-189, -119, -119, -119, -88, -91, -91, -91, -91, -128,
	-173, -172, 53, 134, 66, -170, 56, 55, -155, 130,
	28, 129, 242, 56, -148, -148, 56, 56, -189, 55,
	82, -91, -83, 14, 16, -190, -190, -190, -190, -190,
	-190, -190, -190, -33, 92, 262, 9, -72, -2, 112,
	56, -190, -190, -190, -56, -172, 57, -162, 82, 59,
	140, -119, -145, 66, 28, 28, 54, -175, -176, 151,
	-178, -168, 56, -39, -71, -190, 260, 49, 263, -95,
	-190, -119, 60, -53, 59, 56, -190, 55, -119, -182,
	39, 261, 264, 54, -176, 34, -180, 39, -91, 153,
	262, 56, 154, 263, -185, -186, 52, -189, 264, -186,
	52, 10, 9, -63, 150, -184, 141, 136, 139, 30,
	-184, -190, -190, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 554, 0, 315, 315, 315, 315, 315, 315,
	0, 625, 608, 0, 0, 0, 0, -2, 302, 303,
	0, 305, 306, 846, 846, 846, 846, 846, 0, 0,
	846, 0, 35, 36, 844, 1, 3, 562, 0, 0,
	319, 322, 317, 0, 608, 608, 0, 0, 62, 63,
	0, 0, 0, 830, 0, 606, 606, 606, 626, 627,
	630, 631, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 0, 0, 0, 609, 0, 604,
	0, 604, 604, 604, 0, 253, 387, 634, 635, 830,
	0, 0, 0, 847, 0, 847, 265, 847, 847, 268,
	847, 0, 847, 0, 275, 276, 279, 280, 281, 282,
	283, 284, 847, 299, 300, 289, 301, 304, 307, 308,
	309, 310, 311, 846, 846, 314, 29, 566, 0, 0,
	554, 31, 0, 315, 320, 321, 325, 323, 324, 316,
	0, 333, 337, 0, 395, 0, 400, 402, -2, -2,
	0, 437, 438, 439, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 465, 466, 467, 468, 539, 540,
	541, 542, 543, 544, 545, 546, 404, 405, 536, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	0, 501, 501, 501, 501, 501, 501, 501, 501, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 47, 0,
	821, 590, -2, -2, 0, 0, 632, 633, -2, 740,
	-2, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 0, 0, 81, 0, 79, 0,
	847, 0, 0, 0, 0, 0, 0, 847, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 254, 847, 847, 257, 848, 849, 847, 847, 847,
	847, 847, 847, 264, 266, 267, 269, 847, 847, 271,
	0, 292, 290, 291, 286, 287, 0, 0, 285, 312,
	313, 30, 845, 24, 0, 0, 563, 0, 555, 556,
	559, 562, 29, 322, 0, 327, 326, 318, 0, 334,
	0, 0, 0, 338, 0, 340, 341, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 422, 423,
	424, 425, 426, 427, 428, 401, 0, 415, 0, 0,
	0, 457, 458, 459, 460, 461, 462, 463, 0, 329,
	29, 0, 435, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 528, 0, 493, 0, 494, 495, 496,
	497, 498, 499, 500, 0, 329, 0, 0, 45, 0,
	386, 0, 344, 346, 347, 348, -2, 0, 370, -2,
	0, 0, 0, 41, 42, 0, 48, 821, 50, 51,
	0, 0, 0, 164, 599, 600, 601, 597, 208, 0,
	0, 145, 141, 87, 88, 89, 134, 91, 134, 134,
	134, 134, 161, 161, 161, 161, 117, 118, 119, 120,
	121, 0, 0, 104, 134, 134, 134, 108, 124, 125,
	126, 127, 128, 129, 130, 131, 92, 93, 94, 95,
	96, 97, 98, 136, 136, 136, 138, 138, 628, 65,
	0, 847, 0, 847, 77, 0, 222, 0, 0, 0,
	0, 0, 247, 605, 0, 847, 250, 251, 388, 636,
	637, 255, 256, 258, 259, 260, 261, 262, 263, 270,
	274, 0, 295, 0, 0, 278, 277, 567, 0, 0,
	0, 0, 0, 558, 560, 561, 566, 32, 325, 0,
	547, 0, 0, 0, 328, 27, 396, 397, 399, 416,
	0, 418, 420, 339, 335, 0, 537, -2, 406, 407,
	431, 432, 433, 0, 0, 0, 0, 429, 411, 0,
	442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 456, 512, 513, 0, 454, 455, 464, 0,
	0, 330, 331, 434, 0, 585, 29, 0, 0, 0,
	0, 0, 0, 536, 0, 0, 0, 0, 0, 534,
	531, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	385, 0, 0, 0, 0, 0, 0, 375, 0, 0,
	378, 0, 0, 0, 0, 369, 0, 0, 389, 790,
	371, 0, 373, 374, 393, 0, 393, 44, 591, 49,
	0, 0, 54, 55, 592, 593, 594, 595, 0, 78,
	209, 211, 214, 215, 216, 82, 83, 84, 0, 0,
	196, 0, 0, 190, 190, 0, 188, 189, 80, 148,
	146, 0, 143, 142, 90, 0, 161, 161, 111, 112,
	164, 0, 164, 164, 164, 0, 0, 105, 106, 107,
	99, 0, 100, 101, 102, 0, 103, 0, 0, 847,
	67, 607, 68, 846, 0, 0, 620, 223, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 0, 69,
	225, 0, 0, 0, 245, 847, 249, 292, 273, 0,
	0, 293, 294, 0, 564, 565, 0, 557, 25, 0,
	602, 603, 548, 549, 342, 417, 419, 421, 0, 329,
	408, 429, 412, 0, 409, 0, 0, 403, 469, 0,
	0, 436, -2, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 0,
	532, 0, 0, 492, 503, 504, 505, 506, 579, 0,
	0, -2, 0, 0, 393, 587, 0, 345, 364, 366,
	0, 361, 376, 377, 379, 0, 381, 0, 383, 384,
	349, 351, 352, 0, 0, 0, 0, 372, 554, 0,
	393, 40, 52, 53, 0, 0, 59, 165, 166, 0,
	212, 0, 0, 0, 183, 190, 190, 186, 191, 187,
	0, 156, 0, 147, 86, 144, 0, 164, 164, 113,
	0, 114, 115, 116, 0, 132, 0, 0, 0, 0,
	629, 66, 217, 846, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 846, 0, 846, 621, 622,
	623, 624, 0, 72, 0, 0, 0, 0, 248, 295,
	296, 297, 568, 0, 26, 393, 0, 336, 538, 0,
	410, 0, 430, 413, 470, 332, 0, 134, 134, 517,
	134, 138, 520, 134, 522, 134, 525, 0, 0, 0,
	0, 0, 0, 537, 0, 0, 0, 0, 0, 529,
	491, 535, 0, 33, 0, 579, 569, 581, 583, 0,
	29, 0, 575, 0, 356, 554, 0, 0, 358, 365,
	0, 0, 359, 0, 360, 380, 382, 0, 0, 0,
	0, 562, 394, 39, 56, 57, 58, 210, 213, 0,
	192, 134, 195, 184, 185, 0, 159, 0, 149, 150,
	151, 152, 153, 155, 135, 109, 110, 162, 163, 161,
	0, 161, 0, 139, 0, 847, 218, 219, 220, 221,
	0, 224, 0, 70, 71, 0, 227, 246, 272, 550,
	343, 471, 414, 474, 514, 161, 518, 519, 521, 523,
	524, 526, 476, 475, 477, 0, 0, 483, 0, 0,
	480, 0, 0, 486, 0, 0, 0, 0, 0, 533,
	0, 34, 0, 584, -2, 0, 0, 0, 46, 0,
	562, 588, 589, 362, 0, 367, 0, 0, 0, 370,
	38, 175, 0, 194, 0, 354, 167, 160, 0, 0,
	164, 133, 164, 0, 0, 64, 0, 73, 74, 0,
	0, 552, 0, 515, 516, 0, 0, 0, 0, 0,
	0, 0, 0, 507, 490, 530, 0, 582, 0, -2,
	0, 577, 576, 357, 37, 0, 0, 0, 0, 389,
	174, 176, 0, 181, 0, 193, 0, 0, 172, 0,
	169, 171, 157, 154, 122, 123, 137, 140, 0, 0,
	0, 0, 28, 0, 0, 478, 479, 484, 485, 481,
	482, 487, 488, 0, 0, 0, 0, 572, 29, 0,
	363, 390, 391, 392, 353, 177, 178, 0, 182, 180,
	0, 355, 85, 0, 168, 170, 0, 0, 240, 0,
	75, 76, 69, 553, 551, 489, 0, 0, 0, 580,
	-2, 578, 179, 0, 173, 158, 239, 0, 0, 72,
	508, 0, 511, 0, 241, 0, 226, 509, 0, 0,
	0, 197, 0, 0, 198, 199, 0, 0, 510, 200,
	0, 0, 0, 0, 0, 201, 203, 204, 0, 0,
	202, 242, 243, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 266,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:351
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:359
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:470
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:474
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:526
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:555
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:583
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:587
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:626
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:633
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:655
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:659
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:669
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:888
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:893
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:897
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:906
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:924
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:964
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1045
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1076
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1080
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1100
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1178
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1189
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1193
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1207
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1284
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1296
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1301
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1322
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1366
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1382
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1386
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1398
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1402
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1410
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1418
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1526
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1531
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1553
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = "full "
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1643
		{
			yyVAL.showFilter = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1651
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1657
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.str = SessionStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = GlobalStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Begin{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &Commit{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.statement = &Rollback{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &OtherRead{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1737
		{
			setAllowComments(yylex, true)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1747
		{
			yyVAL.bytes2 = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = UnionStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = UnionAllStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = UnionDistinctStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = SQLCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = DistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = StraightJoinHint
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.selectExprs = nil
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1815
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1833
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1838
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1846
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1858
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1902
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1906
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1939
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1943
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1947
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1959
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1969
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1987
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = JoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = StraightJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = LeftJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = LeftJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = RightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = RightJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = NaturalJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.indexHints = nil
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2075
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2079
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2083
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2122
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2148
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2156
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2160
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2164
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2180
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = IsNullStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = IsNotNullStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = IsTrueStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = IsNotTrueStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = IsFalseStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = IsNotFalseStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.str = EqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.str = LessThanStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.str = GreaterThanStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.str = LessEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = GreaterEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = NotEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2289
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2597
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2601
		{
			yyVAL.str = BooleanModeStr
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 510:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = QueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2629
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2633
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2659
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2693
		{
			yyVAL.str = string("")
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2736
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &NullVal{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2794
		{
			yyVAL.exprs = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.orderBy = nil
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2837
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.str = AscScr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.str = DescScr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2850
		{
			yyVAL.limit = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2862
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2867
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.str = ForUpdateStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2875
		{
			yyVAL.str = ShareModeStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2896
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2901
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2905
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2909
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2924
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2928
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.updateExprs = nil
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2937
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2979
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2989
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3005
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3009
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3013
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3017
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.bytes = []byte("charset")
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &Default{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.byt = 0
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.byt = 1
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3053
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3055
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3058
		{
			yyVAL.str = ""
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.str = IgnoreStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3085
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3105
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3107
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3371
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			decNesting(yylex)
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3385
		{
			skipToEnd(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3390
		{
			skipToEnd(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			skipToEnd(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

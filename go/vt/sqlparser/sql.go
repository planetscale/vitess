// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const SQL_CALC_FOUND_ROWS = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const UNIQUE = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const INDEXES = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const SEQUENCE = 57493
const BEGIN = 57494
const START = 57495
const TRANSACTION = 57496
const COMMIT = 57497
const ROLLBACK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const GEOMETRY = 57532
const POINT = 57533
const LINESTRING = 57534
const POLYGON = 57535
const GEOMETRYCOLLECTION = 57536
const MULTIPOINT = 57537
const MULTILINESTRING = 57538
const MULTIPOLYGON = 57539
const NULLX = 57540
const AUTO_INCREMENT = 57541
const APPROXNUM = 57542
const SIGNED = 57543
const UNSIGNED = 57544
const ZEROFILL = 57545
const COLLATION = 57546
const DATABASES = 57547
const TABLES = 57548
const VITESS_METADATA = 57549
const VSCHEMA = 57550
const FULL = 57551
const PROCESSLIST = 57552
const COLUMNS = 57553
const FIELDS = 57554
const ENGINES = 57555
const PLUGINS = 57556
const EXTENDED = 57557
const NAMES = 57558
const CHARSET = 57559
const GLOBAL = 57560
const SESSION = 57561
const ISOLATION = 57562
const LEVEL = 57563
const READ = 57564
const WRITE = 57565
const ONLY = 57566
const REPEATABLE = 57567
const COMMITTED = 57568
const UNCOMMITTED = 57569
const SERIALIZABLE = 57570
const CURRENT_TIMESTAMP = 57571
const DATABASE = 57572
const CURRENT_DATE = 57573
const CURRENT_TIME = 57574
const LOCALTIME = 57575
const LOCALTIMESTAMP = 57576
const UTC_DATE = 57577
const UTC_TIME = 57578
const UTC_TIMESTAMP = 57579
const REPLACE = 57580
const CONVERT = 57581
const CAST = 57582
const SUBSTR = 57583
const SUBSTRING = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const TIMESTAMPADD = 57587
const TIMESTAMPDIFF = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const ARRAY = 57597
const CUME_DIST = 57598
const DESCRIPTION = 57599
const DENSE_RANK = 57600
const EMPTY = 57601
const EXCEPT = 57602
const FIRST_VALUE = 57603
const GROUPING = 57604
const GROUPS = 57605
const JSON_TABLE = 57606
const LAG = 57607
const LAST_VALUE = 57608
const LATERAL = 57609
const LEAD = 57610
const MEMBER = 57611
const NTH_VALUE = 57612
const NTILE = 57613
const OF = 57614
const OVER = 57615
const PERCENT_RANK = 57616
const RANK = 57617
const RECURSIVE = 57618
const ROW_NUMBER = 57619
const SYSTEM = 57620
const WINDOW = 57621
const ACTIVE = 57622
const ADMIN = 57623
const BUCKETS = 57624
const CLONE = 57625
const COMPONENT = 57626
const DEFINITION = 57627
const ENFORCED = 57628
const EXCLUDE = 57629
const FOLLOWING = 57630
const GEOMCOLLECTION = 57631
const GET_MASTER_PUBLIC_KEY = 57632
const HISTOGRAM = 57633
const HISTORY = 57634
const INACTIVE = 57635
const INVISIBLE = 57636
const LOCKED = 57637
const MASTER_COMPRESSION_ALGORITHMS = 57638
const MASTER_PUBLIC_KEY_PATH = 57639
const MASTER_TLS_CIPHERSUITES = 57640
const MASTER_ZSTD_COMPRESSION_LEVEL = 57641
const NESTED = 57642
const NETWORK_NAMESPACE = 57643
const NOWAIT = 57644
const NULLS = 57645
const OJ = 57646
const OLD = 57647
const OPTIONAL = 57648
const ORDINALITY = 57649
const ORGANIZATION = 57650
const OTHERS = 57651
const PATH = 57652
const PERSIST = 57653
const PERSIST_ONLY = 57654
const PRECEDING = 57655
const PRIVILEGE_CHECKS_USER = 57656
const PROCESS = 57657
const RANDOM = 57658
const REFERENCE = 57659
const REQUIRE_ROW_FORMAT = 57660
const RESOURCE = 57661
const RESPECT = 57662
const RESTART = 57663
const RETAIN = 57664
const REUSE = 57665
const ROLE = 57666
const SECONDARY = 57667
const SECONDARY_ENGINE = 57668
const SECONDARY_LOAD = 57669
const SECONDARY_UNLOAD = 57670
const SKIP = 57671
const SRID = 57672
const THREAD_PRIORITY = 57673
const TIES = 57674
const UNBOUNDED = 57675
const VCPU = 57676
const VISIBLE = 57677
const FORMAT = 57678
const TREE = 57679
const VITESS = 57680

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 34,
	-2, 4,
	-1, 39,
	33, 300,
	128, 300,
	140, 300,
	165, 314,
	166, 314,
	-2, 302,
	-1, 46,
	1, 975,
	356, 975,
	-2, 329,
	-1, 47,
	1, 975,
	356, 975,
	-2, 328,
	-1, 48,
	1, 975,
	356, 975,
	-2, 327,
	-1, 64,
	37, 350,
	-2, 358,
	-1, 322,
	37, 351,
	-2, 363,
	-1, 323,
	37, 352,
	-2, 364,
	-1, 338,
	116, 680,
	-2, 676,
	-1, 339,
	116, 681,
	-2, 677,
	-1, 408,
	86, 931,
	-2, 67,
	-1, 409,
	86, 848,
	-2, 68,
	-1, 414,
	86, 816,
	-2, 642,
	-1, 416,
	86, 879,
	-2, 644,
	-1, 600,
	5, 34,
	-2, 330,
	-1, 725,
	1, 388,
	5, 388,
	12, 388,
	13, 388,
	14, 388,
	15, 388,
	17, 388,
	19, 388,
	30, 388,
	31, 388,
	44, 388,
	45, 388,
	46, 388,
	47, 388,
	48, 388,
	50, 388,
	51, 388,
	54, 388,
	55, 388,
	57, 388,
	58, 388,
	356, 388,
	-2, 406,
	-1, 728,
	55, 49,
	57, 49,
	-2, 53,
	-1, 887,
	116, 683,
	-2, 679,
	-1, 1122,
	5, 35,
	-2, 474,
	-1, 1153,
	5, 34,
	-2, 615,
	-1, 1400,
	5, 35,
	-2, 616,
	-1, 1453,
	5, 34,
	-2, 618,
	-1, 1528,
	5, 35,
	-2, 619,
}

const yyPrivate = 57344

const yyLast = 16508

var yyAct = [...]int{

	338, 1552, 1562, 1360, 1518, 1156, 1003, 343, 1433, 1249,
	1466, 579, 1174, 1420, 1301, 356, 1334, 1157, 1302, 369,
	680, 1298, 1200, 976, 1046, 999, 60, 1012, 1100, 568,
	1308, 1314, 1002, 413, 83, 1273, 1226, 912, 273, 827,
	293, 273, 919, 679, 3, 727, 1114, 846, 1217, 1016,
	741, 978, 963, 889, 311, 942, 922, 721, 324, 622,
	722, 609, 740, 302, 615, 407, 1026, 399, 1042, 974,
	273, 83, 632, 402, 538, 273, 730, 273, 956, 537,
	853, 59, 410, 271, 341, 301, 695, 7, 6, 5,
	1065, 1555, 1539, 557, 1550, 694, 1526, 1547, 310, 1361,
	64, 1538, 1525, 1290, 1064, 1392, 542, 269, 265, 266,
	267, 303, 304, 305, 306, 401, 1328, 309, 994, 995,
	539, 26, 541, 55, 29, 30, 330, 993, 66, 67,
	68, 69, 70, 597, 85, 86, 87, 1032, 1329, 1330,
	336, 85, 86, 87, 308, 1063, 1492, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 1208,
	381, 656, 387, 388, 385, 386, 384, 383, 382, 261,
	307, 57, 259, 1274, 263, 1188, 389, 390, 1187, 592,
	742, 1189, 743, 593, 590, 591, 1025, 1251, 1423, 85,
	86, 87, 596, 1033, 1383, 1060, 1057, 1058, 1381, 1056,
	299, 816, 585, 586, 595, 815, 1549, 1253, 813, 574,
	1519, 576, 1276, 1546, 1248, 957, 1511, 1017, 582, 1467,
	1566, 1570, 1175, 1177, 558, 544, 263, 1254, 268, 854,
	855, 820, 1067, 1070, 1469, 804, 1019, 1324, 1323, 1245,
	1252, 814, 817, 573, 575, 1247, 1278, 1322, 1282, 1475,
	1277, 540, 1275, 547, 276, 264, 554, 1280, 1500, 1131,
	273, 549, 550, 1403, 1019, 273, 1279, 559, 262, 1062,
	1077, 273, 1259, 1076, 85, 86, 87, 273, 566, 1281,
	1283, 572, 83, 668, 669, 1128, 83, 1184, 83, 1141,
	260, 1061, 1108, 860, 83, 85, 86, 87, 736, 636,
	564, 1176, 1468, 1000, 656, 548, 85, 86, 87, 646,
	556, 847, 656, 581, 989, 857, 563, 1524, 1493, 1236,
	841, 551, 565, 552, 1033, 583, 553, 277, 570, 571,
	1127, 1066, 1564, 83, 280, 1565, 1018, 1563, 851, 630,
	629, 617, 287, 631, 600, 1246, 1068, 1244, 1509, 1292,
	1232, 1233, 1234, 896, 1476, 1474, 631, 1484, 629, 1347,
	618, 560, 561, 562, 1018, 668, 669, 894, 895, 893,
	56, 605, 606, 1126, 631, 1125, 285, 73, 621, 85,
	86, 87, 292, 623, 630, 629, 630, 629, 603, 601,
	602, 668, 669, 1294, 630, 629, 848, 273, 273, 273,
	1019, 631, 806, 631, 1206, 842, 83, 943, 1312, 278,
	569, 631, 83, 744, 536, 74, 604, 410, 619, 1235,
	943, 1514, 1138, 543, 1240, 1237, 1228, 1238, 1231, 626,
	1227, 85, 86, 87, 1229, 1230, 289, 281, 1530, 290,
	291, 297, 719, 1571, 728, 282, 284, 294, 1239, 279,
	296, 295, 1429, 1428, 645, 644, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 729, 720, 656, 698,
	700, 739, 704, 706, 1221, 709, 1220, 734, 697, 699,
	701, 703, 705, 707, 708, 1209, 1572, 670, 671, 672,
	673, 674, 675, 676, 677, 1105, 1106, 1107, 1532, 1510,
	1018, 863, 864, 545, 546, 1015, 1013, 57, 1014, 1115,
	1447, 879, 881, 882, 1022, 1011, 1017, 880, 1426, 892,
	1023, 859, 258, 1218, 1087, 577, 644, 654, 655, 647,
	648, 649, 650, 651, 652, 653, 646, 273, 832, 656,
	608, 802, 83, 1481, 805, 1480, 807, 273, 273, 83,
	83, 83, 1343, 630, 629, 273, 1472, 1548, 273, 1020,
	858, 273, 825, 826, 24, 273, 1311, 83, 1299, 608,
	631, 1311, 83, 83, 83, 273, 83, 83, 1398, 630,
	629, 1101, 752, 85, 86, 87, 83, 83, 1534, 608,
	396, 397, 808, 809, 924, 1395, 631, 831, 829, 1483,
	818, 1472, 1522, 401, 57, 1389, 824, 1351, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	837, 83, 656, 1472, 608, 821, 960, 315, 273, 85,
	86, 87, 1101, 914, 83, 645, 644, 654, 655, 647,
	648, 649, 650, 651, 652, 653, 646, 960, 886, 656,
	649, 650, 651, 652, 653, 646, 1192, 913, 656, 890,
	85, 86, 87, 983, 1191, 731, 915, 1472, 1501, 992,
	887, 1144, 865, 875, 1472, 1471, 885, 1311, 83, 1418,
	1417, 1143, 874, 645, 644, 654, 655, 647, 648, 649,
	650, 651, 652, 653, 646, 931, 934, 656, 1405, 608,
	26, 944, 1402, 608, 1353, 1352, 883, 1349, 1350, 947,
	26, 83, 83, 359, 358, 361, 362, 363, 364, 273,
	1349, 1348, 360, 365, 872, 608, 926, 273, 273, 960,
	608, 273, 273, 61, 1151, 273, 273, 273, 83, 1152,
	927, 928, 924, 608, 933, 936, 937, 751, 750, 410,
	57, 83, 538, 916, 917, 872, 952, 953, 731, 861,
	57, 1540, 1004, 819, 958, 737, 1435, 1027, 1410, 951,
	829, 959, 954, 955, 1250, 872, 873, 985, 1047, 888,
	1339, 1195, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 317, 960, 1043,
	984, 991, 1038, 990, 986, 273, 83, 982, 83, 987,
	1069, 584, 732, 587, 273, 273, 273, 273, 273, 598,
	273, 273, 872, 26, 273, 83, 1048, 1028, 1029, 1030,
	1031, 1007, 965, 968, 969, 970, 966, 948, 967, 971,
	1037, 273, 1436, 1039, 1040, 1041, 273, 57, 273, 273,
	1051, 732, 1452, 273, 1315, 1316, 733, 1050, 735, 1071,
	1072, 1073, 1074, 1075, 1557, 1078, 1079, 1044, 1045, 1080,
	1553, 1321, 886, 57, 273, 1341, 1084, 1318, 965, 968,
	969, 970, 966, 339, 967, 971, 1082, 1320, 1315, 1316,
	1299, 1083, 1222, 852, 887, 733, 823, 731, 1088, 1165,
	1092, 1168, 1166, 1034, 1035, 1036, 1169, 1167, 1170, 1164,
	969, 970, 1544, 890, 1537, 1258, 1089, 84, 620, 1542,
	1099, 274, 1098, 1213, 274, 749, 1093, 1094, 567, 939,
	1205, 1516, 1102, 1104, 647, 648, 649, 650, 651, 652,
	653, 646, 940, 1103, 656, 610, 1515, 1110, 1450, 1203,
	1197, 1396, 973, 274, 84, 1431, 1053, 611, 274, 822,
	274, 273, 273, 273, 273, 273, 325, 1158, 318, 319,
	312, 1372, 325, 273, 1097, 313, 273, 1119, 1120, 326,
	273, 61, 1096, 1371, 273, 326, 624, 625, 328, 1262,
	327, 1101, 322, 323, 328, 1135, 327, 1137, 594, 1132,
	1153, 1190, 1129, 83, 1559, 1558, 65, 845, 627, 1193,
	1559, 1180, 1196, 1182, 1004, 1183, 1201, 1201, 1159, 926,
	607, 1162, 1160, 1161, 1171, 1163, 1497, 1424, 856, 63,
	58, 1179, 1, 1551, 1362, 1111, 1112, 1113, 1432, 1202,
	1059, 1517, 1465, 1185, 1333, 1010, 1001, 72, 535, 71,
	1508, 83, 83, 1181, 840, 580, 1009, 1008, 1212, 1473,
	1214, 1215, 1216, 1422, 1198, 1199, 1021, 803, 1207, 1024,
	1340, 1204, 1513, 757, 810, 811, 812, 755, 756, 754,
	759, 83, 758, 753, 286, 405, 972, 1219, 745, 1049,
	628, 75, 830, 1243, 1241, 1242, 273, 834, 835, 836,
	1055, 838, 839, 850, 283, 588, 589, 288, 664, 83,
	1095, 843, 844, 1186, 411, 404, 1306, 862, 614, 1225,
	1265, 1370, 1261, 1136, 691, 941, 344, 913, 878, 357,
	1256, 1257, 354, 355, 867, 1150, 638, 342, 334, 724,
	717, 1260, 964, 274, 962, 961, 400, 1317, 274, 1313,
	723, 871, 1266, 1295, 274, 83, 83, 1300, 1267, 1158,
	274, 321, 1291, 1285, 1284, 84, 1210, 1211, 1391, 84,
	1491, 84, 1303, 320, 938, 887, 45, 84, 300, 83,
	28, 1092, 62, 329, 20, 1310, 19, 18, 22, 17,
	16, 15, 555, 83, 1319, 83, 83, 32, 1305, 1201,
	1201, 1332, 23, 14, 1004, 13, 1004, 1326, 12, 1325,
	1327, 11, 10, 9, 1346, 8, 84, 4, 599, 21,
	314, 1337, 1338, 273, 1336, 1331, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 1344, 1345, 656, 25,
	2, 0, 0, 273, 0, 0, 0, 0, 0, 83,
	0, 1363, 83, 83, 83, 273, 1269, 1270, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 1354, 1286,
	1287, 1265, 1288, 1289, 0, 0, 0, 0, 0, 0,
	274, 274, 274, 0, 1296, 1297, 1368, 1369, 1357, 84,
	1355, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	1367, 0, 0, 1379, 0, 1356, 0, 1358, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 1158,
	0, 0, 1397, 0, 0, 0, 0, 0, 866, 1407,
	0, 1052, 83, 1054, 0, 0, 0, 1406, 1193, 0,
	83, 1376, 1377, 1004, 1378, 0, 1342, 1380, 0, 1382,
	1081, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 332, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 1440, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 923,
	925, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 83, 83, 0, 83, 0, 0, 1374,
	0, 83, 0, 83, 83, 83, 273, 1451, 1303, 83,
	274, 0, 0, 0, 1459, 84, 1460, 1462, 1463, 0,
	274, 274, 84, 84, 84, 1470, 83, 273, 274, 1464,
	1477, 274, 0, 0, 274, 1453, 1446, 0, 274, 1485,
	84, 1478, 0, 1479, 0, 84, 84, 84, 274, 84,
	84, 1458, 0, 0, 0, 0, 0, 1498, 1507, 84,
	84, 0, 1303, 83, 0, 0, 1506, 1505, 0, 0,
	0, 0, 1486, 0, 83, 83, 1425, 0, 1427, 0,
	0, 1521, 1520, 0, 0, 1434, 1004, 0, 1499, 0,
	0, 83, 0, 1527, 84, 1158, 0, 0, 0, 0,
	0, 274, 273, 0, 0, 1439, 0, 84, 0, 0,
	83, 0, 0, 370, 54, 1394, 0, 1441, 1442, 1443,
	1444, 1445, 1536, 0, 0, 1448, 1449, 0, 0, 1541,
	1543, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1556, 1545, 0, 0, 1531, 0, 0,
	0, 84, 1567, 0, 0, 645, 644, 654, 655, 647,
	648, 649, 650, 651, 652, 653, 646, 1224, 54, 656,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 1388,
	0, 0, 0, 0, 84, 84, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 1255, 0, 0, 0,
	274, 274, 0, 0, 274, 274, 0, 0, 274, 274,
	274, 84, 0, 0, 0, 1117, 0, 0, 0, 1118,
	0, 0, 0, 0, 84, 0, 1122, 1123, 1124, 0,
	0, 0, 0, 1130, 0, 0, 1133, 1134, 0, 0,
	0, 0, 0, 0, 1140, 0, 0, 666, 1142, 0,
	0, 1145, 1146, 1147, 1148, 1149, 0, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 612,
	616, 656, 0, 0, 1173, 0, 0, 0, 274, 84,
	0, 84, 0, 0, 0, 1560, 0, 274, 274, 274,
	274, 274, 637, 274, 274, 1387, 0, 274, 84, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 274,
	0, 274, 274, 0, 0, 0, 274, 681, 0, 0,
	0, 0, 640, 0, 643, 0, 692, 0, 0, 0,
	657, 658, 659, 660, 661, 662, 663, 274, 641, 642,
	639, 645, 644, 654, 655, 647, 648, 649, 650, 651,
	652, 653, 646, 0, 0, 656, 0, 0, 0, 0,
	0, 0, 0, 645, 644, 654, 655, 647, 648, 649,
	650, 651, 652, 653, 646, 0, 0, 656, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 578,
	0, 578, 0, 0, 0, 0, 0, 578, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 0, 0, 1271,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 274, 274, 274, 274, 274, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 274,
	1386, 665, 0, 274, 667, 0, 0, 274, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	1430, 0, 656, 0, 0, 0, 84, 0, 0, 368,
	0, 0, 678, 0, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 0, 693, 696, 696, 696, 702, 696,
	696, 702, 696, 710, 711, 712, 713, 714, 715, 716,
	0, 726, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 84, 0, 833, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	0, 0, 656, 0, 0, 0, 891, 0, 0, 0,
	412, 849, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1373, 0, 1268, 274,
	0, 0, 0, 1375, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 1384, 1385, 876, 877, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	0, 0, 656, 0, 1399, 1400, 1401, 0, 1404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 84, 84,
	0, 0, 0, 725, 0, 0, 0, 725, 0, 681,
	0, 725, 929, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 578, 578, 578, 0, 84, 0, 84, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	578, 0, 0, 0, 0, 578, 578, 578, 0, 578,
	578, 0, 0, 0, 0, 0, 274, 0, 0, 578,
	578, 998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 84, 0, 0, 84, 84, 84, 274, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 1487, 1488, 1489, 1490, 0, 1494, 0, 1495, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 412, 1503, 1504, 0, 412, 0, 412, 0, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	725, 54, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 0, 0, 0, 0, 682, 0, 0, 1528,
	891, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 634, 84, 0, 1090, 1091, 1533, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	975, 0, 0, 0, 726, 0, 0, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1568, 1569, 0, 0, 0, 0, 0, 725, 725, 725,
	725, 725, 0, 0, 0, 0, 84, 84, 0, 84,
	0, 1121, 725, 0, 84, 412, 84, 84, 84, 274,
	725, 746, 84, 0, 0, 0, 0, 0, 0, 0,
	1139, 0, 1116, 0, 0, 0, 0, 0, 0, 84,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 578, 645, 644, 654, 655, 647, 648, 649, 650,
	651, 652, 653, 646, 0, 0, 656, 0, 578, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 726, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 412, 412,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 0, 0, 0,
	0, 412, 412, 412, 0, 412, 412, 0, 1263, 0,
	0, 0, 0, 0, 0, 412, 412, 0, 0, 0,
	1154, 1155, 0, 0, 726, 726, 726, 726, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 1178, 0, 0, 0, 1293, 0, 726, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 634, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 272,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 774,
	949, 950, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 403, 0, 0, 0, 0, 272, 412, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 1304, 0, 54, 1408,
	0, 762, 1409, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	775, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 681,
	0, 0, 0, 788, 791, 792, 793, 794, 795, 796,
	412, 797, 798, 799, 800, 801, 776, 777, 778, 779,
	760, 761, 789, 0, 763, 0, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 780, 781, 782, 783,
	784, 785, 786, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 1390, 0, 272, 26, 27, 55,
	29, 30, 272, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 790, 46, 0, 0, 0,
	0, 31, 51, 52, 0, 0, 1412, 1413, 1414, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 333, 0, 0, 0, 0, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 1454, 0, 0, 0, 0,
	33, 34, 36, 35, 38, 0, 53, 0, 0, 0,
	1223, 412, 0, 0, 0, 0, 0, 0, 272, 272,
	272, 0, 0, 0, 0, 1482, 0, 0, 0, 39,
	47, 48, 0, 0, 49, 50, 37, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 1304, 0, 54, 0,
	41, 42, 0, 43, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 1307, 1309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 1309, 0,
	0, 0, 0, 1554, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 0, 412, 1335, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 272,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 272,
	0, 0, 272, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1359, 0,
	0, 1364, 1365, 1366, 0, 0, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 1421,
	333, 0, 0, 0, 0, 333, 333, 0, 0, 333,
	333, 333, 0, 0, 412, 946, 0, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 333, 333, 333, 333, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 272, 980,
	0, 0, 272, 272, 0, 0, 272, 988, 828, 0,
	0, 0, 1455, 1456, 0, 1457, 0, 0, 0, 0,
	1421, 0, 1421, 1421, 1421, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 1512, 0, 0, 272, 272, 272, 272, 272,
	0, 272, 272, 412, 412, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 0, 0,
	1529, 0, 272, 0, 0, 0, 0, 272, 0, 1085,
	1086, 0, 0, 0, 272, 0, 0, 0, 0, 1535,
	0, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 272, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 272, 272, 272, 272, 272, 0, 0, 0,
	0, 0, 0, 0, 1172, 0, 0, 272, 0, 0,
	0, 980, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 510, 0, 467, 525, 440, 457, 533,
	458, 461, 498, 425, 480, 173, 455, 980, 444, 420,
	451, 421, 442, 469, 117, 473, 439, 512, 483, 524,
	145, 445, 531, 147, 489, 0, 219, 161, 272, 0,
	0, 471, 514, 478, 507, 466, 499, 430, 488, 526,
	456, 496, 527, 0, 0, 0, 85, 86, 87, 0,
	1005, 1006, 0, 0, 0, 0, 0, 107, 0, 493,
	521, 453, 495, 497, 419, 490, 0, 423, 426, 532,
	517, 448, 449, 1194, 0, 0, 0, 0, 0, 0,
	470, 479, 504, 464, 0, 0, 0, 0, 0, 946,
	0, 0, 446, 0, 487, 0, 0, 0, 427, 424,
	0, 0, 468, 272, 0, 0, 429, 0, 447, 505,
	0, 417, 126, 509, 516, 465, 275, 520, 463, 462,
	523, 192, 0, 223, 129, 144, 103, 141, 89, 99,
	0, 128, 170, 199, 203, 513, 443, 452, 111, 450,
	201, 180, 239, 486, 182, 200, 148, 229, 193, 238,
	248, 249, 226, 246, 253, 216, 92, 225, 237, 108,
	211, 94, 235, 222, 159, 138, 139, 93, 0, 197,
	116, 124, 113, 172, 232, 233, 112, 256, 100, 245,
	96, 101, 244, 166, 228, 236, 160, 153, 95, 234,
	158, 152, 143, 120, 131, 190, 150, 191, 132, 163,
	162, 164, 0, 422, 0, 220, 242, 257, 105, 438,
	227, 251, 252, 0, 0, 106, 125, 119, 189, 123,
	165, 102, 134, 217, 142, 149, 196, 255, 179, 202,
	109, 241, 218, 434, 437, 432, 433, 481, 482, 528,
	529, 530, 506, 428, 0, 435, 436, 0, 511, 518,
	519, 485, 88, 97, 146, 254, 194, 122, 243, 418,
	431, 115, 441, 0, 0, 454, 459, 460, 472, 474,
	475, 476, 477, 484, 491, 492, 494, 500, 501, 502,
	503, 508, 515, 534, 90, 91, 98, 104, 110, 114,
	118, 121, 127, 130, 133, 135, 136, 137, 140, 151,
	154, 155, 156, 157, 167, 168, 169, 171, 174, 175,
	176, 177, 178, 181, 183, 184, 185, 186, 187, 188,
	195, 198, 204, 205, 206, 207, 208, 209, 210, 212,
	213, 214, 215, 221, 224, 230, 231, 240, 247, 250,
	522, 510, 0, 467, 525, 440, 457, 533, 458, 461,
	498, 425, 480, 173, 455, 0, 444, 420, 451, 421,
	442, 469, 117, 473, 439, 512, 483, 524, 145, 445,
	531, 147, 489, 0, 219, 161, 0, 0, 0, 471,
	514, 478, 507, 466, 499, 430, 488, 526, 456, 496,
	527, 0, 0, 0, 85, 86, 87, 0, 1005, 1006,
	0, 0, 0, 0, 0, 107, 0, 493, 521, 453,
	495, 497, 419, 490, 0, 423, 426, 532, 517, 448,
	449, 0, 0, 0, 0, 0, 0, 0, 470, 479,
	504, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	446, 0, 487, 0, 0, 0, 427, 424, 0, 0,
	468, 0, 0, 0, 429, 0, 447, 505, 0, 417,
	126, 509, 516, 465, 275, 520, 463, 462, 523, 192,
	0, 223, 129, 144, 103, 141, 89, 99, 0, 128,
	170, 199, 203, 513, 443, 452, 111, 450, 201, 180,
	239, 486, 182, 200, 148, 229, 193, 238, 248, 249,
	226, 246, 253, 216, 92, 225, 237, 108, 211, 94,
	235, 222, 159, 138, 139, 93, 0, 197, 116, 124,
	113, 172, 232, 233, 112, 256, 100, 245, 96, 101,
	244, 166, 228, 236, 160, 153, 95, 234, 158, 152,
	143, 120, 131, 190, 150, 191, 132, 163, 162, 164,
	0, 422, 0, 220, 242, 257, 105, 438, 227, 251,
	252, 0, 0, 106, 125, 119, 189, 123, 165, 102,
	134, 217, 142, 149, 196, 255, 179, 202, 109, 241,
	218, 434, 437, 432, 433, 481, 482, 528, 529, 530,
	506, 428, 0, 435, 436, 0, 511, 518, 519, 485,
	88, 97, 146, 254, 194, 122, 243, 418, 431, 115,
	441, 0, 0, 454, 459, 460, 472, 474, 475, 476,
	477, 484, 491, 492, 494, 500, 501, 502, 503, 508,
	515, 534, 90, 91, 98, 104, 110, 114, 118, 121,
	127, 130, 133, 135, 136, 137, 140, 151, 154, 155,
	156, 157, 167, 168, 169, 171, 174, 175, 176, 177,
	178, 181, 183, 184, 185, 186, 187, 188, 195, 198,
	204, 205, 206, 207, 208, 209, 210, 212, 213, 214,
	215, 221, 224, 230, 231, 240, 247, 250, 522, 510,
	0, 467, 525, 440, 457, 533, 458, 461, 498, 425,
	480, 173, 455, 0, 444, 420, 451, 421, 442, 469,
	117, 473, 439, 512, 483, 524, 145, 445, 531, 147,
	489, 0, 219, 161, 0, 0, 0, 471, 514, 478,
	507, 466, 499, 430, 488, 526, 456, 496, 527, 57,
	0, 0, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 493, 521, 453, 495, 497,
	419, 490, 0, 423, 426, 532, 517, 448, 449, 0,
	0, 0, 0, 0, 0, 0, 470, 479, 504, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 0,
	487, 0, 0, 0, 427, 424, 0, 0, 468, 0,
	0, 0, 429, 0, 447, 505, 0, 417, 126, 509,
	516, 465, 275, 520, 463, 462, 523, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 513, 443, 452, 111, 450, 201, 180, 239, 486,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 422,
	0, 220, 242, 257, 105, 438, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 434,
	437, 432, 433, 481, 482, 528, 529, 530, 506, 428,
	0, 435, 436, 0, 511, 518, 519, 485, 88, 97,
	146, 254, 194, 122, 243, 418, 431, 115, 441, 0,
	0, 454, 459, 460, 472, 474, 475, 476, 477, 484,
	491, 492, 494, 500, 501, 502, 503, 508, 515, 534,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 522, 510, 0, 467,
	525, 440, 457, 533, 458, 461, 498, 425, 480, 173,
	455, 0, 444, 420, 451, 421, 442, 469, 117, 473,
	439, 512, 483, 524, 145, 445, 531, 147, 489, 0,
	219, 161, 0, 0, 0, 471, 514, 478, 507, 466,
	499, 430, 488, 526, 456, 496, 527, 0, 0, 0,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 493, 521, 453, 495, 497, 419, 490,
	0, 423, 426, 532, 517, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 470, 479, 504, 464, 0, 0,
	0, 0, 0, 0, 1264, 0, 446, 0, 487, 0,
	0, 0, 427, 424, 0, 0, 468, 0, 0, 0,
	429, 0, 447, 505, 0, 417, 126, 509, 516, 465,
	275, 520, 463, 462, 523, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 513,
	443, 452, 111, 450, 201, 180, 239, 486, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 237, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 101, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 422, 0, 220,
	242, 257, 105, 438, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 165, 102, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 434, 437, 432,
	433, 481, 482, 528, 529, 530, 506, 428, 0, 435,
	436, 0, 511, 518, 519, 485, 88, 97, 146, 254,
	194, 122, 243, 418, 431, 115, 441, 0, 0, 454,
	459, 460, 472, 474, 475, 476, 477, 484, 491, 492,
	494, 500, 501, 502, 503, 508, 515, 534, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 522, 510, 0, 467, 525, 440,
	457, 533, 458, 461, 498, 425, 480, 173, 455, 0,
	444, 420, 451, 421, 442, 469, 117, 473, 439, 512,
	483, 524, 145, 445, 531, 147, 489, 0, 219, 161,
	0, 0, 0, 471, 514, 478, 507, 466, 499, 430,
	488, 526, 456, 496, 527, 0, 0, 0, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 493, 521, 453, 495, 497, 419, 490, 0, 423,
	426, 532, 517, 448, 449, 0, 0, 0, 0, 0,
	0, 0, 470, 479, 504, 464, 0, 0, 0, 0,
	0, 0, 989, 0, 446, 0, 487, 0, 0, 0,
	427, 424, 0, 0, 468, 0, 0, 0, 429, 0,
	447, 505, 0, 417, 126, 509, 516, 465, 275, 520,
	463, 462, 523, 192, 0, 223, 129, 144, 103, 141,
	89, 99, 0, 128, 170, 199, 203, 513, 443, 452,
	111, 450, 201, 180, 239, 486, 182, 200, 148, 229,
	193, 238, 248, 249, 226, 246, 253, 216, 92, 225,
	237, 108, 211, 94, 235, 222, 159, 138, 139, 93,
	0, 197, 116, 124, 113, 172, 232, 233, 112, 256,
	100, 245, 96, 101, 244, 166, 228, 236, 160, 153,
	95, 234, 158, 152, 143, 120, 131, 190, 150, 191,
	132, 163, 162, 164, 0, 422, 0, 220, 242, 257,
	105, 438, 227, 251, 252, 0, 0, 106, 125, 119,
	189, 123, 165, 102, 134, 217, 142, 149, 196, 255,
	179, 202, 109, 241, 218, 434, 437, 432, 433, 481,
	482, 528, 529, 530, 506, 428, 0, 435, 436, 0,
	511, 518, 519, 485, 88, 97, 146, 254, 194, 122,
	243, 418, 431, 115, 441, 0, 0, 454, 459, 460,
	472, 474, 475, 476, 477, 484, 491, 492, 494, 500,
	501, 502, 503, 508, 515, 534, 90, 91, 98, 104,
	110, 114, 118, 121, 127, 130, 133, 135, 136, 137,
	140, 151, 154, 155, 156, 157, 167, 168, 169, 171,
	174, 175, 176, 177, 178, 181, 183, 184, 185, 186,
	187, 188, 195, 198, 204, 205, 206, 207, 208, 209,
	210, 212, 213, 214, 215, 221, 224, 230, 231, 240,
	247, 250, 522, 510, 0, 467, 525, 440, 457, 533,
	458, 461, 498, 425, 480, 173, 455, 0, 444, 420,
	451, 421, 442, 469, 117, 473, 439, 512, 483, 524,
	145, 445, 531, 147, 489, 0, 219, 161, 0, 0,
	0, 471, 514, 478, 507, 466, 499, 430, 488, 526,
	456, 496, 527, 0, 0, 0, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 493,
	521, 453, 495, 497, 419, 490, 0, 423, 426, 532,
	517, 448, 449, 0, 0, 0, 0, 0, 0, 0,
	470, 479, 504, 464, 0, 0, 0, 0, 0, 0,
	884, 0, 446, 0, 487, 0, 0, 0, 427, 424,
	0, 0, 468, 0, 0, 0, 429, 0, 447, 505,
	0, 417, 126, 509, 516, 465, 275, 520, 463, 462,
	523, 192, 0, 223, 129, 144, 103, 141, 89, 99,
	0, 128, 170, 199, 203, 513, 443, 452, 111, 450,
	201, 180, 239, 486, 182, 200, 148, 229, 193, 238,
	248, 249, 226, 246, 253, 216, 92, 225, 237, 108,
	211, 94, 235, 222, 159, 138, 139, 93, 0, 197,
	116, 124, 113, 172, 232, 233, 112, 256, 100, 245,
	96, 101, 244, 166, 228, 236, 160, 153, 95, 234,
	158, 152, 143, 120, 131, 190, 150, 191, 132, 163,
	162, 164, 0, 422, 0, 220, 242, 257, 105, 438,
	227, 251, 252, 0, 0, 106, 125, 119, 189, 123,
	165, 102, 134, 217, 142, 149, 196, 255, 179, 202,
	109, 241, 218, 434, 437, 432, 433, 481, 482, 528,
	529, 530, 506, 428, 0, 435, 436, 0, 511, 518,
	519, 485, 88, 97, 146, 254, 194, 122, 243, 418,
	431, 115, 441, 0, 0, 454, 459, 460, 472, 474,
	475, 476, 477, 484, 491, 492, 494, 500, 501, 502,
	503, 508, 515, 534, 90, 91, 98, 104, 110, 114,
	118, 121, 127, 130, 133, 135, 136, 137, 140, 151,
	154, 155, 156, 157, 167, 168, 169, 171, 174, 175,
	176, 177, 178, 181, 183, 184, 185, 186, 187, 188,
	195, 198, 204, 205, 206, 207, 208, 209, 210, 212,
	213, 214, 215, 221, 224, 230, 231, 240, 247, 250,
	522, 510, 0, 467, 525, 440, 457, 533, 458, 461,
	498, 425, 480, 173, 455, 0, 444, 420, 451, 421,
	442, 469, 117, 473, 439, 512, 483, 524, 145, 445,
	531, 147, 489, 0, 219, 161, 0, 0, 0, 471,
	514, 478, 507, 466, 499, 430, 488, 526, 456, 496,
	527, 0, 0, 0, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 493, 521, 453,
	495, 497, 419, 490, 0, 423, 426, 532, 517, 448,
	449, 0, 0, 0, 0, 0, 0, 0, 470, 479,
	504, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	446, 0, 487, 0, 0, 0, 427, 424, 0, 0,
	468, 0, 0, 0, 429, 0, 447, 505, 0, 417,
	126, 509, 516, 465, 275, 520, 463, 462, 523, 192,
	0, 223, 129, 144, 103, 141, 89, 99, 0, 128,
	170, 199, 203, 513, 443, 452, 111, 450, 201, 180,
	239, 486, 182, 200, 148, 229, 193, 238, 248, 249,
	226, 246, 253, 216, 92, 225, 237, 108, 211, 94,
	235, 222, 159, 138, 139, 93, 0, 197, 116, 124,
	113, 172, 232, 233, 112, 256, 100, 245, 96, 101,
	244, 166, 228, 236, 160, 153, 95, 234, 158, 152,
	143, 120, 131, 190, 150, 191, 132, 163, 162, 164,
	0, 422, 0, 220, 242, 257, 105, 438, 227, 251,
	252, 0, 0, 106, 125, 119, 189, 123, 165, 102,
	134, 217, 142, 149, 196, 255, 179, 202, 109, 241,
	218, 434, 437, 432, 433, 481, 482, 528, 529, 530,
	506, 428, 0, 435, 436, 0, 511, 518, 519, 485,
	88, 97, 146, 254, 194, 122, 243, 418, 431, 115,
	441, 0, 0, 454, 459, 460, 472, 474, 475, 476,
	477, 484, 491, 492, 494, 500, 501, 502, 503, 508,
	515, 534, 90, 91, 98, 104, 110, 114, 118, 121,
	127, 130, 133, 135, 136, 137, 140, 151, 154, 155,
	156, 157, 167, 168, 169, 171, 174, 175, 176, 177,
	178, 181, 183, 184, 185, 186, 187, 188, 195, 198,
	204, 205, 206, 207, 208, 209, 210, 212, 213, 214,
	215, 221, 224, 230, 231, 240, 247, 250, 522, 510,
	0, 467, 525, 440, 457, 533, 458, 461, 498, 425,
	480, 173, 455, 0, 444, 420, 451, 421, 442, 469,
	117, 473, 439, 512, 483, 524, 145, 445, 531, 147,
	489, 0, 219, 161, 0, 0, 0, 471, 514, 478,
	507, 466, 499, 430, 488, 526, 456, 496, 527, 0,
	0, 0, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 493, 521, 453, 495, 497,
	419, 490, 0, 423, 426, 532, 517, 448, 449, 0,
	0, 0, 0, 0, 0, 0, 470, 479, 504, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 0,
	487, 0, 0, 0, 427, 424, 0, 0, 468, 0,
	0, 0, 429, 0, 447, 505, 0, 417, 126, 509,
	516, 465, 275, 520, 463, 462, 523, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 513, 443, 452, 111, 450, 201, 180, 239, 486,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 415, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 422,
	0, 220, 242, 257, 105, 438, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 416, 414, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 434,
	437, 432, 433, 481, 482, 528, 529, 530, 506, 428,
	0, 435, 436, 0, 511, 518, 519, 485, 88, 97,
	146, 254, 194, 122, 243, 418, 431, 115, 441, 0,
	0, 454, 459, 460, 472, 474, 475, 476, 477, 484,
	491, 492, 494, 500, 501, 502, 503, 508, 515, 534,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 522, 510, 0, 467,
	525, 440, 457, 533, 458, 461, 498, 425, 480, 173,
	455, 0, 444, 420, 451, 421, 442, 469, 117, 473,
	439, 512, 483, 524, 145, 445, 531, 147, 489, 0,
	219, 161, 0, 0, 0, 471, 514, 478, 507, 466,
	499, 430, 488, 526, 456, 496, 527, 0, 0, 0,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 493, 521, 453, 495, 497, 419, 490,
	0, 423, 426, 532, 517, 448, 449, 0, 0, 0,
	0, 0, 0, 0, 470, 479, 504, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 446, 0, 487, 0,
	0, 0, 427, 424, 0, 0, 468, 0, 0, 0,
	429, 0, 447, 505, 0, 417, 126, 509, 516, 465,
	275, 520, 463, 462, 523, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 513,
	443, 452, 111, 450, 201, 180, 239, 486, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 738, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 415, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 422, 0, 220,
	242, 257, 105, 438, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 416, 414, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 434, 437, 432,
	433, 481, 482, 528, 529, 530, 506, 428, 0, 435,
	436, 0, 511, 518, 519, 485, 88, 97, 146, 254,
	194, 122, 243, 418, 431, 115, 441, 0, 0, 454,
	459, 460, 472, 474, 475, 476, 477, 484, 491, 492,
	494, 500, 501, 502, 503, 508, 515, 534, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 522, 510, 0, 467, 525, 440,
	457, 533, 458, 461, 498, 425, 480, 173, 455, 0,
	444, 420, 451, 421, 442, 469, 117, 473, 439, 512,
	483, 524, 145, 445, 531, 147, 489, 0, 219, 161,
	0, 0, 0, 471, 514, 478, 507, 466, 499, 430,
	488, 526, 456, 496, 527, 0, 0, 0, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 493, 521, 453, 495, 497, 419, 490, 0, 423,
	426, 532, 517, 448, 449, 0, 0, 0, 0, 0,
	0, 0, 470, 479, 504, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 446, 0, 487, 0, 0, 0,
	427, 424, 0, 0, 468, 0, 0, 0, 429, 0,
	447, 505, 0, 417, 126, 509, 516, 465, 275, 520,
	463, 462, 523, 192, 0, 223, 129, 144, 103, 141,
	89, 99, 0, 128, 170, 199, 203, 513, 443, 452,
	111, 450, 201, 180, 239, 486, 182, 200, 148, 229,
	193, 238, 248, 249, 226, 246, 253, 216, 92, 225,
	406, 108, 211, 94, 235, 222, 159, 138, 139, 93,
	0, 197, 116, 124, 113, 172, 232, 233, 112, 256,
	100, 245, 96, 415, 244, 166, 228, 236, 160, 153,
	95, 234, 158, 152, 143, 120, 131, 190, 150, 191,
	132, 163, 162, 164, 0, 422, 0, 220, 242, 257,
	105, 438, 227, 251, 252, 0, 0, 106, 125, 119,
	189, 123, 416, 414, 409, 408, 142, 149, 196, 255,
	179, 202, 109, 241, 218, 434, 437, 432, 433, 481,
	482, 528, 529, 530, 506, 428, 0, 435, 436, 0,
	511, 518, 519, 485, 88, 97, 146, 254, 194, 122,
	243, 418, 431, 115, 441, 0, 0, 454, 459, 460,
	472, 474, 475, 476, 477, 484, 491, 492, 494, 500,
	501, 502, 503, 508, 515, 534, 90, 91, 98, 104,
	110, 114, 118, 121, 127, 130, 133, 135, 136, 137,
	140, 151, 154, 155, 156, 157, 167, 168, 169, 171,
	174, 175, 176, 177, 178, 181, 183, 184, 185, 186,
	187, 188, 195, 198, 204, 205, 206, 207, 208, 209,
	210, 212, 213, 214, 215, 221, 224, 230, 231, 240,
	247, 250, 173, 0, 0, 920, 0, 340, 0, 0,
	0, 117, 0, 337, 0, 0, 0, 145, 921, 380,
	147, 0, 0, 219, 161, 0, 0, 0, 0, 0,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 85, 86, 87, 359, 358, 361, 362,
	363, 364, 0, 0, 107, 360, 365, 366, 367, 0,
	0, 0, 335, 352, 0, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 331, 0, 0,
	0, 394, 0, 351, 0, 0, 346, 347, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	393, 0, 0, 275, 0, 0, 391, 0, 192, 0,
	223, 129, 144, 103, 141, 89, 99, 0, 128, 170,
	199, 203, 0, 0, 0, 111, 0, 201, 180, 239,
	0, 182, 200, 148, 229, 193, 238, 248, 249, 226,
	246, 253, 216, 92, 225, 237, 108, 211, 94, 235,
	222, 159, 138, 139, 93, 0, 197, 116, 124, 113,
	172, 232, 233, 112, 256, 100, 245, 96, 101, 244,
	166, 228, 236, 160, 153, 95, 234, 158, 152, 143,
	120, 131, 190, 150, 191, 132, 163, 162, 164, 0,
	0, 0, 220, 242, 257, 105, 0, 227, 251, 252,
	0, 0, 106, 125, 119, 189, 123, 165, 102, 134,
	217, 142, 149, 196, 255, 179, 202, 109, 241, 218,
	381, 392, 387, 388, 385, 386, 384, 383, 382, 395,
	373, 374, 375, 376, 378, 0, 389, 390, 377, 88,
	97, 146, 254, 194, 122, 243, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 98, 104, 110, 114, 118, 121, 127,
	130, 133, 135, 136, 137, 140, 151, 154, 155, 156,
	157, 167, 168, 169, 171, 174, 175, 176, 177, 178,
	181, 183, 184, 185, 186, 187, 188, 195, 198, 204,
	205, 206, 207, 208, 209, 210, 212, 213, 214, 215,
	221, 224, 230, 231, 240, 247, 250, 173, 0, 0,
	0, 0, 340, 0, 0, 0, 117, 0, 337, 0,
	0, 0, 145, 0, 380, 147, 0, 0, 219, 161,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 0, 0, 996, 0, 57, 0, 0, 85, 86,
	87, 359, 358, 361, 362, 363, 364, 0, 0, 107,
	360, 365, 366, 367, 997, 0, 0, 335, 352, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 0, 0, 0, 0, 394, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 393, 0, 0, 275, 0,
	0, 391, 0, 192, 0, 223, 129, 144, 103, 141,
	89, 99, 0, 128, 170, 199, 203, 0, 0, 0,
	111, 0, 201, 180, 239, 0, 182, 200, 148, 229,
	193, 238, 248, 249, 226, 246, 253, 216, 92, 225,
	237, 108, 211, 94, 235, 222, 159, 138, 139, 93,
	0, 197, 116, 124, 113, 172, 232, 233, 112, 256,
	100, 245, 96, 101, 244, 166, 228, 236, 160, 153,
	95, 234, 158, 152, 143, 120, 131, 190, 150, 191,
	132, 163, 162, 164, 0, 0, 0, 220, 242, 257,
	105, 0, 227, 251, 252, 0, 0, 106, 125, 119,
	189, 123, 165, 102, 134, 217, 142, 149, 196, 255,
	179, 202, 109, 241, 218, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 373, 374, 375, 376, 378,
	0, 389, 390, 377, 88, 97, 146, 254, 194, 122,
	243, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 98, 104,
	110, 114, 118, 121, 127, 130, 133, 135, 136, 137,
	140, 151, 154, 155, 156, 157, 167, 168, 169, 171,
	174, 175, 176, 177, 178, 181, 183, 184, 185, 186,
	187, 188, 195, 198, 204, 205, 206, 207, 208, 209,
	210, 212, 213, 214, 215, 221, 224, 230, 231, 240,
	247, 250, 173, 0, 0, 0, 0, 340, 0, 0,
	0, 117, 0, 337, 0, 0, 0, 145, 0, 380,
	147, 0, 0, 219, 161, 0, 0, 0, 0, 0,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 608, 85, 86, 87, 359, 358, 361, 362,
	363, 364, 0, 0, 107, 360, 365, 366, 367, 0,
	0, 0, 335, 352, 0, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 0, 0, 0,
	0, 394, 0, 351, 0, 0, 346, 347, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	393, 0, 0, 275, 0, 0, 391, 0, 192, 0,
	223, 129, 144, 103, 141, 89, 99, 0, 128, 170,
	199, 203, 0, 0, 0, 111, 0, 201, 180, 239,
	0, 182, 200, 148, 229, 193, 238, 248, 249, 226,
	246, 253, 216, 92, 225, 237, 108, 211, 94, 235,
	222, 159, 138, 139, 93, 0, 197, 116, 124, 113,
	172, 232, 233, 112, 256, 100, 245, 96, 101, 244,
	166, 228, 236, 160, 153, 95, 234, 158, 152, 143,
	120, 131, 190, 150, 191, 132, 163, 162, 164, 0,
	0, 0, 220, 242, 257, 105, 0, 227, 251, 252,
	0, 0, 106, 125, 119, 189, 123, 165, 102, 134,
	217, 142, 149, 196, 255, 179, 202, 109, 241, 218,
	381, 392, 387, 388, 385, 386, 384, 383, 382, 395,
	373, 374, 375, 376, 378, 0, 389, 390, 377, 88,
	97, 146, 254, 194, 122, 243, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 98, 104, 110, 114, 118, 121, 127,
	130, 133, 135, 136, 137, 140, 151, 154, 155, 156,
	157, 167, 168, 169, 171, 174, 175, 176, 177, 178,
	181, 183, 184, 185, 186, 187, 188, 195, 198, 204,
	205, 206, 207, 208, 209, 210, 212, 213, 214, 215,
	221, 224, 230, 231, 240, 247, 250, 173, 0, 0,
	0, 0, 340, 0, 0, 0, 117, 0, 337, 0,
	0, 0, 145, 0, 380, 147, 0, 0, 219, 161,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 85, 86,
	87, 359, 358, 361, 362, 363, 364, 0, 0, 107,
	360, 365, 366, 367, 0, 0, 0, 335, 352, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 331, 0, 0, 0, 394, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 393, 0, 0, 275, 0,
	0, 391, 0, 192, 0, 223, 129, 144, 103, 141,
	89, 99, 0, 128, 170, 199, 203, 0, 0, 0,
	111, 0, 201, 180, 239, 0, 182, 200, 148, 229,
	193, 238, 248, 249, 226, 246, 253, 216, 92, 225,
	237, 108, 211, 94, 235, 222, 159, 138, 139, 93,
	0, 197, 116, 124, 113, 172, 232, 233, 112, 256,
	100, 245, 96, 101, 244, 166, 228, 236, 160, 153,
	95, 234, 158, 152, 143, 120, 131, 190, 150, 191,
	132, 163, 162, 164, 0, 0, 0, 220, 242, 257,
	105, 0, 227, 251, 252, 0, 0, 106, 125, 119,
	189, 123, 165, 102, 134, 217, 142, 149, 196, 255,
	179, 202, 109, 241, 218, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 373, 374, 375, 376, 378,
	0, 389, 390, 377, 88, 97, 146, 254, 194, 122,
	243, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 98, 104,
	110, 114, 118, 121, 127, 130, 133, 135, 136, 137,
	140, 151, 154, 155, 156, 157, 167, 168, 169, 171,
	174, 175, 176, 177, 178, 181, 183, 184, 185, 186,
	187, 188, 195, 198, 204, 205, 206, 207, 208, 209,
	210, 212, 213, 214, 215, 221, 224, 230, 231, 240,
	247, 250, 173, 0, 0, 0, 0, 340, 0, 0,
	0, 117, 0, 337, 0, 0, 0, 145, 0, 380,
	147, 0, 0, 219, 161, 0, 0, 0, 0, 0,
	371, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 85, 86, 87, 359, 935, 361, 362,
	363, 364, 0, 0, 107, 360, 365, 366, 367, 0,
	0, 0, 335, 352, 0, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 331, 0, 0,
	0, 394, 0, 351, 0, 0, 346, 347, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	393, 0, 0, 275, 0, 0, 391, 0, 192, 0,
	223, 129, 144, 103, 141, 89, 99, 0, 128, 170,
	199, 203, 0, 0, 0, 111, 0, 201, 180, 239,
	0, 182, 200, 148, 229, 193, 238, 248, 249, 226,
	246, 253, 216, 92, 225, 237, 108, 211, 94, 235,
	222, 159, 138, 139, 93, 0, 197, 116, 124, 113,
	172, 232, 233, 112, 256, 100, 245, 96, 101, 244,
	166, 228, 236, 160, 153, 95, 234, 158, 152, 143,
	120, 131, 190, 150, 191, 132, 163, 162, 164, 0,
	0, 0, 220, 242, 257, 105, 0, 227, 251, 252,
	0, 0, 106, 125, 119, 189, 123, 165, 102, 134,
	217, 142, 149, 196, 255, 179, 202, 109, 241, 218,
	381, 392, 387, 388, 385, 386, 384, 383, 382, 395,
	373, 374, 375, 376, 378, 0, 389, 390, 377, 88,
	97, 146, 254, 194, 122, 243, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 98, 104, 110, 114, 118, 121, 127,
	130, 133, 135, 136, 137, 140, 151, 154, 155, 156,
	157, 167, 168, 169, 171, 174, 175, 176, 177, 178,
	181, 183, 184, 185, 186, 187, 188, 195, 198, 204,
	205, 206, 207, 208, 209, 210, 212, 213, 214, 215,
	221, 224, 230, 231, 240, 247, 250, 173, 0, 0,
	0, 0, 340, 0, 0, 0, 117, 0, 337, 0,
	0, 0, 145, 0, 380, 147, 0, 0, 219, 161,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 85, 86,
	87, 359, 932, 361, 362, 363, 364, 0, 0, 107,
	360, 365, 366, 367, 0, 0, 0, 335, 352, 0,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 331, 0, 0, 0, 394, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 393, 0, 0, 275, 0,
	0, 391, 0, 192, 0, 223, 129, 144, 103, 141,
	89, 99, 0, 128, 170, 199, 203, 0, 0, 0,
	111, 0, 201, 180, 239, 0, 182, 200, 148, 229,
	193, 238, 248, 249, 226, 246, 253, 216, 92, 225,
	237, 108, 211, 94, 235, 222, 159, 138, 139, 93,
	0, 197, 116, 124, 113, 172, 232, 233, 112, 256,
	100, 245, 96, 101, 244, 166, 228, 236, 160, 153,
	95, 234, 158, 152, 143, 120, 131, 190, 150, 191,
	132, 163, 162, 164, 0, 0, 0, 220, 242, 257,
	105, 0, 227, 251, 252, 0, 0, 106, 125, 119,
	189, 123, 165, 102, 134, 217, 142, 149, 196, 255,
	179, 202, 109, 241, 218, 381, 392, 387, 388, 385,
	386, 384, 383, 382, 395, 373, 374, 375, 376, 378,
	0, 389, 390, 377, 88, 97, 146, 254, 194, 122,
	243, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 98, 104,
	110, 114, 118, 121, 127, 130, 133, 135, 136, 137,
	140, 151, 154, 155, 156, 157, 167, 168, 169, 171,
	174, 175, 176, 177, 178, 181, 183, 184, 185, 186,
	187, 188, 195, 198, 204, 205, 206, 207, 208, 209,
	210, 212, 213, 214, 215, 221, 224, 230, 231, 240,
	247, 250, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 340,
	0, 0, 0, 117, 0, 337, 0, 0, 0, 145,
	0, 380, 147, 0, 0, 219, 161, 0, 0, 0,
	0, 0, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 85, 86, 87, 359, 358,
	361, 362, 363, 364, 0, 0, 107, 360, 365, 366,
	367, 0, 0, 0, 335, 352, 0, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 394, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 393, 0, 0, 275, 0, 0, 391, 0,
	192, 0, 223, 129, 144, 103, 141, 89, 99, 0,
	128, 170, 199, 203, 0, 0, 0, 111, 0, 201,
	180, 239, 0, 182, 200, 148, 229, 193, 238, 248,
	249, 226, 246, 253, 216, 92, 225, 237, 108, 211,
	94, 235, 222, 159, 138, 139, 93, 0, 197, 116,
	124, 113, 172, 232, 233, 112, 256, 100, 245, 96,
	101, 244, 166, 228, 236, 160, 153, 95, 234, 158,
	152, 143, 120, 131, 190, 150, 191, 132, 163, 162,
	164, 0, 0, 0, 220, 242, 257, 105, 0, 227,
	251, 252, 0, 0, 106, 125, 119, 189, 123, 165,
	102, 134, 217, 142, 149, 196, 255, 179, 202, 109,
	241, 218, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 373, 374, 375, 376, 378, 0, 389, 390,
	377, 88, 97, 146, 254, 194, 122, 243, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 98, 104, 110, 114, 118,
	121, 127, 130, 133, 135, 136, 137, 140, 151, 154,
	155, 156, 157, 167, 168, 169, 171, 174, 175, 176,
	177, 178, 181, 183, 184, 185, 186, 187, 188, 195,
	198, 204, 205, 206, 207, 208, 209, 210, 212, 213,
	214, 215, 221, 224, 230, 231, 240, 247, 250, 173,
	0, 0, 0, 0, 340, 0, 0, 0, 117, 0,
	337, 0, 0, 0, 145, 0, 380, 147, 0, 0,
	219, 161, 0, 0, 0, 0, 0, 371, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	85, 86, 87, 359, 358, 361, 362, 363, 364, 0,
	0, 107, 360, 365, 366, 367, 0, 0, 0, 335,
	352, 0, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 350, 0, 0, 0, 0, 394, 0,
	351, 0, 0, 346, 347, 348, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 393, 0, 0,
	275, 0, 0, 391, 0, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 0,
	0, 0, 111, 0, 201, 180, 239, 0, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 237, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 101, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 0, 0, 220,
	242, 257, 105, 0, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 165, 102, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 381, 392, 387,
	388, 385, 386, 384, 383, 382, 395, 373, 374, 375,
	376, 378, 0, 389, 390, 377, 88, 97, 146, 254,
	194, 122, 243, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 145,
	0, 380, 147, 0, 0, 219, 161, 0, 0, 0,
	0, 0, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 85, 86, 87, 359, 358,
	361, 362, 363, 364, 0, 0, 107, 360, 365, 366,
	367, 0, 0, 0, 0, 352, 0, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 394, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 393, 0, 0, 275, 0, 0, 391, 0,
	192, 0, 223, 129, 144, 103, 141, 89, 99, 0,
	128, 170, 199, 203, 0, 0, 0, 111, 0, 201,
	180, 239, 1561, 182, 200, 148, 229, 193, 238, 248,
	249, 226, 246, 253, 216, 92, 225, 237, 108, 211,
	94, 235, 222, 159, 138, 139, 93, 0, 197, 116,
	124, 113, 172, 232, 233, 112, 256, 100, 245, 96,
	101, 244, 166, 228, 236, 160, 153, 95, 234, 158,
	152, 143, 120, 131, 190, 150, 191, 132, 163, 162,
	164, 0, 0, 0, 220, 242, 257, 105, 0, 227,
	251, 252, 0, 0, 106, 125, 119, 189, 123, 165,
	102, 134, 217, 142, 149, 196, 255, 179, 202, 109,
	241, 218, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 373, 374, 375, 376, 378, 0, 389, 390,
	377, 88, 97, 146, 254, 194, 122, 243, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 98, 104, 110, 114, 118,
	121, 127, 130, 133, 135, 136, 137, 140, 151, 154,
	155, 156, 157, 167, 168, 169, 171, 174, 175, 176,
	177, 178, 181, 183, 184, 185, 186, 187, 188, 195,
	198, 204, 205, 206, 207, 208, 209, 210, 212, 213,
	214, 215, 221, 224, 230, 231, 240, 247, 250, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 145, 0, 380, 147, 0, 0,
	219, 161, 0, 0, 0, 0, 0, 371, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 608,
	85, 86, 87, 359, 358, 361, 362, 363, 364, 0,
	0, 107, 360, 365, 366, 367, 0, 0, 0, 0,
	352, 0, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 350, 0, 0, 0, 0, 394, 0,
	351, 0, 0, 346, 347, 348, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 393, 0, 0,
	275, 0, 0, 391, 0, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 0,
	0, 0, 111, 0, 201, 180, 239, 0, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 237, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 101, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 0, 0, 220,
	242, 257, 105, 0, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 165, 102, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 381, 392, 387,
	388, 385, 386, 384, 383, 382, 395, 373, 374, 375,
	376, 378, 0, 389, 390, 377, 88, 97, 146, 254,
	194, 122, 243, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 145,
	0, 380, 147, 0, 0, 219, 161, 0, 0, 0,
	0, 0, 371, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 85, 86, 87, 359, 358,
	361, 362, 363, 364, 0, 0, 107, 360, 365, 366,
	367, 0, 0, 0, 0, 352, 0, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 394, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 393, 0, 0, 275, 0, 0, 391, 0,
	192, 0, 223, 129, 144, 103, 141, 89, 99, 0,
	128, 170, 199, 203, 0, 0, 0, 111, 0, 201,
	180, 239, 0, 182, 200, 148, 229, 193, 238, 248,
	249, 226, 246, 253, 216, 92, 225, 237, 108, 211,
	94, 235, 222, 159, 138, 139, 93, 0, 197, 116,
	124, 113, 172, 232, 233, 112, 256, 100, 245, 96,
	101, 244, 166, 228, 236, 160, 153, 95, 234, 158,
	152, 143, 120, 131, 190, 150, 191, 132, 163, 162,
	164, 0, 0, 0, 220, 242, 257, 105, 0, 227,
	251, 252, 0, 0, 106, 125, 119, 189, 123, 165,
	102, 134, 217, 142, 149, 196, 255, 179, 202, 109,
	241, 218, 381, 392, 387, 388, 385, 386, 384, 383,
	382, 395, 373, 374, 375, 376, 378, 0, 389, 390,
	377, 88, 97, 146, 254, 194, 122, 243, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 98, 104, 110, 114, 118,
	121, 127, 130, 133, 135, 136, 137, 140, 151, 154,
	155, 156, 157, 167, 168, 169, 171, 174, 175, 176,
	177, 178, 181, 183, 184, 185, 186, 187, 188, 195,
	198, 204, 205, 206, 207, 208, 209, 210, 212, 213,
	214, 215, 221, 224, 230, 231, 240, 247, 250, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 145, 0, 0, 147, 0, 0,
	219, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	0, 0, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	275, 0, 0, 0, 0, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 0,
	0, 0, 111, 0, 201, 180, 239, 0, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 237, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 101, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 0, 0, 220,
	242, 257, 105, 0, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 165, 102, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 97, 146, 254,
	194, 122, 243, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 173, 0, 0, 0, 633, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 145,
	0, 0, 147, 0, 0, 219, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 87, 0, 635,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 630, 629, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 275, 0, 0, 0, 0,
	192, 0, 223, 129, 144, 103, 141, 89, 99, 0,
	128, 170, 199, 203, 0, 0, 0, 111, 0, 201,
	180, 239, 0, 182, 200, 148, 229, 193, 238, 248,
	249, 226, 246, 253, 216, 92, 225, 237, 108, 211,
	94, 235, 222, 159, 138, 139, 93, 0, 197, 116,
	124, 113, 172, 232, 233, 112, 256, 100, 245, 96,
	101, 244, 166, 228, 236, 160, 153, 95, 234, 158,
	152, 143, 120, 131, 190, 150, 191, 132, 163, 162,
	164, 0, 0, 0, 220, 242, 257, 105, 0, 227,
	251, 252, 0, 0, 106, 125, 119, 189, 123, 165,
	102, 134, 217, 142, 149, 196, 255, 179, 202, 109,
	241, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 97, 146, 254, 194, 122, 243, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 98, 104, 110, 114, 118,
	121, 127, 130, 133, 135, 136, 137, 140, 151, 154,
	155, 156, 157, 167, 168, 169, 171, 174, 175, 176,
	177, 178, 181, 183, 184, 185, 186, 187, 188, 195,
	198, 204, 205, 206, 207, 208, 209, 210, 212, 213,
	214, 215, 221, 224, 230, 231, 240, 247, 250, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 145, 0, 0, 147, 0, 0,
	219, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 79, 80, 0,
	76, 0, 0, 0, 81, 192, 0, 223, 129, 144,
	103, 141, 89, 99, 0, 128, 170, 199, 203, 0,
	0, 0, 111, 0, 201, 180, 239, 0, 182, 200,
	148, 229, 193, 238, 248, 249, 226, 246, 253, 216,
	92, 225, 237, 108, 211, 94, 235, 222, 159, 138,
	139, 93, 0, 197, 116, 124, 113, 172, 232, 233,
	112, 256, 100, 245, 96, 101, 244, 166, 228, 236,
	160, 153, 95, 234, 158, 152, 143, 120, 131, 190,
	150, 191, 132, 163, 162, 164, 0, 0, 0, 220,
	242, 257, 105, 0, 227, 251, 252, 0, 0, 106,
	125, 119, 189, 123, 165, 102, 134, 217, 142, 149,
	196, 255, 179, 202, 109, 241, 218, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 97, 146, 254,
	194, 122, 243, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	98, 104, 110, 114, 118, 121, 127, 130, 133, 135,
	136, 137, 140, 151, 154, 155, 156, 157, 167, 168,
	169, 171, 174, 175, 176, 177, 178, 181, 183, 184,
	185, 186, 187, 188, 195, 198, 204, 205, 206, 207,
	208, 209, 210, 212, 213, 214, 215, 221, 224, 230,
	231, 240, 247, 250, 173, 0, 0, 0, 979, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 145,
	0, 0, 147, 0, 0, 219, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 87, 0, 981,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 275, 0, 0, 0, 0,
	192, 0, 223, 129, 144, 103, 141, 89, 99, 0,
	128, 170, 199, 203, 0, 0, 0, 111, 0, 201,
	180, 239, 0, 182, 200, 148, 229, 193, 238, 248,
	249, 226, 246, 253, 216, 92, 225, 237, 108, 211,
	94, 235, 222, 159, 138, 139, 93, 0, 197, 116,
	124, 113, 172, 232, 233, 112, 256, 100, 245, 96,
	101, 244, 166, 228, 236, 160, 153, 95, 234, 158,
	152, 143, 120, 131, 190, 150, 191, 132, 163, 162,
	164, 0, 0, 0, 220, 242, 257, 105, 0, 227,
	251, 252, 0, 0, 106, 125, 119, 189, 123, 165,
	102, 134, 217, 142, 149, 196, 255, 179, 202, 109,
	241, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 97, 146, 254, 194, 122, 243, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 98, 104, 110, 114, 118,
	121, 127, 130, 133, 135, 136, 137, 140, 151, 154,
	155, 156, 157, 167, 168, 169, 171, 174, 175, 176,
	177, 178, 181, 183, 184, 185, 186, 187, 188, 195,
	198, 204, 205, 206, 207, 208, 209, 210, 212, 213,
	214, 215, 221, 224, 230, 231, 240, 247, 250, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 145, 0, 0, 147,
	0, 0, 219, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 275, 0, 0, 0, 0, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 0, 0, 0, 111, 0, 201, 180, 239, 0,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 0,
	0, 220, 242, 257, 105, 0, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 97,
	146, 254, 194, 122, 243, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 173, 0, 0, 0,
	979, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 145, 0, 0, 147, 0, 0, 219, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 87,
	0, 981, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 275, 0, 0,
	0, 0, 192, 0, 223, 129, 144, 103, 141, 89,
	99, 0, 128, 170, 199, 203, 0, 0, 0, 111,
	0, 201, 180, 239, 0, 977, 200, 148, 229, 193,
	238, 248, 249, 226, 246, 253, 216, 92, 225, 237,
	108, 211, 94, 235, 222, 159, 138, 139, 93, 0,
	197, 116, 124, 113, 172, 232, 233, 112, 256, 100,
	245, 96, 101, 244, 166, 228, 236, 160, 153, 95,
	234, 158, 152, 143, 120, 131, 190, 150, 191, 132,
	163, 162, 164, 0, 0, 0, 220, 242, 257, 105,
	0, 227, 251, 252, 0, 0, 106, 125, 119, 189,
	123, 165, 102, 134, 217, 142, 149, 196, 255, 179,
	202, 109, 241, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 97, 146, 254, 194, 122, 243,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 98, 104, 110,
	114, 118, 121, 127, 130, 133, 135, 136, 137, 140,
	151, 154, 155, 156, 157, 167, 168, 169, 171, 174,
	175, 176, 177, 178, 181, 183, 184, 185, 186, 187,
	188, 195, 198, 204, 205, 206, 207, 208, 209, 210,
	212, 213, 214, 215, 221, 224, 230, 231, 240, 247,
	250, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 145, 0, 0, 147,
	0, 0, 219, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 87, 0, 0, 869, 0, 0,
	870, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 275, 0, 0, 0, 0, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 0, 0, 0, 111, 0, 201, 180, 239, 0,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 0,
	0, 220, 242, 257, 105, 0, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 97,
	146, 254, 194, 122, 243, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 748, 0, 0,
	0, 145, 0, 0, 147, 0, 0, 219, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 87,
	0, 747, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 275, 0, 0,
	0, 0, 192, 0, 223, 129, 144, 103, 141, 89,
	99, 0, 128, 170, 199, 203, 0, 0, 0, 111,
	0, 201, 180, 239, 0, 182, 200, 148, 229, 193,
	238, 248, 249, 226, 246, 253, 216, 92, 225, 237,
	108, 211, 94, 235, 222, 159, 138, 139, 93, 0,
	197, 116, 124, 113, 172, 232, 233, 112, 256, 100,
	245, 96, 101, 244, 166, 228, 236, 160, 153, 95,
	234, 158, 152, 143, 120, 131, 190, 150, 191, 132,
	163, 162, 164, 0, 0, 0, 220, 242, 257, 105,
	0, 227, 251, 252, 0, 0, 106, 125, 119, 189,
	123, 165, 102, 134, 217, 142, 149, 196, 255, 179,
	202, 109, 241, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 97, 146, 254, 194, 122, 243,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 98, 104, 110,
	114, 118, 121, 127, 130, 133, 135, 136, 137, 140,
	151, 154, 155, 156, 157, 167, 168, 169, 171, 174,
	175, 176, 177, 178, 181, 183, 184, 185, 186, 187,
	188, 195, 198, 204, 205, 206, 207, 208, 209, 210,
	212, 213, 214, 215, 221, 224, 230, 231, 240, 247,
	250, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 145, 0, 0, 147,
	0, 0, 219, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 275, 0, 0, 0, 0, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 0, 0, 0, 111, 0, 201, 180, 239, 0,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 0,
	0, 220, 242, 257, 105, 0, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 97,
	146, 254, 194, 122, 243, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 145, 0, 0, 147, 0, 0, 219, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 85, 86, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 275, 0, 0,
	0, 0, 192, 0, 223, 129, 144, 103, 141, 89,
	99, 0, 128, 170, 199, 203, 0, 0, 0, 111,
	0, 201, 180, 239, 0, 182, 200, 148, 229, 193,
	238, 248, 249, 226, 246, 253, 216, 92, 225, 237,
	108, 211, 94, 235, 222, 159, 138, 139, 93, 0,
	197, 116, 124, 113, 172, 232, 233, 112, 256, 100,
	245, 96, 101, 244, 166, 228, 236, 160, 153, 95,
	234, 158, 152, 143, 120, 131, 190, 150, 191, 132,
	163, 162, 164, 0, 0, 0, 220, 242, 257, 105,
	0, 227, 251, 252, 0, 0, 106, 125, 119, 189,
	123, 165, 102, 134, 217, 142, 149, 196, 255, 179,
	202, 109, 241, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 97, 146, 254, 194, 122, 243,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 98, 104, 110,
	114, 118, 121, 127, 130, 133, 135, 136, 137, 140,
	151, 154, 155, 156, 157, 167, 168, 169, 171, 174,
	175, 176, 177, 178, 181, 183, 184, 185, 186, 187,
	188, 195, 198, 204, 205, 206, 207, 208, 209, 210,
	212, 213, 214, 215, 221, 224, 230, 231, 240, 247,
	250, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 145, 0, 0, 147,
	0, 0, 219, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 87, 0, 981, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 275, 0, 0, 0, 0, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 0, 0, 0, 111, 0, 201, 180, 239, 0,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 0,
	0, 220, 242, 257, 105, 0, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 97,
	146, 254, 194, 122, 243, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 145, 0, 0, 147, 0, 0, 219, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 86, 87,
	0, 635, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 275, 0, 0,
	0, 0, 192, 0, 223, 129, 144, 103, 141, 89,
	99, 0, 128, 170, 199, 203, 0, 0, 0, 111,
	0, 201, 180, 239, 0, 182, 200, 148, 229, 193,
	238, 248, 249, 226, 246, 253, 216, 92, 225, 237,
	108, 211, 94, 235, 222, 159, 138, 139, 93, 0,
	197, 116, 124, 113, 172, 232, 233, 112, 256, 100,
	245, 96, 101, 244, 166, 228, 236, 160, 153, 95,
	234, 158, 152, 143, 120, 131, 190, 150, 191, 132,
	163, 162, 164, 0, 0, 0, 220, 242, 257, 105,
	0, 227, 251, 252, 0, 0, 106, 125, 119, 189,
	123, 165, 102, 134, 217, 142, 149, 196, 255, 179,
	202, 109, 241, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 97, 146, 254, 194, 122, 243,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 98, 104, 110,
	114, 118, 121, 127, 130, 133, 135, 136, 137, 140,
	151, 154, 155, 156, 157, 167, 168, 169, 171, 174,
	175, 176, 177, 178, 181, 183, 184, 185, 186, 187,
	188, 195, 198, 204, 205, 206, 207, 208, 209, 210,
	212, 213, 214, 215, 221, 224, 230, 231, 240, 247,
	250, 173, 0, 0, 0, 0, 0, 0, 0, 718,
	117, 0, 0, 0, 0, 0, 145, 0, 0, 147,
	0, 0, 219, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 275, 0, 0, 0, 0, 192, 0, 223,
	129, 144, 103, 141, 89, 99, 0, 128, 170, 199,
	203, 0, 0, 0, 111, 0, 201, 180, 239, 0,
	182, 200, 148, 229, 193, 238, 248, 249, 226, 246,
	253, 216, 92, 225, 237, 108, 211, 94, 235, 222,
	159, 138, 139, 93, 0, 197, 116, 124, 113, 172,
	232, 233, 112, 256, 100, 245, 96, 101, 244, 166,
	228, 236, 160, 153, 95, 234, 158, 152, 143, 120,
	131, 190, 150, 191, 132, 163, 162, 164, 0, 0,
	0, 220, 242, 257, 105, 0, 227, 251, 252, 0,
	0, 106, 125, 119, 189, 123, 165, 102, 134, 217,
	142, 149, 196, 255, 179, 202, 109, 241, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 97,
	146, 254, 194, 122, 243, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 98, 104, 110, 114, 118, 121, 127, 130,
	133, 135, 136, 137, 140, 151, 154, 155, 156, 157,
	167, 168, 169, 171, 174, 175, 176, 177, 178, 181,
	183, 184, 185, 186, 187, 188, 195, 198, 204, 205,
	206, 207, 208, 209, 210, 212, 213, 214, 215, 221,
	224, 230, 231, 240, 247, 250, 398, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 145, 0,
	0, 147, 0, 0, 219, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 275, 0, 0, 0, 0, 192,
	0, 223, 129, 144, 103, 141, 89, 99, 0, 128,
	170, 199, 203, 0, 0, 0, 111, 0, 201, 180,
	239, 0, 182, 200, 148, 229, 193, 238, 248, 249,
	226, 246, 253, 216, 92, 225, 237, 108, 211, 94,
	235, 222, 159, 138, 139, 93, 0, 197, 116, 124,
	113, 172, 232, 233, 112, 256, 100, 245, 96, 101,
	244, 166, 228, 236, 160, 153, 95, 234, 158, 152,
	143, 120, 131, 190, 150, 191, 132, 163, 162, 164,
	0, 0, 0, 220, 242, 257, 105, 0, 227, 251,
	252, 0, 0, 106, 125, 119, 189, 123, 165, 102,
	134, 217, 142, 149, 196, 255, 179, 202, 109, 241,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 97, 146, 254, 194, 122, 243, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 98, 104, 110, 114, 118, 121,
	127, 130, 133, 135, 136, 137, 140, 151, 154, 155,
	156, 157, 167, 168, 169, 171, 174, 175, 176, 177,
	178, 181, 183, 184, 185, 186, 187, 188, 195, 198,
	204, 205, 206, 207, 208, 209, 210, 212, 213, 214,
	215, 221, 224, 230, 231, 240, 247, 250, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 145, 0, 0, 147, 0, 0, 219,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 270, 0, 275,
	0, 0, 0, 0, 192, 0, 223, 129, 144, 103,
	141, 89, 99, 0, 128, 170, 199, 203, 0, 0,
	0, 111, 0, 201, 180, 239, 0, 182, 200, 148,
	229, 193, 238, 248, 249, 226, 246, 253, 216, 92,
	225, 237, 108, 211, 94, 235, 222, 159, 138, 139,
	93, 0, 197, 116, 124, 113, 172, 232, 233, 112,
	256, 100, 245, 96, 101, 244, 166, 228, 236, 160,
	153, 95, 234, 158, 152, 143, 120, 131, 190, 150,
	191, 132, 163, 162, 164, 0, 0, 0, 220, 242,
	257, 105, 0, 227, 251, 252, 0, 0, 106, 125,
	119, 189, 123, 165, 102, 134, 217, 142, 149, 196,
	255, 179, 202, 109, 241, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 97, 146, 254, 194,
	122, 243, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 91, 98,
	104, 110, 114, 118, 121, 127, 130, 133, 135, 136,
	137, 140, 151, 154, 155, 156, 157, 167, 168, 169,
	171, 174, 175, 176, 177, 178, 181, 183, 184, 185,
	186, 187, 188, 195, 198, 204, 205, 206, 207, 208,
	209, 210, 212, 213, 214, 215, 221, 224, 230, 231,
	240, 247, 250, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 145, 0,
	0, 147, 0, 0, 219, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 275, 0, 0, 0, 0, 192,
	0, 223, 129, 144, 103, 141, 89, 99, 0, 128,
	170, 199, 203, 0, 0, 0, 111, 0, 201, 180,
	239, 0, 182, 200, 148, 229, 193, 238, 248, 249,
	226, 246, 253, 216, 92, 225, 237, 108, 211, 94,
	235, 222, 159, 138, 139, 93, 0, 197, 116, 124,
	113, 172, 232, 233, 112, 256, 100, 245, 96, 101,
	244, 166, 228, 236, 160, 153, 95, 234, 158, 152,
	143, 120, 131, 190, 150, 191, 132, 163, 162, 164,
	0, 0, 0, 220, 242, 257, 105, 0, 227, 251,
	252, 0, 0, 106, 125, 119, 189, 123, 165, 102,
	134, 217, 142, 149, 196, 255, 179, 202, 109, 241,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 97, 146, 254, 194, 122, 243, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 98, 104, 110, 114, 118, 121,
	127, 130, 133, 135, 136, 137, 140, 151, 154, 155,
	156, 157, 167, 168, 169, 171, 174, 175, 176, 177,
	178, 181, 183, 184, 185, 186, 187, 188, 195, 198,
	204, 205, 206, 207, 208, 209, 210, 212, 213, 214,
	215, 221, 224, 230, 231, 240, 247, 250,
}
var yyPact = [...]int{

	2811, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 966, 1024, -1000, -1000, -1000, -1000,
	-1000, -1000, 321, 11781, 43, 128, -19, 15820, 127, 215,
	16155, -1000, 29, -1000, -1000, -268, -1000, -1000, -1000, -1000,
	-1000, -53, -79, -1000, 694, -1000, -1000, -1000, -1000, -1000,
	953, 959, 791, 948, 951, -1000, 8419, 95, 95, 15485,
	7079, -1000, -1000, 320, 16155, 123, 16155, -149, 93, 93,
	93, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 126, 16155,
	524, 524, 202, -1000, 16155, 92, 524, 92, 92, 92,
	16155, -1000, 184, -1000, -1000, -1000, 16155, 524, 898, 316,
	82, 4643, -1000, 185, -1000, 4643, 37, 4643, -44, 986,
	38, -31, -1000, 4643, -1000, -1000, -1000, -1000, -1000, -1000,
	115, 330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	482, 926, 9771, 9771, 966, -1000, 694, -1000, -1000, -1000,
	881, 8419, -1000, -1000, 945, -1000, -1000, -1000, -1000, 360,
	997, -1000, 11446, 183, -1000, 9771, 1664, 548, -1000, -1000,
	548, -1000, -1000, 166, -1000, -1000, 10776, 10776, 10776, 10776,
	10776, 10776, 10776, 10776, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 548, -1000,
	9436, 548, 548, 548, 548, 548, 548, 548, 548, 9771,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	548, 548, 548, 548, 548, 548, 15143, 14138, 16155, 840,
	801, -1000, -1000, 182, 708, 6731, -57, -1000, -1000, -1000,
	327, 13468, -1000, -1000, -1000, 895, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 690, 16155, -1000, 2569, -1000,
	524, 4643, 106, 524, 324, 524, 16155, 16155, 4643, 4643,
	4643, 45, 78, 74, 16155, 706, 101, 16155, 936, 842,
	16155, 524, 524, -1000, 6035, -1000, 4643, 316, -1000, 475,
	9771, 4643, 4643, 4643, 16155, 4643, 4643, -1000, -1000, -1000,
	309, -1000, -1000, -1000, -1000, 4643, 4643, -1000, 996, 300,
	-1000, -1000, -1000, -1000, 9771, 244, -1000, 839, -1000, -1000,
	-1000, -1000, -1000, -1000, -125, -1000, -1000, -1000, -1000, -1000,
	1019, 219, 503, 177, 702, -1000, 477, 953, 482, 945,
	13133, 765, -1000, 945, -1000, -1000, -1000, 16155, -1000, 9771,
	9771, 439, -1000, 14808, -1000, -1000, 5687, 250, 10776, 451,
	273, 10776, 10776, 10776, 10776, 10776, 10776, 10776, 10776, 10776,
	10776, 10776, 10776, 10776, 10776, 10776, 570, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 524, -1000, 694, 651, 651,
	193, 193, 193, 193, 193, 193, 193, 11111, 7414, 482,
	685, 263, 9436, 8419, 8419, 9771, 9771, 9089, 8754, 8419,
	908, 325, 263, 16155, -1000, -1000, 10441, -1000, -1000, -1000,
	-1000, -1000, 482, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16155, 16155, 8419, 8419, 8419, 8419, 8419, 58, 16155, -1000,
	741, 788, -1000, -1000, -1000, 930, 12463, 12798, 58, 608,
	14138, 16155, -1000, -1000, 14138, 16155, 5339, 6383, -57, -1000,
	612, -1000, -111, -122, 7749, 192, -1000, -1000, -1000, -1000,
	4295, 372, 501, 442, -33, -1000, -1000, -1000, 711, -1000,
	711, 711, 711, 711, -1, -1, -1, -1, -1000, -1000,
	-1000, -1000, -1000, 784, 746, -1000, 711, 711, 711, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 743, 743, 743,
	722, 722, 802, -1000, 16155, 4643, 933, 4643, -1000, 75,
	-1000, -1000, -1000, 16155, 16155, 16155, 16155, 16155, 149, 16155,
	16155, 701, -1000, 16155, 4643, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 263, -1000, -1000, -1000, -1000, -1000, -1000,
	16155, -1000, -1000, -1000, -1000, 16155, 316, 16155, 16155, 263,
	-1000, 461, 16155, -1000, -1000, -1000, -1000, 877, 9771, 9771,
	6035, 9771, -1000, -1000, -1000, 926, -1000, 963, -1000, 887,
	885, 979, 8419, 14138, 945, -1000, 250, 281, -1000, -1000,
	423, -1000, -1000, -1000, -1000, 176, 548, -1000, 1771, -1000,
	-1000, -1000, -1000, 451, 10776, 10776, 10776, 357, 1771, 2235,
	1127, 428, 193, 547, 547, 201, 201, 201, 201, 201,
	833, 833, -1000, -1000, -1000, 482, -1000, -1000, -1000, 482,
	8419, 8419, 698, -1000, 9771, -1000, 482, 667, 667, 318,
	308, 274, 991, 667, 248, 988, 667, 667, 8419, -1000,
	-1000, 338, -1000, 9771, 482, -1000, 173, -1000, 511, 624,
	614, 667, 482, 482, 667, 667, 704, 548, -1000, 16155,
	14138, 14138, 14138, 14138, 14138, -1000, 865, 855, -1000, 858,
	857, 864, 16155, -1000, 672, 12463, 170, 548, -1000, 14473,
	-1000, -1000, 979, 14138, 569, -1000, 569, -1000, 171, -1000,
	-1000, 612, -57, -64, -1000, -1000, -1000, -1000, 263, -1000,
	601, 599, 3947, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	725, 524, -1000, 922, 208, 236, 524, 921, -1000, -1000,
	-1000, 901, -1000, 332, -61, -1000, -1000, 421, -1, -1,
	-1000, -1000, 192, 893, 192, 192, 192, 460, 460, -1000,
	-1000, -1000, -1000, 412, -1000, -1000, -1000, 410, -1000, 838,
	16155, 4643, -1000, -1000, -1000, -1000, 291, 291, 217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	57, 719, -1000, -1000, -1000, -1000, 24, 44, 97, -1000,
	4643, -1000, 300, 300, -1000, -1000, -1000, -1000, -1000, 875,
	263, 263, 156, -1000, -1000, 16155, -1000, -1000, -1000, -1000,
	976, 9771, -1000, 590, -1000, -1000, -1000, -1000, 4991, 8419,
	-1000, 357, 1771, 1901, -1000, 10776, 10776, -1000, -1000, 667,
	667, 263, -1000, -1000, -1000, 61, 570, 61, 10776, 10776,
	-1000, 10776, 10776, -1000, -162, 718, 264, -1000, 9771, 310,
	-1000, 6035, -1000, 10776, 10776, -1000, -1000, -1000, -1000, -1000,
	836, 16155, 548, -1000, 12463, 16155, 620, -1000, 322, 788,
	800, 823, 834, -1000, -1000, -1000, -1000, 843, -1000, 827,
	-1000, -1000, -1000, -1000, -1000, 119, 110, 109, 16155, -1000,
	966, 569, -1000, -1000, 211, -1000, -1000, -123, -105, -1000,
	-1000, -1000, 4295, -1000, 4295, 16155, 73, -1000, 524, 524,
	-1000, -1000, -1000, 724, 821, 10776, -1000, -1000, -1000, 494,
	192, 192, -1000, 247, -1000, -1000, -1000, 663, -1000, 650,
	550, 647, 16155, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16155, -1000, -1000, -1000, -1000, -1000, 16155, -169,
	524, 16155, 16155, 16155, 16155, -1000, 316, 316, -1000, 6035,
	-1000, 969, 955, 263, -1000, -1000, 482, -1000, 10776, 1771,
	1771, -1000, -1000, 482, 711, 711, -1000, 711, 722, -1000,
	711, 19, 711, 15, 482, 482, 1841, 1686, 1570, 586,
	548, -156, -1000, 263, 9771, -1000, 1468, 538, -1000, 924,
	514, 521, -1000, -1000, 8084, 482, 645, 147, 641, -1000,
	966, 16155, 9771, -1000, -1000, 9771, 712, -1000, 9771, -1000,
	-1000, -1000, 548, 548, 548, 641, 953, -1000, -1000, -1000,
	-1000, 3947, -1000, 622, -1000, 711, -1000, -1000, -1000, 16155,
	-28, 1018, 1771, -1000, -1000, -1000, -1000, -1000, -1, 455,
	-1, 389, -1000, 388, 4643, -1000, -1000, -1000, -1000, 929,
	-1000, 6035, -1000, -1000, 710, 787, -1000, -1000, -1000, -1000,
	-1000, 9771, 9771, -1000, 1771, -1000, -1000, 130, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10776, 10776, 10776, 10776,
	10776, 953, 447, 263, 10776, 10776, 920, -1000, 548, -1000,
	-1000, 817, 16155, 16155, -1000, 16155, 953, -1000, 263, 263,
	16155, 263, 13803, 16155, 16155, 12116, -1000, 164, 16155, -1000,
	617, -1000, 221, -1000, -86, 192, -1000, 192, 487, 485,
	-1000, 548, 542, -1000, 271, 16155, 16155, 263, 537, -1000,
	-1000, 511, 511, 511, 511, 50, 482, -1000, 511, 511,
	1017, -1000, 548, -1000, 694, 142, -1000, -1000, -1000, 610,
	566, -1000, 566, 566, 170, 164, -1000, 524, 262, 436,
	-1000, 70, 16155, 351, 918, -1000, 903, -1000, -1000, -1000,
	-1000, -1000, 53, 6035, 4295, 544, -1000, -1000, -1000, -1000,
	-1000, 482, 51, -173, -1000, -1000, -1000, 16155, 521, 482,
	16155, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, -1000,
	-1000, 16155, -1000, -1000, 435, -1000, -1000, 531, -1000, 16155,
	-1000, -1000, 719, -1000, 874, -166, -178, 509, -1000, -1000,
	-1000, 705, -1000, -1000, 53, 884, -169, -1000, 872, -1000,
	16155, -1000, 54, -1000, -171, 499, 46, -175, 816, 548,
	-179, 810, -1000, 995, 10106, -1000, -1000, 1001, 190, 190,
	511, 482, -1000, -1000, -1000, 80, 414, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1240, 43, 564, 1239, 1220, 1219, 1218, 1217, 89,
	88, 87, 1215, 1213, 1212, 1211, 1208, 1205, 1203, 1202,
	1197, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1184, 100,
	1183, 1182, 1180, 1178, 1176, 1174, 1173, 1170, 1168, 46,
	56, 42, 59, 1161, 58, 1366, 1151, 69, 57, 60,
	1150, 31, 1149, 1147, 67, 1146, 1145, 52, 1144, 1142,
	45, 1140, 73, 1139, 12, 28, 1138, 1137, 1136, 1135,
	84, 140, 1134, 1133, 15, 1132, 1129, 86, 1128, 53,
	20, 14, 19, 18, 1126, 1316, 7, 1125, 55, 1124,
	1123, 1122, 1121, 26, 1118, 64, 1117, 54, 61, 1116,
	13, 78, 30, 21, 5, 1115, 1114, 17, 65, 50,
	62, 1113, 1110, 522, 1108, 1107, 47, 1106, 1105, 1104,
	29, 1103, 93, 423, 1100, 1095, 1093, 1091, 33, 883,
	1889, 11, 72, 1090, 1089, 1088, 2551, 39, 51, 23,
	1086, 63, 525, 37, 1085, 1084, 35, 1083, 1082, 1080,
	1079, 1078, 1077, 1073, 66, 1072, 1071, 1070, 137, 25,
	1069, 1068, 68, 24, 1066, 1063, 1059, 48, 79, 1057,
	1056, 49, 1055, 1054, 22, 1050, 1049, 1048, 1047, 1046,
	32, 6, 1045, 16, 1044, 10, 1042, 27, 1041, 4,
	1040, 8, 1038, 3, 0, 1034, 9, 36, 2, 1033,
	1, 1032, 1030, 1523, 709, 76, 1006, 95,
}
var yyR1 = [...]int{

	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 194, 194, 194, 2,
	2, 2, 8, 3, 4, 4, 5, 5, 9, 9,
	32, 32, 10, 11, 11, 11, 11, 205, 205, 54,
	54, 55, 55, 101, 101, 12, 13, 13, 110, 110,
	109, 109, 109, 111, 111, 111, 111, 144, 144, 14,
	14, 14, 14, 14, 14, 14, 196, 196, 195, 193,
	193, 192, 192, 191, 20, 176, 178, 178, 177, 177,
	177, 177, 168, 147, 147, 147, 147, 150, 150, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 149, 149,
	149, 149, 149, 151, 151, 151, 151, 151, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 167, 167, 154, 154, 162, 162, 163, 163, 163,
	160, 160, 161, 161, 164, 164, 164, 156, 156, 157,
	157, 165, 165, 158, 158, 158, 159, 159, 159, 166,
	166, 166, 166, 166, 155, 155, 169, 169, 186, 186,
	185, 185, 185, 175, 175, 182, 182, 182, 182, 182,
	172, 172, 172, 173, 173, 171, 171, 174, 174, 184,
	184, 183, 170, 170, 187, 187, 187, 187, 199, 200,
	198, 198, 198, 198, 198, 179, 179, 179, 180, 180,
	180, 181, 181, 181, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 190, 188, 188, 189, 189,
	16, 21, 21, 17, 17, 17, 17, 17, 18, 18,
	22, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 117, 117,
	119, 119, 115, 115, 118, 118, 116, 116, 116, 120,
	120, 120, 121, 121, 145, 145, 145, 24, 24, 26,
	26, 27, 28, 33, 33, 33, 33, 34, 34, 34,
	7, 7, 7, 7, 6, 25, 25, 25, 25, 25,
	25, 25, 19, 206, 29, 30, 30, 31, 31, 31,
	36, 36, 36, 35, 35, 35, 41, 41, 43, 43,
	43, 43, 43, 44, 44, 44, 44, 44, 44, 40,
	40, 42, 42, 42, 42, 133, 133, 133, 132, 132,
	46, 46, 47, 47, 48, 48, 49, 49, 49, 49,
	63, 63, 100, 100, 102, 102, 50, 50, 50, 50,
	51, 51, 52, 52, 53, 53, 140, 140, 139, 139,
	139, 138, 138, 56, 56, 56, 58, 57, 57, 57,
	57, 59, 59, 61, 61, 60, 60, 62, 64, 64,
	64, 64, 64, 65, 65, 45, 45, 45, 45, 45,
	45, 45, 114, 114, 67, 67, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 78, 78, 78, 78,
	78, 78, 68, 68, 68, 68, 68, 68, 68, 39,
	39, 79, 79, 79, 85, 80, 80, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 75,
	75, 75, 75, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 207, 207, 77, 76, 76, 76, 76, 76,
	76, 76, 37, 37, 37, 37, 37, 143, 143, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 89, 89, 38, 38, 87, 87, 88, 90,
	90, 86, 86, 86, 70, 70, 70, 70, 70, 70,
	70, 70, 72, 72, 72, 91, 91, 92, 92, 93,
	93, 94, 94, 95, 96, 96, 96, 97, 97, 97,
	97, 98, 98, 98, 69, 69, 69, 69, 69, 69,
	99, 99, 99, 99, 103, 103, 81, 81, 83, 83,
	82, 84, 104, 104, 107, 105, 105, 105, 108, 108,
	108, 108, 106, 106, 106, 135, 135, 135, 112, 112,
	122, 122, 123, 123, 113, 113, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 126,
	126, 127, 127, 127, 134, 134, 130, 130, 131, 131,
	136, 136, 137, 137, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 203, 204, 141, 142, 142, 142,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 4,
	6, 7, 5, 8, 1, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 2, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 0, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 1, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	4, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 2, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -201, -1, -2, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -22, -23, -24, -26, -27,
	-28, -6, -25, -19, -3, -4, 6, 7, -32, 9,
	10, 30, -20, 119, 120, 122, 121, 155, 123, 148,
	52, 169, 170, 172, 173, -34, 25, 149, 150, 153,
	154, 31, 32, 125, -203, 8, 255, 56, -202, 356,
	-93, 15, -31, 5, -29, -206, -29, -29, -29, -29,
	-29, -176, -178, 56, 94, -127, 129, 76, 247, 126,
	127, 133, -130, -194, -129, 59, 60, 61, 265, 141,
	297, 298, 169, 180, 174, 201, 193, 266, 299, 142,
	191, 194, 234, 139, 300, 221, 228, 70, 172, 243,
	301, 151, 189, 185, 302, 274, 183, 27, 303, 230,
	206, 304, 270, 232, 184, 229, 125, 305, 144, 137,
	306, 207, 211, 307, 235, 308, 309, 310, 178, 179,
	311, 140, 237, 205, 138, 33, 267, 36, 159, 238,
	209, 312, 204, 200, 313, 314, 315, 316, 203, 177,
	199, 40, 213, 212, 214, 233, 196, 317, 318, 319,
	145, 320, 186, 18, 321, 322, 323, 324, 325, 241,
	154, 326, 157, 327, 328, 329, 330, 331, 332, 231,
	208, 210, 134, 161, 269, 333, 239, 182, 334, 146,
	158, 153, 242, 147, 335, 336, 337, 338, 339, 340,
	341, 173, 342, 343, 344, 345, 168, 236, 245, 39,
	218, 346, 176, 136, 347, 170, 165, 223, 197, 160,
	348, 349, 187, 188, 202, 175, 198, 171, 162, 155,
	350, 244, 219, 271, 195, 192, 166, 351, 163, 164,
	352, 224, 225, 167, 268, 240, 190, 220, -113, 129,
	247, 126, 225, 131, 127, 127, 128, 129, 247, 126,
	127, -60, -136, -194, -129, 129, 127, 112, 194, 234,
	119, 222, 230, -119, 231, 161, -145, 127, -115, 221,
	224, 225, 167, -194, 232, 236, 235, 226, -136, 171,
	-33, 353, -141, -141, -141, -141, -141, 223, 223, -141,
	-2, -97, 17, 16, -5, -3, -203, 6, 20, 21,
	-36, -43, 41, 42, -44, 21, 34, 45, 43, -30,
	-42, 103, -45, -136, -66, 78, -71, 29, -194, -129,
	23, -70, -67, -86, -84, -85, 112, 113, 114, 101,
	102, 109, 79, 115, -75, -73, -74, -76, 63, 62,
	71, 64, 65, 66, 67, 72, 73, 74, -130, -82,
	-203, 46, 47, 256, 257, 258, 259, 264, 260, 81,
	35, 246, 254, 253, 252, 250, 251, 248, 249, 262,
	263, 132, 247, 126, 107, 255, -113, -113, 11, -54,
	-55, -60, -62, -136, -105, -144, 171, -108, 236, 235,
	-131, -106, -130, -128, 234, 194, 233, 124, 272, 77,
	22, 24, 216, 80, 112, 16, 81, 111, 256, 119,
	50, 273, 248, 249, 246, 258, 259, 247, 222, 29,
	10, 275, 25, 149, 21, 34, 105, 121, 84, 85,
	152, 23, 150, 74, 278, 19, 53, 11, 13, 279,
	280, 14, 132, 131, 96, 128, 48, 8, 115, 26,
	93, 44, 281, 28, 282, 283, 284, 285, 46, 94,
	17, 250, 251, 31, 286, 264, 156, 107, 51, 37,
	78, 287, 288, 72, 289, 75, 54, 76, 15, 49,
	290, 291, 292, 293, 95, 122, 255, 47, 294, 126,
	6, 261, 30, 148, 45, 295, 127, 83, 262, 263,
	130, 73, 5, 133, 32, 9, 52, 55, 252, 253,
	254, 35, 82, 12, 296, -177, 94, -168, -194, -60,
	128, -60, 255, -123, 132, -123, -123, 127, -60, -194,
	-194, 119, 121, 124, 54, -21, -60, -122, 132, -194,
	-122, -122, -122, -60, 116, -60, -194, 30, -120, 94,
	12, 247, -194, 161, 127, 162, 129, -142, -203, -131,
	-172, 128, 33, 140, -142, 165, 166, -142, -118, -117,
	228, 229, 223, 227, 12, 166, 223, 164, -142, -7,
	-2, -10, -9, -11, 86, -141, -141, -204, 58, -98,
	19, 31, -45, -136, -94, -95, -45, -93, -2, -29,
	37, -40, -42, -44, 41, 42, 69, 11, -133, 77,
	76, 93, -132, 22, -130, 63, 116, -45, -68, 96,
	78, 94, 95, 80, 98, 97, 108, 101, 102, 103,
	104, 105, 106, 107, 99, 100, 111, 86, 87, 88,
	89, 90, 91, 92, -114, -203, -85, -203, 117, 118,
	-71, -71, -71, -71, -71, -71, -71, -71, -203, -2,
	-80, -45, -203, -203, -203, -203, -203, -203, -203, -203,
	-203, -89, -45, -203, -207, -77, -203, -207, -77, -207,
	-77, -207, -203, -207, -77, -207, -77, -207, -207, -77,
	-203, -203, -203, -203, -203, -203, -203, -61, 26, -60,
	-47, -48, -49, -50, -63, -85, -203, -60, -60, -54,
	-205, 57, 11, 55, -205, 57, 116, 57, 171, -108,
	-110, -109, 237, 239, 86, -135, -130, 63, 29, 30,
	58, 57, -60, -147, -150, -152, -151, -153, -148, -149,
	191, 192, 112, 195, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 30, 151, 187, 188, 189, 190,
	207, 208, 209, 210, 211, 212, 213, 214, 174, 193,
	266, 175, 176, 177, 178, 179, 180, 182, 183, 184,
	185, 186, -194, -142, 129, -194, 78, -194, -60, -60,
	-142, -142, -142, 163, 163, 127, 127, 168, -60, 57,
	130, -54, 23, 54, -60, -194, -194, -137, -136, -128,
	-142, -120, 63, -45, -142, -142, -142, -60, -142, -142,
	-173, 11, 96, -142, -142, 11, -116, 11, 96, -45,
	-121, 94, 54, 205, 354, 355, 9, 96, 57, 18,
	116, 57, -96, 24, 25, -97, -204, -72, -130, 64,
	67, -46, 57, 11, -44, -60, -45, -45, -78, 72,
	78, 73, 74, -132, 103, -137, -131, -128, -71, -79,
	-82, -85, 68, 96, 94, 95, 80, -71, -71, -71,
	-71, -71, -71, -71, -71, -71, -71, -71, -71, -71,
	-71, -71, -143, -194, 63, -194, -70, -70, -130, -41,
	21, 34, -40, -204, 57, -204, -2, -40, -40, -45,
	-45, -86, 63, -40, -86, 63, -40, -40, -35, 21,
	34, -87, -88, 82, -86, -130, -136, -204, -71, -130,
	-130, -40, -41, -41, -40, -40, -101, 157, -60, 30,
	57, -56, -58, -57, -59, 44, 48, 50, 45, 46,
	47, 51, -140, 22, -47, -203, -139, 157, -138, 22,
	-136, 63, -101, 55, -47, -60, -47, -62, -136, 103,
	-108, -110, 57, 238, 240, 241, 54, 75, -45, -159,
	111, -179, -180, -181, -131, 63, 64, -168, -169, -170,
	-182, 143, -187, 134, 136, 133, -171, 144, 128, 28,
	58, -164, 72, 78, -160, 219, -154, 56, -154, -154,
	-154, -154, -158, 194, -158, -158, -158, 56, 56, -154,
	-154, -154, -162, 56, -162, -162, -163, 56, -163, -134,
	55, -60, -142, 23, -142, -124, 124, 121, 122, -190,
	120, 216, 194, 70, 29, 15, 256, 157, 271, -194,
	158, -60, -60, -60, -60, -60, 124, 121, -60, -60,
	-60, -142, -60, -60, -120, -136, -136, 63, -60, 39,
	-45, -45, -137, -95, -98, -112, 19, 11, 35, 35,
	-65, 12, -42, -47, -44, 72, 73, 74, 116, -203,
	-79, -71, -71, -71, -39, 152, 77, -204, -204, -40,
	-40, -45, -204, -204, -204, 57, 55, 22, 11, 11,
	-204, 11, 11, -204, -204, -40, -90, -88, 84, -45,
	-204, 116, -204, 57, 57, -204, -204, -204, -204, -204,
	-69, 30, 35, -2, -203, -203, -104, -107, -86, -48,
	-49, -49, -48, -49, 44, 44, 44, 49, 44, 49,
	44, -57, -136, -204, -64, 52, 131, 53, -203, -138,
	-65, -47, -65, -65, 116, -109, -111, 242, 239, 245,
	-194, 63, 57, -181, 86, 56, -194, 28, -171, -171,
	-174, -194, -174, 28, -156, 29, 72, -161, 220, 64,
	-158, -158, -159, 30, -159, -159, -159, -167, 63, -167,
	64, 64, 54, -130, -142, -141, -197, 139, 135, 143,
	144, 137, 59, 60, 61, 128, 28, 134, 136, 157,
	133, -197, -125, -126, 130, 22, 128, 28, 157, -196,
	55, 163, 216, 163, 130, -142, -116, -116, 40, 116,
	-60, -91, 13, -45, 103, -131, -41, -39, 77, -71,
	-71, -204, -204, -146, 112, 191, 151, 189, 185, 205,
	196, 218, 187, 219, -143, -146, -71, -71, -71, -71,
	265, -93, 85, -45, 83, -131, -71, -71, -103, 54,
	-104, -81, -83, -82, -203, -2, -99, -130, -102, -130,
	-65, 57, 86, -52, -51, 54, 55, -53, 54, -51,
	44, 44, 128, 128, 128, -102, -93, -65, 239, 243,
	244, -180, -181, -184, -183, -130, -187, -174, -174, 56,
	-157, 54, -71, 58, -159, -159, -194, 112, 58, 57,
	58, 57, 58, 57, -60, -141, -141, -60, -141, -130,
	-193, 268, -195, -194, -130, -130, -130, -60, -120, -120,
	-92, 14, 16, -204, -71, -204, -154, -154, -154, -163,
	-154, 179, -154, 179, -204, -204, 19, 19, 19, 19,
	-203, -38, 261, -45, 57, 57, 27, -103, 57, -204,
	-204, -204, 57, 116, -204, 57, -93, -107, -45, -45,
	56, -45, -203, -203, -203, -204, -97, 58, 57, -154,
	-100, -130, -165, 216, 9, -158, 63, -158, 64, 64,
	-142, 26, -192, -191, -131, 56, 55, -45, -80, -158,
	-194, -71, -71, -71, -71, -71, -97, 63, -71, -71,
	28, -83, 35, -2, -203, -130, -130, -130, -97, -100,
	-100, -204, -100, -100, -139, -186, -185, 55, 138, 70,
	-183, 58, 57, -166, 134, 28, 133, -74, -159, -159,
	58, 58, -203, 57, 86, -100, -60, -204, -204, -204,
	-204, -37, 96, 268, -204, -204, -204, 9, -81, -2,
	116, 58, -204, -204, -204, -64, -185, -194, -175, 86,
	63, 146, -130, -155, 70, 28, 28, -188, -189, 157,
	-191, -181, 58, -204, 266, 51, 269, -104, -204, -130,
	64, -60, 63, -204, 57, -130, -196, 40, 267, 270,
	56, -189, 35, -193, 40, -100, 159, 268, 58, 160,
	269, -199, -200, 54, -203, 270, -200, 54, 10, 9,
	-71, 156, -198, 147, 142, 145, 30, -198, -204, -204,
	141, 29, 72,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 599, 0, 343, 343, 343, 343,
	343, 343, 0, 671, 654, 0, 0, 0, 0, -2,
	318, 319, 0, 321, 322, 323, -2, -2, -2, 975,
	975, 0, 0, 975, 0, 40, 41, 973, 1, 3,
	607, 0, 0, 347, -2, 345, 0, 654, 654, 0,
	0, 69, 70, 0, 0, 0, 962, 0, 652, 652,
	652, 672, 673, 676, 677, 26, 27, 28, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 0, 0,
	0, 0, 0, 655, 0, 650, 0, 650, 650, 650,
	0, 269, 425, 680, 681, 962, 0, 0, 0, 309,
	0, 976, 281, 0, 283, 976, 0, 976, 0, 290,
	0, 0, 296, 976, 301, 315, 316, 303, 317, 320,
	0, 0, 335, 336, 337, 338, 339, 975, 975, 342,
	34, 611, 0, 0, 599, 36, 0, 343, 348, 349,
	0, 0, -2, -2, 359, 365, 366, 367, 368, 344,
	0, 371, 375, 0, 435, 0, 440, 442, -2, -2,
	0, 477, 478, 479, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 508, 584, 585,
	586, 587, 588, 589, 590, 591, 444, 445, 581, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 572,
	0, 542, 542, 542, 542, 542, 542, 542, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 51, 425, 55, 0, 951, 635, -2, -2,
	0, 0, 678, 679, -2, 815, -2, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 0, 0, 88, 0, 86,
	0, 976, 0, 0, 0, 0, 0, 0, 976, 976,
	976, 0, 0, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 270, 976, 309, 273, 0,
	0, 976, 976, 976, 0, 976, 976, 280, 977, 978,
	0, 190, 191, 192, 284, 976, 976, 286, 0, 306,
	304, 305, 298, 299, 0, 312, 293, 294, 297, 334,
	-2, 331, 332, 333, 0, 340, 341, 35, 974, 29,
	0, 0, 608, 0, 600, 601, 604, 607, 34, 358,
	0, 380, 369, 360, 363, 364, 346, 0, 372, 0,
	0, 0, 376, 0, 378, 379, 0, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 462, 463, 464,
	465, 466, 467, 468, 441, 0, 455, 0, 0, 0,
	497, 498, 499, 500, 501, 502, 503, 0, 356, 34,
	0, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 573, 0, 526, 534, 0, 527, 535, 528,
	536, 529, 0, 530, 537, 531, 538, 532, 533, 539,
	0, 0, 0, 356, 356, 0, 0, 53, 0, 424,
	0, 382, 384, 385, 386, -2, 0, 408, -2, 0,
	0, 0, 47, 48, 0, 0, 0, 0, 951, 636,
	57, 58, 0, 0, 0, 166, 645, 646, 647, 643,
	215, 0, 0, 154, 150, 94, 95, 96, 143, 98,
	143, 143, 143, 143, 163, 163, 163, 163, 126, 127,
	128, 129, 130, 0, 0, 113, 143, 143, 143, 117,
	133, 134, 135, 136, 137, 138, 139, 140, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 145, 145, 145,
	147, 147, 674, 72, 0, 976, 0, 976, 84, 0,
	229, 231, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 651, 0, 976, 266, 267, 426, 682, 683,
	271, 272, 310, 311, 274, 275, 276, 277, 278, 279,
	0, 193, 194, 285, 289, 0, 309, 0, 0, 291,
	292, 0, 0, 324, 325, 326, 612, 0, 0, 0,
	0, 0, 603, 605, 606, 611, 37, 0, 592, 0,
	0, 433, 0, 0, 361, 32, 436, 437, 439, 456,
	0, 458, 460, 377, 373, 0, 582, -2, 446, 447,
	471, 472, 473, 0, 0, 0, 0, 469, 451, 0,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, 496, 557, 558, 0, 494, 495, 504, 0,
	0, 0, 357, 474, 0, 630, 34, 0, 0, 0,
	0, 479, 584, 0, 479, 584, 0, 0, 0, 354,
	355, 579, 576, 0, 0, 581, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 0, 0, 0, 0, 413, 0, 0, 416, 0,
	0, 0, 0, 407, 0, 0, 428, 896, 409, 0,
	411, 412, 433, 0, 433, 50, 433, 52, 0, 427,
	637, 56, 0, 0, 61, 62, 638, 639, 640, 641,
	0, 85, 216, 218, 221, 222, 223, 89, 90, 91,
	0, 0, 203, 0, 0, 197, 197, 0, 195, 196,
	87, 157, 155, 0, 152, 151, 97, 0, 163, 163,
	120, 121, 166, 0, 166, 166, 166, 0, 0, 114,
	115, 116, 108, 0, 109, 110, 111, 0, 112, 0,
	0, 976, 74, 653, 75, 975, 0, 0, 666, 230,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	0, 76, 234, 236, 235, 239, 0, 0, 0, 261,
	976, 265, 306, 306, 288, 307, 308, 313, 295, 0,
	609, 610, 0, 602, 30, 0, 648, 649, 593, 594,
	595, 0, 370, 381, 362, 457, 459, 461, 0, 356,
	448, 469, 452, 0, 449, 0, 0, 443, 509, 0,
	0, 476, -2, 513, 514, 0, 0, 0, 0, 0,
	550, 0, 0, 551, 0, 599, 0, 577, 0, 0,
	525, 0, 544, 0, 0, 545, 546, 547, 548, 549,
	624, 0, 0, -2, 0, 0, 433, 632, 0, 383,
	402, 404, 0, 399, 414, 415, 417, 0, 419, 0,
	421, 422, 387, 389, 390, 0, 0, 0, 0, 410,
	599, 433, 45, 46, 0, 59, 60, 0, 0, 66,
	167, 168, 0, 219, 0, 0, 0, 185, 197, 197,
	188, 198, 189, 0, 159, 0, 156, 93, 153, 0,
	166, 166, 122, 0, 123, 124, 125, 0, 141, 0,
	0, 0, 0, 675, 73, 224, 975, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 975, 0, 975, 667, 668, 669, 670, 0, 79,
	0, 0, 0, 0, 0, 264, 309, 309, 613, 0,
	31, 597, 0, 434, 374, 583, 0, 450, 0, 470,
	453, 510, 511, 0, 143, 143, 562, 143, 147, 565,
	143, 567, 143, 570, 0, 0, 0, 0, 0, 0,
	0, 574, 524, 580, 0, 582, 0, 0, 38, 0,
	624, 614, 626, 628, 0, 34, 0, 620, 0, 394,
	599, 0, 0, 396, 403, 0, 0, 397, 0, 398,
	418, 420, 0, 0, 0, 0, 607, 44, 63, 64,
	65, 217, 220, 0, 199, 143, 202, 186, 187, 0,
	161, 0, 158, 144, 118, 119, 164, 165, 163, 0,
	163, 0, 148, 0, 976, 225, 226, 227, 228, 0,
	233, 0, 77, 78, 0, 0, 238, 262, 282, 287,
	33, 0, 0, 512, 454, 515, 559, 163, 563, 564,
	566, 568, 569, 571, 517, 516, 0, 0, 0, 0,
	0, 607, 0, 578, 0, 0, 0, 39, 0, 629,
	-2, 0, 0, 0, 54, 0, 607, 633, 634, 400,
	0, 405, 0, 0, 0, 408, 43, 177, 0, 201,
	0, 392, 169, 162, 0, 166, 142, 166, 0, 0,
	71, 0, 80, 81, 0, 0, 0, 598, 596, 560,
	561, 0, 0, 0, 0, 552, 0, 575, 0, 0,
	0, 627, 0, -2, 0, 622, 621, 395, 42, 0,
	0, 430, 0, 0, 428, 176, 178, 0, 183, 0,
	200, 0, 0, 174, 0, 171, 173, 160, 131, 132,
	146, 149, 0, 0, 0, 0, 240, 518, 520, 519,
	521, 0, 0, 0, 523, 540, 541, 0, 617, 34,
	0, 401, 429, 431, 432, 391, 179, 180, 0, 184,
	182, 0, 393, 92, 0, 170, 172, 0, 256, 0,
	82, 83, 76, 522, 0, 0, 0, 625, -2, 623,
	181, 0, 175, 255, 0, 0, 79, 553, 0, 556,
	0, 257, 0, 237, 554, 0, 0, 0, 204, 0,
	0, 205, 206, 0, 0, 555, 207, 0, 0, 0,
	0, 0, 208, 210, 211, 0, 0, 209, 258, 259,
	212, 213, 214,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 106, 98, 3,
	56, 58, 103, 101, 57, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 356,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:376
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:380
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:384
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:390
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:408
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:443
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:455
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:524
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:528
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:560
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:564
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = RepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = ReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = ReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = Serializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:613
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:635
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:645
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:650
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:678
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:685
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:696
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:702
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:707
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:721
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:948
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:953
		{
			yyVAL.sqlVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:966
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:974
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:984
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1028
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1042
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1051
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1077
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1081
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.colKeyOpt = colKey
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1093
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.sqlVal = nil
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1132
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1209
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 204:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1246
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1250
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1254
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1258
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1270
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1353
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1358
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1465
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1475
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1481
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1485
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1497
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1501
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1509
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1517
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1522
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &OtherRead{}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1560
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1565
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1603
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1625
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1630
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1652
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = "extended "
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = "full "
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1743
		{
			yyVAL.showFilter = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1747
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1757
		{
			yyVAL.showFilter = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = SessionStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.str = GlobalStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Begin{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &Commit{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Rollback{}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = JSONStr
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = TreeStr
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = VitessStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1848
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1862
		{
			yyVAL.statement = &Explain{Fmt: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &OtherRead{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &OtherRead{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &OtherRead{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1898
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1902
		{
			setAllowComments(yylex, true)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1912
		{
			yyVAL.bytes2 = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1916
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.str = UnionStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1926
		{
			yyVAL.str = UnionAllStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1930
		{
			yyVAL.str = UnionDistinctStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = SQLCacheStr
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = DistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = DistinctStr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1961
		{
			yyVAL.selectExprs = nil
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1970
		{
			yyVAL.strs = nil
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1978
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1986
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = SQLCacheStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = DistinctStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = DistinctStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = StraightJoinHint
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2040
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2045
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2053
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2079
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2093
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2109
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2113
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2150
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2154
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2166
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2170
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2176
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2178
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2181
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2186
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2194
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2201
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = JoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = JoinStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = StraightJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			yyVAL.str = LeftJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = LeftJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = RightJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = RightJoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.str = NaturalJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2259
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.indexHints = nil
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2288
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2292
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2296
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2300
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2345
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = IsNullStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.str = IsNotNullStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.str = IsTrueStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = IsNotTrueStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.str = IsFalseStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = IsNotFalseStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.str = EqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.str = LessThanStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.str = GreaterThanStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.str = LessEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.str = GreaterEqualStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.str = NotEqualStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2492
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2496
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2842
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.str = BooleanModeStr
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2854
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.str = QueryExpansionStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = nil
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = string("")
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2952
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2958
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2981
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &NullVal{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3039
		{
			yyVAL.exprs = nil
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3043
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3057
		{
			yyVAL.orderBy = nil
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3061
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3071
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3077
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3082
		{
			yyVAL.str = AscScr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.str = AscScr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.str = DescScr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3095
		{
			yyVAL.limit = nil
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3103
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3107
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.str = ""
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = ForUpdateStr
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = ShareModeStr
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3141
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3146
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3150
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3154
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3165
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3169
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3173
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3178
		{
			yyVAL.updateExprs = nil
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3182
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3208
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3228
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3234
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3274
		{
			yyVAL.bytes = []byte("charset")
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &Default{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3298
		{
			yyVAL.byt = 0
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.byt = 1
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3303
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3305
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3308
		{
			yyVAL.str = ""
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.str = IgnoreStr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3328
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3332
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3335
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3348
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3350
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3355
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3713
		{
			decNesting(yylex)
		}
	case 975:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3718
		{
			skipToEnd(yylex)
		}
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3723
		{
			skipToEnd(yylex)
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3727
		{
			skipToEnd(yylex)
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3731
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

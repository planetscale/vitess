//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const BIT_LITERAL = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const INTERVAL = 57430
const JSON_EXTRACT_OP = 57431
const JSON_UNQUOTE_EXTRACT_OP = 57432
const CREATE = 57433
const ALTER = 57434
const DROP = 57435
const RENAME = 57436
const ANALYZE = 57437
const TABLE = 57438
const INDEX = 57439
const VIEW = 57440
const TO = 57441
const IGNORE = 57442
const IF = 57443
const UNIQUE = 57444
const USING = 57445
const PRIMARY = 57446
const SHOW = 57447
const DESCRIBE = 57448
const EXPLAIN = 57449
const DATE = 57450
const ESCAPE = 57451
const REPAIR = 57452
const OPTIMIZE = 57453
const TRUNCATE = 57454
const MAXVALUE = 57455
const PARTITION = 57456
const REORGANIZE = 57457
const LESS = 57458
const THAN = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const TIME = 57473
const TIMESTAMP = 57474
const DATETIME = 57475
const YEAR = 57476
const CHAR = 57477
const VARCHAR = 57478
const BOOL = 57479
const CHARACTER = 57480
const VARBINARY = 57481
const NCHAR = 57482
const TEXT = 57483
const TINYTEXT = 57484
const MEDIUMTEXT = 57485
const LONGTEXT = 57486
const BLOB = 57487
const TINYBLOB = 57488
const MEDIUMBLOB = 57489
const LONGBLOB = 57490
const JSON = 57491
const ENUM = 57492
const NULLX = 57493
const AUTO_INCREMENT = 57494
const APPROXNUM = 57495
const SIGNED = 57496
const UNSIGNED = 57497
const ZEROFILL = 57498
const DATABASES = 57499
const TABLES = 57500
const VITESS_KEYSPACES = 57501
const VITESS_SHARDS = 57502
const VSCHEMA_TABLES = 57503
const NAMES = 57504
const CHARSET = 57505
const CURRENT_TIMESTAMP = 57506
const DATABASE = 57507
const CURRENT_DATE = 57508
const CURRENT_TIME = 57509
const LOCALTIME = 57510
const LOCALTIMESTAMP = 57511
const UTC_DATE = 57512
const UTC_TIME = 57513
const UTC_TIMESTAMP = 57514
const REPLACE = 57515
const CONVERT = 57516
const CAST = 57517
const GROUP_CONCAT = 57518
const SEPARATOR = 57519
const MATCH = 57520
const AGAINST = 57521
const BOOLEAN = 57522
const LANGUAGE = 57523
const WITH = 57524
const QUERY = 57525
const EXPANSION = 57526
const UNUSED = 57527

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 263,
	77, 550,
	105, 550,
	-2, 38,
	-1, 265,
	77, 572,
	105, 572,
	-2, 40,
	-1, 270,
	105, 451,
	-2, 447,
	-1, 271,
	105, 452,
	-2, 448,
	-1, 539,
	5, 21,
	-2, 398,
	-1, 576,
	105, 454,
	-2, 450,
	-1, 729,
	5, 22,
	-2, 276,
	-1, 820,
	5, 22,
	-2, 399,
	-1, 892,
	5, 21,
	-2, 401,
	-1, 959,
	5, 22,
	-2, 402,
}

const yyNprod = 611
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 7223

var yyAct = [...]int{

	328, 37, 964, 289, 498, 835, 327, 897, 717, 302,
	262, 615, 602, 567, 718, 235, 869, 790, 376, 437,
	43, 681, 674, 377, 3, 575, 579, 782, 753, 578,
	714, 698, 684, 291, 271, 651, 588, 300, 37, 350,
	365, 273, 250, 42, 356, 380, 240, 683, 266, 244,
	251, 255, 611, 991, 392, 47, 596, 982, 631, 62,
	988, 234, 267, 977, 135, 227, 986, 981, 976, 249,
	882, 929, 629, 277, 439, 49, 50, 51, 52, 228,
	749, 595, 839, 951, 134, 227, 227, 603, 924, 922,
	985, 227, 983, 965, 304, 773, 283, 635, 906, 590,
	18, 38, 20, 21, 619, 388, 628, 284, 279, 560,
	562, 126, 229, 230, 231, 232, 233, 125, 31, 126,
	870, 445, 440, 22, 732, 274, 731, 297, 967, 465,
	464, 474, 475, 467, 468, 469, 470, 471, 472, 473,
	466, 30, 872, 476, 40, 254, 387, 128, 129, 130,
	510, 730, 770, 625, 630, 623, 590, 275, 772, 280,
	227, 799, 227, 874, 131, 878, 227, 873, 127, 871,
	488, 489, 936, 914, 876, 633, 636, 453, 452, 561,
	823, 794, 743, 875, 736, 603, 589, 497, 877, 879,
	907, 587, 905, 586, 454, 396, 384, 466, 754, 627,
	476, 476, 24, 25, 27, 26, 28, 848, 451, 454,
	658, 395, 288, 626, 884, 389, 29, 32, 33, 975,
	452, 34, 35, 36, 656, 657, 655, 286, 699, 290,
	800, 699, 442, 806, 747, 632, 454, 644, 646, 647,
	968, 37, 645, 589, 943, 771, 634, 769, 467, 468,
	469, 470, 471, 472, 473, 466, 378, 849, 476, 352,
	358, 453, 452, 910, 353, 465, 464, 474, 475, 467,
	468, 469, 470, 471, 472, 473, 466, 438, 454, 476,
	909, 962, 438, 227, 39, 453, 452, 762, 40, 592,
	227, 227, 886, 227, 593, 761, 62, 354, 654, 485,
	487, 444, 454, 325, 469, 470, 471, 472, 473, 466,
	750, 62, 476, 227, 954, 227, 62, 908, 227, 456,
	760, 227, 775, 776, 777, 675, 496, 676, 60, 500,
	501, 502, 503, 504, 505, 506, 390, 509, 511, 511,
	511, 511, 511, 511, 511, 511, 519, 520, 521, 522,
	254, 972, 290, 455, 938, 290, 268, 528, 902, 901,
	540, 788, 290, 290, 255, 255, 255, 255, 527, 453,
	452, 847, 267, 542, 854, 853, 851, 850, 947, 378,
	556, 557, 837, 539, 525, 526, 454, 255, 822, 290,
	62, 744, 689, 290, 486, 227, 677, 436, 227, 227,
	227, 227, 558, 267, 529, 569, 543, 285, 545, 227,
	564, 363, 290, 227, 554, 544, 227, 546, 274, 227,
	946, 227, 227, 604, 605, 606, 844, 563, 453, 452,
	398, 397, 62, 490, 491, 492, 493, 494, 495, 566,
	583, 815, 572, 18, 715, 454, 393, 617, 689, 393,
	438, 576, 362, 801, 818, 363, 852, 568, 254, 254,
	254, 254, 598, 599, 600, 601, 652, 788, 891, 639,
	571, 574, 580, 254, 363, 227, 737, 608, 609, 610,
	227, 254, 788, 227, 62, 613, 614, 40, 37, 512,
	513, 514, 515, 516, 517, 518, 44, 363, 568, 453,
	452, 500, 690, 686, 464, 474, 475, 467, 468, 469,
	470, 471, 472, 473, 466, 701, 454, 476, 523, 840,
	841, 842, 18, 40, 558, 597, 678, 679, 843, 241,
	62, 616, 18, 788, 740, 612, 607, 124, 393, 720,
	54, 37, 703, 763, 62, 719, 725, 267, 716, 691,
	692, 696, 576, 695, 653, 537, 724, 538, 715, 448,
	16, 707, 729, 706, 721, 391, 40, 702, 535, 704,
	705, 728, 688, 40, 551, 62, 40, 727, 548, 552,
	391, 547, 713, 735, 984, 391, 650, 248, 733, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 549, 738, 239, 245, 246, 550,
	980, 751, 752, 62, 774, 979, 367, 370, 371, 372,
	368, 438, 369, 373, 742, 640, 726, 316, 315, 318,
	319, 320, 321, 756, 757, 758, 317, 322, 357, 553,
	765, 371, 372, 367, 370, 371, 372, 368, 860, 369,
	373, 355, 712, 580, 62, 62, 711, 755, 394, 531,
	746, 945, 652, 944, 889, 741, 268, 816, 465, 464,
	474, 475, 467, 468, 469, 470, 471, 472, 473, 466,
	292, 785, 476, 912, 375, 786, 621, 447, 357, 795,
	710, 778, 293, 242, 243, 797, 798, 268, 709, 802,
	391, 391, 766, 236, 808, 957, 809, 810, 811, 812,
	474, 475, 467, 468, 469, 470, 471, 472, 473, 466,
	237, 62, 476, 44, 819, 820, 821, 956, 932, 805,
	787, 827, 828, 829, 568, 933, 450, 46, 48, 386,
	294, 351, 41, 227, 803, 824, 1, 817, 624, 830,
	653, 963, 834, 391, 465, 464, 474, 475, 467, 468,
	469, 470, 471, 472, 473, 466, 833, 832, 476, 585,
	577, 62, 62, 272, 62, 62, 53, 584, 759, 904,
	845, 846, 838, 591, 779, 780, 781, 748, 594, 942,
	745, 863, 783, 401, 402, 400, 404, 403, 227, 680,
	457, 391, 227, 399, 132, 374, 379, 859, 62, 865,
	789, 831, 580, 700, 580, 618, 255, 868, 881, 720,
	867, 864, 893, 880, 883, 719, 62, 55, 887, 768,
	767, 622, 499, 890, 888, 278, 899, 900, 484, 508,
	896, 268, 708, 261, 723, 892, 722, 524, 857, 576,
	227, 349, 955, 931, 804, 507, 438, 62, 62, 738,
	697, 303, 62, 62, 62, 643, 314, 62, 311, 688,
	313, 312, 915, 916, 530, 911, 536, 458, 301, 295,
	559, 253, 391, 927, 925, 926, 920, 359, 366, 326,
	62, 364, 720, 903, 37, 259, 252, 814, 719, 573,
	934, 937, 928, 939, 940, 966, 534, 580, 941, 19,
	254, 861, 862, 948, 45, 247, 15, 935, 14, 13,
	225, 12, 23, 764, 391, 11, 256, 917, 918, 10,
	919, 950, 953, 921, 9, 923, 8, 62, 7, 959,
	257, 257, 269, 267, 958, 6, 257, 5, 4, 62,
	238, 17, 2, 0, 0, 0, 641, 642, 0, 648,
	649, 0, 970, 0, 0, 0, 0, 971, 0, 0,
	974, 62, 0, 62, 0, 978, 0, 0, 260, 0,
	0, 0, 0, 276, 0, 0, 987, 0, 913, 831,
	792, 0, 0, 992, 993, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 499, 0, 0, 693, 694, 0,
	0, 0, 0, 0, 0, 257, 0, 257, 0, 0,
	0, 257, 0, 0, 0, 0, 0, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 784,
	391, 391, 0, 391, 836, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 282, 952, 0, 0, 287, 465,
	464, 474, 475, 467, 468, 469, 470, 471, 472, 473,
	466, 0, 734, 476, 0, 0, 0, 858, 465, 464,
	474, 475, 467, 468, 469, 470, 471, 472, 473, 466,
	0, 0, 476, 0, 0, 792, 0, 0, 391, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 894, 895, 0, 0,
	0, 898, 898, 898, 0, 0, 391, 0, 257, 0,
	0, 0, 0, 0, 0, 257, 382, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 0,
	257, 0, 0, 257, 0, 361, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 441, 836, 443, 0, 0,
	446, 0, 0, 449, 0, 0, 0, 0, 391, 0,
	0, 0, 0, 0, 499, 0, 0, 0, 0, 825,
	826, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	960, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 269, 257, 257, 257, 257, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 257, 973,
	0, 382, 0, 0, 565, 0, 257, 257, 0, 0,
	0, 0, 0, 269, 0, 0, 565, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 0, 257, 0, 0, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 620, 0, 0,
	76, 0, 637, 0, 0, 638, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 0, 687, 565, 0, 0,
	930, 687, 687, 0, 0, 687, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 687,
	687, 687, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 269, 0, 0,
	0, 0, 465, 464, 474, 475, 467, 468, 469, 470,
	471, 472, 473, 466, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	969, 499, 0, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 0, 0,
	118, 119, 120, 92, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 83, 121, 99, 78, 115, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 687, 0, 0, 0, 0, 0, 0, 424,
	425, 426, 427, 428, 429, 430, 687, 431, 432, 433,
	434, 435, 420, 421, 422, 423, 405, 406, 257, 0,
	408, 0, 409, 410, 411, 412, 413, 414, 415, 416,
	417, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 565, 687, 0, 0, 0, 0,
	855, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 203, 176, 215,
	154, 168, 223, 169, 170, 197, 142, 184, 95, 166,
	0, 157, 137, 163, 138, 155, 178, 76, 181, 153,
	205, 187, 221, 84, 192, 0, 103, 91, 0, 0,
	180, 207, 182, 202, 175, 198, 147, 191, 216, 167,
	195, 0, 0, 0, 61, 0, 581, 582, 0, 0,
	0, 0, 0, 71, 0, 194, 212, 165, 196, 136,
	193, 0, 140, 143, 222, 210, 160, 161, 739, 0,
	0, 0, 0, 0, 0, 179, 183, 199, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 190,
	0, 0, 0, 144, 141, 177, 0, 0, 0, 146,
	0, 159, 200, 269, 208, 174, 224, 211, 172, 171,
	214, 217, 98, 206, 156, 164, 72, 162, 102, 96,
	113, 189, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	139, 0, 104, 114, 123, 152, 209, 118, 119, 120,
	92, 70, 150, 151, 148, 149, 185, 186, 218, 219,
	220, 201, 145, 0, 0, 204, 188, 63, 0, 83,
	121, 99, 78, 115, 213, 203, 176, 215, 154, 168,
	223, 169, 170, 197, 142, 184, 95, 166, 0, 157,
	137, 163, 138, 155, 178, 76, 181, 153, 205, 187,
	221, 84, 192, 0, 103, 91, 0, 0, 180, 207,
	182, 202, 175, 198, 147, 191, 216, 167, 195, 0,
	0, 0, 61, 0, 581, 582, 0, 0, 0, 0,
	0, 71, 0, 194, 212, 165, 196, 136, 193, 0,
	140, 143, 222, 210, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 179, 183, 199, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 190, 0, 0,
	0, 144, 141, 177, 0, 0, 0, 146, 0, 159,
	200, 0, 208, 174, 224, 211, 172, 171, 214, 217,
	98, 206, 156, 164, 72, 162, 102, 96, 113, 189,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 139, 0,
	104, 114, 123, 152, 209, 118, 119, 120, 92, 70,
	150, 151, 148, 149, 185, 186, 218, 219, 220, 201,
	145, 0, 0, 204, 188, 63, 0, 83, 121, 99,
	78, 115, 213, 203, 176, 215, 154, 168, 223, 169,
	170, 197, 142, 184, 95, 166, 0, 157, 137, 163,
	138, 155, 178, 76, 181, 153, 205, 187, 221, 84,
	192, 0, 103, 91, 0, 0, 180, 207, 182, 202,
	175, 198, 147, 191, 216, 167, 195, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 194, 212, 165, 196, 136, 193, 0, 140, 143,
	222, 210, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 179, 183, 199, 173, 0, 0, 0, 0, 0,
	0, 949, 0, 158, 0, 190, 0, 0, 0, 144,
	141, 177, 0, 0, 0, 146, 0, 159, 200, 0,
	208, 174, 224, 211, 172, 171, 214, 217, 98, 206,
	156, 164, 72, 162, 102, 96, 113, 189, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 139, 0, 104, 114,
	123, 152, 209, 118, 119, 120, 92, 70, 150, 151,
	148, 149, 185, 186, 218, 219, 220, 201, 145, 0,
	0, 204, 188, 63, 0, 83, 121, 99, 78, 115,
	213, 203, 176, 215, 154, 168, 223, 169, 170, 197,
	142, 184, 95, 166, 0, 157, 137, 163, 138, 155,
	178, 76, 181, 153, 205, 187, 221, 84, 192, 0,
	103, 91, 0, 0, 180, 207, 182, 202, 175, 198,
	147, 191, 216, 167, 195, 40, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 194,
	212, 165, 196, 136, 193, 0, 140, 143, 222, 210,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 179,
	183, 199, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 190, 0, 0, 0, 144, 141, 177,
	0, 0, 0, 146, 0, 159, 200, 0, 208, 174,
	224, 211, 172, 171, 214, 217, 98, 206, 156, 164,
	72, 162, 102, 96, 113, 189, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 139, 0, 104, 114, 123, 152,
	209, 118, 119, 120, 92, 70, 150, 151, 148, 149,
	185, 186, 218, 219, 220, 201, 145, 0, 0, 204,
	188, 63, 0, 83, 121, 99, 78, 115, 213, 203,
	176, 215, 154, 168, 223, 169, 170, 197, 142, 184,
	95, 166, 0, 157, 137, 163, 138, 155, 178, 76,
	181, 153, 205, 187, 221, 84, 192, 0, 103, 91,
	0, 0, 180, 207, 182, 202, 175, 198, 147, 191,
	216, 167, 195, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 194, 212, 165,
	196, 136, 193, 0, 140, 143, 222, 210, 160, 161,
	0, 0, 0, 0, 0, 0, 0, 179, 183, 199,
	173, 0, 0, 0, 0, 0, 0, 866, 0, 158,
	0, 190, 0, 0, 0, 144, 141, 177, 0, 0,
	0, 146, 0, 159, 200, 0, 208, 174, 224, 211,
	172, 171, 214, 217, 98, 206, 156, 164, 72, 162,
	102, 96, 113, 189, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 139, 0, 104, 114, 123, 152, 209, 118,
	119, 120, 92, 70, 150, 151, 148, 149, 185, 186,
	218, 219, 220, 201, 145, 0, 0, 204, 188, 63,
	0, 83, 121, 99, 78, 115, 213, 203, 176, 215,
	154, 168, 223, 169, 170, 197, 142, 184, 95, 166,
	0, 157, 137, 163, 138, 155, 178, 76, 181, 153,
	205, 187, 221, 84, 192, 0, 103, 91, 0, 0,
	180, 207, 182, 202, 175, 198, 147, 191, 216, 167,
	195, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 194, 212, 165, 196, 136,
	193, 0, 140, 143, 222, 210, 160, 161, 0, 0,
	0, 0, 0, 0, 0, 179, 183, 199, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 190,
	0, 0, 0, 144, 141, 177, 0, 0, 0, 146,
	0, 159, 200, 0, 208, 174, 224, 211, 172, 171,
	214, 217, 98, 206, 156, 164, 72, 162, 102, 96,
	113, 189, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	139, 0, 104, 114, 123, 152, 209, 118, 119, 120,
	92, 70, 150, 151, 148, 149, 185, 186, 218, 219,
	220, 201, 145, 0, 0, 204, 188, 63, 0, 83,
	121, 99, 78, 115, 213, 203, 176, 215, 154, 168,
	223, 169, 170, 197, 142, 184, 95, 166, 0, 157,
	137, 163, 138, 155, 178, 76, 181, 153, 205, 187,
	221, 84, 192, 0, 103, 91, 0, 0, 180, 207,
	182, 202, 175, 198, 147, 191, 216, 167, 195, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 194, 212, 165, 196, 136, 193, 0,
	140, 143, 222, 210, 160, 161, 0, 0, 0, 0,
	0, 0, 0, 179, 183, 199, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 158, 0, 190, 0, 0,
	0, 144, 141, 177, 0, 0, 0, 146, 0, 159,
	200, 0, 208, 174, 224, 211, 172, 171, 214, 217,
	98, 206, 156, 164, 72, 162, 102, 96, 113, 189,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 139, 0,
	104, 114, 123, 152, 209, 118, 119, 120, 92, 70,
	150, 151, 148, 149, 185, 186, 218, 219, 220, 201,
	145, 0, 0, 204, 188, 63, 0, 83, 121, 99,
	78, 115, 213, 203, 176, 215, 154, 168, 223, 169,
	170, 197, 142, 184, 95, 166, 0, 157, 137, 163,
	138, 155, 178, 76, 181, 153, 205, 187, 221, 84,
	192, 0, 103, 91, 0, 0, 180, 207, 182, 202,
	175, 198, 147, 191, 216, 167, 195, 0, 0, 0,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 194, 212, 165, 196, 136, 193, 0, 140, 143,
	222, 210, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 179, 183, 199, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 0, 190, 0, 0, 0, 144,
	141, 177, 0, 0, 0, 146, 0, 159, 200, 0,
	208, 174, 224, 211, 172, 171, 214, 217, 98, 206,
	156, 164, 72, 162, 102, 96, 113, 189, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 139, 0, 104, 114,
	123, 152, 209, 118, 119, 120, 92, 70, 150, 151,
	148, 149, 185, 186, 218, 219, 220, 201, 145, 0,
	0, 204, 188, 63, 0, 83, 121, 99, 78, 115,
	213, 203, 176, 215, 154, 168, 223, 169, 170, 197,
	142, 184, 95, 166, 0, 157, 137, 163, 138, 155,
	178, 76, 181, 153, 205, 187, 221, 84, 192, 0,
	103, 91, 0, 0, 180, 207, 182, 202, 175, 198,
	147, 191, 216, 167, 195, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 194,
	212, 165, 196, 136, 193, 0, 140, 143, 222, 210,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 179,
	183, 199, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 0, 190, 0, 0, 0, 144, 141, 177,
	0, 0, 0, 146, 0, 159, 200, 0, 208, 174,
	224, 211, 172, 171, 214, 217, 98, 206, 156, 164,
	72, 162, 102, 96, 113, 189, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 139, 0, 104, 114, 123, 152,
	209, 118, 119, 120, 92, 70, 150, 151, 148, 149,
	185, 186, 218, 219, 220, 201, 145, 0, 0, 204,
	188, 63, 0, 83, 121, 99, 78, 115, 95, 0,
	0, 682, 0, 299, 0, 0, 0, 76, 0, 298,
	0, 0, 336, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 270, 316, 315, 318, 319, 320,
	321, 0, 0, 71, 317, 322, 323, 324, 0, 0,
	296, 309, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 685, 0, 0, 0, 347,
	0, 308, 0, 0, 305, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 345,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 337, 346, 343, 344, 341, 342, 340, 339,
	338, 348, 331, 332, 334, 0, 333, 63, 0, 83,
	121, 99, 78, 115, 95, 0, 0, 0, 0, 299,
	0, 0, 0, 76, 0, 298, 0, 0, 336, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	270, 316, 315, 318, 319, 320, 321, 0, 0, 71,
	317, 322, 323, 324, 0, 0, 296, 309, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 685, 0, 0, 0, 347, 0, 308, 0, 0,
	305, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 345, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 0, 0, 118, 119, 120, 92, 70, 337, 346,
	343, 344, 341, 342, 340, 339, 338, 348, 331, 332,
	334, 0, 333, 63, 0, 83, 121, 99, 78, 115,
	95, 0, 0, 0, 0, 299, 0, 0, 0, 76,
	0, 298, 0, 0, 336, 84, 0, 0, 103, 91,
	0, 0, 0, 0, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 290, 270, 316, 315, 318,
	319, 320, 321, 0, 0, 71, 317, 322, 323, 324,
	0, 0, 296, 309, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 307, 0, 0, 0,
	0, 347, 0, 308, 0, 0, 305, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 345, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 0, 0, 118,
	119, 120, 92, 70, 337, 346, 343, 344, 341, 342,
	340, 339, 338, 348, 331, 332, 334, 18, 333, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 95, 0,
	0, 0, 0, 299, 0, 0, 0, 76, 0, 298,
	0, 0, 336, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 270, 316, 315, 318, 319, 320,
	321, 0, 0, 71, 317, 322, 323, 324, 0, 0,
	296, 309, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 0, 0, 0, 0, 347,
	0, 308, 0, 0, 305, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 345,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 337, 346, 343, 344, 341, 342, 340, 339,
	338, 348, 331, 332, 334, 0, 333, 63, 0, 83,
	121, 99, 78, 115, 95, 0, 0, 0, 0, 299,
	0, 0, 0, 76, 0, 298, 0, 0, 336, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	270, 316, 315, 318, 319, 320, 321, 0, 0, 71,
	317, 322, 323, 324, 0, 0, 296, 309, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	307, 0, 0, 0, 0, 347, 0, 308, 0, 0,
	305, 310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 345, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 0, 0, 118, 119, 120, 92, 70, 337, 346,
	343, 344, 341, 342, 340, 339, 338, 348, 331, 332,
	334, 95, 333, 63, 0, 83, 121, 99, 78, 115,
	76, 0, 0, 0, 0, 336, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 329, 330, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 270, 316, 315,
	318, 319, 320, 321, 0, 0, 71, 317, 322, 323,
	324, 0, 0, 0, 309, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 307, 0, 0,
	0, 0, 347, 0, 308, 0, 0, 305, 310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 345, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 990, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 0, 0,
	118, 119, 120, 92, 70, 337, 346, 343, 344, 341,
	342, 340, 339, 338, 348, 331, 332, 334, 95, 333,
	63, 0, 83, 121, 99, 78, 115, 76, 0, 0,
	0, 0, 336, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 329, 330, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 270, 316, 315, 318, 319, 320,
	321, 0, 0, 71, 317, 322, 323, 324, 0, 0,
	0, 309, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 307, 0, 0, 0, 0, 347,
	0, 308, 0, 0, 305, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 345,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 337, 346, 343, 344, 341, 342, 340, 339,
	338, 348, 331, 332, 334, 0, 333, 63, 0, 83,
	121, 99, 78, 115, 95, 0, 0, 0, 791, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 793, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 453, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 460, 0, 463, 0, 0, 0,
	0, 454, 477, 478, 479, 480, 481, 482, 483, 0,
	461, 462, 459, 465, 464, 474, 475, 467, 468, 469,
	470, 471, 472, 473, 466, 0, 0, 476, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 95, 0, 118, 119, 120, 92, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 63, 0, 83, 121, 99, 78, 115,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 56,
	0, 0, 0, 59, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 0, 0,
	118, 119, 120, 92, 70, 0, 0, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	63, 0, 83, 121, 99, 78, 115, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 0, 0, 18, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 63, 0, 83,
	121, 99, 78, 115, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 103, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 95, 0, 118, 119, 120, 92, 70, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	103, 91, 0, 0, 63, 0, 83, 121, 99, 78,
	115, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 532, 0, 0, 533, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 381, 0, 0,
	0, 63, 76, 83, 121, 99, 78, 115, 84, 0,
	0, 103, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	0, 383, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 40, 0, 0, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 95, 0, 118,
	119, 120, 92, 70, 0, 0, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 793, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 95, 0, 118, 119, 120, 92,
	70, 0, 0, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 103, 91, 0, 0, 63, 0, 83, 121,
	99, 78, 115, 0, 0, 0, 0, 0, 0, 0,
	226, 0, 383, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 95, 0, 118, 119, 120, 92, 70, 0, 360,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 63, 0, 83, 121, 99, 78, 115,
	0, 0, 0, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 258, 0, 0, 104, 114, 123, 0, 95,
	118, 119, 120, 92, 70, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	63, 0, 83, 121, 99, 78, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 95, 0, 118, 119,
	120, 92, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 91, 0, 0, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 95, 0, 118, 119, 120, 92, 70,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 63, 0, 83, 121, 99,
	78, 115, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 0, 0, 0, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 95, 0, 118,
	119, 120, 92, 70, 0, 0, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 264, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 0, 0, 118, 119, 120, 265,
	263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 83, 121,
	99, 78, 115,
}
var yyPact = [...]int{

	94, -1000, -160, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 709, 732, -1000, -1000,
	-1000, -1000, -1000, 490, 4924, 2, 55, 34, 51, 3295,
	6863, -1000, -1000, -1000, -1000, -1000, -1000, 516, -1000, -1000,
	-1000, -1000, -1000, 687, 705, 523, 674, 570, -1000, -6,
	5763, 6392, 7020, -1000, 365, 43, 6863, -117, -10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46, 6863, -1000, 6863, -11, 354,
	-11, 6863, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 311, 662, 4227, 4227, 709, -1000,
	516, -1000, -1000, -1000, 618, -1000, -1000, 199, 6234, 423,
	604, -1000, -1000, -1000, 663, 5278, 5606, 91, 6863, 95,
	-1000, 2701, 398, -1000, 629, -1000, -1000, 134, -1000, 90,
	-1000, -1000, 379, -1000, 1444, 344, 2305, 7, 6863, 163,
	6863, 2305, 5, 6863, 665, 510, 6863, -1000, -1000, -1000,
	-1000, -1000, 728, 121, 302, -1000, 4227, 4775, 473, 473,
	-1000, -1000, 64, -1000, -1000, 4581, 4581, 4581, 4581, 4581,
	4581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 473, 82, -1000, 4041, 473,
	473, 473, 473, 473, 473, 4227, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 473, 473, 467,
	-1000, 361, 687, 311, 570, 5435, 528, -1000, -1000, 526,
	6863, -1000, 6706, 5763, 5763, 5763, 5763, -1000, 542, 539,
	-1000, 565, 535, 600, 6863, -1000, 360, 311, 5278, 62,
	-1000, 6077, -1000, -1000, 3097, 723, 5763, 6863, -1000, -1000,
	-1000, -1000, -1000, 6706, -1000, 4227, 2899, 1909, 72, 225,
	-91, -1000, -1000, 475, -1000, 475, 475, 475, 475, -68,
	-68, -68, -68, -1000, -1000, -1000, -1000, -1000, 486, -1000,
	475, 475, 475, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 485, 485, 485, 481, 481, -16, -1000, -1000, -1000,
	6863, -1000, 664, 44, -1000, 6863, -1000, -1000, 6863, 2305,
	-1000, 590, 4227, 4227, 173, 4227, 4227, 125, 4581, 238,
	139, 4581, 4581, 4581, 4581, 4581, 4581, 4581, 4581, 4581,
	4581, 4581, 4581, 4581, 4581, 4581, 272, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 343, -1000, 516, 573, 573,
	99, 99, 99, 99, 99, 1344, 3481, 2899, 341, 194,
	4041, 3667, 3667, 4227, 4227, 3667, 668, 155, 194, 6549,
	-1000, 311, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3667,
	3667, 3667, 3667, 4227, -1000, -1000, -1000, 662, -1000, 668,
	680, -1000, 625, 621, 3667, -1000, 509, 6706, 473, -1000,
	5101, -1000, 487, 604, 497, 577, -1000, -1000, -1000, -1000,
	538, -1000, 532, -1000, -1000, -1000, -1000, -1000, 311, -1000,
	37, 12, 10, -1000, -1000, -1000, -1000, 709, 4227, 446,
	-1000, -1000, -1000, 194, -1000, 79, -1000, 425, 1711, -1000,
	-1000, -1000, -1000, -1000, -1000, 484, 638, 129, 338, -1000,
	-1000, 632, -1000, 170, -93, -1000, -1000, 254, -68, -68,
	-1000, -1000, 96, 628, 96, 96, 96, 265, -1000, -1000,
	-1000, -1000, 239, -1000, -1000, -1000, 231, -1000, 494, 6549,
	2305, -1000, -1000, 131, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -36, -1000, -1000, -1000,
	578, 125, 152, -1000, -1000, 258, -1000, -1000, 194, 194,
	990, -1000, -1000, -1000, -1000, 238, 4581, 4581, 4581, 666,
	990, 971, 620, 415, 99, 210, 210, 98, 98, 98,
	98, 98, 156, 156, -1000, -1000, -1000, 311, -1000, -1000,
	-1000, 311, 3667, 416, -1000, -1000, 4767, 76, 473, 4227,
	-1000, 310, 310, 110, 432, 310, 3667, 158, -1000, 4227,
	311, -1000, 310, 311, 310, 310, -1000, -1000, 6863, -1000,
	-1000, -1000, -1000, 431, -1000, 641, 395, 403, -1000, -1000,
	3853, 311, 337, 75, 709, 4227, 4227, -1000, -1000, -1000,
	473, 473, 473, 687, 194, -1000, 2701, 1909, -1000, 1909,
	6549, -1000, 329, -1000, -1000, -87, 464, -1000, -1000, -1000,
	374, 96, 96, -1000, 318, 154, -1000, -1000, -1000, 325,
	-1000, 405, 323, 6863, -1000, -1000, -1000, 6863, -1000, -1000,
	-1000, -1000, -1000, 6549, -1000, -1000, -1000, -1000, -1000, 666,
	990, 580, -1000, 4581, 4581, -1000, -1000, 310, 3667, -1000,
	-1000, 5920, -1000, -1000, 2503, 3667, 194, -1000, -1000, 17,
	272, 17, -126, 482, 138, -1000, 4227, 218, -1000, -1000,
	-1000, -1000, -1000, -1000, 723, 5763, 637, -1000, 473, -1000,
	-1000, 437, 6549, 6549, 687, 194, 194, 6549, 6549, 6549,
	-1000, -1000, 1711, -1000, 307, -1000, 475, -1000, 71, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 262, 224, -1000, 207, 2305, -1000, -1000, 658, -1000,
	4581, 990, 990, -1000, -1000, -1000, -1000, 68, 311, 311,
	475, 475, -1000, 475, 481, -1000, 475, -51, 475, -52,
	311, 311, 473, -123, -1000, 194, 4227, 716, 404, 727,
	-1000, 473, -1000, 516, 67, -1000, -1000, 303, -1000, 303,
	303, -1000, 6549, -1000, 182, 636, -1000, 634, -1000, 368,
	326, -1000, 473, 990, 2107, -1000, -1000, -1000, 30, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4581, 311, 259,
	194, 714, 690, 6706, 403, 311, 6549, -1000, 6549, -1000,
	-1000, -1000, -1000, 226, -1000, -1000, -1000, -1000, -38, -1000,
	-1000, -1000, 41, -1000, -1000, -1000, 4227, 4227, 398, -1000,
	-1000, -1000, -1000, 300, -1000, 6549, 311, 22, -137, 194,
	397, -1000, -38, 584, -1000, 574, -131, -144, -1000, -41,
	-1000, 548, -1000, -44, -133, 473, -140, 4404, -148, 177,
	311, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 952, 23, 560, 951, 950, 948, 947, 945, 938,
	936, 934, 929, 925, 922, 921, 919, 918, 916, 55,
	915, 914, 909, 44, 906, 49, 905, 902, 27, 47,
	21, 32, 503, 897, 18, 42, 50, 896, 895, 891,
	40, 888, 926, 887, 881, 880, 7, 13, 879, 878,
	877, 876, 37, 127, 874, 871, 870, 868, 866, 865,
	35, 4, 8, 6, 14, 861, 94, 9, 860, 31,
	855, 854, 853, 852, 20, 851, 39, 847, 15, 33,
	846, 30, 10, 843, 48, 842, 537, 838, 96, 835,
	831, 830, 829, 827, 815, 54, 34, 303, 74, 17,
	810, 889, 25, 45, 806, 805, 79, 19, 22, 16,
	804, 803, 797, 796, 795, 794, 793, 56, 790, 789,
	12, 28, 788, 787, 52, 11, 783, 782, 779, 778,
	41, 777, 36, 776, 773, 770, 29, 26, 769, 5,
	752, 751, 2, 748, 746, 742, 0, 3, 739, 738,
	150,
}
var yyR1 = [...]int{

	0, 144, 145, 145, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 148, 148, 38, 38, 9, 9, 83, 83,
	83, 10, 10, 10, 10, 14, 133, 134, 134, 134,
	130, 111, 111, 111, 114, 114, 112, 112, 112, 112,
	112, 112, 112, 113, 113, 113, 113, 113, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 129, 129, 117,
	117, 124, 124, 125, 125, 125, 122, 122, 123, 123,
	126, 126, 126, 118, 118, 118, 118, 118, 127, 127,
	120, 120, 120, 121, 121, 128, 128, 128, 128, 128,
	119, 119, 131, 138, 138, 138, 138, 132, 132, 140,
	140, 139, 135, 135, 135, 136, 136, 136, 137, 137,
	137, 11, 11, 11, 11, 11, 143, 141, 141, 142,
	142, 12, 13, 13, 13, 15, 110, 110, 110, 16,
	17, 18, 18, 18, 18, 18, 18, 149, 19, 20,
	20, 21, 21, 21, 25, 25, 25, 23, 23, 24,
	24, 30, 30, 29, 29, 31, 31, 31, 31, 100,
	100, 100, 99, 99, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 44, 37, 37, 37, 37, 105, 105,
	104, 104, 104, 103, 103, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 43, 43, 42, 42, 45,
	45, 45, 45, 46, 46, 47, 47, 32, 32, 32,
	32, 32, 32, 32, 87, 87, 49, 49, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 59, 59,
	59, 59, 59, 59, 50, 50, 50, 50, 50, 50,
	50, 28, 28, 60, 60, 60, 66, 61, 61, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 57,
	57, 57, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 56, 56, 56, 56, 56, 56, 56, 56, 150,
	150, 58, 58, 58, 58, 26, 26, 26, 26, 26,
	108, 108, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 70, 70, 27, 27, 68,
	68, 69, 71, 71, 67, 67, 67, 52, 52, 52,
	52, 52, 52, 52, 52, 54, 54, 54, 72, 72,
	73, 73, 74, 74, 75, 75, 76, 77, 77, 77,
	78, 78, 78, 78, 79, 79, 79, 51, 51, 51,
	51, 51, 51, 80, 80, 80, 80, 81, 81, 62,
	62, 64, 64, 63, 65, 82, 82, 84, 85, 85,
	88, 88, 89, 89, 86, 86, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 91, 91, 91,
	92, 92, 93, 93, 93, 94, 94, 97, 97, 98,
	98, 101, 101, 102, 102, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 146, 147, 106, 107, 107,
	107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 2, 8, 4, 6, 4, 4, 1, 3, 3,
	7, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 0, 1,
	0, 3, 3, 0, 2, 0, 2, 1, 2, 1,
	0, 2, 4, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 4, 5, 7, 1, 3, 8,
	8, 5, 4, 5, 5, 3, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 5, 5, 3, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -144, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 108, 109, 111, 110, 112, 122,
	47, 24, 123, 124, 127, 128, 129, -146, 7, 190,
	50, -145, 203, -74, 14, -21, 5, -19, -149, -19,
	-19, -19, -19, -133, 50, -93, 115, 67, 113, 119,
	-97, 53, -96, 196, 141, 135, 162, 154, 152, 155,
	180, 62, 125, 150, 146, 144, 26, 167, 201, 145,
	139, 140, 166, 198, 32, 133, 165, 161, 164, 138,
	160, 36, 179, 157, 147, 17, 128, 131, 121, 200,
	143, 132, 127, 35, 171, 137, 158, 134, 148, 149,
	163, 136, 159, 129, 172, 202, 156, 153, 176, 177,
	178, 199, 151, 173, -86, 115, 117, 113, 113, 114,
	115, 113, -110, 53, -95, -96, 68, 21, 23, 169,
	71, 103, 15, 72, 102, 191, 108, 45, 183, 184,
	181, 182, 174, 28, 9, 24, 123, 20, 96, 110,
	75, 76, 126, 22, 124, 66, 18, 48, 10, 12,
	13, 118, 117, 87, 114, 43, 7, 104, 25, 84,
	39, 27, 41, 85, 16, 185, 186, 30, 195, 130,
	98, 46, 33, 69, 64, 49, 67, 14, 44, 86,
	111, 190, 42, 6, 194, 29, 122, 40, 113, 175,
	74, 116, 65, 5, 119, 8, 47, 120, 187, 188,
	189, 31, 73, 11, 115, -101, 53, -96, -106, -106,
	-106, -106, -106, -106, -2, -78, 16, 15, -5, -3,
	-146, 6, 19, 20, -25, 37, 38, -20, -86, -34,
	-35, -36, -37, -44, -66, -146, -42, -101, 10, -38,
	-42, -83, -82, 180, 155, 179, -84, -67, -97, -101,
	53, -96, -134, -130, 53, 114, -42, 190, -89, 118,
	113, -42, -42, -88, 118, 53, -88, -42, -106, -147,
	52, -79, 18, 30, -32, -48, 69, -53, 28, 22,
	-52, -49, -67, -65, -66, 103, 92, 93, 100, 70,
	104, -57, -55, -56, -58, 55, 54, 63, 56, 57,
	58, 59, 64, 65, 66, -97, -101, -63, -146, 41,
	42, 191, 192, 195, 193, 72, 31, 181, 189, 188,
	187, 185, 186, 183, 184, 118, 182, 98, 190, -75,
	-76, -32, -74, -2, -19, 33, -23, 20, 61, -43,
	25, -42, 29, 51, -39, -40, -41, 39, 43, 45,
	40, 41, 42, 46, -105, 21, -34, -2, -146, -104,
	-103, 21, -101, 55, 105, -42, -148, 51, 10, 120,
	-98, -97, -95, 51, 29, 77, 105, 52, 51, -111,
	-114, -116, -115, -112, -113, 152, 153, 103, 156, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 125,
	148, 149, 150, 151, 135, 136, 137, 138, 139, 140,
	141, 143, 144, 145, 146, 147, 53, -107, -146, -98,
	115, -42, 69, -42, -107, 116, -42, 22, 49, -42,
	8, 87, 68, 67, 84, 51, 17, -32, -50, 87,
	69, 85, 86, 71, 89, 88, 99, 92, 93, 94,
	95, 96, 97, 98, 90, 91, 102, 77, 78, 79,
	80, 81, 82, 83, -87, -146, -66, -146, 106, 107,
	-53, -53, -53, -53, -53, -53, -146, 105, -61, -32,
	-146, -146, -146, -146, -146, -146, -146, -70, -32, -146,
	-150, -146, -150, -150, -150, -150, -150, -150, -150, -146,
	-146, -146, -146, 51, -77, 23, 24, -78, -147, -25,
	-54, -97, 56, 59, -24, 40, -51, 29, 31, -2,
	-146, -42, -82, -35, -36, -35, -36, 39, 39, 39,
	44, 39, 44, 39, -40, -101, -147, -147, -2, -45,
	47, 117, 48, -103, -102, -101, -95, -47, 11, -34,
	-42, -106, -84, -32, -98, -102, -95, -135, -136, -137,
	-98, 55, 56, -130, -131, -138, 121, 119, -132, 114,
	27, -126, 64, 69, -122, 172, -117, 50, -117, -117,
	-117, -117, -120, 155, -120, -120, -120, 50, -117, -117,
	-117, -124, 50, -124, -124, -125, 50, -125, -94, 120,
	-42, 22, -90, 111, -143, 109, 169, 155, 62, 28,
	110, 14, 191, 131, 202, 53, 132, -42, -42, -107,
	35, -32, -32, -59, 64, 69, 65, 66, -32, -32,
	-53, -60, -63, -66, 60, 87, 85, 86, 71, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -108, 53, 55, 53, -52, -52,
	-97, -30, 20, -29, -31, 94, -32, -101, -98, 51,
	-147, -29, -29, -32, -32, -29, -23, -68, -69, 73,
	-97, -147, -29, -30, -29, -29, -76, -79, -85, 18,
	10, 31, 31, -29, -81, 49, -82, -62, -64, -63,
	-146, -2, -80, -97, -47, 49, 49, 39, 39, -147,
	114, 114, 114, -74, -32, -47, 105, 51, -137, 77,
	50, 27, -132, 53, 53, -118, 28, 64, -123, 173,
	56, -120, -120, -121, 102, 29, -121, -121, -121, -129,
	55, 56, 56, 49, -97, -107, -106, -91, -92, 116,
	21, 114, 27, 131, 36, 64, 65, 66, -60, -53,
	-53, -53, -28, 126, 68, -147, -147, -29, 51, -100,
	-99, 21, -97, 55, 105, -146, -32, -147, -147, 51,
	120, 21, -147, -29, -71, -69, 75, -32, -147, -147,
	-147, -147, -147, -42, -33, 10, 26, -81, 51, -147,
	-147, -147, 51, 105, -74, -32, -32, -146, -146, -146,
	-78, -98, -136, -137, -140, -139, -97, 53, -127, 169,
	55, 56, 57, 64, 52, -121, -121, 53, 53, 103,
	52, 51, 51, 52, 51, -42, -42, -106, -97, -28,
	68, -53, -53, -147, -31, -99, 94, -102, -30, -109,
	103, 152, 125, 150, 146, 166, 157, 171, 148, 172,
	-108, -109, 196, -74, 76, -32, 74, -47, -34, 27,
	-64, 31, -2, -146, -97, -97, -78, -46, -97, -46,
	-46, 52, 51, -117, -128, 121, 27, 119, 55, 56,
	56, -107, 25, -53, 105, -147, -147, -117, -117, -117,
	-125, -117, 140, -117, 140, -147, -147, -146, -27, 194,
	-32, -72, 12, 8, -62, -2, 105, -147, 51, -147,
	-147, -139, -119, 62, 27, 27, 52, 52, -146, 94,
	-120, 53, -53, -147, 55, -73, 13, 15, -82, -147,
	-97, -97, 55, -141, -142, 131, -26, 87, 199, -32,
	-61, -147, 51, -97, -147, 197, 46, 200, -142, 31,
	36, 198, 201, 133, 36, 134, 199, -146, 200, -53,
	130, 201, -147, -147,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 382, 0, 167, 167,
	167, 167, 167, 0, 442, 424, 0, 0, 0, 0,
	0, 607, 607, 607, 607, 607, 607, 0, 27, 28,
	605, 1, 3, 390, 0, 0, 171, 174, 169, 424,
	0, 0, 0, 41, 0, 0, 598, 0, 422, 443,
	444, 447, 448, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 599, 600,
	601, 602, 603, 604, 0, 0, 425, 0, 420, 0,
	420, 0, 607, 156, 157, 158, 455, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 598, 160, 451, 452, 161, 162,
	163, 164, 165, 166, 21, 394, 0, 0, 382, 23,
	0, 167, 172, 173, 177, 175, 176, 168, 0, 0,
	196, 198, 199, 200, 208, 0, 210, 227, 0, 0,
	34, 0, 37, -2, 549, -2, 415, 0, 364, 0,
	-2, -2, 0, 47, 0, 0, 608, 0, 0, 0,
	0, 608, 0, 0, 0, 0, 0, 155, 159, 22,
	606, 17, 0, 0, 391, 237, 0, 242, 244, 0,
	279, 280, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 305, 306, 307, 308, 367, 368, 369, 370, 371,
	372, 373, 374, 246, 247, 364, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 329, 329, 329,
	329, 329, 329, 329, 329, 0, 0, 0, 0, 383,
	384, 387, 390, 21, 174, 0, 179, 178, 170, 0,
	0, 226, 0, 0, 0, 0, 0, 215, 0, 0,
	218, 0, 0, 0, 0, 209, 0, 21, 0, 229,
	211, 0, 213, 214, 0, 235, 0, 0, 32, 33,
	607, 449, 450, 0, 39, 0, 0, 132, 0, 100,
	96, 52, 53, 89, 55, 89, 89, 89, 89, 110,
	110, 110, 110, 81, 82, 83, 84, 85, 0, 68,
	89, 89, 89, 72, 56, 57, 58, 59, 60, 61,
	62, 91, 91, 91, 93, 93, 445, 43, 609, 610,
	0, 45, 0, 0, 144, 0, 152, 421, 0, 608,
	395, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 268, 269, 270, 243, 0, 257, 0, 0, 0,
	299, 300, 301, 302, 303, 0, 181, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 177, 0, 356, 0,
	321, 0, 322, 323, 324, 325, 326, 327, 328, 0,
	181, 0, 0, 0, 386, 388, 389, 394, 24, 177,
	0, 375, 0, 0, 0, 180, 407, 0, 0, -2,
	0, 225, 235, 197, 204, 0, 207, 216, 217, 219,
	0, 221, 0, 223, 224, 201, 202, 276, 21, 203,
	0, 0, 0, 212, 228, 453, 454, 382, 0, 235,
	35, 36, 416, 417, 365, 0, -2, 46, 133, 135,
	138, 139, 140, 48, 49, 0, 0, 0, 0, 127,
	128, 103, 101, 0, 98, 97, 54, 0, 110, 110,
	75, 76, 113, 0, 113, 113, 113, 0, 69, 70,
	71, 63, 0, 64, 65, 66, 0, 67, 0, 0,
	608, 423, 607, 437, 145, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 0, 151, 153, 154,
	0, 238, 239, 241, 258, 0, 260, 262, 392, 393,
	248, 249, 273, 274, 275, 0, 0, 0, 0, 271,
	253, 0, 284, 285, 286, 287, 288, 289, 290, 291,
	292, 293, 294, 295, 298, 340, 341, 0, 296, 297,
	304, 0, 0, 182, 183, 185, 189, 0, 365, 0,
	413, 0, 0, 0, 0, 0, 0, 362, 359, 0,
	0, 330, 0, 0, 0, 0, 385, 18, 0, 418,
	419, 376, 377, 194, 25, 0, 407, 397, 409, 411,
	0, 21, 0, 403, 382, 0, 0, 220, 222, -2,
	0, 0, 0, 390, 236, 31, 0, 0, 136, 0,
	0, 123, 0, 125, 126, 108, 0, 102, 51, 99,
	0, 113, 113, 77, 0, 0, 78, 79, 80, 0,
	87, 0, 0, 0, 446, 44, 141, 0, 607, 438,
	439, 440, 441, 0, 396, 259, 261, 263, 250, 271,
	254, 0, 251, 0, 0, 245, 309, 0, 0, 186,
	190, 0, 192, 193, 0, 181, 278, 312, 313, 0,
	0, 0, 0, 382, 0, 360, 0, 0, 320, 331,
	332, 333, 334, 19, 235, 0, 0, 26, 0, 412,
	-2, 0, 0, 0, 390, 205, 206, 0, 0, 0,
	30, 366, 134, 137, 0, 129, 89, 124, 115, 109,
	104, 105, 106, 107, 90, 73, 74, 114, 111, 112,
	86, 0, 0, 94, 0, 608, 142, 143, 0, 252,
	0, 272, 255, 310, 184, 191, 187, 0, 0, 0,
	89, 89, 345, 89, 93, 348, 89, 350, 89, 353,
	0, 0, 0, 357, 319, 363, 0, 378, 195, 0,
	410, 0, -2, 0, 405, 404, 29, 0, 233, 0,
	0, 122, 0, 131, 120, 0, 117, 119, 88, 0,
	0, 42, 0, 256, 0, 311, 314, 342, 110, 346,
	347, 349, 351, 352, 354, 316, 315, 0, 0, 0,
	361, 380, 0, 0, 400, 21, 0, 230, 0, 231,
	232, 130, 50, 0, 116, 118, 92, 95, 0, 188,
	343, 344, 335, 318, 358, 20, 0, 0, 408, -2,
	406, 234, 121, 0, 147, 0, 0, 0, 0, 381,
	379, 146, 0, 0, 317, 0, 0, 0, 148, 0,
	336, 0, 339, 0, 337, 0, 0, 0, 0, 0,
	0, 338, 149, 150,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	50, 52, 94, 92, 51, 93, 105, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 203,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:270
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:275
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:276
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:298
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:306
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:310
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:317
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:327
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:337
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:344
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:367
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:377
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:387
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:392
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:393
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:397
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:401
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:407
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:411
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:423
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:428
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:437
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:443
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:450
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:457
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:462
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:466
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:472
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:482
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:492
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:650
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:655
		{
			yyVAL.optVal = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:659
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:664
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:668
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:676
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:680
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:686
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:703
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:721
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:726
		{
			yyVAL.optVal = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:730
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:738
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:742
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:747
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:751
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:756
		{
			yyVAL.str = ""
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:760
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:764
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:769
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:773
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:778
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:782
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:786
		{
			yyVAL.colKeyOpt = colKey
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:799
		{
			yyVAL.optVal = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:803
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:809
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:815
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:819
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:823
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:827
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:843
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:847
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:858
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:866
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.str = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:882
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:896
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:902
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:906
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:911
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:916
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:920
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 146:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:926
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:932
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:936
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 149:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:942
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 150:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:946
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:952
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:958
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:966
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:971
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.statement = &OtherRead{}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.statement = &OtherRead{}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &OtherRead{}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1048
		{
			setAllowComments(yylex, true)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.bytes2 = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = UnionStr
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = UnionAllStr
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.str = UnionDistinctStr
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.str = SQLCacheStr
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = DistinctStr
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = StraightJoinHint
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.selectExprs = nil
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.empty = struct{}{}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.empty = struct{}{}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.str = JoinStr
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.str = JoinStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.str = JoinStr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.str = StraightJoinStr
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = LeftJoinStr
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = LeftJoinStr
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.str = RightJoinStr
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = RightJoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = NaturalJoinStr
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.indexHints = nil
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.expr = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.str = ""
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = IsNullStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = IsNotNullStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = IsTrueStr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = IsNotTrueStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = IsFalseStr
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = IsNotFalseStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.str = EqualStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = LessThanStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = GreaterThanStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = LessEqualStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = GreaterEqualStr
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = NotEqualStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.expr = nil
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 317:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.str = BooleanModeStr
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.str = QueryExpansionStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = nil
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = string("")
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &NullVal{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.exprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.orderBy = nil
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.str = AscScr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.str = AscScr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.str = DescScr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.limit = nil
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.str = ForUpdateStr
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = ShareModeStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2124
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.updateExprs = nil
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.byt = 0
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.byt = 1
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.str = IgnoreStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			decNesting(yylex)
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2496
		{
			forceEOF(yylex)
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2501
		{
			forceEOF(yylex)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			forceEOF(yylex)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

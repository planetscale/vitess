// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
	tableAndLockTypes      []*TableAndLockType
	tableAndLockType       *TableAndLockType
	lockType               LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const CASCADED = 57523
const DEFINER = 57524
const OPTION = 57525
const SQL = 57526
const UNDEFINED = 57527
const SEQUENCE = 57528
const MERGE = 57529
const TEMPTABLE = 57530
const INVOKER = 57531
const SECURITY = 57532
const BEGIN = 57533
const START = 57534
const TRANSACTION = 57535
const COMMIT = 57536
const ROLLBACK = 57537
const SAVEPOINT = 57538
const RELEASE = 57539
const WORK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const MEDIUMINT = 57544
const INT = 57545
const INTEGER = 57546
const BIGINT = 57547
const INTNUM = 57548
const REAL = 57549
const DOUBLE = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const TIME = 57554
const TIMESTAMP = 57555
const DATETIME = 57556
const YEAR = 57557
const CHAR = 57558
const VARCHAR = 57559
const BOOL = 57560
const CHARACTER = 57561
const VARBINARY = 57562
const NCHAR = 57563
const TEXT = 57564
const TINYTEXT = 57565
const MEDIUMTEXT = 57566
const LONGTEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const NULLX = 57582
const AUTO_INCREMENT = 57583
const APPROXNUM = 57584
const SIGNED = 57585
const UNSIGNED = 57586
const ZEROFILL = 57587
const COLLATION = 57588
const DATABASES = 57589
const SCHEMAS = 57590
const TABLES = 57591
const VITESS_METADATA = 57592
const VSCHEMA = 57593
const FULL = 57594
const PROCESSLIST = 57595
const COLUMNS = 57596
const FIELDS = 57597
const ENGINES = 57598
const PLUGINS = 57599
const EXTENDED = 57600
const KEYSPACES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const CODE = 57605
const PRIVILEGES = 57606
const NAMES = 57607
const CHARSET = 57608
const GLOBAL = 57609
const SESSION = 57610
const ISOLATION = 57611
const LEVEL = 57612
const READ = 57613
const WRITE = 57614
const ONLY = 57615
const REPEATABLE = 57616
const COMMITTED = 57617
const UNCOMMITTED = 57618
const SERIALIZABLE = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_TIME = 57623
const LOCALTIME = 57624
const LOCALTIMESTAMP = 57625
const CURRENT_USER = 57626
const UTC_DATE = 57627
const UTC_TIME = 57628
const UTC_TIMESTAMP = 57629
const REPLACE = 57630
const CONVERT = 57631
const CAST = 57632
const SUBSTR = 57633
const SUBSTRING = 57634
const GROUP_CONCAT = 57635
const SEPARATOR = 57636
const TIMESTAMPADD = 57637
const TIMESTAMPDIFF = 57638
const MATCH = 57639
const AGAINST = 57640
const BOOLEAN = 57641
const LANGUAGE = 57642
const WITH = 57643
const QUERY = 57644
const EXPANSION = 57645
const UNUSED = 57646
const ARRAY = 57647
const CUME_DIST = 57648
const DESCRIPTION = 57649
const DENSE_RANK = 57650
const EMPTY = 57651
const EXCEPT = 57652
const FIRST_VALUE = 57653
const GROUPING = 57654
const GROUPS = 57655
const JSON_TABLE = 57656
const LAG = 57657
const LAST_VALUE = 57658
const LATERAL = 57659
const LEAD = 57660
const MEMBER = 57661
const NTH_VALUE = 57662
const NTILE = 57663
const OF = 57664
const OVER = 57665
const PERCENT_RANK = 57666
const RANK = 57667
const RECURSIVE = 57668
const ROW_NUMBER = 57669
const SYSTEM = 57670
const WINDOW = 57671
const ACTIVE = 57672
const ADMIN = 57673
const BUCKETS = 57674
const CLONE = 57675
const COMPONENT = 57676
const DEFINITION = 57677
const ENFORCED = 57678
const EXCLUDE = 57679
const FOLLOWING = 57680
const GEOMCOLLECTION = 57681
const GET_MASTER_PUBLIC_KEY = 57682
const HISTOGRAM = 57683
const HISTORY = 57684
const INACTIVE = 57685
const INVISIBLE = 57686
const LOCKED = 57687
const MASTER_COMPRESSION_ALGORITHMS = 57688
const MASTER_PUBLIC_KEY_PATH = 57689
const MASTER_TLS_CIPHERSUITES = 57690
const MASTER_ZSTD_COMPRESSION_LEVEL = 57691
const NESTED = 57692
const NETWORK_NAMESPACE = 57693
const NOWAIT = 57694
const NULLS = 57695
const OJ = 57696
const OLD = 57697
const OPTIONAL = 57698
const ORDINALITY = 57699
const ORGANIZATION = 57700
const OTHERS = 57701
const PATH = 57702
const PERSIST = 57703
const PERSIST_ONLY = 57704
const PRECEDING = 57705
const PRIVILEGE_CHECKS_USER = 57706
const PROCESS = 57707
const RANDOM = 57708
const REFERENCE = 57709
const REQUIRE_ROW_FORMAT = 57710
const RESOURCE = 57711
const RESPECT = 57712
const RESTART = 57713
const RETAIN = 57714
const REUSE = 57715
const ROLE = 57716
const SECONDARY = 57717
const SECONDARY_ENGINE = 57718
const SECONDARY_LOAD = 57719
const SECONDARY_UNLOAD = 57720
const SKIP = 57721
const SRID = 57722
const THREAD_PRIORITY = 57723
const TIES = 57724
const UNBOUNDED = 57725
const VCPU = 57726
const VISIBLE = 57727
const FORMAT = 57728
const TREE = 57729
const VITESS = 57730
const TRADITIONAL = 57731
const LOCAL = 57732
const LOW_PRIORITY = 57733

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"CODE",
	"PRIVILEGES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	155, 803,
	-2, 87,
	-1, 43,
	136, 110,
	236, 110,
	-2, 104,
	-1, 50,
	34, 350,
	155, 350,
	167, 350,
	195, 364,
	196, 364,
	-2, 352,
	-1, 55,
	157, 374,
	-2, 372,
	-1, 79,
	55, 417,
	-2, 425,
	-1, 103,
	136, 110,
	236, 110,
	-2, 105,
	-1, 450,
	143, 814,
	-2, 810,
	-1, 451,
	143, 815,
	-2, 811,
	-1, 468,
	55, 418,
	-2, 430,
	-1, 469,
	55, 419,
	-2, 431,
	-1, 489,
	111, 1104,
	-2, 80,
	-1, 490,
	111, 1003,
	-2, 81,
	-1, 495,
	111, 960,
	-2, 774,
	-1, 497,
	111, 1044,
	-2, 776,
	-1, 652,
	136, 110,
	236, 110,
	-2, 273,
	-1, 1044,
	143, 817,
	-2, 813,
	-1, 1136,
	73, 62,
	81, 62,
	-2, 66,
	-1, 1532,
	5, 671,
	18, 671,
	20, 671,
	32, 671,
	82, 671,
	-2, 456,
	-1, 1742,
	45, 745,
	-2, 743,
}

const yyPrivate = 57344

const yyLast = 19873

var yyAct = [...]int{
	450, 1825, 1580, 1789, 1449, 1742, 1718, 1836, 1512, 1357,
	394, 1688, 1642, 409, 78, 3, 1325, 1665, 1083, 1209,
	1203, 1358, 1509, 1425, 1167, 1157, 1158, 423, 629, 810,
	1513, 1154, 632, 817, 929, 766, 1031, 1402, 1426, 1524,
	1038, 1284, 665, 1211, 1469, 962, 113, 1497, 919, 125,
	1344, 363, 125, 626, 974, 461, 1418, 375, 854, 125,
	1115, 1133, 494, 1172, 1122, 76, 470, 382, 815, 424,
	32, 847, 1085, 820, 840, 396, 804, 838, 701, 455,
	1008, 1233, 1064, 1212, 703, 1098, 851, 375, 633, 1199,
	375, 125, 375, 625, 853, 74, 1138, 827, 385, 392,
	977, 1041, 32, 844, 994, 837, 1080, 1081, 73, 779,
	125, 125, 1800, 79, 1323, 31, 104, 780, 125, 105,
	658, 1739, 1565, 125, 114, 115, 116, 1690, 383, 384,
	1652, 1829, 1786, 1823, 75, 1765, 1764, 1815, 1581, 1785,
	1486, 8, 7, 6, 457, 1610, 641, 1324, 81, 82,
	83, 84, 85, 86, 1538, 476, 480, 1729, 728, 727,
	737, 738, 730, 731, 732, 733, 734, 735, 736, 729,
	1148, 491, 739, 488, 1388, 1188, 699, 1387, 354, 673,
	1389, 33, 1216, 454, 67, 37, 38, 355, 453, 435,
	456, 441, 442, 439, 440, 352, 438, 437, 436, 1410,
	1440, 1539, 1540, 1214, 1439, 1182, 443, 444, 101, 118,
	119, 120, 1149, 1150, 101, 109, 855, 110, 856, 1645,
	643, 682, 683, 642, 1451, 1767, 1082, 96, 684, 349,
	645, 1189, 685, 682, 683, 1601, 1599, 373, 361, 993,
	114, 115, 116, 1470, 377, 114, 115, 116, 371, 1574,
	1436, 698, 951, 1221, 1821, 66, 1575, 922, 677, 678,
	697, 995, 996, 997, 674, 675, 676, 679, 33, 34,
	35, 67, 37, 38, 1213, 653, 1223, 341, 1224, 1225,
	101, 93, 1454, 1263, 1472, 1453, 948, 97, 71, 1814,
	98, 99, 1452, 39, 64, 65, 1802, 62, 950, 1719,
	1116, 952, 1255, 63, 343, 344, 345, 1748, 359, 360,
	366, 690, 1813, 692, 356, 358, 367, 346, 347, 369,
	368, 1801, 348, 1842, 342, 351, 364, 1207, 657, 111,
	644, 1207, 51, 1474, 949, 1478, 1545, 1473, 638, 1471,
	482, 125, 66, 1207, 1476, 689, 691, 628, 1326, 1328,
	1455, 100, 956, 1475, 1730, 686, 688, 100, 704, 1435,
	1176, 1496, 1495, 1494, 375, 639, 1477, 1479, 340, 117,
	1262, 1746, 1564, 1261, 751, 752, 651, 1631, 375, 375,
	1537, 1349, 1313, 1763, 1292, 1144, 668, 669, 670, 671,
	672, 1840, 831, 764, 710, 662, 1155, 887, 1189, 1708,
	739, 1252, 1384, 695, 1094, 700, 1303, 1254, 42, 44,
	47, 46, 49, 729, 61, 716, 739, 1768, 1438, 990,
	656, 719, 1721, 100, 114, 115, 116, 1215, 930, 1300,
	89, 719, 1522, 702, 975, 1222, 1327, 50, 70, 69,
	718, 716, 59, 60, 48, 923, 857, 1780, 365, 32,
	648, 714, 649, 687, 125, 650, 978, 719, 667, 1488,
	748, 750, 1065, 103, 1310, 1065, 925, 749, 1408, 90,
	52, 53, 808, 54, 55, 56, 57, 1751, 1556, 375,
	68, 680, 125, 1179, 125, 125, 1175, 375, 824, 807,
	1180, 763, 1651, 375, 1650, 768, 769, 770, 771, 772,
	773, 774, 775, 875, 778, 781, 781, 781, 787, 781,
	781, 787, 781, 795, 796, 797, 798, 799, 800, 801,
	802, 713, 711, 712, 694, 1176, 1570, 32, 805, 1838,
	1709, 1707, 1839, 1253, 1837, 1251, 696, 821, 751, 752,
	767, 659, 660, 976, 888, 836, 782, 784, 786, 788,
	790, 792, 793, 842, 783, 785, 66, 789, 791, 1015,
	794, 751, 752, 637, 666, 979, 1422, 68, 1011, 819,
	1421, 491, 809, 1013, 1014, 1012, 652, 1816, 1219, 114,
	115, 116, 901, 904, 905, 906, 907, 908, 909, 1843,
	910, 911, 912, 913, 914, 889, 890, 891, 892, 873,
	874, 902, 1499, 876, 1817, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 893, 894, 895, 896, 897,
	898, 899, 900, 1096, 1819, 125, 1423, 1807, 465, 915,
	1818, 732, 733, 734, 735, 736, 729, 1809, 125, 739,
	926, 927, 1577, 1797, 717, 718, 716, 945, 375, 1778,
	1500, 1175, 125, 1678, 1808, 1844, 1648, 125, 1619, 640,
	125, 961, 719, 125, 727, 737, 738, 730, 731, 732,
	733, 734, 735, 736, 729, 125, 1501, 739, 717, 718,
	716, 1431, 903, 1419, 1274, 1095, 1490, 375, 375, 375,
	375, 125, 375, 375, 966, 451, 719, 1521, 1099, 1100,
	1299, 852, 1069, 75, 717, 718, 716, 965, 1003, 1005,
	1006, 1277, 1278, 1279, 481, 1004, 968, 702, 970, 971,
	972, 973, 719, 1705, 1820, 964, 947, 730, 731, 732,
	733, 734, 735, 736, 729, 1714, 980, 739, 1705, 1761,
	1032, 114, 115, 116, 126, 1033, 1713, 126, 1662, 1034,
	1009, 1434, 376, 1177, 126, 1510, 702, 702, 702, 702,
	957, 702, 702, 375, 1521, 981, 982, 983, 984, 643,
	986, 987, 642, 717, 718, 716, 1626, 717, 718, 716,
	465, 464, 376, 1053, 1056, 376, 126, 376, 486, 1066,
	715, 719, 1757, 465, 988, 719, 375, 375, 1010, 483,
	484, 1048, 1720, 1298, 1345, 126, 126, 125, 1705, 1755,
	1043, 1297, 1118, 126, 114, 115, 116, 1378, 126, 375,
	717, 718, 716, 1705, 1747, 1139, 125, 1044, 1560, 375,
	717, 718, 716, 125, 1119, 125, 1705, 465, 719, 1074,
	1075, 1705, 1704, 125, 125, 918, 1641, 1345, 719, 1042,
	375, 1035, 1036, 375, 114, 115, 116, 1134, 1443, 1618,
	465, 1045, 1119, 1089, 375, 375, 767, 1629, 465, 1392,
	1049, 1050, 1119, 1101, 1055, 1058, 1059, 1113, 737, 738,
	730, 731, 732, 733, 734, 735, 736, 729, 1109, 1147,
	739, 1562, 1561, 1174, 1044, 1316, 114, 115, 116, 1073,
	1391, 1140, 1076, 1077, 412, 411, 414, 415, 416, 417,
	1140, 1243, 1135, 413, 418, 1521, 1042, 1558, 1559, 375,
	1183, 77, 1184, 1185, 1186, 1187, 1111, 114, 115, 116,
	1230, 1231, 1558, 1557, 491, 1205, 1145, 491, 1195, 1196,
	1197, 1198, 1142, 1108, 1206, 1146, 33, 1137, 1159, 125,
	125, 125, 125, 125, 1107, 465, 125, 125, 1162, 33,
	125, 375, 1141, 1229, 33, 1239, 1240, 1241, 1119, 465,
	1143, 1141, 715, 465, 918, 917, 125, 125, 125, 1139,
	864, 863, 1315, 458, 1352, 1107, 1107, 1139, 1097, 125,
	1078, 955, 125, 375, 849, 66, 1798, 1667, 1661, 1232,
	1637, 1201, 1202, 920, 1204, 1218, 1353, 1217, 1576, 1549,
	1228, 1695, 1107, 1653, 916, 1248, 1396, 1268, 1200, 1194,
	66, 1193, 91, 1272, 1657, 1428, 636, 1427, 1525, 1526,
	702, 1804, 1450, 66, 1668, 1216, 126, 1242, 66, 1267,
	1009, 1831, 1247, 1244, 1235, 1245, 1238, 1826, 1234, 1531,
	1551, 1528, 1236, 1237, 1190, 1191, 1192, 66, 1510, 376,
	1654, 1655, 1656, 1441, 991, 959, 1246, 1369, 1658, 1659,
	1367, 1428, 1370, 376, 376, 1368, 1530, 1366, 1371, 125,
	1128, 1129, 1365, 1784, 1502, 1334, 818, 125, 1010, 1782,
	1630, 1343, 1342, 1280, 1773, 1124, 1127, 1128, 1129, 1125,
	1770, 1126, 1130, 1806, 1294, 1525, 1526, 1788, 1790, 125,
	1332, 1796, 1291, 1795, 1743, 457, 1741, 954, 1333, 1331,
	125, 125, 125, 125, 125, 1293, 452, 1432, 1427, 1359,
	1354, 1338, 125, 1061, 1414, 928, 125, 862, 664, 125,
	125, 1289, 1290, 125, 125, 125, 1309, 1062, 811, 126,
	1376, 1407, 107, 805, 1329, 1322, 1390, 1624, 375, 1330,
	812, 456, 1307, 1753, 1752, 1350, 1337, 1397, 1693, 1405,
	1347, 389, 1403, 1403, 376, 1579, 1348, 126, 842, 126,
	126, 1346, 376, 1398, 1393, 1355, 1356, 1092, 376, 842,
	842, 842, 842, 842, 1226, 1372, 958, 1377, 1361, 1362,
	1379, 1364, 1099, 1100, 1381, 1135, 1385, 964, 842, 1715,
	1404, 1132, 842, 95, 462, 1382, 1395, 375, 459, 460,
	1413, 1341, 1415, 1416, 1417, 1360, 1622, 1811, 1363, 1340,
	1442, 1810, 1793, 1399, 1400, 1401, 1774, 1124, 1127, 1128,
	1129, 1125, 1159, 1126, 1130, 1623, 471, 463, 1430, 77,
	125, 1420, 1505, 1345, 1429, 1304, 375, 1301, 108, 832,
	472, 121, 825, 465, 1833, 1832, 1833, 375, 728, 727,
	737, 738, 730, 731, 732, 733, 734, 735, 736, 729,
	1744, 1646, 739, 822, 823, 474, 1093, 473, 458, 75,
	80, 72, 1, 375, 350, 1079, 803, 362, 1824, 1032,
	112, 1444, 1582, 728, 727, 737, 738, 730, 731, 732,
	733, 734, 735, 736, 729, 1664, 1445, 739, 1447, 935,
	126, 1717, 1227, 1459, 1468, 1285, 1457, 1467, 1458, 1424,
	375, 1210, 1465, 126, 471, 1480, 702, 1165, 1156, 88,
	125, 1487, 623, 376, 1481, 1456, 87, 126, 472, 693,
	375, 1164, 126, 1163, 1706, 126, 375, 375, 126, 1043,
	1411, 1412, 1511, 1359, 1409, 1181, 1644, 1550, 1406, 1750,
	126, 468, 469, 474, 870, 473, 1044, 1466, 868, 125,
	869, 1514, 376, 376, 376, 376, 126, 376, 376, 867,
	872, 871, 866, 375, 992, 375, 372, 375, 1491, 1131,
	1403, 1403, 1403, 1529, 1519, 858, 1508, 826, 1520, 1250,
	1249, 931, 1563, 1178, 989, 1555, 357, 681, 1541, 353,
	747, 1542, 1544, 1515, 1339, 32, 1174, 1386, 1533, 1543,
	1535, 492, 1536, 1571, 1466, 485, 125, 1546, 1547, 1548,
	1534, 1660, 125, 1553, 1554, 1516, 94, 1794, 842, 1771,
	1567, 1583, 375, 375, 375, 1769, 125, 1740, 376, 1689,
	1772, 1738, 1568, 1569, 1566, 1805, 1787, 1091, 1046, 1047,
	814, 1621, 1504, 1308, 776, 1063, 841, 1159, 395, 1159,
	1002, 410, 407, 408, 1102, 1351, 721, 393, 387, 833,
	1123, 376, 376, 1121, 1120, 1597, 845, 1527, 1523, 839,
	1588, 1589, 126, 1106, 1437, 921, 1220, 1573, 635, 467,
	92, 1090, 1060, 1728, 376, 1609, 466, 58, 36, 1594,
	1595, 126, 1596, 1592, 376, 1598, 379, 1600, 126, 1799,
	126, 1779, 1359, 706, 1625, 475, 30, 29, 126, 126,
	28, 23, 375, 1634, 22, 376, 21, 20, 376, 19,
	375, 25, 18, 17, 1633, 16, 1608, 1613, 106, 376,
	376, 102, 45, 43, 1614, 1615, 1616, 1639, 1393, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 41,
	40, 654, 375, 27, 26, 1640, 15, 14, 13, 12,
	11, 10, 9, 5, 4, 709, 1671, 24, 728, 727,
	737, 738, 730, 731, 732, 733, 734, 735, 736, 729,
	765, 2, 739, 0, 376, 375, 375, 375, 125, 375,
	0, 0, 1669, 0, 0, 0, 1159, 1681, 1683, 1684,
	375, 0, 375, 0, 0, 0, 1685, 0, 375, 1698,
	0, 0, 421, 1696, 126, 126, 126, 126, 126, 1663,
	1701, 126, 126, 0, 1514, 126, 376, 1694, 1514, 1692,
	1710, 1703, 375, 0, 0, 1677, 1666, 0, 375, 125,
	0, 126, 126, 126, 1716, 0, 1620, 0, 0, 1711,
	1722, 1712, 0, 0, 126, 0, 0, 126, 376, 1700,
	0, 0, 0, 0, 0, 1702, 1515, 0, 32, 374,
	1515, 0, 1737, 0, 1745, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 375, 375, 1514, 0, 0, 0, 0, 0, 493,
	1754, 0, 627, 1647, 634, 1649, 0, 1287, 1759, 0,
	0, 1288, 0, 0, 0, 0, 0, 375, 1760, 125,
	1766, 0, 1295, 1296, 1775, 1359, 0, 0, 1302, 0,
	0, 1305, 1306, 0, 1781, 1515, 1783, 0, 0, 1312,
	0, 1670, 1791, 1314, 126, 1792, 1317, 1318, 1319, 1320,
	1321, 0, 126, 0, 0, 32, 1803, 0, 0, 0,
	0, 0, 0, 0, 0, 1687, 941, 0, 0, 375,
	0, 0, 0, 0, 126, 1666, 1159, 0, 0, 0,
	940, 1812, 0, 0, 0, 126, 126, 126, 126, 126,
	0, 0, 0, 0, 0, 0, 1830, 126, 0, 0,
	0, 126, 0, 0, 126, 126, 1374, 1375, 126, 126,
	126, 1841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1822, 0, 0, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1612, 0, 936, 933, 934,
	0, 932, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 376, 0, 1070, 0, 0, 0, 0, 0, 1607,
	0, 0, 376, 0, 943, 946, 728, 727, 737, 738,
	730, 731, 732, 733, 734, 735, 736, 729, 0, 0,
	739, 0, 0, 0, 0, 0, 123, 0, 376, 0,
	0, 0, 1463, 1464, 0, 0, 378, 0, 0, 0,
	1606, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 478, 938, 0, 0, 0,
	705, 707, 0, 0, 0, 376, 0, 0, 631, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 937, 0,
	0, 0, 0, 0, 0, 376, 0, 646, 647, 0,
	1605, 376, 376, 0, 0, 655, 0, 0, 1517, 0,
	661, 728, 727, 737, 738, 730, 731, 732, 733, 734,
	735, 736, 729, 0, 126, 739, 0, 0, 386, 1532,
	0, 0, 0, 0, 0, 0, 942, 0, 376, 0,
	376, 0, 376, 0, 0, 0, 0, 0, 0, 1604,
	0, 944, 728, 727, 737, 738, 730, 731, 732, 733,
	734, 735, 736, 729, 0, 0, 739, 0, 0, 0,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 126, 0, 0, 0, 859, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 376, 376, 376,
	0, 126, 728, 727, 737, 738, 730, 731, 732, 733,
	734, 735, 736, 729, 0, 0, 739, 0, 1591, 0,
	0, 0, 1593, 0, 0, 0, 422, 0, 0, 0,
	0, 0, 0, 1602, 1603, 1281, 1282, 1283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1617, 728, 727, 737, 738, 730, 731, 732, 733, 734,
	735, 736, 729, 0, 0, 739, 0, 0, 1627, 1628,
	0, 0, 1632, 0, 0, 124, 1460, 0, 370, 0,
	0, 0, 0, 0, 0, 124, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 376, 728, 727, 737, 738,
	730, 731, 732, 733, 734, 735, 736, 729, 479, 479,
	739, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 376, 663, 0,
	0, 0, 0, 0, 0, 0, 124, 124, 0, 0,
	493, 0, 0, 0, 124, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	376, 376, 376, 126, 376, 0, 1286, 1682, 0, 0,
	0, 0, 0, 0, 0, 376, 0, 376, 0, 493,
	493, 493, 493, 376, 493, 493, 728, 727, 737, 738,
	730, 731, 732, 733, 734, 735, 736, 729, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 376, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1724, 1725, 1726, 1727, 0,
	1731, 0, 1732, 1733, 1734, 0, 1735, 1736, 728, 727,
	737, 738, 730, 731, 732, 733, 734, 735, 736, 729,
	0, 376, 739, 0, 720, 1037, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 376, 376, 376, 0, 835,
	1756, 1067, 846, 0, 0, 0, 0, 0, 0, 0,
	0, 1762, 0, 0, 0, 0, 0, 0, 1071, 1072,
	386, 0, 376, 0, 126, 0, 0, 0, 0, 777,
	0, 0, 0, 0, 0, 0, 0, 1461, 1462, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 1482, 1483, 493, 1484, 1485, 0, 813, 816,
	0, 0, 0, 0, 0, 0, 0, 1492, 1493, 0,
	0, 0, 493, 0, 376, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 493, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 723, 0, 726, 0, 0, 0,
	1834, 1835, 740, 741, 742, 743, 744, 745, 746, 0,
	724, 725, 722, 728, 727, 737, 738, 730, 731, 732,
	733, 734, 735, 736, 729, 0, 0, 739, 0, 0,
	0, 634, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 1552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 953,
	0, 0, 0, 0, 846, 0, 0, 960, 0, 0,
	0, 0, 0, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	124, 0, 1590, 0, 0, 1276, 0, 0, 0, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	124, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 999, 1000, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1067, 0, 1110, 0, 0, 0, 0, 0, 0,
	1114, 0, 1117, 0, 0, 0, 1672, 1673, 1674, 1675,
	1676, 1136, 0, 0, 1679, 1680, 1051, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	493, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 124, 0, 0, 124, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 1153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1256, 1257, 1258, 1259,
	1260, 0, 0, 1264, 1265, 0, 0, 1266, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 1275,
	0, 0, 1208, 0, 0, 493, 0, 0, 0, 0,
	479, 963, 0, 0, 0, 479, 479, 0, 0, 479,
	479, 479, 0, 0, 0, 1068, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1498, 0, 479, 479, 479, 479, 479, 0,
	0, 0, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 493, 0, 1827, 1067, 0, 0, 1518, 1498,
	0, 0, 124, 0, 0, 0, 0, 0, 963, 124,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 124,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 493, 0, 493, 0, 634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1380, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1584, 1585, 1586, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 1336, 816, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 124, 124, 124, 124,
	0, 0, 124, 124, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 1270, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 124, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 493, 0, 0, 1446, 0, 0,
	0, 0, 1643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 479, 479, 0, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 1643, 1643, 1643,
	0, 1686, 0, 1087, 0, 0, 0, 0, 0, 0,
	0, 0, 1697, 0, 1699, 0, 0, 1503, 0, 0,
	1643, 0, 0, 0, 479, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 124, 124, 124, 124,
	124, 0, 0, 0, 1643, 0, 0, 0, 1373, 0,
	1643, 0, 124, 0, 0, 124, 124, 0, 0, 124,
	1383, 963, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 1758, 493, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 1572, 0, 0, 0, 0, 0, 1578,
	0, 0, 0, 0, 0, 0, 0, 1067, 0, 1776,
	0, 0, 0, 1587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1643, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 386, 0, 0, 0, 0, 0, 0, 1635, 0,
	0, 1636, 0, 0, 1638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1723, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 1691, 386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1777, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 595, 0, 1087, 548, 610, 521, 538, 619,
	539, 542, 580, 505, 561, 237, 536, 0, 525, 501,
	532, 502, 523, 550, 166, 554, 520, 597, 564, 609,
	201, 0, 526, 249, 582, 281, 156, 209, 207, 303,
	171, 167, 165, 155, 188, 214, 248, 299, 242, 616,
	204, 571, 0, 290, 223, 124, 0, 0, 552, 599,
	559, 591, 547, 581, 510, 570, 611, 537, 578, 612,
	192, 154, 131, 234, 291, 173, 0, 0, 0, 114,
	115, 116, 0, 1160, 1161, 0, 0, 0, 0, 0,
	150, 0, 575, 606, 534, 577, 579, 622, 500, 572,
	0, 503, 506, 618, 602, 529, 530, 1394, 0, 0,
	0, 0, 0, 0, 551, 560, 588, 545, 0, 0,
	0, 0, 0, 0, 0, 0, 527, 0, 569, 0,
	0, 1068, 507, 504, 0, 124, 0, 0, 549, 0,
	0, 0, 509, 0, 528, 589, 0, 498, 178, 593,
	601, 546, 327, 605, 544, 543, 608, 261, 0, 295,
	182, 200, 145, 197, 128, 140, 0, 180, 233, 268,
	272, 598, 524, 533, 157, 531, 270, 246, 316, 568,
	250, 269, 205, 305, 262, 315, 328, 329, 163, 227,
	322, 300, 325, 337, 141, 160, 240, 296, 319, 287,
	222, 302, 196, 286, 133, 298, 313, 151, 280, 0,
	0, 0, 135, 311, 294, 220, 193, 194, 134, 0,
	266, 164, 176, 159, 236, 308, 309, 158, 338, 142,
	324, 137, 143, 323, 229, 304, 312, 221, 213, 136,
	310, 219, 212, 199, 170, 184, 259, 208, 260, 185,
	225, 224, 226, 0, 132, 0, 292, 320, 339, 148,
	519, 594, 301, 333, 336, 0, 263, 149, 177, 169,
	258, 175, 202, 332, 334, 335, 147, 256, 228, 144,
	187, 288, 198, 206, 586, 621, 245, 271, 152, 318,
	289, 514, 518, 512, 513, 562, 563, 515, 613, 614,
	615, 590, 508, 0, 516, 517, 0, 596, 603, 604,
	567, 127, 138, 203, 617, 264, 174, 321, 499, 511,
	162, 522, 0, 0, 535, 540, 541, 553, 555, 556,
	557, 558, 566, 573, 574, 576, 583, 584, 585, 587,
	592, 600, 620, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 257, 265,
	267, 273, 274, 275, 276, 277, 278, 279, 282, 283,
	284, 285, 293, 297, 306, 307, 317, 326, 330, 181,
	314, 331, 0, 210, 565, 607, 595, 0, 0, 548,
	610, 521, 538, 619, 539, 542, 580, 505, 561, 237,
	536, 0, 525, 501, 532, 502, 523, 550, 166, 554,
	520, 597, 564, 609, 201, 0, 526, 249, 582, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 616, 204, 571, 0, 290, 223, 0,
	0, 0, 552, 599, 559, 591, 547, 581, 510, 570,
	611, 537, 578, 612, 192, 154, 131, 234, 291, 173,
	0, 0, 0, 114, 115, 116, 0, 1160, 1161, 0,
	0, 0, 0, 0, 150, 0, 575, 606, 534, 577,
	579, 622, 500, 572, 0, 503, 506, 618, 602, 529,
	530, 0, 0, 0, 0, 0, 0, 0, 551, 560,
	588, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 0, 569, 0, 0, 0, 507, 504, 0, 0,
	0, 0, 549, 0, 0, 0, 509, 0, 528, 589,
	0, 498, 178, 593, 601, 546, 327, 605, 544, 543,
	608, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 598, 524, 533, 157, 531,
	270, 246, 316, 568, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 519, 594, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 586, 621,
	245, 271, 152, 318, 289, 514, 518, 512, 513, 562,
	563, 515, 613, 614, 615, 590, 508, 0, 516, 517,
	0, 596, 603, 604, 567, 127, 138, 203, 617, 264,
	174, 321, 499, 511, 162, 522, 0, 0, 535, 540,
	541, 553, 555, 556, 557, 558, 566, 573, 574, 576,
	583, 584, 585, 587, 592, 600, 620, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 0, 210, 565, 607,
	595, 0, 0, 548, 610, 521, 538, 619, 539, 542,
	580, 505, 561, 237, 536, 0, 525, 501, 532, 502,
	523, 550, 166, 554, 520, 597, 564, 609, 201, 0,
	526, 249, 582, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 616, 204, 571,
	0, 290, 223, 0, 0, 0, 552, 599, 559, 591,
	547, 581, 510, 570, 611, 537, 578, 612, 192, 154,
	131, 234, 291, 173, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	575, 606, 534, 577, 579, 622, 500, 572, 0, 503,
	506, 618, 602, 529, 530, 0, 0, 0, 0, 0,
	0, 0, 551, 560, 588, 545, 0, 0, 0, 0,
	0, 0, 1507, 0, 527, 0, 569, 0, 0, 0,
	507, 504, 0, 0, 0, 0, 549, 0, 0, 0,
	509, 0, 528, 589, 0, 498, 178, 593, 601, 546,
	327, 605, 544, 543, 608, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 598,
	524, 533, 157, 531, 270, 246, 316, 568, 250, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	143, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 519, 594,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 228, 144, 187, 288,
	198, 206, 586, 621, 245, 271, 152, 318, 289, 514,
	518, 512, 513, 562, 563, 515, 613, 614, 615, 590,
	508, 0, 516, 517, 0, 596, 603, 604, 567, 127,
	138, 203, 617, 264, 174, 321, 499, 511, 162, 522,
	0, 0, 535, 540, 541, 553, 555, 556, 557, 558,
	566, 573, 574, 576, 583, 584, 585, 587, 592, 600,
	620, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	0, 210, 565, 607, 595, 0, 0, 548, 610, 521,
	538, 619, 539, 542, 580, 505, 561, 237, 536, 0,
	525, 501, 532, 502, 523, 550, 166, 554, 520, 597,
	564, 609, 201, 0, 526, 249, 582, 281, 156, 209,
	207, 303, 171, 167, 165, 155, 188, 214, 248, 299,
	242, 616, 204, 571, 0, 290, 223, 0, 0, 0,
	552, 599, 559, 591, 547, 581, 510, 570, 611, 537,
	578, 612, 192, 154, 131, 234, 291, 173, 66, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 575, 606, 534, 577, 579, 622,
	500, 572, 0, 503, 506, 618, 602, 529, 530, 0,
	0, 0, 0, 0, 0, 0, 551, 560, 588, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	569, 0, 0, 0, 507, 504, 0, 0, 0, 0,
	549, 0, 0, 0, 509, 0, 528, 589, 0, 498,
	178, 593, 601, 546, 327, 605, 544, 543, 608, 261,
	0, 295, 182, 200, 145, 197, 128, 140, 0, 180,
	233, 268, 272, 598, 524, 533, 157, 531, 270, 246,
	316, 568, 250, 269, 205, 305, 262, 315, 328, 329,
	163, 227, 322, 300, 325, 337, 141, 160, 240, 296,
	319, 287, 222, 302, 196, 286, 133, 298, 313, 151,
	280, 0, 0, 0, 135, 311, 294, 220, 193, 194,
	134, 0, 266, 164, 176, 159, 236, 308, 309, 158,
	338, 142, 324, 137, 143, 323, 229, 304, 312, 221,
	213, 136, 310, 219, 212, 199, 170, 184, 259, 208,
	260, 185, 225, 224, 226, 0, 132, 0, 292, 320,
	339, 148, 519, 594, 301, 333, 336, 0, 263, 149,
	177, 169, 258, 175, 202, 332, 334, 335, 147, 256,
	228, 144, 187, 288, 198, 206, 586, 621, 245, 271,
	152, 318, 289, 514, 518, 512, 513, 562, 563, 515,
	613, 614, 615, 590, 508, 0, 516, 517, 0, 596,
	603, 604, 567, 127, 138, 203, 617, 264, 174, 321,
	499, 511, 162, 522, 0, 0, 535, 540, 541, 553,
	555, 556, 557, 558, 566, 573, 574, 576, 583, 584,
	585, 587, 592, 600, 620, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	257, 265, 267, 273, 274, 275, 276, 277, 278, 279,
	282, 283, 284, 285, 293, 297, 306, 307, 317, 326,
	330, 181, 314, 331, 0, 210, 565, 607, 595, 0,
	0, 548, 610, 521, 538, 619, 539, 542, 580, 505,
	561, 237, 536, 0, 525, 501, 532, 502, 523, 550,
	166, 554, 520, 597, 564, 609, 201, 0, 526, 249,
	582, 281, 156, 209, 207, 303, 171, 167, 165, 155,
	188, 214, 248, 299, 242, 616, 204, 571, 0, 290,
	223, 0, 0, 0, 552, 599, 559, 591, 547, 581,
	510, 570, 611, 537, 578, 612, 192, 154, 131, 234,
	291, 173, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 575, 606,
	534, 577, 579, 622, 500, 572, 0, 503, 506, 618,
	602, 529, 530, 0, 0, 0, 0, 0, 0, 0,
	551, 560, 588, 545, 0, 0, 0, 0, 0, 0,
	1384, 0, 527, 0, 569, 0, 0, 0, 507, 504,
	0, 0, 0, 0, 549, 0, 0, 0, 509, 0,
	528, 589, 0, 498, 178, 593, 601, 546, 327, 605,
	544, 543, 608, 261, 0, 295, 182, 200, 145, 197,
	128, 140, 0, 180, 233, 268, 272, 598, 524, 533,
	157, 531, 270, 246, 316, 568, 250, 269, 205, 305,
	262, 315, 328, 329, 163, 227, 322, 300, 325, 337,
	141, 160, 240, 296, 319, 287, 222, 302, 196, 286,
	133, 298, 313, 151, 280, 0, 0, 0, 135, 311,
	294, 220, 193, 194, 134, 0, 266, 164, 176, 159,
	236, 308, 309, 158, 338, 142, 324, 137, 143, 323,
	229, 304, 312, 221, 213, 136, 310, 219, 212, 199,
	170, 184, 259, 208, 260, 185, 225, 224, 226, 0,
	132, 0, 292, 320, 339, 148, 519, 594, 301, 333,
	336, 0, 263, 149, 177, 169, 258, 175, 202, 332,
	334, 335, 147, 256, 228, 144, 187, 288, 198, 206,
	586, 621, 245, 271, 152, 318, 289, 514, 518, 512,
	513, 562, 563, 515, 613, 614, 615, 590, 508, 0,
	516, 517, 0, 596, 603, 604, 567, 127, 138, 203,
	617, 264, 174, 321, 499, 511, 162, 522, 0, 0,
	535, 540, 541, 553, 555, 556, 557, 558, 566, 573,
	574, 576, 583, 584, 585, 587, 592, 600, 620, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 257, 265, 267, 273, 274, 275,
	276, 277, 278, 279, 282, 283, 284, 285, 293, 297,
	306, 307, 317, 326, 330, 181, 314, 331, 0, 210,
	565, 607, 595, 0, 0, 548, 610, 521, 538, 619,
	539, 542, 580, 505, 561, 237, 536, 0, 525, 501,
	532, 502, 523, 550, 166, 554, 520, 597, 564, 609,
	201, 0, 526, 249, 582, 281, 156, 209, 207, 303,
	171, 167, 165, 155, 188, 214, 248, 299, 242, 616,
	204, 571, 0, 290, 223, 0, 0, 0, 552, 599,
	559, 591, 547, 581, 510, 570, 611, 537, 578, 612,
	192, 154, 131, 234, 291, 173, 0, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 575, 606, 534, 577, 579, 622, 500, 572,
	0, 503, 506, 618, 602, 529, 530, 0, 0, 0,
	0, 0, 0, 0, 551, 560, 588, 545, 0, 0,
	0, 0, 0, 0, 1112, 0, 527, 0, 569, 0,
	0, 0, 507, 504, 0, 0, 0, 0, 549, 0,
	0, 0, 509, 0, 528, 589, 0, 498, 178, 593,
	601, 546, 327, 605, 544, 543, 608, 261, 0, 295,
	182, 200, 145, 197, 128, 140, 0, 180, 233, 268,
	272, 598, 524, 533, 157, 531, 270, 246, 316, 568,
	250, 269, 205, 305, 262, 315, 328, 329, 163, 227,
	322, 300, 325, 337, 141, 160, 240, 296, 319, 287,
	222, 302, 196, 286, 133, 298, 313, 151, 280, 0,
	0, 0, 135, 311, 294, 220, 193, 194, 134, 0,
	266, 164, 176, 159, 236, 308, 309, 158, 338, 142,
	324, 137, 143, 323, 229, 304, 312, 221, 213, 136,
	310, 219, 212, 199, 170, 184, 259, 208, 260, 185,
	225, 224, 226, 0, 132, 0, 292, 320, 339, 148,
	519, 594, 301, 333, 336, 0, 263, 149, 177, 169,
	258, 175, 202, 332, 334, 335, 147, 256, 228, 144,
	187, 288, 198, 206, 586, 621, 245, 271, 152, 318,
	289, 514, 518, 512, 513, 562, 563, 515, 613, 614,
	615, 590, 508, 0, 516, 517, 0, 596, 603, 604,
	567, 127, 138, 203, 617, 264, 174, 321, 499, 511,
	162, 522, 0, 0, 535, 540, 541, 553, 555, 556,
	557, 558, 566, 573, 574, 576, 583, 584, 585, 587,
	592, 600, 620, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 257, 265,
	267, 273, 274, 275, 276, 277, 278, 279, 282, 283,
	284, 285, 293, 297, 306, 307, 317, 326, 330, 181,
	314, 331, 0, 210, 565, 607, 595, 0, 0, 548,
	610, 521, 538, 619, 539, 542, 580, 505, 561, 237,
	536, 0, 525, 501, 532, 502, 523, 550, 166, 554,
	520, 597, 564, 609, 201, 0, 526, 249, 582, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 616, 204, 571, 0, 290, 223, 0,
	0, 0, 552, 599, 559, 591, 547, 581, 510, 570,
	611, 537, 578, 612, 192, 154, 131, 234, 291, 173,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 575, 606, 534, 577,
	579, 622, 500, 572, 0, 503, 506, 618, 602, 529,
	530, 0, 0, 0, 0, 0, 0, 0, 551, 560,
	588, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 0, 569, 0, 0, 0, 507, 504, 0, 0,
	0, 0, 549, 0, 0, 0, 509, 0, 528, 589,
	0, 498, 178, 593, 601, 546, 327, 605, 544, 543,
	608, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 598, 524, 533, 157, 531,
	270, 246, 316, 568, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 519, 594, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 586, 621,
	245, 271, 152, 318, 289, 514, 518, 512, 513, 562,
	563, 515, 613, 614, 615, 590, 508, 0, 516, 517,
	0, 596, 603, 604, 567, 127, 138, 203, 617, 264,
	174, 321, 499, 511, 162, 522, 0, 0, 535, 540,
	541, 553, 555, 556, 557, 558, 566, 573, 574, 576,
	583, 584, 585, 587, 592, 600, 620, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 0, 210, 565, 607,
	595, 0, 0, 548, 610, 521, 538, 619, 539, 542,
	580, 505, 561, 237, 536, 0, 525, 501, 532, 502,
	523, 550, 166, 554, 520, 597, 564, 609, 201, 0,
	526, 249, 582, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 616, 204, 571,
	0, 290, 223, 0, 0, 0, 552, 599, 559, 591,
	547, 581, 510, 570, 611, 537, 578, 612, 192, 154,
	131, 234, 291, 173, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	575, 606, 534, 577, 579, 622, 500, 572, 0, 503,
	506, 618, 602, 529, 530, 0, 0, 0, 0, 0,
	0, 0, 551, 560, 588, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 0, 569, 0, 0, 0,
	507, 504, 0, 0, 0, 0, 549, 0, 0, 0,
	509, 0, 528, 589, 0, 498, 178, 593, 601, 546,
	327, 605, 544, 543, 608, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 598,
	524, 533, 157, 531, 270, 246, 316, 568, 250, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	496, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 519, 594,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 497, 495, 490, 489,
	198, 206, 586, 621, 245, 271, 152, 318, 289, 514,
	518, 512, 513, 562, 563, 515, 613, 614, 615, 590,
	508, 0, 516, 517, 0, 596, 603, 604, 567, 127,
	138, 203, 617, 264, 174, 321, 499, 511, 162, 522,
	0, 0, 535, 540, 541, 553, 555, 556, 557, 558,
	566, 573, 574, 576, 583, 584, 585, 587, 592, 600,
	620, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	0, 210, 565, 607, 595, 0, 0, 548, 610, 521,
	538, 619, 539, 542, 580, 505, 561, 237, 536, 0,
	525, 501, 532, 502, 523, 550, 166, 554, 520, 597,
	564, 609, 201, 0, 526, 249, 582, 281, 156, 209,
	207, 303, 171, 167, 165, 155, 188, 214, 248, 299,
	242, 616, 204, 571, 0, 290, 223, 0, 0, 0,
	552, 599, 559, 591, 547, 581, 510, 570, 611, 537,
	578, 612, 192, 154, 131, 234, 291, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 575, 606, 534, 577, 579, 622,
	500, 572, 0, 503, 506, 618, 602, 529, 530, 0,
	0, 0, 0, 0, 0, 0, 551, 560, 588, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 0,
	569, 0, 0, 0, 507, 504, 0, 0, 0, 0,
	549, 0, 0, 0, 509, 0, 528, 589, 0, 498,
	178, 593, 601, 546, 327, 605, 544, 543, 608, 261,
	0, 295, 182, 200, 145, 197, 128, 140, 0, 180,
	233, 268, 272, 598, 524, 533, 157, 531, 270, 246,
	316, 568, 250, 269, 205, 305, 262, 315, 328, 329,
	163, 227, 322, 300, 325, 337, 141, 160, 240, 296,
	319, 287, 222, 302, 196, 286, 133, 298, 850, 151,
	280, 0, 0, 0, 135, 311, 294, 220, 193, 194,
	134, 0, 266, 164, 176, 159, 236, 308, 309, 158,
	338, 142, 324, 137, 496, 323, 229, 304, 312, 221,
	213, 136, 310, 219, 212, 199, 170, 184, 259, 208,
	260, 185, 225, 224, 226, 0, 132, 0, 292, 320,
	339, 148, 519, 594, 301, 333, 336, 0, 263, 149,
	177, 169, 258, 175, 202, 332, 334, 335, 147, 256,
	497, 495, 490, 489, 198, 206, 586, 621, 245, 271,
	152, 318, 289, 514, 518, 512, 513, 562, 563, 515,
	613, 614, 615, 590, 508, 0, 516, 517, 0, 596,
	603, 604, 567, 127, 138, 203, 617, 264, 174, 321,
	499, 511, 162, 522, 0, 0, 535, 540, 541, 553,
	555, 556, 557, 558, 566, 573, 574, 576, 583, 584,
	585, 587, 592, 600, 620, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	257, 265, 267, 273, 274, 275, 276, 277, 278, 279,
	282, 283, 284, 285, 293, 297, 306, 307, 317, 326,
	330, 181, 314, 331, 0, 210, 565, 607, 595, 0,
	0, 548, 610, 521, 538, 619, 539, 542, 580, 505,
	561, 237, 536, 0, 525, 501, 532, 502, 523, 550,
	166, 554, 520, 597, 564, 609, 201, 0, 526, 249,
	582, 281, 156, 209, 207, 303, 171, 167, 165, 155,
	188, 214, 248, 299, 242, 616, 204, 571, 0, 290,
	223, 0, 0, 0, 552, 599, 559, 591, 547, 581,
	510, 570, 611, 537, 578, 612, 192, 154, 131, 234,
	291, 173, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 575, 606,
	534, 577, 579, 622, 500, 572, 0, 503, 506, 618,
	602, 529, 530, 0, 0, 0, 0, 0, 0, 0,
	551, 560, 588, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 0, 569, 0, 0, 0, 507, 504,
	0, 0, 0, 0, 549, 0, 0, 0, 509, 0,
	528, 589, 0, 498, 178, 593, 601, 546, 327, 605,
	544, 543, 608, 261, 0, 295, 182, 200, 145, 197,
	128, 140, 0, 180, 233, 268, 272, 598, 524, 533,
	157, 531, 270, 246, 316, 568, 250, 269, 205, 305,
	262, 315, 328, 329, 163, 227, 322, 300, 325, 337,
	141, 160, 240, 296, 319, 287, 222, 302, 196, 286,
	133, 298, 487, 151, 280, 0, 0, 0, 135, 311,
	294, 220, 193, 194, 134, 0, 266, 164, 176, 159,
	236, 308, 309, 158, 338, 142, 324, 137, 496, 323,
	229, 304, 312, 221, 213, 136, 310, 219, 212, 199,
	170, 184, 259, 208, 260, 185, 225, 224, 226, 0,
	132, 0, 292, 320, 339, 148, 519, 594, 301, 333,
	336, 0, 263, 149, 177, 169, 258, 175, 202, 332,
	334, 335, 147, 256, 497, 495, 490, 489, 198, 206,
	586, 621, 245, 271, 152, 318, 289, 514, 518, 512,
	513, 562, 563, 515, 613, 614, 615, 590, 508, 0,
	516, 517, 0, 596, 603, 604, 567, 127, 138, 203,
	617, 264, 174, 321, 499, 511, 162, 522, 0, 0,
	535, 540, 541, 553, 555, 556, 557, 558, 566, 573,
	574, 576, 583, 584, 585, 587, 592, 600, 620, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 257, 265, 267, 273, 274, 275,
	276, 277, 278, 279, 282, 283, 284, 285, 293, 297,
	306, 307, 317, 326, 330, 181, 314, 331, 237, 210,
	565, 1039, 0, 391, 0, 0, 0, 166, 0, 390,
	0, 0, 0, 201, 0, 1040, 249, 0, 281, 156,
	209, 207, 303, 171, 167, 165, 155, 188, 214, 248,
	299, 242, 434, 204, 0, 0, 290, 223, 0, 0,
	0, 0, 0, 425, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 154, 131, 234, 291, 173, 66,
	0, 0, 114, 115, 116, 412, 411, 414, 415, 416,
	417, 0, 0, 150, 413, 418, 419, 420, 0, 0,
	0, 0, 388, 405, 0, 433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 403, 477, 0, 0,
	0, 448, 0, 404, 0, 0, 397, 398, 400, 399,
	401, 406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 447, 0, 0, 327, 0, 0, 445, 0,
	261, 0, 295, 182, 200, 145, 197, 128, 140, 0,
	180, 233, 268, 272, 0, 0, 0, 157, 0, 270,
	246, 316, 0, 250, 269, 205, 305, 262, 315, 328,
	329, 163, 227, 322, 300, 325, 337, 141, 160, 240,
	296, 319, 287, 222, 302, 196, 286, 133, 298, 313,
	151, 280, 0, 0, 0, 135, 311, 294, 220, 193,
	194, 134, 0, 266, 164, 176, 159, 236, 308, 309,
	158, 338, 142, 324, 137, 143, 323, 229, 304, 312,
	221, 213, 136, 310, 219, 212, 199, 170, 184, 259,
	208, 260, 185, 225, 224, 226, 0, 132, 0, 292,
	320, 339, 148, 0, 0, 301, 333, 336, 0, 263,
	149, 177, 169, 258, 175, 202, 332, 334, 335, 147,
	256, 228, 144, 187, 288, 198, 206, 0, 0, 245,
	271, 152, 318, 289, 435, 446, 441, 442, 439, 440,
	0, 438, 437, 436, 449, 427, 428, 429, 430, 432,
	0, 443, 444, 431, 127, 138, 203, 0, 264, 174,
	321, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 183, 186, 189, 190, 191,
	195, 211, 215, 216, 217, 218, 230, 231, 232, 235,
	238, 239, 241, 243, 244, 247, 251, 252, 253, 254,
	255, 257, 265, 267, 273, 274, 275, 276, 277, 278,
	279, 282, 283, 284, 285, 293, 297, 306, 307, 317,
	326, 330, 181, 314, 331, 237, 210, 0, 0, 0,
	391, 0, 0, 0, 166, 0, 390, 0, 0, 0,
	201, 0, 0, 249, 0, 281, 156, 209, 207, 303,
	171, 167, 165, 155, 188, 214, 248, 299, 242, 434,
	204, 0, 0, 290, 223, 0, 0, 0, 0, 0,
	425, 426, 0, 0, 0, 0, 0, 0, 1151, 0,
	192, 154, 131, 234, 291, 173, 66, 0, 0, 114,
	115, 116, 412, 411, 414, 415, 416, 417, 0, 0,
	150, 413, 418, 419, 420, 1152, 0, 0, 0, 388,
	405, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 403, 0, 0, 0, 0, 448, 0,
	404, 0, 0, 397, 398, 400, 399, 401, 406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 447,
	0, 0, 327, 0, 0, 445, 0, 261, 0, 295,
	182, 200, 145, 197, 128, 140, 0, 180, 233, 268,
	272, 0, 0, 0, 157, 0, 270, 246, 316, 0,
	250, 269, 205, 305, 262, 315, 328, 329, 163, 227,
	322, 300, 325, 337, 141, 160, 240, 296, 319, 287,
	222, 302, 196, 286, 133, 298, 313, 151, 280, 0,
	0, 0, 135, 311, 294, 220, 193, 194, 134, 0,
	266, 164, 176, 159, 236, 308, 309, 158, 338, 142,
	324, 137, 143, 323, 229, 304, 312, 221, 213, 136,
	310, 219, 212, 199, 170, 184, 259, 208, 260, 185,
	225, 224, 226, 0, 132, 0, 292, 320, 339, 148,
	0, 0, 301, 333, 336, 0, 263, 149, 177, 169,
	258, 175, 202, 332, 334, 335, 147, 256, 228, 144,
	187, 288, 198, 206, 0, 0, 245, 271, 152, 318,
	289, 435, 446, 441, 442, 439, 440, 0, 438, 437,
	436, 449, 427, 428, 429, 430, 432, 0, 443, 444,
	431, 127, 138, 203, 0, 264, 174, 321, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 257, 265,
	267, 273, 274, 275, 276, 277, 278, 279, 282, 283,
	284, 285, 293, 297, 306, 307, 317, 326, 330, 181,
	314, 331, 237, 210, 0, 0, 0, 391, 0, 0,
	0, 166, 0, 390, 0, 0, 0, 201, 0, 0,
	249, 0, 281, 156, 209, 207, 303, 171, 167, 165,
	155, 188, 214, 248, 299, 242, 434, 204, 0, 0,
	290, 223, 0, 0, 0, 0, 0, 425, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 131,
	234, 291, 173, 66, 0, 465, 114, 115, 116, 412,
	411, 414, 415, 416, 417, 0, 0, 150, 413, 418,
	419, 420, 0, 0, 0, 0, 388, 405, 0, 433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	403, 0, 0, 0, 0, 448, 0, 404, 0, 0,
	397, 398, 400, 399, 401, 406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 447, 0, 0, 327,
	0, 0, 445, 0, 261, 0, 295, 182, 200, 145,
	197, 128, 140, 0, 180, 233, 268, 272, 0, 0,
	0, 157, 0, 270, 246, 316, 0, 250, 269, 205,
	305, 262, 315, 328, 329, 163, 227, 322, 300, 325,
	337, 141, 160, 240, 296, 319, 287, 222, 302, 196,
	286, 133, 298, 313, 151, 280, 0, 0, 0, 135,
	311, 294, 220, 193, 194, 134, 0, 266, 164, 176,
	159, 236, 308, 309, 158, 338, 142, 324, 137, 143,
	323, 229, 304, 312, 221, 213, 136, 310, 219, 212,
	199, 170, 184, 259, 208, 260, 185, 225, 224, 226,
	0, 132, 0, 292, 320, 339, 148, 0, 0, 301,
	333, 336, 0, 263, 149, 177, 169, 258, 175, 202,
	332, 334, 335, 147, 256, 228, 144, 187, 288, 198,
	206, 0, 0, 245, 271, 152, 318, 289, 435, 446,
	441, 442, 439, 440, 0, 438, 437, 436, 449, 427,
	428, 429, 430, 432, 0, 443, 444, 431, 127, 138,
	203, 0, 264, 174, 321, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 257, 265, 267, 273, 274,
	275, 276, 277, 278, 279, 282, 283, 284, 285, 293,
	297, 306, 307, 317, 326, 330, 181, 314, 331, 237,
	210, 0, 0, 0, 391, 0, 0, 0, 166, 0,
	390, 0, 0, 0, 201, 0, 0, 249, 0, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 434, 204, 0, 0, 290, 223, 0,
	0, 0, 0, 0, 425, 426, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 131, 234, 291, 173,
	66, 0, 0, 114, 115, 116, 412, 411, 414, 415,
	416, 417, 0, 0, 150, 413, 418, 419, 420, 0,
	0, 0, 0, 388, 405, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 403, 477, 0,
	0, 0, 448, 0, 404, 0, 0, 397, 398, 400,
	399, 401, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 447, 0, 0, 327, 0, 0, 445,
	0, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 0, 0, 0, 157, 0,
	270, 246, 316, 0, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 0, 0, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 0, 0,
	245, 271, 152, 318, 289, 435, 446, 441, 442, 439,
	440, 0, 438, 437, 436, 449, 427, 428, 429, 430,
	432, 0, 443, 444, 431, 127, 138, 203, 0, 264,
	174, 321, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 237, 210, 0, 0,
	0, 391, 0, 0, 0, 166, 0, 390, 0, 0,
	0, 201, 0, 0, 249, 0, 281, 156, 209, 207,
	303, 171, 167, 165, 155, 188, 214, 248, 299, 242,
	434, 204, 0, 0, 290, 223, 0, 0, 0, 0,
	0, 425, 426, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 131, 234, 291, 173, 66, 0, 0,
	114, 115, 116, 412, 1057, 414, 415, 416, 417, 0,
	0, 150, 413, 418, 419, 420, 0, 0, 0, 0,
	388, 405, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 403, 477, 0, 0, 0, 448,
	0, 404, 0, 0, 397, 398, 400, 399, 401, 406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	447, 0, 0, 327, 0, 0, 445, 0, 261, 0,
	295, 182, 200, 145, 197, 128, 140, 0, 180, 233,
	268, 272, 0, 0, 0, 157, 0, 270, 246, 316,
	0, 250, 269, 205, 305, 262, 315, 328, 329, 163,
	227, 322, 300, 325, 337, 141, 160, 240, 296, 319,
	287, 222, 302, 196, 286, 133, 298, 313, 151, 280,
	0, 0, 0, 135, 311, 294, 220, 193, 194, 134,
	0, 266, 164, 176, 159, 236, 308, 309, 158, 338,
	142, 324, 137, 143, 323, 229, 304, 312, 221, 213,
	136, 310, 219, 212, 199, 170, 184, 259, 208, 260,
	185, 225, 224, 226, 0, 132, 0, 292, 320, 339,
	148, 0, 0, 301, 333, 336, 0, 263, 149, 177,
	169, 258, 175, 202, 332, 334, 335, 147, 256, 228,
	144, 187, 288, 198, 206, 0, 0, 245, 271, 152,
	318, 289, 435, 446, 441, 442, 439, 440, 0, 438,
	437, 436, 449, 427, 428, 429, 430, 432, 0, 443,
	444, 431, 127, 138, 203, 0, 264, 174, 321, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 257,
	265, 267, 273, 274, 275, 276, 277, 278, 279, 282,
	283, 284, 285, 293, 297, 306, 307, 317, 326, 330,
	181, 314, 331, 237, 210, 0, 0, 0, 391, 0,
	0, 0, 166, 0, 390, 0, 0, 0, 201, 0,
	0, 249, 0, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 434, 204, 0,
	0, 290, 223, 0, 0, 0, 0, 0, 425, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	131, 234, 291, 173, 66, 0, 0, 114, 115, 116,
	412, 1054, 414, 415, 416, 417, 0, 0, 150, 413,
	418, 419, 420, 0, 0, 0, 0, 388, 405, 0,
	433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 403, 477, 0, 0, 0, 448, 0, 404, 0,
	0, 397, 398, 400, 399, 401, 406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 447, 0, 0,
	327, 0, 0, 445, 0, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 0,
	0, 0, 157, 0, 270, 246, 316, 0, 250, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	143, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 0, 0,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 228, 144, 187, 288,
	198, 206, 0, 0, 245, 271, 152, 318, 289, 435,
	446, 441, 442, 439, 440, 0, 438, 437, 436, 449,
	427, 428, 429, 430, 432, 0, 443, 444, 431, 127,
	138, 203, 0, 264, 174, 321, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	458, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 0, 0, 0, 0, 391, 0,
	0, 0, 166, 0, 390, 0, 0, 0, 201, 0,
	0, 249, 0, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 434, 204, 0,
	0, 290, 223, 0, 0, 0, 0, 0, 425, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	131, 234, 291, 173, 66, 0, 0, 114, 115, 116,
	412, 411, 414, 415, 416, 417, 0, 0, 150, 413,
	418, 419, 420, 0, 0, 0, 0, 388, 405, 0,
	433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 403, 0, 0, 0, 0, 448, 0, 404, 0,
	0, 397, 398, 400, 399, 401, 406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 447, 0, 0,
	327, 0, 0, 445, 0, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 0,
	0, 0, 157, 0, 270, 246, 316, 0, 250, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	143, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 0, 0,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 228, 144, 187, 288,
	198, 206, 0, 0, 245, 271, 152, 318, 289, 435,
	446, 441, 442, 439, 440, 0, 438, 437, 436, 449,
	427, 428, 429, 430, 432, 0, 443, 444, 431, 127,
	138, 203, 0, 264, 174, 321, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	237, 210, 0, 0, 0, 391, 0, 0, 0, 166,
	0, 390, 0, 0, 0, 201, 0, 0, 249, 0,
	281, 156, 209, 207, 303, 171, 167, 165, 155, 188,
	214, 248, 299, 242, 434, 204, 0, 0, 290, 223,
	0, 0, 0, 0, 0, 425, 426, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 154, 131, 234, 291,
	173, 66, 0, 0, 114, 115, 116, 412, 411, 414,
	415, 416, 417, 0, 0, 150, 413, 418, 419, 420,
	0, 0, 0, 0, 388, 405, 0, 433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 448, 0, 404, 0, 0, 397, 398,
	400, 399, 401, 406, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 447, 0, 0, 327, 0, 0,
	445, 0, 261, 0, 295, 182, 200, 145, 197, 128,
	140, 0, 180, 233, 268, 272, 0, 0, 0, 157,
	0, 270, 246, 316, 0, 250, 269, 205, 305, 262,
	315, 328, 329, 163, 227, 322, 300, 325, 337, 141,
	160, 240, 296, 319, 287, 222, 302, 196, 286, 133,
	298, 313, 151, 280, 0, 0, 0, 135, 311, 294,
	220, 193, 194, 134, 0, 266, 164, 176, 159, 236,
	308, 309, 158, 338, 142, 324, 137, 143, 323, 229,
	304, 312, 221, 213, 136, 310, 219, 212, 199, 170,
	184, 259, 208, 260, 185, 225, 224, 226, 0, 132,
	0, 292, 320, 339, 148, 0, 0, 301, 333, 336,
	0, 263, 149, 177, 169, 258, 175, 202, 332, 334,
	335, 147, 256, 228, 144, 187, 288, 198, 206, 0,
	0, 245, 271, 152, 318, 289, 435, 446, 441, 442,
	439, 440, 0, 438, 437, 436, 449, 427, 428, 429,
	430, 432, 0, 443, 444, 431, 127, 138, 203, 0,
	264, 174, 321, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	139, 146, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 257, 265, 267, 273, 274, 275, 276,
	277, 278, 279, 282, 283, 284, 285, 293, 297, 306,
	307, 317, 326, 330, 181, 314, 331, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 281, 156, 209,
	207, 303, 171, 167, 165, 155, 188, 214, 248, 299,
	242, 434, 204, 0, 0, 290, 223, 0, 0, 0,
	0, 0, 425, 426, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 131, 234, 291, 173, 66, 0,
	0, 114, 115, 116, 412, 411, 414, 415, 416, 417,
	0, 0, 150, 413, 418, 419, 420, 0, 0, 0,
	0, 0, 405, 0, 433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 403, 0, 0, 0, 0,
	448, 0, 404, 0, 0, 397, 398, 400, 399, 401,
	406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 447, 0, 0, 327, 0, 0, 445, 0, 261,
	0, 295, 182, 200, 145, 197, 128, 140, 0, 180,
	233, 268, 272, 0, 0, 0, 157, 0, 270, 246,
	316, 1828, 250, 269, 205, 305, 262, 315, 328, 329,
	163, 227, 322, 300, 325, 337, 141, 160, 240, 296,
	319, 287, 222, 302, 196, 286, 133, 298, 313, 151,
	280, 0, 0, 0, 135, 311, 294, 220, 193, 194,
	134, 0, 266, 164, 176, 159, 236, 308, 309, 158,
	338, 142, 324, 137, 143, 323, 229, 304, 312, 221,
	213, 136, 310, 219, 212, 199, 170, 184, 259, 208,
	260, 185, 225, 224, 226, 0, 132, 0, 292, 320,
	339, 148, 0, 0, 301, 333, 336, 0, 263, 149,
	177, 169, 258, 175, 202, 332, 334, 335, 147, 256,
	228, 144, 187, 288, 198, 206, 0, 0, 245, 271,
	152, 318, 289, 435, 446, 441, 442, 439, 440, 0,
	438, 437, 436, 449, 427, 428, 429, 430, 432, 0,
	443, 444, 431, 127, 138, 203, 0, 264, 174, 321,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	257, 265, 267, 273, 274, 275, 276, 277, 278, 279,
	282, 283, 284, 285, 293, 297, 306, 307, 317, 326,
	330, 181, 314, 331, 237, 210, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 281, 156, 209, 207, 303, 171,
	167, 165, 155, 188, 214, 248, 299, 242, 434, 204,
	0, 0, 290, 223, 0, 0, 0, 0, 0, 425,
	426, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 131, 234, 291, 173, 66, 0, 465, 114, 115,
	116, 412, 411, 414, 415, 416, 417, 0, 0, 150,
	413, 418, 419, 420, 0, 0, 0, 0, 0, 405,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 403, 0, 0, 0, 0, 448, 0, 404,
	0, 0, 397, 398, 400, 399, 401, 406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 447, 0,
	0, 327, 0, 0, 445, 0, 261, 0, 295, 182,
	200, 145, 197, 128, 140, 0, 180, 233, 268, 272,
	0, 0, 0, 157, 0, 270, 246, 316, 0, 250,
	269, 205, 305, 262, 315, 328, 329, 163, 227, 322,
	300, 325, 337, 141, 160, 240, 296, 319, 287, 222,
	302, 196, 286, 133, 298, 313, 151, 280, 0, 0,
	0, 135, 311, 294, 220, 193, 194, 134, 0, 266,
	164, 176, 159, 236, 308, 309, 158, 338, 142, 324,
	137, 143, 323, 229, 304, 312, 221, 213, 136, 310,
	219, 212, 199, 170, 184, 259, 208, 260, 185, 225,
	224, 226, 0, 132, 0, 292, 320, 339, 148, 0,
	0, 301, 333, 336, 0, 263, 149, 177, 169, 258,
	175, 202, 332, 334, 335, 147, 256, 228, 144, 187,
	288, 198, 206, 0, 0, 245, 271, 152, 318, 289,
	435, 446, 441, 442, 439, 440, 0, 438, 437, 436,
	449, 427, 428, 429, 430, 432, 0, 443, 444, 431,
	127, 138, 203, 0, 264, 174, 321, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 257, 265, 267,
	273, 274, 275, 276, 277, 278, 279, 282, 283, 284,
	285, 293, 297, 306, 307, 317, 326, 330, 181, 314,
	331, 237, 210, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 201, 0, 0, 249,
	0, 281, 156, 209, 207, 303, 171, 167, 165, 155,
	188, 214, 248, 299, 242, 434, 204, 0, 0, 290,
	223, 0, 0, 0, 0, 0, 425, 426, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 131, 234,
	291, 173, 66, 0, 0, 114, 115, 116, 412, 411,
	414, 415, 416, 417, 0, 0, 150, 413, 418, 419,
	420, 0, 0, 0, 0, 0, 405, 0, 433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 402, 403,
	0, 0, 0, 0, 448, 0, 404, 0, 0, 397,
	398, 400, 399, 401, 406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 447, 0, 0, 327, 0,
	0, 445, 0, 261, 0, 295, 182, 200, 145, 197,
	128, 140, 0, 180, 233, 268, 272, 0, 0, 0,
	157, 0, 270, 246, 316, 0, 250, 269, 205, 305,
	262, 315, 328, 329, 163, 227, 322, 300, 325, 337,
	141, 160, 240, 296, 319, 287, 222, 302, 196, 286,
	133, 298, 313, 151, 280, 0, 0, 0, 135, 311,
	294, 220, 193, 194, 134, 0, 266, 164, 176, 159,
	236, 308, 309, 158, 338, 142, 324, 137, 143, 323,
	229, 304, 312, 221, 213, 136, 310, 219, 212, 199,
	170, 184, 259, 208, 260, 185, 225, 224, 226, 0,
	132, 0, 292, 320, 339, 148, 0, 0, 301, 333,
	336, 0, 263, 149, 177, 169, 258, 175, 202, 332,
	334, 335, 147, 256, 228, 144, 187, 288, 198, 206,
	0, 0, 245, 271, 152, 318, 289, 435, 446, 441,
	442, 439, 440, 0, 438, 437, 436, 449, 427, 428,
	429, 430, 432, 0, 443, 444, 431, 127, 138, 203,
	0, 264, 174, 321, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 257, 265, 267, 273, 274, 275,
	276, 277, 278, 279, 282, 283, 284, 285, 293, 297,
	306, 307, 317, 326, 330, 181, 314, 331, 237, 210,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 201, 0, 0, 249, 0, 281, 156,
	209, 207, 303, 171, 167, 165, 155, 188, 214, 248,
	299, 242, 0, 204, 0, 0, 290, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 154, 131, 234, 291, 173, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 727, 737, 738, 730, 731, 732, 733, 734,
	735, 736, 729, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 327, 0, 0, 0, 0,
	261, 0, 295, 182, 200, 145, 197, 128, 140, 0,
	180, 233, 268, 272, 0, 0, 0, 157, 0, 270,
	246, 316, 0, 250, 269, 205, 305, 262, 315, 328,
	329, 163, 227, 322, 300, 325, 337, 141, 160, 240,
	296, 319, 287, 222, 302, 196, 286, 133, 298, 313,
	151, 280, 0, 0, 0, 135, 311, 294, 220, 193,
	194, 134, 0, 266, 164, 176, 159, 236, 308, 309,
	158, 338, 142, 324, 137, 143, 323, 229, 304, 312,
	221, 213, 136, 310, 219, 212, 199, 170, 184, 259,
	208, 260, 185, 225, 224, 226, 0, 132, 0, 292,
	320, 339, 148, 0, 0, 301, 333, 336, 0, 263,
	149, 177, 169, 258, 175, 202, 332, 334, 335, 147,
	256, 228, 144, 187, 288, 198, 206, 0, 0, 245,
	271, 152, 318, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 138, 203, 0, 264, 174,
	321, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 183, 186, 189, 190, 191,
	195, 211, 215, 216, 217, 218, 230, 231, 232, 235,
	238, 239, 241, 243, 244, 247, 251, 252, 253, 254,
	255, 257, 265, 267, 273, 274, 275, 276, 277, 278,
	279, 282, 283, 284, 285, 293, 297, 306, 307, 317,
	326, 330, 181, 314, 331, 237, 210, 0, 0, 828,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	201, 0, 0, 249, 0, 281, 156, 209, 207, 303,
	171, 167, 165, 155, 188, 214, 248, 299, 242, 0,
	204, 0, 0, 290, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 154, 131, 234, 291, 173, 0, 0, 0, 114,
	115, 116, 0, 830, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 717, 718, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 327, 0, 0, 0, 0, 261, 0, 295,
	182, 200, 145, 197, 128, 140, 0, 180, 233, 268,
	272, 0, 0, 0, 157, 0, 270, 246, 316, 0,
	250, 269, 205, 305, 262, 315, 328, 329, 163, 227,
	322, 300, 325, 337, 141, 160, 240, 296, 319, 287,
	222, 302, 196, 286, 133, 298, 313, 151, 280, 0,
	0, 0, 135, 311, 294, 220, 193, 194, 134, 0,
	266, 164, 176, 159, 236, 308, 309, 158, 338, 142,
	324, 137, 143, 323, 229, 304, 312, 221, 213, 136,
	310, 219, 212, 199, 170, 184, 259, 208, 260, 185,
	225, 224, 226, 0, 132, 0, 292, 320, 339, 148,
	0, 0, 301, 333, 336, 0, 263, 149, 177, 169,
	258, 175, 202, 332, 334, 335, 147, 256, 228, 144,
	187, 288, 198, 206, 0, 0, 245, 271, 152, 318,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 138, 203, 0, 264, 174, 321, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 257, 265,
	267, 273, 274, 275, 276, 277, 278, 279, 282, 283,
	284, 285, 293, 297, 306, 307, 317, 326, 330, 181,
	314, 331, 237, 210, 0, 0, 0, 0, 0, 0,
	0, 166, 1176, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 281, 156, 209, 207, 303, 171, 167, 165,
	155, 188, 214, 248, 299, 242, 0, 204, 0, 0,
	290, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 131,
	234, 291, 173, 0, 0, 0, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 1175, 327,
	0, 0, 0, 1171, 1168, 0, 1169, 1170, 200, 630,
	197, 128, 140, 1166, 1173, 233, 268, 272, 0, 0,
	0, 157, 0, 270, 246, 316, 0, 250, 269, 205,
	305, 262, 315, 328, 329, 163, 227, 322, 300, 325,
	337, 141, 160, 240, 296, 319, 287, 222, 302, 196,
	286, 133, 298, 313, 151, 280, 0, 0, 0, 135,
	311, 294, 220, 193, 194, 134, 0, 266, 164, 176,
	159, 236, 308, 309, 158, 338, 142, 324, 137, 143,
	323, 229, 304, 312, 221, 213, 136, 310, 219, 212,
	199, 170, 184, 259, 208, 260, 185, 225, 224, 226,
	0, 132, 0, 292, 320, 339, 148, 0, 0, 301,
	333, 336, 0, 263, 149, 177, 169, 258, 175, 202,
	332, 334, 335, 147, 256, 228, 144, 187, 288, 198,
	206, 0, 0, 245, 271, 152, 318, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	203, 0, 264, 174, 321, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 257, 265, 267, 273, 274,
	275, 276, 277, 278, 279, 282, 283, 284, 285, 293,
	297, 306, 307, 317, 326, 330, 181, 314, 331, 33,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 281, 156, 209, 207, 303, 171, 167, 165,
	155, 188, 214, 248, 299, 242, 0, 204, 0, 0,
	290, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 131,
	234, 291, 173, 66, 0, 465, 114, 115, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 327,
	0, 0, 0, 0, 261, 0, 295, 182, 200, 145,
	197, 128, 140, 0, 180, 233, 268, 272, 0, 0,
	0, 157, 0, 270, 246, 316, 0, 250, 269, 205,
	305, 262, 315, 328, 329, 163, 227, 322, 300, 325,
	337, 141, 160, 240, 296, 319, 287, 222, 302, 196,
	286, 133, 298, 313, 151, 280, 0, 0, 0, 135,
	311, 294, 220, 193, 194, 134, 0, 266, 164, 176,
	159, 236, 308, 309, 158, 338, 142, 324, 137, 143,
	323, 229, 304, 312, 221, 213, 136, 310, 219, 212,
	199, 170, 184, 259, 208, 260, 185, 225, 224, 226,
	0, 132, 0, 292, 320, 339, 148, 0, 0, 301,
	333, 336, 0, 263, 149, 177, 169, 258, 175, 202,
	332, 334, 335, 147, 256, 228, 144, 187, 288, 198,
	206, 0, 0, 245, 271, 152, 318, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	203, 0, 264, 174, 321, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 257, 265, 267, 273, 274,
	275, 276, 277, 278, 279, 282, 283, 284, 285, 293,
	297, 306, 307, 317, 326, 330, 181, 314, 331, 237,
	210, 0, 0, 1086, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 0, 204, 0, 0, 290, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 131, 234, 291, 173,
	0, 0, 0, 114, 115, 116, 0, 1088, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 327, 0, 0, 0,
	0, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 0, 0, 0, 157, 0,
	270, 246, 316, 0, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 0, 0, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 0, 0,
	245, 271, 152, 318, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 203, 0, 264,
	174, 321, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 33, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 0, 204, 0, 0, 290, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 131, 234, 291, 173,
	66, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 327, 0, 0, 0,
	0, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 0, 0, 0, 157, 0,
	270, 246, 316, 0, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 0, 0, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 0, 0,
	245, 271, 152, 318, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 203, 0, 264,
	174, 321, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 237, 210, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 201, 0, 0, 249, 0, 281, 156, 209, 207,
	303, 171, 167, 165, 155, 188, 214, 248, 299, 242,
	0, 204, 0, 0, 290, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 131, 234, 291, 173, 0, 0, 0,
	114, 115, 116, 0, 0, 1104, 0, 0, 1105, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 327, 0, 0, 0, 0, 261, 0,
	295, 182, 200, 145, 197, 128, 140, 0, 180, 233,
	268, 272, 0, 0, 0, 157, 0, 270, 246, 316,
	0, 250, 269, 205, 305, 262, 315, 328, 329, 163,
	227, 322, 300, 325, 337, 141, 160, 240, 296, 319,
	287, 222, 302, 196, 286, 133, 298, 313, 151, 280,
	0, 0, 0, 135, 311, 294, 220, 193, 194, 134,
	0, 266, 164, 176, 159, 236, 308, 309, 158, 338,
	142, 324, 137, 143, 323, 229, 304, 312, 221, 213,
	136, 310, 219, 212, 199, 170, 184, 259, 208, 260,
	185, 225, 224, 226, 0, 132, 0, 292, 320, 339,
	148, 0, 0, 301, 333, 336, 0, 263, 149, 177,
	169, 258, 175, 202, 332, 334, 335, 147, 256, 228,
	144, 187, 288, 198, 206, 0, 0, 245, 271, 152,
	318, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 138, 203, 0, 264, 174, 321, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 257,
	265, 267, 273, 274, 275, 276, 277, 278, 279, 282,
	283, 284, 285, 293, 297, 306, 307, 317, 326, 330,
	181, 314, 331, 237, 210, 0, 0, 1086, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 201, 0,
	0, 249, 0, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 0, 204, 0,
	0, 290, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	131, 234, 291, 173, 0, 0, 0, 114, 115, 116,
	0, 1088, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	327, 0, 0, 0, 0, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 0,
	0, 0, 157, 0, 270, 246, 316, 0, 1084, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	143, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 0, 0,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 228, 144, 187, 288,
	198, 206, 0, 0, 245, 271, 152, 318, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	138, 203, 0, 264, 174, 321, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	237, 210, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 861, 0, 0, 0, 201, 0, 0, 249, 0,
	281, 156, 209, 207, 303, 171, 167, 165, 155, 188,
	214, 248, 299, 242, 0, 204, 0, 0, 290, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 154, 131, 234, 291,
	173, 0, 0, 0, 114, 115, 116, 0, 860, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 327, 0, 0,
	0, 0, 261, 0, 295, 182, 200, 145, 197, 128,
	140, 0, 180, 233, 268, 272, 0, 0, 0, 157,
	0, 270, 246, 316, 0, 250, 269, 205, 305, 262,
	315, 328, 329, 163, 227, 322, 300, 325, 337, 141,
	160, 240, 296, 319, 287, 222, 302, 196, 286, 133,
	298, 313, 151, 280, 0, 0, 0, 135, 311, 294,
	220, 193, 194, 134, 0, 266, 164, 176, 159, 236,
	308, 309, 158, 338, 142, 324, 137, 143, 323, 229,
	304, 312, 221, 213, 136, 310, 219, 212, 199, 170,
	184, 259, 208, 260, 185, 225, 224, 226, 0, 132,
	0, 292, 320, 339, 148, 0, 0, 301, 333, 336,
	0, 263, 149, 177, 169, 258, 175, 202, 332, 334,
	335, 147, 256, 228, 144, 187, 288, 198, 206, 0,
	0, 245, 271, 152, 318, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 138, 203, 0,
	264, 174, 321, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	139, 146, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 257, 265, 267, 273, 274, 275, 276,
	277, 278, 279, 282, 283, 284, 285, 293, 297, 306,
	307, 317, 326, 330, 181, 314, 331, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 281, 156, 209,
	207, 303, 171, 167, 165, 155, 188, 214, 248, 299,
	242, 0, 204, 0, 0, 290, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 131, 234, 291, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 327, 0, 0, 0, 0, 261,
	0, 295, 182, 200, 630, 197, 128, 140, 628, 180,
	233, 268, 272, 0, 0, 0, 157, 0, 270, 246,
	316, 0, 250, 269, 205, 305, 262, 315, 328, 329,
	163, 227, 322, 300, 325, 337, 141, 160, 240, 296,
	319, 287, 222, 302, 196, 286, 133, 298, 313, 151,
	280, 0, 0, 0, 135, 311, 294, 220, 193, 194,
	134, 0, 266, 164, 176, 159, 236, 308, 309, 158,
	338, 142, 324, 137, 143, 323, 229, 304, 312, 221,
	213, 136, 310, 219, 212, 199, 170, 184, 259, 208,
	260, 185, 225, 224, 226, 0, 132, 0, 292, 320,
	339, 148, 0, 0, 301, 333, 336, 0, 263, 149,
	177, 169, 258, 175, 202, 332, 334, 335, 147, 256,
	228, 144, 187, 288, 198, 206, 0, 0, 245, 271,
	152, 318, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 203, 0, 264, 174, 321,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	257, 265, 267, 273, 274, 275, 276, 277, 278, 279,
	282, 283, 284, 285, 293, 297, 306, 307, 317, 326,
	330, 181, 314, 331, 237, 210, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 281, 156, 209, 207, 303, 171,
	167, 165, 155, 188, 214, 248, 299, 242, 0, 204,
	0, 0, 290, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 131, 234, 291, 173, 0, 0, 465, 114, 115,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 327, 0, 0, 0, 0, 261, 0, 295, 182,
	200, 145, 197, 128, 140, 0, 180, 233, 268, 272,
	0, 0, 0, 157, 0, 270, 246, 316, 0, 250,
	269, 205, 305, 262, 315, 328, 329, 163, 227, 322,
	300, 325, 337, 141, 160, 240, 296, 319, 287, 222,
	302, 196, 286, 133, 298, 313, 151, 280, 0, 0,
	0, 135, 311, 294, 220, 193, 194, 134, 0, 266,
	164, 176, 159, 236, 308, 309, 158, 338, 142, 324,
	137, 143, 323, 229, 304, 312, 221, 213, 136, 310,
	219, 212, 199, 170, 184, 259, 208, 260, 185, 225,
	224, 226, 0, 132, 0, 292, 320, 339, 148, 0,
	0, 301, 333, 336, 0, 263, 149, 177, 169, 258,
	175, 202, 332, 334, 335, 147, 256, 228, 144, 187,
	288, 198, 206, 0, 0, 245, 271, 152, 318, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 203, 0, 264, 174, 321, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 257, 265, 267,
	273, 274, 275, 276, 277, 278, 279, 282, 283, 284,
	285, 293, 297, 306, 307, 317, 326, 330, 181, 314,
	331, 237, 210, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 201, 0, 0, 249,
	0, 281, 156, 209, 207, 303, 171, 167, 165, 155,
	188, 214, 248, 299, 242, 0, 204, 0, 0, 290,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 131, 234,
	291, 173, 66, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 327, 0,
	0, 0, 0, 261, 0, 295, 182, 200, 145, 197,
	128, 140, 0, 180, 233, 268, 272, 0, 0, 0,
	157, 0, 270, 246, 316, 0, 250, 269, 205, 305,
	262, 315, 328, 329, 163, 227, 322, 300, 325, 337,
	141, 160, 240, 296, 319, 287, 222, 302, 196, 286,
	133, 298, 313, 151, 280, 0, 0, 0, 135, 311,
	294, 220, 193, 194, 134, 0, 266, 164, 176, 159,
	236, 308, 309, 158, 338, 142, 324, 137, 143, 323,
	229, 304, 312, 221, 213, 136, 310, 219, 212, 199,
	170, 184, 259, 208, 260, 185, 225, 224, 226, 0,
	132, 0, 292, 320, 339, 148, 0, 0, 301, 333,
	336, 0, 263, 149, 177, 169, 258, 175, 202, 332,
	334, 335, 147, 256, 228, 144, 187, 288, 198, 206,
	0, 0, 245, 271, 152, 318, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 138, 203,
	0, 264, 174, 321, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 257, 265, 267, 273, 274, 275,
	276, 277, 278, 279, 282, 283, 284, 285, 293, 297,
	306, 307, 317, 326, 330, 181, 314, 331, 237, 210,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 201, 0, 0, 249, 0, 281, 156,
	209, 207, 303, 171, 167, 165, 155, 188, 214, 248,
	299, 242, 0, 204, 0, 0, 290, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 154, 131, 234, 291, 173, 0,
	0, 0, 114, 115, 116, 0, 1088, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 327, 0, 0, 0, 0,
	261, 0, 295, 182, 200, 145, 197, 128, 140, 0,
	180, 233, 268, 272, 0, 0, 0, 157, 0, 270,
	246, 316, 0, 250, 269, 205, 305, 262, 315, 328,
	329, 163, 227, 322, 300, 325, 337, 141, 160, 240,
	296, 319, 287, 222, 302, 196, 286, 133, 298, 313,
	151, 280, 0, 0, 0, 135, 311, 294, 220, 193,
	194, 134, 0, 266, 164, 176, 159, 236, 308, 309,
	158, 338, 142, 324, 137, 143, 323, 229, 304, 312,
	221, 213, 136, 310, 219, 212, 199, 170, 184, 259,
	208, 260, 185, 225, 224, 226, 0, 132, 0, 292,
	320, 339, 148, 0, 0, 301, 333, 336, 0, 263,
	149, 177, 169, 258, 175, 202, 332, 334, 335, 147,
	256, 228, 144, 187, 288, 198, 206, 0, 0, 245,
	271, 152, 318, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 138, 203, 0, 264, 174,
	321, 0, 0, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	153, 161, 168, 172, 179, 183, 186, 189, 190, 191,
	195, 211, 215, 216, 217, 218, 230, 231, 232, 235,
	238, 239, 241, 243, 244, 247, 251, 252, 253, 254,
	255, 257, 265, 267, 273, 274, 275, 276, 277, 278,
	279, 282, 283, 284, 285, 293, 297, 306, 307, 317,
	326, 330, 181, 314, 331, 237, 210, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	201, 0, 0, 249, 0, 281, 156, 209, 207, 303,
	171, 167, 165, 155, 188, 214, 248, 299, 242, 0,
	204, 0, 0, 290, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 154, 131, 234, 291, 173, 0, 0, 0, 114,
	115, 116, 0, 830, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 327, 0, 0, 0, 0, 261, 0, 295,
	182, 200, 145, 197, 128, 140, 0, 180, 233, 268,
	272, 0, 0, 0, 157, 0, 270, 246, 316, 0,
	250, 269, 205, 305, 262, 315, 328, 329, 163, 227,
	322, 300, 325, 337, 141, 160, 240, 296, 319, 287,
	222, 302, 196, 286, 133, 298, 313, 151, 280, 0,
	0, 0, 135, 311, 294, 220, 193, 194, 134, 0,
	266, 164, 176, 159, 236, 308, 309, 158, 338, 142,
	324, 137, 143, 323, 229, 304, 312, 221, 213, 136,
	310, 219, 212, 199, 170, 184, 259, 208, 260, 185,
	225, 224, 226, 0, 132, 0, 292, 320, 339, 148,
	0, 0, 301, 333, 336, 0, 263, 149, 177, 169,
	258, 175, 202, 332, 334, 335, 147, 256, 228, 144,
	187, 288, 198, 206, 0, 0, 245, 271, 152, 318,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 138, 203, 0, 264, 174, 321, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 139, 146, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 257, 265,
	267, 273, 274, 275, 276, 277, 278, 279, 282, 283,
	284, 285, 293, 297, 306, 307, 317, 326, 330, 181,
	314, 331, 843, 210, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 281,
	156, 209, 207, 303, 171, 167, 165, 155, 188, 214,
	248, 299, 242, 0, 204, 0, 0, 290, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 131, 234, 291, 173,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 327, 0, 0, 0,
	0, 261, 0, 295, 182, 200, 145, 197, 128, 140,
	0, 180, 233, 268, 272, 0, 0, 0, 157, 0,
	270, 246, 316, 0, 250, 269, 205, 305, 262, 315,
	328, 329, 163, 227, 322, 300, 325, 337, 141, 160,
	240, 296, 319, 287, 222, 302, 196, 286, 133, 298,
	313, 151, 280, 0, 0, 0, 135, 311, 294, 220,
	193, 194, 134, 0, 266, 164, 176, 159, 236, 308,
	309, 158, 338, 142, 324, 137, 143, 323, 229, 304,
	312, 221, 213, 136, 310, 219, 212, 199, 170, 184,
	259, 208, 260, 185, 225, 224, 226, 0, 132, 0,
	292, 320, 339, 148, 0, 0, 301, 333, 336, 0,
	263, 149, 177, 169, 258, 175, 202, 332, 334, 335,
	147, 256, 228, 144, 187, 288, 198, 206, 0, 0,
	245, 271, 152, 318, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 203, 0, 264,
	174, 321, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 257, 265, 267, 273, 274, 275, 276, 277,
	278, 279, 282, 283, 284, 285, 293, 297, 306, 307,
	317, 326, 330, 181, 314, 331, 237, 210, 0, 0,
	0, 0, 0, 0, 834, 166, 0, 0, 0, 0,
	0, 201, 0, 0, 249, 0, 281, 156, 209, 207,
	303, 171, 167, 165, 155, 188, 214, 248, 299, 242,
	0, 204, 0, 0, 290, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 131, 234, 291, 173, 0, 0, 0,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 327, 0, 0, 0, 0, 261, 0,
	295, 182, 200, 145, 197, 128, 140, 0, 180, 233,
	268, 272, 0, 0, 0, 157, 0, 270, 246, 316,
	0, 250, 269, 205, 305, 262, 315, 328, 329, 163,
	227, 322, 300, 325, 337, 141, 160, 240, 296, 319,
	287, 222, 302, 196, 286, 133, 298, 313, 151, 280,
	0, 0, 0, 135, 311, 294, 220, 193, 194, 134,
	0, 266, 164, 176, 159, 236, 308, 309, 158, 338,
	142, 324, 137, 143, 323, 229, 304, 312, 221, 213,
	136, 310, 219, 212, 199, 170, 184, 259, 208, 260,
	185, 225, 224, 226, 0, 132, 0, 292, 320, 339,
	148, 0, 0, 301, 333, 336, 0, 263, 149, 177,
	169, 258, 175, 202, 332, 334, 335, 147, 256, 228,
	144, 187, 288, 198, 206, 0, 0, 245, 271, 152,
	318, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 138, 203, 0, 264, 174, 321, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 257,
	265, 267, 273, 274, 275, 276, 277, 278, 279, 282,
	283, 284, 285, 293, 297, 306, 307, 317, 326, 330,
	181, 314, 331, 237, 210, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 201, 0,
	0, 249, 0, 281, 156, 209, 207, 303, 171, 167,
	165, 155, 188, 214, 248, 299, 242, 0, 204, 0,
	0, 290, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	131, 234, 291, 173, 0, 0, 0, 114, 115, 116,
	0, 708, 0, 0, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	327, 0, 0, 0, 0, 261, 0, 295, 182, 200,
	145, 197, 128, 140, 0, 180, 233, 268, 272, 0,
	0, 0, 157, 0, 270, 246, 316, 0, 250, 269,
	205, 305, 262, 315, 328, 329, 163, 227, 322, 300,
	325, 337, 141, 160, 240, 296, 319, 287, 222, 302,
	196, 286, 133, 298, 313, 151, 280, 0, 0, 0,
	135, 311, 294, 220, 193, 194, 134, 0, 266, 164,
	176, 159, 236, 308, 309, 158, 338, 142, 324, 137,
	143, 323, 229, 304, 312, 221, 213, 136, 310, 219,
	212, 199, 170, 184, 259, 208, 260, 185, 225, 224,
	226, 0, 132, 0, 292, 320, 339, 148, 0, 0,
	301, 333, 336, 0, 263, 149, 177, 169, 258, 175,
	202, 332, 334, 335, 147, 256, 228, 144, 187, 288,
	198, 206, 0, 0, 245, 271, 152, 318, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	138, 203, 0, 264, 174, 321, 0, 0, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 153, 161, 168, 172, 179,
	183, 186, 189, 190, 191, 195, 211, 215, 216, 217,
	218, 230, 231, 232, 235, 238, 239, 241, 243, 244,
	247, 251, 252, 253, 254, 255, 257, 265, 267, 273,
	274, 275, 276, 277, 278, 279, 282, 283, 284, 285,
	293, 297, 306, 307, 317, 326, 330, 181, 314, 331,
	237, 210, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 201, 0, 0, 249, 0,
	281, 156, 209, 207, 303, 171, 167, 165, 155, 188,
	214, 248, 299, 242, 0, 204, 0, 0, 290, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 154, 131, 234, 291,
	173, 0, 0, 0, 114, 115, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 381, 0, 178, 0, 0, 0, 327, 0, 0,
	0, 0, 261, 0, 295, 182, 200, 145, 197, 128,
	140, 0, 180, 233, 268, 272, 0, 0, 0, 157,
	0, 270, 246, 316, 0, 250, 269, 205, 305, 262,
	315, 328, 329, 163, 227, 322, 300, 325, 337, 141,
	160, 240, 296, 319, 287, 222, 302, 196, 286, 133,
	298, 313, 151, 280, 0, 0, 0, 135, 311, 294,
	220, 193, 194, 134, 0, 266, 164, 176, 159, 236,
	308, 309, 158, 338, 142, 324, 137, 143, 323, 229,
	304, 312, 221, 213, 136, 310, 219, 212, 199, 170,
	184, 259, 208, 260, 185, 225, 224, 226, 0, 132,
	0, 292, 320, 339, 148, 0, 0, 301, 333, 336,
	0, 263, 149, 177, 169, 258, 175, 202, 332, 334,
	335, 147, 256, 228, 144, 187, 288, 198, 206, 0,
	0, 245, 271, 152, 318, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 138, 203, 0,
	264, 174, 321, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	139, 146, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 257, 265, 267, 273, 274, 275, 276,
	277, 278, 279, 282, 283, 284, 285, 293, 297, 306,
	307, 317, 326, 330, 380, 314, 331, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 281, 156, 209,
	207, 303, 171, 167, 165, 155, 188, 214, 248, 299,
	242, 0, 204, 0, 0, 290, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 131, 234, 291, 173, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 122, 0, 327, 0, 0, 0, 0, 261,
	0, 295, 182, 200, 145, 197, 128, 140, 0, 180,
	233, 268, 272, 0, 0, 0, 157, 0, 270, 246,
	316, 0, 250, 269, 205, 305, 262, 315, 328, 329,
	163, 227, 322, 300, 325, 337, 141, 160, 240, 296,
	319, 287, 222, 302, 196, 286, 133, 298, 313, 151,
	280, 0, 0, 0, 135, 311, 294, 220, 193, 194,
	134, 0, 266, 164, 176, 159, 236, 308, 309, 158,
	338, 142, 324, 137, 143, 323, 229, 304, 312, 221,
	213, 136, 310, 219, 212, 199, 170, 184, 259, 208,
	260, 185, 225, 224, 226, 0, 132, 0, 292, 320,
	339, 148, 0, 0, 301, 333, 336, 0, 263, 149,
	177, 169, 258, 175, 202, 332, 334, 335, 147, 256,
	228, 144, 187, 288, 198, 206, 0, 0, 245, 271,
	152, 318, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 203, 0, 264, 174, 321,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	257, 265, 267, 273, 274, 275, 276, 277, 278, 279,
	282, 283, 284, 285, 293, 297, 306, 307, 317, 326,
	330, 181, 314, 331, 237, 210, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 281, 156, 209, 207, 303, 171,
	167, 165, 155, 188, 214, 248, 299, 242, 0, 204,
	0, 0, 290, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 131, 234, 291, 173, 0, 0, 0, 114, 115,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 327, 0, 0, 0, 0, 261, 0, 295, 182,
	200, 145, 197, 128, 140, 0, 180, 233, 268, 272,
	0, 0, 0, 157, 0, 270, 246, 316, 0, 250,
	269, 205, 305, 262, 315, 328, 329, 163, 227, 322,
	300, 325, 337, 141, 160, 240, 296, 319, 287, 222,
	302, 196, 286, 133, 298, 313, 151, 280, 0, 0,
	0, 135, 311, 294, 220, 193, 194, 134, 0, 266,
	164, 176, 159, 236, 308, 309, 158, 338, 142, 324,
	137, 143, 323, 229, 304, 312, 221, 213, 136, 310,
	219, 212, 199, 170, 184, 259, 208, 260, 185, 225,
	224, 226, 0, 132, 0, 292, 320, 339, 148, 0,
	0, 301, 333, 336, 0, 263, 149, 177, 169, 258,
	175, 202, 332, 334, 335, 147, 256, 228, 144, 187,
	288, 198, 206, 0, 0, 245, 271, 152, 318, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 203, 0, 264, 174, 321, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 257, 265, 267,
	273, 274, 275, 276, 277, 278, 279, 282, 283, 284,
	285, 293, 297, 306, 307, 317, 326, 330, 181, 314,
	331, 0, 210,
}

var yyPact = [...]int{
	262, -1000, -301, 1284, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1233, 940, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	350, 942, 127, 1122, 61, 731, 215, 55, 19078, 214,
	41, 19465, -1000, 38, -1000, 22, 19465, 31, 18691, -1000,
	-1000, -1000, 10531, 1086, -78, -83, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 977, 1197, 1196, 1230, 698, 1312,
	-1000, 8970, 8970, 182, 182, 182, 7422, -1000, -1000, 15588,
	19465, 19465, 950, 179, 210, 179, -159, -1000, -1000, -1000,
	-1000, -1000, -1000, 1122, -1000, -1000, 94, -1000, -1000, 19465,
	19465, 304, 1122, 81, -1000, -1000, -1000, 19465, 169, 731,
	169, 169, 19465, -1000, 252, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19465, 1107, 445, 445, 445, 445, 445, 445, -1000, -16,
	70, 63, 72, -38, 731, 157, -1000, 369, -1000, 64,
	-15, -1000, 445, 4998, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 201, -1000, -1000, -1000, -1000, 19465, 18304, 175,
	340, -1000, -1000, -1000, -1000, 709, 720, -1000, 10531, 2421,
	915, 915, -1000, -1000, 230, -1000, -1000, 11692, 11692, 11692,
	11692, 11692, 11692, 11692, 11692, 11692, 11692, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 915, 250, -1000, 10144, 915, 915, 915, 915, 915,
	915, 915, 915, 10531, 915, 915, 915, 915, 915, 915,
	915, 915, 915, 915, 915, 915, 915, 915, 915, 915,
	-1000, -1000, -1000, 19465, -1000, 1233, -1000, 940, -1000, -1000,
	-1000, 1128, 10531, 10531, 1233, -1000, 1031, 8970, -1000, -1000,
	1224, -1000, -1000, -1000, -1000, 395, 1250, -1000, 12466, 249,
	1247, 17917, -1000, 16362, 17530, 913, 7018, -70, -1000, -1000,
	-1000, 335, 15201, -1000, -1000, -1000, 1106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 899, 19465, -1000, -1000, 366, 731, -1000,
	934, -1000, 893, -1000, 923, 58, 334, 19465, 363, 731,
	731, -1000, -1000, -1000, 1104, 317, 1780, 4998, 96, 144,
	98, 19465, 1122, 1077, 910, 195, 19465, 1172, 993, 19465,
	731, -1000, 6210, -1000, 445, -1000, 607, 10531, -1000, -1000,
	-1000, -1000, -1000, 445, 19465, 445, 445, 445, 445, 422,
	444, 422, -1000, -1000, -1000, -1000, 4998, 4998, 4998, 4998,
	19465, 4998, 4998, 444, -1000, -1000, -1000, 300, -1000, 992,
	-1000, -1000, -1000, -1000, 26, -1000, -1000, -1000, -1000, -1000,
	1284, -1000, -1000, -1000, -143, 10531, 10531, 10531, 10531, 612,
	303, 11692, 476, 454, 11692, 11692, 11692, 11692, 11692, 11692,
	11692, 11692, 11692, 11692, 11692, 11692, 11692, 11692, 11692, 658,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 731, -1000,
	1282, 818, 818, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 12079, 7809, 6210, 698, 891, 1233, 8970, 8970,
	10531, 10531, 9744, 9357, 8970, 1111, 358, 720, 19465, -1000,
	-1000, 11305, -1000, -1000, -1000, -1000, -1000, 546, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 19465, 19465, 8970, 8970, 8970,
	8970, 8970, -1000, 909, -1000, -182, 14814, 1196, 698, 1224,
	1160, 1276, 283, 604, 907, -1000, 673, 1196, 14427, 931,
	-1000, 1224, -1000, -1000, -1000, 19465, -1000, -1000, 17136, -1000,
	-1000, 5806, 19465, 116, 19465, -1000, 781, 1175, -1000, -1000,
	-1000, 1188, 14040, 19465, 898, 889, -1000, -1000, 242, 6614,
	-70, -1000, 6614, 808, -1000, -117, -77, 8196, 260, -1000,
	-1000, -1000, -1000, 4190, 12853, 671, 387, -56, -1000, -1000,
	-1000, 923, -1000, 923, 923, 923, 923, -5, -5, -5,
	-5, -1000, -1000, -1000, -1000, -1000, 941, 939, -1000, 923,
	923, 923, 923, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	938, 938, 938, 924, 924, 161, 10531, 109, 19465, 1177,
	490, 52, 324, 74, -1000, 1170, 962, -1000, 317, 844,
	-1000, -1000, 882, 882, 378, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 118, -1000, 19465, 19465,
	19465, 19465, 19465, 222, 91, 19465, 19465, 906, -1000, 19465,
	4998, -1000, -1000, -1000, -1000, -1000, -1000, 720, -1000, -1000,
	-1000, -1000, -1000, -1000, 445, 19465, 19465, 19465, -1000, -1000,
	445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19465, -1000,
	597, 19465, 19465, -1000, -1000, -1000, -1000, -1000, 720, 303,
	339, 313, -1000, -1000, 615, -1000, -1000, 2266, -1000, -1000,
	-1000, -1000, 476, 11692, 11692, 11692, 1146, 2266, 2214, 754,
	541, 264, 503, 503, 280, 280, 280, 280, 280, 601,
	601, -1000, -1000, -1000, 546, -1000, -1000, -1000, 546, 8970,
	8970, 904, 915, 241, -1000, 977, -1000, -1000, 1196, 873,
	873, 730, 677, 417, 1245, 873, 394, 1243, 873, 873,
	8970, -1000, -1000, 355, -1000, 10531, 546, -1000, 239, -1000,
	1181, 901, 814, 873, 546, 546, 873, 873, 19465, -1000,
	-293, -1000, -142, 278, 915, -1000, 16749, -1000, -1000, 1128,
	-1000, -1000, 1072, -1000, 1028, 10531, 10531, 10531, -1000, -1000,
	-1000, 1128, 1209, -1000, 1039, 1038, 1240, 8970, 16362, 1224,
	-1000, -1000, -1000, 238, 1240, 953, 915, -1000, 19465, 16362,
	16362, 16362, 16362, 16362, -1000, 1020, 1015, -1000, 1008, 1005,
	1016, 19465, -1000, 887, 698, 14040, 116, 744, 16362, 19465,
	-1000, -1000, 16362, 19465, 5402, -1000, 808, -70, -114, -1000,
	-1000, -1000, -1000, 720, -1000, 813, 788, 3786, -1000, -1000,
	-1000, -1000, 177, -1000, -1000, 936, 731, -1000, 1154, 331,
	331, 496, 731, 1140, -1000, -1000, -1000, -1000, 1121, -1000,
	372, -63, -1000, -1000, -5, -5, -1000, -1000, 260, 1103,
	260, 260, 260, 596, 596, -1000, -1000, -1000, -1000, -1000,
	482, -1000, -1000, -1000, 478, -1000, -1000, 934, 544, 995,
	109, -1000, -1000, 317, 594, 1090, 19465, -1000, -1000, 669,
	203, 43, 117, -1000, -1000, -1000, -1000, 991, -1000, 771,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19465,
	-1000, -1000, -1000, -1000, -1000, 19465, 959, -1000, -1000, -1000,
	-1000, 34, 95, 89, 193, -1000, 4998, -1000, -1000, -1000,
	-1000, 422, -1000, 422, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1146, 2266, 2124, -1000, 11692, 11692, -1000, -1000, 873,
	873, 8970, 6210, 1233, 1128, -1000, -1000, 106, 658, 106,
	11692, 11692, -1000, 11692, 11692, -1000, -175, 905, 349, -1000,
	10531, 578, -1000, 6210, -1000, 11692, 11692, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 208, 207, 206, 19465,
	-1000, -1000, 563, 589, 1026, 720, 720, -1000, -1000, 19465,
	-1000, -1000, -1000, -1000, 1238, 10531, -1000, 753, -1000, 4594,
	1196, 986, 19465, 915, 1284, 13253, 19465, 834, -1000, 321,
	1175, 956, 979, 1033, -1000, -1000, -1000, -1000, 1014, -1000,
	987, -1000, -1000, -1000, -1000, -1000, 698, 1240, 16362, 791,
	-1000, 791, -1000, 237, -1000, -1000, -1000, -134, -91, -1000,
	-1000, -1000, 4190, -1000, 4190, -1000, 19465, 165, -1000, 731,
	731, 731, -1000, -1000, -1000, 929, 978, 11692, -1000, -1000,
	-1000, 260, 260, -1000, 341, -1000, -1000, -1000, 851, -1000,
	836, 747, 810, 19, -1000, 949, 1096, 317, 317, -1000,
	438, -1000, 731, -1000, -1000, 19465, 50, -1000, 928, 558,
	-1000, 19465, -1000, -1000, -1000, -1000, -1000, -1000, 1148, -180,
	731, 19465, 19465, 19465, -1000, 19465, -1000, 445, 445, -1000,
	11692, 2266, 2266, -1000, -1000, 546, -1000, 1196, -1000, 546,
	923, 923, -1000, 923, 924, -1000, 923, 15, 923, 14,
	546, 546, 2079, 2030, 1980, 1939, 915, -166, -1000, 720,
	10531, -1000, 1844, 1476, 915, 915, 915, 778, -1000, 571,
	-5, -1000, -1000, -1000, 1211, 1228, 720, -1000, -1000, -1000,
	1129, 683, 695, -1000, -1000, 8583, 786, 1037, 234, 778,
	1233, 19465, 10531, -1000, -1000, 10531, 920, -1000, 10531, -1000,
	-1000, -1000, 1233, 1233, 791, -1000, -1000, 274, -1000, -1000,
	-1000, 3786, -1000, 764, -1000, 1140, -1000, -1000, -1000, 19465,
	-39, 1271, 2266, -1000, -1000, -1000, -1000, -5, 569, -5,
	406, -1000, 404, -1000, -1000, -223, -1000, -1000, 983, 994,
	-1000, -1000, 918, -1000, -1000, -1000, 666, -1000, -1000, 915,
	-1000, 6210, -1000, -1000, 917, 961, -1000, -1000, -1000, -1000,
	2266, -1000, 1128, -1000, -1000, 162, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11692, 11692, 11692, 11692, 11692, 1196,
	566, 720, 11692, 11692, 15975, 19465, 19465, 13640, 19465, -5,
	-50, -1000, 10531, 10531, 1139, -1000, 915, -1000, 958, 19465,
	915, 19465, -1000, 1196, -1000, 720, 720, 19465, 720, 1196,
	-1000, 109, 760, -1000, 370, -1000, -106, 260, -1000, 260,
	664, 653, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1186, 19465, -1000, 115, 721, -1000, 311, 19465, 19465, -1000,
	-1000, -1000, 1181, 1181, 1181, 1181, 36, 546, -1000, 1181,
	1181, 755, -1000, 755, 755, 278, -1000, -282, -1000, 1074,
	1071, 720, 709, 1270, -1000, 915, 1284, 228, 695, -1000,
	-1000, 742, -1000, -1000, 134, 19465, 383, 1135, -1000, 1134,
	-1000, -1000, -1000, -1000, -1000, 940, 727, 711, -1000, 19465,
	6210, 4190, 657, -1000, -1000, -1000, -1000, -1000, 546, 67,
	-184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -50, 178,
	-1000, 1049, 1042, 1219, 19465, 695, 19465, -1000, 19465, -1000,
	-1000, 562, -1000, -1000, 129, -1000, -1000, 115, 1036, -1000,
	-1000, 959, -1000, 1025, -178, -188, 1058, 1060, 1060, 1071,
	1215, 1069, 1066, -1000, 556, 616, -1000, 916, -1000, -1000,
	-86, -1000, 110, -180, -1000, 973, -1000, 1053, 555, -1000,
	-1000, -1000, -1000, 550, -1000, 1214, 1210, -1000, 19465, 146,
	-1000, -1000, 102, -1000, -181, -1000, 505, -1000, -1000, -1000,
	543, 537, 642, 54, 915, -186, -1000, -1000, -1000, -1000,
	975, -1000, 10918, -189, 969, -1000, 1254, 1181, 546, -1000,
	-1000, 1256, 360, 360, -1000, -1000, -1000, -1000, -1000, 155,
	559, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1611, 1610, 14, 115, 79, 1597, 1595, 1594, 1593,
	143, 142, 141, 1592, 1591, 1590, 1589, 1588, 1587, 1586,
	1584, 1583, 1581, 1580, 1579, 1563, 1562, 119, 116, 463,
	1561, 1558, 1555, 1553, 1552, 1551, 1549, 1547, 1546, 1544,
	1541, 1540, 1537, 1536, 113, 1535, 1533, 1531, 1529, 1526,
	1518, 1517, 1516, 1515, 1513, 1512, 95, 1510, 41, 101,
	40, 73, 1509, 66, 1508, 1507, 1506, 1505, 1504, 2015,
	1503, 61, 105, 77, 1499, 39, 1498, 1497, 103, 1496,
	1494, 64, 1493, 1490, 1937, 1489, 71, 74, 16, 50,
	1488, 1487, 1486, 1485, 99, 1171, 1484, 1483, 13, 1482,
	1481, 117, 1480, 80, 35, 8, 27, 30, 1478, 75,
	1476, 10, 1475, 82, 1474, 1473, 1472, 1471, 33, 1470,
	68, 85, 55, 1467, 3, 11, 1466, 1465, 1461, 1460,
	1459, 1457, 5, 1455, 1449, 1447, 1446, 29, 1445, 12,
	1441, 60, 47, 22, 9, 1435, 1431, 21, 86, 58,
	94, 1427, 1424, 1420, 714, 1419, 54, 1417, 127, 1416,
	42, 1414, 420, 563, 1413, 1412, 1411, 1410, 1409, 62,
	695, 1642, 84, 97, 1407, 1405, 2176, 45, 72, 18,
	1399, 1396, 1394, 67, 78, 36, 701, 44, 1392, 1391,
	1390, 1389, 1380, 1378, 1374, 48, 1369, 1368, 1367, 175,
	31, 89, 20, 1366, 1365, 1364, 1354, 56, 93, 1353,
	1351, 53, 63, 1349, 100, 37, 34, 1346, 1342, 1339,
	1338, 25, 26, 1337, 88, 32, 43, 23, 38, 83,
	1331, 19, 1329, 1322, 24, 28, 1321, 6, 1319, 17,
	1315, 2, 0, 1302, 4, 1300, 81, 1213, 7, 1298,
	1, 1297, 1296, 76, 1295, 1294, 1292, 1291, 69, 702,
	96, 1290, 109,
}

var yyR1 = [...]int{
	0, 256, 257, 257, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 242, 242, 242, 245, 245, 21, 41,
	3, 3, 3, 3, 2, 2, 8, 9, 4, 5,
	5, 10, 10, 50, 50, 11, 12, 12, 12, 12,
	260, 260, 78, 78, 79, 79, 141, 141, 13, 14,
	14, 150, 150, 149, 149, 149, 151, 151, 151, 151,
	186, 186, 15, 15, 15, 15, 15, 57, 57, 244,
	244, 243, 241, 241, 240, 240, 239, 23, 24, 25,
	26, 247, 247, 217, 30, 30, 29, 29, 29, 29,
	31, 31, 28, 28, 27, 27, 219, 219, 218, 218,
	218, 218, 218, 218, 208, 188, 188, 188, 188, 191,
	191, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	190, 190, 190, 190, 190, 192, 192, 192, 192, 192,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 194, 194, 194, 194, 194,
	194, 194, 194, 207, 207, 195, 195, 201, 201, 202,
	202, 202, 204, 204, 205, 205, 164, 164, 164, 197,
	197, 198, 198, 203, 203, 199, 199, 199, 200, 200,
	200, 206, 206, 206, 206, 206, 196, 196, 209, 231,
	231, 230, 230, 226, 226, 226, 226, 216, 216, 223,
	223, 223, 223, 223, 223, 213, 213, 213, 214, 214,
	212, 212, 215, 215, 225, 225, 224, 210, 210, 211,
	211, 234, 234, 234, 234, 234, 235, 249, 250, 248,
	248, 248, 248, 248, 165, 165, 165, 220, 220, 220,
	221, 221, 221, 222, 222, 222, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 238, 236, 236,
	237, 237, 17, 22, 22, 18, 18, 18, 18, 19,
	19, 32, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 157, 157, 251, 251,
	159, 159, 155, 155, 158, 158, 156, 156, 156, 160,
	160, 160, 161, 161, 255, 255, 255, 34, 34, 36,
	36, 37, 38, 38, 181, 181, 182, 182, 39, 40,
	49, 49, 49, 49, 49, 49, 51, 51, 51, 7,
	7, 7, 7, 46, 46, 46, 6, 6, 35, 35,
	42, 252, 252, 253, 254, 254, 254, 254, 43, 20,
	261, 44, 45, 45, 56, 56, 56, 52, 52, 52,
	55, 55, 55, 60, 60, 62, 62, 62, 62, 62,
	63, 63, 63, 63, 63, 63, 59, 59, 61, 61,
	61, 61, 174, 174, 174, 173, 173, 70, 70, 71,
	71, 72, 72, 73, 73, 73, 110, 87, 87, 140,
	140, 139, 139, 142, 142, 74, 74, 74, 74, 75,
	75, 76, 76, 77, 77, 180, 180, 179, 179, 179,
	178, 178, 80, 80, 80, 82, 81, 81, 81, 81,
	83, 83, 85, 85, 84, 84, 86, 88, 88, 88,
	88, 88, 89, 89, 69, 69, 69, 69, 69, 69,
	69, 69, 153, 153, 91, 91, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 102, 102, 102, 102,
	102, 102, 92, 92, 92, 92, 92, 92, 92, 58,
	58, 103, 103, 103, 109, 104, 104, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 99, 99, 99, 99, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 262, 262, 101, 100, 100, 100,
	100, 100, 100, 100, 54, 54, 54, 54, 54, 185,
	185, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 114, 114, 53, 53, 112, 112,
	113, 115, 115, 111, 111, 111, 94, 94, 94, 94,
	94, 94, 94, 94, 96, 96, 96, 116, 116, 117,
	117, 118, 118, 119, 119, 120, 121, 121, 121, 122,
	122, 122, 122, 232, 232, 232, 232, 232, 227, 227,
	227, 227, 228, 228, 228, 64, 64, 64, 64, 66,
	66, 65, 65, 47, 47, 48, 48, 48, 67, 67,
	68, 68, 68, 68, 137, 137, 137, 123, 123, 123,
	123, 128, 128, 128, 124, 124, 126, 126, 126, 127,
	127, 127, 125, 131, 131, 133, 133, 132, 132, 130,
	130, 135, 135, 134, 134, 129, 129, 93, 93, 93,
	93, 93, 138, 138, 138, 138, 143, 143, 105, 105,
	107, 107, 106, 108, 144, 144, 147, 145, 145, 148,
	148, 148, 148, 148, 146, 146, 146, 175, 175, 175,
	152, 152, 162, 162, 163, 163, 154, 154, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 167, 167,
	167, 168, 168, 136, 136, 136, 136, 233, 233, 229,
	171, 171, 172, 172, 176, 176, 177, 177, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 258, 259, 183, 184,
	184, 184,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 2, 3,
	5, 6, 6, 7, 4, 6, 5, 7, 8, 1,
	3, 7, 8, 1, 1, 9, 9, 8, 7, 7,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 6, 11, 2, 0, 2, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 7, 4,
	2, 1, 1, 4, 0, 1, 1, 1, 2, 2,
	0, 1, 5, 5, 4, 4, 2, 4, 1, 1,
	3, 4, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 0,
	1, 1, 2, 1, 3, 2, 3, 0, 1, 2,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 3, 1, 3,
	1, 10, 11, 11, 12, 1, 5, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 5, 6, 6, 6,
	6, 4, 4, 3, 6, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 3,
	2, 3, 4, 3, 3, 3, 3, 3, 3, 2,
	4, 4, 4, 4, 4, 5, 7, 4, 4, 4,
	4, 4, 4, 4, 2, 7, 2, 4, 5, 4,
	3, 3, 5, 2, 3, 3, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 5, 0, 1, 0, 1, 2, 3,
	0, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 7, 0,
	3, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 4,
	5, 5, 0, 2, 1, 3, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 2, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 3, 3, 3, 0,
	3, 1, 1, 0, 4, 0, 1, 1, 0, 3,
	1, 3, 2, 1, 0, 2, 4, 0, 9, 3,
	5, 0, 3, 3, 0, 1, 0, 2, 2, 0,
	2, 2, 2, 0, 3, 0, 3, 0, 3, 0,
	4, 0, 3, 0, 4, 0, 1, 2, 1, 5,
	4, 4, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 0, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -256, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -42,
	-43, -4, -258, 6, 7, 8, -50, 10, 11, 31,
	-23, -24, 146, -25, 147, -26, 149, 148, 182, 150,
	175, 70, 208, 209, 211, 212, 213, 214, -51, 180,
	181, 152, 35, 41, 32, 33, 80, 9, 305, 177,
	176, 26, -257, 409, -56, 5, -118, 16, -3, -44,
	-261, -44, -44, -44, -44, -44, -44, -217, -219, 80,
	119, 80, -57, 154, -136, -247, 100, 160, 163, 164,
	296, 153, -30, -29, -28, -27, -31, 30, -247, 154,
	156, 268, -245, -242, 83, 84, 85, 154, 154, 155,
	156, -247, 154, -84, -176, -242, -170, 315, 168, 347,
	348, 76, 258, 208, 222, 216, 243, 235, 316, 349,
	169, 198, 233, 236, 283, 166, 350, 280, 263, 271,
	94, 211, 292, 351, 75, 47, 40, 178, 231, 227,
	199, 352, 324, 192, 225, 46, 28, 45, 353, 273,
	248, 44, 354, 79, 320, 275, 226, 272, 152, 355,
	171, 403, 164, 356, 249, 253, 357, 284, 48, 358,
	359, 360, 74, 220, 221, 361, 206, 167, 286, 247,
	165, 34, 276, 317, 54, 186, 287, 42, 251, 41,
	407, 362, 246, 242, 49, 363, 364, 365, 366, 245,
	219, 241, 204, 58, 255, 254, 256, 193, 282, 238,
	367, 368, 369, 172, 77, 370, 228, 19, 371, 372,
	200, 373, 52, 374, 375, 290, 181, 376, 50, 37,
	184, 377, 378, 379, 380, 381, 281, 382, 274, 250,
	252, 161, 188, 270, 319, 383, 224, 384, 173, 185,
	180, 291, 174, 385, 386, 387, 388, 389, 390, 391,
	212, 39, 392, 393, 394, 395, 207, 203, 285, 294,
	57, 78, 260, 396, 218, 163, 201, 397, 209, 51,
	195, 266, 205, 43, 239, 187, 398, 399, 229, 230,
	244, 217, 240, 210, 404, 189, 182, 400, 293, 202,
	261, 321, 194, 237, 234, 196, 401, 156, 190, 191,
	402, 405, 277, 267, 278, 279, 268, 197, 232, 262,
	154, 236, 283, 263, 264, 265, 276, 277, 281, 188,
	-255, 284, 154, -155, 137, 146, 273, -159, 274, 267,
	268, 197, -251, -242, 285, 407, 269, 275, 279, 278,
	-176, 210, -181, 215, -171, -242, -170, 213, -84, -49,
	403, 150, -183, -183, -183, -104, -69, -90, 103, -95,
	30, 24, -94, -91, -111, -108, -109, 137, 138, 140,
	139, 141, 126, 127, 134, 104, 142, -99, -97, -98,
	-100, 87, 86, 95, 88, 89, 90, 91, 96, 97,
	98, -171, -176, -106, -258, 64, 65, 306, 307, 308,
	309, 314, 310, 106, 53, 295, 304, 303, 302, 299,
	300, 297, 298, 312, 313, 159, 296, 153, 132, 305,
	-242, -170, 40, 266, 266, -5, -4, -258, 6, 21,
	22, -122, 18, 17, -259, 82, -52, -62, 59, 60,
	-63, 22, 36, 63, 61, -45, -61, 128, -69, -176,
	-61, -154, 158, -154, -154, -145, -186, 210, -148, 285,
	284, -172, -146, -171, -169, 283, 236, 282, 151, 322,
	102, 23, 25, 105, 137, 17, 106, 136, 306, 146,
	68, 323, 297, 298, 295, 301, 308, 309, 296, 264,
	30, 11, 325, 26, 176, 22, 36, 130, 148, 109,
	110, 179, 24, 177, 98, 328, 20, 71, 12, 14,
	329, 330, 15, 159, 158, 121, 155, 66, 9, 142,
	27, 118, 62, 331, 29, 332, 333, 334, 335, 64,
	119, 18, 299, 300, 32, 408, 336, 314, 183, 132,
	69, 55, 103, 337, 338, 96, 339, 99, 72, 100,
	16, 67, 38, 340, 341, 342, 288, 343, 120, 149,
	305, 65, 344, 153, 265, 6, 311, 31, 175, 63,
	345, 154, 108, 312, 313, 157, 97, 5, 160, 33,
	10, 70, 73, 302, 303, 304, 53, 318, 107, 13,
	346, 289, 101, -218, 119, -208, -211, -171, 170, -235,
	166, -84, -225, -224, -171, -64, 76, -163, 159, 155,
	-163, 305, -27, -28, 236, 136, -84, -84, 146, 148,
	151, 72, -29, 194, -22, -84, -162, 159, -242, -162,
	-162, -84, 143, -84, 31, -160, 119, 13, -160, -160,
	-160, -160, -160, 195, 280, 195, 196, 195, 196, 195,
	-158, -157, 271, 272, 266, 270, -242, 296, -242, 188,
	154, 189, 156, -213, 155, 34, 167, 196, 266, 191,
	-160, -184, -258, -172, 157, -171, -46, -171, 87, -7,
	-3, -11, -10, -12, 111, 81, 102, 100, 101, 118,
	-69, -92, 121, 103, 119, 120, 105, 123, 122, 133,
	126, 127, 128, 129, 130, 131, 132, 124, 125, 136,
	111, 112, 113, 114, 115, 116, 117, -153, -258, -109,
	-258, 144, 145, -95, -95, -95, -95, -95, -95, -95,
	-95, -95, -95, -258, 143, -2, -104, -4, -258, -258,
	-258, -258, -258, -258, -258, -258, -114, -69, -258, -262,
	-101, -258, -262, -101, -262, -101, -262, -258, -262, -101,
	-262, -101, -262, -262, -101, -258, -258, -258, -258, -258,
	-258, -258, -183, -252, -253, -87, -84, -118, -3, -44,
	-137, 20, 32, -69, -119, -120, -69, -118, 55, -59,
	-61, -63, 59, 60, 93, 12, -174, -173, 23, -171,
	87, 143, 12, -85, 27, -84, -71, -72, -73, -74,
	-87, -110, -258, 12, -78, -79, -84, -86, -176, 81,
	210, -148, -186, -150, -149, 286, 288, 111, -175, -171,
	87, 30, 31, 82, 81, -84, -188, -191, -193, -192,
	-194, -189, -190, 233, 234, 137, 237, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 31, 178, 229,
	230, 231, 232, 249, 250, 251, 252, 253, 254, 255,
	256, 216, 235, 316, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 228, -242, 80, 82, 81, -195,
	80, -67, 199, 111, -84, 103, -242, -242, 31, -216,
	111, -166, 151, 148, 149, -238, 147, 258, 236, 94,
	30, 16, 306, 184, 321, -242, 185, -184, 190, 190,
	154, 154, 203, -84, 40, 81, 157, -78, 24, 72,
	-84, -242, -177, -176, -169, -160, 87, -69, -160, -84,
	-160, -160, -160, -160, -156, 12, 121, -214, 12, 121,
	-156, -184, -184, -184, -184, -84, -184, -184, -214, -161,
	119, 72, -182, 213, 247, 404, 405, 406, -69, -69,
	-69, -69, -102, 96, 103, 97, 98, -95, -103, -106,
	-109, 92, 121, 119, 120, 105, -95, -95, -95, -95,
	-95, -95, -95, -95, -95, -95, -95, -95, -95, -95,
	-95, -185, -242, 87, -242, -94, -94, -171, -60, 22,
	36, -59, -172, -177, -169, -56, -259, -259, -118, -59,
	-59, -69, -69, -111, 87, -59, -111, 87, -59, -59,
	-55, 22, 36, -112, -113, 107, -111, -171, -176, -259,
	-95, -171, -171, -59, -60, -60, -59, -59, 81, -254,
	288, 289, 408, -179, 184, -178, 23, -176, 87, -122,
	-259, -123, 27, 10, 121, 81, 19, 81, -121, 25,
	26, -122, -96, -171, 88, 91, -70, 81, 12, -63,
	-84, -173, 128, -177, -84, -141, 184, -84, 31, 81,
	-80, -82, -81, -83, 62, 66, 68, 63, 64, 65,
	69, -180, 23, -71, -3, -258, -84, -78, -260, 81,
	12, 73, -260, 81, 143, -148, -150, 81, 287, 289,
	290, 72, 99, -69, -200, 136, -220, -221, -222, -172,
	87, 88, -208, -209, -210, -223, 170, -234, 161, 163,
	164, 160, -212, 171, -235, 155, 29, 82, -164, 96,
	103, -204, 261, -195, -195, -195, -195, -195, -199, 236,
	-199, -199, -199, 80, 80, -195, -195, -195, -195, -201,
	80, -201, -201, -202, 80, -202, -235, 166, -69, -231,
	-230, -226, -229, 165, 94, 318, 73, -224, -121, 88,
	-66, 201, 111, 202, 204, 205, 24, -233, -229, -216,
	-242, 87, -183, -246, 166, 162, 170, 171, 164, 83,
	84, 85, 155, 29, 161, 163, 184, 160, -246, -167,
	-168, 157, 23, 155, 29, 184, -84, -84, -84, -84,
	-84, 151, 148, 192, -84, -84, -84, -184, -160, -176,
	-176, -84, -160, -84, 87, -84, -171, 96, 97, 98,
	-103, -95, -95, -95, -58, 179, 102, -259, -259, -59,
	-59, -258, 143, -5, -122, -259, -259, 81, 73, 23,
	12, 12, -259, 12, 12, -259, -259, -59, -115, -113,
	109, -69, -259, 143, -259, 81, 81, -259, -259, -259,
	-259, -259, -253, 407, 289, -88, 70, 158, 71, -258,
	-178, -137, 38, 46, 57, -69, -69, -120, -137, -152,
	20, 12, 53, 53, -89, 13, -61, -71, -63, 143,
	-89, -93, 31, 53, -3, -258, -258, -144, -147, -111,
	-72, -73, -73, -72, -73, 62, 62, 62, 67, 62,
	67, 62, -81, -176, -259, -259, -3, -141, 73, -71,
	-84, -71, -86, -176, 128, -149, -151, 291, 288, 294,
	-242, 87, 81, -222, 111, -211, 80, -242, 29, -212,
	-212, -212, -215, -242, -215, 29, -197, 30, 96, -205,
	262, -199, -199, -200, 31, -200, -200, -200, -207, 87,
	-207, 88, 88, 82, -232, -227, -228, 32, 76, -226,
	-216, 87, 37, -171, 82, 156, 207, -68, 301, 87,
	83, 72, -242, 87, -183, -183, -84, -183, -171, -244,
	73, 190, 258, 190, 193, 157, -184, -156, -156, -58,
	102, -95, -95, -259, -259, -60, -172, -118, -137, -187,
	137, 233, 178, 231, 227, 247, 238, 260, 229, 261,
	-185, -187, -95, -95, -95, -95, 315, -118, 110, -69,
	108, -172, -95, -95, 155, 155, 155, -142, -171, 39,
	87, 87, 58, -84, -116, 14, -69, 128, -122, -143,
	72, -144, -105, -107, -106, -258, -138, -259, -171, -142,
	-89, 81, 111, -76, -75, 72, 73, -77, 72, -75,
	62, 62, -259, -89, -71, -89, -89, 143, 288, 292,
	293, -221, -222, -225, -234, 171, -215, -215, -215, 80,
	-198, 72, -95, -200, -200, -242, 137, 82, 81, 82,
	81, 82, 81, -165, 353, 103, -228, -227, -216, -216,
	88, -242, -84, -65, 199, 206, 80, 84, -84, 27,
	-241, 318, -243, -242, -171, -171, -171, -84, -160, -160,
	-95, -259, -122, -259, -195, -195, -195, -202, -195, 221,
	-195, 221, -259, -259, 20, 20, 20, 20, -258, -53,
	311, -69, 81, 81, -258, -258, -258, -259, 81, 87,
	-199, -117, 15, 17, 28, -143, 81, -259, -259, 81,
	53, 143, -259, -118, -147, -69, -69, 80, -69, -118,
	-89, 82, -139, -171, -203, 258, 10, -199, 87, -199,
	88, 88, 353, 30, 77, 78, 79, 30, 74, 75,
	-140, 80, 82, -258, -240, -239, -172, 80, 73, -137,
	-199, -242, -95, -95, -95, -95, -95, -122, 87, -95,
	-95, -139, -259, -139, -139, -179, -171, -199, -125, -130,
	-158, -69, -104, 29, -107, 53, -3, -171, -105, -171,
	-122, -139, -122, -231, 82, 81, -206, 161, 29, 160,
	-98, -200, -200, 82, 82, 23, -139, -236, -237, 184,
	81, 111, -139, -84, -259, -259, -259, -259, -54, 121,
	318, -259, -259, -259, -259, -259, -259, -88, -128, 403,
	-131, 42, -132, 43, 10, -105, 143, 82, 173, -171,
	-196, 94, 29, 29, -3, 82, -259, 81, -171, -239,
	-222, 82, -259, 316, 69, 319, -125, 47, 239, -133,
	51, -134, -129, 52, 17, -144, -171, -84, 87, -47,
	318, -237, 53, -244, 58, 317, 320, -126, 49, -124,
	48, -124, -132, 17, -135, 44, 45, 87, 80, -48,
	198, 407, 186, -241, 58, -127, 50, 72, 99, 87,
	17, 17, -139, 166, 187, 318, 72, 99, 87, 87,
	82, 200, -258, 319, -249, -250, 72, -95, 183, 320,
	-250, 72, 11, 10, -259, -259, -248, 174, 169, 172,
	31, -248, 168, 30, 96,
}

var yyDef = [...]int{
	32, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 671, 0, 410, 410, 410, 410, 410, 410, 410,
	0, 0, -2, -2, 0, 36, 0, 0, 0, 0,
	-2, 368, 369, 0, 371, -2, 0, 0, 380, 1158,
	1158, 1158, 0, 0, 0, 0, 1156, 53, 54, 386,
	387, 388, 1, 3, 0, 414, 679, 0, 0, -2,
	412, 0, 0, 786, 786, 786, 0, 82, 83, 0,
	0, 0, 695, 784, 0, 784, 0, 804, 805, 806,
	101, 102, 86, -2, 106, 107, 0, 111, 100, 0,
	0, 0, 110, 37, 33, 34, 35, 0, 782, 0,
	782, 782, 0, 310, 494, 814, 815, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	0, 0, 359, 359, 359, 359, 359, 359, 319, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 336, 0,
	0, 343, 359, 1159, 365, 366, 353, 351, 348, 349,
	367, 370, 0, 375, 378, 810, 811, 0, 393, 0,
	997, 385, 398, 399, 409, 38, 545, 504, 0, 510,
	512, 0, 547, 548, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 578, 579,
	580, 656, 657, 658, 659, 660, 661, 662, 663, 514,
	515, 653, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 614, 614, 614, 614, 614,
	614, 614, 614, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, 1158, 0, 408, 671, 49, 0, 410, 415,
	416, 714, 0, 0, 671, 1157, 0, 0, -2, -2,
	426, 432, 433, 434, 435, 411, 0, 438, 442, 0,
	0, 0, 787, 0, 0, 68, 0, 1129, 767, -2,
	-2, 0, 0, 812, 813, -2, 959, -2, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 0, 0, 118, 119, 0, 0, 240,
	961, 116, 0, 234, 175, 708, 0, 0, 0, 0,
	0, 88, 108, 109, 0, 217, 0, 1159, 0, 0,
	0, 0, -2, 0, 302, 0, 0, 0, 0, 0,
	0, 309, 0, 311, 359, 313, 0, 0, 314, 315,
	316, 317, 318, 359, 0, 359, 359, 359, 359, 356,
	0, 356, 354, 355, 346, 347, 1159, 1159, 1159, 1159,
	0, 1159, 1159, 0, 225, 226, 227, 362, 340, 341,
	344, 345, 1160, 1161, 376, 379, 396, 394, 395, 397,
	389, 390, 391, 392, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	532, 533, 534, 535, 536, 537, 538, 511, 0, 525,
	0, 0, 0, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 0, 423, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 0, 0, 420, 0, 645, 0, 598,
	606, 0, 599, 607, 600, 608, 601, 0, 602, 609,
	603, 610, 604, 605, 611, 0, 0, 0, 423, 423,
	0, 0, 39, 400, 401, 0, 477, 679, 0, 425,
	717, 0, 0, 680, 672, 673, 676, 679, 0, 447,
	436, 427, 430, 431, 413, 0, 439, 443, 0, 445,
	446, 0, 0, 66, 0, 493, 0, 449, 451, 452,
	453, 475, 0, 0, 0, 0, 62, 64, 494, 0,
	1129, 773, 0, 70, 71, 0, 0, 0, 198, 777,
	778, 779, 775, 257, 0, 0, 186, 182, 126, 127,
	128, 175, 130, 175, 175, 175, 175, 195, 195, 195,
	195, 158, 159, 160, 161, 162, 0, 0, 145, 175,
	175, 175, 175, 165, 166, 167, 168, 169, 170, 171,
	172, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	177, 177, 177, 179, 179, 0, 0, 209, 0, 676,
	0, 699, 0, 0, 97, 0, 807, 99, 217, 0,
	218, 1158, 0, 0, 798, 272, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 783, 0,
	1159, 308, 495, 816, 817, 312, 360, 361, 320, 337,
	321, 323, 322, 324, 359, 0, 0, 0, 228, 229,
	359, 327, 328, 329, 330, 331, 332, 333, 0, 339,
	0, 0, 0, 377, 381, 382, 383, 384, 546, 505,
	506, 507, 509, 526, 0, 528, 530, 516, 517, 541,
	542, 543, 0, 0, 0, 0, 539, 521, 0, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 566, 629, 630, 0, 564, 565, 576, 0, 0,
	0, 424, 654, 0, -2, 0, 544, 762, 679, 0,
	0, 0, 0, 549, 656, 0, 549, 656, 0, 0,
	0, 421, 422, 651, 648, 0, 0, 653, 0, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	404, 406, 0, 497, 1066, 478, 0, 480, 481, 714,
	50, 40, 0, 715, 0, 0, 0, 0, 675, 677,
	678, 714, 0, 664, 0, 0, 502, 0, 0, 428,
	46, 444, 440, 0, 502, 0, 0, 492, 0, 0,
	0, 0, 0, 0, 482, 0, 0, 485, 0, 0,
	0, 0, 476, 0, 0, 0, -2, 0, 0, 0,
	60, 61, 0, 0, 0, 768, 69, 0, 0, 74,
	75, 769, 770, 771, 772, 0, 103, 258, 260, 263,
	264, 265, 120, 122, 123, 0, 0, 238, 1077, 1111,
	998, 232, 232, 996, 245, 230, 231, 117, 189, 187,
	0, 184, 183, 129, 195, 195, 152, 153, 198, 0,
	198, 198, 198, 0, 0, 146, 147, 148, 149, 140,
	0, 141, 142, 143, 0, 144, 239, 0, 0, 683,
	210, 211, 213, 217, 0, 0, 0, 235, 236, 0,
	0, 0, 0, 696, 697, 698, 785, 0, 808, 0,
	114, 115, 266, 1158, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 1158, 0,
	1158, 799, 800, 801, 802, 0, 89, 276, 278, 277,
	281, 0, 0, 0, 0, 303, 1159, 307, 325, 357,
	358, 356, 338, 356, 363, 342, 373, 527, 529, 531,
	518, 539, 522, 0, 519, 0, 0, 513, 581, 0,
	0, 423, 0, 671, 714, 585, 586, 0, 0, 0,
	0, 0, 622, 0, 0, 623, 0, 671, 0, 649,
	0, 0, 597, 0, 616, 0, 0, 617, 618, 619,
	620, 621, 402, 405, 407, 457, 0, 0, 0, 0,
	479, 42, 0, 0, 0, 681, 682, 674, 41, 0,
	780, 781, 665, 666, 667, 0, 437, 448, 429, 0,
	679, 756, 0, 0, 748, 0, 0, 502, 764, 0,
	450, 471, 473, 0, 468, 483, 484, 486, 0, 488,
	0, 490, 491, 454, 455, 456, 0, 502, 0, 502,
	63, 502, 65, 0, 496, 72, 73, 0, 0, 79,
	199, 200, 0, 261, 0, 121, 0, 0, 219, 232,
	232, 232, 223, 233, 224, 0, 191, 0, 188, 125,
	185, 198, 198, 154, 0, 155, 156, 157, 0, 173,
	0, 0, 0, 254, 84, 687, 686, 217, 217, 212,
	0, 215, 0, 809, 176, 0, 0, 709, 710, 0,
	713, 0, 112, 113, 267, 268, 269, 270, 0, 92,
	0, 0, 0, 0, 274, 0, 306, 359, 359, 520,
	0, 540, 523, 582, 583, 0, 655, 679, 44, 0,
	175, 175, 634, 175, 179, 637, 175, 639, 175, 642,
	0, 0, 0, 0, 0, 0, 0, 646, 596, 652,
	0, 654, 0, 0, 0, 0, 0, 0, 463, 0,
	195, 719, 716, 43, 669, 0, 503, 441, 47, 51,
	0, 756, 747, 758, 760, 0, 0, 0, 752, 0,
	671, 0, 0, 465, 472, 0, 0, 466, 0, 467,
	487, 489, -2, 671, 502, 58, 59, 0, 76, 77,
	78, 259, 262, 0, 237, 0, 220, 221, 222, 0,
	193, 0, 190, 150, 151, 196, 197, 195, 0, 195,
	0, 180, 0, 246, 255, 0, 684, 685, 0, 0,
	214, 216, 459, 700, 701, 702, 0, 712, 98, 0,
	275, 0, 90, 91, 0, 0, 280, 304, 326, 335,
	524, 584, 714, 587, 631, 195, 635, 636, 638, 640,
	641, 643, 589, 588, 0, 0, 0, 0, 0, 679,
	0, 650, 0, 0, 0, 0, 0, 477, 0, 195,
	739, 48, 0, 0, 0, 52, 0, 761, 0, 0,
	0, 0, 67, 679, 765, 766, 469, 0, 474, 679,
	57, 209, 0, 461, 201, 194, 0, 198, 174, 198,
	0, 0, 256, 688, 689, 690, 691, 692, 693, 694,
	0, 0, 711, 0, 93, 94, 0, 0, 0, 45,
	632, 633, 0, 0, 0, 0, 624, 0, 647, 0,
	0, 0, 499, 0, 0, 497, 464, 721, 720, 733,
	737, 670, 668, 0, 759, 0, 751, 754, 750, 753,
	55, 0, 56, 208, 0, 0, 206, 0, 203, 205,
	192, 163, 164, 178, 181, 0, 0, 0, 298, 0,
	0, 0, 0, 282, 590, 592, 591, 593, 0, 0,
	0, 595, 612, 613, 498, 500, 501, 458, 739, 0,
	732, 735, -2, 0, 0, 749, 0, 470, 0, 462,
	124, 0, 202, 204, 703, 460, 297, 0, 0, 95,
	96, 89, 594, 0, 0, 0, 726, 724, 724, 737,
	0, 741, 0, 746, 0, 757, 755, 0, 207, 85,
	705, 299, 0, 92, 625, 0, 628, 729, 0, 722,
	725, 723, 734, 0, 740, 0, 0, 738, 0, 0,
	706, 707, 0, 279, 626, 718, 0, 727, 728, 736,
	0, 0, 0, 0, 0, 0, 730, 731, 742, 744,
	241, 704, 0, 0, 242, 243, 0, 0, 0, 627,
	244, 0, 0, 0, 300, 301, 247, 249, 250, 0,
	0, 248, 251, 252, 253,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 409,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:389
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:394
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:430
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:449
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Load{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:471
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:488
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:511
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:519
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:531
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:539
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:549
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:556
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:568
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.insertAction = InsertAct
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:637
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:647
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.characteristic = ReadWrite
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			yyVAL.characteristic = ReadOnly
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.isolationLevel = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.scope = SessionScope
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.scope = GlobalScope
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:728
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[5].indexOptions...)
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:736
		{
			yyVAL.statement = &CreateView{ViewName: yyDollar[7].tableName.ToViewName(), IsReplace: yyDollar[2].boolean, Algorithm: yyDollar[3].str, Definer: yyDollar[4].str, Security: yyDollar[5].str, Columns: yyDollar[8].columns, Select: yyDollar[10].selStmt, CheckOption: yyDollar[11].str}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:747
		{
			yyVAL.boolean = false
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.boolean = true
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:756
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:771
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:793
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:799
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:806
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, Options: yyDollar[5].indexOptions, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:813
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:831
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:837
		{
			yyVAL.collateAndCharsets = nil
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:855
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:864
		{
			yyVAL.boolean = false
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.boolean = true
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:874
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:878
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:899
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:915
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:919
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:924
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:928
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:934
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1166
		{
			yyVAL.literal = nil
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1175
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1179
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1187
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1197
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1205
		{
			yyVAL.boolean = false
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.boolean = true
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1214
		{
			yyVAL.boolean = false
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.boolean = true
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1224
		{
			yyVAL.boolean = false
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.boolean = false
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.boolean = true
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1237
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1255
		{
			yyVAL.boolean = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.boolean = true
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1290
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.colKeyOpt = colKey
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.literal = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1315
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1326
		{
			yyVAL.indexOptions = nil
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1350
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1359
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), String: yyDollar[3].colIdent.String()}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1375
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1391
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1395
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1435
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1449
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1481
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1485
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1489
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1493
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1497
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1503
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1521
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1537
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1542
		{
			yyVAL.boolean = true
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.boolean = true
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.boolean = false
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1563
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = yyDollar[1].str
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1589
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1611
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1616
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1636
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1729
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1745
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1749
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1765
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1777
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Charset, Filter: yyDollar[4].showFilter}}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Charset, Filter: yyDollar[3].showFilter}}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Collation, Filter: yyDollar[3].showFilter}}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Database, Filter: yyDollar[3].showFilter}}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Privilege}}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1839
		{
			yyVAL.statement = &Show{&ShowBasic{Command: Procedure, Filter: yyDollar[4].showFilter}}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Show{&ShowBasic{Command: StatusSession, Filter: yyDollar[4].showFilter}}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &Show{&ShowBasic{Command: StatusGlobal, Filter: yyDollar[4].showFilter}}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1851
		{
			yyVAL.statement = &Show{&ShowBasic{Command: VariableSession, Filter: yyDollar[4].showFilter}}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{&ShowBasic{Command: VariableGlobal, Filter: yyDollar[4].showFilter}}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1871
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1900
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1913
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1923
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1945
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = "extended "
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = "full "
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2029
		{
			yyVAL.showFilter = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2043
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.empty = struct{}{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &Begin{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = &Begin{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &Commit{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Rollback{}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2097
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2102
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2107
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.explainType = EmptyType
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.explainType = JSONType
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.explainType = TreeType
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.explainType = VitessType
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.explainType = TraditionalType
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.explainType = AnalyzeType
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2182
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			yyVAL.statement = &OtherRead{}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2210
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: yyDollar[1].aliasedTableName, Lock: yyDollar[2].lockType}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.lockType = Read
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.lockType = ReadLocal
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.lockType = Write
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.lockType = LowPriorityWrite
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2256
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2266
		{
			setAllowComments(yylex, true)
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2276
		{
			yyVAL.bytes2 = nil
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.boolean = true
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2290
		{
			yyVAL.boolean = false
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.boolean = true
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = SQLCacheStr
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2312
		{
			yyVAL.boolean = false
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.boolean = true
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.boolean = true
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2325
		{
			yyVAL.selectExprs = nil
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2334
		{
			yyVAL.strs = nil
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2350
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = SQLCacheStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = DistinctStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = DistinctStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = StraightJoinHint
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2404
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2409
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2429
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2477
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2482
		{
			yyVAL.columns = nil
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2492
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2496
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2502
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2506
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2519
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2523
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2527
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2531
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2545
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2551
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2554
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.joinType = NormalJoinType
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.joinType = NormalJoinType
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.joinType = NormalJoinType
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.joinType = StraightJoinType
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.joinType = LeftJoinType
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.joinType = LeftJoinType
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.joinType = RightJoinType
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.joinType = RightJoinType
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
			yyVAL.indexHints = nil
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2661
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2665
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2669
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2673
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = nil
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3009
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 590:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 591:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 594:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3107
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3227
		{
			yyVAL.matchExprOption = NoOption
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3231
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3235
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3239
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = nil
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3323
		{
			yyVAL.str = string("")
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3333
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3337
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3343
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3348
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3362
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3366
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = &NullVal{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3415
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3419
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.exprs = nil
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3428
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = nil
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3437
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3442
		{
			yyVAL.orderBy = nil
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3446
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3452
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3456
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3462
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3467
		{
			yyVAL.orderDirection = AscOrder
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3471
		{
			yyVAL.orderDirection = AscOrder
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.orderDirection = DescOrder
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3480
		{
			yyVAL.limit = nil
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3484
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3488
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3492
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3497
		{
			yyVAL.indexOptions = nil
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3501
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3505
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3509
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3513
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3520
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3524
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3532
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3538
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3542
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3546
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3551
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3559
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3563
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3568
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3572
		{
			yyVAL.str = yyDollar[3].str
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3587
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3591
		{
			yyVAL.str = yyDollar[2].str
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3596
		{
			yyVAL.str = "cascaded"
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3609
		{
			yyVAL.str = ""
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3613
		{
			yyVAL.str = yyDollar[3].str
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3627
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'@" + string(yyDollar[2].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3636
		{
			yyVAL.lock = NoLock
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3640
		{
			yyVAL.lock = ForUpdateLock
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3644
		{
			yyVAL.lock = ShareModeLock
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			yyVAL.selectInto = nil
		}
	case 718:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3653
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3657
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3661
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3666
		{
			yyVAL.str = ""
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3670
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3674
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3679
		{
			yyVAL.str = ""
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.str = " header"
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3688
		{
			yyVAL.str = ""
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3692
		{
			yyVAL.str = " manifest on"
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3696
		{
			yyVAL.str = " manifest off"
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3701
		{
			yyVAL.str = ""
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3705
		{
			yyVAL.str = " overwrite on"
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3709
		{
			yyVAL.str = " overwrite off"
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3715
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3720
		{
			yyVAL.str = ""
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3724
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3729
		{
			yyVAL.str = ""
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3733
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3738
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3742
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3747
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3751
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3756
		{
			yyVAL.str = ""
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3760
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3765
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3769
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3774
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3778
		{
			yyVAL.str = " optionally"
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3791
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3795
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3799
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3803
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3807
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3813
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3817
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3821
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3825
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3830
		{
			yyVAL.updateExprs = nil
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3834
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3840
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3844
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3850
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3854
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3860
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3866
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3876
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3880
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3886
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3892
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3902
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3906
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3910
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3914
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3918
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3926
		{
			yyVAL.bytes = []byte("charset")
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3933
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3937
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3941
		{
			yyVAL.expr = &Default{}
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3950
		{
			yyVAL.boolean = false
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3952
		{
			yyVAL.boolean = true
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3955
		{
			yyVAL.boolean = false
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3957
		{
			yyVAL.boolean = true
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3960
		{
			yyVAL.ignore = false
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.ignore = true
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3968
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3970
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3976
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3980
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3988
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3996
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3998
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4001
		{
			yyVAL.str = ""
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4010
		{
			yyVAL.indexOptions = nil
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4012
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4016
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4022
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4033
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4039
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4043
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4050
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4413
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4422
		{
			decNesting(yylex)
		}
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4427
		{
			skipToEnd(yylex)
		}
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4432
		{
			skipToEnd(yylex)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4436
		{
			skipToEnd(yylex)
		}
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4440
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

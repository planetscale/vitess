// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const VALUES = 57381
const LAST_INSERT_ID = 57382
const NEXT = 57383
const VALUE = 57384
const SHARE = 57385
const MODE = 57386
const SQL_NO_CACHE = 57387
const SQL_CACHE = 57388
const SQL_CALC_FOUND_ROWS = 57389
const JOIN = 57390
const STRAIGHT_JOIN = 57391
const LEFT = 57392
const RIGHT = 57393
const INNER = 57394
const OUTER = 57395
const CROSS = 57396
const NATURAL = 57397
const USE = 57398
const FORCE = 57399
const ON = 57400
const USING = 57401
const ID = 57402
const AT_ID = 57403
const AT_AT_ID = 57404
const HEX = 57405
const STRING = 57406
const INTEGRAL = 57407
const FLOAT = 57408
const HEXNUM = 57409
const VALUE_ARG = 57410
const LIST_ARG = 57411
const COMMENT = 57412
const COMMENT_KEYWORD = 57413
const BIT_LITERAL = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const SHIFT_LEFT = 57437
const SHIFT_RIGHT = 57438
const DIV = 57439
const MOD = 57440
const UNARY = 57441
const COLLATE = 57442
const BINARY = 57443
const UNDERSCORE_BINARY = 57444
const UNDERSCORE_UTF8MB4 = 57445
const UNDERSCORE_UTF8 = 57446
const UNDERSCORE_LATIN1 = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const FLUSH = 57457
const SCHEMA = 57458
const TABLE = 57459
const INDEX = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const UNIQUE = 57465
const PRIMARY = 57466
const COLUMN = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const KEY_BLOCK_SIZE = 57470
const CHECK = 57471
const INDEXES = 57472
const ACTION = 57473
const CASCADE = 57474
const CONSTRAINT = 57475
const FOREIGN = 57476
const NO = 57477
const REFERENCES = 57478
const RESTRICT = 57479
const SHOW = 57480
const DESCRIBE = 57481
const EXPLAIN = 57482
const DATE = 57483
const ESCAPE = 57484
const REPAIR = 57485
const OPTIMIZE = 57486
const TRUNCATE = 57487
const MAXVALUE = 57488
const PARTITION = 57489
const REORGANIZE = 57490
const LESS = 57491
const THAN = 57492
const PROCEDURE = 57493
const TRIGGER = 57494
const VINDEX = 57495
const VINDEXES = 57496
const STATUS = 57497
const VARIABLES = 57498
const WARNINGS = 57499
const SEQUENCE = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const SAVEPOINT = 57506
const RELEASE = 57507
const WORK = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const YEAR = 57525
const CHAR = 57526
const VARCHAR = 57527
const BOOL = 57528
const CHARACTER = 57529
const VARBINARY = 57530
const NCHAR = 57531
const TEXT = 57532
const TINYTEXT = 57533
const MEDIUMTEXT = 57534
const LONGTEXT = 57535
const BLOB = 57536
const TINYBLOB = 57537
const MEDIUMBLOB = 57538
const LONGBLOB = 57539
const JSON = 57540
const ENUM = 57541
const GEOMETRY = 57542
const POINT = 57543
const LINESTRING = 57544
const POLYGON = 57545
const GEOMETRYCOLLECTION = 57546
const MULTIPOINT = 57547
const MULTILINESTRING = 57548
const MULTIPOLYGON = 57549
const NULLX = 57550
const AUTO_INCREMENT = 57551
const APPROXNUM = 57552
const SIGNED = 57553
const UNSIGNED = 57554
const ZEROFILL = 57555
const COLLATION = 57556
const DATABASES = 57557
const TABLES = 57558
const VITESS_METADATA = 57559
const VSCHEMA = 57560
const FULL = 57561
const PROCESSLIST = 57562
const COLUMNS = 57563
const FIELDS = 57564
const ENGINES = 57565
const PLUGINS = 57566
const EXTENDED = 57567
const KEYSPACES = 57568
const VITESS_KEYSPACES = 57569
const VITESS_SHARDS = 57570
const VITESS_TABLETS = 57571
const NAMES = 57572
const CHARSET = 57573
const GLOBAL = 57574
const SESSION = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const TIMESTAMPADD = 57601
const TIMESTAMPDIFF = 57602
const MATCH = 57603
const AGAINST = 57604
const BOOLEAN = 57605
const LANGUAGE = 57606
const WITH = 57607
const QUERY = 57608
const EXPANSION = 57609
const UNUSED = 57610
const ARRAY = 57611
const CUME_DIST = 57612
const DESCRIPTION = 57613
const DENSE_RANK = 57614
const EMPTY = 57615
const EXCEPT = 57616
const FIRST_VALUE = 57617
const GROUPING = 57618
const GROUPS = 57619
const JSON_TABLE = 57620
const LAG = 57621
const LAST_VALUE = 57622
const LATERAL = 57623
const LEAD = 57624
const MEMBER = 57625
const NTH_VALUE = 57626
const NTILE = 57627
const OF = 57628
const OVER = 57629
const PERCENT_RANK = 57630
const RANK = 57631
const RECURSIVE = 57632
const ROW_NUMBER = 57633
const SYSTEM = 57634
const WINDOW = 57635
const ACTIVE = 57636
const ADMIN = 57637
const BUCKETS = 57638
const CLONE = 57639
const COMPONENT = 57640
const DEFINITION = 57641
const ENFORCED = 57642
const EXCLUDE = 57643
const FOLLOWING = 57644
const GEOMCOLLECTION = 57645
const GET_MASTER_PUBLIC_KEY = 57646
const HISTOGRAM = 57647
const HISTORY = 57648
const INACTIVE = 57649
const INVISIBLE = 57650
const LOCKED = 57651
const MASTER_COMPRESSION_ALGORITHMS = 57652
const MASTER_PUBLIC_KEY_PATH = 57653
const MASTER_TLS_CIPHERSUITES = 57654
const MASTER_ZSTD_COMPRESSION_LEVEL = 57655
const NESTED = 57656
const NETWORK_NAMESPACE = 57657
const NOWAIT = 57658
const NULLS = 57659
const OJ = 57660
const OLD = 57661
const OPTIONAL = 57662
const ORDINALITY = 57663
const ORGANIZATION = 57664
const OTHERS = 57665
const PATH = 57666
const PERSIST = 57667
const PERSIST_ONLY = 57668
const PRECEDING = 57669
const PRIVILEGE_CHECKS_USER = 57670
const PROCESS = 57671
const RANDOM = 57672
const REFERENCE = 57673
const REQUIRE_ROW_FORMAT = 57674
const RESOURCE = 57675
const RESPECT = 57676
const RESTART = 57677
const RETAIN = 57678
const REUSE = 57679
const ROLE = 57680
const SECONDARY = 57681
const SECONDARY_ENGINE = 57682
const SECONDARY_LOAD = 57683
const SECONDARY_UNLOAD = 57684
const SKIP = 57685
const SRID = 57686
const THREAD_PRIORITY = 57687
const TIES = 57688
const UNBOUNDED = 57689
const VCPU = 57690
const VISIBLE = 57691
const FORMAT = 57692
const TREE = 57693
const VITESS = 57694
const TRADITIONAL = 57695

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 312,
	135, 312,
	147, 312,
	172, 326,
	173, 326,
	-2, 314,
	-1, 49,
	137, 336,
	-2, 334,
	-1, 72,
	41, 372,
	-2, 380,
	-1, 401,
	123, 705,
	-2, 701,
	-1, 402,
	123, 706,
	-2, 702,
	-1, 416,
	41, 373,
	-2, 385,
	-1, 417,
	41, 374,
	-2, 386,
	-1, 436,
	91, 962,
	-2, 74,
	-1, 437,
	91, 876,
	-2, 75,
	-1, 442,
	91, 843,
	-2, 667,
	-1, 444,
	91, 908,
	-2, 669,
	-1, 945,
	123, 708,
	-2, 704,
	-1, 1032,
	59, 56,
	61, 56,
	-2, 60,
	-1, 1383,
	5, 624,
	18, 624,
	20, 624,
	32, 624,
	62, 624,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 18680

var yyAct = [...]int{

	401, 1586, 1308, 1426, 1501, 1210, 345, 1629, 1535, 360,
	1054, 1230, 1363, 1026, 1399, 743, 1619, 736, 1364, 71,
	3, 1211, 697, 617, 1083, 1077, 1197, 374, 1360, 1259,
	1097, 1053, 932, 1050, 331, 1063, 1369, 441, 867, 92,
	1375, 1327, 1488, 291, 69, 314, 291, 1023, 887, 1285,
	1276, 92, 598, 291, 1147, 774, 1067, 781, 1005, 1028,
	1012, 764, 418, 769, 965, 741, 763, 939, 746, 28,
	403, 909, 347, 780, 409, 1093, 567, 67, 771, 1034,
	92, 336, 778, 92, 291, 753, 291, 72, 607, 332,
	895, 66, 335, 8, 710, 343, 587, 1622, 1606, 7,
	6, 1617, 1594, 438, 1614, 1427, 289, 1605, 711, 1593,
	1344, 1456, 572, 1394, 1395, 782, 327, 783, 615, 74,
	75, 76, 77, 78, 79, 386, 1393, 392, 393, 390,
	391, 389, 388, 387, 94, 95, 96, 404, 1045, 1046,
	1044, 394, 395, 424, 428, 1116, 630, 569, 30, 571,
	334, 60, 34, 35, 287, 283, 284, 285, 1247, 1115,
	279, 1246, 435, 277, 1248, 281, 625, 333, 1267, 1076,
	626, 623, 624, 942, 1310, 1561, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 1491, 1084,
	670, 1447, 94, 95, 96, 1445, 324, 94, 95, 96,
	894, 326, 59, 1114, 322, 604, 856, 606, 629, 618,
	619, 628, 659, 658, 668, 669, 661, 662, 663, 664,
	665, 666, 667, 660, 1616, 1328, 670, 855, 1312, 853,
	1311, 1613, 1587, 1307, 1006, 1579, 1633, 1402, 613, 603,
	605, 1070, 1637, 896, 897, 898, 588, 857, 574, 1536,
	1544, 281, 1313, 1304, 860, 633, 1111, 1108, 1109, 1306,
	1107, 844, 280, 854, 1538, 1070, 1330, 1231, 1233, 1148,
	1386, 1385, 1384, 570, 577, 94, 95, 96, 291, 579,
	580, 294, 286, 291, 282, 589, 1568, 1128, 278, 291,
	1127, 1166, 1470, 1118, 1121, 291, 596, 1163, 1392, 602,
	682, 683, 584, 1332, 1202, 1336, 92, 1331, 92, 1329,
	1176, 1155, 1040, 1051, 1334, 92, 757, 695, 594, 94,
	95, 96, 660, 1333, 670, 670, 1243, 92, 92, 888,
	984, 600, 601, 1113, 1592, 1537, 1335, 1337, 1084, 612,
	608, 578, 648, 649, 647, 650, 586, 1069, 639, 1232,
	814, 614, 593, 882, 1631, 1112, 1562, 1632, 595, 1630,
	650, 1545, 1543, 916, 647, 1305, 631, 1303, 644, 645,
	581, 1069, 582, 1413, 82, 583, 1346, 914, 915, 913,
	650, 1577, 590, 591, 592, 1161, 1553, 1160, 1373, 609,
	610, 784, 663, 664, 665, 666, 667, 660, 643, 1117,
	670, 1265, 966, 682, 683, 1073, 648, 649, 647, 682,
	683, 61, 1074, 83, 1119, 680, 846, 599, 889, 733,
	649, 647, 642, 1638, 650, 734, 620, 92, 640, 641,
	291, 291, 291, 632, 92, 1582, 802, 650, 1295, 966,
	92, 1173, 883, 779, 750, 698, 658, 668, 669, 661,
	662, 663, 664, 665, 666, 667, 660, 438, 1597, 670,
	661, 662, 663, 664, 665, 666, 667, 660, 573, 1639,
	670, 1497, 1291, 1292, 1293, 1496, 1280, 815, 762, 1279,
	59, 747, 713, 715, 717, 719, 721, 723, 724, 1268,
	989, 990, 912, 761, 735, 773, 714, 716, 1599, 720,
	722, 1578, 725, 828, 831, 832, 833, 834, 835, 836,
	1514, 837, 838, 839, 840, 841, 816, 817, 818, 819,
	800, 801, 829, 433, 803, 1494, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 820, 821, 822, 823,
	824, 825, 826, 827, 1294, 648, 649, 647, 1460, 1299,
	1296, 1287, 1297, 1290, 1277, 1286, 880, 575, 576, 1288,
	1289, 872, 413, 650, 1541, 1615, 986, 291, 904, 906,
	907, 842, 92, 1298, 845, 905, 847, 291, 291, 92,
	92, 92, 648, 649, 647, 291, 276, 68, 291, 745,
	1348, 291, 865, 866, 1550, 291, 1549, 92, 1162, 830,
	650, 1198, 92, 92, 92, 291, 92, 92, 985, 668,
	669, 661, 662, 663, 664, 665, 666, 667, 660, 92,
	92, 670, 1140, 1141, 1142, 1601, 413, 648, 649, 647,
	792, 1409, 869, 363, 362, 365, 366, 367, 368, 1071,
	848, 849, 364, 369, 413, 650, 1541, 1590, 858, 1009,
	871, 773, 1541, 413, 864, 648, 649, 647, 94, 95,
	96, 1372, 934, 429, 430, 431, 861, 1466, 877, 1541,
	1569, 933, 59, 650, 94, 95, 96, 1237, 1250, 1035,
	935, 910, 94, 95, 96, 1014, 1017, 1018, 1019, 1015,
	843, 1016, 1020, 1036, 92, 1376, 1377, 850, 851, 852,
	1541, 1540, 1486, 1485, 1472, 413, 1469, 413, 1419, 1418,
	954, 957, 1415, 1416, 949, 870, 967, 891, 1036, 943,
	874, 875, 876, 70, 878, 879, 911, 92, 92, 1415,
	1414, 997, 413, 945, 944, 1009, 413, 884, 885, 30,
	1037, 1198, 1039, 646, 413, 92, 791, 790, 646, 1552,
	30, 698, 291, 1361, 1008, 92, 1372, 998, 1417, 291,
	1009, 291, 1251, 1043, 1205, 1037, 1179, 1035, 997, 291,
	291, 291, 1206, 1178, 946, 997, 1035, 92, 936, 937,
	92, 943, 406, 1521, 1009, 987, 859, 776, 1024, 1372,
	1607, 92, 92, 59, 1503, 945, 1003, 975, 976, 30,
	438, 1078, 1477, 438, 59, 1309, 997, 1098, 979, 1405,
	999, 1376, 1377, 1504, 1055, 1000, 1254, 1094, 991, 1089,
	1088, 1101, 1004, 1624, 1007, 1620, 1079, 1080, 1081, 1082,
	1085, 1086, 1087, 1407, 1032, 1379, 59, 1361, 1281, 892,
	1001, 863, 1090, 1091, 1092, 291, 92, 1382, 92, 1033,
	1120, 1042, 1038, 59, 291, 291, 291, 291, 291, 1041,
	291, 291, 1222, 1381, 291, 92, 1220, 1223, 1058, 1219,
	1218, 1221, 1099, 950, 951, 1611, 1604, 956, 959, 960,
	1353, 1224, 291, 1018, 1019, 1187, 744, 291, 413, 291,
	291, 1609, 1196, 291, 92, 1195, 1352, 1014, 1017, 1018,
	1019, 1015, 974, 1016, 1020, 977, 978, 1186, 1102, 1272,
	737, 962, 402, 789, 1095, 1096, 597, 1122, 1123, 1124,
	1125, 1126, 738, 1129, 1130, 963, 1459, 1131, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	1135, 910, 670, 1264, 1584, 1133, 1583, 1519, 1262, 1256,
	1134, 93, 1464, 1499, 982, 292, 1138, 1104, 292, 862,
	1022, 407, 408, 93, 1103, 292, 1105, 659, 658, 668,
	669, 661, 662, 663, 664, 665, 666, 667, 660, 419,
	1194, 670, 410, 1132, 1463, 1143, 911, 411, 1193, 70,
	1462, 1356, 93, 420, 1198, 93, 292, 1185, 292, 291,
	627, 1167, 748, 749, 422, 1164, 421, 1626, 1625, 1191,
	291, 291, 291, 291, 291, 1212, 404, 1156, 886, 758,
	751, 406, 291, 1626, 1157, 1207, 291, 1566, 1492, 1172,
	291, 1203, 983, 419, 68, 291, 291, 73, 65, 291,
	291, 291, 1, 313, 1618, 1229, 1200, 420, 1428, 1500,
	1110, 1585, 1249, 1190, 92, 1534, 416, 417, 422, 1398,
	421, 1453, 1201, 1255, 1252, 1061, 1199, 1260, 1260, 1052,
	81, 565, 1214, 1215, 80, 1217, 1213, 1055, 869, 1216,
	1576, 1225, 1238, 881, 611, 1060, 1240, 1059, 1542, 1235,
	1266, 1236, 1075, 1490, 1406, 1241, 1263, 1261, 1581, 1239,
	797, 1244, 92, 92, 1269, 1270, 795, 796, 794, 799,
	798, 793, 306, 893, 1152, 1153, 323, 1271, 1021, 1273,
	1274, 1275, 1257, 1258, 785, 1100, 752, 84, 1302, 1301,
	1106, 1072, 92, 303, 621, 1170, 622, 308, 678, 1192,
	1278, 1284, 1245, 659, 658, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 439, 92, 670, 1300, 432,
	1367, 981, 933, 988, 740, 1461, 1355, 1171, 707, 964,
	767, 346, 1325, 903, 361, 1326, 358, 970, 359, 1324,
	992, 1204, 1315, 1316, 652, 344, 1345, 338, 766, 759,
	292, 1013, 1011, 291, 1338, 292, 1010, 772, 1378, 1317,
	1349, 292, 1374, 92, 1339, 765, 996, 292, 415, 92,
	92, 1362, 1212, 961, 945, 944, 1560, 1455, 93, 414,
	93, 1283, 1323, 52, 33, 328, 1324, 93, 635, 423,
	23, 22, 375, 29, 1365, 92, 21, 1371, 291, 93,
	93, 20, 19, 25, 18, 17, 16, 585, 37, 412,
	1314, 27, 92, 26, 92, 92, 1354, 1380, 1260, 1260,
	15, 14, 29, 1388, 1397, 1390, 13, 1391, 12, 11,
	10, 1387, 9, 1412, 5, 1055, 4, 1055, 1359, 638,
	24, 1458, 291, 1396, 696, 1389, 2, 1403, 1404, 0,
	0, 1401, 0, 0, 0, 0, 0, 0, 0, 0,
	405, 0, 291, 1410, 1411, 0, 0, 0, 92, 0,
	1429, 92, 92, 92, 291, 0, 0, 0, 0, 0,
	1421, 0, 659, 658, 668, 669, 661, 662, 663, 664,
	665, 666, 667, 660, 0, 1422, 670, 1424, 0, 93,
	0, 0, 292, 292, 292, 1420, 93, 0, 0, 0,
	0, 0, 93, 0, 1440, 1441, 0, 1442, 0, 0,
	1444, 0, 1446, 1443, 0, 1423, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 1465, 0, 0, 1474, 0, 0, 92, 0, 0,
	1438, 0, 0, 0, 1483, 0, 92, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	1055, 92, 0, 0, 0, 0, 1487, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 1495, 1507, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 0,
	92, 92, 0, 92, 0, 0, 0, 0, 92, 292,
	92, 92, 92, 291, 93, 1520, 1518, 92, 1522, 292,
	292, 93, 93, 93, 1365, 0, 1532, 292, 0, 0,
	292, 1539, 1546, 292, 92, 291, 0, 292, 0, 93,
	0, 0, 0, 0, 93, 93, 93, 292, 93, 93,
	1527, 0, 1528, 1530, 1531, 0, 0, 1547, 0, 1548,
	1513, 93, 93, 0, 1567, 0, 0, 1575, 616, 1498,
	616, 0, 92, 1574, 1573, 0, 1554, 616, 1526, 1365,
	0, 0, 0, 92, 92, 0, 0, 1588, 1533, 0,
	0, 29, 0, 0, 1589, 0, 0, 0, 1555, 92,
	0, 0, 1595, 1212, 679, 681, 1502, 1055, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 1603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1608, 0, 694, 93, 1610, 92, 699,
	700, 701, 702, 703, 704, 705, 706, 0, 709, 712,
	712, 712, 718, 712, 712, 718, 712, 726, 727, 728,
	729, 730, 731, 732, 1634, 1623, 0, 0, 29, 93,
	93, 0, 0, 1598, 0, 0, 1452, 0, 0, 0,
	1612, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 768, 292, 0, 0, 93, 0, 0,
	0, 292, 0, 292, 0, 0, 372, 0, 0, 0,
	0, 292, 292, 292, 0, 0, 0, 0, 0, 93,
	0, 0, 93, 0, 30, 31, 32, 60, 34, 35,
	1451, 0, 0, 93, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 91, 0, 0, 0, 36,
	55, 56, 0, 58, 0, 0, 0, 325, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	0, 0, 670, 0, 45, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 440, 292, 93, 568,
	93, 0, 0, 0, 0, 0, 292, 292, 292, 292,
	292, 0, 292, 292, 0, 0, 292, 93, 0, 0,
	0, 0, 659, 658, 668, 669, 661, 662, 663, 664,
	665, 666, 667, 660, 292, 426, 670, 0, 0, 292,
	0, 292, 292, 0, 616, 292, 93, 0, 0, 0,
	0, 616, 616, 616, 38, 39, 41, 40, 43, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 616, 616, 616, 0, 616, 616,
	0, 0, 0, 44, 63, 62, 0, 0, 53, 54,
	42, 616, 616, 0, 337, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 46, 47, 0, 48, 49, 50,
	51, 654, 0, 657, 947, 948, 0, 0, 0, 671,
	672, 673, 674, 675, 676, 677, 0, 655, 656, 653,
	659, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 0, 0, 670, 0, 0, 0, 0, 0,
	295, 292, 980, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 292, 292, 292, 292, 292, 307, 0, 0,
	0, 0, 0, 0, 292, 340, 0, 0, 292, 0,
	0, 0, 292, 0, 0, 0, 0, 292, 292, 1318,
	0, 292, 292, 292, 0, 0, 0, 61, 0, 0,
	0, 305, 0, 1450, 0, 0, 93, 312, 0, 659,
	658, 668, 669, 661, 662, 663, 664, 665, 666, 667,
	660, 0, 440, 670, 440, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 0, 0, 0, 296, 0, 0,
	0, 1025, 0, 634, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 309, 299, 0, 310, 311, 318,
	0, 0, 0, 302, 304, 315, 300, 301, 320, 319,
	0, 297, 317, 316, 93, 659, 658, 668, 669, 661,
	662, 663, 664, 665, 666, 667, 660, 0, 0, 670,
	0, 1149, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	616, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 0, 0, 670, 0, 616, 0, 0,
	0, 0, 0, 755, 0, 292, 0, 0, 0, 0,
	440, 0, 0, 1150, 0, 93, 786, 1151, 0, 0,
	0, 93, 93, 0, 0, 0, 0, 0, 1158, 1159,
	0, 0, 0, 0, 1165, 651, 0, 1168, 1169, 0,
	0, 0, 0, 0, 0, 1175, 0, 93, 0, 1177,
	292, 0, 1180, 1181, 1182, 1183, 1184, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 93, 93, 0, 0,
	0, 337, 0, 0, 0, 0, 1154, 0, 0, 405,
	708, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 0, 292, 670, 0, 0, 0, 0,
	0, 1227, 1228, 0, 0, 0, 739, 742, 0, 0,
	0, 0, 0, 0, 292, 0, 0, 0, 0, 0,
	93, 0, 0, 93, 93, 93, 292, 0, 0, 0,
	0, 768, 0, 0, 0, 0, 0, 0, 1208, 1209,
	0, 0, 768, 768, 768, 768, 768, 0, 440, 0,
	0, 0, 0, 0, 0, 440, 440, 440, 1025, 0,
	1234, 0, 0, 0, 0, 0, 0, 768, 0, 0,
	0, 768, 0, 440, 0, 0, 0, 0, 440, 440,
	440, 0, 440, 440, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 0, 440, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1322, 0, 93, 0, 616, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	938, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 93, 0, 93, 968, 0, 0, 0,
	93, 0, 93, 93, 93, 292, 873, 0, 0, 93,
	0, 0, 0, 972, 973, 0, 0, 1383, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 292, 0, 0,
	0, 993, 0, 890, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 0, 440, 0, 0, 0, 0, 1366,
	0, 29, 899, 900, 901, 902, 0, 0, 0, 0,
	0, 0, 0, 440, 93, 0, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 93, 440, 568, 0,
	768, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 0, 0, 0, 0, 952, 953, 0,
	93, 1437, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 0,
	93, 0, 440, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 1467, 1468, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 908, 0,
	0, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 1480, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 290,
	0, 0, 321, 616, 0, 0, 0, 1529, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 427, 0, 0, 968, 1556, 1557, 1558, 1559,
	290, 1563, 290, 1564, 1565, 0, 0, 0, 0, 1366,
	0, 29, 0, 0, 0, 0, 1570, 0, 1571, 1572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 1551, 0, 0, 0, 0, 0, 1591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1366, 0, 0, 0, 0, 0,
	0, 0, 1174, 1600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1282, 440,
	0, 1188, 1189, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1635, 1636, 0, 440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1621,
	1144, 1145, 1146, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 968, 0, 290, 1368, 1370, 0, 0, 290,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1370, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 0,
	440, 1400, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 1430, 1431, 1432,
	0, 0, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 290, 775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 1340,
	1341, 0, 1342, 1343, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1523, 1524, 0, 1525,
	0, 0, 0, 0, 1489, 0, 1489, 1489, 1489, 0,
	0, 0, 337, 1400, 0, 0, 0, 0, 0, 1475,
	0, 0, 1476, 290, 0, 1478, 0, 0, 0, 0,
	1489, 0, 0, 290, 290, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 290, 0, 0, 290, 0, 0,
	1408, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 1580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 1596, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1517, 337,
	0, 0, 0, 0, 1602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 868, 0, 0, 0, 427, 427, 0, 0,
	427, 427, 427, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 427, 427, 427, 427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 0, 868, 290, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 290, 1030, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 1509, 1510, 1511,
	1512, 0, 0, 0, 1515, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 290, 290, 290, 290, 0, 290, 290, 0, 0,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 290, 0, 1136, 1137, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 427, 0,
	0, 0, 0, 0, 0, 0, 0, 1627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 427, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 290, 290, 290, 290,
	290, 0, 0, 0, 0, 0, 0, 0, 1226, 0,
	0, 0, 290, 0, 0, 0, 1030, 0, 0, 0,
	0, 290, 290, 0, 0, 290, 1242, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 551, 539, 0, 0,
	495, 554, 468, 485, 562, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 541, 511, 553, 155, 0, 473, 528, 224,
	560, 158, 517, 0, 232, 172, 0, 0, 0, 499,
	543, 506, 536, 494, 527, 458, 516, 555, 484, 524,
	556, 0, 0, 969, 94, 95, 96, 0, 1056, 1057,
	0, 0, 0, 0, 0, 116, 290, 521, 550, 481,
	523, 525, 564, 447, 518, 0, 451, 454, 561, 546,
	476, 477, 1253, 0, 0, 0, 0, 0, 0, 498,
	507, 533, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	534, 0, 445, 135, 538, 545, 493, 293, 549, 491,
	490, 552, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 542, 471, 480, 120,
	478, 213, 191, 253, 514, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 233,
	256, 275, 114, 466, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 462, 465, 460, 461, 509, 510, 557, 558, 559,
	535, 456, 0, 463, 464, 0, 540, 547, 548, 513,
	97, 106, 157, 272, 206, 131, 257, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 529, 530, 531, 532, 537,
	544, 563, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 551, 539, 0, 0, 495, 554, 468, 485, 562,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 541, 511, 553,
	155, 0, 473, 528, 224, 560, 158, 517, 0, 232,
	172, 0, 0, 0, 499, 543, 506, 536, 494, 527,
	458, 516, 555, 484, 524, 556, 0, 0, 0, 94,
	95, 96, 0, 1056, 1057, 0, 0, 0, 0, 0,
	116, 0, 521, 550, 481, 523, 525, 564, 447, 518,
	0, 451, 454, 561, 546, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 533, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 534, 0, 445, 135, 538,
	545, 493, 293, 549, 491, 490, 552, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 542, 471, 480, 120, 478, 213, 191, 253, 514,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 233, 256, 275, 114, 466, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 462, 465, 460, 461,
	509, 510, 557, 558, 559, 535, 456, 0, 463, 464,
	0, 540, 547, 548, 513, 97, 106, 157, 272, 206,
	131, 257, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	529, 530, 531, 532, 537, 544, 563, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 551, 539, 0, 0,
	495, 554, 468, 485, 562, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 541, 511, 553, 155, 0, 473, 528, 224,
	560, 158, 517, 0, 232, 172, 0, 0, 0, 499,
	543, 506, 536, 494, 527, 458, 516, 555, 484, 524,
	556, 59, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 550, 481,
	523, 525, 564, 447, 518, 0, 451, 454, 561, 546,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 533, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	534, 0, 445, 135, 538, 545, 493, 293, 549, 491,
	490, 552, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 542, 471, 480, 120,
	478, 213, 191, 253, 514, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 233,
	256, 275, 114, 466, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 462, 465, 460, 461, 509, 510, 557, 558, 559,
	535, 456, 0, 463, 464, 0, 540, 547, 548, 513,
	97, 106, 157, 272, 206, 131, 257, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 529, 530, 531, 532, 537,
	544, 563, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 551, 539, 0, 0, 495, 554, 468, 485, 562,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 541, 511, 553,
	155, 0, 473, 528, 224, 560, 158, 517, 0, 232,
	172, 0, 0, 0, 499, 543, 506, 536, 494, 527,
	458, 516, 555, 484, 524, 556, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 550, 481, 523, 525, 564, 447, 518,
	0, 451, 454, 561, 546, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 533, 492, 0, 0,
	0, 0, 0, 0, 1358, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 534, 0, 445, 135, 538,
	545, 493, 293, 549, 491, 490, 552, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 542, 471, 480, 120, 478, 213, 191, 253, 514,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 233, 256, 275, 114, 466, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 462, 465, 460, 461,
	509, 510, 557, 558, 559, 535, 456, 0, 463, 464,
	0, 540, 547, 548, 513, 97, 106, 157, 272, 206,
	131, 257, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	529, 530, 531, 532, 537, 544, 563, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 551, 539, 0, 0,
	495, 554, 468, 485, 562, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 541, 511, 553, 155, 0, 473, 528, 224,
	560, 158, 517, 0, 232, 172, 0, 0, 0, 499,
	543, 506, 536, 494, 527, 458, 516, 555, 484, 524,
	556, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 550, 481,
	523, 525, 564, 447, 518, 0, 451, 454, 561, 546,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 533, 492, 0, 0, 0, 0, 0, 0, 1243,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	534, 0, 445, 135, 538, 545, 493, 293, 549, 491,
	490, 552, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 542, 471, 480, 120,
	478, 213, 191, 253, 514, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 233,
	256, 275, 114, 466, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 462, 465, 460, 461, 509, 510, 557, 558, 559,
	535, 456, 0, 463, 464, 0, 540, 547, 548, 513,
	97, 106, 157, 272, 206, 131, 257, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 529, 530, 531, 532, 537,
	544, 563, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 551, 539, 0, 0, 495, 554, 468, 485, 562,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 541, 511, 553,
	155, 0, 473, 528, 224, 560, 158, 517, 0, 232,
	172, 0, 0, 0, 499, 543, 506, 536, 494, 527,
	458, 516, 555, 484, 524, 556, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 550, 481, 523, 525, 564, 447, 518,
	0, 451, 454, 561, 546, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 533, 492, 0, 0,
	0, 0, 0, 0, 1002, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 534, 0, 445, 135, 538,
	545, 493, 293, 549, 491, 490, 552, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 542, 471, 480, 120, 478, 213, 191, 253, 514,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 233, 256, 275, 114, 466, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 462, 465, 460, 461,
	509, 510, 557, 558, 559, 535, 456, 0, 463, 464,
	0, 540, 547, 548, 513, 97, 106, 157, 272, 206,
	131, 257, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	529, 530, 531, 532, 537, 544, 563, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 551, 539, 0, 0,
	495, 554, 468, 485, 562, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 541, 511, 553, 155, 0, 473, 528, 224,
	560, 158, 517, 0, 232, 172, 0, 0, 0, 499,
	543, 506, 536, 494, 527, 458, 516, 555, 484, 524,
	556, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 550, 481,
	523, 525, 564, 447, 518, 0, 451, 454, 561, 546,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 533, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	534, 0, 445, 135, 538, 545, 493, 293, 549, 491,
	490, 552, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 542, 471, 480, 120,
	478, 213, 191, 253, 514, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 233,
	256, 275, 114, 466, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 462, 465, 460, 461, 509, 510, 557, 558, 559,
	535, 456, 0, 463, 464, 0, 540, 547, 548, 513,
	97, 106, 157, 272, 206, 131, 257, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 529, 530, 531, 532, 537,
	544, 563, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 551, 539, 0, 0, 495, 554, 468, 485, 562,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 541, 511, 553,
	155, 0, 473, 528, 224, 560, 158, 517, 0, 232,
	172, 0, 0, 0, 499, 543, 506, 536, 494, 527,
	458, 516, 555, 484, 524, 556, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 550, 481, 523, 525, 564, 447, 518,
	0, 451, 454, 561, 546, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 533, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 534, 0, 445, 135, 538,
	545, 493, 293, 549, 491, 490, 552, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 542, 471, 480, 120, 478, 213, 191, 253, 514,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	443, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 233, 256, 275, 114, 466, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 444, 442, 437, 436, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 462, 465, 460, 461,
	509, 510, 557, 558, 559, 535, 456, 0, 463, 464,
	0, 540, 547, 548, 513, 97, 106, 157, 272, 206,
	131, 257, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	529, 530, 531, 532, 537, 544, 563, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 551, 539, 0, 0,
	495, 554, 468, 485, 562, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 541, 511, 553, 155, 0, 473, 528, 224,
	560, 158, 517, 0, 232, 172, 0, 0, 0, 499,
	543, 506, 536, 494, 527, 458, 516, 555, 484, 524,
	556, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 550, 481,
	523, 525, 564, 447, 518, 0, 451, 454, 561, 546,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 533, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	534, 0, 445, 135, 538, 545, 493, 293, 549, 491,
	490, 552, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 542, 471, 480, 120,
	478, 213, 191, 253, 514, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 777,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 443, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 233,
	256, 275, 114, 466, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 444, 442,
	437, 436, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 462, 465, 460, 461, 509, 510, 557, 558, 559,
	535, 456, 0, 463, 464, 0, 540, 547, 548, 513,
	97, 106, 157, 272, 206, 131, 257, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 529, 530, 531, 532, 537,
	544, 563, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 551, 539, 0, 0, 495, 554, 468, 485, 562,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 541, 511, 553,
	155, 0, 473, 528, 224, 560, 158, 517, 0, 232,
	172, 0, 0, 0, 499, 543, 506, 536, 494, 527,
	458, 516, 555, 484, 524, 556, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 550, 481, 523, 525, 564, 447, 518,
	0, 451, 454, 561, 546, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 533, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 534, 0, 445, 135, 538,
	545, 493, 293, 549, 491, 490, 552, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 542, 471, 480, 120, 478, 213, 191, 253, 514,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 434, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	443, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 233, 256, 275, 114, 466, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 444, 442, 437, 436, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 462, 465, 460, 461,
	509, 510, 557, 558, 559, 535, 456, 0, 463, 464,
	0, 540, 547, 548, 513, 97, 106, 157, 272, 206,
	131, 257, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	529, 530, 531, 532, 537, 544, 563, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 940,
	0, 342, 0, 0, 0, 126, 0, 341, 0, 0,
	0, 155, 0, 941, 0, 224, 385, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 363, 362, 365, 366, 367, 368, 0,
	0, 116, 364, 369, 370, 371, 0, 0, 0, 0,
	339, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 425, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	398, 0, 0, 293, 0, 0, 396, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	0, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 386, 397, 392,
	393, 390, 391, 389, 388, 387, 400, 378, 379, 380,
	381, 383, 0, 394, 395, 382, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 138, 251, 265, 184, 0, 0,
	0, 0, 342, 0, 0, 0, 126, 0, 341, 0,
	0, 0, 155, 0, 0, 0, 224, 385, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 376, 377,
	0, 0, 0, 0, 0, 0, 1047, 0, 59, 0,
	0, 94, 95, 96, 363, 362, 365, 366, 367, 368,
	0, 0, 116, 364, 369, 370, 371, 1048, 0, 0,
	0, 339, 356, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	399, 0, 355, 0, 0, 348, 349, 351, 350, 352,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 398, 0, 0, 293, 0, 0, 396, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 0, 342, 0, 0, 0, 126, 0, 341,
	0, 0, 0, 155, 0, 0, 0, 224, 385, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 413, 94, 95, 96, 363, 362, 365, 366, 367,
	368, 0, 0, 116, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 398, 0, 0, 293, 0, 0, 396, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 342, 0, 0, 0, 126, 0,
	341, 0, 0, 0, 155, 0, 0, 0, 224, 385,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 363, 362, 365, 366,
	367, 368, 0, 0, 116, 364, 369, 370, 371, 0,
	0, 0, 0, 339, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 425, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 398, 0, 0, 293, 0, 0, 396,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 0, 342, 0, 0, 0, 126,
	0, 341, 0, 0, 0, 155, 0, 0, 0, 224,
	385, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 363, 958, 365,
	366, 367, 368, 0, 0, 116, 364, 369, 370, 371,
	0, 0, 0, 0, 339, 356, 0, 384, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 425,
	0, 0, 0, 399, 0, 355, 0, 0, 348, 349,
	351, 350, 352, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 398, 0, 0, 293, 0, 0,
	396, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 386, 397, 392, 393, 390, 391, 389, 388, 387,
	400, 378, 379, 380, 381, 383, 0, 394, 395, 382,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 184, 0, 0, 0, 0, 342, 0, 0, 0,
	126, 0, 341, 0, 0, 0, 155, 0, 0, 0,
	224, 385, 158, 0, 0, 232, 172, 0, 0, 0,
	0, 0, 376, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 363, 955,
	365, 366, 367, 368, 0, 0, 116, 364, 369, 370,
	371, 0, 0, 0, 0, 339, 356, 0, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 354,
	425, 0, 0, 0, 399, 0, 355, 0, 0, 348,
	349, 351, 350, 352, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 398, 0, 0, 293, 0,
	0, 396, 0, 203, 0, 236, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 253, 0, 193, 212, 159, 242,
	204, 252, 262, 263, 239, 260, 271, 229, 101, 238,
	250, 117, 223, 0, 0, 0, 103, 248, 235, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 245,
	246, 121, 274, 109, 259, 105, 110, 258, 177, 241,
	249, 171, 164, 104, 247, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	233, 256, 275, 114, 0, 240, 267, 270, 0, 205,
	115, 134, 128, 200, 132, 156, 266, 268, 269, 176,
	111, 144, 230, 152, 160, 208, 273, 190, 214, 118,
	255, 231, 386, 397, 392, 393, 390, 391, 389, 388,
	387, 400, 378, 379, 380, 381, 383, 0, 394, 395,
	382, 97, 106, 157, 272, 206, 131, 257, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 264, 138,
	251, 265, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	342, 0, 0, 0, 126, 0, 341, 0, 0, 0,
	155, 0, 0, 0, 224, 385, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 94,
	95, 96, 363, 362, 365, 366, 367, 368, 0, 0,
	116, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 398,
	0, 0, 293, 0, 0, 396, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 0,
	0, 342, 0, 0, 0, 126, 0, 341, 0, 0,
	0, 155, 0, 0, 0, 224, 385, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 363, 362, 365, 366, 367, 368, 0,
	0, 116, 364, 369, 370, 371, 0, 0, 0, 0,
	339, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	398, 0, 0, 293, 0, 0, 396, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	0, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 386, 397, 392,
	393, 390, 391, 389, 388, 387, 400, 378, 379, 380,
	381, 383, 0, 394, 395, 382, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 138, 251, 265, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 224, 385, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 376, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 363, 362, 365, 366, 367, 368,
	0, 0, 116, 364, 369, 370, 371, 0, 0, 0,
	0, 0, 356, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	399, 0, 355, 0, 0, 348, 349, 351, 350, 352,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 398, 0, 0, 293, 0, 0, 396, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 1628, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 385, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 413, 94, 95, 96, 363, 362, 365, 366, 367,
	368, 0, 0, 116, 364, 369, 370, 371, 0, 0,
	0, 0, 0, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 398, 0, 0, 293, 0, 0, 396, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 224, 385,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 363, 362, 365, 366,
	367, 368, 0, 0, 116, 364, 369, 370, 371, 0,
	0, 0, 0, 0, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 398, 0, 0, 293, 0, 0, 396,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 224,
	0, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 658, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 293, 0, 0,
	0, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 184, 0, 0, 0, 754, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	224, 0, 158, 0, 0, 232, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 756,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 648, 649, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 293, 0,
	0, 0, 0, 203, 0, 236, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 253, 0, 193, 212, 159, 242,
	204, 252, 262, 263, 239, 260, 271, 229, 101, 238,
	250, 117, 223, 0, 0, 0, 103, 248, 235, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 245,
	246, 121, 274, 109, 259, 105, 110, 258, 177, 241,
	249, 171, 164, 104, 247, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	233, 256, 275, 114, 0, 240, 267, 270, 0, 205,
	115, 134, 128, 200, 132, 156, 266, 268, 269, 176,
	111, 144, 230, 152, 160, 208, 273, 190, 214, 118,
	255, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 272, 206, 131, 257, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 264, 138,
	251, 265, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 224, 0, 158, 0, 0, 232, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 88, 89, 0, 85,
	0, 0, 0, 90, 203, 0, 236, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 253, 0, 193, 212, 159,
	242, 204, 252, 262, 263, 239, 260, 271, 229, 101,
	238, 250, 117, 223, 0, 0, 0, 103, 248, 235,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	245, 246, 121, 274, 109, 259, 105, 110, 258, 177,
	241, 249, 171, 164, 104, 247, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 233, 256, 275, 114, 0, 240, 267, 270, 0,
	205, 115, 134, 128, 200, 132, 156, 266, 268, 269,
	176, 111, 144, 230, 152, 160, 208, 273, 190, 214,
	118, 255, 231, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 272, 206, 131, 257, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 264,
	138, 251, 265, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 1070, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 1069,
	293, 0, 0, 0, 1066, 1064, 0, 1065, 139, 154,
	112, 151, 98, 108, 1062, 1068, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 184, 0, 0, 0, 1029, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 224, 0, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 1031, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 293, 0, 0, 0, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 0, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 293, 0, 0, 0, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 1029, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 224, 0,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 1031, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 293, 0, 0, 0,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 1027, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 224,
	0, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 994,
	0, 0, 995, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 293, 0, 0,
	0, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 788, 0, 0, 0, 155, 0, 0, 0,
	224, 0, 158, 0, 0, 232, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 787,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 293, 0,
	0, 0, 0, 203, 0, 236, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 253, 0, 193, 212, 159, 242,
	204, 252, 262, 263, 239, 260, 271, 229, 101, 238,
	250, 117, 223, 0, 0, 0, 103, 248, 235, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 245,
	246, 121, 274, 109, 259, 105, 110, 258, 177, 241,
	249, 171, 164, 104, 247, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	233, 256, 275, 114, 0, 240, 267, 270, 0, 205,
	115, 134, 128, 200, 132, 156, 266, 268, 269, 176,
	111, 144, 230, 152, 160, 208, 273, 190, 214, 118,
	255, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 272, 206, 131, 257, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 264, 138,
	251, 265, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 224, 0, 158, 0, 0, 232, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 293,
	0, 0, 0, 0, 203, 0, 236, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 253, 0, 193, 212, 159,
	242, 204, 252, 262, 263, 239, 260, 271, 229, 101,
	238, 250, 117, 223, 0, 0, 0, 103, 248, 235,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	245, 246, 121, 274, 109, 259, 105, 110, 258, 177,
	241, 249, 171, 164, 104, 247, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 233, 256, 275, 114, 0, 240, 267, 270, 0,
	205, 115, 134, 128, 200, 132, 156, 266, 268, 269,
	176, 111, 144, 230, 152, 160, 208, 273, 190, 214,
	118, 255, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 272, 206, 131, 257, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 264,
	138, 251, 265, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	293, 0, 0, 0, 0, 203, 0, 236, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 224, 0, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 1031, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 293, 0, 0, 0, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 224, 0, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 756, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 293, 0, 0, 0, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 770, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	293, 0, 0, 0, 0, 203, 0, 236, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 184, 0, 0, 0, 0, 0,
	0, 0, 760, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 224, 0, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 293, 0, 0, 0, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 224, 0, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 637, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 293, 0, 0, 0, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 224, 0, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 293, 0, 0, 0, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	0, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 138, 251, 265, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 224, 0, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	135, 0, 0, 0, 293, 0, 0, 0, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 329, 251, 265, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 0, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 288, 0, 293, 0, 0, 0, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 224, 0,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 293, 0, 0, 0,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
}
var yyPact = [...]int{

	1688, -1000, -280, 1029, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 973, 793,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 314, 12323, 27,
	150, 21, 17959, 147, 1793, 18310, -1000, 26, -1000, 13,
	18310, 20, 17608, -1000, -1000, -66, -83, -1000, 10217, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 776, 940, 964,
	970, 582, 1011, -1000, 8800, 8800, 113, 113, 113, 7396,
	-1000, -1000, 17257, 18310, 138, 18310, -157, 109, 109, 109,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 140, 18310, 619, 619,
	244, -1000, 18310, 107, 619, 107, 107, 107, 18310, -1000,
	195, -1000, -1000, -1000, 18310, 619, 885, 318, 71, 241,
	241, 241, -1000, 204, -1000, 4841, 37, 4841, -67, 987,
	38, -25, -1000, 318, 4841, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 118, -1000, -1000, 18310, 16906, 142, 307,
	-1000, -1000, -1000, -1000, -1000, -1000, 687, 262, -1000, 10217,
	1788, 612, 612, -1000, -1000, 176, -1000, -1000, 11270, 11270,
	11270, 11270, 11270, 11270, 11270, 11270, 11270, 11270, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 612, 194, -1000, 9866, 612, 612, 612, 612,
	612, 612, 612, 612, 10217, 612, 612, 612, 612, 612,
	612, 612, 612, 612, 612, 612, 612, 612, 612, 612,
	612, -1000, -1000, 973, -1000, 793, -1000, -1000, -1000, 890,
	10217, 10217, 973, -1000, 845, 8800, -1000, -1000, 957, -1000,
	-1000, -1000, -1000, 371, 1008, -1000, 11972, 193, 1007, 16555,
	15144, 16204, 726, 7031, -136, -1000, -1000, -1000, 300, 14442,
	-1000, -1000, -1000, 882, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 685, 18310, -1000, 319, -1000,
	619, 4841, 125, 619, 333, 619, 18310, 18310, 4841, 4841,
	4841, 59, 93, 72, 18310, 725, 117, 18310, 935, 783,
	18310, 619, 619, -1000, 6301, -1000, 4841, 318, -1000, 494,
	10217, 4841, 4841, 4841, 18310, 4841, 4841, -1000, 489, -1000,
	-1000, 341, -1000, -1000, -1000, -1000, -1000, -1000, 4841, 4841,
	-1000, 1006, 317, -1000, -1000, -1000, -1000, 10217, 241, -1000,
	781, -1000, -1000, 19, -1000, -1000, -1000, -1000, -1000, 1029,
	-1000, -1000, -1000, -125, -1000, -1000, 10217, 10217, 10217, 10217,
	492, 247, 11270, 420, 278, 11270, 11270, 11270, 11270, 11270,
	11270, 11270, 11270, 11270, 11270, 11270, 11270, 11270, 11270, 11270,
	595, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 619,
	-1000, 1015, 567, 567, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 11621, 7747, 6301, 582, 682, 973, 8800,
	8800, 10217, 10217, 9502, 9151, 8800, 889, 315, 262, 18310,
	-1000, -1000, 10919, -1000, -1000, -1000, -1000, -1000, 500, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18310, 18310, 8800, 8800,
	8800, 8800, 8800, 964, 582, 957, 927, 1022, 229, 547,
	724, -1000, 465, 964, 14091, 745, -1000, 957, -1000, -1000,
	-1000, 18310, -1000, -1000, 15846, -1000, -1000, 5936, 18310, 70,
	18310, -1000, 723, 849, -1000, -1000, -1000, 937, 13389, 13740,
	18310, 706, 681, -1000, -1000, 189, 6666, -136, -1000, 6666,
	702, -1000, -112, -116, 8098, 197, -1000, -1000, -1000, -1000,
	4476, 12674, 577, 329, -60, -1000, -1000, -1000, 741, -1000,
	741, 741, 741, 741, -15, -15, -15, -15, -1000, -1000,
	-1000, -1000, -1000, 760, 759, -1000, 741, 741, 741, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 757, 757, 757,
	747, 747, 762, -1000, 18310, 4841, 933, 4841, -1000, 129,
	-1000, -1000, -1000, 18310, 18310, 18310, 18310, 18310, 159, 18310,
	18310, 715, -1000, 18310, 4841, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 262, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18310, -1000, -1000, -1000, -1000, 18310, 318, 18310, 18310,
	262, -1000, 18310, 18310, -1000, -1000, -1000, -1000, -1000, 262,
	247, 339, 282, -1000, -1000, 546, -1000, -1000, 2079, -1000,
	-1000, -1000, -1000, 420, 11270, 11270, 11270, 110, 2079, 1979,
	505, 343, 208, 284, 284, 209, 209, 209, 209, 209,
	354, 354, -1000, -1000, -1000, 500, -1000, -1000, -1000, 500,
	8800, 8800, 714, 612, 188, -1000, 776, -1000, -1000, 964,
	670, 670, 326, 575, 285, 993, 670, 279, 989, 670,
	670, 8800, -1000, -1000, 352, -1000, 10217, 500, -1000, 187,
	-1000, 826, 712, 705, 670, 500, 500, 670, 670, 890,
	-1000, -1000, 870, -1000, 842, 10217, 10217, 10217, -1000, -1000,
	-1000, 890, 968, -1000, 856, 853, 981, 8800, 15144, 957,
	-1000, -1000, -1000, 181, 981, 733, 612, -1000, 18310, 15144,
	15144, 15144, 15144, 15144, -1000, 822, 821, -1000, 818, 814,
	833, 18310, -1000, 674, 582, 13389, 211, 612, -1000, 15495,
	-1000, -1000, 70, 618, 15144, 18310, -1000, -1000, 15144, 18310,
	5571, -1000, 702, -136, -95, -1000, -1000, -1000, -1000, 262,
	-1000, 611, 701, 4111, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 756, 619, -1000, 920, 236, 212, 619, 919, -1000,
	-1000, -1000, 913, -1000, 325, -62, -1000, -1000, 421, -15,
	-15, -1000, -1000, 197, 878, 197, 197, 197, 487, 487,
	-1000, -1000, -1000, -1000, 411, -1000, -1000, -1000, 408, -1000,
	780, 18310, 4841, -1000, -1000, -1000, -1000, 409, 409, 230,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 69, 746, -1000, -1000, -1000, -1000, 4, 58, 115,
	-1000, 4841, -1000, 317, 317, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 110, 2079, 1867, -1000, 11270, 11270,
	-1000, -1000, 670, 670, 8800, 6301, 973, 890, -1000, -1000,
	108, 595, 108, 11270, 11270, -1000, 11270, 11270, -1000, -169,
	707, 286, -1000, 10217, 502, -1000, 6301, -1000, 11270, 11270,
	-1000, -1000, -1000, -1000, -1000, -1000, 858, 836, 262, 262,
	-1000, -1000, 18310, -1000, -1000, -1000, -1000, 977, 10217, -1000,
	699, -1000, 5206, 964, 779, 18310, 612, 1029, 13389, 18310,
	728, -1000, 297, 849, 753, 777, 637, -1000, -1000, -1000,
	-1000, 815, -1000, 799, -1000, -1000, -1000, -1000, -1000, 582,
	-1000, 137, 136, 135, 18310, -1000, 981, 15144, 588, -1000,
	588, -1000, 175, -1000, -1000, -1000, -127, -144, -1000, -1000,
	-1000, 4476, -1000, 4476, 18310, 86, -1000, 619, 619, -1000,
	-1000, -1000, 749, 775, 11270, -1000, -1000, -1000, 569, 197,
	197, -1000, 256, -1000, -1000, -1000, 668, -1000, 651, 697,
	647, 18310, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 18310, -1000, -1000, -1000, -1000, -1000, 18310, -177, 619,
	18310, 18310, 18310, 18310, -1000, 318, 318, -1000, 11270, 2079,
	2079, -1000, -1000, 500, -1000, 964, -1000, 500, 741, 741,
	-1000, 741, 747, -1000, 741, 6, 741, 2, 500, 500,
	1943, 1680, 1626, 1041, 612, -164, -1000, 262, 10217, -1000,
	1220, 865, 481, -1000, -1000, 975, 967, 262, -1000, -1000,
	-1000, 924, 695, 606, -1000, -1000, 8449, 645, 169, 643,
	-1000, 973, 18310, 10217, -1000, -1000, 10217, 742, -1000, 10217,
	-1000, -1000, -1000, 973, 612, 612, 612, 643, 973, 588,
	-1000, -1000, 218, -1000, -1000, -1000, 4111, -1000, 641, -1000,
	741, -1000, 919, -1000, -1000, 18310, -38, 1018, 2079, -1000,
	-1000, -1000, -1000, -1000, -15, 458, -15, 407, -1000, 403,
	4841, -1000, -1000, -1000, -1000, 926, -1000, 6301, -1000, -1000,
	734, 754, -1000, -1000, -1000, -1000, 2079, -1000, 890, -1000,
	-1000, 134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11270, 11270, 11270, 11270, 11270, 964, 443, 262, 11270, 11270,
	-1000, -1000, 10217, 10217, 918, -1000, 612, -1000, 744, 18310,
	18310, -1000, 18310, 964, -1000, 262, 262, 18310, 262, 14793,
	18310, 18310, 13025, 964, -1000, 190, 18310, -1000, 639, -1000,
	221, -1000, -135, 197, -1000, 197, 534, 532, -1000, 612,
	688, -1000, 295, 18310, 18310, -1000, -1000, -1000, 826, 826,
	826, 826, 74, 500, -1000, 826, 826, 262, 687, 1017,
	-1000, 612, 1029, 163, -1000, -1000, -1000, 608, 591, -1000,
	591, 591, 211, -1000, 190, -1000, 619, 290, 434, -1000,
	82, 18310, 361, 917, -1000, 915, -1000, -1000, -1000, -1000,
	-1000, 68, 6301, 4476, 585, -1000, -1000, -1000, -1000, -1000,
	500, 54, -181, -1000, -1000, -1000, 18310, 606, 18310, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 390, -1000, -1000, 18310,
	-1000, -1000, 431, -1000, -1000, 564, -1000, 18310, -1000, -1000,
	746, -1000, 832, -174, -186, 600, -1000, -1000, 730, -1000,
	-1000, 68, 852, -177, -1000, 831, -1000, 18310, -1000, 65,
	-1000, -178, 503, 57, -182, 767, 612, -187, 765, -1000,
	997, 10568, -1000, -1000, 1013, 205, 205, 826, 500, -1000,
	-1000, -1000, 94, 393, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1286, 1284, 19, 69, 70, 1280, 1279, 1276, 1274,
	100, 99, 93, 1272, 1270, 1269, 1268, 1266, 1261, 1260,
	1253, 1251, 1248, 1247, 1246, 1245, 1244, 1243, 1242, 1241,
	1236, 1231, 1230, 87, 1229, 1228, 1225, 1224, 77, 1223,
	1219, 1217, 1216, 1213, 54, 173, 67, 68, 1208, 62,
	1795, 1206, 47, 66, 61, 1205, 40, 1202, 1198, 78,
	1197, 1196, 60, 1192, 1191, 63, 1189, 55, 1188, 11,
	26, 1187, 1185, 1184, 1181, 95, 1935, 1180, 1178, 9,
	1176, 1174, 108, 1173, 71, 22, 12, 27, 18, 1171,
	72, 1170, 6, 1169, 64, 1168, 1167, 1166, 1165, 15,
	1164, 65, 1163, 74, 1161, 17, 1160, 42, 58, 36,
	28, 5, 1159, 1155, 21, 82, 57, 73, 1142, 1139,
	1138, 586, 1137, 48, 1136, 1134, 1133, 52, 88, 96,
	468, 1131, 1130, 1129, 1128, 1127, 37, 912, 1676, 23,
	85, 1126, 1125, 1124, 2606, 38, 59, 13, 1118, 1116,
	1113, 34, 118, 32, 443, 1112, 41, 1111, 1110, 1109,
	1108, 1107, 1106, 1100, 25, 1098, 1096, 1094, 24, 33,
	75, 30, 1093, 1092, 1090, 1088, 50, 76, 1087, 1085,
	56, 1084, 1083, 29, 1080, 1074, 1071, 1070, 1069, 31,
	10, 1065, 14, 1059, 8, 1055, 35, 1051, 1, 1050,
	4, 1049, 3, 0, 1048, 2, 49, 7, 1044, 16,
	1043, 1042, 1038, 1232, 1177, 79, 1037, 94,
}
var yyR1 = [...]int{

	0, 211, 212, 212, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	203, 203, 203, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 37, 37, 11,
	12, 12, 12, 12, 215, 215, 59, 59, 60, 60,
	108, 108, 13, 14, 14, 117, 117, 116, 116, 116,
	118, 118, 118, 118, 154, 154, 15, 15, 15, 15,
	15, 15, 15, 205, 205, 204, 202, 202, 201, 201,
	200, 22, 185, 187, 187, 186, 186, 186, 186, 177,
	157, 157, 157, 157, 160, 160, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 159, 159, 159, 159, 159,
	161, 161, 161, 161, 161, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 176, 176,
	164, 164, 170, 170, 171, 171, 171, 173, 173, 174,
	174, 131, 131, 131, 166, 166, 167, 167, 172, 172,
	168, 168, 168, 169, 169, 169, 175, 175, 175, 175,
	175, 165, 165, 178, 178, 195, 195, 194, 194, 194,
	184, 184, 191, 191, 191, 191, 191, 181, 181, 181,
	182, 182, 180, 180, 183, 183, 193, 193, 192, 179,
	179, 196, 196, 196, 196, 208, 209, 207, 207, 207,
	207, 207, 188, 188, 188, 189, 189, 189, 190, 190,
	190, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 199, 197, 197, 198, 198, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 124, 124,
	210, 210, 126, 126, 122, 122, 125, 125, 123, 123,
	123, 127, 127, 127, 128, 128, 155, 155, 155, 26,
	26, 28, 28, 29, 30, 30, 149, 149, 150, 150,
	31, 32, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 7, 7, 7, 7, 35, 35, 35, 6, 6,
	27, 27, 27, 27, 20, 216, 33, 34, 34, 38,
	38, 38, 40, 40, 40, 43, 43, 43, 46, 46,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 49,
	49, 45, 45, 47, 47, 47, 47, 141, 141, 141,
	140, 140, 51, 51, 52, 52, 53, 53, 54, 54,
	54, 91, 68, 68, 107, 107, 109, 109, 55, 55,
	55, 55, 56, 56, 57, 57, 58, 58, 148, 148,
	147, 147, 147, 146, 146, 61, 61, 61, 63, 62,
	62, 62, 62, 64, 64, 66, 66, 65, 65, 67,
	69, 69, 69, 69, 69, 70, 70, 50, 50, 50,
	50, 50, 50, 50, 50, 120, 120, 72, 72, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 83, 83, 83, 73, 73, 73, 73, 73,
	73, 73, 44, 44, 84, 84, 84, 90, 85, 85,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 80, 80, 80, 80, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 217, 217, 82,
	81, 81, 81, 81, 81, 81, 81, 42, 42, 42,
	42, 42, 153, 153, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 95, 95, 41,
	41, 93, 93, 94, 96, 96, 92, 92, 92, 75,
	75, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 102,
	102, 102, 103, 103, 103, 103, 105, 105, 105, 104,
	104, 74, 74, 74, 74, 106, 106, 106, 106, 110,
	110, 86, 86, 88, 88, 87, 89, 111, 111, 114,
	112, 112, 115, 115, 115, 115, 115, 113, 113, 113,
	143, 143, 143, 119, 119, 129, 129, 130, 130, 121,
	121, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 134, 134, 135, 135, 135, 142,
	142, 138, 138, 139, 139, 144, 144, 145, 145, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 213,
	214, 151, 152, 152, 152,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 5, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	9, 8, 7, 7, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 0,
	4, 2, 1, 5, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -211, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -213,
	6, 7, 8, -37, 10, 11, 31, -22, 126, 127,
	129, 128, 162, 130, 155, 56, 176, 177, 179, 180,
	181, 182, -39, 160, 161, 32, 33, 132, 35, 60,
	9, 269, 157, 156, 26, -212, 371, -38, 5, -99,
	16, -3, -33, -216, -33, -33, -33, -33, -33, -33,
	-185, -187, 60, 99, -135, 136, 80, 261, 133, 134,
	140, -138, -203, -137, 63, 64, 65, 279, 148, 311,
	312, 176, 190, 184, 211, 203, 280, 313, 149, 201,
	204, 248, 146, 314, 231, 238, 74, 179, 257, 315,
	158, 199, 195, 316, 288, 193, 28, 317, 240, 216,
	318, 284, 242, 194, 239, 132, 319, 151, 367, 144,
	320, 217, 221, 321, 249, 322, 323, 324, 188, 189,
	325, 147, 251, 215, 145, 34, 243, 281, 40, 166,
	252, 219, 326, 214, 210, 327, 328, 329, 330, 213,
	187, 209, 44, 223, 222, 224, 247, 206, 331, 332,
	333, 152, 334, 196, 19, 335, 336, 337, 338, 339,
	255, 161, 340, 164, 341, 342, 343, 344, 345, 346,
	241, 218, 220, 141, 168, 237, 283, 347, 253, 192,
	348, 153, 165, 160, 256, 154, 349, 350, 351, 352,
	353, 354, 355, 180, 38, 356, 357, 358, 359, 175,
	250, 259, 43, 228, 360, 186, 143, 361, 177, 172,
	233, 207, 167, 362, 363, 197, 198, 212, 185, 208,
	178, 368, 169, 162, 364, 258, 229, 285, 205, 202,
	173, 365, 170, 171, 366, 369, 244, 234, 245, 246,
	235, 174, 282, 254, 200, 230, -121, 136, 261, 133,
	235, 138, 134, 134, 135, 136, 261, 133, 134, -65,
	-144, -203, -137, 136, 134, 117, 204, 248, 126, 232,
	243, 244, 240, -126, 241, 168, -155, 134, -122, 231,
	234, 235, 174, -210, -203, 242, 250, 249, 236, 246,
	245, -144, 178, -149, 183, -138, 181, -65, -36, 367,
	130, -151, -151, 233, 233, -151, -85, -50, -71, 83,
	-76, 30, 24, -75, -72, -92, -89, -90, 117, 118,
	120, 119, 121, 106, 107, 114, 84, 122, -80, -78,
	-79, -81, 67, 66, 75, 68, 69, 70, 71, 76,
	77, 78, -138, -144, -87, -213, 50, 51, 270, 271,
	272, 273, 278, 274, 86, 39, 260, 268, 267, 266,
	264, 265, 262, 263, 276, 277, 139, 261, 133, 112,
	269, -203, -137, -5, -4, -213, 6, 21, 22, -103,
	18, 17, -214, 62, -40, -48, 45, 46, -49, 22,
	36, 49, 47, -34, -47, 108, -50, -144, -47, -121,
	-121, -121, -112, -154, 178, -115, 250, 249, -139, -113,
	-138, -136, 248, 204, 247, 131, 286, 82, 23, 25,
	226, 85, 117, 17, 86, 116, 270, 126, 54, 287,
	262, 263, 260, 272, 273, 261, 232, 30, 11, 289,
	26, 156, 22, 36, 110, 128, 89, 90, 159, 24,
	157, 78, 292, 20, 57, 12, 14, 293, 294, 15,
	139, 138, 101, 135, 52, 9, 122, 27, 98, 48,
	295, 29, 296, 297, 298, 299, 50, 99, 18, 264,
	265, 32, 300, 278, 163, 112, 55, 41, 83, 301,
	302, 76, 303, 79, 58, 80, 16, 53, 37, 304,
	305, 306, 307, 100, 129, 269, 51, 308, 133, 6,
	275, 31, 155, 49, 309, 134, 88, 276, 277, 137,
	77, 5, 140, 33, 10, 56, 59, 266, 267, 268,
	39, 87, 13, 310, 81, -186, 99, -177, -138, -65,
	135, -65, 269, -130, 139, -130, -130, 134, -65, -203,
	-203, 126, 128, 131, 58, -23, -65, -129, 139, -203,
	-129, -129, -129, -65, 123, -65, -203, 31, -127, 99,
	13, 261, -203, 168, 134, 169, 136, -128, 99, -128,
	-128, -181, 135, 34, 147, -152, -213, -139, 172, 173,
	-152, -125, -124, 238, 239, 233, 237, 13, 173, 233,
	171, -127, -152, 137, -138, -35, -138, 67, -7, -3,
	-11, -10, -12, 91, -151, -151, 61, 82, 80, 81,
	98, -50, -73, 101, 83, 99, 100, 85, 103, 102,
	113, 106, 107, 108, 109, 110, 111, 112, 104, 105,
	116, 91, 92, 93, 94, 95, 96, 97, -120, -213,
	-90, -213, 124, 125, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -213, 123, -2, -85, -4, -213,
	-213, -213, -213, -213, -213, -213, -213, -95, -50, -213,
	-217, -82, -213, -217, -82, -217, -82, -217, -213, -217,
	-82, -217, -82, -217, -217, -82, -213, -213, -213, -213,
	-213, -213, -213, -99, -3, -33, -105, 20, 32, -50,
	-100, -101, -50, -99, 41, -45, -47, -49, 45, 46,
	73, 12, -141, -140, 23, -138, 67, 123, 12, -66,
	27, -65, -52, -53, -54, -55, -68, -91, -213, -65,
	12, -59, -60, -65, -67, -144, 61, 178, -115, -154,
	-117, -116, 251, 253, 91, -143, -138, 67, 30, 31,
	62, 61, -65, -157, -160, -162, -161, -163, -158, -159,
	201, 202, 117, 205, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 31, 158, 197, 198, 199, 200,
	217, 218, 219, 220, 221, 222, 223, 224, 184, 203,
	280, 185, 186, 187, 188, 189, 190, 192, 193, 194,
	195, 196, -203, -152, 136, -203, 83, -203, -65, -65,
	-152, -152, -152, 170, 170, 134, 134, 175, -65, 61,
	137, -59, 24, 58, -65, -203, -203, -145, -144, -136,
	-152, -127, 67, -50, -152, -152, -152, -65, -152, -152,
	67, -182, 12, 101, -152, -152, 12, -123, 12, 101,
	-50, -128, 58, -150, 181, 215, 368, 369, 370, -50,
	-50, -50, -50, -83, 76, 83, 77, 78, -76, -84,
	-87, -90, 72, 101, 99, 100, 85, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -153, -203, 67, -203, -75, -75, -138, -46,
	22, 36, -45, -139, -145, -136, -38, -214, -214, -99,
	-45, -45, -50, -50, -92, 67, -45, -92, 67, -45,
	-45, -43, 22, 36, -93, -94, 87, -92, -138, -144,
	-214, -76, -138, -138, -45, -46, -46, -45, -45, -103,
	-214, -104, 27, 10, 101, 61, 19, 61, -102, 25,
	26, -103, -77, -138, 68, 71, -51, 61, 12, -49,
	-65, -140, 108, -145, -65, -108, 164, -65, 31, 61,
	-61, -63, -62, -64, 48, 52, 54, 49, 50, 51,
	55, -148, 23, -52, -3, -213, -147, 164, -146, 23,
	-144, 67, -65, -59, -215, 61, 12, 59, -215, 61,
	123, -115, -117, 61, 252, 254, 255, 58, 79, -50,
	-169, 116, -188, -189, -190, -139, 67, 68, -177, -178,
	-179, -191, 150, -196, 141, 143, 140, -180, 151, 135,
	29, 62, -131, 76, 83, -173, 229, -164, 60, -164,
	-164, -164, -164, -168, 204, -168, -168, -168, 60, 60,
	-164, -164, -164, -170, 60, -170, -170, -171, 60, -171,
	-142, 59, -65, -152, 24, -152, -132, 131, 128, 129,
	-199, 127, 226, 204, 74, 30, 16, 270, 164, 285,
	-203, 165, -65, -65, -65, -65, -65, 131, 128, -65,
	-65, -65, -152, -65, -65, -127, -144, -144, -65, -138,
	76, 77, 78, -84, -76, -76, -76, -44, 159, 82,
	-214, -214, -45, -45, -213, 123, -5, -103, -214, -214,
	61, 59, 23, 12, 12, -214, 12, 12, -214, -214,
	-45, -96, -94, 89, -50, -214, 123, -214, 61, 61,
	-214, -214, -214, -214, -214, -105, 37, 43, -50, -50,
	-101, -105, -119, 20, 12, 39, 39, -70, 13, -47,
	-52, -49, 123, -70, -74, 31, 39, -3, -213, -213,
	-111, -114, -92, -53, -54, -54, -53, -54, 48, 48,
	48, 53, 48, 53, 48, -62, -144, -214, -214, -3,
	-69, 56, 138, 57, -213, -146, -108, 59, -52, -65,
	-52, -67, -144, 108, -116, -118, 256, 253, 259, -203,
	67, 61, -190, 91, 60, -203, 29, -180, -180, -183,
	-203, -183, 29, -166, 30, 76, -174, 230, 68, -168,
	-168, -169, 31, -169, -169, -169, -176, 67, -176, 68,
	68, 58, -138, -152, -151, -206, 146, 142, 150, 151,
	144, 63, 64, 65, 135, 29, 141, 143, 164, 140,
	-206, -133, -134, 137, 23, 135, 29, 164, -205, 59,
	170, 226, 170, 137, -152, -123, -123, -44, 82, -76,
	-76, -214, -214, -46, -139, -99, -105, -156, 117, 201,
	158, 199, 195, 215, 206, 228, 197, 229, -153, -156,
	-76, -76, -76, -76, 279, -99, 90, -50, 88, -139,
	-76, -76, 38, 44, -65, -97, 14, -50, 108, -103,
	-110, 58, -111, -86, -88, -87, -213, -106, -138, -109,
	-138, -70, 61, 91, -57, -56, 58, 59, -58, 58,
	-56, 48, 48, -214, 135, 135, 135, -109, -70, -52,
	-70, -70, 123, 253, 257, 258, -189, -190, -193, -192,
	-138, -196, 151, -183, -183, 60, -167, 58, -76, 62,
	-169, -169, -203, 117, 62, 61, 62, 61, 62, 61,
	-65, -151, -151, -65, -151, -138, -202, 282, -204, -203,
	-138, -138, -138, -65, -127, -127, -76, -214, -103, -214,
	-164, -164, -164, -171, -164, 189, -164, 189, -214, -214,
	20, 20, 20, 20, -213, -41, 275, -50, 61, 61,
	67, -98, 15, 17, 28, -110, 61, -214, -214, 61,
	123, -214, 61, -99, -114, -50, -50, 60, -50, -213,
	-213, -213, -214, -99, -70, 62, 61, -164, -107, -138,
	-172, 226, 10, -168, 67, -168, 68, 68, -152, 27,
	-201, -200, -139, 60, 59, -105, -168, -203, -76, -76,
	-76, -76, -76, -103, 67, -76, -76, -50, -85, 29,
	-88, 39, -3, -138, -138, -138, -103, -107, -107, -214,
	-107, -107, -147, -103, -195, -194, 59, 145, 74, -192,
	62, 61, -175, 141, 29, 140, -79, -169, -169, 62,
	62, -213, 61, 91, -107, -65, -214, -214, -214, -214,
	-42, 101, 282, -214, -214, -214, 10, -86, 123, 62,
	-214, -214, -214, -69, -194, -203, -184, 91, 67, 153,
	-138, -165, 74, 29, 29, -197, -198, 164, -200, -190,
	62, -214, 280, 55, 283, -111, -138, 68, -65, 67,
	-214, 61, -138, -205, 44, 281, 284, 60, -198, 39,
	-202, 44, -107, 166, 282, 62, 167, 283, -208, -209,
	58, -213, 284, -209, 58, 11, 10, -76, 163, -207,
	154, 149, 152, 31, -207, -214, -214, 148, 30, 76,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 624, 0,
	365, 365, 365, 365, 365, 365, 365, 0, 696, 679,
	0, 0, 0, 0, -2, 330, 331, 0, 333, -2,
	0, 0, 342, 1011, 1011, 0, 0, 1011, 0, 1009,
	47, 48, 348, 349, 350, 1, 3, 0, 369, 632,
	0, 0, -2, 367, 0, 0, 679, 679, 679, 0,
	76, 77, 0, 0, 0, 994, 0, 677, 677, 677,
	697, 698, 701, 702, 30, 31, 32, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 0, 0, 0, 0,
	0, 680, 0, 675, 0, 675, 675, 675, 0, 276,
	447, 705, 706, 994, 0, 0, 0, 321, 0, 324,
	324, 324, 290, 0, 292, 1012, 0, 1012, 0, 299,
	0, 0, 305, 321, 1012, 313, 327, 328, 315, 310,
	311, 329, 332, 0, 337, 340, 0, 355, 0, 870,
	347, 360, 361, 1011, 1011, 364, 33, 498, 457, 0,
	463, 465, 0, 500, 501, 502, 503, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 531,
	532, 533, 609, 610, 611, 612, 613, 614, 615, 616,
	467, 468, 606, 0, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 567, 567, 567, 567,
	567, 567, 567, 567, 0, 0, 0, 0, 0, 0,
	0, -2, -2, 624, 43, 0, 365, 370, 371, 636,
	0, 0, 624, 1010, 0, 0, -2, -2, 381, 387,
	388, 389, 390, 366, 0, 393, 397, 0, 0, 0,
	0, 0, 62, 0, 982, 660, -2, -2, 0, 0,
	703, 704, -2, 842, -2, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 0, 0, 95, 0, 93,
	0, 1012, 0, 0, 0, 0, 0, 0, 1012, 1012,
	1012, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 277, 1012, 321, 280, 0,
	0, 1012, 1012, 1012, 0, 1012, 1012, 287, 0, 288,
	289, 0, 197, 198, 199, 293, 1013, 1014, 1012, 1012,
	295, 0, 318, 316, 317, 308, 309, 0, 324, 302,
	303, 306, 307, 338, 341, 358, 356, 357, 359, 351,
	352, 353, 354, 0, 362, 363, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 486, 487, 488, 489, 490, 491, 464, 0,
	478, 0, 0, 0, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 0, 378, 0, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 375, 0, 598, 0,
	551, 559, 0, 552, 560, 553, 561, 554, 0, 555,
	562, 556, 563, 557, 558, 564, 0, 0, 0, 378,
	378, 0, 0, 632, 0, 380, 639, 0, 0, 633,
	625, 626, 629, 632, 0, 402, 391, 382, 385, 386,
	368, 0, 394, 398, 0, 400, 401, 0, 0, 60,
	0, 446, 0, 404, 406, 407, 408, 428, 0, 430,
	0, 0, 0, 56, 58, 447, 0, 982, 666, 0,
	64, 65, 0, 0, 0, 173, 670, 671, 672, 668,
	222, 0, 0, 161, 157, 101, 102, 103, 150, 105,
	150, 150, 150, 150, 170, 170, 170, 170, 133, 134,
	135, 136, 137, 0, 0, 120, 150, 150, 150, 124,
	140, 141, 142, 143, 144, 145, 146, 147, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 152, 152, 152,
	154, 154, 699, 79, 0, 1012, 0, 1012, 91, 0,
	236, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 676, 0, 1012, 273, 274, 448, 707, 708,
	278, 279, 322, 323, 281, 282, 283, 284, 285, 286,
	325, 0, 200, 201, 294, 298, 0, 321, 0, 0,
	300, 301, 0, 0, 339, 343, 344, 345, 346, 499,
	458, 459, 460, 462, 479, 0, 481, 483, 469, 470,
	494, 495, 496, 0, 0, 0, 0, 492, 474, 0,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 519, 582, 583, 0, 517, 518, 529, 0,
	0, 0, 379, 607, 0, -2, 0, 497, 655, 632,
	0, 0, 0, 0, 502, 609, 0, 502, 609, 0,
	0, 0, 376, 377, 604, 601, 0, 0, 606, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	44, 34, 0, 637, 0, 0, 0, 0, 628, 630,
	631, 636, 0, 617, 0, 0, 455, 0, 0, 383,
	40, 399, 395, 0, 455, 0, 0, 445, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 438, 0, 0,
	0, 0, 429, 0, 0, 0, 450, 925, 431, 0,
	433, 434, -2, 0, 0, 0, 54, 55, 0, 0,
	0, 661, 63, 0, 0, 68, 69, 662, 663, 664,
	665, 0, 92, 223, 225, 228, 229, 230, 96, 97,
	98, 0, 0, 210, 935, 968, 204, 204, 869, 202,
	203, 94, 164, 162, 0, 159, 158, 104, 0, 170,
	170, 127, 128, 173, 0, 173, 173, 173, 0, 0,
	121, 122, 123, 115, 0, 116, 117, 118, 0, 119,
	0, 0, 1012, 81, 678, 82, 1011, 0, 0, 691,
	237, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 0, 83, 241, 243, 242, 246, 0, 0, 0,
	268, 1012, 272, 318, 318, 297, 319, 320, 304, 335,
	480, 482, 484, 471, 492, 475, 0, 472, 0, 0,
	466, 534, 0, 0, 378, 0, 624, 636, 538, 539,
	0, 0, 0, 0, 0, 575, 0, 0, 576, 0,
	624, 0, 602, 0, 0, 550, 0, 569, 0, 0,
	570, 571, 572, 573, 574, 36, 0, 0, 634, 635,
	627, 35, 0, 673, 674, 618, 619, 620, 0, 392,
	403, 384, 0, 632, 649, 0, 0, 642, 0, 0,
	455, 657, 0, 405, 424, 426, 0, 421, 436, 437,
	439, 0, 441, 0, 443, 444, 409, 410, 411, 0,
	412, 0, 0, 0, 0, 432, 455, 0, 455, 57,
	455, 59, 0, 449, 66, 67, 0, 0, 73, 174,
	175, 0, 226, 0, 0, 0, 192, 204, 204, 195,
	205, 196, 0, 166, 0, 163, 100, 160, 0, 173,
	173, 129, 0, 130, 131, 132, 0, 148, 0, 0,
	0, 0, 700, 80, 231, 1011, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	1011, 0, 1011, 692, 693, 694, 695, 0, 86, 0,
	0, 0, 0, 0, 271, 321, 321, 473, 0, 493,
	476, 535, 536, 0, 608, 632, 38, 0, 150, 150,
	587, 150, 154, 590, 150, 592, 150, 595, 0, 0,
	0, 0, 0, 0, 0, 599, 549, 605, 0, 607,
	0, 0, 0, 638, 37, 622, 0, 456, 396, 41,
	45, 0, 649, 641, 651, 653, 0, 0, 645, 0,
	416, 624, 0, 0, 418, 425, 0, 0, 419, 0,
	420, 440, 442, -2, 0, 0, 0, 0, 624, 455,
	52, 53, 0, 70, 71, 72, 224, 227, 0, 206,
	150, 209, 0, 193, 194, 0, 168, 0, 165, 151,
	125, 126, 171, 172, 170, 0, 170, 0, 155, 0,
	1012, 232, 233, 234, 235, 0, 240, 0, 84, 85,
	0, 0, 245, 269, 291, 296, 477, 537, 636, 540,
	584, 170, 588, 589, 591, 593, 594, 596, 542, 541,
	0, 0, 0, 0, 0, 632, 0, 603, 0, 0,
	640, 42, 0, 0, 0, 46, 0, 654, 0, 0,
	0, 61, 0, 632, 658, 659, 422, 0, 427, 0,
	0, 0, 430, 632, 51, 184, 0, 208, 0, 414,
	176, 169, 0, 173, 149, 173, 0, 0, 78, 0,
	87, 88, 0, 0, 0, 39, 585, 586, 0, 0,
	0, 0, 577, 0, 600, 0, 0, 623, 621, 0,
	652, 0, 644, 647, 646, 417, 49, 0, 0, 452,
	0, 0, 450, 50, 183, 185, 0, 190, 0, 207,
	0, 0, 181, 0, 178, 180, 167, 138, 139, 153,
	156, 0, 0, 0, 0, 247, 543, 545, 544, 546,
	0, 0, 0, 548, 565, 566, 0, 643, 0, 423,
	451, 453, 454, 413, 186, 187, 0, 191, 189, 0,
	415, 99, 0, 177, 179, 0, 263, 0, 89, 90,
	83, 547, 0, 0, 0, 650, 648, 188, 0, 182,
	262, 0, 0, 86, 578, 0, 581, 0, 264, 0,
	244, 579, 0, 0, 0, 211, 0, 0, 212, 213,
	0, 0, 580, 214, 0, 0, 0, 0, 0, 215,
	217, 218, 0, 0, 216, 265, 266, 219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 111, 103, 3,
	60, 62, 108, 106, 61, 107, 123, 109, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 371,
	92, 91, 93, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 113, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 114,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 104, 105, 110, 112, 115, 116, 117,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:397
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:417
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:423
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.IntoOutfileS3 = yyDollar[5].str
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:463
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:471
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:491
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:508
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:520
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
			yyVAL.insertAction = InsertAct
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:542
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:574
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:584
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:589
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:593
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:619
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:625
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyVAL.characteristic = ReadWrite
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.characteristic = ReadOnly
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:647
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:651
		{
			yyVAL.isolationLevel = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.scope = SessionScope
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.scope = GlobalScope
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:672
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:678
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:683
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:687
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:695
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:700
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:704
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:715
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:737
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:743
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:750
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:761
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:776
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:780
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:786
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1008
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1022
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1057
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1142
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1197
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1230
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1300
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1311
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1315
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1319
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1323
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1335
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1341
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1353
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1357
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1362
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1366
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1396
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1418
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1423
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1530
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1540
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1546
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1550
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1566
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1578
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1662
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1671
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1692
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1697
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1719
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1781
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.str = "extended "
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = "full "
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1829
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1839
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.scope = ImplicitScope
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.scope = SessionScope
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.scope = GlobalScope
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1889
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1898
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1903
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1921
		{
			yyVAL.explainType = EmptyType
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.explainType = JSONType
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.explainType = TreeType
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1933
		{
			yyVAL.explainType = VitessType
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.explainType = TraditionalType
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.explainType = AnalyzeType
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyVAL.statement = &OtherRead{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2024
		{
			setAllowComments(yylex, true)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2034
		{
			yyVAL.bytes2 = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2038
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.unionType = UnionBasic
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.unionType = UnionAll
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.unionType = UnionDistinct
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = SQLCacheStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2070
		{
			yyVAL.boolean = false
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2083
		{
			yyVAL.selectExprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2092
		{
			yyVAL.strs = nil
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2108
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2144
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2167
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2187
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2231
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2235
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2268
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2276
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2288
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2292
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2298
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2303
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2308
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.joinType = NormalJoinType
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2333
		{
			yyVAL.joinType = NormalJoinType
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.joinType = NormalJoinType
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.joinType = StraightJoinType
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2349
		{
			yyVAL.joinType = LeftJoinType
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.joinType = LeftJoinType
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.joinType = RightJoinType
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.joinType = RightJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2406
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2410
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2414
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2418
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2422
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2471
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2485
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2728
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.matchExprOption = NoOption
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2980
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2984
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2988
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3020
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3072
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3092
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3111
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3115
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3173
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3191
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3195
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3211
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3216
		{
			yyVAL.orderDirection = AscOrder
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.orderDirection = AscOrder
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.orderDirection = DescOrder
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3229
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3233
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3237
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3241
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.lock = NoLock
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3250
		{
			yyVAL.lock = ForUpdateLock
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3254
		{
			yyVAL.lock = ShareModeLock
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3259
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3263
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3276
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3284
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3288
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3302
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3306
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3311
		{
			yyVAL.updateExprs = nil
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3315
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3325
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3335
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3361
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3377
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3383
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3395
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3407
		{
			yyVAL.bytes = []byte("charset")
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.expr = &Default{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3431
		{
			yyVAL.boolean = false
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3433
		{
			yyVAL.boolean = true
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3436
		{
			yyVAL.boolean = false
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3438
		{
			yyVAL.boolean = true
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3441
		{
			yyVAL.ignore = false
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.ignore = true
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3461
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3468
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3478
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3481
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3488
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3490
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3494
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3498
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3505
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3848
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3857
		{
			decNesting(yylex)
		}
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3862
		{
			skipToEnd(yylex)
		}
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3867
		{
			skipToEnd(yylex)
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3871
		{
			skipToEnd(yylex)
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

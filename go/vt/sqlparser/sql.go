// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const REFERENCES = 57459
const KEY_BLOCK_SIZE = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const COLLATION = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const VITESS_TARGET = 57539
const FULL = 57540
const PROCESSLIST = 57541
const COLUMNS = 57542
const NAMES = 57543
const CHARSET = 57544
const GLOBAL = 57545
const SESSION = 57546
const ISOLATION = 57547
const LEVEL = 57548
const READ = 57549
const WRITE = 57550
const ONLY = 57551
const REPEATABLE = 57552
const COMMITTED = 57553
const UNCOMMITTED = 57554
const SERIALIZABLE = 57555
const CURRENT_TIMESTAMP = 57556
const DATABASE = 57557
const CURRENT_DATE = 57558
const CURRENT_TIME = 57559
const LOCALTIME = 57560
const LOCALTIMESTAMP = 57561
const UTC_DATE = 57562
const UTC_TIME = 57563
const UTC_TIMESTAMP = 57564
const REPLACE = 57565
const CONVERT = 57566
const CAST = 57567
const SUBSTR = 57568
const SUBSTRING = 57569
const GROUP_CONCAT = 57570
const SEPARATOR = 57571
const MATCH = 57572
const AGAINST = 57573
const BOOLEAN = 57574
const LANGUAGE = 57575
const WITH = 57576
const QUERY = 57577
const EXPANSION = 57578
const UNUSED = 57579

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	153, 270,
	154, 270,
	-2, 262,
	-1, 248,
	111, 598,
	-2, 594,
	-1, 249,
	111, 599,
	-2, 595,
	-1, 319,
	81, 761,
	-2, 59,
	-1, 320,
	81, 721,
	-2, 60,
	-1, 325,
	81, 703,
	-2, 560,
	-1, 327,
	81, 742,
	-2, 562,
	-1, 593,
	53, 42,
	55, 42,
	-2, 44,
	-1, 728,
	111, 601,
	-2, 597,
	-1, 939,
	5, 29,
	-2, 404,
	-1, 964,
	5, 28,
	-2, 534,
	-1, 1192,
	5, 29,
	-2, 535,
	-1, 1237,
	5, 28,
	-2, 537,
	-1, 1301,
	5, 29,
	-2, 538,
}

const yyPrivate = 57344

const yyLast = 11429

var yyAct = [...]int{

	249, 878, 664, 1292, 540, 790, 1198, 1098, 242, 1248,
	808, 858, 1126, 1099, 1029, 830, 587, 539, 3, 872,
	585, 454, 227, 905, 839, 1095, 829, 279, 983, 55,
	1072, 78, 826, 763, 760, 192, 753, 791, 192, 693,
	1032, 253, 607, 967, 324, 1020, 843, 931, 603, 972,
	779, 730, 422, 472, 602, 868, 306, 318, 787, 478,
	589, 762, 574, 484, 192, 192, 78, 226, 913, 305,
	192, 315, 78, 492, 280, 49, 236, 313, 251, 54,
	1325, 1312, 1323, 1299, 304, 554, 1320, 321, 879, 1311,
	1298, 1090, 1186, 895, 426, 240, 187, 183, 184, 185,
	59, 219, 1258, 1121, 1122, 1120, 447, 894, 1273, 505,
	504, 514, 515, 507, 508, 509, 510, 511, 512, 513,
	506, 822, 823, 516, 49, 61, 62, 63, 64, 65,
	991, 821, 232, 990, 463, 899, 992, 604, 310, 605,
	225, 464, 461, 1073, 893, 220, 221, 222, 223, 1134,
	1135, 1136, 224, 1010, 851, 1211, 1175, 1139, 1137, 435,
	1226, 859, 1173, 218, 458, 459, 1322, 1319, 1293, 1053,
	449, 788, 451, 1249, 1285, 1075, 844, 809, 811, 436,
	429, 192, 181, 192, 255, 1256, 1251, 672, 180, 192,
	181, 663, 1040, 890, 887, 888, 192, 886, 448, 450,
	78, 78, 78, 78, 982, 78, 1050, 1077, 186, 1081,
	981, 1076, 1052, 1074, 78, 980, 846, 424, 1079, 432,
	846, 1038, 195, 897, 900, 182, 1278, 1078, 1195, 507,
	508, 509, 510, 511, 512, 513, 506, 475, 479, 516,
	1080, 1082, 1059, 78, 694, 1003, 528, 529, 309, 947,
	481, 925, 810, 702, 497, 1250, 496, 442, 892, 1015,
	480, 509, 510, 511, 512, 513, 506, 516, 1274, 516,
	1144, 278, 827, 699, 453, 453, 453, 453, 491, 453,
	891, 446, 852, 859, 1257, 1255, 1039, 907, 453, 541,
	1297, 1044, 1041, 1034, 1035, 1042, 1037, 1036, 552, 1283,
	1040, 1154, 76, 970, 192, 606, 1051, 49, 1049, 1043,
	845, 192, 192, 192, 845, 1046, 1092, 78, 780, 896,
	1145, 1138, 525, 78, 695, 527, 468, 469, 506, 1038,
	667, 516, 898, 1008, 482, 737, 489, 323, 321, 780,
	1287, 954, 486, 427, 52, 438, 439, 440, 1303, 735,
	736, 734, 491, 538, 733, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 906, 553, 555, 555, 555, 555,
	555, 555, 555, 555, 563, 564, 565, 566, 556, 557,
	558, 559, 560, 561, 562, 586, 1217, 701, 600, 1216,
	594, 720, 722, 723, 1039, 179, 721, 1024, 1023, 1044,
	1041, 1034, 1035, 1042, 1037, 1036, 514, 515, 507, 508,
	509, 510, 511, 512, 513, 506, 470, 1043, 516, 943,
	848, 942, 428, 1033, 700, 849, 78, 490, 489, 922,
	923, 924, 192, 192, 78, 526, 192, 490, 489, 192,
	490, 489, 1011, 192, 491, 78, 78, 78, 78, 78,
	78, 78, 78, 754, 491, 755, 1305, 491, 303, 78,
	78, 1284, 1233, 490, 489, 1214, 192, 1056, 705, 706,
	1094, 323, 323, 323, 323, 697, 323, 1021, 21, 944,
	491, 1241, 1321, 471, 78, 323, 1281, 681, 192, 1308,
	471, 1241, 1290, 1262, 78, 309, 430, 431, 717, 718,
	453, 1241, 1253, 707, 1241, 471, 1241, 1242, 453, 1207,
	1206, 679, 1143, 1130, 494, 490, 489, 1129, 727, 453,
	453, 453, 453, 453, 453, 453, 453, 731, 490, 489,
	1117, 471, 491, 453, 453, 1004, 231, 999, 78, 1194,
	471, 728, 1151, 1150, 1261, 491, 576, 579, 580, 581,
	577, 541, 578, 582, 770, 771, 973, 974, 881, 709,
	767, 1147, 1148, 1147, 1146, 726, 756, 724, 678, 192,
	937, 471, 192, 192, 192, 192, 192, 571, 471, 765,
	471, 969, 677, 668, 192, 666, 661, 192, 323, 772,
	775, 192, 613, 612, 608, 781, 192, 192, 444, 784,
	78, 437, 49, 423, 767, 768, 769, 757, 758, 1140,
	969, 776, 792, 78, 777, 825, 816, 542, 56, 1096,
	968, 321, 968, 765, 571, 783, 23, 785, 786, 794,
	795, 23, 797, 846, 831, 1190, 571, 1062, 860, 861,
	862, 793, 949, 597, 796, 805, 310, 310, 310, 310,
	310, 813, 814, 968, 1236, 962, 819, 818, 937, 963,
	946, 586, 423, 812, 192, 1153, 834, 78, 1149, 78,
	310, 995, 820, 192, 52, 52, 192, 78, 23, 52,
	874, 937, 937, 599, 732, 598, 948, 596, 815, 703,
	596, 1313, 1221, 192, 233, 192, 192, 323, 269, 268,
	271, 272, 273, 274, 945, 323, 853, 270, 275, 911,
	912, 873, 479, 870, 871, 570, 323, 323, 323, 323,
	323, 323, 323, 323, 727, 1131, 52, 845, 1111, 998,
	323, 323, 842, 840, 869, 838, 841, 864, 844, 665,
	571, 453, 52, 453, 973, 974, 876, 728, 863, 67,
	715, 453, 1133, 1096, 1025, 711, 309, 309, 309, 309,
	309, 915, 731, 914, 976, 494, 675, 465, 323, 979,
	802, 309, 800, 978, 938, 803, 921, 801, 799, 798,
	309, 576, 579, 580, 581, 577, 927, 578, 582, 955,
	505, 504, 514, 515, 507, 508, 509, 510, 511, 512,
	513, 506, 926, 1317, 516, 964, 1310, 1058, 804, 759,
	580, 581, 485, 78, 237, 238, 192, 910, 1316, 773,
	773, 920, 311, 936, 919, 773, 1016, 483, 78, 953,
	78, 246, 473, 611, 445, 1007, 986, 1289, 932, 951,
	1288, 1188, 773, 1234, 474, 996, 977, 1005, 1000, 1222,
	883, 831, 674, 584, 234, 235, 485, 189, 985, 228,
	987, 1267, 965, 966, 918, 229, 1012, 1013, 1266, 988,
	994, 323, 917, 56, 1224, 969, 466, 78, 78, 692,
	78, 487, 1275, 1212, 323, 698, 58, 314, 1001, 1002,
	310, 1014, 425, 1017, 1018, 1019, 60, 595, 708, 53,
	1, 1030, 880, 78, 854, 855, 856, 857, 1028, 889,
	1022, 1291, 1247, 1125, 837, 828, 1057, 192, 421, 732,
	865, 866, 867, 66, 1282, 836, 78, 835, 1045, 1254,
	1210, 847, 1009, 850, 1132, 1286, 1006, 618, 323, 616,
	323, 617, 615, 620, 1055, 619, 614, 1064, 323, 203,
	316, 583, 453, 875, 488, 68, 764, 766, 1048, 1047,
	885, 1065, 462, 1093, 205, 524, 78, 78, 1097, 1087,
	916, 1071, 782, 989, 323, 1084, 1066, 453, 1108, 1109,
	1083, 1091, 1110, 1102, 322, 1112, 1103, 1031, 704, 477,
	1265, 1100, 728, 1223, 952, 1105, 78, 1106, 78, 78,
	309, 551, 807, 433, 792, 434, 1107, 778, 254, 719,
	792, 441, 267, 1124, 264, 1118, 266, 831, 443, 831,
	265, 710, 1123, 961, 1128, 498, 192, 1182, 471, 252,
	1119, 244, 308, 567, 78, 575, 573, 572, 1101, 975,
	49, 971, 307, 1061, 1185, 1141, 1142, 78, 192, 1272,
	714, 25, 57, 239, 78, 1113, 1114, 1115, 19, 18,
	78, 17, 20, 192, 505, 504, 514, 515, 507, 508,
	509, 510, 511, 512, 513, 506, 16, 15, 516, 1162,
	14, 1064, 452, 1164, 984, 29, 13, 12, 530, 531,
	532, 533, 534, 535, 536, 537, 11, 1171, 10, 608,
	9, 323, 8, 1187, 7, 1163, 6, 5, 4, 230,
	541, 22, 78, 2, 78, 78, 78, 192, 78, 0,
	1200, 1201, 1202, 1189, 78, 0, 569, 0, 0, 1197,
	0, 0, 78, 1203, 1155, 593, 0, 310, 1209, 996,
	0, 1205, 0, 0, 0, 831, 0, 1157, 1026, 323,
	1160, 323, 0, 78, 78, 78, 0, 0, 1213, 0,
	1215, 0, 0, 0, 0, 1184, 0, 0, 1219, 0,
	1220, 0, 0, 934, 323, 1030, 831, 935, 0, 0,
	0, 1225, 0, 0, 939, 940, 941, 0, 0, 0,
	0, 0, 0, 950, 0, 78, 78, 323, 956, 0,
	957, 958, 959, 960, 1235, 0, 0, 0, 78, 0,
	0, 1237, 0, 0, 1246, 0, 0, 0, 1100, 323,
	1252, 0, 78, 0, 0, 0, 0, 453, 1263, 0,
	0, 0, 0, 0, 773, 0, 0, 1104, 984, 0,
	773, 0, 78, 0, 1276, 0, 1259, 309, 1260, 0,
	0, 0, 0, 0, 669, 670, 1277, 1280, 673, 0,
	0, 676, 0, 0, 1100, 1101, 0, 323, 1238, 323,
	1127, 0, 1295, 0, 0, 1294, 541, 0, 0, 78,
	0, 1300, 0, 455, 456, 457, 192, 460, 696, 0,
	0, 0, 0, 1306, 78, 0, 467, 1264, 0, 0,
	0, 0, 0, 0, 0, 1156, 0, 0, 1314, 0,
	716, 1101, 1315, 49, 78, 0, 0, 792, 1158, 0,
	1318, 0, 0, 0, 0, 1161, 0, 0, 0, 0,
	729, 323, 0, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 0, 0,
	0, 0, 0, 1070, 0, 0, 1168, 1169, 0, 1170,
	0, 0, 1172, 0, 1174, 0, 0, 0, 0, 0,
	476, 504, 514, 515, 507, 508, 509, 510, 511, 512,
	513, 506, 0, 1199, 516, 1199, 1199, 1199, 0, 1204,
	0, 789, 0, 0, 0, 323, 0, 1324, 0, 0,
	1116, 0, 0, 1199, 0, 190, 0, 0, 217, 0,
	1208, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 323, 323, 323, 0, 0, 0,
	0, 0, 243, 0, 190, 190, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 0, 23, 24, 50, 26,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 42, 1239, 1240, 0, 0,
	28, 47, 48, 0, 0, 0, 0, 0, 0, 1127,
	0, 0, 1165, 0, 0, 0, 877, 0, 0, 1167,
	37, 0, 0, 1199, 52, 901, 0, 0, 902, 0,
	1176, 1177, 1178, 0, 0, 1181, 0, 0, 662, 0,
	0, 0, 0, 1279, 0, 904, 671, 0, 1191, 1192,
	1193, 0, 1196, 0, 0, 0, 0, 682, 683, 684,
	685, 686, 687, 688, 689, 0, 0, 0, 0, 201,
	0, 690, 691, 0, 0, 0, 0, 773, 0, 0,
	1302, 190, 0, 190, 30, 31, 33, 32, 35, 190,
	0, 0, 0, 213, 0, 1309, 190, 928, 929, 930,
	0, 0, 0, 0, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 1199, 0, 0, 0, 0,
	0, 0, 1179, 471, 0, 38, 39, 0, 40, 41,
	0, 0, 1232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 1243, 1244, 1245,
	198, 0, 1183, 471, 0, 0, 0, 204, 200, 505,
	504, 514, 515, 507, 508, 509, 510, 511, 512, 513,
	506, 0, 0, 516, 1268, 1269, 1270, 1271, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 206, 505,
	504, 514, 515, 507, 508, 509, 510, 511, 512, 513,
	506, 0, 0, 516, 190, 0, 0, 0, 0, 0,
	51, 190, 591, 190, 0, 0, 197, 0, 0, 1296,
	0, 0, 0, 0, 1301, 505, 504, 514, 515, 507,
	508, 509, 510, 511, 512, 513, 506, 0, 1307, 516,
	1180, 0, 0, 207, 199, 0, 208, 209, 210, 212,
	211, 216, 0, 0, 0, 0, 215, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 1328, 1329, 0, 0, 0, 0, 882,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 0, 0, 1068, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1086, 0,
	1088, 1089, 0, 505, 504, 514, 515, 507, 508, 509,
	510, 511, 512, 513, 506, 1067, 0, 516, 0, 0,
	0, 0, 190, 190, 0, 0, 190, 0, 0, 190,
	0, 0, 0, 680, 0, 505, 504, 514, 515, 507,
	508, 509, 510, 511, 512, 513, 506, 0, 0, 516,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 500, 0, 503, 0, 680, 0, 0,
	1159, 517, 518, 519, 520, 521, 522, 523, 0, 501,
	502, 499, 505, 504, 514, 515, 507, 508, 509, 510,
	511, 512, 513, 506, 0, 0, 516, 0, 0, 1166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 243, 243, 0, 0, 774, 774,
	243, 0, 0, 0, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 243, 243, 243, 0, 190,
	0, 774, 190, 190, 190, 190, 190, 0, 933, 0,
	0, 0, 0, 0, 806, 0, 0, 190, 635, 0,
	1027, 591, 0, 0, 0, 0, 190, 190, 505, 504,
	514, 515, 507, 508, 509, 510, 511, 512, 513, 506,
	0, 0, 516, 0, 0, 1054, 505, 504, 514, 515,
	507, 508, 509, 510, 511, 512, 513, 506, 0, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1227, 1228, 0, 1229, 1230, 1231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 623, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 908, 909, 636, 0, 0,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 0, 0, 649, 650,
	651, 652, 653, 654, 655, 0, 656, 657, 658, 659,
	660, 637, 638, 639, 640, 621, 622, 0, 1304, 624,
	0, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 641, 642, 643, 644, 645, 646, 647, 648, 0,
	0, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 832, 833, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 997,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 774, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 190, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 832, 833, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 52, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 1063, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 725, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 326, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 327, 325, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 601, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 326, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 327, 325, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 129, 361, 0, 352,
	330, 358, 331, 350, 373, 97, 376, 348, 401, 382,
	411, 111, 418, 113, 387, 0, 147, 122, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 193, 407, 367, 366, 410, 135, 0, 0, 150,
	102, 101, 140, 110, 402, 351, 359, 93, 357, 142,
	131, 162, 384, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 317, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 326, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	332, 0, 148, 164, 178, 88, 347, 405, 170, 171,
	172, 173, 174, 0, 0, 89, 327, 325, 320, 319,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 79, 0, 112, 175,
	137, 99, 165, 129, 0, 0, 761, 0, 250, 0,
	0, 0, 97, 0, 247, 0, 0, 0, 111, 290,
	113, 0, 0, 147, 122, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 248, 269, 268, 271, 272, 273, 274, 0,
	0, 90, 270, 275, 276, 277, 0, 0, 245, 262,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 241, 0, 0, 0, 301, 0, 261,
	0, 0, 256, 257, 258, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 299, 0, 135, 0, 0, 150, 102, 101, 140,
	110, 0, 0, 0, 93, 0, 142, 131, 162, 0,
	132, 141, 114, 154, 136, 161, 194, 169, 152, 168,
	80, 151, 160, 91, 144, 82, 158, 149, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 155, 156,
	94, 177, 85, 167, 84, 86, 166, 127, 153, 159,
	121, 118, 83, 157, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 0, 0, 148,
	164, 178, 88, 0, 0, 170, 171, 172, 173, 174,
	0, 0, 89, 126, 87, 105, 145, 108, 115, 138,
	176, 130, 143, 92, 163, 146, 291, 300, 297, 298,
	295, 296, 294, 293, 292, 302, 283, 284, 285, 286,
	288, 0, 287, 79, 0, 112, 175, 137, 99, 165,
	129, 0, 0, 0, 0, 250, 0, 0, 0, 97,
	0, 247, 0, 0, 0, 111, 290, 113, 0, 0,
	147, 122, 0, 0, 0, 0, 281, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 471, 248,
	269, 268, 271, 272, 273, 274, 0, 0, 90, 270,
	275, 276, 277, 0, 0, 245, 262, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	0, 0, 0, 0, 301, 0, 261, 0, 0, 256,
	257, 258, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 299, 0,
	135, 0, 0, 150, 102, 101, 140, 110, 0, 0,
	0, 93, 0, 142, 131, 162, 0, 132, 141, 114,
	154, 136, 161, 194, 169, 152, 168, 80, 151, 160,
	91, 144, 82, 158, 149, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 155, 156, 94, 177, 85,
	167, 84, 86, 166, 127, 153, 159, 121, 118, 83,
	157, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 148, 164, 178, 88,
	0, 0, 170, 171, 172, 173, 174, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 176, 130, 143,
	92, 163, 146, 291, 300, 297, 298, 295, 296, 294,
	293, 292, 302, 283, 284, 285, 286, 288, 0, 287,
	79, 0, 112, 175, 137, 99, 165, 129, 0, 0,
	0, 0, 250, 0, 0, 0, 97, 0, 247, 0,
	0, 0, 111, 290, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 281, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 248, 269, 268, 271,
	272, 273, 274, 0, 0, 90, 270, 275, 276, 277,
	0, 0, 245, 262, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 241, 0, 0,
	0, 301, 0, 261, 0, 0, 256, 257, 258, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 299, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	291, 300, 297, 298, 295, 296, 294, 293, 292, 302,
	283, 284, 285, 286, 288, 0, 287, 79, 0, 112,
	175, 137, 99, 165, 129, 0, 0, 0, 0, 250,
	0, 0, 0, 97, 0, 247, 0, 0, 0, 111,
	290, 113, 0, 0, 147, 122, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 0, 0, 824, 0,
	52, 0, 0, 248, 269, 268, 271, 272, 273, 274,
	0, 0, 90, 270, 275, 276, 277, 0, 0, 245,
	262, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 301, 0,
	261, 0, 0, 256, 257, 258, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 299, 0, 135, 0, 0, 150, 102, 101,
	140, 110, 0, 0, 0, 93, 0, 142, 131, 162,
	0, 132, 141, 114, 154, 136, 161, 194, 169, 152,
	168, 80, 151, 160, 91, 144, 82, 158, 149, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 155,
	156, 94, 177, 85, 167, 84, 86, 166, 127, 153,
	159, 121, 118, 83, 157, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	148, 164, 178, 88, 0, 0, 170, 171, 172, 173,
	174, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 176, 130, 143, 92, 163, 146, 291, 300, 297,
	298, 295, 296, 294, 293, 292, 302, 283, 284, 285,
	286, 288, 23, 287, 79, 0, 112, 175, 137, 99,
	165, 0, 0, 0, 129, 0, 0, 0, 0, 250,
	0, 0, 0, 97, 0, 247, 0, 0, 0, 111,
	290, 113, 0, 0, 147, 122, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 248, 269, 268, 271, 272, 273, 274,
	0, 0, 90, 270, 275, 276, 277, 0, 0, 245,
	262, 0, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 0, 0, 0, 0, 301, 0,
	261, 0, 0, 256, 257, 258, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 299, 0, 135, 0, 0, 150, 102, 101,
	140, 110, 0, 0, 0, 93, 0, 142, 131, 162,
	0, 132, 141, 114, 154, 136, 161, 194, 169, 152,
	168, 80, 151, 160, 91, 144, 82, 158, 149, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 155,
	156, 94, 177, 85, 167, 84, 86, 166, 127, 153,
	159, 121, 118, 83, 157, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	148, 164, 178, 88, 0, 0, 170, 171, 172, 173,
	174, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 176, 130, 143, 92, 163, 146, 291, 300, 297,
	298, 295, 296, 294, 293, 292, 302, 283, 284, 285,
	286, 288, 0, 287, 79, 0, 112, 175, 137, 99,
	165, 129, 0, 0, 0, 0, 250, 0, 0, 0,
	97, 0, 247, 0, 0, 0, 111, 290, 113, 0,
	0, 147, 122, 0, 0, 0, 0, 281, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	248, 269, 268, 271, 272, 273, 274, 0, 0, 90,
	270, 275, 276, 277, 0, 0, 245, 262, 0, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 0, 0, 0, 0, 301, 0, 261, 0, 0,
	256, 257, 258, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 299,
	0, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 0, 132, 141,
	114, 154, 136, 161, 194, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 177,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 178,
	88, 0, 0, 170, 171, 172, 173, 174, 0, 0,
	89, 126, 87, 105, 145, 108, 115, 138, 176, 130,
	143, 92, 163, 146, 291, 300, 297, 298, 295, 296,
	294, 293, 292, 302, 283, 284, 285, 286, 288, 129,
	287, 79, 0, 112, 175, 137, 99, 165, 97, 0,
	0, 0, 0, 0, 111, 290, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 248, 269,
	268, 271, 272, 273, 274, 0, 0, 90, 270, 275,
	276, 277, 0, 0, 0, 262, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 0,
	0, 0, 0, 301, 0, 261, 0, 0, 256, 257,
	258, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 299, 0, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 1327, 132, 141, 114, 154,
	136, 161, 194, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 177, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 178, 88, 0,
	0, 170, 171, 172, 173, 174, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 176, 130, 143, 92,
	163, 146, 291, 300, 297, 298, 295, 296, 294, 293,
	292, 302, 283, 284, 285, 286, 288, 129, 287, 79,
	0, 112, 175, 137, 99, 165, 97, 0, 0, 0,
	0, 0, 111, 290, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 281, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 248, 269, 268, 271,
	272, 273, 274, 0, 0, 90, 270, 275, 276, 277,
	0, 0, 0, 262, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 0, 0, 0,
	0, 301, 0, 261, 0, 0, 256, 257, 258, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 299, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	291, 300, 297, 298, 295, 296, 294, 293, 292, 302,
	283, 284, 285, 286, 288, 129, 287, 79, 0, 112,
	175, 137, 99, 165, 97, 0, 0, 0, 0, 0,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	504, 514, 515, 507, 508, 509, 510, 511, 512, 513,
	506, 0, 0, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 194, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 177, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 178, 88, 0, 0, 170, 171, 172,
	173, 174, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 176, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 493, 0, 0, 0, 79, 97, 112, 175, 137,
	99, 165, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 495, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	490, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	175, 137, 99, 165, 111, 0, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 69, 0, 0, 0, 75, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 0, 132, 141, 114, 154,
	136, 161, 71, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 177, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 178, 88, 0,
	0, 170, 171, 172, 173, 174, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 176, 130, 143, 92,
	163, 146, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 590, 0, 0, 0, 79,
	97, 112, 175, 137, 99, 165, 111, 0, 113, 0,
	0, 147, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 592, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 0, 132, 141,
	114, 154, 136, 161, 194, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 177,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 178,
	88, 0, 0, 170, 171, 172, 173, 174, 0, 0,
	89, 126, 87, 105, 145, 108, 115, 138, 176, 130,
	143, 92, 163, 146, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 79, 0, 112, 175, 137, 99, 165, 97, 0,
	0, 0, 0, 0, 111, 0, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 0, 132, 141, 114, 154,
	136, 161, 194, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 177, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 178, 88, 0,
	0, 170, 171, 172, 173, 174, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 176, 130, 143, 92,
	163, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 79,
	0, 112, 175, 137, 99, 165, 97, 0, 610, 0,
	0, 0, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 993, 0, 609, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 79, 0, 112,
	175, 137, 99, 165, 97, 0, 0, 0, 0, 0,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 194, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 177, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 178, 88, 0, 0, 170, 171, 172,
	173, 174, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 176, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 79, 97, 112, 175, 137,
	99, 165, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 712,
	0, 0, 713, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 132, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 79, 0, 112,
	175, 137, 99, 165, 97, 0, 610, 0, 0, 0,
	111, 0, 113, 0, 0, 147, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 609, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 0, 135, 0, 0, 150, 102,
	101, 140, 110, 0, 0, 0, 93, 0, 142, 131,
	162, 0, 132, 141, 114, 154, 136, 161, 194, 169,
	152, 168, 80, 151, 160, 91, 144, 82, 158, 149,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	155, 156, 94, 177, 85, 167, 84, 86, 166, 127,
	153, 159, 121, 118, 83, 157, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 148, 164, 178, 88, 0, 0, 170, 171, 172,
	173, 174, 0, 0, 89, 126, 87, 105, 145, 108,
	115, 138, 176, 130, 143, 92, 163, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 590, 0, 0, 0, 79, 97, 112, 175, 137,
	99, 165, 111, 0, 113, 0, 0, 147, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 592, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 0, 135, 0, 0,
	150, 102, 101, 140, 110, 0, 0, 0, 93, 0,
	142, 131, 162, 0, 588, 141, 114, 154, 136, 161,
	194, 169, 152, 168, 80, 151, 160, 91, 144, 82,
	158, 149, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 155, 156, 94, 177, 85, 167, 84, 86,
	166, 127, 153, 159, 121, 118, 83, 157, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 148, 164, 178, 88, 0, 0, 170,
	171, 172, 173, 174, 0, 0, 89, 126, 87, 105,
	145, 108, 115, 138, 176, 130, 143, 92, 163, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	175, 137, 99, 165, 111, 0, 113, 0, 0, 147,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 191, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 0, 135,
	0, 0, 150, 102, 101, 140, 110, 0, 0, 0,
	93, 0, 142, 131, 162, 0, 132, 141, 114, 154,
	136, 161, 194, 169, 152, 168, 80, 151, 160, 91,
	144, 82, 158, 149, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 155, 156, 94, 177, 85, 167,
	84, 86, 166, 127, 153, 159, 121, 118, 83, 157,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 148, 164, 178, 88, 0,
	0, 170, 171, 172, 173, 174, 0, 0, 89, 126,
	87, 105, 145, 108, 115, 138, 176, 130, 143, 92,
	163, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 79,
	97, 112, 175, 137, 99, 165, 111, 0, 113, 0,
	0, 147, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 592, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	0, 135, 0, 0, 150, 102, 101, 140, 110, 0,
	0, 0, 93, 0, 142, 131, 162, 0, 132, 141,
	114, 154, 136, 161, 194, 169, 152, 168, 80, 151,
	160, 91, 144, 82, 158, 149, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 155, 156, 94, 177,
	85, 167, 84, 86, 166, 127, 153, 159, 121, 118,
	83, 157, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 0, 0, 148, 164, 178,
	88, 0, 0, 170, 171, 172, 173, 174, 0, 0,
	89, 126, 87, 105, 145, 108, 115, 138, 176, 130,
	143, 92, 163, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 79, 97, 112, 175, 137, 99, 165, 111, 0,
	113, 0, 0, 147, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 495, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 0, 135, 0, 0, 150, 102, 101, 140,
	110, 0, 0, 0, 93, 0, 142, 131, 162, 0,
	132, 141, 114, 154, 136, 161, 194, 169, 152, 168,
	80, 151, 160, 91, 144, 82, 158, 149, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 155, 156,
	94, 177, 85, 167, 84, 86, 166, 127, 153, 159,
	121, 118, 83, 157, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 0, 0, 148,
	164, 178, 88, 0, 0, 170, 171, 172, 173, 174,
	0, 0, 89, 126, 87, 105, 145, 108, 115, 138,
	176, 130, 143, 92, 163, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 79, 0, 112, 175, 137, 99, 165,
	568, 97, 0, 0, 0, 0, 0, 111, 0, 113,
	0, 0, 147, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 135, 0, 0, 150, 102, 101, 140, 110,
	0, 0, 0, 93, 0, 142, 131, 162, 0, 132,
	141, 114, 154, 136, 161, 194, 169, 152, 168, 80,
	151, 160, 91, 144, 82, 158, 149, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 155, 156, 94,
	177, 85, 167, 84, 86, 166, 127, 153, 159, 121,
	118, 83, 157, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 148, 164,
	178, 88, 0, 0, 170, 171, 172, 173, 174, 0,
	0, 89, 126, 87, 105, 145, 108, 115, 138, 176,
	130, 143, 92, 163, 146, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 79, 97, 112, 175, 137, 99, 165, 111,
	0, 113, 0, 0, 147, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 135, 0, 0, 150, 102, 101,
	140, 110, 0, 0, 0, 93, 0, 142, 131, 162,
	0, 132, 141, 114, 154, 136, 161, 194, 169, 152,
	168, 80, 151, 160, 91, 144, 82, 158, 149, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 155,
	156, 94, 177, 85, 167, 84, 86, 166, 127, 153,
	159, 121, 118, 83, 157, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	148, 164, 178, 88, 0, 0, 170, 171, 172, 173,
	174, 0, 0, 89, 126, 87, 105, 145, 108, 115,
	138, 176, 130, 143, 92, 163, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 175, 137, 99,
	165, 111, 0, 113, 0, 0, 147, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 193, 0, 0, 0, 0, 135, 0, 0, 150,
	102, 101, 140, 110, 0, 0, 0, 93, 0, 142,
	131, 162, 0, 132, 141, 114, 154, 136, 161, 194,
	169, 152, 168, 80, 151, 160, 91, 144, 82, 158,
	149, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 155, 156, 94, 177, 85, 167, 84, 86, 166,
	127, 153, 159, 121, 118, 83, 157, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	0, 0, 148, 164, 178, 88, 0, 0, 170, 171,
	172, 173, 174, 0, 0, 89, 126, 87, 105, 145,
	108, 115, 138, 176, 130, 143, 92, 163, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 79, 97, 112, 175,
	137, 99, 165, 111, 0, 113, 0, 0, 147, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 135, 0,
	0, 150, 102, 101, 140, 110, 0, 0, 0, 93,
	0, 142, 131, 162, 0, 132, 141, 114, 154, 136,
	161, 194, 169, 152, 168, 80, 151, 160, 91, 144,
	82, 158, 149, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 155, 156, 94, 177, 85, 167, 84,
	86, 166, 127, 153, 159, 121, 118, 83, 157, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 148, 164, 178, 88, 0, 0,
	170, 171, 172, 173, 174, 0, 0, 89, 126, 87,
	105, 145, 108, 115, 138, 176, 130, 143, 92, 163,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 79, 97,
	112, 175, 137, 99, 165, 111, 0, 113, 0, 0,
	147, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	135, 0, 0, 150, 102, 101, 140, 110, 0, 0,
	0, 93, 0, 142, 131, 162, 0, 132, 141, 114,
	154, 136, 161, 194, 169, 152, 168, 80, 151, 160,
	91, 144, 82, 158, 149, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 155, 156, 94, 177, 85,
	167, 84, 86, 166, 127, 153, 159, 121, 118, 83,
	157, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 148, 164, 178, 88,
	0, 0, 170, 171, 172, 173, 174, 0, 0, 89,
	126, 87, 105, 145, 108, 115, 138, 176, 130, 143,
	92, 163, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	79, 97, 112, 175, 137, 99, 165, 111, 0, 113,
	0, 0, 147, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 135, 0, 0, 150, 102, 101, 140, 110,
	0, 0, 0, 93, 0, 142, 131, 162, 0, 132,
	141, 114, 154, 136, 161, 194, 169, 152, 168, 80,
	151, 160, 91, 144, 82, 158, 149, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 155, 156, 94,
	177, 85, 167, 84, 86, 166, 127, 153, 159, 121,
	118, 83, 157, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 148, 164,
	178, 88, 0, 0, 170, 171, 172, 173, 174, 0,
	0, 89, 126, 87, 105, 145, 108, 115, 138, 176,
	130, 143, 92, 163, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 112, 175, 137, 99, 165,
}
var yyPact = [...]int{

	1440, -1000, -176, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 858, 881, -1000, -1000, -1000, -1000, -1000, -1000, 695,
	7591, 65, 104, -24, 10508, 101, 1506, 10952, -1000, 6,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -57, -69, 672,
	-1000, -1000, -1000, -1000, -1000, 842, 849, 688, 834, 774,
	-1000, 5749, 57, 9391, 10286, 5038, -1000, 546, 95, 10952,
	-146, 10730, 54, 54, 54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 98,
	10952, -1000, 10952, 53, 544, 53, 53, 53, 10952, -1000,
	146, -1000, -1000, -1000, -1000, 10952, 541, 804, 49, 3038,
	3038, 3038, 3038, 11, 3038, -75, 715, 864, -1000, -1000,
	-1000, -1000, -1000, 3038, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 427, 813, 6463, 6463,
	858, -1000, 672, -1000, -1000, -1000, 791, -1000, -1000, 277,
	870, -1000, 7369, 145, -1000, 6463, 1790, 621, -1000, -1000,
	621, -1000, -1000, 134, -1000, -1000, 6919, 6919, 6919, 6919,
	6919, 6919, 6919, 6919, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 621, -1000,
	6226, 621, 621, 621, 621, 621, 621, 621, 621, 6463,
	621, 621, 621, 621, 621, 621, 621, 621, 621, 621,
	621, 621, 621, 10064, 685, 739, -1000, -1000, -1000, 831,
	8497, 9169, 10952, 632, -1000, 628, 4788, -85, -1000, -1000,
	-1000, 224, 8947, -1000, -1000, -1000, 803, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 537, -1000, 1928, 529, 3038, 68, 686, 528, 257,
	526, 10952, 10952, 3038, 63, 10952, 829, 714, 10952, 525,
	511, -1000, 4538, -1000, 3038, 3038, 3038, 3038, 3038, 3038,
	3038, 3038, -1000, -1000, -1000, -1000, -1000, -1000, 3038, 3038,
	-1000, 868, 233, -1000, -1000, 10952, 6463, -1000, -1000, -1000,
	-1000, -1000, -1000, 876, 182, 369, 142, 634, -1000, 444,
	842, 427, 774, 8719, 707, -1000, -1000, 10952, -1000, 6463,
	6463, 323, -1000, 9835, -1000, -1000, 3538, 190, 6919, 290,
	260, 6919, 6919, 6919, 6919, 6919, 6919, 6919, 6919, 6919,
	6919, 6919, 6919, 6919, 6919, 6919, 396, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 509, -1000, 672, 640, 640,
	161, 161, 161, 161, 161, 161, 161, 7147, 5275, 427,
	524, 356, 6226, 5749, 5749, 6463, 6463, 11174, 11174, 5749,
	835, 241, 356, 11174, -1000, 427, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5749, 5749, 5749, 5749, 26, 10952, -1000,
	11174, 9391, 9391, 9391, 9391, 9391, -1000, 737, 736, -1000,
	730, 728, 766, 10952, -1000, 522, 8497, 127, 621, -1000,
	9613, -1000, -1000, 26, 635, 9391, 10952, -1000, -1000, 4288,
	628, -85, 617, -1000, -92, -104, 5986, 166, -1000, -1000,
	-1000, -1000, 2788, 605, 352, -51, -1000, -1000, -1000, 652,
	-1000, 652, 652, 652, 652, -19, -19, -19, -19, -1000,
	-1000, -1000, -1000, -1000, 694, 683, -1000, 652, 652, 652,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 680, 680, 680, 657,
	657, 693, -1000, 10952, -163, 501, 3038, 827, 3038, -1000,
	78, -1000, 10952, -1000, -1000, 10952, 3038, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10952, 275, 10952, 10952, -1000, 356, -1000, 779,
	6463, 6463, 4038, 6463, -1000, -1000, -1000, 813, -1000, 835,
	853, -1000, 790, 787, 5749, -1000, -1000, 190, 264, -1000,
	-1000, 361, -1000, -1000, -1000, -1000, 140, 621, -1000, 1894,
	-1000, -1000, -1000, -1000, 290, 6919, 6919, 6919, 698, 1894,
	1876, 312, 1278, 161, 163, 163, 225, 225, 225, 225,
	225, 133, 133, -1000, -1000, -1000, 427, -1000, -1000, -1000,
	427, 5749, 627, -1000, -1000, 6463, -1000, 427, 515, 515,
	366, 457, 649, -1000, 138, 631, 515, 5749, 262, -1000,
	6463, 427, -1000, 515, 427, 515, 515, 625, 621, -1000,
	598, -1000, 222, 739, 692, 712, 504, -1000, -1000, -1000,
	-1000, 731, -1000, 727, -1000, -1000, -1000, -1000, -1000, 93,
	88, 82, 10730, -1000, 863, 9391, 569, -1000, -1000, 617,
	-85, -94, -1000, -1000, -1000, 356, -1000, 8269, 616, 2538,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 675, 480, -1000,
	820, 192, 188, 478, 819, -1000, -1000, 806, -1000, 265,
	-53, -1000, -1000, 382, -19, -19, -1000, -1000, 153, 796,
	153, 153, 153, 418, 418, -1000, -1000, -1000, -1000, 338,
	-1000, -1000, -1000, 337, -1000, 702, 10730, 3038, -1000, 3788,
	-1000, -1000, -1000, -1000, -1000, -1000, 272, 164, 184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24, -1000, 3038, -1000, 233, -1000, 408, 6463, -1000, -1000,
	768, 356, 356, 131, -1000, -1000, 10952, -1000, -1000, -1000,
	-1000, 626, -1000, -1000, -1000, 3288, 5749, -1000, 698, 1894,
	1723, -1000, 6919, 6919, -1000, -1000, 515, 5749, 356, -1000,
	-1000, -1000, 36, 396, 36, 6919, 6919, 4038, 6919, 6919,
	-157, 603, 236, -1000, 6463, 392, -1000, -1000, -1000, -1000,
	-1000, 701, 11174, 621, -1000, 8041, 10730, 858, 11174, 6463,
	6463, -1000, -1000, 6463, 674, -1000, 6463, -1000, -1000, -1000,
	621, 621, 621, 475, -1000, 858, 569, -1000, -1000, -1000,
	-119, -125, -1000, -1000, -1000, 2788, -1000, 2788, 10730, 43,
	-1000, 460, 456, -1000, -1000, 671, 700, 90, -1000, -1000,
	-1000, 553, 153, 153, -1000, 455, 213, -1000, -1000, -1000,
	508, -1000, 506, 613, 487, 10952, -1000, -1000, 610, -1000,
	220, -1000, -1000, 10730, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10730, 10952, -1000, -1000,
	-1000, -1000, -1000, 10730, -1000, 275, -1000, 356, -1000, 3788,
	-1000, 863, 9391, -1000, -1000, 427, -1000, 6919, 1894, 1894,
	-1000, -1000, 427, 652, 652, -1000, 652, 657, -1000, 652,
	-3, 652, -9, 427, 427, 1537, 1691, -1000, 972, 1603,
	621, -154, -1000, 356, 6463, -1000, 814, 567, 580, -1000,
	-1000, 5512, 427, 484, 117, 475, 842, -1000, 356, 356,
	356, 10730, 356, 10730, 10730, 10730, 7813, 10730, 842, -1000,
	-1000, -1000, -1000, 2538, -1000, 454, -1000, 652, -1000, -1000,
	-1000, 10730, -47, 874, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -19, 406, -19, 329,
	-1000, 326, 3038, 3788, 2788, -1000, 638, -1000, -1000, -1000,
	-1000, 823, -1000, 861, 581, -1000, 1894, -1000, -1000, 103,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6919,
	6919, -1000, 6919, 6919, 6919, 427, 403, 356, 815, -1000,
	621, -1000, -1000, 620, 10730, 10730, -1000, -1000, 451, -1000,
	449, 449, 449, 127, -1000, -1000, 120, 10730, -1000, 446,
	157, -1000, -129, 153, -1000, 153, 488, 437, -1000, -1000,
	-1000, 10730, 621, 854, 845, -1000, -1000, 1567, 1567, 1567,
	1567, 17, -1000, -1000, 873, -1000, 621, -1000, 672, 115,
	-1000, 10730, -1000, -1000, -1000, -1000, -1000, 120, -1000, 429,
	218, 402, -1000, 40, 274, 812, -1000, 809, -1000, -1000,
	-1000, -1000, -1000, 436, 23, -1000, 6463, 6463, -1000, -1000,
	-1000, -1000, 427, 41, -169, 11174, 580, 427, 10730, -1000,
	-1000, -1000, 288, -1000, -1000, 10952, -1000, 397, -1000, -1000,
	686, 434, -1000, 10730, 356, 568, -1000, 767, -161, -172,
	565, -1000, -1000, -1000, 637, -1000, -163, -1000, 23, 784,
	-1000, 764, -1000, 10730, -1000, -1000, 20, -165, 426, 18,
	-170, -1000, 621, -173, 6691, -1000, 1567, 427, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1113, 17, 478, 1111, 1109, 1108, 1107, 1106, 1104,
	1102, 1100, 1098, 1096, 1087, 1086, 1085, 1080, 1077, 1076,
	1062, 1061, 1059, 1058, 100, 1053, 1052, 1051, 63, 1050,
	76, 1049, 1044, 47, 61, 34, 33, 8, 1043, 20,
	69, 56, 1042, 49, 1041, 1039, 77, 1037, 62, 1036,
	1035, 822, 1033, 1032, 10, 43, 1031, 1029, 1025, 1023,
	78, 831, 1021, 1020, 1016, 1014, 1012, 1009, 51, 4,
	7, 27, 13, 1008, 184, 41, 1007, 50, 1001, 994,
	993, 990, 29, 989, 59, 988, 22, 53, 986, 6,
	58, 28, 25, 5, 71, 54, 984, 37, 57, 48,
	973, 970, 395, 965, 964, 39, 962, 23, 159, 422,
	960, 959, 958, 955, 44, 0, 271, 21, 73, 954,
	953, 42, 1370, 68, 60, 16, 951, 101, 1082, 36,
	950, 949, 30, 946, 945, 943, 942, 941, 939, 937,
	282, 936, 935, 934, 11, 32, 933, 932, 55, 19,
	931, 930, 929, 45, 52, 927, 925, 46, 924, 923,
	918, 915, 26, 15, 914, 12, 913, 9, 912, 24,
	911, 3, 909, 14, 908, 1, 902, 2, 40, 900,
	899, 74, 416, 897, 896, 85,
}
var yyR1 = [...]int{

	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	183, 183, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 130,
	130, 11, 11, 11, 11, 11, 11, 11, 177, 177,
	176, 175, 175, 174, 174, 173, 16, 159, 160, 160,
	160, 160, 154, 133, 133, 133, 133, 136, 136, 134,
	134, 134, 134, 134, 134, 134, 135, 135, 135, 135,
	135, 137, 137, 137, 137, 137, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 153,
	153, 140, 140, 148, 148, 149, 149, 149, 146, 146,
	147, 147, 150, 150, 150, 141, 141, 141, 141, 141,
	141, 141, 143, 143, 151, 151, 144, 144, 144, 145,
	145, 152, 152, 152, 152, 152, 142, 142, 155, 155,
	168, 168, 167, 167, 167, 158, 158, 164, 164, 164,
	164, 164, 157, 157, 166, 166, 165, 156, 156, 169,
	161, 161, 161, 162, 162, 162, 163, 163, 163, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 172,
	170, 170, 171, 171, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	106, 106, 104, 104, 105, 105, 105, 107, 107, 107,
	131, 131, 131, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 20, 20, 184, 24, 25, 25,
	26, 26, 26, 30, 30, 30, 28, 28, 29, 29,
	35, 35, 34, 34, 36, 36, 36, 36, 119, 119,
	119, 118, 118, 38, 38, 39, 39, 40, 40, 41,
	41, 41, 53, 53, 89, 89, 91, 91, 42, 42,
	42, 42, 43, 43, 44, 44, 45, 45, 126, 126,
	125, 125, 125, 124, 124, 47, 47, 47, 49, 48,
	48, 48, 48, 50, 50, 52, 52, 51, 51, 54,
	54, 54, 54, 55, 55, 37, 37, 37, 37, 37,
	37, 37, 103, 103, 57, 57, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 67, 67, 67, 67,
	67, 67, 58, 58, 58, 58, 58, 58, 58, 33,
	33, 68, 68, 68, 74, 69, 69, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 185, 185, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 129, 129, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 78, 78, 32, 32, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 92, 92, 70, 70, 72, 72, 71,
	73, 93, 93, 97, 94, 94, 98, 98, 98, 98,
	96, 96, 96, 121, 121, 121, 101, 101, 108, 108,
	109, 109, 102, 102, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 111, 111, 111, 112, 112, 113,
	113, 113, 120, 120, 116, 116, 117, 117, 122, 122,
	123, 123, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 181, 182, 127,
	128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 3, 2, 3, 1, 10,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 7, 5, 4,
	2, 2, 4, 4, 2, 2, 2, 2, 2, 3,
	1, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 4,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 143, 118, 136, 50, 155, 156,
	158, 159, 25, 137, 138, 141, 142, 31, 32, -181,
	8, 240, 54, -180, 255, -82, 15, -26, 5, -24,
	-184, -24, -24, -24, -24, -24, -159, 54, -113, 123,
	71, 151, 232, 120, 121, 127, -116, 57, -115, 248,
	155, 166, 160, 187, 179, 177, 180, 219, 207, 217,
	66, 158, 228, 139, 175, 171, 169, 27, 192, 253,
	170, 133, 132, 193, 197, 220, 164, 165, 222, 191,
	135, 33, 250, 35, 147, 223, 195, 190, 186, 189,
	163, 185, 39, 199, 198, 200, 218, 182, 172, 18,
	226, 142, 145, 194, 196, 128, 149, 252, 224, 168,
	134, 146, 141, 227, 159, 221, 230, 38, 204, 162,
	131, 156, 153, 183, 148, 173, 174, 188, 161, 184,
	157, 150, 143, 229, 205, 254, 181, 178, 154, 152,
	210, 211, 212, 213, 214, 251, 225, 176, 206, -102,
	123, 125, 121, 121, 122, 123, 232, 120, 121, -51,
	-122, 57, -115, 123, 151, 121, 107, 180, 114, 208,
	122, 33, 149, -131, 121, -104, 152, 207, 210, 211,
	212, 214, 213, 57, 221, 220, 215, -122, 157, -127,
	-127, -127, -127, -127, 209, 209, -2, -86, 17, 16,
	-5, -3, -181, 6, 20, 21, -30, 40, 41, -25,
	-36, 98, -37, -122, -56, 73, -61, 29, 57, -115,
	23, -60, -57, -75, -73, -74, 107, 108, 109, 96,
	97, 104, 74, 110, -65, -63, -64, -66, 59, 58,
	67, 60, 61, 62, 63, 68, 69, 70, -116, -71,
	-181, 44, 45, 241, 242, 243, 244, 247, 245, 76,
	34, 231, 239, 238, 237, 235, 236, 233, 234, 126,
	232, 102, 240, -102, -39, -40, -41, -42, -53, -74,
	-181, -51, 11, -46, -51, -94, -130, 157, -98, 221,
	220, -117, -96, -116, -114, 219, 180, 218, 119, 72,
	22, 24, 202, 75, 107, 16, 76, 106, 241, 114,
	48, 233, 234, 231, 243, 244, 232, 208, 29, 10,
	25, 137, 21, 100, 116, 79, 80, 140, 23, 138,
	70, 19, 51, 11, 13, 14, 126, 125, 91, 122,
	46, 8, 110, 26, 88, 42, 28, 44, 89, 17,
	235, 236, 31, 247, 144, 102, 49, 36, 73, 68,
	52, 71, 15, 47, 90, 117, 240, 45, 120, 6,
	246, 30, 136, 43, 121, 209, 78, 124, 69, 5,
	127, 32, 9, 50, 53, 237, 238, 239, 34, 77,
	12, -160, -154, 57, 122, -51, 240, -116, -109, 126,
	-109, -109, 121, -51, -51, -108, 126, 57, -108, -108,
	-108, -51, 111, -51, 57, 30, 232, 57, 149, 121,
	150, 123, -128, -181, -117, -128, -128, -128, 153, 154,
	-128, 217, -106, 209, 216, 52, 12, -128, -127, -127,
	-182, 56, -87, 19, 31, -37, -122, -83, -84, -37,
	-82, -2, -24, 36, -28, 21, 65, 11, -119, 72,
	71, 88, -118, 22, -116, 59, 111, -37, -58, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 81, 82, 83,
	84, 85, 86, 87, -103, -181, -74, -181, 112, 113,
	-61, -61, -61, -61, -61, -61, -61, -61, -181, -2,
	-69, -37, -181, -181, -181, -181, -181, -181, -181, -181,
	-181, -78, -37, -181, -185, -181, -185, -185, -185, -185,
	-185, -185, -185, -181, -181, -181, -181, -52, 26, -51,
	30, 55, -47, -49, -48, -50, 42, 46, 48, 43,
	44, 45, 49, -126, 22, -39, -181, -125, 145, -124,
	22, -122, 59, -51, -46, -183, 55, 11, 53, 55,
	-94, 157, -95, -99, 222, 224, 81, -121, -116, 59,
	29, 30, 56, 55, -133, -136, -138, -137, -139, -134,
	-135, 177, 178, 107, 181, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 30, 139, 173, 174, 175,
	176, 193, 194, 195, 196, 197, 198, 199, 200, 160,
	161, 162, 163, 164, 165, 166, 168, 169, 170, 171,
	172, 57, -128, 123, -177, 53, 57, 73, 57, -51,
	-51, -128, 124, -51, 23, 52, -51, 57, 57, -123,
	-122, -114, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, 11, -105, 11, 91, -51, -37, 9, 91,
	55, 18, 111, 55, -85, 24, 25, -86, -182, -30,
	-62, -116, 60, 63, -29, 43, -51, -37, -37, -67,
	68, 73, 69, 70, -118, 98, -123, -117, -114, -61,
	-68, -71, -74, 64, 91, 89, 90, 75, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -129, 57, 59, 57, -60, -60, -116,
	-35, 21, -34, -36, -182, 55, -182, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	77, -75, -182, -34, -35, -34, -34, -90, 145, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 42, 42,
	42, 47, 42, 47, 42, -48, -122, -182, -54, 50,
	125, 51, -181, -124, -90, 53, -39, -51, -98, -95,
	55, 223, 225, 226, 52, -37, -145, 106, -161, -162,
	-163, -117, 59, 60, -154, -155, -156, -164, 130, -169,
	128, 131, 127, -157, 133, 122, 28, -150, 68, 73,
	-146, 205, -140, 54, -140, -140, -140, -140, -144, 180,
	-144, -144, -144, 54, 54, -140, -140, -140, -148, 54,
	-148, -148, -149, 54, -149, -120, 53, -51, -175, 251,
	-176, 57, -128, 23, -128, -110, 119, 116, 117, -172,
	115, 202, 180, 66, 29, 15, 241, 145, 254, 57,
	146, -51, -51, -128, -51, -107, 89, 12, -122, -122,
	38, -37, -37, -123, -84, -87, -101, 19, 11, 34,
	34, -34, 68, 69, 70, 111, -181, -68, -61, -61,
	-61, -33, 140, 72, -182, -182, -34, 55, -37, -182,
	-182, -182, 55, 53, 22, 55, 11, 111, 55, 11,
	-182, -34, -79, -77, 79, -37, -182, -182, -182, -182,
	-182, -59, 30, 34, -2, -181, -181, -55, 55, 12,
	81, -44, -43, 52, 53, -45, 52, -43, 42, 42,
	122, 122, 122, -91, -116, -55, -39, -55, -99, -100,
	227, 224, 230, 57, -121, 55, -163, 81, 54, 57,
	28, -157, -157, 57, 57, 28, -141, 29, 68, -147,
	206, 60, -144, -144, -145, 106, 30, -145, -145, -145,
	-153, 59, -153, 60, 60, 52, -116, -128, -174, -173,
	-117, -127, -178, 151, 129, 130, 133, 132, 57, 122,
	28, 128, 131, 145, 127, -178, 151, -111, -112, 124,
	22, 122, 28, 145, -128, -105, 59, -37, 39, 111,
	-51, -38, 11, 98, -117, -35, -33, 72, -61, -61,
	-182, -36, -132, 107, 177, 139, 175, 171, 191, 182,
	204, 173, 205, -129, -132, -61, -61, -117, -61, -61,
	248, -82, 80, -37, 78, -92, 52, -93, -70, -72,
	-71, -181, -2, -88, -116, -91, -82, -97, -37, -37,
	-37, 54, -37, -181, -181, -181, -182, 55, -82, -55,
	224, 228, 229, -162, -163, -166, -165, -116, -169, 57,
	57, 54, -143, 52, 59, 60, 61, 68, 231, 67,
	56, -145, -145, 57, 57, 107, 56, 55, 56, 55,
	56, 55, -51, 55, 81, -127, -116, -127, -116, -51,
	-127, -116, -107, -55, -39, -182, -61, -182, -140, -140,
	-140, -149, -140, 165, -140, 165, -182, -182, -182, 55,
	19, -182, 55, 19, -181, -32, 246, -37, 27, -92,
	55, -182, -182, -182, 55, 111, -182, -86, -89, -116,
	-89, -89, -89, -125, -116, -86, 56, 55, -140, -89,
	-151, 202, 9, -144, 59, -144, 60, 60, -128, -173,
	-163, 54, 26, -80, 13, -144, 57, -61, -61, -61,
	-61, -61, -182, 59, 28, -72, 34, -2, -181, -116,
	-116, 55, 56, -182, -182, -182, -54, -168, -167, 53,
	135, 66, -165, 56, -152, 128, 28, 127, 231, -145,
	-145, 56, 56, -89, -181, -81, 14, 16, -182, -182,
	-182, -182, -31, 91, 251, 9, -70, -2, 111, -116,
	-167, 57, -158, 81, 59, 134, -142, 66, 28, 28,
	56, -170, -171, 145, -37, -69, -182, 249, 49, 252,
	-93, -182, -116, 60, -51, 59, -177, -182, 55, -116,
	39, 250, 253, 54, -175, -171, 34, 39, -89, 147,
	251, 56, 148, 252, -181, 253, -61, 144, -182, -182,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 518, 0, 286, 286, 286, 286, 286, 286, 0,
	589, 572, 0, 0, 0, 0, -2, 274, 275, 0,
	277, 278, 799, 799, 799, 799, 799, 0, 0, 0,
	34, 35, 797, 1, 3, 526, 0, 0, 290, 293,
	288, 0, 572, 0, 0, 0, 61, 0, 0, 785,
	0, 786, 570, 570, 570, 590, 591, 594, 595, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 0,
	0, 573, 0, 568, 0, 568, 568, 568, 0, 231,
	357, 598, 599, 785, 786, 0, 0, 0, 0, 800,
	800, 800, 800, 0, 800, 0, 250, 251, 254, 255,
	256, 257, 258, 800, 271, 272, 263, 273, 276, 279,
	280, 281, 282, 283, 799, 799, 28, 530, 0, 0,
	518, 30, 0, 286, 291, 292, 296, 294, 295, 287,
	0, 304, 308, 0, 365, 0, 370, 372, -2, -2,
	0, 407, 408, 409, 410, 411, 0, 0, 0, 0,
	0, 0, 0, 0, 435, 436, 437, 438, 503, 504,
	505, 506, 507, 508, 509, 510, 374, 375, 500, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 491,
	0, 465, 465, 465, 465, 465, 465, 465, 465, 0,
	0, 0, 0, 0, 0, 315, 317, 318, 319, 338,
	0, 340, 0, 0, 42, 46, 0, 776, 554, -2,
	-2, 0, 0, 596, 597, -2, 702, -2, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 0, 78, 0, 0, 800, 0, 68, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 232, 800, 800, 800, 800, 800, 800,
	800, 800, 241, 801, 802, 242, 243, 244, 800, 800,
	246, 0, 264, 260, 261, 0, 0, 259, 284, 285,
	29, 798, 23, 0, 0, 527, 0, 519, 520, 523,
	526, 28, 293, 0, 298, 297, 289, 0, 305, 0,
	0, 0, 309, 0, 311, 312, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 392, 393, 394,
	395, 396, 397, 398, 371, 0, 385, 0, 0, 0,
	427, 428, 429, 430, 431, 432, 433, 0, 300, 28,
	0, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 492, 0, 457, 0, 458, 459, 460, 461,
	462, 463, 464, 0, 300, 0, 0, 44, 0, 356,
	0, 0, 0, 0, 0, 0, 345, 0, 0, 348,
	0, 0, 0, 0, 339, 0, 0, 359, 748, 341,
	0, 343, 344, -2, 0, 0, 0, 40, 41, 0,
	47, 776, 49, 50, 0, 0, 0, 159, 563, 564,
	565, 561, 190, 0, 142, 138, 84, 85, 86, 131,
	88, 131, 131, 131, 131, 156, 156, 156, 156, 114,
	115, 116, 117, 118, 0, 0, 101, 131, 131, 131,
	105, 121, 122, 123, 124, 125, 126, 127, 128, 89,
	90, 91, 92, 93, 94, 95, 133, 133, 133, 135,
	135, 592, 63, 0, 71, 0, 800, 0, 800, 76,
	0, 206, 0, 225, 569, 0, 800, 228, 229, 358,
	600, 601, 233, 234, 235, 236, 237, 238, 239, 240,
	245, 249, 0, 267, 0, 0, 253, 252, 531, 0,
	0, 0, 0, 0, 522, 524, 525, 530, 31, 296,
	0, 511, 0, 0, 0, 299, 26, 366, 367, 369,
	386, 0, 388, 390, 310, 306, 0, 501, -2, 376,
	377, 401, 402, 403, 0, 0, 0, 0, 399, 381,
	0, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 426, 476, 477, 0, 424, 425, 434,
	0, 0, 301, 302, 404, 0, 549, 28, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 0, 498, 495,
	0, 0, 466, 0, 0, 0, 0, 0, 0, 355,
	363, 551, 0, 316, 334, 336, 0, 331, 346, 347,
	349, 0, 351, 0, 353, 354, 320, 321, 322, 0,
	0, 0, 0, 342, 363, 0, 363, 43, 555, 48,
	0, 0, 53, 54, 556, 557, 558, 0, 77, 191,
	193, 196, 197, 198, 79, 80, 81, 0, 0, 188,
	0, 0, 0, 0, 0, 182, 183, 145, 143, 0,
	140, 139, 87, 0, 156, 156, 108, 109, 159, 0,
	159, 159, 159, 0, 0, 102, 103, 104, 96, 0,
	97, 98, 99, 0, 100, 0, 0, 800, 65, 0,
	69, 70, 66, 571, 67, 799, 0, 0, 584, 207,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	0, 224, 800, 227, 264, 248, 0, 0, 265, 266,
	0, 528, 529, 0, 521, 24, 0, 566, 567, 512,
	513, 313, 387, 389, 391, 0, 300, 378, 399, 382,
	0, 379, 0, 0, 373, 439, 0, 0, 406, -2,
	442, 443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 496, 0, 0, 456, 467, 468, 469,
	470, 543, 0, 0, -2, 0, 0, 518, 0, 0,
	0, 328, 335, 0, 0, 329, 0, 330, 350, 352,
	0, 0, 0, 0, 326, 518, 363, 39, 51, 52,
	0, 0, 58, 160, 559, 0, 194, 0, 0, 0,
	177, 0, 0, 180, 181, 0, 152, 0, 144, 83,
	141, 0, 159, 159, 110, 0, 0, 111, 112, 113,
	0, 129, 0, 0, 0, 0, 593, 64, 72, 73,
	0, 199, 799, 0, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 799, 0, 0, 799, 585,
	586, 587, 588, 0, 226, 267, 268, 269, 532, 0,
	25, 363, 0, 307, 502, 0, 380, 0, 400, 383,
	440, 303, 0, 131, 131, 481, 131, 135, 484, 131,
	486, 131, 489, 0, 0, 0, 0, 501, 0, 0,
	0, 493, 455, 499, 0, 32, 0, 543, 533, 545,
	547, 0, 28, 0, 539, 0, 526, 552, 364, 553,
	332, 0, 337, 0, 0, 0, 340, 0, 526, 38,
	55, 56, 57, 192, 195, 0, 184, 131, 187, 178,
	179, 0, 154, 0, 146, 147, 148, 149, 150, 151,
	132, 106, 107, 160, 157, 158, 156, 0, 156, 0,
	136, 0, 800, 0, 0, 200, 0, 201, 203, 204,
	205, 0, 247, 514, 314, 441, 384, 444, 478, 156,
	482, 483, 485, 487, 488, 490, 446, 445, 447, 0,
	0, 450, 0, 0, 0, 0, 0, 497, 0, 33,
	0, 548, -2, 0, 0, 0, 45, 36, 0, 324,
	0, 0, 0, 359, 327, 37, 169, 0, 186, 0,
	161, 155, 0, 159, 130, 159, 0, 0, 62, 74,
	75, 0, 0, 516, 0, 479, 480, 0, 0, 0,
	0, 471, 454, 494, 0, 546, 0, -2, 0, 541,
	540, 0, 333, 360, 361, 362, 323, 168, 170, 0,
	175, 0, 185, 0, 166, 0, 163, 165, 153, 119,
	120, 134, 137, 0, 0, 27, 0, 0, 448, 449,
	451, 452, 0, 0, 0, 0, 536, 28, 0, 325,
	171, 172, 0, 176, 174, 0, 82, 0, 162, 164,
	68, 0, 220, 0, 517, 515, 453, 0, 0, 0,
	544, -2, 542, 173, 0, 167, 71, 219, 0, 0,
	472, 0, 475, 0, 202, 221, 0, 473, 0, 0,
	0, 189, 0, 0, 0, 474, 0, 0, 222, 223,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 255,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:306
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:311
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:337
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:449
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:462
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:547
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:556
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:568
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:572
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:577
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:592
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:603
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:608
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:614
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:620
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:627
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:639
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:643
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:647
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:653
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:867
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:872
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:881
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:898
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:925
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:968
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:972
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:977
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKey
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1072
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 189:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = yyDollar[1].str
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1236
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1241
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1301
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1309
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1314
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1404
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1409
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = "full "
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.showFilter = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = SessionStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = GlobalStr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Begin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.statement = &Begin{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.statement = &Commit{}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.statement = &Rollback{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &OtherRead{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1594
		{
			setAllowComments(yylex, true)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.bytes2 = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = UnionStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = UnionAllStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = UnionDistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.str = SQLCacheStr
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = DistinctStr
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.str = StraightJoinHint
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.selectExprs = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = JoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = JoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.str = JoinStr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = StraightJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.str = LeftJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.str = LeftJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = RightJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.str = RightJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.str = NaturalJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.indexHints = nil
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = nil
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2236
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2258
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 453:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.str = BooleanModeStr
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.str = QueryExpansionStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.str = string("")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = &NullVal{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.exprs = nil
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.orderBy = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.str = AscScr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.str = DescScr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.limit = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = ForUpdateStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.str = ShareModeStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2723
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2736
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.updateExprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2796
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.bytes = []byte("charset")
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.expr = &Default{}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.byt = 0
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.byt = 1
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.str = IgnoreStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3196
		{
			decNesting(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3201
		{
			forceEOF(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3206
		{
			forceEOF(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3210
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3214
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const TABLES = 57542
const VSCHEMA = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const FIELDS = 57547
const ENGINES = 57548
const PLUGINS = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const TIMESTAMPADD = 57579
const TIMESTAMPDIFF = 57580
const MATCH = 57581
const AGAINST = 57582
const BOOLEAN = 57583
const LANGUAGE = 57584
const WITH = 57585
const QUERY = 57586
const EXPANSION = 57587
const UNUSED = 57588

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 296,
	160, 296,
	-2, 286,
	-1, 260,
	112, 636,
	-2, 632,
	-1, 261,
	112, 637,
	-2, 633,
	-1, 329,
	82, 811,
	-2, 63,
	-1, 330,
	82, 767,
	-2, 64,
	-1, 335,
	82, 746,
	-2, 598,
	-1, 337,
	82, 788,
	-2, 600,
	-1, 606,
	1, 348,
	5, 348,
	12, 348,
	13, 348,
	14, 348,
	15, 348,
	17, 348,
	19, 348,
	30, 348,
	31, 348,
	42, 348,
	43, 348,
	44, 348,
	45, 348,
	46, 348,
	48, 348,
	49, 348,
	52, 348,
	53, 348,
	55, 348,
	56, 348,
	264, 348,
	-2, 366,
	-1, 609,
	53, 44,
	55, 44,
	-2, 48,
	-1, 755,
	112, 639,
	-2, 635,
	-1, 983,
	5, 30,
	-2, 433,
	-1, 1013,
	5, 29,
	-2, 572,
	-1, 1257,
	5, 30,
	-2, 573,
	-1, 1310,
	5, 29,
	-2, 575,
	-1, 1388,
	5, 30,
	-2, 576,
}

const yyPrivate = 57344

const yyLast = 12651

var yyAct = [...]int{

	261, 1412, 1219, 1422, 1322, 1376, 1107, 265, 1016, 1277,
	562, 1290, 1034, 868, 1159, 278, 1193, 841, 239, 897,
	891, 57, 291, 864, 839, 1156, 1017, 1160, 911, 948,
	1040, 1166, 81, 230, 867, 877, 205, 1061, 1172, 205,
	706, 1131, 334, 780, 790, 561, 3, 622, 975, 1087,
	843, 1078, 787, 881, 500, 828, 808, 757, 720, 494,
	621, 292, 51, 328, 907, 435, 603, 205, 81, 514,
	248, 602, 205, 323, 205, 821, 506, 263, 231, 232,
	233, 234, 320, 611, 237, 56, 1415, 325, 1399, 1410,
	1386, 1407, 608, 1220, 1398, 577, 1385, 238, 930, 1148,
	267, 1249, 440, 1049, 1188, 1189, 1048, 468, 252, 1050,
	859, 860, 929, 51, 1187, 576, 200, 196, 197, 198,
	623, 244, 624, 858, 192, 236, 194, 303, 202, 309,
	310, 307, 308, 306, 305, 304, 488, 235, 1069, 890,
	934, 1109, 61, 311, 312, 1280, 898, 484, 453, 928,
	485, 482, 483, 1297, 1240, 1238, 229, 1111, 695, 322,
	477, 478, 692, 1409, 437, 1406, 439, 1377, 63, 64,
	65, 66, 67, 470, 464, 472, 1351, 527, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 694,
	1106, 538, 822, 205, 1110, 487, 205, 696, 1369, 925,
	922, 923, 205, 921, 1430, 469, 471, 1094, 205, 882,
	454, 81, 1331, 81, 1323, 81, 81, 193, 81, 442,
	81, 1035, 1037, 693, 1103, 81, 1426, 1325, 194, 1112,
	1105, 699, 685, 199, 932, 935, 1092, 1182, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	1181, 1180, 538, 438, 884, 81, 445, 884, 207, 195,
	942, 550, 551, 941, 502, 1358, 1260, 1118, 1045, 490,
	491, 927, 465, 450, 465, 1002, 465, 465, 969, 465,
	992, 465, 989, 1062, 898, 446, 465, 729, 452, 467,
	503, 976, 617, 926, 459, 1324, 865, 518, 1036, 460,
	461, 528, 538, 1093, 538, 1384, 51, 854, 1098, 1095,
	1088, 1096, 1091, 1332, 1330, 726, 1089, 1090, 205, 205,
	205, 547, 512, 511, 549, 513, 1104, 81, 1102, 1152,
	1097, 931, 1424, 81, 721, 1425, 447, 1423, 448, 513,
	1205, 449, 1367, 601, 1352, 1340, 933, 456, 457, 458,
	883, 1150, 560, 883, 564, 565, 566, 567, 568, 569,
	570, 571, 572, 548, 575, 578, 578, 578, 584, 578,
	578, 584, 578, 592, 593, 594, 595, 596, 597, 884,
	607, 764, 550, 551, 550, 551, 988, 473, 504, 474,
	475, 1206, 476, 1170, 479, 762, 763, 761, 950, 489,
	580, 582, 610, 586, 588, 615, 591, 70, 436, 436,
	600, 511, 609, 789, 619, 722, 512, 511, 625, 606,
	579, 581, 583, 585, 587, 589, 590, 513, 809, 987,
	999, 986, 466, 513, 441, 205, 512, 511, 809, 687,
	81, 1067, 434, 71, 1372, 205, 205, 81, 512, 511,
	887, 205, 191, 513, 205, 1392, 888, 205, 966, 967,
	968, 205, 508, 81, 81, 513, 1431, 258, 81, 81,
	81, 205, 81, 81, 1390, 883, 949, 54, 81, 81,
	880, 878, 1286, 879, 747, 749, 750, 760, 876, 882,
	748, 1132, 529, 530, 531, 532, 533, 534, 535, 528,
	331, 465, 538, 708, 1285, 1432, 81, 781, 465, 782,
	205, 443, 444, 1082, 1081, 1070, 81, 317, 318, 22,
	1368, 734, 732, 733, 465, 465, 1304, 633, 1134, 465,
	465, 465, 1283, 465, 465, 728, 700, 689, 690, 465,
	465, 1115, 1079, 697, 758, 1051, 322, 1052, 1365, 703,
	531, 532, 533, 534, 535, 528, 1328, 1408, 538, 753,
	81, 755, 1136, 714, 1140, 1222, 1135, 1062, 1133, 1057,
	512, 511, 727, 1138, 493, 736, 783, 799, 802, 243,
	1394, 493, 1137, 810, 705, 751, 704, 513, 688, 512,
	511, 1328, 1380, 81, 81, 1139, 1141, 1328, 493, 1337,
	205, 813, 743, 1328, 1359, 1336, 513, 686, 205, 205,
	794, 51, 205, 205, 684, 683, 205, 205, 205, 81,
	462, 691, 759, 1328, 1327, 1202, 564, 455, 784, 785,
	1275, 1274, 81, 1262, 493, 885, 849, 709, 710, 848,
	851, 612, 711, 712, 713, 1169, 715, 716, 818, 806,
	1259, 493, 717, 718, 1212, 1211, 1208, 1209, 1208, 1207,
	708, 792, 893, 894, 895, 896, 899, 900, 901, 840,
	981, 493, 1041, 607, 825, 493, 1041, 607, 904, 905,
	906, 856, 855, 792, 493, 847, 205, 81, 613, 81,
	852, 613, 823, 81, 81, 205, 205, 205, 872, 205,
	205, 632, 631, 205, 81, 850, 1157, 58, 606, 1169,
	1255, 913, 606, 1339, 1121, 825, 606, 825, 24, 1169,
	205, 24, 205, 205, 1210, 205, 824, 1053, 857, 1005,
	614, 1004, 616, 614, 981, 612, 552, 553, 554, 555,
	556, 557, 558, 559, 909, 910, 1309, 981, 465, 54,
	465, 825, 281, 280, 283, 284, 285, 286, 981, 331,
	493, 282, 287, 612, 618, 465, 54, 245, 730, 54,
	957, 698, 755, 830, 833, 834, 835, 831, 916, 832,
	836, 1400, 1292, 892, 758, 958, 24, 938, 939, 940,
	1267, 943, 944, 912, 959, 945, 1198, 527, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 1056,
	1011, 538, 947, 908, 1012, 54, 970, 953, 903, 971,
	1173, 1174, 1417, 902, 1108, 1293, 205, 205, 205, 205,
	205, 915, 1018, 1413, 54, 1200, 1176, 1157, 205, 1083,
	492, 205, 724, 702, 742, 205, 1028, 1026, 1179, 205,
	1178, 1029, 1027, 1030, 1025, 834, 835, 1024, 249, 250,
	1404, 917, 759, 919, 998, 1397, 1117, 1013, 81, 954,
	507, 1402, 964, 1042, 290, 963, 1074, 630, 946, 1066,
	1043, 1054, 1044, 1014, 1015, 505, 794, 607, 607, 607,
	607, 607, 1031, 1020, 1021, 1039, 1023, 1019, 463, 495,
	1022, 1374, 840, 1373, 1038, 1046, 79, 1307, 1288, 1064,
	607, 496, 1058, 1071, 1072, 1253, 81, 81, 918, 1063,
	701, 1073, 838, 1075, 1076, 1077, 606, 606, 606, 606,
	606, 246, 247, 1059, 1060, 962, 507, 240, 1345, 241,
	58, 606, 333, 961, 1344, 1295, 81, 1041, 486, 606,
	993, 754, 990, 254, 1086, 1080, 830, 833, 834, 835,
	831, 205, 832, 836, 1419, 1418, 1173, 1174, 719, 509,
	81, 1419, 1099, 1355, 1281, 725, 60, 62, 465, 795,
	796, 55, 1, 801, 804, 805, 1411, 1221, 756, 1289,
	924, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 1114, 465, 817, 1375,
	819, 820, 1321, 1192, 875, 81, 81, 866, 1149, 1018,
	1158, 1125, 69, 1124, 433, 68, 1130, 1366, 874, 873,
	1143, 1142, 1329, 1279, 886, 1161, 1068, 889, 1199, 81,
	1065, 1371, 638, 957, 636, 755, 814, 1168, 637, 635,
	640, 331, 639, 1119, 81, 634, 81, 81, 218, 326,
	1163, 1177, 1184, 837, 869, 626, 914, 510, 72, 1191,
	1183, 1101, 1100, 1186, 1162, 920, 51, 480, 481, 220,
	546, 960, 1047, 332, 205, 333, 1164, 333, 1190, 333,
	333, 1085, 333, 1195, 333, 1203, 1204, 1196, 1197, 333,
	731, 205, 499, 1343, 1294, 735, 997, 81, 573, 807,
	81, 81, 81, 205, 266, 746, 279, 276, 277, 81,
	1113, 1214, 205, 737, 1010, 520, 264, 256, 605, 516,
	598, 829, 827, 1215, 826, 1217, 321, 1175, 1171, 604,
	1120, 1248, 1350, 741, 1227, 26, 1229, 59, 251, 19,
	18, 1228, 17, 1233, 1234, 965, 1235, 20, 16, 1237,
	15, 1239, 754, 791, 793, 1236, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 1213, 1018, 538, 14,
	451, 30, 21, 607, 1254, 13, 12, 11, 10, 9,
	1263, 81, 8, 1216, 497, 501, 1264, 7, 6, 81,
	5, 333, 980, 1273, 1054, 1226, 4, 627, 242, 23,
	1247, 519, 2, 0, 81, 1276, 0, 0, 0, 0,
	996, 81, 606, 0, 0, 0, 0, 1282, 0, 1284,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 1270, 1271, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 1296, 574, 0, 0, 0, 0,
	81, 81, 0, 81, 0, 0, 0, 0, 81, 0,
	81, 81, 81, 205, 0, 465, 81, 1316, 1161, 1317,
	1318, 1319, 1315, 1308, 0, 0, 0, 0, 0, 0,
	1320, 0, 1326, 81, 205, 0, 0, 1333, 0, 0,
	869, 0, 1341, 0, 1310, 0, 1334, 0, 1335, 0,
	0, 0, 0, 0, 333, 0, 0, 1162, 0, 0,
	1311, 333, 0, 0, 1356, 0, 1364, 0, 0, 81,
	0, 0, 1161, 1363, 0, 0, 0, 333, 333, 0,
	81, 81, 333, 333, 333, 0, 333, 333, 0, 0,
	1338, 1378, 333, 333, 1379, 0, 1382, 1357, 0, 81,
	0, 0, 0, 1018, 1387, 0, 0, 0, 0, 0,
	205, 1162, 0, 51, 0, 0, 0, 0, 81, 0,
	738, 0, 0, 0, 0, 978, 1342, 1396, 1287, 979,
	516, 0, 0, 333, 0, 0, 983, 984, 985, 1403,
	1401, 81, 1123, 991, 0, 0, 994, 995, 0, 0,
	1405, 0, 1001, 1416, 0, 0, 1003, 0, 0, 1006,
	1007, 1008, 1009, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 786, 1153, 0, 0, 0, 0,
	723, 1033, 0, 0, 1127, 1128, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 0, 1144, 1145, 0,
	1146, 1147, 1391, 0, 0, 744, 745, 815, 816, 0,
	0, 1414, 1154, 1155, 0, 24, 25, 52, 27, 28,
	0, 0, 0, 0, 0, 0, 869, 0, 869, 0,
	0, 0, 0, 333, 43, 0, 0, 1252, 0, 29,
	48, 49, 0, 0, 0, 0, 333, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 563, 38,
	538, 797, 798, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1201, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 0, 538,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 333, 0, 0, 0, 936, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 863,
	0, 0, 1129, 0, 31, 32, 34, 33, 36, 0,
	50, 0, 0, 0, 1231, 1246, 0, 0, 0, 0,
	0, 0, 1251, 0, 333, 0, 0, 0, 0, 0,
	0, 37, 44, 45, 0, 215, 46, 47, 35, 0,
	0, 0, 0, 869, 0, 0, 0, 0, 0, 498,
	0, 0, 39, 40, 0, 41, 42, 0, 0, 224,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 0, 1291, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 228, 527,
	526, 536, 537, 529, 530, 531, 532, 533, 534, 535,
	528, 955, 956, 538, 501, 0, 0, 0, 0, 0,
	208, 0, 0, 255, 0, 0, 324, 211, 0, 811,
	0, 203, 0, 203, 0, 219, 214, 0, 0, 0,
	0, 1298, 1299, 1300, 1301, 1302, 53, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 1230, 1126, 0, 0,
	0, 0, 0, 1232, 0, 0, 0, 217, 0, 0,
	0, 0, 333, 223, 1241, 1242, 982, 527, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 0,
	0, 538, 0, 1000, 1256, 1257, 1258, 0, 1261, 0,
	209, 0, 1291, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1272, 0, 0, 0, 0,
	1084, 333, 0, 0, 0, 0, 0, 221, 212, 0,
	222, 227, 0, 0, 0, 213, 216, 0, 210, 226,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 203, 0, 0, 203, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 522, 333, 525, 0, 0, 0, 0,
	1303, 539, 540, 541, 542, 543, 544, 545, 1245, 523,
	524, 521, 527, 526, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 0, 0, 538, 333, 0, 0,
	0, 0, 1420, 0, 0, 0, 811, 1244, 0, 1165,
	1167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 1348, 1349, 1116, 0, 0, 1353, 1354, 0,
	0, 0, 0, 1167, 0, 0, 0, 0, 0, 1360,
	1361, 1362, 1243, 0, 0, 0, 0, 0, 333, 0,
	333, 1194, 527, 526, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 0, 0, 538, 203, 203, 203,
	0, 0, 1383, 1151, 0, 0, 0, 0, 0, 1388,
	0, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 0, 0, 538, 0, 1393, 0, 0,
	0, 1218, 0, 0, 1223, 1224, 1225, 0, 0, 0,
	0, 0, 0, 333, 0, 1185, 527, 526, 536, 537,
	529, 530, 531, 532, 533, 534, 535, 528, 977, 0,
	538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	0, 0, 538, 0, 811, 527, 526, 536, 537, 529,
	530, 531, 532, 533, 534, 535, 528, 0, 0, 538,
	0, 0, 0, 0, 203, 333, 0, 0, 0, 0,
	0, 0, 0, 1278, 203, 203, 0, 0, 0, 0,
	203, 0, 0, 203, 0, 0, 203, 0, 333, 0,
	707, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 1250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 563, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 1266, 0, 0,
	1268, 0, 0, 0, 1312, 1313, 0, 1314, 0, 203,
	0, 0, 1278, 0, 1278, 1278, 1278, 0, 707, 0,
	1194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 255, 255, 0, 0, 255,
	255, 255, 0, 1370, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 255, 255, 255, 0, 203,
	811, 0, 0, 1389, 0, 0, 0, 203, 845, 0,
	0, 203, 203, 0, 0, 203, 853, 707, 0, 0,
	0, 0, 1395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1381, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 203, 203, 0, 203, 203,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 951, 952, 0, 203, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 844,
	0, 255, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 846, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 203, 203, 203, 203, 203,
	0, 0, 0, 0, 0, 0, 0, 1032, 109, 0,
	203, 0, 206, 0, 845, 0, 0, 146, 203, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 82, 89, 121, 187, 148, 106,
	179, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 139, 0, 0, 0, 0, 262, 0, 0,
	0, 103, 0, 259, 0, 0, 0, 120, 302, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 0, 0, 861, 0, 54, 0,
	0, 260, 281, 280, 283, 284, 285, 286, 0, 0,
	96, 282, 287, 288, 289, 862, 0, 0, 257, 274,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 315, 0, 273,
	203, 0, 268, 269, 270, 275, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 109, 0, 0, 0, 206,
	0, 203, 313, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 812,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 303, 314, 309, 310, 307, 308, 306, 305,
	304, 316, 295, 296, 297, 298, 300, 0, 311, 312,
	299, 82, 89, 121, 187, 148, 106, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 421,
	410, 0, 381, 424, 359, 373, 432, 374, 375, 403,
	345, 389, 139, 371, 0, 362, 340, 368, 341, 360,
	383, 103, 386, 358, 412, 392, 423, 120, 430, 122,
	397, 0, 160, 131, 0, 0, 385, 414, 387, 408,
	380, 404, 350, 396, 425, 372, 401, 426, 0, 0,
	0, 80, 0, 870, 871, 812, 0, 0, 0, 0,
	96, 0, 399, 420, 370, 400, 402, 339, 398, 203,
	343, 346, 431, 416, 365, 366, 1055, 0, 0, 0,
	0, 0, 0, 384, 388, 405, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 395, 0, 0,
	0, 347, 344, 0, 0, 382, 0, 0, 0, 349,
	0, 364, 406, 0, 338, 109, 409, 415, 379, 206,
	419, 377, 376, 422, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 413, 361, 369, 99,
	367, 153, 141, 176, 394, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 342, 0, 161, 178, 190, 94,
	357, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 353, 356, 351, 352, 390, 391, 427, 428,
	429, 407, 348, 0, 354, 355, 0, 411, 417, 418,
	393, 82, 89, 121, 187, 148, 106, 179, 421, 410,
	0, 381, 424, 359, 373, 432, 374, 375, 403, 345,
	389, 139, 371, 0, 362, 340, 368, 341, 360, 383,
	103, 386, 358, 412, 392, 423, 120, 430, 122, 397,
	0, 160, 131, 0, 0, 385, 414, 387, 408, 380,
	404, 350, 396, 425, 372, 401, 426, 0, 0, 0,
	80, 0, 870, 871, 0, 0, 0, 0, 0, 96,
	0, 399, 420, 370, 400, 402, 339, 398, 0, 343,
	346, 431, 416, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 384, 388, 405, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 395, 0, 0, 0,
	347, 344, 0, 0, 382, 0, 0, 0, 349, 0,
	364, 406, 0, 338, 109, 409, 415, 379, 206, 419,
	377, 376, 422, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 413, 361, 369, 99, 367,
	153, 141, 176, 394, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 342, 0, 161, 178, 190, 94, 357,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 353, 356, 351, 352, 390, 391, 427, 428, 429,
	407, 348, 0, 354, 355, 0, 411, 417, 418, 393,
	82, 89, 121, 187, 148, 106, 179, 421, 410, 0,
	381, 424, 359, 373, 432, 374, 375, 403, 345, 389,
	139, 371, 0, 362, 340, 368, 341, 360, 383, 103,
	386, 358, 412, 392, 423, 120, 430, 122, 397, 0,
	160, 131, 0, 0, 385, 414, 387, 408, 380, 404,
	350, 396, 425, 372, 401, 426, 54, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	399, 420, 370, 400, 402, 339, 398, 0, 343, 346,
	431, 416, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 384, 388, 405, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 395, 0, 0, 0, 347,
	344, 0, 0, 382, 0, 0, 0, 349, 0, 364,
	406, 0, 338, 109, 409, 415, 379, 206, 419, 377,
	376, 422, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 413, 361, 369, 99, 367, 153,
	141, 176, 394, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 186, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 189, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 342, 0, 161, 178, 190, 94, 357, 166,
	185, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 188, 140, 154, 98, 177, 159,
	353, 356, 351, 352, 390, 391, 427, 428, 429, 407,
	348, 0, 354, 355, 0, 411, 417, 418, 393, 82,
	89, 121, 187, 148, 106, 179, 421, 410, 0, 381,
	424, 359, 373, 432, 374, 375, 403, 345, 389, 139,
	371, 0, 362, 340, 368, 341, 360, 383, 103, 386,
	358, 412, 392, 423, 120, 430, 122, 397, 0, 160,
	131, 0, 0, 385, 414, 387, 408, 380, 404, 350,
	396, 425, 372, 401, 426, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 399,
	420, 370, 400, 402, 339, 398, 0, 343, 346, 431,
	416, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	384, 388, 405, 378, 0, 0, 0, 0, 0, 0,
	1122, 0, 363, 0, 395, 0, 0, 0, 347, 344,
	0, 0, 382, 0, 0, 0, 349, 0, 364, 406,
	0, 338, 109, 409, 415, 379, 206, 419, 377, 376,
	422, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 413, 361, 369, 99, 367, 153, 141,
	176, 394, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 342, 0, 161, 178, 190, 94, 357, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 353,
	356, 351, 352, 390, 391, 427, 428, 429, 407, 348,
	0, 354, 355, 0, 411, 417, 418, 393, 82, 89,
	121, 187, 148, 106, 179, 421, 410, 0, 381, 424,
	359, 373, 432, 374, 375, 403, 345, 389, 139, 371,
	0, 362, 340, 368, 341, 360, 383, 103, 386, 358,
	412, 392, 423, 120, 430, 122, 397, 0, 160, 131,
	0, 0, 385, 414, 387, 408, 380, 404, 350, 396,
	425, 372, 401, 426, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 399, 420,
	370, 400, 402, 339, 398, 0, 343, 346, 431, 416,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 384,
	388, 405, 378, 0, 0, 0, 0, 0, 0, 854,
	0, 363, 0, 395, 0, 0, 0, 347, 344, 0,
	0, 382, 0, 0, 0, 349, 0, 364, 406, 0,
	338, 109, 409, 415, 379, 206, 419, 377, 376, 422,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 413, 361, 369, 99, 367, 153, 141, 176,
	394, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	342, 0, 161, 178, 190, 94, 357, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 353, 356,
	351, 352, 390, 391, 427, 428, 429, 407, 348, 0,
	354, 355, 0, 411, 417, 418, 393, 82, 89, 121,
	187, 148, 106, 179, 421, 410, 0, 381, 424, 359,
	373, 432, 374, 375, 403, 345, 389, 139, 371, 0,
	362, 340, 368, 341, 360, 383, 103, 386, 358, 412,
	392, 423, 120, 430, 122, 397, 0, 160, 131, 0,
	0, 385, 414, 387, 408, 380, 404, 350, 396, 425,
	372, 401, 426, 0, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 399, 420, 370,
	400, 402, 339, 398, 0, 343, 346, 431, 416, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 384, 388,
	405, 378, 0, 0, 0, 0, 0, 0, 752, 0,
	363, 0, 395, 0, 0, 0, 347, 344, 0, 0,
	382, 0, 0, 0, 349, 0, 364, 406, 0, 338,
	109, 409, 415, 379, 206, 419, 377, 376, 422, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 413, 361, 369, 99, 367, 153, 141, 176, 394,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	186, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 189, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 342,
	0, 161, 178, 190, 94, 357, 166, 185, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 188, 140, 154, 98, 177, 159, 353, 356, 351,
	352, 390, 391, 427, 428, 429, 407, 348, 0, 354,
	355, 0, 411, 417, 418, 393, 82, 89, 121, 187,
	148, 106, 179, 421, 410, 0, 381, 424, 359, 373,
	432, 374, 375, 403, 345, 389, 139, 371, 0, 362,
	340, 368, 341, 360, 383, 103, 386, 358, 412, 392,
	423, 120, 430, 122, 397, 0, 160, 131, 0, 0,
	385, 414, 387, 408, 380, 404, 350, 396, 425, 372,
	401, 426, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 399, 420, 370, 400,
	402, 339, 398, 0, 343, 346, 431, 416, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 384, 388, 405,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 395, 0, 0, 0, 347, 344, 0, 0, 382,
	0, 0, 0, 349, 0, 364, 406, 0, 338, 109,
	409, 415, 379, 206, 419, 377, 376, 422, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	413, 361, 369, 99, 367, 153, 141, 176, 394, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 186,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 189, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 342, 0,
	161, 178, 190, 94, 357, 166, 185, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	188, 140, 154, 98, 177, 159, 353, 356, 351, 352,
	390, 391, 427, 428, 429, 407, 348, 0, 354, 355,
	0, 411, 417, 418, 393, 82, 89, 121, 187, 148,
	106, 179, 421, 410, 0, 381, 424, 359, 373, 432,
	374, 375, 403, 345, 389, 139, 371, 0, 362, 340,
	368, 341, 360, 383, 103, 386, 358, 412, 392, 423,
	120, 430, 122, 397, 0, 160, 131, 0, 0, 385,
	414, 387, 408, 380, 404, 350, 396, 425, 372, 401,
	426, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 399, 420, 370, 400, 402,
	339, 398, 0, 343, 346, 431, 416, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 384, 388, 405, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	395, 0, 0, 0, 347, 344, 0, 0, 382, 0,
	0, 0, 349, 0, 364, 406, 0, 338, 109, 409,
	415, 379, 206, 419, 377, 376, 422, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 413,
	361, 369, 99, 367, 153, 141, 176, 394, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 342, 0, 161,
	178, 190, 94, 357, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 353, 356, 351, 352, 390,
	391, 427, 428, 429, 407, 348, 0, 354, 355, 0,
	411, 417, 418, 393, 82, 89, 121, 187, 148, 106,
	179, 421, 410, 0, 381, 424, 359, 373, 432, 374,
	375, 403, 345, 389, 139, 371, 0, 362, 340, 368,
	341, 360, 383, 103, 386, 358, 412, 392, 423, 120,
	430, 122, 397, 0, 160, 131, 0, 0, 385, 414,
	387, 408, 380, 404, 350, 396, 425, 372, 401, 426,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 399, 420, 370, 400, 402, 339,
	398, 0, 343, 346, 431, 416, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 384, 388, 405, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 395,
	0, 0, 0, 347, 344, 0, 0, 382, 0, 0,
	0, 349, 0, 364, 406, 0, 338, 109, 409, 415,
	379, 206, 419, 377, 376, 422, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 413, 361,
	369, 99, 367, 153, 141, 176, 394, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 336, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 342, 0, 161, 178,
	190, 94, 357, 166, 185, 0, 0, 95, 108, 104,
	143, 337, 335, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 353, 356, 351, 352, 390, 391,
	427, 428, 429, 407, 348, 0, 354, 355, 0, 411,
	417, 418, 393, 82, 89, 121, 187, 148, 106, 179,
	421, 410, 0, 381, 424, 359, 373, 432, 374, 375,
	403, 345, 389, 139, 371, 0, 362, 340, 368, 341,
	360, 383, 103, 386, 358, 412, 392, 423, 120, 430,
	122, 397, 0, 160, 131, 0, 0, 385, 414, 387,
	408, 380, 404, 350, 396, 425, 372, 401, 426, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 399, 420, 370, 400, 402, 339, 398,
	0, 343, 346, 431, 416, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 384, 388, 405, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 395, 0,
	0, 0, 347, 344, 0, 0, 382, 0, 0, 0,
	349, 0, 364, 406, 0, 338, 109, 409, 415, 379,
	206, 419, 377, 376, 422, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 413, 361, 369,
	99, 367, 153, 141, 176, 394, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 186, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 189,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 342, 0, 161, 178, 190,
	94, 357, 166, 185, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 188, 140, 154,
	98, 177, 159, 353, 356, 351, 352, 390, 391, 427,
	428, 429, 407, 348, 0, 354, 355, 0, 411, 417,
	418, 393, 82, 89, 121, 187, 148, 106, 179, 421,
	410, 0, 381, 424, 359, 373, 432, 374, 375, 403,
	345, 389, 139, 371, 0, 362, 340, 368, 341, 360,
	383, 103, 386, 358, 412, 392, 423, 120, 430, 122,
	397, 0, 160, 131, 0, 0, 385, 414, 387, 408,
	380, 404, 350, 396, 425, 372, 401, 426, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 399, 420, 370, 400, 402, 339, 398, 0,
	343, 346, 431, 416, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 384, 388, 405, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 395, 0, 0,
	0, 347, 344, 0, 0, 382, 0, 0, 0, 349,
	0, 364, 406, 0, 338, 109, 409, 415, 379, 206,
	419, 377, 376, 422, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 413, 361, 369, 99,
	367, 153, 141, 176, 394, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 620,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 336, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 342, 0, 161, 178, 190, 94,
	357, 166, 185, 0, 0, 95, 108, 104, 143, 337,
	335, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 353, 356, 351, 352, 390, 391, 427, 428,
	429, 407, 348, 0, 354, 355, 0, 411, 417, 418,
	393, 82, 89, 121, 187, 148, 106, 179, 421, 410,
	0, 381, 424, 359, 373, 432, 374, 375, 403, 345,
	389, 139, 371, 0, 362, 340, 368, 341, 360, 383,
	103, 386, 358, 412, 392, 423, 120, 430, 122, 397,
	0, 160, 131, 0, 0, 385, 414, 387, 408, 380,
	404, 350, 396, 425, 372, 401, 426, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 399, 420, 370, 400, 402, 339, 398, 0, 343,
	346, 431, 416, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 384, 388, 405, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 395, 0, 0, 0,
	347, 344, 0, 0, 382, 0, 0, 0, 349, 0,
	364, 406, 0, 338, 109, 409, 415, 379, 206, 419,
	377, 376, 422, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 413, 361, 369, 99, 367,
	153, 141, 176, 394, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 327, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 336, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 342, 0, 161, 178, 190, 94, 357,
	166, 185, 0, 0, 95, 108, 104, 143, 337, 335,
	330, 329, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 353, 356, 351, 352, 390, 391, 427, 428, 429,
	407, 348, 0, 354, 355, 0, 411, 417, 418, 393,
	82, 89, 121, 187, 148, 106, 179, 139, 0, 0,
	788, 0, 262, 0, 0, 0, 103, 0, 259, 0,
	0, 0, 120, 302, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 260, 281, 280, 283,
	284, 285, 286, 0, 0, 96, 282, 287, 288, 289,
	0, 0, 0, 257, 274, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 272, 253, 0,
	0, 0, 315, 0, 273, 0, 0, 268, 269, 270,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 206, 0, 0, 313, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	186, 157, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 189, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 190, 94, 0, 166, 185, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 188, 140, 154, 98, 177, 159, 303, 314, 309,
	310, 307, 308, 306, 305, 304, 316, 295, 296, 297,
	298, 300, 0, 311, 312, 299, 82, 89, 121, 187,
	148, 106, 179, 139, 0, 0, 0, 0, 262, 0,
	0, 0, 103, 0, 259, 0, 0, 0, 120, 302,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 493, 260, 281, 280, 283, 284, 285, 286, 0,
	0, 96, 282, 287, 288, 289, 0, 0, 0, 257,
	274, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 315, 0,
	273, 0, 0, 268, 269, 270, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	206, 0, 0, 313, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 186, 157, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 189,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 190,
	94, 0, 166, 185, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 188, 140, 154,
	98, 177, 159, 303, 314, 309, 310, 307, 308, 306,
	305, 304, 316, 295, 296, 297, 298, 300, 0, 311,
	312, 299, 82, 89, 121, 187, 148, 106, 179, 139,
	0, 0, 0, 0, 262, 0, 0, 0, 103, 0,
	259, 0, 0, 0, 120, 302, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 260, 281,
	280, 283, 284, 285, 286, 0, 0, 96, 282, 287,
	288, 289, 0, 0, 0, 257, 274, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 272,
	253, 0, 0, 0, 315, 0, 273, 0, 0, 268,
	269, 270, 275, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 206, 0, 0, 313,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 190, 94, 0, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 303,
	314, 309, 310, 307, 308, 306, 305, 304, 316, 295,
	296, 297, 298, 300, 0, 311, 312, 299, 82, 89,
	121, 187, 148, 106, 179, 139, 0, 0, 0, 0,
	262, 0, 0, 0, 103, 0, 259, 0, 0, 0,
	120, 302, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 260, 281, 803, 283, 284, 285,
	286, 0, 0, 96, 282, 287, 288, 289, 0, 0,
	0, 257, 274, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 272, 253, 0, 0, 0,
	315, 0, 273, 0, 0, 268, 269, 270, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 313, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 303, 314, 309, 310, 307,
	308, 306, 305, 304, 316, 295, 296, 297, 298, 300,
	0, 311, 312, 299, 82, 89, 121, 187, 148, 106,
	179, 139, 0, 0, 0, 0, 262, 0, 0, 0,
	103, 0, 259, 0, 0, 0, 120, 302, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	260, 281, 800, 283, 284, 285, 286, 0, 0, 96,
	282, 287, 288, 289, 0, 0, 0, 257, 274, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 272, 253, 0, 0, 0, 315, 0, 273, 0,
	0, 268, 269, 270, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 313, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 303, 314, 309, 310, 307, 308, 306, 305, 304,
	316, 295, 296, 297, 298, 300, 24, 311, 312, 299,
	82, 89, 121, 187, 148, 106, 179, 0, 139, 0,
	0, 0, 0, 262, 0, 0, 0, 103, 0, 259,
	0, 0, 0, 120, 302, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 260, 281, 280,
	283, 284, 285, 286, 0, 0, 96, 282, 287, 288,
	289, 0, 0, 0, 257, 274, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 272, 0,
	0, 0, 0, 315, 0, 273, 0, 0, 268, 269,
	270, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 313, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 303, 314,
	309, 310, 307, 308, 306, 305, 304, 316, 295, 296,
	297, 298, 300, 0, 311, 312, 299, 82, 89, 121,
	187, 148, 106, 179, 139, 0, 0, 0, 0, 262,
	0, 0, 0, 103, 0, 259, 0, 0, 0, 120,
	302, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	293, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 260, 281, 280, 283, 284, 285, 286,
	0, 0, 96, 282, 287, 288, 289, 0, 0, 0,
	257, 274, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 315,
	0, 273, 0, 0, 268, 269, 270, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 313, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 303, 314, 309, 310, 307, 308,
	306, 305, 304, 316, 295, 296, 297, 298, 300, 0,
	311, 312, 299, 82, 89, 121, 187, 148, 106, 179,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 120, 302, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 293, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 260,
	281, 280, 283, 284, 285, 286, 0, 0, 96, 282,
	287, 288, 289, 0, 0, 0, 0, 274, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	272, 0, 0, 0, 0, 315, 0, 273, 0, 0,
	268, 269, 270, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 206, 0, 0,
	313, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 1421, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 186, 157, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 189, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 190, 94, 0, 166,
	185, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 188, 140, 154, 98, 177, 159,
	303, 314, 309, 310, 307, 308, 306, 305, 304, 316,
	295, 296, 297, 298, 300, 0, 311, 312, 299, 82,
	89, 121, 187, 148, 106, 179, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 120, 302, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 493, 260, 281, 280, 283, 284,
	285, 286, 0, 0, 96, 282, 287, 288, 289, 0,
	0, 0, 0, 274, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 272, 0, 0, 0,
	0, 315, 0, 273, 0, 0, 268, 269, 270, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 206, 0, 0, 313, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 186,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 189, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 190, 94, 0, 166, 185, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	188, 140, 154, 98, 177, 159, 303, 314, 309, 310,
	307, 308, 306, 305, 304, 316, 295, 296, 297, 298,
	300, 0, 311, 312, 299, 82, 89, 121, 187, 148,
	106, 179, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 302, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 260, 281, 280, 283, 284, 285, 286, 0, 0,
	96, 282, 287, 288, 289, 0, 0, 0, 0, 274,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 315, 0, 273,
	0, 0, 268, 269, 270, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 313, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 303, 314, 309, 310, 307, 308, 306, 305,
	304, 316, 295, 296, 297, 298, 300, 0, 311, 312,
	299, 82, 89, 121, 187, 148, 106, 179, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 527, 526, 536, 537, 529, 530, 531,
	532, 533, 534, 535, 528, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	187, 148, 106, 179, 139, 0, 0, 0, 515, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 517, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 512, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 187, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 76, 77, 0, 73, 0,
	0, 0, 78, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 75, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	187, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 89, 121, 187, 148, 106,
	179, 139, 0, 0, 0, 844, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 846, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 842, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	739, 0, 0, 740, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	187, 148, 106, 179, 103, 0, 629, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 628, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 187, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 187, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	846, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 206, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 190, 94, 0, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 187, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 517, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 206, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 186,
	157, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 189, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 190, 94, 0, 166, 185, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	188, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 82, 89, 121, 187, 148,
	106, 179, 599, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 206, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 186, 157, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	189, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	190, 94, 0, 166, 185, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 188, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 187, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 206, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 186, 157, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 189, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 190, 94, 0,
	166, 185, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 188, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 187, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 201, 0, 206, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 186, 157, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 189, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 190, 94, 0, 166, 185, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 188, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	187, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 206, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 186, 157,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 189, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 190, 94, 0, 166, 185, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 188,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 187, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 206,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 186, 157, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 189, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 190, 94,
	0, 166, 185, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 188, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 187, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 206, 0, 0, 0,
	0, 146, 655, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 186, 157, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 189, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	643, 0, 0, 161, 178, 190, 94, 0, 166, 185,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 188, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 187, 148, 106, 179, 0, 0, 0, 0, 0,
	669, 672, 673, 674, 675, 676, 677, 0, 678, 679,
	680, 681, 682, 657, 658, 659, 660, 641, 642, 670,
	0, 644, 0, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 661, 662, 663, 664, 665, 666, 667,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671,
}
var yyPact = [...]int{

	1469, -1000, -179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 925, 971, -1000, -1000, -1000, -1000, -1000, -1000,
	353, 8963, -1, 136, -6, 11580, 135, 1582, 12054, -1000,
	-9, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -80, -92,
	-1000, 715, -1000, -1000, -1000, -1000, -1000, 920, 923, 761,
	911, 818, -1000, 6511, 101, 101, 11343, 5773, -1000, -1000,
	352, 12054, 129, 12054, -145, 91, 91, 91, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 133, 12054, 221, -1000, 12054, 82, 570, 82, 82,
	82, 12054, -1000, 187, -1000, -1000, -1000, 12054, 563, 868,
	3442, 50, 3442, -1000, 3442, 3442, -1000, 3442, 1, 3442,
	-70, 936, -22, -1000, 3442, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 518, 880,
	7496, 7496, 925, -1000, 715, -1000, -1000, -1000, 849, -1000,
	-1000, 397, 958, -1000, 8726, 185, -1000, 7496, 1769, 695,
	-1000, -1000, 695, -1000, -1000, 148, -1000, -1000, 8234, 8234,
	8234, 8234, 8234, 8234, 8234, 8234, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	695, -1000, 7250, 695, 695, 695, 695, 695, 695, 695,
	695, 7496, 695, 695, 695, 695, 695, 695, 695, 695,
	695, 695, 695, 695, 695, 695, 695, 11106, 10394, 12054,
	680, 677, -1000, -1000, 180, 709, 5514, -109, -1000, -1000,
	-1000, 336, 10157, -1000, -1000, -1000, 847, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 646, 12054, -1000, 12392, -1000, 558, 3442,
	107, 550, 365, 531, 12054, 12054, 3442, 5, 66, 35,
	12054, 716, 105, 12054, 897, 791, 12054, 529, 527, -1000,
	5255, -1000, 3442, 3442, -1000, -1000, -1000, 3442, 3442, 3442,
	12054, 3442, 3442, -1000, -1000, -1000, -1000, 3442, 3442, -1000,
	957, 323, -1000, -1000, -1000, -1000, 7496, -1000, 790, -1000,
	-1000, -1000, -1000, -1000, -1000, 966, 223, 517, 175, 713,
	-1000, 498, 920, 518, 818, 9920, 801, -1000, -1000, 12054,
	-1000, 7496, 7496, 416, -1000, 10868, -1000, -1000, 4219, 236,
	8234, 423, 305, 8234, 8234, 8234, 8234, 8234, 8234, 8234,
	8234, 8234, 8234, 8234, 8234, 8234, 8234, 8234, 450, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 519, -1000, 715,
	694, 694, 195, 195, 195, 195, 195, 195, 195, 8480,
	6019, 518, 628, 344, 7250, 6511, 6511, 7496, 7496, 7003,
	6757, 6511, 915, 360, 344, 12291, -1000, -1000, 7988, -1000,
	-1000, -1000, -1000, -1000, 518, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11817, 11817, 6511, 6511, 6511, 6511, 41, 12054,
	-1000, 696, 731, -1000, -1000, -1000, 900, 9437, 9683, 41,
	586, 10394, 12054, -1000, -1000, 10394, 12054, 3960, 4996, 709,
	-109, 673, -1000, -107, -122, 2624, 189, -1000, -1000, -1000,
	-1000, 3183, 351, 579, 382, -74, -1000, -1000, -1000, 729,
	-1000, 729, 729, 729, 729, -42, -42, -42, -42, -1000,
	-1000, -1000, -1000, -1000, 769, 764, -1000, 729, 729, 729,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 759, 759,
	759, 739, 739, 778, -1000, 12054, 3442, 895, 3442, -1000,
	83, -1000, 11817, 11817, 12054, 12054, 12054, 143, 12054, 12054,
	708, -1000, 12054, 3442, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12054,
	386, 12054, 12054, 344, 12054, -1000, 831, 7496, 7496, 4737,
	7496, -1000, -1000, -1000, 880, -1000, 915, 924, -1000, 841,
	838, 6511, -1000, -1000, 236, 338, -1000, -1000, 390, -1000,
	-1000, -1000, -1000, 166, 695, -1000, 1952, -1000, -1000, -1000,
	-1000, 423, 8234, 8234, 8234, 145, 1952, 1935, 1071, 1413,
	195, 451, 451, 197, 197, 197, 197, 197, 395, 395,
	-1000, -1000, -1000, 518, -1000, -1000, -1000, 518, 6511, 679,
	-1000, -1000, 7496, -1000, 518, 615, 615, 376, 364, 271,
	941, 615, 269, 939, 615, 615, 6511, 350, -1000, 7496,
	518, -1000, 163, -1000, 704, 676, 674, 615, 518, 615,
	615, 780, 695, -1000, 12291, 10394, 10394, 10394, 10394, 10394,
	-1000, 815, 812, -1000, 805, 804, 811, 12054, -1000, 619,
	9437, 171, 695, -1000, 10631, -1000, -1000, 935, 10394, 660,
	-1000, 660, -1000, 156, -1000, -1000, 673, -109, -128, -1000,
	-1000, -1000, -1000, 344, -1000, 488, 672, 2924, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 755, 512, -1000, 884, 229,
	226, 510, 881, -1000, -1000, -1000, 850, -1000, 373, -76,
	-1000, -1000, 455, -42, -42, -1000, -1000, 189, 846, 189,
	189, 189, 483, 483, -1000, -1000, -1000, -1000, 454, -1000,
	-1000, -1000, 453, -1000, 787, 11817, 3442, -1000, -1000, -1000,
	-1000, 179, 179, 202, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39, 771, -1000, -1000, -1000,
	-1000, -16, 0, 103, -1000, 3442, -1000, 323, -1000, 482,
	7496, -1000, -1000, -1000, 827, 344, 344, 155, -1000, -1000,
	12054, -1000, -1000, -1000, -1000, 703, -1000, -1000, -1000, 3701,
	6511, -1000, 145, 1952, 1654, -1000, 8234, 8234, -1000, -1000,
	615, 6511, 344, -1000, -1000, -1000, 383, 450, 383, 8234,
	8234, -1000, 8234, 8234, -1000, -158, 692, 270, -1000, 7496,
	250, -1000, 4737, -1000, 8234, 8234, -1000, -1000, -1000, -1000,
	785, 12291, 695, -1000, 9200, 11817, 664, -1000, 311, 731,
	768, 784, 914, -1000, -1000, -1000, -1000, 808, -1000, 806,
	-1000, -1000, -1000, -1000, -1000, 127, 126, 113, 11817, -1000,
	925, 7496, 660, -1000, -1000, 208, -1000, -1000, -117, -131,
	-1000, -1000, -1000, 3183, -1000, 3183, 11817, 71, -1000, 510,
	510, -1000, -1000, -1000, 742, 783, 8234, -1000, -1000, -1000,
	569, 189, 189, -1000, 283, -1000, -1000, -1000, 603, -1000,
	601, 669, 599, 12054, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12054, -1000, -1000, -1000, -1000, -1000, 11817, -167, 508, 11817,
	11817, 11817, 12054, -1000, 386, -1000, 344, -1000, 4478, -1000,
	935, 10394, -1000, -1000, 518, -1000, 8234, 1952, 1952, -1000,
	-1000, 518, 729, 729, -1000, 729, 739, -1000, 729, -18,
	729, -19, 518, 518, 1903, 1868, 1839, 1576, 695, -152,
	-1000, 344, 7496, -1000, 1547, 1442, -1000, 888, 654, 655,
	-1000, -1000, 6265, 518, 595, 154, 578, -1000, 925, 12291,
	7496, -1000, -1000, 7496, 736, -1000, 7496, -1000, -1000, -1000,
	695, 695, 695, 578, 920, 344, -1000, -1000, -1000, -1000,
	2924, -1000, 575, -1000, 729, -1000, -1000, -1000, 11817, -65,
	965, 1952, -1000, -1000, -1000, -1000, -1000, -42, 473, -42,
	444, -1000, 422, 3442, -1000, -1000, -1000, -1000, 882, -1000,
	4478, -1000, -1000, 728, 772, -1000, -1000, -1000, 932, 662,
	-1000, 1952, -1000, -1000, 96, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8234, 8234, 8234, 8234, 8234, 518, 467,
	344, 8234, 8234, 879, -1000, 695, -1000, -1000, 712, 11817,
	11817, -1000, 11817, 920, -1000, 344, 344, 11817, 344, 11817,
	11817, 11817, 2347, -1000, 161, 11817, -1000, 568, -1000, 184,
	-1000, -111, 189, -1000, 189, 549, 543, -1000, 695, 658,
	-1000, 263, 11817, 12054, 930, 922, -1000, -1000, 704, 704,
	704, 704, 84, -1000, -1000, 704, 704, 964, -1000, 695,
	-1000, 715, 153, -1000, -1000, -1000, 548, 542, 542, 542,
	171, 161, -1000, 491, 260, 461, -1000, 58, 11817, 378,
	875, -1000, 873, -1000, -1000, -1000, -1000, -1000, 16, 4478,
	3183, 536, -1000, -1000, 7496, 7496, -1000, -1000, -1000, -1000,
	518, 47, -171, -1000, -1000, 12291, 655, 518, 11817, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 414, -1000, -1000, 12054,
	-1000, -1000, 396, -1000, -1000, 525, -1000, 11817, -1000, -1000,
	771, 344, 606, -1000, 826, -165, -174, 590, -1000, -1000,
	-1000, 727, -1000, -1000, 16, 837, -167, -1000, 821, -1000,
	11817, -1000, 12, -1000, -169, 501, 9, -172, 781, 695,
	-176, 770, -1000, 955, 7742, -1000, -1000, 962, 196, 196,
	704, 518, -1000, -1000, -1000, 69, 437, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1212, 45, 519, 1209, 1208, 1206, 1200, 1198, 1197,
	1192, 1189, 1188, 1187, 1186, 1185, 1182, 1181, 1180, 1179,
	1160, 1158, 1157, 1152, 1150, 1149, 142, 1148, 1147, 1145,
	76, 1143, 70, 1142, 1141, 48, 413, 52, 44, 953,
	1140, 24, 71, 66, 1139, 38, 1138, 1137, 82, 1136,
	1134, 55, 1132, 1131, 92, 1130, 73, 1128, 12, 30,
	1127, 1126, 1125, 1124, 77, 467, 1123, 1118, 15, 1117,
	1116, 95, 1115, 57, 10, 14, 22, 27, 1114, 100,
	7, 1109, 56, 1108, 1106, 1104, 1103, 21, 1102, 54,
	1100, 18, 59, 1086, 9, 75, 31, 25, 8, 87,
	60, 1083, 26, 63, 47, 1082, 1081, 452, 1080, 1079,
	58, 1078, 1077, 29, 148, 434, 1075, 1072, 1071, 1068,
	42, 0, 874, 432, 69, 1067, 1066, 1065, 1629, 40,
	50, 17, 1063, 33, 174, 43, 1059, 1058, 41, 1055,
	1052, 1050, 1049, 1048, 1044, 1042, 20, 1041, 1040, 1038,
	19, 23, 1037, 1036, 64, 28, 1034, 1033, 1032, 51,
	65, 1029, 1028, 53, 37, 1027, 1025, 1024, 1022, 1017,
	34, 13, 1014, 16, 1013, 4, 1012, 35, 1009, 5,
	990, 11, 989, 2, 987, 6, 49, 3, 986, 1,
	982, 981, 61, 601, 83, 977, 115,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 194, 194, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 136, 136, 11, 11, 11, 11, 11,
	11, 11, 185, 185, 184, 183, 183, 182, 182, 181,
	17, 166, 168, 168, 167, 167, 167, 167, 160, 139,
	139, 139, 139, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 145,
	145, 145, 145, 145, 145, 145, 145, 159, 159, 146,
	146, 154, 154, 155, 155, 155, 152, 152, 153, 153,
	156, 156, 156, 148, 148, 149, 149, 157, 157, 150,
	150, 150, 151, 151, 151, 158, 158, 158, 158, 158,
	147, 147, 161, 161, 176, 176, 175, 175, 175, 165,
	165, 172, 172, 172, 172, 172, 163, 163, 164, 164,
	174, 174, 173, 162, 162, 177, 177, 177, 177, 188,
	189, 187, 187, 187, 187, 187, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 180, 178, 178, 179, 179, 13, 18, 18, 14,
	14, 14, 14, 14, 15, 15, 19, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 111, 111, 109, 109, 112, 112,
	110, 110, 110, 113, 113, 113, 137, 137, 137, 21,
	21, 23, 23, 24, 25, 22, 22, 22, 22, 22,
	22, 22, 16, 195, 26, 27, 27, 28, 28, 28,
	32, 32, 32, 30, 30, 31, 31, 37, 37, 36,
	36, 38, 38, 38, 38, 125, 125, 125, 124, 124,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	57, 57, 94, 94, 96, 96, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 132, 132, 131, 131,
	131, 130, 130, 50, 50, 50, 52, 51, 51, 51,
	51, 53, 53, 55, 55, 54, 54, 56, 58, 58,
	58, 58, 59, 59, 39, 39, 39, 39, 39, 39,
	39, 108, 108, 61, 61, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 72, 72, 72, 72, 72,
	72, 62, 62, 62, 62, 62, 62, 62, 35, 35,
	73, 73, 73, 79, 74, 74, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 69, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	196, 196, 71, 70, 70, 70, 70, 70, 70, 33,
	33, 33, 33, 33, 135, 135, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 83,
	83, 34, 34, 81, 81, 82, 84, 84, 80, 80,
	80, 64, 64, 64, 64, 64, 64, 64, 64, 66,
	66, 66, 85, 85, 86, 86, 87, 87, 88, 88,
	89, 90, 90, 90, 91, 91, 91, 91, 92, 92,
	92, 63, 63, 63, 63, 63, 63, 93, 93, 93,
	93, 97, 97, 75, 75, 77, 77, 76, 78, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 101, 101,
	101, 127, 127, 127, 106, 106, 114, 114, 115, 115,
	107, 107, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 118, 118, 119, 119, 119,
	126, 126, 122, 122, 123, 123, 128, 128, 129, 129,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 192, 193, 133, 134, 134,
	134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 3,
	3, 5, 2, 3, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 1, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 163,
	164, 166, 167, 25, 143, 144, 147, 148, 31, 32,
	121, -192, 8, 247, 54, -191, 264, -87, 15, -28,
	5, -26, -195, -26, -26, -26, -26, -26, -166, -168,
	54, 90, -119, 125, 72, 239, 122, 123, 129, -122,
	57, -121, 257, 135, 163, 174, 168, 195, 187, 258,
	136, 185, 188, 226, 215, 221, 66, 166, 235, 145,
	183, 179, 177, 27, 223, 200, 262, 178, 222, 121,
	138, 133, 201, 205, 227, 172, 173, 229, 199, 134,
	33, 259, 35, 153, 230, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 225, 190, 139, 180, 18,
	233, 148, 151, 224, 202, 204, 130, 155, 261, 231,
	176, 140, 152, 147, 234, 141, 167, 162, 228, 237,
	38, 212, 170, 132, 164, 159, 217, 191, 154, 181,
	182, 196, 169, 192, 165, 156, 149, 236, 213, 263,
	189, 186, 160, 157, 158, 218, 161, 260, 232, 184,
	214, -107, 125, 218, 127, 123, 123, 124, 125, 239,
	122, 123, -54, -128, 57, -121, 125, 123, 108, 188,
	226, 115, 216, 223, 124, 33, 224, 155, -137, 123,
	-109, 215, 218, 161, 57, 228, 227, 219, -128, 165,
	-133, -133, -133, -133, -133, 217, 217, -133, -2, -91,
	17, 16, -5, -3, -192, 6, 20, 21, -32, 40,
	41, -27, -38, 99, -39, -128, -60, 74, -65, 29,
	57, -121, 23, -64, -61, -80, -78, -79, 108, 109,
	110, 97, 98, 105, 75, 111, -69, -67, -68, -70,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-122, -76, -192, 44, 45, 248, 249, 250, 251, 256,
	252, 77, 34, 238, 246, 245, 244, 242, 243, 240,
	241, 254, 255, 128, 239, 103, 247, -107, -107, 11,
	-48, -49, -54, -56, -128, -99, -136, 165, -103, 228,
	227, -123, -101, -122, -120, 226, 188, 225, 120, 73,
	22, 24, 210, 76, 108, 16, 77, 107, 248, 115,
	48, 240, 241, 238, 250, 251, 239, 216, 29, 10,
	25, 143, 21, 101, 117, 80, 81, 146, 23, 144,
	70, 19, 51, 11, 13, 14, 128, 127, 92, 124,
	46, 8, 111, 26, 89, 42, 28, 44, 90, 17,
	242, 243, 31, 256, 150, 103, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 118, 247, 45, 122,
	6, 253, 30, 142, 43, 123, 79, 254, 255, 126,
	69, 5, 129, 32, 9, 50, 53, 244, 245, 246,
	34, 78, 12, -167, 90, -160, 57, -54, 124, -54,
	247, -115, 128, -115, -115, 123, -54, 115, 117, 120,
	52, -18, -54, -114, 128, 57, -114, -114, -114, -54,
	112, -54, 57, 30, -134, -192, -123, 239, 57, 155,
	123, 156, 125, -134, -134, -134, -134, 159, 160, -134,
	-112, -111, 221, 222, 217, 220, 12, 217, 158, -134,
	-133, -133, -193, 56, -92, 19, 31, -39, -128, -88,
	-89, -39, -87, -2, -26, 36, -30, 21, 65, 11,
	-125, 73, 72, 89, -124, 22, -122, 59, 112, -39,
	-62, 92, 74, 90, 91, 76, 94, 93, 104, 97,
	98, 99, 100, 101, 102, 103, 95, 96, 107, 82,
	83, 84, 85, 86, 87, 88, -108, -192, -79, -192,
	113, 114, -65, -65, -65, -65, -65, -65, -65, -65,
	-192, -2, -74, -39, -192, -192, -192, -192, -192, -192,
	-192, -192, -192, -83, -39, -192, -196, -71, -192, -196,
	-71, -196, -71, -196, -192, -196, -71, -196, -71, -196,
	-196, -71, -192, -192, -192, -192, -192, -192, -55, 26,
	-54, -41, -42, -43, -44, -57, -79, -192, -54, -54,
	-48, -194, 55, 11, 53, -194, 55, 112, 55, -99,
	165, -100, -104, 229, 231, 82, -127, -122, 59, 29,
	30, 56, 55, -54, -139, -142, -144, -143, -145, -140,
	-141, 185, 186, 108, 189, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 30, 145, 181, 182, 183,
	184, 201, 202, 203, 204, 205, 206, 207, 208, 168,
	187, 258, 169, 170, 171, 172, 173, 174, 176, 177,
	178, 179, 180, 57, -134, 125, 57, 74, 57, -54,
	-54, -134, 157, 157, 123, 123, 162, -54, 55, 126,
	-48, 23, 52, -54, 57, 57, -129, -128, -120, -134,
	-134, -134, -134, -134, -54, -134, -134, -134, -134, 11,
	-110, 11, 92, -39, 52, 9, 92, 55, 18, 112,
	55, -90, 24, 25, -91, -193, -32, -66, -122, 60,
	63, -31, 43, -54, -39, -39, -72, 68, 74, 69,
	70, -124, 99, -129, -123, -120, -65, -73, -76, -79,
	64, 92, 90, 91, 76, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-135, 57, 59, 57, -64, -64, -122, -37, 21, -36,
	-38, -193, 55, -193, -2, -36, -36, -39, -39, -80,
	59, -36, -80, 59, -36, -36, -30, -81, -82, 78,
	-80, -122, -128, -193, -65, -122, -122, -36, -37, -36,
	-36, -95, 151, -54, 30, 55, -50, -52, -51, -53,
	42, 46, 48, 43, 44, 45, 49, -132, 22, -41,
	-192, -131, 151, -130, 22, -128, 59, -95, 53, -41,
	-54, -41, -56, -128, 99, -103, -100, 55, 230, 232,
	233, 52, 71, -39, -151, 107, -169, -170, -171, -123,
	59, 60, -160, -161, -162, -172, 137, -177, 130, 132,
	129, -163, 138, 124, 28, 56, -156, 68, 74, -152,
	213, -146, 54, -146, -146, -146, -146, -150, 188, -150,
	-150, -150, 54, 54, -146, -146, -146, -154, 54, -154,
	-154, -155, 54, -155, -126, 53, -54, -134, 23, -134,
	-116, 120, 117, 118, -180, 116, 210, 188, 66, 29,
	15, 248, 151, 263, 57, 152, -122, -122, -54, -54,
	-54, 120, 117, -54, -54, -54, -134, -54, -113, 90,
	12, -128, -128, -54, 38, -39, -39, -129, -89, -92,
	-106, 19, 11, 34, 34, -36, 68, 69, 70, 112,
	-192, -73, -65, -65, -65, -35, 146, 73, -193, -193,
	-36, 55, -39, -193, -193, -193, 55, 53, 22, 11,
	11, -193, 11, 11, -193, -193, -36, -84, -82, 80,
	-39, -193, 112, -193, 55, 55, -193, -193, -193, -193,
	-63, 30, 34, -2, -192, -192, -98, -102, -80, -42,
	-43, -43, -42, -43, 42, 42, 42, 47, 42, 47,
	42, -51, -128, -193, -58, 50, 127, 51, -192, -130,
	-59, 12, -41, -59, -59, 112, -104, -105, 234, 231,
	237, 57, 59, 55, -171, 82, 54, 57, 28, -163,
	-163, -164, 57, -164, 28, -148, 29, 68, -153, 214,
	60, -150, -150, -151, 30, -151, -151, -151, -159, 59,
	-159, 60, 60, 52, -122, -134, -133, -186, 131, 137,
	138, 133, 57, 124, 28, 130, 132, 151, 129, -186,
	-117, -118, 126, 22, 124, 28, 151, -185, 53, 157,
	210, 157, 126, -134, -110, 59, -39, 39, 112, -54,
	-40, 11, 99, -123, -37, -35, 73, -65, -65, -193,
	-38, -138, 108, 185, 145, 183, 179, 199, 190, 212,
	181, 213, -135, -138, -65, -65, -65, -65, 257, -87,
	81, -39, 79, -123, -65, -65, -97, 52, -98, -75,
	-77, -76, -192, -2, -93, -122, -96, -122, -59, 55,
	82, -46, -45, 52, 53, -47, 52, -45, 42, 42,
	124, 124, 124, -96, -87, -39, -59, 231, 235, 236,
	-170, -171, -174, -173, -122, -177, -164, -164, 54, -149,
	52, -65, 56, -151, -151, 57, 108, 56, 55, 56,
	55, 56, 55, -54, -133, -133, -54, -133, -122, -183,
	260, -184, 57, -122, -122, -122, -54, -113, -59, -41,
	-193, -65, -193, -146, -146, -146, -155, -146, 173, -146,
	173, -193, -193, 19, 19, 19, 19, -192, -34, 253,
	-39, 55, 55, 27, -97, 55, -193, -193, -193, 55,
	112, -193, 55, -87, -102, -39, -39, 54, -39, -192,
	-192, -192, -193, -91, 56, 55, -146, -94, -122, -157,
	210, 9, -150, 59, -150, 60, 60, -134, 26, -182,
	-181, -123, 54, 53, -85, 13, -150, 57, -65, -65,
	-65, -65, -65, -193, 59, -65, -65, 28, -77, 34,
	-2, -192, -122, -122, -122, -91, -94, -94, -94, -94,
	-131, -176, -175, 53, 134, 66, -173, 56, 55, -158,
	130, 28, 129, -68, -151, -151, 56, 56, -192, 55,
	82, -94, -54, -86, 14, 16, -193, -193, -193, -193,
	-33, 92, 260, -193, -193, 9, -75, -2, 112, 56,
	-193, -193, -193, -58, -175, 57, -165, 82, 59, 140,
	-122, -147, 66, 28, 28, -178, -179, 151, -181, -171,
	56, -39, -74, -193, 258, 49, 261, -98, -193, -122,
	60, -54, 59, -193, 55, -122, -185, 39, 259, 262,
	54, -179, 34, -183, 39, -94, 153, 260, 56, 154,
	261, -188, -189, 52, -192, 262, -189, 52, 10, 9,
	-65, 150, -187, 141, 136, 139, 30, -187, -193, -193,
	135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 556, 0, 313, 313, 313, 313, 313, 313,
	0, 627, 610, 0, 0, 0, 0, -2, 300, 301,
	0, 303, 304, 847, 847, 847, 847, 847, 0, 0,
	847, 0, 35, 36, 845, 1, 3, 564, 0, 0,
	317, 320, 315, 0, 610, 610, 0, 0, 65, 66,
	0, 0, 0, 836, 0, 608, 608, 608, 628, 629,
	632, 633, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 837, 838, 839, 840, 841, 842, 843,
	844, 0, 0, 0, 611, 0, 606, 0, 606, 606,
	606, 0, 255, 385, 636, 637, 836, 0, 0, 0,
	848, 0, 848, 267, 848, 848, 270, 848, 0, 848,
	0, 277, 0, 282, 848, 297, 298, 287, 299, 302,
	305, 306, 307, 308, 309, 847, 847, 312, 29, 568,
	0, 0, 556, 31, 0, 313, 318, 319, 323, 321,
	322, 314, 0, 331, 335, 0, 394, 0, 399, 401,
	-2, -2, 0, 436, 437, 438, 439, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 464, 465, 466, 467,
	541, 542, 543, 544, 545, 546, 547, 548, 403, 404,
	538, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 500, 500, 500, 500, 500, 500, 500,
	500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 385, 50, 0, 827, 592, -2,
	-2, 0, 0, 634, 635, -2, 745, -2, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 0, 0, 84, 0, 82, 0, 848,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 256, 848, 848, 259, 849, 850, 848, 848, 848,
	0, 848, 848, 266, 268, 269, 271, 848, 848, 273,
	0, 290, 288, 289, 284, 285, 0, 279, 280, 283,
	310, 311, 30, 846, 24, 0, 0, 565, 0, 557,
	558, 561, 564, 29, 320, 0, 325, 324, 316, 0,
	332, 0, 0, 0, 336, 0, 338, 339, 0, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 421,
	422, 423, 424, 425, 426, 427, 400, 0, 414, 0,
	0, 0, 456, 457, 458, 459, 460, 461, 462, 0,
	327, 29, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 530, 0, 484, 492, 0, 485,
	493, 486, 494, 487, 0, 488, 495, 489, 496, 490,
	491, 497, 0, 0, 0, 327, 0, 0, 48, 0,
	384, 0, 342, 344, 345, 346, -2, 0, 368, -2,
	0, 0, 0, 42, 43, 0, 0, 0, 0, 51,
	827, 53, 54, 0, 0, 0, 162, 601, 602, 603,
	599, 206, 0, 0, 150, 146, 90, 91, 92, 139,
	94, 139, 139, 139, 139, 159, 159, 159, 159, 122,
	123, 124, 125, 126, 0, 0, 109, 139, 139, 139,
	113, 129, 130, 131, 132, 133, 134, 135, 136, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 141, 141,
	141, 143, 143, 630, 68, 0, 848, 0, 848, 80,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 607, 0, 848, 252, 253, 386, 638, 639, 257,
	258, 260, 261, 262, 263, 264, 265, 272, 276, 0,
	293, 0, 0, 278, 0, 569, 0, 0, 0, 0,
	0, 560, 562, 563, 568, 32, 323, 0, 549, 0,
	0, 0, 326, 27, 395, 396, 398, 415, 0, 417,
	419, 337, 333, 0, 539, -2, 405, 406, 430, 431,
	432, 0, 0, 0, 0, 428, 410, 0, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	455, 514, 515, 0, 453, 454, 463, 0, 0, 328,
	329, 433, 0, 587, 29, 0, 0, 0, 0, 438,
	541, 0, 438, 541, 0, 0, 0, 536, 533, 0,
	0, 538, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 383, 0, 0, 0, 0, 0, 0,
	373, 0, 0, 376, 0, 0, 0, 0, 367, 0,
	0, 388, 795, 369, 0, 371, 372, 392, 0, 392,
	45, 392, 47, 0, 387, 593, 52, 0, 0, 57,
	58, 594, 595, 596, 597, 0, 81, 207, 209, 212,
	213, 214, 85, 86, 87, 0, 0, 194, 0, 0,
	188, 188, 0, 186, 187, 83, 153, 151, 0, 148,
	147, 93, 0, 159, 159, 116, 117, 162, 0, 162,
	162, 162, 0, 0, 110, 111, 112, 104, 0, 105,
	106, 107, 0, 108, 0, 0, 848, 70, 609, 71,
	847, 0, 0, 622, 221, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 0, 72, 223, 225, 224,
	228, 0, 0, 0, 247, 848, 251, 290, 275, 0,
	0, 291, 292, 281, 0, 566, 567, 0, 559, 25,
	0, 604, 605, 550, 551, 340, 416, 418, 420, 0,
	327, 407, 428, 411, 0, 408, 0, 0, 402, 468,
	0, 0, 435, -2, 471, 472, 0, 0, 0, 0,
	0, 507, 0, 0, 508, 0, 556, 0, 534, 0,
	0, 483, 0, 502, 0, 0, 503, 504, 505, 506,
	581, 0, 0, -2, 0, 0, 392, 589, 0, 343,
	362, 364, 0, 359, 374, 375, 377, 0, 379, 0,
	381, 382, 347, 349, 350, 0, 0, 0, 0, 370,
	556, 0, 392, 40, 41, 0, 55, 56, 0, 0,
	62, 163, 164, 0, 210, 0, 0, 0, 181, 188,
	188, 184, 189, 185, 0, 155, 0, 152, 89, 149,
	0, 162, 162, 118, 0, 119, 120, 121, 0, 137,
	0, 0, 0, 0, 631, 69, 215, 847, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 847,
	0, 847, 623, 624, 625, 626, 0, 75, 0, 0,
	0, 0, 0, 250, 293, 294, 295, 570, 0, 26,
	392, 0, 334, 540, 0, 409, 0, 429, 412, 469,
	330, 0, 139, 139, 519, 139, 143, 522, 139, 524,
	139, 527, 0, 0, 0, 0, 0, 0, 0, 531,
	482, 537, 0, 539, 0, 0, 33, 0, 581, 571,
	583, 585, 0, 29, 0, 577, 0, 354, 556, 0,
	0, 356, 363, 0, 0, 357, 0, 358, 378, 380,
	0, 0, 0, 0, 564, 393, 39, 59, 60, 61,
	208, 211, 0, 190, 139, 193, 182, 183, 0, 157,
	0, 154, 140, 114, 115, 160, 161, 159, 0, 159,
	0, 144, 0, 848, 216, 217, 218, 219, 0, 222,
	0, 73, 74, 0, 0, 227, 248, 274, 552, 341,
	470, 413, 473, 516, 159, 520, 521, 523, 525, 526,
	528, 475, 474, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 0, 34, 0, 586, -2, 0, 0,
	0, 49, 0, 564, 590, 591, 360, 0, 365, 0,
	0, 0, 368, 38, 173, 0, 192, 0, 352, 165,
	158, 0, 162, 138, 162, 0, 0, 67, 0, 76,
	77, 0, 0, 0, 554, 0, 517, 518, 0, 0,
	0, 0, 509, 481, 532, 0, 0, 0, 584, 0,
	-2, 0, 579, 578, 355, 37, 0, 0, 0, 0,
	388, 172, 174, 0, 179, 0, 191, 0, 0, 170,
	0, 167, 169, 156, 127, 128, 142, 145, 0, 0,
	0, 0, 229, 28, 0, 0, 476, 478, 477, 479,
	0, 0, 0, 498, 499, 0, 574, 29, 0, 361,
	389, 390, 391, 351, 175, 176, 0, 180, 178, 0,
	353, 88, 0, 166, 168, 0, 242, 0, 78, 79,
	72, 555, 553, 480, 0, 0, 0, 582, -2, 580,
	177, 0, 171, 241, 0, 0, 75, 510, 0, 513,
	0, 243, 0, 226, 511, 0, 0, 0, 195, 0,
	0, 196, 197, 0, 0, 512, 198, 0, 0, 0,
	0, 0, 199, 201, 202, 0, 0, 200, 244, 245,
	203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 264,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:441
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:488
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:579
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:616
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:914
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1074
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1191
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1199
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1205
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1282
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1294
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1403
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1407
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1439
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1444
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1547
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1552
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1570
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = "full "
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1652
		{
			yyVAL.showFilter = nil
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = SessionStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = GlobalStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Begin{}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Begin{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Commit{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Rollback{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &OtherRead{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &OtherRead{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &OtherRead{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			setAllowComments(yylex, true)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.bytes2 = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = UnionStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = UnionAllStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = UnionDistinctStr
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = SQLCacheStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = DistinctStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = StraightJoinHint
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExprs = nil
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1842
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1915
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1972
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = JoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = JoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = JoinStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = StraightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = LeftJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = LeftJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = RightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = RightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = NaturalJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2086
		{
			yyVAL.indexHints = nil
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2090
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2094
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2098
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = IsNullStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = IsNotNullStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.str = IsTrueStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.str = IsNotTrueStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = IsFalseStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = IsNotFalseStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = EqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = LessThanStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = GreaterThanStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = LessEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = GreaterEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = NotEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = nil
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.str = BooleanModeStr
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2640
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = QueryExpansionStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2728
		{
			yyVAL.str = string("")
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2748
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2771
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &NullVal{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2829
		{
			yyVAL.exprs = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2833
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2847
		{
			yyVAL.orderBy = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = AscScr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = AscScr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = DescScr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.limit = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2893
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2897
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = ""
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = ForUpdateStr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2910
		{
			yyVAL.str = ShareModeStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2923
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2936
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2940
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2944
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2963
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2968
		{
			yyVAL.updateExprs = nil
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2972
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3024
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3040
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.bytes = []byte("charset")
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &Default{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3083
		{
			yyVAL.byt = 0
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.byt = 1
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3093
		{
			yyVAL.str = ""
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = IgnoreStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3140
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			decNesting(yylex)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3419
		{
			skipToEnd(yylex)
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			skipToEnd(yylex)
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			skipToEnd(yylex)
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const UNDERSCORE_UTF8 = 57442
const UNDERSCORE_LATIN1 = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const FLUSH = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const INDEXES = 57468
const ACTION = 57469
const CASCADE = 57470
const CONSTRAINT = 57471
const FOREIGN = 57472
const NO = 57473
const REFERENCES = 57474
const RESTRICT = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const EXTENDED = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599
const ARRAY = 57600
const CUME_DIST = 57601
const DESCRIPTION = 57602
const DENSE_RANK = 57603
const EMPTY = 57604
const EXCEPT = 57605
const FIRST_VALUE = 57606
const GROUPING = 57607
const GROUPS = 57608
const JSON_TABLE = 57609
const LAG = 57610
const LAST_VALUE = 57611
const LATERAL = 57612
const LEAD = 57613
const MEMBER = 57614
const NTH_VALUE = 57615
const NTILE = 57616
const OF = 57617
const OVER = 57618
const PERCENT_RANK = 57619
const RANK = 57620
const RECURSIVE = 57621
const ROW_NUMBER = 57622
const SYSTEM = 57623
const WINDOW = 57624
const ACTIVE = 57625
const ADMIN = 57626
const BUCKETS = 57627
const CLONE = 57628
const COMPONENT = 57629
const DEFINITION = 57630
const ENFORCED = 57631
const EXCLUDE = 57632
const FOLLOWING = 57633
const GEOMCOLLECTION = 57634
const GET_MASTER_PUBLIC_KEY = 57635
const HISTOGRAM = 57636
const HISTORY = 57637
const INACTIVE = 57638
const INVISIBLE = 57639
const LOCKED = 57640
const MASTER_COMPRESSION_ALGORITHMS = 57641
const MASTER_PUBLIC_KEY_PATH = 57642
const MASTER_TLS_CIPHERSUITES = 57643
const MASTER_ZSTD_COMPRESSION_LEVEL = 57644
const NESTED = 57645
const NETWORK_NAMESPACE = 57646
const NOWAIT = 57647
const NULLS = 57648
const OJ = 57649
const OLD = 57650
const OPTIONAL = 57651
const ORDINALITY = 57652
const ORGANIZATION = 57653
const OTHERS = 57654
const PATH = 57655
const PERSIST = 57656
const PERSIST_ONLY = 57657
const PRECEDING = 57658
const PRIVILEGE_CHECKS_USER = 57659
const PROCESS = 57660
const RANDOM = 57661
const REFERENCE = 57662
const REQUIRE_ROW_FORMAT = 57663
const RESOURCE = 57664
const RESPECT = 57665
const RESTART = 57666
const RETAIN = 57667
const REUSE = 57668
const ROLE = 57669
const SECONDARY = 57670
const SECONDARY_ENGINE = 57671
const SECONDARY_LOAD = 57672
const SECONDARY_UNLOAD = 57673
const SKIP = 57674
const SRID = 57675
const THREAD_PRIORITY = 57676
const TIES = 57677
const UNBOUNDED = 57678
const VCPU = 57679
const VISIBLE = 57680
const FORMAT = 57681
const TREE = 57682
const VITESS = 57683
const TRADITIONAL = 57684

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	33, 302,
	131, 302,
	143, 302,
	168, 316,
	169, 316,
	-2, 304,
	-1, 65,
	38, 355,
	-2, 363,
	-1, 376,
	119, 685,
	-2, 681,
	-1, 377,
	119, 686,
	-2, 682,
	-1, 390,
	38, 356,
	-2, 368,
	-1, 391,
	38, 357,
	-2, 369,
	-1, 414,
	87, 937,
	-2, 69,
	-1, 415,
	87, 853,
	-2, 70,
	-1, 420,
	87, 821,
	-2, 647,
	-1, 422,
	87, 884,
	-2, 649,
	-1, 730,
	1, 393,
	5, 393,
	12, 393,
	13, 393,
	14, 393,
	15, 393,
	17, 393,
	19, 393,
	30, 393,
	31, 393,
	45, 393,
	46, 393,
	47, 393,
	48, 393,
	49, 393,
	51, 393,
	52, 393,
	55, 393,
	56, 393,
	58, 393,
	59, 393,
	360, 393,
	-2, 411,
	-1, 733,
	56, 51,
	58, 51,
	-2, 55,
	-1, 907,
	119, 688,
	-2, 684,
}

const yyPrivate = 57344

const yyLast = 17529

var yyAct = [...]int{

	376, 1557, 1368, 1567, 1441, 1256, 320, 1524, 1473, 1428,
	1163, 1007, 1181, 1310, 335, 1342, 980, 1311, 349, 64,
	3, 701, 585, 1164, 574, 1003, 378, 1036, 666, 1307,
	1050, 1016, 1006, 1316, 306, 84, 944, 1151, 1322, 275,
	832, 295, 275, 894, 1273, 419, 1100, 275, 1207, 851,
	1224, 1020, 901, 1233, 746, 982, 968, 725, 392, 710,
	925, 726, 939, 1046, 871, 745, 408, 961, 727, 413,
	543, 275, 84, 717, 583, 544, 275, 678, 275, 405,
	735, 311, 65, 307, 25, 858, 310, 61, 7, 679,
	6, 5, 1560, 318, 416, 563, 1544, 1555, 1532, 1552,
	1369, 1543, 1531, 1290, 1069, 1397, 27, 322, 55, 30,
	31, 67, 68, 69, 70, 71, 548, 1336, 1068, 86,
	87, 88, 271, 267, 268, 269, 997, 398, 1499, 628,
	627, 637, 638, 630, 631, 632, 633, 634, 635, 636,
	629, 1195, 603, 639, 1194, 998, 999, 1196, 309, 86,
	87, 88, 308, 263, 1337, 1338, 261, 54, 265, 361,
	1067, 367, 368, 365, 366, 364, 363, 362, 747, 1215,
	748, 1029, 1258, 598, 1431, 369, 370, 599, 596, 597,
	86, 87, 88, 1037, 1388, 1386, 301, 821, 601, 580,
	820, 582, 1260, 591, 592, 818, 1554, 1551, 1525, 1255,
	962, 602, 1517, 1021, 564, 1575, 1571, 550, 86, 87,
	88, 265, 1064, 1061, 1062, 1474, 1060, 588, 1261, 825,
	1482, 732, 1243, 579, 581, 1259, 819, 809, 822, 1332,
	1476, 553, 1182, 1184, 859, 860, 861, 1331, 1252, 1023,
	1330, 546, 904, 270, 1254, 278, 266, 1117, 1081, 1071,
	1074, 1080, 264, 1506, 1239, 1240, 1241, 651, 652, 1114,
	273, 279, 275, 555, 556, 1411, 1191, 275, 302, 565,
	282, 1156, 1127, 275, 262, 1108, 741, 721, 289, 275,
	572, 664, 570, 578, 84, 1004, 1066, 639, 84, 993,
	84, 576, 407, 86, 87, 88, 84, 545, 629, 547,
	1475, 639, 1500, 84, 1137, 1023, 1515, 856, 1065, 577,
	852, 846, 287, 1183, 619, 587, 1491, 1037, 294, 1530,
	1292, 1569, 74, 609, 1570, 1242, 1568, 589, 1483, 1481,
	1247, 1244, 1235, 1245, 1238, 617, 1234, 86, 87, 88,
	1236, 1237, 1022, 614, 615, 280, 1355, 1253, 1070, 1251,
	1030, 619, 1274, 1320, 1246, 749, 651, 652, 56, 613,
	75, 926, 590, 1072, 593, 566, 567, 568, 651, 652,
	604, 811, 291, 283, 575, 292, 293, 299, 926, 1213,
	1124, 284, 286, 296, 878, 281, 298, 297, 1023, 1520,
	560, 714, 612, 1276, 610, 611, 853, 847, 876, 877,
	875, 84, 705, 275, 275, 275, 1576, 704, 1022, 1535,
	1142, 1143, 84, 707, 86, 87, 88, 1437, 84, 1537,
	86, 87, 88, 549, 54, 649, 1026, 1278, 1436, 1282,
	1113, 1277, 1027, 1275, 416, 665, 874, 1228, 1280, 1227,
	681, 683, 685, 687, 689, 691, 692, 1279, 1216, 542,
	1577, 711, 682, 684, 1516, 688, 690, 557, 693, 558,
	1281, 1283, 559, 618, 617, 1453, 706, 1434, 628, 627,
	637, 638, 630, 631, 632, 633, 634, 635, 636, 629,
	619, 744, 639, 554, 734, 618, 617, 739, 562, 387,
	1225, 1022, 1266, 1091, 569, 837, 1019, 1017, 387, 1018,
	571, 1488, 619, 53, 551, 552, 1015, 1021, 1093, 1094,
	1095, 730, 628, 627, 637, 638, 630, 631, 632, 633,
	634, 635, 636, 629, 1487, 1101, 639, 379, 628, 627,
	637, 638, 630, 631, 632, 633, 634, 635, 636, 629,
	1351, 1308, 639, 275, 1319, 618, 617, 807, 84, 1024,
	810, 260, 812, 275, 275, 84, 84, 84, 987, 1400,
	736, 275, 619, 1319, 275, 1152, 381, 275, 830, 831,
	954, 275, 1407, 84, 1112, 616, 1111, 1490, 84, 84,
	84, 275, 84, 84, 630, 631, 632, 633, 634, 635,
	636, 629, 84, 84, 639, 618, 617, 1359, 836, 628,
	627, 637, 638, 630, 631, 632, 633, 634, 635, 636,
	629, 965, 619, 639, 1479, 1553, 834, 866, 868, 869,
	402, 403, 808, 867, 724, 1562, 733, 1539, 387, 815,
	816, 817, 709, 965, 632, 633, 634, 635, 636, 629,
	895, 872, 639, 826, 618, 617, 1199, 835, 996, 897,
	63, 1294, 839, 840, 841, 1140, 843, 844, 1139, 1479,
	1528, 619, 1152, 84, 1479, 387, 848, 849, 637, 638,
	630, 631, 632, 633, 634, 635, 636, 629, 914, 917,
	639, 86, 87, 88, 927, 896, 54, 905, 86, 87,
	88, 1130, 1198, 1479, 1507, 84, 84, 1257, 1138, 86,
	87, 88, 1479, 1478, 387, 906, 1426, 1425, 1319, 84,
	907, 1413, 387, 1410, 387, 1129, 275, 618, 617, 84,
	1361, 1360, 1357, 1358, 275, 27, 946, 1357, 1356, 948,
	873, 954, 275, 275, 619, 665, 275, 275, 954, 387,
	275, 275, 275, 84, 905, 898, 899, 965, 387, 1158,
	935, 936, 616, 387, 27, 1159, 84, 544, 756, 755,
	736, 737, 960, 964, 757, 416, 824, 907, 742, 1545,
	956, 955, 1443, 1031, 813, 814, 54, 27, 1008, 1418,
	1051, 1347, 823, 1202, 1460, 407, 1047, 834, 829, 979,
	1444, 965, 958, 988, 383, 1323, 1324, 990, 1038, 1039,
	1040, 986, 842, 737, 1042, 54, 738, 991, 740, 995,
	275, 84, 994, 84, 1041, 1073, 665, 1054, 954, 275,
	275, 275, 275, 275, 377, 275, 275, 1011, 54, 275,
	84, 338, 337, 340, 341, 342, 343, 1052, 1558, 730,
	339, 344, 1349, 730, 1326, 54, 275, 730, 738, 1308,
	736, 275, 1229, 275, 275, 857, 828, 1175, 275, 85,
	1173, 393, 1176, 276, 1549, 1174, 276, 1048, 1049, 1329,
	1177, 276, 974, 975, 1328, 394, 1088, 1399, 1172, 1171,
	1542, 1298, 712, 713, 396, 1056, 395, 1058, 1401, 708,
	1547, 1150, 1149, 922, 872, 276, 85, 940, 1220, 754,
	276, 573, 276, 1212, 1085, 1522, 1405, 923, 1521, 941,
	910, 911, 1458, 1394, 916, 919, 920, 628, 627, 637,
	638, 630, 631, 632, 633, 634, 635, 636, 629, 1210,
	393, 639, 1204, 1439, 1057, 827, 978, 957, 702, 934,
	1096, 1404, 937, 938, 394, 963, 384, 385, 703, 350,
	26, 390, 391, 396, 1148, 395, 275, 379, 989, 1403,
	1304, 1152, 1147, 600, 1564, 1563, 275, 275, 275, 275,
	275, 1165, 1118, 1115, 850, 715, 26, 1564, 275, 1504,
	1432, 1160, 1136, 873, 275, 1123, 383, 63, 275, 66,
	60, 1, 628, 627, 637, 638, 630, 631, 632, 633,
	634, 635, 636, 629, 1556, 1197, 639, 84, 1370, 1144,
	1440, 1145, 382, 1154, 1153, 1155, 1203, 1063, 1200, 1523,
	1208, 1208, 1472, 1341, 1187, 1014, 1189, 1166, 1190, 1008,
	1169, 1055, 1005, 1178, 73, 1167, 1168, 930, 1170, 1186,
	1075, 1076, 1077, 1078, 1079, 1188, 1082, 1083, 541, 72,
	1084, 1192, 1514, 845, 586, 84, 84, 1013, 1012, 1480,
	1217, 1218, 1219, 730, 1221, 1222, 1223, 1086, 1430, 1209,
	1205, 1206, 1087, 730, 730, 730, 730, 730, 1025, 1092,
	1214, 1028, 1348, 1211, 1519, 84, 276, 762, 760, 761,
	759, 276, 764, 1226, 1232, 730, 763, 276, 758, 288,
	411, 977, 386, 276, 750, 1053, 716, 76, 85, 84,
	1250, 1249, 85, 895, 85, 1248, 1032, 1033, 1034, 1035,
	85, 1059, 970, 973, 974, 975, 971, 85, 972, 976,
	1231, 1272, 1043, 1044, 1045, 855, 1263, 1264, 285, 594,
	595, 290, 647, 1146, 1265, 1105, 1106, 275, 1291, 1193,
	1295, 417, 410, 1314, 1141, 943, 1284, 84, 1285, 1262,
	1271, 1402, 84, 84, 1121, 1165, 1303, 1122, 906, 1309,
	675, 924, 321, 907, 865, 336, 333, 1301, 1312, 1272,
	334, 970, 973, 974, 975, 971, 84, 972, 976, 949,
	1157, 1323, 1324, 621, 319, 313, 729, 722, 969, 967,
	84, 1318, 84, 84, 966, 406, 1208, 1208, 1327, 1325,
	1321, 728, 953, 1340, 1334, 389, 1396, 1498, 388, 1333,
	921, 1354, 1008, 46, 1008, 85, 1335, 276, 276, 276,
	275, 605, 1339, 584, 303, 1344, 85, 584, 29, 584,
	62, 397, 85, 1352, 1353, 584, 20, 19, 18, 22,
	275, 17, 16, 26, 1345, 1346, 84, 15, 1371, 84,
	84, 84, 275, 561, 33, 24, 648, 650, 1363, 627,
	637, 638, 630, 631, 632, 633, 634, 635, 636, 629,
	23, 400, 639, 1364, 14, 1366, 13, 12, 1376, 1377,
	11, 10, 9, 8, 4, 608, 21, 663, 380, 2,
	0, 667, 668, 669, 670, 671, 672, 673, 674, 1384,
	677, 680, 680, 680, 686, 680, 680, 686, 680, 694,
	695, 696, 697, 698, 699, 700, 1165, 0, 0, 0,
	0, 0, 26, 0, 312, 0, 0, 0, 0, 1406,
	84, 0, 0, 1415, 0, 1414, 0, 0, 84, 0,
	0, 1200, 0, 731, 0, 0, 1424, 0, 0, 0,
	0, 0, 1008, 84, 0, 0, 0, 276, 1302, 0,
	84, 0, 85, 0, 0, 0, 0, 276, 276, 85,
	85, 85, 0, 1446, 1433, 276, 1435, 0, 276, 0,
	0, 276, 1442, 0, 0, 276, 0, 85, 0, 0,
	0, 0, 85, 85, 85, 276, 85, 85, 0, 0,
	1445, 84, 84, 0, 84, 0, 85, 85, 1452, 84,
	0, 84, 84, 84, 275, 1459, 1312, 84, 1466, 1461,
	1467, 1469, 1470, 1457, 0, 0, 1465, 1438, 0, 0,
	1471, 0, 1477, 0, 84, 275, 0, 1484, 0, 0,
	0, 1362, 0, 1492, 0, 0, 0, 0, 0, 1485,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1365, 0, 347, 1505, 1513, 0, 0, 0, 1312,
	84, 1512, 0, 1375, 1511, 0, 0, 85, 0, 0,
	0, 84, 84, 0, 0, 1526, 0, 584, 0, 0,
	0, 0, 0, 1527, 584, 584, 584, 84, 83, 0,
	0, 1165, 0, 1442, 1008, 1533, 0, 0, 275, 85,
	85, 0, 584, 0, 0, 0, 84, 584, 584, 584,
	0, 584, 584, 85, 1541, 0, 0, 0, 0, 0,
	276, 584, 584, 85, 1548, 418, 84, 1546, 276, 0,
	0, 0, 0, 0, 0, 1550, 276, 276, 1561, 0,
	276, 276, 0, 0, 276, 276, 276, 85, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 623, 0, 626, 0, 0, 0, 0, 0, 640,
	641, 642, 643, 644, 645, 646, 620, 624, 625, 622,
	628, 627, 637, 638, 630, 631, 632, 633, 634, 635,
	636, 629, 0, 0, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1381, 1382, 0, 1383, 0,
	0, 1385, 312, 1387, 276, 85, 0, 85, 0, 0,
	0, 676, 0, 276, 276, 276, 276, 276, 1393, 276,
	276, 0, 0, 276, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	276, 0, 0, 0, 0, 276, 0, 276, 276, 0,
	0, 731, 276, 0, 0, 731, 0, 0, 0, 731,
	0, 0, 0, 0, 1427, 0, 0, 0, 27, 28,
	55, 30, 31, 908, 909, 628, 627, 637, 638, 630,
	631, 632, 633, 634, 635, 636, 629, 59, 0, 639,
	0, 0, 32, 49, 50, 0, 52, 628, 627, 637,
	638, 630, 631, 632, 633, 634, 635, 636, 629, 1536,
	0, 639, 0, 947, 0, 41, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 418, 0, 0,
	584, 418, 584, 418, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 584,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 276, 276, 276, 276, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 276, 0, 34, 35, 37, 36, 39, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 58, 57, 0, 0, 47, 48,
	38, 0, 0, 0, 0, 1107, 0, 0, 838, 0,
	0, 0, 0, 0, 42, 43, 0, 44, 45, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 85,
	85, 0, 854, 0, 0, 418, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 0, 862, 863,
	864, 0, 0, 0, 0, 731, 0, 0, 0, 85,
	1392, 1161, 1162, 0, 0, 731, 731, 731, 731, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 85, 0, 1103, 0, 731, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 1109, 1110,
	56, 912, 913, 0, 1116, 0, 0, 1119, 1120, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 1128,
	0, 276, 1131, 1132, 1133, 1134, 1135, 0, 0, 0,
	0, 85, 0, 0, 942, 945, 85, 85, 0, 628,
	627, 637, 638, 630, 631, 632, 633, 634, 635, 636,
	629, 0, 0, 639, 0, 584, 0, 0, 1391, 0,
	85, 0, 0, 0, 0, 0, 0, 1180, 0, 0,
	0, 418, 0, 0, 85, 0, 85, 85, 418, 418,
	418, 1002, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 418, 418, 418, 276, 418, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 418, 418, 315, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	85, 0, 0, 85, 85, 85, 276, 628, 627, 637,
	638, 630, 631, 632, 633, 634, 635, 636, 629, 1102,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 1313,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 628,
	627, 637, 638, 630, 631, 632, 633, 634, 635, 636,
	629, 0, 0, 639, 0, 0, 900, 0, 418, 0,
	0, 0, 0, 1269, 1270, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 932, 933,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 950, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 719, 0, 85, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1125, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 0, 85, 85, 0, 85, 0,
	1395, 0, 0, 85, 0, 85, 85, 85, 276, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 1421, 1422, 0, 418, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 418, 85, 0, 0, 0, 0, 1379,
	0, 1380, 584, 0, 0, 85, 85, 0, 0, 0,
	0, 0, 1389, 1390, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	85, 1408, 1409, 0, 1412, 0, 0, 1313, 0, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 0, 0, 0, 0, 348, 1293, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 1300, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 274, 0, 0, 300, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 409, 0, 0, 0,
	418, 274, 0, 274, 0, 1494, 1495, 1496, 1497, 0,
	1501, 0, 1502, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1559, 1508, 0, 1509, 1510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1230, 418,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 1538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1398, 0, 0, 0,
	0, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 779, 312, 0, 0, 0, 0,
	0, 418, 1416, 1573, 1574, 1417, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	418, 0, 928, 0, 0, 1315, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 274, 418, 0, 418, 1343, 767, 274, 0,
	0, 0, 0, 0, 274, 1456, 312, 0, 0, 870,
	0, 0, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 780, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1367,
	0, 0, 1372, 1373, 1374, 0, 0, 0, 0, 0,
	0, 793, 796, 797, 798, 799, 800, 801, 931, 802,
	803, 804, 805, 806, 781, 782, 783, 784, 765, 766,
	794, 0, 768, 0, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 785, 786, 787, 788, 789, 790,
	791, 792, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 274,
	274, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 1463, 0, 1464, 0, 0,
	0, 0, 1429, 0, 1429, 1429, 1429, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 1098, 1099, 0, 274, 0,
	0, 0, 0, 1518, 0, 0, 0, 0, 274, 274,
	0, 0, 0, 0, 418, 418, 274, 0, 0, 274,
	0, 0, 274, 0, 0, 0, 833, 0, 928, 0,
	1534, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 401,
	833, 0, 0, 401, 401, 0, 0, 401, 401, 401,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 401, 401, 401, 401, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 833, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 274, 984, 0,
	0, 274, 274, 0, 0, 274, 992, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 0, 1288, 1289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 274, 274, 274, 274, 0,
	274, 274, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 274, 0, 1089, 1090,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	401, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 274, 274, 274, 274, 274, 0, 0, 0, 0,
	0, 0, 0, 1179, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	1448, 1449, 1450, 1451, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1565, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 528, 516, 0, 473, 531,
	446, 463, 539, 464, 467, 504, 431, 486, 174, 461,
	274, 450, 426, 457, 427, 448, 475, 118, 479, 445,
	518, 489, 530, 146, 0, 451, 537, 148, 495, 0,
	221, 162, 0, 0, 0, 477, 520, 484, 513, 472,
	505, 436, 494, 532, 462, 502, 533, 0, 0, 0,
	86, 87, 88, 0, 1009, 1010, 0, 0, 0, 0,
	0, 108, 0, 499, 527, 459, 501, 503, 425, 496,
	929, 429, 432, 538, 523, 454, 455, 1201, 0, 0,
	0, 0, 0, 274, 476, 485, 510, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 0, 493, 0,
	0, 0, 433, 430, 0, 0, 0, 0, 474, 0,
	0, 0, 435, 0, 453, 511, 0, 423, 127, 515,
	522, 471, 277, 526, 469, 468, 529, 193, 0, 225,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 201,
	205, 519, 449, 458, 112, 456, 203, 181, 241, 492,
	183, 202, 149, 231, 194, 240, 250, 251, 228, 248,
	255, 218, 93, 227, 239, 109, 213, 95, 237, 224,
	160, 139, 140, 94, 0, 199, 117, 125, 114, 173,
	234, 235, 113, 258, 101, 247, 97, 102, 246, 167,
	230, 238, 161, 154, 96, 236, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 428,
	0, 222, 244, 259, 106, 444, 229, 253, 254, 0,
	195, 107, 126, 120, 190, 124, 166, 103, 135, 219,
	143, 150, 198, 257, 180, 204, 110, 243, 220, 440,
	443, 438, 439, 487, 488, 534, 535, 536, 512, 434,
	0, 441, 442, 0, 517, 524, 525, 491, 89, 98,
	147, 256, 196, 123, 245, 424, 437, 116, 447, 0,
	0, 460, 465, 466, 478, 480, 481, 482, 483, 490,
	497, 498, 500, 506, 507, 508, 509, 514, 521, 540,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 197, 200, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 223,
	226, 232, 233, 242, 249, 252, 528, 516, 0, 473,
	531, 446, 463, 539, 464, 467, 504, 431, 486, 174,
	461, 0, 450, 426, 457, 427, 448, 475, 118, 479,
	445, 518, 489, 530, 146, 0, 451, 537, 148, 495,
	0, 221, 162, 0, 0, 0, 477, 520, 484, 513,
	472, 505, 436, 494, 532, 462, 502, 533, 0, 0,
	0, 86, 87, 88, 0, 1009, 1010, 0, 0, 0,
	0, 0, 108, 0, 499, 527, 459, 501, 503, 425,
	496, 0, 429, 432, 538, 523, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 476, 485, 510, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 452, 0, 493,
	0, 0, 0, 433, 430, 0, 0, 0, 0, 474,
	0, 0, 0, 435, 0, 453, 511, 0, 423, 127,
	515, 522, 471, 277, 526, 469, 468, 529, 193, 0,
	225, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	201, 205, 519, 449, 458, 112, 456, 203, 181, 241,
	492, 183, 202, 149, 231, 194, 240, 250, 251, 228,
	248, 255, 218, 93, 227, 239, 109, 213, 95, 237,
	224, 160, 139, 140, 94, 0, 199, 117, 125, 114,
	173, 234, 235, 113, 258, 101, 247, 97, 102, 246,
	167, 230, 238, 161, 154, 96, 236, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	428, 0, 222, 244, 259, 106, 444, 229, 253, 254,
	0, 195, 107, 126, 120, 190, 124, 166, 103, 135,
	219, 143, 150, 198, 257, 180, 204, 110, 243, 220,
	440, 443, 438, 439, 487, 488, 534, 535, 536, 512,
	434, 0, 441, 442, 0, 517, 524, 525, 491, 89,
	98, 147, 256, 196, 123, 245, 424, 437, 116, 447,
	0, 0, 460, 465, 466, 478, 480, 481, 482, 483,
	490, 497, 498, 500, 506, 507, 508, 509, 514, 521,
	540, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 197, 200, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	223, 226, 232, 233, 242, 249, 252, 528, 516, 0,
	473, 531, 446, 463, 539, 464, 467, 504, 431, 486,
	174, 461, 0, 450, 426, 457, 427, 448, 475, 118,
	479, 445, 518, 489, 530, 146, 0, 451, 537, 148,
	495, 0, 221, 162, 0, 0, 0, 477, 520, 484,
	513, 472, 505, 436, 494, 532, 462, 502, 533, 54,
	0, 0, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 499, 527, 459, 501, 503,
	425, 496, 0, 429, 432, 538, 523, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 476, 485, 510, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 0,
	493, 0, 0, 0, 433, 430, 0, 0, 0, 0,
	474, 0, 0, 0, 435, 0, 453, 511, 0, 423,
	127, 515, 522, 471, 277, 526, 469, 468, 529, 193,
	0, 225, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 201, 205, 519, 449, 458, 112, 456, 203, 181,
	241, 492, 183, 202, 149, 231, 194, 240, 250, 251,
	228, 248, 255, 218, 93, 227, 239, 109, 213, 95,
	237, 224, 160, 139, 140, 94, 0, 199, 117, 125,
	114, 173, 234, 235, 113, 258, 101, 247, 97, 102,
	246, 167, 230, 238, 161, 154, 96, 236, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 428, 0, 222, 244, 259, 106, 444, 229, 253,
	254, 0, 195, 107, 126, 120, 190, 124, 166, 103,
	135, 219, 143, 150, 198, 257, 180, 204, 110, 243,
	220, 440, 443, 438, 439, 487, 488, 534, 535, 536,
	512, 434, 0, 441, 442, 0, 517, 524, 525, 491,
	89, 98, 147, 256, 196, 123, 245, 424, 437, 116,
	447, 0, 0, 460, 465, 466, 478, 480, 481, 482,
	483, 490, 497, 498, 500, 506, 507, 508, 509, 514,
	521, 540, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 197, 200,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 223, 226, 232, 233, 242, 249, 252, 528, 516,
	0, 473, 531, 446, 463, 539, 464, 467, 504, 431,
	486, 174, 461, 0, 450, 426, 457, 427, 448, 475,
	118, 479, 445, 518, 489, 530, 146, 0, 451, 537,
	148, 495, 0, 221, 162, 0, 0, 0, 477, 520,
	484, 513, 472, 505, 436, 494, 532, 462, 502, 533,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 499, 527, 459, 501,
	503, 425, 496, 0, 429, 432, 538, 523, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 476, 485, 510,
	470, 0, 0, 0, 0, 0, 0, 1306, 0, 452,
	0, 493, 0, 0, 0, 433, 430, 0, 0, 0,
	0, 474, 0, 0, 0, 435, 0, 453, 511, 0,
	423, 127, 515, 522, 471, 277, 526, 469, 468, 529,
	193, 0, 225, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 201, 205, 519, 449, 458, 112, 456, 203,
	181, 241, 492, 183, 202, 149, 231, 194, 240, 250,
	251, 228, 248, 255, 218, 93, 227, 239, 109, 213,
	95, 237, 224, 160, 139, 140, 94, 0, 199, 117,
	125, 114, 173, 234, 235, 113, 258, 101, 247, 97,
	102, 246, 167, 230, 238, 161, 154, 96, 236, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 428, 0, 222, 244, 259, 106, 444, 229,
	253, 254, 0, 195, 107, 126, 120, 190, 124, 166,
	103, 135, 219, 143, 150, 198, 257, 180, 204, 110,
	243, 220, 440, 443, 438, 439, 487, 488, 534, 535,
	536, 512, 434, 0, 441, 442, 0, 517, 524, 525,
	491, 89, 98, 147, 256, 196, 123, 245, 424, 437,
	116, 447, 0, 0, 460, 465, 466, 478, 480, 481,
	482, 483, 490, 497, 498, 500, 506, 507, 508, 509,
	514, 521, 540, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 197,
	200, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 223, 226, 232, 233, 242, 249, 252, 528,
	516, 0, 473, 531, 446, 463, 539, 464, 467, 504,
	431, 486, 174, 461, 0, 450, 426, 457, 427, 448,
	475, 118, 479, 445, 518, 489, 530, 146, 0, 451,
	537, 148, 495, 0, 221, 162, 0, 0, 0, 477,
	520, 484, 513, 472, 505, 436, 494, 532, 462, 502,
	533, 0, 0, 0, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 499, 527, 459,
	501, 503, 425, 496, 0, 429, 432, 538, 523, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 476, 485,
	510, 470, 0, 0, 0, 0, 0, 0, 993, 0,
	452, 0, 493, 0, 0, 0, 433, 430, 0, 0,
	0, 0, 474, 0, 0, 0, 435, 0, 453, 511,
	0, 423, 127, 515, 522, 471, 277, 526, 469, 468,
	529, 193, 0, 225, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 201, 205, 519, 449, 458, 112, 456,
	203, 181, 241, 492, 183, 202, 149, 231, 194, 240,
	250, 251, 228, 248, 255, 218, 93, 227, 239, 109,
	213, 95, 237, 224, 160, 139, 140, 94, 0, 199,
	117, 125, 114, 173, 234, 235, 113, 258, 101, 247,
	97, 102, 246, 167, 230, 238, 161, 154, 96, 236,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 428, 0, 222, 244, 259, 106, 444,
	229, 253, 254, 0, 195, 107, 126, 120, 190, 124,
	166, 103, 135, 219, 143, 150, 198, 257, 180, 204,
	110, 243, 220, 440, 443, 438, 439, 487, 488, 534,
	535, 536, 512, 434, 0, 441, 442, 0, 517, 524,
	525, 491, 89, 98, 147, 256, 196, 123, 245, 424,
	437, 116, 447, 0, 0, 460, 465, 466, 478, 480,
	481, 482, 483, 490, 497, 498, 500, 506, 507, 508,
	509, 514, 521, 540, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	197, 200, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 223, 226, 232, 233, 242, 249, 252,
	528, 516, 0, 473, 531, 446, 463, 539, 464, 467,
	504, 431, 486, 174, 461, 0, 450, 426, 457, 427,
	448, 475, 118, 479, 445, 518, 489, 530, 146, 0,
	451, 537, 148, 495, 0, 221, 162, 0, 0, 0,
	477, 520, 484, 513, 472, 505, 436, 494, 532, 462,
	502, 533, 0, 0, 0, 86, 87, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 499, 527,
	459, 501, 503, 425, 496, 0, 429, 432, 538, 523,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 476,
	485, 510, 470, 0, 0, 0, 0, 0, 0, 959,
	0, 452, 0, 493, 0, 0, 0, 433, 430, 0,
	0, 0, 0, 474, 0, 0, 0, 435, 0, 453,
	511, 0, 423, 127, 515, 522, 471, 277, 526, 469,
	468, 529, 193, 0, 225, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 201, 205, 519, 449, 458, 112,
	456, 203, 181, 241, 492, 183, 202, 149, 231, 194,
	240, 250, 251, 228, 248, 255, 218, 93, 227, 239,
	109, 213, 95, 237, 224, 160, 139, 140, 94, 0,
	199, 117, 125, 114, 173, 234, 235, 113, 258, 101,
	247, 97, 102, 246, 167, 230, 238, 161, 154, 96,
	236, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 428, 0, 222, 244, 259, 106,
	444, 229, 253, 254, 0, 195, 107, 126, 120, 190,
	124, 166, 103, 135, 219, 143, 150, 198, 257, 180,
	204, 110, 243, 220, 440, 443, 438, 439, 487, 488,
	534, 535, 536, 512, 434, 0, 441, 442, 0, 517,
	524, 525, 491, 89, 98, 147, 256, 196, 123, 245,
	424, 437, 116, 447, 0, 0, 460, 465, 466, 478,
	480, 481, 482, 483, 490, 497, 498, 500, 506, 507,
	508, 509, 514, 521, 540, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 197, 200, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 223, 226, 232, 233, 242, 249,
	252, 528, 516, 0, 473, 531, 446, 463, 539, 464,
	467, 504, 431, 486, 174, 461, 0, 450, 426, 457,
	427, 448, 475, 118, 479, 445, 518, 489, 530, 146,
	0, 451, 537, 148, 495, 0, 221, 162, 0, 0,
	0, 477, 520, 484, 513, 472, 505, 436, 494, 532,
	462, 502, 533, 0, 0, 0, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 499,
	527, 459, 501, 503, 425, 496, 0, 429, 432, 538,
	523, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	476, 485, 510, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 452, 0, 493, 0, 0, 0, 433, 430,
	0, 0, 0, 0, 474, 0, 0, 0, 435, 0,
	453, 511, 0, 423, 127, 515, 522, 471, 277, 526,
	469, 468, 529, 193, 0, 225, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 201, 205, 519, 449, 458,
	112, 456, 203, 181, 241, 492, 183, 202, 149, 231,
	194, 240, 250, 251, 228, 248, 255, 218, 93, 227,
	239, 109, 213, 95, 237, 224, 160, 139, 140, 94,
	0, 199, 117, 125, 114, 173, 234, 235, 113, 258,
	101, 247, 97, 102, 246, 167, 230, 238, 161, 154,
	96, 236, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 428, 0, 222, 244, 259,
	106, 444, 229, 253, 254, 0, 195, 107, 126, 120,
	190, 124, 166, 103, 135, 219, 143, 150, 198, 257,
	180, 204, 110, 243, 220, 440, 443, 438, 439, 487,
	488, 534, 535, 536, 512, 434, 0, 441, 442, 0,
	517, 524, 525, 491, 89, 98, 147, 256, 196, 123,
	245, 424, 437, 116, 447, 0, 0, 460, 465, 466,
	478, 480, 481, 482, 483, 490, 497, 498, 500, 506,
	507, 508, 509, 514, 521, 540, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 197, 200, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 223, 226, 232, 233, 242,
	249, 252, 528, 516, 0, 473, 531, 446, 463, 539,
	464, 467, 504, 431, 486, 174, 461, 0, 450, 426,
	457, 427, 448, 475, 118, 479, 445, 518, 489, 530,
	146, 0, 451, 537, 148, 495, 0, 221, 162, 0,
	0, 0, 477, 520, 484, 513, 472, 505, 436, 494,
	532, 462, 502, 533, 0, 0, 0, 86, 87, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	499, 527, 459, 501, 503, 425, 496, 0, 429, 432,
	538, 523, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 476, 485, 510, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 452, 0, 493, 0, 0, 0, 433,
	430, 0, 0, 0, 0, 474, 0, 0, 0, 435,
	0, 453, 511, 0, 423, 127, 515, 522, 471, 277,
	526, 469, 468, 529, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 519, 449,
	458, 112, 456, 203, 181, 241, 492, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 421, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 428, 0, 222, 244,
	259, 106, 444, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 422, 420, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 440, 443, 438, 439,
	487, 488, 534, 535, 536, 512, 434, 0, 441, 442,
	0, 517, 524, 525, 491, 89, 98, 147, 256, 196,
	123, 245, 424, 437, 116, 447, 0, 0, 460, 465,
	466, 478, 480, 481, 482, 483, 490, 497, 498, 500,
	506, 507, 508, 509, 514, 521, 540, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 528, 516, 0, 473, 531, 446, 463,
	539, 464, 467, 504, 431, 486, 174, 461, 0, 450,
	426, 457, 427, 448, 475, 118, 479, 445, 518, 489,
	530, 146, 0, 451, 537, 148, 495, 0, 221, 162,
	0, 0, 0, 477, 520, 484, 513, 472, 505, 436,
	494, 532, 462, 502, 533, 0, 0, 0, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 499, 527, 459, 501, 503, 425, 496, 0, 429,
	432, 538, 523, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 476, 485, 510, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 0, 493, 0, 0, 0,
	433, 430, 0, 0, 0, 0, 474, 0, 0, 0,
	435, 0, 453, 511, 0, 423, 127, 515, 522, 471,
	277, 526, 469, 468, 529, 193, 0, 225, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 201, 205, 519,
	449, 458, 112, 456, 203, 181, 241, 492, 183, 202,
	149, 231, 194, 240, 250, 251, 228, 248, 255, 218,
	93, 227, 743, 109, 213, 95, 237, 224, 160, 139,
	140, 94, 0, 199, 117, 125, 114, 173, 234, 235,
	113, 258, 101, 247, 97, 421, 246, 167, 230, 238,
	161, 154, 96, 236, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 428, 0, 222,
	244, 259, 106, 444, 229, 253, 254, 0, 195, 107,
	126, 120, 190, 124, 422, 420, 135, 219, 143, 150,
	198, 257, 180, 204, 110, 243, 220, 440, 443, 438,
	439, 487, 488, 534, 535, 536, 512, 434, 0, 441,
	442, 0, 517, 524, 525, 491, 89, 98, 147, 256,
	196, 123, 245, 424, 437, 116, 447, 0, 0, 460,
	465, 466, 478, 480, 481, 482, 483, 490, 497, 498,
	500, 506, 507, 508, 509, 514, 521, 540, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 197, 200, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 223, 226, 232,
	233, 242, 249, 252, 528, 516, 0, 473, 531, 446,
	463, 539, 464, 467, 504, 431, 486, 174, 461, 0,
	450, 426, 457, 427, 448, 475, 118, 479, 445, 518,
	489, 530, 146, 0, 451, 537, 148, 495, 0, 221,
	162, 0, 0, 0, 477, 520, 484, 513, 472, 505,
	436, 494, 532, 462, 502, 533, 0, 0, 0, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 499, 527, 459, 501, 503, 425, 496, 0,
	429, 432, 538, 523, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 476, 485, 510, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 452, 0, 493, 0, 0,
	0, 433, 430, 0, 0, 0, 0, 474, 0, 0,
	0, 435, 0, 453, 511, 0, 423, 127, 515, 522,
	471, 277, 526, 469, 468, 529, 193, 0, 225, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 201, 205,
	519, 449, 458, 112, 456, 203, 181, 241, 492, 183,
	202, 149, 231, 194, 240, 250, 251, 228, 248, 255,
	218, 93, 227, 412, 109, 213, 95, 237, 224, 160,
	139, 140, 94, 0, 199, 117, 125, 114, 173, 234,
	235, 113, 258, 101, 247, 97, 421, 246, 167, 230,
	238, 161, 154, 96, 236, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 428, 0,
	222, 244, 259, 106, 444, 229, 253, 254, 0, 195,
	107, 126, 120, 190, 124, 422, 420, 415, 414, 143,
	150, 198, 257, 180, 204, 110, 243, 220, 440, 443,
	438, 439, 487, 488, 534, 535, 536, 512, 434, 0,
	441, 442, 0, 517, 524, 525, 491, 89, 98, 147,
	256, 196, 123, 245, 424, 437, 116, 447, 0, 0,
	460, 465, 466, 478, 480, 481, 482, 483, 490, 497,
	498, 500, 506, 507, 508, 509, 514, 521, 540, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 197, 200, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 223, 226,
	232, 233, 242, 249, 252, 174, 0, 0, 902, 0,
	317, 0, 0, 0, 118, 0, 316, 0, 0, 0,
	146, 0, 903, 360, 148, 0, 0, 221, 162, 0,
	0, 0, 0, 0, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 86, 87, 88,
	338, 337, 340, 341, 342, 343, 0, 0, 108, 339,
	344, 345, 346, 0, 0, 0, 314, 331, 0, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	329, 399, 0, 0, 0, 374, 0, 330, 0, 0,
	323, 324, 326, 325, 327, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 373, 0, 0, 277,
	0, 0, 371, 0, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 0, 0,
	0, 112, 0, 203, 181, 241, 0, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 102, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 222, 244,
	259, 106, 0, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 166, 103, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 361, 372, 367, 368,
	365, 366, 364, 363, 362, 375, 353, 354, 355, 356,
	358, 0, 369, 370, 357, 89, 98, 147, 256, 196,
	123, 245, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 174, 0, 0, 0, 0, 317, 0,
	0, 0, 118, 0, 316, 0, 0, 0, 146, 0,
	0, 360, 148, 0, 0, 221, 162, 0, 0, 0,
	0, 0, 351, 352, 0, 0, 0, 0, 0, 0,
	1000, 0, 54, 0, 0, 86, 87, 88, 338, 337,
	340, 341, 342, 343, 0, 0, 108, 339, 344, 345,
	346, 1001, 0, 0, 314, 331, 0, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 329, 0,
	0, 0, 0, 374, 0, 330, 0, 0, 323, 324,
	326, 325, 327, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 373, 0, 0, 277, 0, 0,
	371, 0, 193, 0, 225, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 201, 205, 0, 0, 0, 112,
	0, 203, 181, 241, 0, 183, 202, 149, 231, 194,
	240, 250, 251, 228, 248, 255, 218, 93, 227, 239,
	109, 213, 95, 237, 224, 160, 139, 140, 94, 0,
	199, 117, 125, 114, 173, 234, 235, 113, 258, 101,
	247, 97, 102, 246, 167, 230, 238, 161, 154, 96,
	236, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 222, 244, 259, 106,
	0, 229, 253, 254, 0, 195, 107, 126, 120, 190,
	124, 166, 103, 135, 219, 143, 150, 198, 257, 180,
	204, 110, 243, 220, 361, 372, 367, 368, 365, 366,
	364, 363, 362, 375, 353, 354, 355, 356, 358, 0,
	369, 370, 357, 89, 98, 147, 256, 196, 123, 245,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 197, 200, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 223, 226, 232, 233, 242, 249,
	252, 174, 0, 0, 0, 0, 317, 0, 0, 0,
	118, 0, 316, 0, 0, 0, 146, 0, 0, 360,
	148, 0, 0, 221, 162, 0, 0, 0, 0, 0,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 387, 86, 87, 88, 338, 337, 340, 341,
	342, 343, 0, 0, 108, 339, 344, 345, 346, 0,
	0, 0, 314, 331, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 374, 0, 330, 0, 0, 323, 324, 326, 325,
	327, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 373, 0, 0, 277, 0, 0, 371, 0,
	193, 0, 225, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 201, 205, 0, 0, 0, 112, 0, 203,
	181, 241, 0, 183, 202, 149, 231, 194, 240, 250,
	251, 228, 248, 255, 218, 93, 227, 239, 109, 213,
	95, 237, 224, 160, 139, 140, 94, 0, 199, 117,
	125, 114, 173, 234, 235, 113, 258, 101, 247, 97,
	102, 246, 167, 230, 238, 161, 154, 96, 236, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 222, 244, 259, 106, 0, 229,
	253, 254, 0, 195, 107, 126, 120, 190, 124, 166,
	103, 135, 219, 143, 150, 198, 257, 180, 204, 110,
	243, 220, 361, 372, 367, 368, 365, 366, 364, 363,
	362, 375, 353, 354, 355, 356, 358, 0, 369, 370,
	357, 89, 98, 147, 256, 196, 123, 245, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 197,
	200, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 223, 226, 232, 233, 242, 249, 252, 174,
	0, 0, 0, 0, 317, 0, 0, 0, 118, 0,
	316, 0, 0, 0, 146, 0, 0, 360, 148, 0,
	0, 221, 162, 0, 0, 0, 0, 0, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 86, 87, 88, 338, 337, 340, 341, 342, 343,
	0, 0, 108, 339, 344, 345, 346, 0, 0, 0,
	314, 331, 0, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 329, 399, 0, 0, 0, 374,
	0, 330, 0, 0, 323, 324, 326, 325, 327, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	373, 0, 0, 277, 0, 0, 371, 0, 193, 0,
	225, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	201, 205, 0, 0, 0, 112, 0, 203, 181, 241,
	0, 183, 202, 149, 231, 194, 240, 250, 251, 228,
	248, 255, 218, 93, 227, 239, 109, 213, 95, 237,
	224, 160, 139, 140, 94, 0, 199, 117, 125, 114,
	173, 234, 235, 113, 258, 101, 247, 97, 102, 246,
	167, 230, 238, 161, 154, 96, 236, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 222, 244, 259, 106, 0, 229, 253, 254,
	0, 195, 107, 126, 120, 190, 124, 166, 103, 135,
	219, 143, 150, 198, 257, 180, 204, 110, 243, 220,
	361, 372, 367, 368, 365, 366, 364, 363, 362, 375,
	353, 354, 355, 356, 358, 0, 369, 370, 357, 89,
	98, 147, 256, 196, 123, 245, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 197, 200, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	223, 226, 232, 233, 242, 249, 252, 174, 0, 0,
	0, 0, 317, 0, 0, 0, 118, 0, 316, 0,
	0, 0, 146, 0, 0, 360, 148, 0, 0, 221,
	162, 0, 0, 0, 0, 0, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 86,
	87, 88, 338, 918, 340, 341, 342, 343, 0, 0,
	108, 339, 344, 345, 346, 0, 0, 0, 314, 331,
	0, 359, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 329, 399, 0, 0, 0, 374, 0, 330,
	0, 0, 323, 324, 326, 325, 327, 332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 373, 0,
	0, 277, 0, 0, 371, 0, 193, 0, 225, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 201, 205,
	0, 0, 0, 112, 0, 203, 181, 241, 0, 183,
	202, 149, 231, 194, 240, 250, 251, 228, 248, 255,
	218, 93, 227, 239, 109, 213, 95, 237, 224, 160,
	139, 140, 94, 0, 199, 117, 125, 114, 173, 234,
	235, 113, 258, 101, 247, 97, 102, 246, 167, 230,
	238, 161, 154, 96, 236, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	222, 244, 259, 106, 0, 229, 253, 254, 0, 195,
	107, 126, 120, 190, 124, 166, 103, 135, 219, 143,
	150, 198, 257, 180, 204, 110, 243, 220, 361, 372,
	367, 368, 365, 366, 364, 363, 362, 375, 353, 354,
	355, 356, 358, 0, 369, 370, 357, 89, 98, 147,
	256, 196, 123, 245, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 197, 200, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 223, 226,
	232, 233, 242, 249, 252, 174, 0, 0, 0, 0,
	317, 0, 0, 0, 118, 0, 316, 0, 0, 0,
	146, 0, 0, 360, 148, 0, 0, 221, 162, 0,
	0, 0, 0, 0, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 86, 87, 88,
	338, 915, 340, 341, 342, 343, 0, 0, 108, 339,
	344, 345, 346, 0, 0, 0, 314, 331, 0, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	329, 399, 0, 0, 0, 374, 0, 330, 0, 0,
	323, 324, 326, 325, 327, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 373, 0, 0, 277,
	0, 0, 371, 0, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 0, 0,
	0, 112, 0, 203, 181, 241, 0, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 102, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 222, 244,
	259, 106, 0, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 166, 103, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 361, 372, 367, 368,
	365, 366, 364, 363, 362, 375, 353, 354, 355, 356,
	358, 0, 369, 370, 357, 89, 98, 147, 256, 196,
	123, 245, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	317, 0, 0, 0, 118, 0, 316, 0, 0, 0,
	146, 0, 0, 360, 148, 0, 0, 221, 162, 0,
	0, 0, 0, 0, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 86, 87, 88,
	338, 337, 340, 341, 342, 343, 0, 0, 108, 339,
	344, 345, 346, 0, 0, 0, 314, 331, 0, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	329, 0, 0, 0, 0, 374, 0, 330, 0, 0,
	323, 324, 326, 325, 327, 332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 373, 0, 0, 277,
	0, 0, 371, 0, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 0, 0,
	0, 112, 0, 203, 181, 241, 0, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 102, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 222, 244,
	259, 106, 0, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 166, 103, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 361, 372, 367, 368,
	365, 366, 364, 363, 362, 375, 353, 354, 355, 356,
	358, 0, 369, 370, 357, 89, 98, 147, 256, 196,
	123, 245, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 174, 0, 0, 0, 0, 317, 0,
	0, 0, 118, 0, 316, 0, 0, 0, 146, 0,
	0, 360, 148, 0, 0, 221, 162, 0, 0, 0,
	0, 0, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 86, 87, 88, 338, 337,
	340, 341, 342, 343, 0, 0, 108, 339, 344, 345,
	346, 0, 0, 0, 314, 331, 0, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 329, 0,
	0, 0, 0, 374, 0, 330, 0, 0, 323, 324,
	326, 325, 327, 332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 373, 0, 0, 277, 0, 0,
	371, 0, 193, 0, 225, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 201, 205, 0, 0, 0, 112,
	0, 203, 181, 241, 0, 183, 202, 149, 231, 194,
	240, 250, 251, 228, 248, 255, 218, 93, 227, 239,
	109, 213, 95, 237, 224, 160, 139, 140, 94, 0,
	199, 117, 125, 114, 173, 234, 235, 113, 258, 101,
	247, 97, 102, 246, 167, 230, 238, 161, 154, 96,
	236, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 222, 244, 259, 106,
	0, 229, 253, 254, 0, 195, 107, 126, 120, 190,
	124, 166, 103, 135, 219, 143, 150, 198, 257, 180,
	204, 110, 243, 220, 361, 372, 367, 368, 365, 366,
	364, 363, 362, 375, 353, 354, 355, 356, 358, 0,
	369, 370, 357, 89, 98, 147, 256, 196, 123, 245,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 197, 200, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 223, 226, 232, 233, 242, 249,
	252, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 146, 0, 0, 360,
	148, 0, 0, 221, 162, 0, 0, 0, 0, 0,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 86, 87, 88, 338, 337, 340, 341,
	342, 343, 0, 0, 108, 339, 344, 345, 346, 0,
	0, 0, 0, 331, 0, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 329, 0, 0, 0,
	0, 374, 0, 330, 0, 0, 323, 324, 326, 325,
	327, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 373, 0, 0, 277, 0, 0, 371, 0,
	193, 0, 225, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 201, 205, 0, 0, 0, 112, 0, 203,
	181, 241, 1566, 183, 202, 149, 231, 194, 240, 250,
	251, 228, 248, 255, 218, 93, 227, 239, 109, 213,
	95, 237, 224, 160, 139, 140, 94, 0, 199, 117,
	125, 114, 173, 234, 235, 113, 258, 101, 247, 97,
	102, 246, 167, 230, 238, 161, 154, 96, 236, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 222, 244, 259, 106, 0, 229,
	253, 254, 0, 195, 107, 126, 120, 190, 124, 166,
	103, 135, 219, 143, 150, 198, 257, 180, 204, 110,
	243, 220, 361, 372, 367, 368, 365, 366, 364, 363,
	362, 375, 353, 354, 355, 356, 358, 0, 369, 370,
	357, 89, 98, 147, 256, 196, 123, 245, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 197,
	200, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 223, 226, 232, 233, 242, 249, 252, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 146, 0, 0, 360, 148, 0,
	0, 221, 162, 0, 0, 0, 0, 0, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	387, 86, 87, 88, 338, 337, 340, 341, 342, 343,
	0, 0, 108, 339, 344, 345, 346, 0, 0, 0,
	0, 331, 0, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 329, 0, 0, 0, 0, 374,
	0, 330, 0, 0, 323, 324, 326, 325, 327, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	373, 0, 0, 277, 0, 0, 371, 0, 193, 0,
	225, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	201, 205, 0, 0, 0, 112, 0, 203, 181, 241,
	0, 183, 202, 149, 231, 194, 240, 250, 251, 228,
	248, 255, 218, 93, 227, 239, 109, 213, 95, 237,
	224, 160, 139, 140, 94, 0, 199, 117, 125, 114,
	173, 234, 235, 113, 258, 101, 247, 97, 102, 246,
	167, 230, 238, 161, 154, 96, 236, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 222, 244, 259, 106, 0, 229, 253, 254,
	0, 195, 107, 126, 120, 190, 124, 166, 103, 135,
	219, 143, 150, 198, 257, 180, 204, 110, 243, 220,
	361, 372, 367, 368, 365, 366, 364, 363, 362, 375,
	353, 354, 355, 356, 358, 0, 369, 370, 357, 89,
	98, 147, 256, 196, 123, 245, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 197, 200, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	223, 226, 232, 233, 242, 249, 252, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 146, 0, 0, 360, 148, 0, 0, 221,
	162, 0, 0, 0, 0, 0, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 86,
	87, 88, 338, 337, 340, 341, 342, 343, 0, 0,
	108, 339, 344, 345, 346, 0, 0, 0, 0, 331,
	0, 359, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 329, 0, 0, 0, 0, 374, 0, 330,
	0, 0, 323, 324, 326, 325, 327, 332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 373, 0,
	0, 277, 0, 0, 371, 0, 193, 0, 225, 130,
	145, 104, 142, 90, 100, 0, 129, 171, 201, 205,
	0, 0, 0, 112, 0, 203, 181, 241, 0, 183,
	202, 149, 231, 194, 240, 250, 251, 228, 248, 255,
	218, 93, 227, 239, 109, 213, 95, 237, 224, 160,
	139, 140, 94, 0, 199, 117, 125, 114, 173, 234,
	235, 113, 258, 101, 247, 97, 102, 246, 167, 230,
	238, 161, 154, 96, 236, 159, 153, 144, 121, 132,
	191, 151, 192, 133, 164, 163, 165, 0, 0, 0,
	222, 244, 259, 106, 0, 229, 253, 254, 0, 195,
	107, 126, 120, 190, 124, 166, 103, 135, 219, 143,
	150, 198, 257, 180, 204, 110, 243, 220, 361, 372,
	367, 368, 365, 366, 364, 363, 362, 375, 353, 354,
	355, 356, 358, 0, 369, 370, 357, 89, 98, 147,
	256, 196, 123, 245, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 99, 105, 111, 115, 119, 122, 128, 131, 134,
	136, 137, 138, 141, 152, 155, 156, 157, 158, 168,
	169, 170, 172, 175, 176, 177, 178, 179, 182, 184,
	185, 186, 187, 188, 189, 197, 200, 206, 207, 208,
	209, 210, 211, 212, 214, 215, 216, 217, 223, 226,
	232, 233, 242, 249, 252, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 148, 0, 0, 221, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 627, 637, 638, 630,
	631, 632, 633, 634, 635, 636, 629, 0, 0, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 277,
	0, 0, 0, 0, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 0, 0,
	0, 112, 0, 203, 181, 241, 0, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 102, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 222, 244,
	259, 106, 0, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 166, 103, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 98, 147, 256, 196,
	123, 245, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 174, 0, 0, 0, 718, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 148, 0, 0, 221, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 88, 0, 720,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 618, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 277, 0, 0,
	0, 0, 193, 0, 225, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 201, 205, 0, 0, 0, 112,
	0, 203, 181, 241, 0, 183, 202, 149, 231, 194,
	240, 250, 251, 228, 248, 255, 218, 93, 227, 239,
	109, 213, 95, 237, 224, 160, 139, 140, 94, 0,
	199, 117, 125, 114, 173, 234, 235, 113, 258, 101,
	247, 97, 102, 246, 167, 230, 238, 161, 154, 96,
	236, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 222, 244, 259, 106,
	0, 229, 253, 254, 0, 195, 107, 126, 120, 190,
	124, 166, 103, 135, 219, 143, 150, 198, 257, 180,
	204, 110, 243, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 98, 147, 256, 196, 123, 245,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 197, 200, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 223, 226, 232, 233, 242, 249,
	252, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	148, 0, 0, 221, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 80, 81, 0, 77, 0, 0, 0, 82,
	193, 0, 225, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 201, 205, 0, 0, 0, 112, 0, 203,
	181, 241, 0, 183, 202, 149, 231, 194, 240, 250,
	251, 228, 248, 255, 218, 93, 227, 239, 109, 213,
	95, 237, 224, 160, 139, 140, 94, 0, 199, 117,
	125, 114, 173, 234, 235, 113, 258, 101, 247, 97,
	102, 246, 167, 230, 238, 161, 154, 96, 236, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 222, 244, 259, 106, 0, 229,
	253, 254, 0, 195, 107, 126, 120, 190, 124, 166,
	103, 135, 219, 143, 150, 198, 257, 180, 204, 110,
	243, 220, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 98, 147, 256, 196, 123, 245, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 197,
	200, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 223, 226, 232, 233, 242, 249, 252, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 148, 0,
	0, 221, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 0, 127,
	0, 0, 0, 277, 0, 0, 0, 0, 193, 0,
	225, 130, 145, 104, 142, 90, 100, 0, 129, 171,
	201, 205, 0, 0, 0, 112, 0, 203, 181, 241,
	0, 183, 202, 149, 231, 194, 240, 250, 251, 228,
	248, 255, 218, 93, 227, 239, 109, 213, 95, 237,
	224, 160, 139, 140, 94, 0, 199, 117, 125, 114,
	173, 234, 235, 113, 258, 101, 247, 97, 102, 246,
	167, 230, 238, 161, 154, 96, 236, 159, 153, 144,
	121, 132, 191, 151, 192, 133, 164, 163, 165, 0,
	0, 0, 222, 244, 259, 106, 0, 229, 253, 254,
	0, 195, 107, 126, 120, 190, 124, 166, 103, 135,
	219, 143, 150, 198, 257, 180, 204, 110, 243, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	98, 147, 256, 196, 123, 245, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 99, 105, 111, 115, 119, 122, 128,
	131, 134, 136, 137, 138, 141, 152, 155, 156, 157,
	158, 168, 169, 170, 172, 175, 176, 177, 178, 179,
	182, 184, 185, 186, 187, 188, 189, 197, 200, 206,
	207, 208, 209, 210, 211, 212, 214, 215, 216, 217,
	223, 226, 232, 233, 242, 249, 252, 304, 174, 0,
	0, 0, 983, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 148, 0, 0,
	221, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 88, 0, 985, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 277, 0, 0, 0, 0, 193, 0, 225,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 201,
	205, 0, 0, 0, 112, 0, 203, 181, 241, 0,
	183, 202, 149, 231, 194, 240, 250, 251, 228, 248,
	255, 218, 93, 227, 239, 109, 213, 95, 237, 224,
	160, 139, 140, 94, 0, 199, 117, 125, 114, 173,
	234, 235, 113, 258, 101, 247, 97, 102, 246, 167,
	230, 238, 161, 154, 96, 236, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 0,
	0, 222, 244, 259, 106, 0, 229, 253, 254, 0,
	195, 107, 126, 120, 190, 124, 166, 103, 135, 219,
	143, 150, 198, 257, 180, 204, 110, 243, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 98,
	147, 256, 196, 123, 245, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 197, 200, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 223,
	226, 232, 233, 242, 249, 252, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 148, 0, 0,
	221, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 277, 0, 0, 0, 0, 193, 0, 225,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 201,
	205, 0, 0, 0, 112, 0, 203, 181, 241, 0,
	183, 202, 149, 231, 194, 240, 250, 251, 228, 248,
	255, 218, 93, 227, 239, 109, 213, 95, 237, 224,
	160, 139, 140, 94, 0, 199, 117, 125, 114, 173,
	234, 235, 113, 258, 101, 247, 97, 102, 246, 167,
	230, 238, 161, 154, 96, 236, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 0,
	0, 222, 244, 259, 106, 0, 229, 253, 254, 0,
	195, 107, 126, 120, 190, 124, 166, 103, 135, 219,
	143, 150, 198, 257, 180, 204, 110, 243, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 98,
	147, 256, 196, 123, 245, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 197, 200, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 223,
	226, 232, 233, 242, 249, 252, 174, 0, 0, 0,
	983, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 148, 0, 0, 221, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 0, 985, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	277, 0, 0, 0, 0, 193, 0, 225, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 201, 205, 0,
	0, 0, 112, 0, 203, 181, 241, 0, 981, 202,
	149, 231, 194, 240, 250, 251, 228, 248, 255, 218,
	93, 227, 239, 109, 213, 95, 237, 224, 160, 139,
	140, 94, 0, 199, 117, 125, 114, 173, 234, 235,
	113, 258, 101, 247, 97, 102, 246, 167, 230, 238,
	161, 154, 96, 236, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 0, 0, 222,
	244, 259, 106, 0, 229, 253, 254, 0, 195, 107,
	126, 120, 190, 124, 166, 103, 135, 219, 143, 150,
	198, 257, 180, 204, 110, 243, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 98, 147, 256,
	196, 123, 245, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 197, 200, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 223, 226, 232,
	233, 242, 249, 252, 383, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 148, 0, 0, 221, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	277, 0, 0, 0, 0, 193, 0, 225, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 201, 205, 0,
	0, 0, 112, 0, 203, 181, 241, 0, 183, 202,
	149, 231, 194, 240, 250, 251, 228, 248, 255, 218,
	93, 227, 239, 109, 213, 95, 237, 224, 160, 139,
	140, 94, 0, 199, 117, 125, 114, 173, 234, 235,
	113, 258, 101, 247, 97, 102, 246, 167, 230, 238,
	161, 154, 96, 236, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 0, 0, 222,
	244, 259, 106, 0, 229, 253, 254, 0, 195, 107,
	126, 120, 190, 124, 166, 103, 135, 219, 143, 150,
	198, 257, 180, 204, 110, 243, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 98, 147, 256,
	196, 123, 245, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 197, 200, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 223, 226, 232,
	233, 242, 249, 252, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 148, 0, 0, 221, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 88, 0,
	0, 951, 0, 0, 952, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 277, 0,
	0, 0, 0, 193, 0, 225, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 201, 205, 0, 0, 0,
	112, 0, 203, 181, 241, 0, 183, 202, 149, 231,
	194, 240, 250, 251, 228, 248, 255, 218, 93, 227,
	239, 109, 213, 95, 237, 224, 160, 139, 140, 94,
	0, 199, 117, 125, 114, 173, 234, 235, 113, 258,
	101, 247, 97, 102, 246, 167, 230, 238, 161, 154,
	96, 236, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 0, 0, 222, 244, 259,
	106, 0, 229, 253, 254, 0, 195, 107, 126, 120,
	190, 124, 166, 103, 135, 219, 143, 150, 198, 257,
	180, 204, 110, 243, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 98, 147, 256, 196, 123,
	245, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 197, 200, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 223, 226, 232, 233, 242,
	249, 252, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 753, 0, 0, 0, 146, 0, 0,
	0, 148, 0, 0, 221, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 0, 752, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 277, 0, 0, 0,
	0, 193, 0, 225, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 201, 205, 0, 0, 0, 112, 0,
	203, 181, 241, 0, 183, 202, 149, 231, 194, 240,
	250, 251, 228, 248, 255, 218, 93, 227, 239, 109,
	213, 95, 237, 224, 160, 139, 140, 94, 0, 199,
	117, 125, 114, 173, 234, 235, 113, 258, 101, 247,
	97, 102, 246, 167, 230, 238, 161, 154, 96, 236,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 0, 0, 222, 244, 259, 106, 0,
	229, 253, 254, 0, 195, 107, 126, 120, 190, 124,
	166, 103, 135, 219, 143, 150, 198, 257, 180, 204,
	110, 243, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 98, 147, 256, 196, 123, 245, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	197, 200, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 223, 226, 232, 233, 242, 249, 252,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 148,
	0, 0, 221, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 387, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 277, 0, 0, 0, 0, 193,
	0, 225, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 201, 205, 0, 0, 0, 112, 0, 203, 181,
	241, 0, 183, 202, 149, 231, 194, 240, 250, 251,
	228, 248, 255, 218, 93, 227, 239, 109, 213, 95,
	237, 224, 160, 139, 140, 94, 0, 199, 117, 125,
	114, 173, 234, 235, 113, 258, 101, 247, 97, 102,
	246, 167, 230, 238, 161, 154, 96, 236, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 0, 0, 222, 244, 259, 106, 0, 229, 253,
	254, 0, 195, 107, 126, 120, 190, 124, 166, 103,
	135, 219, 143, 150, 198, 257, 180, 204, 110, 243,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 98, 147, 256, 196, 123, 245, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 197, 200,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 223, 226, 232, 233, 242, 249, 252, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 148, 0, 0,
	221, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 277, 0, 0, 0, 0, 193, 0, 225,
	130, 145, 104, 142, 90, 100, 0, 129, 171, 201,
	205, 0, 0, 0, 112, 0, 203, 181, 241, 0,
	183, 202, 149, 231, 194, 240, 250, 251, 228, 248,
	255, 218, 93, 227, 239, 109, 213, 95, 237, 224,
	160, 139, 140, 94, 0, 199, 117, 125, 114, 173,
	234, 235, 113, 258, 101, 247, 97, 102, 246, 167,
	230, 238, 161, 154, 96, 236, 159, 153, 144, 121,
	132, 191, 151, 192, 133, 164, 163, 165, 0, 0,
	0, 222, 244, 259, 106, 0, 229, 253, 254, 0,
	195, 107, 126, 120, 190, 124, 166, 103, 135, 219,
	143, 150, 198, 257, 180, 204, 110, 243, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 98,
	147, 256, 196, 123, 245, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 99, 105, 111, 115, 119, 122, 128, 131,
	134, 136, 137, 138, 141, 152, 155, 156, 157, 158,
	168, 169, 170, 172, 175, 176, 177, 178, 179, 182,
	184, 185, 186, 187, 188, 189, 197, 200, 206, 207,
	208, 209, 210, 211, 212, 214, 215, 216, 217, 223,
	226, 232, 233, 242, 249, 252, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 148, 0, 0, 221, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	88, 0, 985, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	277, 0, 0, 0, 0, 193, 0, 225, 130, 145,
	104, 142, 90, 100, 0, 129, 171, 201, 205, 0,
	0, 0, 112, 0, 203, 181, 241, 0, 183, 202,
	149, 231, 194, 240, 250, 251, 228, 248, 255, 218,
	93, 227, 239, 109, 213, 95, 237, 224, 160, 139,
	140, 94, 0, 199, 117, 125, 114, 173, 234, 235,
	113, 258, 101, 247, 97, 102, 246, 167, 230, 238,
	161, 154, 96, 236, 159, 153, 144, 121, 132, 191,
	151, 192, 133, 164, 163, 165, 0, 0, 0, 222,
	244, 259, 106, 0, 229, 253, 254, 0, 195, 107,
	126, 120, 190, 124, 166, 103, 135, 219, 143, 150,
	198, 257, 180, 204, 110, 243, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 98, 147, 256,
	196, 123, 245, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	99, 105, 111, 115, 119, 122, 128, 131, 134, 136,
	137, 138, 141, 152, 155, 156, 157, 158, 168, 169,
	170, 172, 175, 176, 177, 178, 179, 182, 184, 185,
	186, 187, 188, 189, 197, 200, 206, 207, 208, 209,
	210, 211, 212, 214, 215, 216, 217, 223, 226, 232,
	233, 242, 249, 252, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 148, 0, 0, 221, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 88, 0,
	720, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 277, 0,
	0, 0, 0, 193, 0, 225, 130, 145, 104, 142,
	90, 100, 0, 129, 171, 201, 205, 0, 0, 0,
	112, 0, 203, 181, 241, 0, 183, 202, 149, 231,
	194, 240, 250, 251, 228, 248, 255, 218, 93, 227,
	239, 109, 213, 95, 237, 224, 160, 139, 140, 94,
	0, 199, 117, 125, 114, 173, 234, 235, 113, 258,
	101, 247, 97, 102, 246, 167, 230, 238, 161, 154,
	96, 236, 159, 153, 144, 121, 132, 191, 151, 192,
	133, 164, 163, 165, 0, 0, 0, 222, 244, 259,
	106, 0, 229, 253, 254, 0, 195, 107, 126, 120,
	190, 124, 166, 103, 135, 219, 143, 150, 198, 257,
	180, 204, 110, 243, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 98, 147, 256, 196, 123,
	245, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 99, 105,
	111, 115, 119, 122, 128, 131, 134, 136, 137, 138,
	141, 152, 155, 156, 157, 158, 168, 169, 170, 172,
	175, 176, 177, 178, 179, 182, 184, 185, 186, 187,
	188, 189, 197, 200, 206, 207, 208, 209, 210, 211,
	212, 214, 215, 216, 217, 223, 226, 232, 233, 242,
	249, 252, 174, 0, 0, 0, 0, 0, 0, 0,
	723, 118, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 148, 0, 0, 221, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 277, 0, 0, 0,
	0, 193, 0, 225, 130, 145, 104, 142, 90, 100,
	0, 129, 171, 201, 205, 0, 0, 0, 112, 0,
	203, 181, 241, 0, 183, 202, 149, 231, 194, 240,
	250, 251, 228, 248, 255, 218, 93, 227, 239, 109,
	213, 95, 237, 224, 160, 139, 140, 94, 0, 199,
	117, 125, 114, 173, 234, 235, 113, 258, 101, 247,
	97, 102, 246, 167, 230, 238, 161, 154, 96, 236,
	159, 153, 144, 121, 132, 191, 151, 192, 133, 164,
	163, 165, 0, 0, 0, 222, 244, 259, 106, 0,
	229, 253, 254, 0, 195, 107, 126, 120, 190, 124,
	166, 103, 135, 219, 143, 150, 198, 257, 180, 204,
	110, 243, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 98, 147, 256, 196, 123, 245, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 99, 105, 111, 115,
	119, 122, 128, 131, 134, 136, 137, 138, 141, 152,
	155, 156, 157, 158, 168, 169, 170, 172, 175, 176,
	177, 178, 179, 182, 184, 185, 186, 187, 188, 189,
	197, 200, 206, 207, 208, 209, 210, 211, 212, 214,
	215, 216, 217, 223, 226, 232, 233, 242, 249, 252,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 148,
	0, 0, 221, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 88, 0, 607, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 277, 0, 0, 0, 0, 193,
	0, 225, 130, 145, 104, 142, 90, 100, 0, 129,
	171, 201, 205, 0, 0, 0, 112, 0, 203, 181,
	241, 0, 183, 202, 149, 231, 194, 240, 250, 251,
	228, 248, 255, 218, 93, 227, 239, 109, 213, 95,
	237, 224, 160, 139, 140, 94, 0, 199, 117, 125,
	114, 173, 234, 235, 113, 258, 101, 247, 97, 102,
	246, 167, 230, 238, 161, 154, 96, 236, 159, 153,
	144, 121, 132, 191, 151, 192, 133, 164, 163, 165,
	0, 0, 0, 222, 244, 259, 106, 0, 229, 253,
	254, 0, 195, 107, 126, 120, 190, 124, 166, 103,
	135, 219, 143, 150, 198, 257, 180, 204, 110, 243,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 98, 147, 256, 196, 123, 245, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 99, 105, 111, 115, 119, 122,
	128, 131, 134, 136, 137, 138, 141, 152, 155, 156,
	157, 158, 168, 169, 170, 172, 175, 176, 177, 178,
	179, 182, 184, 185, 186, 187, 188, 189, 197, 200,
	206, 207, 208, 209, 210, 211, 212, 214, 215, 216,
	217, 223, 226, 232, 233, 242, 249, 252, 404, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 148, 0, 0, 221, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 277,
	0, 0, 0, 0, 193, 0, 225, 130, 145, 104,
	142, 90, 100, 0, 129, 171, 201, 205, 0, 0,
	0, 112, 0, 203, 181, 241, 0, 183, 202, 149,
	231, 194, 240, 250, 251, 228, 248, 255, 218, 93,
	227, 239, 109, 213, 95, 237, 224, 160, 139, 140,
	94, 0, 199, 117, 125, 114, 173, 234, 235, 113,
	258, 101, 247, 97, 102, 246, 167, 230, 238, 161,
	154, 96, 236, 159, 153, 144, 121, 132, 191, 151,
	192, 133, 164, 163, 165, 0, 0, 0, 222, 244,
	259, 106, 0, 229, 253, 254, 0, 195, 107, 126,
	120, 190, 124, 166, 103, 135, 219, 143, 150, 198,
	257, 180, 204, 110, 243, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 98, 147, 256, 196,
	123, 245, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 99,
	105, 111, 115, 119, 122, 128, 131, 134, 136, 137,
	138, 141, 152, 155, 156, 157, 158, 168, 169, 170,
	172, 175, 176, 177, 178, 179, 182, 184, 185, 186,
	187, 188, 189, 197, 200, 206, 207, 208, 209, 210,
	211, 212, 214, 215, 216, 217, 223, 226, 232, 233,
	242, 249, 252, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 148, 0, 0, 221, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 272, 0, 277, 0, 0,
	0, 0, 193, 0, 225, 130, 145, 104, 142, 90,
	100, 0, 129, 171, 201, 205, 0, 0, 0, 112,
	0, 203, 181, 241, 0, 183, 202, 149, 231, 194,
	240, 250, 251, 228, 248, 255, 218, 93, 227, 239,
	109, 213, 95, 237, 224, 160, 139, 140, 94, 0,
	199, 117, 125, 114, 173, 234, 235, 113, 258, 101,
	247, 97, 102, 246, 167, 230, 238, 161, 154, 96,
	236, 159, 153, 144, 121, 132, 191, 151, 192, 133,
	164, 163, 165, 0, 0, 0, 222, 244, 259, 106,
	0, 229, 253, 254, 0, 195, 107, 126, 120, 190,
	124, 166, 103, 135, 219, 143, 150, 198, 257, 180,
	204, 110, 243, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 98, 147, 256, 196, 123, 245,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 99, 105, 111,
	115, 119, 122, 128, 131, 134, 136, 137, 138, 141,
	152, 155, 156, 157, 158, 168, 169, 170, 172, 175,
	176, 177, 178, 179, 182, 184, 185, 186, 187, 188,
	189, 197, 200, 206, 207, 208, 209, 210, 211, 212,
	214, 215, 216, 217, 223, 226, 232, 233, 242, 249,
	252, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	148, 0, 0, 221, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 277, 0, 0, 0, 0,
	193, 0, 225, 130, 145, 104, 142, 90, 100, 0,
	129, 171, 201, 205, 0, 0, 0, 112, 0, 203,
	181, 241, 0, 183, 202, 149, 231, 194, 240, 250,
	251, 228, 248, 255, 218, 93, 227, 239, 109, 213,
	95, 237, 224, 160, 139, 140, 94, 0, 199, 117,
	125, 114, 173, 234, 235, 113, 258, 101, 247, 97,
	102, 246, 167, 230, 238, 161, 154, 96, 236, 159,
	153, 144, 121, 132, 191, 151, 192, 133, 164, 163,
	165, 0, 0, 0, 222, 244, 259, 106, 0, 229,
	253, 254, 0, 195, 107, 126, 120, 190, 124, 166,
	103, 135, 219, 143, 150, 198, 257, 180, 204, 110,
	243, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 98, 147, 256, 196, 123, 245, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 99, 105, 111, 115, 119,
	122, 128, 131, 134, 136, 137, 138, 141, 152, 155,
	156, 157, 158, 168, 169, 170, 172, 175, 176, 177,
	178, 179, 182, 184, 185, 186, 187, 188, 189, 197,
	200, 206, 207, 208, 209, 210, 211, 212, 214, 215,
	216, 217, 223, 226, 232, 233, 242, 249, 252,
}
var yyPact = [...]int{

	1692, -1000, -273, 982, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 771, -1000, -1000, -1000,
	-1000, -1000, -1000, 265, 11733, 24, 116, -7, 16835, 115,
	148, 17173, -1000, 12, -1000, -1000, 12071, -1000, -1000, -74,
	-78, -1000, 9705, 942, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 788, 926, 645, 909, -1000, 8341, 77, 77,
	16497, 6989, -1000, -1000, 354, 17173, 110, 17173, -142, 72,
	72, 72, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	101, 17173, 639, 639, 335, -1000, 17173, 69, 639, 69,
	69, 69, 17173, -1000, 163, -1000, -1000, -1000, 17173, 639,
	871, 279, 59, 4532, -1000, 184, -1000, 4532, 25, 4532,
	-53, 951, 19, -25, -1000, 4532, -1000, -1000, -1000, -1000,
	-1000, -1000, 16152, 100, 272, -1000, -1000, -1000, -1000, -1000,
	-1000, 517, 468, -1000, 9705, 1502, 629, 629, -1000, -1000,
	137, -1000, -1000, 10719, 10719, 10719, 10719, 10719, 10719, 10719,
	10719, 10719, 10719, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 629, 162, -1000,
	9367, 629, 629, 629, 629, 629, 629, 629, 629, 9705,
	629, 629, 629, 629, 629, 629, 629, 629, 629, 629,
	629, 629, 629, 629, 629, 629, -1000, -1000, 921, 932,
	942, -1000, 771, -1000, -1000, -1000, 942, -1000, 851, 8341,
	-1000, -1000, 840, -1000, -1000, -1000, -1000, 321, 964, -1000,
	11395, 158, 15814, 14800, 17173, 792, 750, -1000, -1000, 157,
	710, 6638, -72, -1000, -1000, -1000, 268, 14124, -1000, -1000,
	-1000, 869, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 700, 17173, -1000, 2564, -1000, 639, 4532, 95, 639,
	292, 639, 17173, 17173, 4532, 4532, 4532, 29, 60, 57,
	17173, 708, 86, 17173, 912, 801, 17173, 639, 639, -1000,
	5936, -1000, 4532, 279, -1000, 431, 9705, 4532, 4532, 4532,
	17173, 4532, 4532, -1000, -1000, -1000, 300, -1000, -1000, -1000,
	-1000, 4532, 4532, -1000, 963, 299, -1000, -1000, -1000, -1000,
	9705, 212, -1000, 800, -1000, -1000, -1000, -1000, -1000, 982,
	-1000, -1000, -1000, -123, -1000, -1000, 9705, 9705, 9705, 544,
	220, 10719, 367, 303, 10719, 10719, 10719, 10719, 10719, 10719,
	10719, 10719, 10719, 10719, 10719, 10719, 10719, 10719, 10719, 621,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 639, -1000,
	980, 768, 768, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 11057, 7327, 5936, 439, 694, 8341, 8341, 9705,
	9705, 9017, 8679, 8341, 872, 278, 468, 17173, -1000, -1000,
	10381, -1000, -1000, -1000, -1000, -1000, 439, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17173, 17173, 8341, 8341, 8341, 8341,
	8341, 878, 9705, 9705, 921, 645, 840, 921, 13786, 760,
	-1000, 840, -1000, -1000, -1000, 17173, -1000, -1000, 15476, -1000,
	-1000, 5585, 40, 17173, -1000, 733, 1077, -1000, -1000, -1000,
	914, 13448, 13098, 40, 502, 14800, 17173, -1000, -1000, 14800,
	17173, 5234, 6287, -72, -1000, 590, -1000, -115, -98, 7665,
	173, -1000, -1000, -1000, -1000, 4181, 360, 490, 353, -51,
	-1000, -1000, -1000, 716, -1000, 716, 716, 716, 716, -14,
	-14, -14, -14, -1000, -1000, -1000, -1000, -1000, 757, 747,
	-1000, 716, 716, 716, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 729, 729, 729, 723, 723, 761, -1000, 17173,
	4532, 911, 4532, -1000, 89, -1000, -1000, -1000, 17173, 17173,
	17173, 17173, 17173, 124, 17173, 17173, 702, -1000, 17173, 4532,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 468, -1000,
	-1000, -1000, -1000, -1000, -1000, 17173, -1000, -1000, -1000, -1000,
	17173, 279, 17173, 17173, 468, -1000, 429, 17173, -1000, -1000,
	-1000, -1000, 468, 220, 257, -1000, -1000, 435, -1000, -1000,
	1607, -1000, -1000, -1000, -1000, 367, 10719, 10719, 10719, 370,
	1607, 2021, 568, 1170, 175, 530, 530, 189, 189, 189,
	189, 189, 482, 482, -1000, -1000, -1000, 439, -1000, -1000,
	-1000, 439, 8341, 8341, 673, 629, 156, -1000, -1000, -1000,
	680, 680, 518, 408, 248, 962, 680, 236, 961, 680,
	680, 8341, -1000, -1000, 295, -1000, 9705, 439, -1000, 153,
	-1000, 430, 657, 633, 680, 439, 439, 680, 680, -1000,
	973, 207, 640, 597, -1000, 386, 878, -1000, 878, 943,
	-1000, 856, 855, 949, 8341, 14800, 840, -1000, -1000, -1000,
	152, 719, 629, -1000, 17173, 14800, 14800, 14800, 14800, 14800,
	-1000, 834, 833, -1000, 815, 812, 825, 17173, -1000, 689,
	179, 629, -1000, 15138, -1000, -1000, 949, 14800, 553, -1000,
	553, -1000, 147, -1000, -1000, 590, -72, -101, -1000, -1000,
	-1000, -1000, 468, -1000, 628, 588, 3830, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 726, 639, -1000, 904, 211, 277,
	639, 901, -1000, -1000, -1000, 874, -1000, 306, -54, -1000,
	-1000, 383, -14, -14, -1000, -1000, 173, 868, 173, 173,
	173, 426, 426, -1000, -1000, -1000, -1000, 374, -1000, -1000,
	-1000, 372, -1000, 797, 17173, 4532, -1000, -1000, -1000, -1000,
	194, 194, 216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 39, 641, -1000, -1000, -1000, -1000,
	6, 26, 85, -1000, 4532, -1000, 299, 299, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 370, 1607, 414,
	-1000, 10719, 10719, -1000, -1000, 680, 680, 8341, 5936, -1000,
	-1000, 239, 621, 239, 10719, 10719, -1000, 10719, 10719, -1000,
	-165, 512, 234, -1000, 9705, 567, -1000, 5936, -1000, 10719,
	10719, -1000, -1000, -1000, -1000, -1000, -1000, 841, 9705, 9705,
	9705, -1000, -1000, -1000, -1000, -1000, 17173, -1000, -1000, -1000,
	-1000, 947, 9705, -1000, 575, -1000, 4883, 794, 17173, 629,
	982, 12760, 17173, 650, -1000, 266, 1077, 740, 789, 1136,
	-1000, -1000, -1000, -1000, 829, -1000, 824, -1000, -1000, -1000,
	-1000, -1000, 109, 106, 98, 17173, -1000, 942, 553, -1000,
	-1000, 185, -1000, -1000, -125, -92, -1000, -1000, -1000, 4181,
	-1000, 4181, 17173, 56, -1000, 639, 639, -1000, -1000, -1000,
	724, 787, 10719, -1000, -1000, -1000, 481, 173, 173, -1000,
	233, -1000, -1000, -1000, 669, -1000, 664, 539, 662, 17173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17173,
	-1000, -1000, -1000, -1000, -1000, 17173, -171, 639, 17173, 17173,
	17173, 17173, -1000, 279, 279, -1000, 10719, 1607, 1607, -1000,
	-1000, 439, -1000, 439, 716, 716, -1000, 716, 723, -1000,
	716, 3, 716, 2, 439, 439, 1989, 1891, 1629, 894,
	629, -159, -1000, 468, 9705, -1000, 819, 501, 847, 468,
	468, -1000, -1000, 945, 925, 468, -1000, -1000, 879, 486,
	514, -1000, -1000, 8003, 655, 146, 653, -1000, 942, 17173,
	9705, -1000, -1000, 9705, 722, -1000, 9705, -1000, -1000, -1000,
	629, 629, 629, 653, 921, -1000, -1000, -1000, -1000, 3830,
	-1000, 648, -1000, 716, -1000, -1000, -1000, 17173, -45, 971,
	1607, -1000, -1000, -1000, -1000, -1000, -14, 403, -14, 363,
	-1000, 352, 4532, -1000, -1000, -1000, -1000, 907, -1000, 5936,
	-1000, -1000, 715, 734, -1000, -1000, -1000, -1000, 1607, -1000,
	-1000, -1000, 120, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10719, 10719, 10719, 10719, 10719, 921, 401, 468, 10719,
	10719, -1000, -1000, 9705, 9705, 884, -1000, 629, -1000, 748,
	17173, 17173, -1000, 17173, 921, -1000, 468, 468, 17173, 468,
	14462, 17173, 17173, 12410, -1000, 159, 17173, -1000, 644, -1000,
	192, -1000, -90, 173, -1000, 173, 465, 442, -1000, 629,
	519, -1000, 229, 17173, 17173, -1000, -1000, 430, 430, 430,
	430, 31, 439, -1000, 430, 430, 468, 517, 970, -1000,
	629, 982, 134, -1000, -1000, -1000, 635, 606, -1000, 606,
	606, 179, 159, -1000, 639, 219, 390, -1000, 53, 17173,
	318, 880, -1000, 877, -1000, -1000, -1000, -1000, -1000, 38,
	5936, 4181, 601, -1000, -1000, -1000, -1000, -1000, 439, 50,
	-174, -1000, -1000, -1000, 17173, 514, 17173, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 344, -1000, -1000, 17173, -1000, -1000,
	355, -1000, -1000, 569, -1000, 17173, -1000, -1000, 641, -1000,
	839, -169, -177, 505, -1000, -1000, 712, -1000, -1000, 38,
	854, -171, -1000, 823, -1000, 17173, -1000, 35, -1000, -172,
	556, 33, -175, 783, 629, -181, 570, -1000, 955, 10043,
	-1000, -1000, 968, 176, 176, 430, 439, -1000, -1000, -1000,
	61, 377, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1299, 84, 19, 503, 1298, 1296, 1295, 1294, 91,
	90, 88, 1293, 1292, 1291, 1290, 1287, 1286, 1284, 1280,
	1265, 1264, 1263, 1257, 1252, 1251, 1249, 1248, 1247, 1246,
	82, 1241, 1240, 1238, 1234, 1231, 1223, 1220, 1218, 1217,
	1216, 46, 242, 52, 59, 1215, 58, 1281, 1212, 57,
	61, 68, 1211, 38, 1210, 1209, 79, 1205, 1204, 56,
	1199, 1198, 221, 1197, 66, 1196, 12, 37, 1195, 1194,
	1193, 1190, 93, 2067, 1189, 1180, 14, 1176, 1175, 89,
	1174, 64, 28, 13, 18, 17, 1172, 107, 6, 1171,
	60, 1170, 1167, 1166, 1161, 26, 1155, 36, 1154, 21,
	62, 1153, 9, 67, 33, 29, 10, 1152, 1151, 23,
	69, 54, 65, 1149, 1143, 551, 1142, 1141, 49, 1140,
	1139, 1138, 24, 1135, 95, 423, 1121, 1111, 1110, 1107,
	45, 824, 1473, 22, 73, 1106, 1105, 1104, 2405, 40,
	55, 16, 1101, 34, 74, 43, 1100, 1099, 44, 1098,
	1096, 1092, 1090, 1089, 1088, 1087, 350, 1084, 1083, 1082,
	27, 25, 1081, 1080, 63, 30, 1078, 1068, 1059, 50,
	70, 1058, 1057, 51, 1054, 1053, 48, 1052, 1049, 1048,
	1034, 1032, 32, 11, 1025, 15, 1023, 8, 1022, 31,
	1019, 7, 1017, 4, 1010, 2, 0, 1008, 5, 53,
	3, 1004, 1, 991, 990, 949, 1037, 80, 989, 77,
}
var yyR1 = [...]int{

	0, 203, 204, 204, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 196, 196, 196,
	20, 3, 3, 3, 3, 2, 8, 4, 5, 5,
	9, 9, 33, 33, 10, 11, 11, 11, 11, 207,
	207, 56, 56, 57, 57, 103, 103, 12, 13, 13,
	112, 112, 111, 111, 111, 113, 113, 113, 113, 146,
	146, 14, 14, 14, 14, 14, 14, 14, 198, 198,
	197, 195, 195, 194, 194, 193, 21, 178, 180, 180,
	179, 179, 179, 179, 170, 149, 149, 149, 149, 152,
	152, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	151, 151, 151, 151, 151, 153, 153, 153, 153, 153,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 155, 155, 155, 155, 155,
	155, 155, 155, 169, 169, 156, 156, 164, 164, 165,
	165, 165, 162, 162, 163, 163, 166, 166, 166, 158,
	158, 159, 159, 167, 167, 160, 160, 160, 161, 161,
	161, 168, 168, 168, 168, 168, 157, 157, 171, 171,
	188, 188, 187, 187, 187, 177, 177, 184, 184, 184,
	184, 184, 174, 174, 174, 175, 175, 173, 173, 176,
	176, 186, 186, 185, 172, 172, 189, 189, 189, 189,
	201, 202, 200, 200, 200, 200, 200, 181, 181, 181,
	182, 182, 182, 183, 183, 183, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 192, 190, 190,
	191, 191, 16, 22, 22, 17, 17, 17, 17, 17,
	18, 18, 23, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	119, 119, 121, 121, 117, 117, 120, 120, 118, 118,
	118, 122, 122, 122, 123, 123, 147, 147, 147, 25,
	25, 27, 27, 28, 29, 34, 34, 34, 34, 34,
	34, 36, 36, 36, 7, 7, 7, 7, 35, 35,
	35, 6, 6, 26, 26, 26, 26, 19, 208, 30,
	31, 31, 32, 32, 32, 38, 38, 38, 37, 37,
	37, 43, 43, 45, 45, 45, 45, 45, 46, 46,
	46, 46, 46, 46, 42, 42, 44, 44, 44, 44,
	135, 135, 135, 134, 134, 48, 48, 49, 49, 50,
	50, 51, 51, 51, 51, 65, 65, 102, 102, 104,
	104, 52, 52, 52, 52, 53, 53, 54, 54, 55,
	55, 142, 142, 141, 141, 141, 140, 140, 58, 58,
	58, 60, 59, 59, 59, 59, 61, 61, 63, 63,
	62, 62, 64, 66, 66, 66, 66, 66, 67, 67,
	47, 47, 47, 47, 47, 47, 47, 116, 116, 69,
	69, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 80, 80, 80, 80, 80, 80, 70, 70, 70,
	70, 70, 70, 70, 41, 41, 81, 81, 81, 87,
	82, 82, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 77, 77, 77, 77,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 209,
	209, 79, 78, 78, 78, 78, 78, 78, 78, 39,
	39, 39, 39, 39, 145, 145, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 91,
	91, 40, 40, 89, 89, 90, 92, 92, 88, 88,
	88, 72, 72, 72, 72, 72, 72, 72, 72, 74,
	74, 74, 93, 93, 94, 94, 95, 95, 96, 96,
	97, 98, 98, 98, 99, 99, 99, 99, 100, 100,
	100, 71, 71, 71, 71, 101, 101, 101, 101, 105,
	105, 83, 83, 85, 85, 84, 86, 106, 106, 109,
	107, 107, 107, 110, 110, 110, 110, 108, 108, 108,
	137, 137, 137, 114, 114, 124, 124, 125, 125, 115,
	115, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 127, 127, 127, 128, 128, 129, 129, 129, 136,
	136, 132, 132, 133, 133, 138, 138, 139, 139, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 205,
	206, 143, 144, 144, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	2, 1, 6, 6, 7, 4, 5, 8, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 6, 1,
	1, 1, 3, 1, 3, 0, 4, 3, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 3, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 7,
	7, 4, 5, 4, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 3, 4, 4, 4, 4,
	4, 4, 3, 2, 7, 2, 3, 4, 3, 7,
	5, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	8, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 5, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 2, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -203, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -6, -26, -19, -20, -2, -205, 6, 7, -33,
	9, 10, 30, -21, 122, 123, 125, 124, 158, 126,
	151, 53, 172, 173, 175, 176, -36, 156, 157, 31,
	32, 128, 34, -4, 57, 8, 258, 153, 152, 25,
	-204, 360, -32, 5, -3, -30, -208, -30, -30, -30,
	-30, -30, -178, -180, 57, 95, -129, 132, 77, 250,
	129, 130, 136, -132, -196, -131, 60, 61, 62, 268,
	144, 300, 301, 172, 183, 177, 204, 196, 269, 302,
	145, 194, 197, 237, 142, 303, 224, 231, 71, 175,
	246, 304, 154, 192, 188, 305, 277, 186, 27, 306,
	233, 209, 307, 273, 235, 187, 232, 128, 308, 147,
	140, 309, 210, 214, 310, 238, 311, 312, 313, 181,
	182, 314, 143, 240, 208, 141, 33, 270, 37, 162,
	241, 212, 315, 207, 203, 316, 317, 318, 319, 206,
	180, 202, 41, 216, 215, 217, 236, 199, 320, 321,
	322, 148, 323, 189, 18, 324, 325, 326, 327, 328,
	244, 157, 329, 160, 330, 331, 332, 333, 334, 335,
	234, 211, 213, 137, 164, 230, 272, 336, 242, 185,
	337, 149, 161, 156, 245, 150, 338, 339, 340, 341,
	342, 343, 344, 176, 345, 346, 347, 348, 171, 239,
	248, 40, 221, 349, 179, 139, 350, 173, 168, 226,
	200, 163, 351, 352, 190, 191, 205, 178, 201, 174,
	165, 158, 353, 247, 222, 274, 198, 195, 169, 354,
	166, 167, 355, 227, 228, 170, 271, 243, 193, 223,
	-115, 132, 250, 129, 228, 134, 130, 130, 131, 132,
	250, 129, 130, -62, -138, -196, -131, 132, 130, 113,
	197, 237, 122, 225, 233, -121, 234, 164, -147, 130,
	-117, 224, 227, 228, 170, -196, 235, 239, 238, 229,
	-138, 174, -62, -34, 356, 126, -143, -143, 226, 226,
	-143, -82, -47, -68, 79, -73, 29, 23, -72, -69,
	-88, -86, -87, 113, 114, 116, 115, 117, 102, 103,
	110, 80, 118, -77, -75, -76, -78, 64, 63, 72,
	65, 66, 67, 68, 73, 74, 75, -132, -138, -84,
	-205, 47, 48, 259, 260, 261, 262, 267, 263, 82,
	36, 249, 257, 256, 255, 253, 254, 251, 252, 265,
	266, 135, 250, 129, 108, 258, -196, -131, -95, 15,
	-5, -4, -205, 6, 20, 21, -206, 59, -38, -45,
	42, 43, -46, 21, 35, 46, 44, -31, -44, 104,
	-47, -138, -115, -115, 11, -56, -57, -62, -64, -138,
	-107, -146, 174, -110, 239, 238, -133, -108, -132, -130,
	237, 197, 236, 127, 275, 78, 22, 24, 219, 81,
	113, 16, 82, 112, 259, 122, 51, 276, 251, 252,
	249, 261, 262, 250, 225, 29, 10, 278, 25, 152,
	21, 35, 106, 124, 85, 86, 155, 23, 153, 75,
	281, 19, 54, 11, 13, 282, 283, 14, 135, 134,
	97, 131, 49, 8, 118, 26, 94, 45, 284, 28,
	285, 286, 287, 288, 47, 95, 17, 253, 254, 31,
	289, 267, 159, 108, 52, 38, 79, 290, 291, 73,
	292, 76, 55, 77, 15, 50, 293, 294, 295, 296,
	96, 125, 258, 48, 297, 129, 6, 264, 30, 151,
	46, 298, 130, 84, 265, 266, 133, 74, 5, 136,
	32, 9, 53, 56, 255, 256, 257, 36, 83, 12,
	299, -179, 95, -170, -196, -62, 131, -62, 258, -125,
	135, -125, -125, 130, -62, -196, -196, 122, 124, 127,
	55, -22, -62, -124, 135, -196, -124, -124, -124, -62,
	119, -62, -196, 30, -122, 95, 12, 250, -196, 164,
	130, 165, 132, -144, -205, -133, -174, 131, 33, 143,
	-144, 168, 169, -144, -120, -119, 231, 232, 226, 230,
	12, 169, 226, 167, -144, -35, -132, 64, -7, -3,
	-10, -9, -11, 87, -143, -143, 58, 78, 77, 94,
	-47, -70, 97, 79, 95, 96, 81, 99, 98, 109,
	102, 103, 104, 105, 106, 107, 108, 100, 101, 112,
	87, 88, 89, 90, 91, 92, 93, -116, -205, -87,
	-205, 120, 121, -73, -73, -73, -73, -73, -73, -73,
	-73, -73, -73, -205, 119, -2, -82, -205, -205, -205,
	-205, -205, -205, -205, -205, -91, -47, -205, -209, -79,
	-205, -209, -79, -209, -79, -209, -205, -209, -79, -209,
	-79, -209, -209, -79, -205, -205, -205, -205, -205, -205,
	-205, -99, 17, 16, -95, -3, -30, -95, 38, -42,
	-44, -46, 42, 43, 70, 11, -135, -134, 22, -132,
	64, 119, -63, 26, -62, -49, -50, -51, -52, -65,
	-87, -205, -62, -62, -56, -207, 58, 11, 56, -207,
	58, 119, 58, 174, -110, -112, -111, 240, 242, 87,
	-137, -132, 64, 29, 30, 59, 58, -62, -149, -152,
	-154, -153, -155, -150, -151, 194, 195, 113, 198, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 30,
	154, 190, 191, 192, 193, 210, 211, 212, 213, 214,
	215, 216, 217, 177, 196, 269, 178, 179, 180, 181,
	182, 183, 185, 186, 187, 188, 189, -196, -144, 132,
	-196, 79, -196, -62, -62, -144, -144, -144, 166, 166,
	130, 130, 171, -62, 58, 133, -56, 23, 55, -62,
	-196, -196, -139, -138, -130, -144, -122, 64, -47, -144,
	-144, -144, -62, -144, -144, -175, 11, 97, -144, -144,
	11, -118, 11, 97, -47, -123, 95, 55, 208, 357,
	358, 359, -47, -47, -47, -80, 73, 79, 74, 75,
	-73, -81, -84, -87, 69, 97, 95, 96, 81, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -73, -73, -73, -145, -196, 64, -196, -72, -72,
	-132, -43, 21, 35, -42, -133, -139, -130, -206, -206,
	-42, -42, -47, -47, -88, 64, -42, -88, 64, -42,
	-42, -37, 21, 35, -89, -90, 83, -88, -132, -138,
	-206, -73, -132, -132, -42, -43, -43, -42, -42, -100,
	19, 31, -47, -96, -97, -47, -99, -206, -99, -74,
	-132, 65, 68, -48, 58, 11, -46, -62, -134, 104,
	-139, -103, 160, -62, 30, 58, -58, -60, -59, -61,
	45, 49, 51, 46, 47, 48, 52, -142, 22, -49,
	-141, 160, -140, 22, -138, 64, -103, 56, -49, -62,
	-49, -64, -138, 104, -110, -112, 58, 241, 243, 244,
	55, 76, -47, -161, 112, -181, -182, -183, -133, 64,
	65, -170, -171, -172, -184, 146, -189, 137, 139, 136,
	-173, 147, 131, 28, 59, -166, 73, 79, -162, 222,
	-156, 57, -156, -156, -156, -156, -160, 197, -160, -160,
	-160, 57, 57, -156, -156, -156, -164, 57, -164, -164,
	-165, 57, -165, -136, 56, -62, -144, 23, -144, -126,
	127, 124, 125, -192, 123, 219, 197, 71, 29, 15,
	259, 160, 274, -196, 161, -62, -62, -62, -62, -62,
	127, 124, -62, -62, -62, -144, -62, -62, -122, -138,
	-138, 64, -62, 73, 74, 75, -81, -73, -73, -73,
	-41, 155, 78, -206, -206, -42, -42, -205, 119, -206,
	-206, 58, 56, 22, 11, 11, -206, 11, 11, -206,
	-206, -42, -92, -90, 85, -47, -206, 119, -206, 58,
	58, -206, -206, -206, -206, -206, 9, 97, 58, 18,
	58, -98, 24, 25, -100, -100, -114, 19, 11, 36,
	36, -67, 12, -44, -49, -46, 119, -71, 30, 36,
	-3, -205, -205, -106, -109, -88, -50, -51, -51, -50,
	-51, 45, 45, 45, 50, 45, 50, 45, -59, -138,
	-206, -66, 53, 134, 54, -205, -140, -67, -49, -67,
	-67, 119, -111, -113, 245, 242, 248, -196, 64, 58,
	-183, 87, 57, -196, 28, -173, -173, -176, -196, -176,
	28, -158, 29, 73, -163, 223, 65, -160, -160, -161,
	30, -161, -161, -161, -169, 64, -169, 65, 65, 55,
	-132, -144, -143, -199, 142, 138, 146, 147, 140, 60,
	61, 62, 131, 28, 137, 139, 160, 136, -199, -127,
	-128, 133, 22, 131, 28, 160, -198, 56, 166, 219,
	166, 133, -144, -118, -118, -41, 78, -73, -73, -206,
	-206, -43, -133, -148, 113, 194, 154, 192, 188, 208,
	199, 221, 190, 222, -145, -148, -73, -73, -73, -73,
	268, -95, 86, -47, 84, -133, -73, -73, 40, -47,
	-47, -97, -62, -93, 13, -47, 104, -105, 55, -106,
	-83, -85, -84, -205, -101, -132, -104, -132, -67, 58,
	87, -54, -53, 55, 56, -55, 55, -53, 45, 45,
	131, 131, 131, -104, -95, -67, 242, 246, 247, -182,
	-183, -186, -185, -132, -189, -176, -176, 57, -159, 55,
	-73, 59, -161, -161, -196, 113, 59, 58, 59, 58,
	59, 58, -62, -143, -143, -62, -143, -132, -195, 271,
	-197, -196, -132, -132, -132, -62, -122, -122, -73, -206,
	-206, -156, -156, -156, -165, -156, 182, -156, 182, -206,
	-206, 19, 19, 19, 19, -205, -40, 264, -47, 58,
	58, 41, -94, 14, 16, 27, -105, 58, -206, -206,
	58, 119, -206, 58, -95, -109, -47, -47, 57, -47,
	-205, -205, -205, -206, -99, 59, 58, -156, -102, -132,
	-167, 219, 9, -160, 64, -160, 65, 65, -144, 26,
	-194, -193, -133, 57, 56, -160, -196, -73, -73, -73,
	-73, -73, -99, 64, -73, -73, -47, -82, 28, -85,
	36, -3, -132, -132, -132, -99, -102, -102, -206, -102,
	-102, -141, -188, -187, 56, 141, 71, -185, 59, 58,
	-168, 137, 28, 136, -76, -161, -161, 59, 59, -205,
	58, 87, -102, -62, -206, -206, -206, -206, -39, 97,
	271, -206, -206, -206, 9, -83, 119, 59, -206, -206,
	-206, -66, -187, -196, -177, 87, 64, 149, -132, -157,
	71, 28, 28, -190, -191, 160, -193, -183, 59, -206,
	269, 52, 272, -106, -132, 65, -62, 64, -206, 58,
	-132, -198, 41, 270, 273, 57, -191, 36, -195, 41,
	-102, 162, 271, 59, 163, 272, -201, -202, 55, -205,
	273, -202, 55, 10, 9, -73, 159, -200, 150, 145,
	148, 30, -200, -206, -206, 144, 29, 73,
}
var yyDef = [...]int{

	26, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 31, 0, 348, 348, 348,
	348, 348, 348, 0, 676, 659, 0, 0, 0, 0,
	-2, 320, 321, 0, 323, 324, 325, 981, 981, 0,
	0, 981, 0, 606, 979, 42, 43, 331, 332, 333,
	1, 3, 0, 352, 0, -2, 350, 0, 659, 659,
	0, 0, 71, 72, 0, 0, 0, 968, 0, 657,
	657, 657, 677, 678, 681, 682, 27, 28, 29, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	0, 0, 0, 0, 0, 660, 0, 655, 0, 655,
	655, 655, 0, 271, 430, 685, 686, 968, 0, 0,
	0, 311, 0, 982, 283, 0, 285, 982, 0, 982,
	0, 292, 0, 0, 298, 982, 303, 317, 318, 305,
	319, 322, 338, 0, 0, 330, 343, 344, 981, 981,
	347, 30, 480, 440, 0, 445, 447, 0, 482, 483,
	484, 485, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 512, 513, 514, 515, 591, 592, 593,
	594, 595, 596, 597, 598, 449, 450, 588, 0, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	0, 549, 549, 549, 549, 549, 549, 549, 549, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 614, 0,
	606, 38, 0, 348, 353, 354, 606, 980, 0, 0,
	-2, -2, 364, 370, 371, 372, 373, 349, 0, 376,
	380, 0, 0, 0, 0, 0, 0, 51, 53, 430,
	57, 0, 957, 640, -2, -2, 0, 0, 683, 684,
	-2, 820, -2, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 0, 0, 90, 0, 88, 0, 982, 0, 0,
	0, 0, 0, 0, 982, 982, 982, 0, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 272, 982, 311, 275, 0, 0, 982, 982, 982,
	0, 982, 982, 282, 983, 984, 0, 192, 193, 194,
	286, 982, 982, 288, 0, 308, 306, 307, 300, 301,
	0, 314, 295, 296, 299, 341, 339, 340, 342, 334,
	335, 336, 337, 0, 345, 346, 0, 0, 0, 0,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	467, 468, 469, 470, 471, 472, 473, 446, 0, 460,
	0, 0, 0, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 580, 0, 533, 541,
	0, 534, 542, 535, 543, 536, 0, 537, 544, 538,
	545, 539, 540, 546, 0, 0, 0, 361, 361, 0,
	0, 618, 0, 0, 614, 0, 363, 614, 0, 385,
	374, 365, 368, 369, 351, 0, 377, 381, 0, 383,
	384, 0, 55, 0, 429, 0, 387, 389, 390, 391,
	-2, 0, 413, -2, 0, 0, 0, 49, 50, 0,
	0, 0, 0, 957, 641, 59, 60, 0, 0, 0,
	168, 650, 651, 652, 648, 217, 0, 0, 156, 152,
	96, 97, 98, 145, 100, 145, 145, 145, 145, 165,
	165, 165, 165, 128, 129, 130, 131, 132, 0, 0,
	115, 145, 145, 145, 119, 135, 136, 137, 138, 139,
	140, 141, 142, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 147, 147, 147, 149, 149, 679, 74, 0,
	982, 0, 982, 86, 0, 231, 233, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 656, 0, 982,
	268, 269, 431, 687, 688, 273, 274, 312, 313, 276,
	277, 278, 279, 280, 281, 0, 195, 196, 287, 291,
	0, 311, 0, 0, 293, 294, 0, 0, 326, 327,
	328, 329, 481, 441, 442, 444, 461, 0, 463, 465,
	451, 452, 476, 477, 478, 0, 0, 0, 0, 474,
	456, 0, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 501, 564, 565, 0, 499, 500,
	511, 0, 0, 0, 362, 589, 0, -2, 479, 635,
	0, 0, 0, 0, 484, 591, 0, 484, 591, 0,
	0, 0, 359, 360, 586, 583, 0, 0, 588, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	0, 0, 615, 607, 608, 611, 618, 39, 618, 0,
	599, 0, 0, 438, 0, 0, 366, 36, 382, 378,
	0, 0, 0, 428, 0, 0, 0, 0, 0, 0,
	418, 0, 0, 421, 0, 0, 0, 0, 412, 0,
	433, 901, 414, 0, 416, 417, 438, 0, 438, 52,
	438, 54, 0, 432, 642, 58, 0, 0, 63, 64,
	643, 644, 645, 646, 0, 87, 218, 220, 223, 224,
	225, 91, 92, 93, 0, 0, 205, 0, 0, 199,
	199, 0, 197, 198, 89, 159, 157, 0, 154, 153,
	99, 0, 165, 165, 122, 123, 168, 0, 168, 168,
	168, 0, 0, 116, 117, 118, 110, 0, 111, 112,
	113, 0, 114, 0, 0, 982, 76, 658, 77, 981,
	0, 0, 671, 232, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 0, 78, 236, 238, 237, 241,
	0, 0, 0, 263, 982, 267, 308, 308, 290, 309,
	310, 315, 297, 462, 464, 466, 453, 474, 457, 0,
	454, 0, 0, 448, 516, 0, 0, 361, 0, 520,
	521, 0, 0, 0, 0, 0, 557, 0, 0, 558,
	0, 606, 0, 584, 0, 0, 532, 0, 551, 0,
	0, 552, 553, 554, 555, 556, 619, 0, 0, 0,
	0, 610, 612, 613, 33, 32, 0, 653, 654, 600,
	601, 602, 0, 375, 386, 367, 0, 629, 0, 0,
	622, 0, 0, 438, 637, 0, 388, 407, 409, 0,
	404, 419, 420, 422, 0, 424, 0, 426, 427, 392,
	394, 395, 0, 0, 0, 0, 415, 606, 438, 47,
	48, 0, 61, 62, 0, 0, 68, 169, 170, 0,
	221, 0, 0, 0, 187, 199, 199, 190, 200, 191,
	0, 161, 0, 158, 95, 155, 0, 168, 168, 124,
	0, 125, 126, 127, 0, 143, 0, 0, 0, 0,
	680, 75, 226, 981, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 981, 0,
	981, 672, 673, 674, 675, 0, 81, 0, 0, 0,
	0, 0, 266, 311, 311, 455, 0, 475, 458, 517,
	518, 0, 590, 0, 145, 145, 569, 145, 149, 572,
	145, 574, 145, 577, 0, 0, 0, 0, 0, 0,
	0, 581, 531, 587, 0, 589, 0, 0, 0, 616,
	617, 609, 34, 604, 0, 439, 379, 40, 0, 629,
	621, 631, 633, 0, 0, 625, 0, 399, 606, 0,
	0, 401, 408, 0, 0, 402, 0, 403, 423, 425,
	0, 0, 0, 0, 614, 46, 65, 66, 67, 219,
	222, 0, 201, 145, 204, 188, 189, 0, 163, 0,
	160, 146, 120, 121, 166, 167, 165, 0, 165, 0,
	150, 0, 982, 227, 228, 229, 230, 0, 235, 0,
	79, 80, 0, 0, 240, 264, 284, 289, 459, 519,
	522, 566, 165, 570, 571, 573, 575, 576, 578, 524,
	523, 0, 0, 0, 0, 0, 614, 0, 585, 0,
	0, 620, 37, 0, 0, 0, 41, 0, 634, 0,
	0, 0, 56, 0, 614, 638, 639, 405, 0, 410,
	0, 0, 0, 413, 45, 179, 0, 203, 0, 397,
	171, 164, 0, 168, 144, 168, 0, 0, 73, 0,
	82, 83, 0, 0, 0, 567, 568, 0, 0, 0,
	0, 559, 0, 582, 0, 0, 605, 603, 0, 632,
	0, 624, 627, 626, 400, 44, 0, 0, 435, 0,
	0, 433, 178, 180, 0, 185, 0, 202, 0, 0,
	176, 0, 173, 175, 162, 133, 134, 148, 151, 0,
	0, 0, 0, 242, 525, 527, 526, 528, 0, 0,
	0, 530, 547, 548, 0, 623, 0, 406, 434, 436,
	437, 396, 181, 182, 0, 186, 184, 0, 398, 94,
	0, 172, 174, 0, 258, 0, 84, 85, 78, 529,
	0, 0, 0, 630, 628, 183, 0, 177, 257, 0,
	0, 81, 560, 0, 563, 0, 259, 0, 239, 561,
	0, 0, 0, 206, 0, 0, 207, 208, 0, 0,
	562, 209, 0, 0, 0, 0, 0, 210, 212, 213,
	0, 0, 211, 260, 261, 214, 215, 216,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	57, 59, 104, 102, 58, 103, 119, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 360,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:401
		{
			// TODO(sougou): may potentially need a new AST node for this.
			yyVAL.selStmt = nil
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:433
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:451
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:461
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:468
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:480
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:496
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:526
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:530
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:534
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:549
		{
			yyVAL.partitions = nil
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:553
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:579
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:585
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:589
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:593
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.str = RepeatableRead
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:603
		{
			yyVAL.str = ReadCommitted
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			yyVAL.str = ReadUncommitted
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.str = Serializable
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = SessionStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = GlobalStr
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:632
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:638
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:647
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:660
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:675
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:691
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:703
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:710
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:721
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:732
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:746
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:973
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.sqlVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:991
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1009
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.optVal = nil
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.colKeyOpt = colKey
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1123
		{
			yyVAL.sqlVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1157
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1234
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1248
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1254
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1271
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 207:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1275
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1279
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 209:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1283
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1289
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1295
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1305
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1330
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.str = yyDollar[1].str
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1346
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1352
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1378
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1383
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1490
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1506
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1510
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1522
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1526
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1542
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1547
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1628
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1649
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1654
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1676
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = "extended "
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = "full "
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1753
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1767
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1781
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = SessionStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = GlobalStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1805
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1809
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &Begin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &Commit{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Rollback{}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = JSONStr
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = TreeStr
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = VitessStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = TraditionalStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = AnalyzeStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &OtherRead{}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1929
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1939
		{
			setAllowComments(yylex, true)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1949
		{
			yyVAL.bytes2 = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1953
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.str = UnionStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = UnionAllStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = UnionDistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = SQLCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = DistinctStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1998
		{
			yyVAL.selectExprs = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2002
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2007
		{
			yyVAL.strs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2019
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2023
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = SQLCacheStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = DistinctStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = DistinctStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = StraightJoinHint
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2073
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2077
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2102
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2116
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2140
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2146
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2150
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2183
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2191
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2203
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2207
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2213
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2218
		{
			yyVAL.empty = struct{}{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2223
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2227
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = JoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = JoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = StraightJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = LeftJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = LeftJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = RightJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2276
		{
			yyVAL.str = RightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = NaturalJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2321
		{
			yyVAL.indexHints = nil
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2325
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2329
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2333
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2337
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2382
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2396
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.str = IsNullStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2448
		{
			yyVAL.str = IsNotNullStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.str = IsTrueStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.str = IsNotTrueStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.str = IsFalseStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2464
		{
			yyVAL.str = IsNotFalseStr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = EqualStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = LessThanStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = GreaterThanStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = LessEqualStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = GreaterEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = NotEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2523
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2647
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2669
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2745
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2887
		{
			yyVAL.str = ""
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.str = BooleanModeStr
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2895
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 562:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = QueryExpansionStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = nil
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2983
		{
			yyVAL.str = string("")
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3003
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3026
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = &NullVal{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3084
		{
			yyVAL.exprs = nil
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3102
		{
			yyVAL.orderBy = nil
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3106
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3116
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.str = AscScr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.str = AscScr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.str = DescScr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3140
		{
			yyVAL.limit = nil
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3148
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3152
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3157
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3161
		{
			yyVAL.str = ForUpdateStr
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = ShareModeStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3186
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3190
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3200
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3204
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3208
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3213
		{
			yyVAL.updateExprs = nil
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3217
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3290
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3294
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3298
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3302
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3309
		{
			yyVAL.bytes = []byte("charset")
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			yyVAL.expr = &Default{}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3333
		{
			yyVAL.byt = 0
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3335
		{
			yyVAL.byt = 1
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3338
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.str = IgnoreStr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3353
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3365
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3370
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3383
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3390
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3392
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3749
		{
			decNesting(yylex)
		}
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3754
		{
			skipToEnd(yylex)
		}
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3759
		{
			skipToEnd(yylex)
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3763
		{
			skipToEnd(yylex)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3767
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl DDLStatement) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const STATUS = 57517
const VARIABLES = 57518
const WARNINGS = 57519
const SEQUENCE = 57520
const BEGIN = 57521
const START = 57522
const TRANSACTION = 57523
const COMMIT = 57524
const ROLLBACK = 57525
const SAVEPOINT = 57526
const RELEASE = 57527
const WORK = 57528
const BIT = 57529
const TINYINT = 57530
const SMALLINT = 57531
const MEDIUMINT = 57532
const INT = 57533
const INTEGER = 57534
const BIGINT = 57535
const INTNUM = 57536
const REAL = 57537
const DOUBLE = 57538
const FLOAT_TYPE = 57539
const DECIMAL = 57540
const NUMERIC = 57541
const TIME = 57542
const TIMESTAMP = 57543
const DATETIME = 57544
const YEAR = 57545
const CHAR = 57546
const VARCHAR = 57547
const BOOL = 57548
const CHARACTER = 57549
const VARBINARY = 57550
const NCHAR = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const BLOB = 57556
const TINYBLOB = 57557
const MEDIUMBLOB = 57558
const LONGBLOB = 57559
const JSON = 57560
const ENUM = 57561
const GEOMETRY = 57562
const POINT = 57563
const LINESTRING = 57564
const POLYGON = 57565
const GEOMETRYCOLLECTION = 57566
const MULTIPOINT = 57567
const MULTILINESTRING = 57568
const MULTIPOLYGON = 57569
const NULLX = 57570
const AUTO_INCREMENT = 57571
const APPROXNUM = 57572
const SIGNED = 57573
const UNSIGNED = 57574
const ZEROFILL = 57575
const COLLATION = 57576
const DATABASES = 57577
const TABLES = 57578
const VITESS_METADATA = 57579
const VSCHEMA = 57580
const FULL = 57581
const PROCESSLIST = 57582
const COLUMNS = 57583
const FIELDS = 57584
const ENGINES = 57585
const PLUGINS = 57586
const EXTENDED = 57587
const KEYSPACES = 57588
const VITESS_KEYSPACES = 57589
const VITESS_SHARDS = 57590
const VITESS_TABLETS = 57591
const NAMES = 57592
const CHARSET = 57593
const GLOBAL = 57594
const SESSION = 57595
const ISOLATION = 57596
const LEVEL = 57597
const READ = 57598
const WRITE = 57599
const ONLY = 57600
const REPEATABLE = 57601
const COMMITTED = 57602
const UNCOMMITTED = 57603
const SERIALIZABLE = 57604
const CURRENT_TIMESTAMP = 57605
const DATABASE = 57606
const CURRENT_DATE = 57607
const CURRENT_TIME = 57608
const LOCALTIME = 57609
const LOCALTIMESTAMP = 57610
const UTC_DATE = 57611
const UTC_TIME = 57612
const UTC_TIMESTAMP = 57613
const REPLACE = 57614
const CONVERT = 57615
const CAST = 57616
const SUBSTR = 57617
const SUBSTRING = 57618
const GROUP_CONCAT = 57619
const SEPARATOR = 57620
const TIMESTAMPADD = 57621
const TIMESTAMPDIFF = 57622
const MATCH = 57623
const AGAINST = 57624
const BOOLEAN = 57625
const LANGUAGE = 57626
const WITH = 57627
const QUERY = 57628
const EXPANSION = 57629
const UNUSED = 57630
const ARRAY = 57631
const CUME_DIST = 57632
const DESCRIPTION = 57633
const DENSE_RANK = 57634
const EMPTY = 57635
const EXCEPT = 57636
const FIRST_VALUE = 57637
const GROUPING = 57638
const GROUPS = 57639
const JSON_TABLE = 57640
const LAG = 57641
const LAST_VALUE = 57642
const LATERAL = 57643
const LEAD = 57644
const MEMBER = 57645
const NTH_VALUE = 57646
const NTILE = 57647
const OF = 57648
const OVER = 57649
const PERCENT_RANK = 57650
const RANK = 57651
const RECURSIVE = 57652
const ROW_NUMBER = 57653
const SYSTEM = 57654
const WINDOW = 57655
const ACTIVE = 57656
const ADMIN = 57657
const BUCKETS = 57658
const CLONE = 57659
const COMPONENT = 57660
const DEFINITION = 57661
const ENFORCED = 57662
const EXCLUDE = 57663
const FOLLOWING = 57664
const GEOMCOLLECTION = 57665
const GET_MASTER_PUBLIC_KEY = 57666
const HISTOGRAM = 57667
const HISTORY = 57668
const INACTIVE = 57669
const INVISIBLE = 57670
const LOCKED = 57671
const MASTER_COMPRESSION_ALGORITHMS = 57672
const MASTER_PUBLIC_KEY_PATH = 57673
const MASTER_TLS_CIPHERSUITES = 57674
const MASTER_ZSTD_COMPRESSION_LEVEL = 57675
const NESTED = 57676
const NETWORK_NAMESPACE = 57677
const NOWAIT = 57678
const NULLS = 57679
const OJ = 57680
const OLD = 57681
const OPTIONAL = 57682
const ORDINALITY = 57683
const ORGANIZATION = 57684
const OTHERS = 57685
const PATH = 57686
const PERSIST = 57687
const PERSIST_ONLY = 57688
const PRECEDING = 57689
const PRIVILEGE_CHECKS_USER = 57690
const PROCESS = 57691
const RANDOM = 57692
const REFERENCE = 57693
const REQUIRE_ROW_FORMAT = 57694
const RESOURCE = 57695
const RESPECT = 57696
const RESTART = 57697
const RETAIN = 57698
const REUSE = 57699
const ROLE = 57700
const SECONDARY = 57701
const SECONDARY_ENGINE = 57702
const SECONDARY_LOAD = 57703
const SECONDARY_UNLOAD = 57704
const SKIP = 57705
const SRID = 57706
const THREAD_PRIORITY = 57707
const TIES = 57708
const UNBOUNDED = 57709
const VCPU = 57710
const VISIBLE = 57711
const FORMAT = 57712
const TREE = 57713
const VITESS = 57714
const TRADITIONAL = 57715

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	34, 326,
	155, 326,
	167, 326,
	192, 340,
	193, 340,
	-2, 328,
	-1, 51,
	157, 350,
	-2, 348,
	-1, 75,
	55, 386,
	-2, 394,
	-1, 425,
	143, 763,
	-2, 759,
	-1, 426,
	143, 764,
	-2, 760,
	-1, 441,
	55, 387,
	-2, 399,
	-1, 442,
	55, 388,
	-2, 400,
	-1, 462,
	111, 1037,
	-2, 76,
	-1, 463,
	111, 942,
	-2, 77,
	-1, 468,
	111, 902,
	-2, 722,
	-1, 470,
	111, 979,
	-2, 724,
	-1, 988,
	143, 766,
	-2, 762,
	-1, 1075,
	73, 58,
	81, 58,
	-2, 62,
	-1, 1458,
	5, 638,
	18, 638,
	20, 638,
	32, 638,
	82, 638,
	-2, 425,
	-1, 1658,
	45, 693,
	-2, 691,
}

const yyPrivate = 57344

const yyLast = 20197

var yyAct = [...]int{

	425, 1748, 1738, 1507, 1658, 1380, 1675, 1706, 1097, 1606,
	1269, 1589, 1289, 1147, 731, 1437, 651, 771, 1270, 369,
	1434, 355, 1343, 1438, 1141, 1569, 384, 778, 1342, 1106,
	1348, 1096, 398, 1069, 1319, 975, 600, 1444, 1093, 1256,
	1450, 96, 597, 1066, 1399, 315, 467, 338, 315, 928,
	74, 3, 909, 96, 982, 315, 1205, 72, 1357, 1149,
	1335, 1110, 594, 816, 1048, 809, 1071, 1055, 804, 443,
	798, 428, 1008, 781, 952, 360, 632, 776, 356, 799,
	1126, 359, 29, 96, 371, 593, 96, 315, 96, 315,
	1031, 815, 601, 788, 1137, 923, 367, 75, 70, 464,
	938, 813, 641, 434, 744, 69, 881, 1077, 806, 1655,
	8, 7, 745, 313, 6, 1494, 1579, 1608, 1741, 621,
	1703, 303, 1736, 351, 301, 1683, 1150, 1729, 1508, 1702,
	77, 78, 79, 80, 81, 82, 1416, 1682, 1537, 604,
	1468, 31, 32, 33, 63, 35, 36, 1152, 1469, 1470,
	1087, 449, 453, 429, 817, 599, 818, 603, 1173, 31,
	664, 67, 63, 35, 36, 358, 37, 57, 58, 357,
	60, 1327, 1172, 98, 99, 100, 61, 311, 307, 308,
	309, 1088, 1089, 1120, 461, 1572, 1649, 693, 692, 702,
	703, 695, 696, 697, 698, 699, 700, 701, 694, 657,
	658, 704, 1685, 1382, 410, 47, 416, 417, 414, 415,
	413, 412, 411, 1127, 1528, 62, 985, 1526, 1151, 348,
	418, 419, 663, 304, 937, 98, 99, 100, 1306, 350,
	346, 1305, 897, 62, 1307, 659, 1171, 652, 653, 660,
	657, 658, 662, 654, 638, 1384, 640, 894, 1735, 302,
	896, 1676, 1728, 939, 940, 941, 98, 99, 100, 1383,
	1379, 1049, 1668, 1752, 1145, 647, 622, 1145, 1756, 1475,
	305, 596, 1145, 898, 606, 1290, 1292, 455, 637, 639,
	1400, 40, 41, 43, 42, 45, 895, 59, 1632, 1168,
	1165, 1166, 1114, 1164, 1385, 902, 667, 1114, 617, 610,
	884, 1461, 315, 612, 613, 310, 1460, 315, 318, 623,
	46, 66, 65, 315, 1459, 55, 56, 44, 609, 315,
	630, 1402, 306, 636, 1662, 1185, 1175, 1178, 1184, 1224,
	96, 48, 49, 1553, 50, 51, 52, 53, 1376, 96,
	1467, 1221, 716, 717, 1378, 1261, 98, 99, 100, 1493,
	1234, 96, 96, 1367, 1213, 1153, 1083, 792, 1404, 849,
	1408, 729, 1403, 1291, 1401, 628, 1170, 1650, 1681, 1406,
	611, 635, 614, 694, 615, 620, 704, 616, 1405, 678,
	679, 627, 1686, 1094, 649, 704, 646, 629, 1169, 1302,
	929, 1407, 1409, 924, 98, 99, 100, 1127, 648, 1027,
	681, 1750, 85, 673, 1751, 634, 1749, 1363, 1364, 1365,
	642, 684, 1641, 1349, 665, 1448, 684, 819, 1113, 1633,
	1631, 1032, 1033, 1113, 64, 677, 1418, 643, 644, 624,
	625, 626, 1174, 695, 696, 697, 698, 699, 700, 701,
	694, 86, 64, 704, 1009, 1009, 1231, 1176, 1485, 767,
	655, 714, 96, 886, 1325, 315, 768, 315, 315, 1671,
	96, 716, 717, 676, 674, 837, 96, 675, 1578, 785,
	1377, 1117, 1375, 716, 717, 1577, 464, 959, 1118, 1366,
	1730, 769, 732, 1499, 1371, 1368, 1359, 1369, 1362, 62,
	1358, 957, 958, 956, 1360, 1361, 682, 683, 681, 930,
	797, 955, 925, 947, 949, 950, 850, 1731, 1370, 1339,
	948, 633, 1722, 782, 684, 1338, 747, 749, 751, 753,
	755, 757, 758, 796, 748, 750, 808, 754, 756, 770,
	759, 605, 863, 866, 867, 868, 869, 870, 871, 1723,
	872, 873, 874, 875, 876, 851, 852, 853, 854, 835,
	836, 864, 1156, 838, 1733, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 855, 856, 857, 858, 859,
	860, 861, 862, 1198, 1199, 1200, 1013, 693, 692, 702,
	703, 695, 696, 697, 698, 699, 700, 701, 694, 1732,
	1029, 704, 1724, 315, 1714, 1696, 1757, 877, 1602, 682,
	683, 681, 683, 681, 96, 1575, 885, 1420, 887, 315,
	889, 315, 96, 96, 96, 1541, 1424, 684, 315, 684,
	1220, 1500, 315, 607, 608, 315, 907, 908, 865, 315,
	1426, 96, 1350, 1336, 1206, 922, 96, 96, 96, 315,
	96, 96, 697, 698, 699, 700, 701, 694, 914, 1340,
	704, 437, 1028, 96, 96, 1219, 900, 780, 682, 683,
	681, 827, 1758, 1218, 1425, 618, 451, 682, 683, 681,
	438, 682, 683, 681, 1638, 911, 684, 888, 1637, 890,
	1629, 1734, 682, 683, 681, 684, 899, 1698, 438, 684,
	808, 438, 814, 906, 98, 99, 100, 682, 683, 681,
	684, 1629, 1679, 1629, 438, 976, 932, 919, 913, 98,
	99, 100, 71, 977, 978, 684, 1079, 98, 99, 100,
	953, 1309, 1079, 666, 1629, 1663, 454, 361, 96, 1257,
	903, 693, 692, 702, 703, 695, 696, 697, 698, 699,
	700, 701, 694, 1629, 1628, 704, 986, 880, 1568, 1555,
	438, 931, 1551, 438, 1491, 1490, 31, 997, 1000, 73,
	992, 96, 96, 1010, 31, 934, 1487, 1488, 1487, 1486,
	1040, 438, 954, 1052, 438, 459, 988, 1080, 680, 438,
	96, 1264, 987, 1080, 1352, 1082, 1580, 315, 1115, 438,
	96, 1078, 880, 879, 315, 1447, 315, 1052, 732, 826,
	825, 1435, 1548, 1265, 315, 315, 315, 456, 457, 986,
	1447, 1613, 96, 979, 980, 96, 1257, 1296, 1018, 1019,
	1041, 1051, 426, 680, 1040, 1078, 96, 96, 464, 989,
	62, 464, 1640, 1581, 1582, 1583, 1489, 62, 62, 988,
	1052, 1310, 1098, 1086, 1237, 1046, 1236, 1040, 1078, 1030,
	901, 431, 1042, 811, 1067, 1043, 387, 386, 389, 390,
	391, 392, 1047, 97, 1050, 388, 393, 316, 1715, 1112,
	316, 1052, 1022, 31, 1075, 97, 1591, 316, 1560, 882,
	1142, 96, 1034, 1044, 1447, 315, 96, 1478, 96, 1040,
	878, 1177, 1314, 1138, 1132, 315, 315, 315, 315, 315,
	1131, 1143, 315, 315, 1085, 97, 315, 96, 97, 316,
	97, 316, 1101, 1084, 1076, 1081, 87, 1345, 1344, 1381,
	1144, 1128, 1129, 1130, 315, 62, 1451, 1452, 1592, 1162,
	315, 315, 315, 1584, 1743, 1739, 315, 96, 1480, 1719,
	1121, 1454, 1122, 1123, 1124, 1125, 1435, 62, 1354, 935,
	993, 994, 905, 1157, 999, 1002, 1003, 1457, 1133, 1134,
	1135, 1136, 1345, 1179, 1180, 1181, 1182, 1183, 1139, 1140,
	1186, 1187, 1155, 1154, 1188, 1281, 1279, 1585, 1586, 1017,
	1282, 1280, 1020, 1021, 1283, 1456, 1061, 1062, 883, 953,
	1278, 1277, 1190, 1701, 1427, 1246, 891, 892, 893, 779,
	1194, 1721, 1717, 1552, 1196, 1191, 1255, 1254, 1691, 1195,
	1057, 1060, 1061, 1062, 1058, 912, 1059, 1063, 1688, 1705,
	916, 917, 918, 1707, 920, 921, 1244, 1713, 1712, 1659,
	685, 1201, 1657, 427, 1245, 1351, 1005, 926, 927, 772,
	1243, 954, 315, 1344, 1331, 1546, 824, 631, 1324, 1673,
	1006, 773, 1250, 315, 315, 315, 315, 315, 1672, 1611,
	1322, 1214, 1316, 1587, 1025, 315, 361, 1032, 1033, 315,
	1159, 1271, 429, 315, 904, 742, 1065, 435, 315, 315,
	1230, 1726, 315, 315, 315, 1259, 1253, 1262, 432, 433,
	1725, 1430, 1710, 1692, 1252, 1308, 1215, 96, 1545, 1266,
	436, 73, 774, 777, 1544, 1311, 1315, 1257, 1249, 1225,
	1320, 1320, 1260, 1098, 1258, 661, 1745, 1744, 444, 1288,
	1222, 1297, 793, 1272, 316, 1299, 1275, 786, 1745, 316,
	911, 1284, 445, 1273, 1274, 316, 1276, 1660, 1573, 1294,
	1295, 316, 1026, 431, 71, 1321, 76, 1298, 1300, 68,
	1303, 1347, 97, 1, 337, 783, 784, 447, 96, 446,
	1737, 97, 1509, 96, 1313, 1330, 1588, 1332, 1333, 1334,
	1317, 1318, 444, 97, 97, 702, 703, 695, 696, 697,
	698, 699, 700, 701, 694, 1356, 445, 704, 1167, 96,
	1674, 1341, 1148, 1337, 1104, 1095, 84, 591, 83, 645,
	1210, 1211, 1103, 1328, 1329, 1102, 1630, 1326, 1346, 441,
	442, 447, 1119, 446, 96, 1571, 1479, 1323, 1670, 832,
	976, 1228, 830, 831, 1372, 1057, 1060, 1061, 1062, 1058,
	1396, 1059, 1063, 1398, 829, 1451, 1452, 834, 833, 828,
	1387, 330, 1397, 936, 1388, 347, 1064, 820, 93, 1161,
	787, 1421, 315, 1374, 1373, 1410, 1417, 1163, 1492, 1389,
	1116, 327, 96, 656, 332, 1411, 300, 1395, 96, 96,
	1158, 712, 1160, 1251, 97, 1436, 1304, 316, 1396, 316,
	316, 988, 97, 465, 1271, 458, 1441, 987, 97, 1711,
	1689, 1189, 1687, 1656, 96, 1607, 1690, 315, 1439, 1654,
	1720, 915, 1704, 1024, 775, 1543, 1429, 990, 991, 1446,
	1229, 96, 741, 96, 1007, 96, 1455, 802, 1320, 1320,
	1428, 1472, 370, 946, 385, 382, 383, 1098, 933, 1098,
	1035, 1462, 1484, 1263, 686, 1463, 368, 1465, 362, 1466,
	1464, 801, 1471, 794, 1056, 1474, 1023, 942, 943, 944,
	945, 1473, 1476, 1477, 1054, 315, 1053, 807, 1112, 1453,
	1449, 800, 1039, 440, 1004, 1495, 1433, 1482, 1483, 1648,
	1536, 439, 1496, 54, 315, 1497, 1498, 34, 352, 1502,
	96, 669, 1510, 96, 96, 96, 315, 448, 28, 23,
	22, 21, 20, 19, 1503, 25, 1505, 18, 17, 16,
	39, 619, 995, 996, 38, 27, 26, 15, 14, 13,
	12, 11, 399, 30, 10, 316, 9, 5, 4, 672,
	24, 730, 2, 1501, 0, 0, 97, 0, 0, 1524,
	0, 316, 0, 316, 97, 97, 97, 0, 0, 0,
	316, 0, 1504, 30, 316, 0, 0, 316, 0, 0,
	0, 316, 0, 97, 1514, 0, 0, 1547, 97, 97,
	97, 316, 97, 97, 1515, 1516, 1557, 1271, 0, 0,
	0, 0, 96, 0, 1556, 97, 97, 0, 0, 96,
	1311, 0, 0, 430, 0, 0, 1092, 0, 1098, 0,
	0, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1567, 0, 1542, 1521, 1522, 96,
	1523, 0, 0, 1525, 0, 1527, 0, 0, 0, 0,
	0, 0, 0, 1595, 0, 1590, 692, 702, 703, 695,
	696, 697, 698, 699, 700, 701, 694, 1593, 0, 704,
	0, 0, 1353, 0, 0, 1146, 0, 0, 0, 0,
	97, 0, 96, 0, 96, 1208, 96, 0, 0, 1209,
	1610, 96, 0, 96, 96, 96, 315, 1574, 1616, 1576,
	1216, 1217, 1612, 1386, 0, 0, 1223, 0, 0, 1226,
	1227, 1439, 1627, 97, 97, 1439, 1620, 1233, 1621, 1623,
	1624, 1235, 96, 315, 1238, 1239, 1240, 1241, 1242, 1625,
	1634, 1614, 97, 1594, 0, 0, 0, 0, 0, 316,
	0, 0, 97, 1635, 0, 1636, 316, 1642, 316, 0,
	0, 0, 1605, 0, 0, 0, 316, 316, 316, 1661,
	96, 0, 0, 0, 97, 0, 0, 97, 1667, 0,
	1601, 96, 96, 1286, 1287, 0, 1439, 0, 97, 97,
	1678, 0, 1677, 0, 0, 0, 0, 1590, 1098, 0,
	1619, 1643, 0, 96, 1684, 0, 0, 0, 0, 315,
	1626, 1693, 0, 0, 0, 0, 1232, 96, 0, 0,
	1271, 0, 0, 0, 0, 1700, 0, 0, 0, 0,
	0, 0, 1709, 0, 1708, 1247, 1248, 777, 0, 0,
	0, 0, 0, 97, 1718, 1716, 0, 316, 97, 0,
	97, 0, 0, 0, 0, 0, 96, 316, 316, 316,
	316, 316, 0, 0, 316, 316, 0, 0, 316, 97,
	0, 0, 0, 0, 0, 0, 0, 1695, 0, 0,
	1742, 1727, 650, 0, 0, 0, 316, 1753, 1540, 0,
	0, 650, 316, 316, 316, 0, 0, 0, 316, 97,
	0, 0, 0, 0, 0, 30, 693, 692, 702, 703,
	695, 696, 697, 698, 699, 700, 701, 694, 713, 715,
	704, 0, 0, 0, 0, 0, 0, 1393, 1394, 693,
	692, 702, 703, 695, 696, 697, 698, 699, 700, 701,
	694, 0, 0, 704, 0, 0, 396, 0, 0, 728,
	364, 0, 0, 733, 734, 735, 736, 737, 738, 739,
	740, 0, 743, 746, 746, 746, 752, 746, 746, 752,
	746, 760, 761, 762, 763, 764, 765, 766, 0, 0,
	0, 0, 0, 30, 1442, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 316, 1458, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 316, 316, 316, 316, 316,
	0, 0, 0, 0, 0, 0, 0, 316, 1534, 466,
	0, 316, 595, 0, 602, 316, 0, 0, 1419, 0,
	316, 316, 0, 0, 316, 316, 316, 0, 0, 0,
	0, 1539, 0, 0, 0, 0, 0, 0, 688, 97,
	691, 0, 0, 0, 1431, 0, 705, 706, 707, 708,
	709, 710, 711, 0, 689, 690, 687, 693, 692, 702,
	703, 695, 696, 697, 698, 699, 700, 701, 694, 0,
	0, 704, 693, 692, 702, 703, 695, 696, 697, 698,
	699, 700, 701, 694, 0, 0, 704, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 1520, 0, 0, 0,
	97, 0, 0, 0, 0, 97, 0, 1529, 1530, 0,
	693, 692, 702, 703, 695, 696, 697, 698, 699, 700,
	701, 694, 0, 0, 704, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 650, 1549, 1550, 0,
	0, 1554, 0, 0, 650, 650, 650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 1565,
	0, 0, 0, 650, 0, 0, 0, 0, 650, 650,
	650, 0, 650, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 650, 0, 0, 0,
	0, 0, 1390, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 1538, 0, 0,
	97, 97, 693, 692, 702, 703, 695, 696, 697, 698,
	699, 700, 701, 694, 0, 0, 704, 361, 0, 0,
	0, 0, 0, 0, 0, 1558, 97, 0, 1559, 316,
	0, 1561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 1533, 97, 466, 97, 0, 1622,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 668, 670, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 1644, 1645, 1646, 1647, 316, 1651, 1532,
	1652, 1653, 0, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 0, 0, 0, 316, 0, 1664, 0,
	1665, 1666, 97, 0, 1531, 97, 97, 97, 316, 0,
	0, 1609, 361, 0, 0, 0, 1068, 0, 319, 0,
	0, 0, 0, 0, 0, 1680, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 331, 693, 692, 702, 703,
	695, 696, 697, 698, 699, 700, 701, 694, 0, 0,
	704, 1697, 0, 0, 0, 0, 0, 0, 790, 0,
	0, 0, 0, 0, 0, 0, 466, 0, 0, 329,
	0, 0, 821, 0, 0, 336, 0, 0, 0, 0,
	0, 693, 692, 702, 703, 695, 696, 697, 698, 699,
	700, 701, 694, 0, 97, 704, 0, 0, 650, 0,
	650, 97, 0, 0, 0, 320, 693, 692, 702, 703,
	695, 696, 697, 698, 699, 700, 701, 694, 0, 650,
	704, 0, 0, 1754, 1755, 0, 0, 0, 0, 0,
	0, 97, 333, 323, 1207, 334, 335, 342, 0, 0,
	0, 326, 328, 339, 324, 325, 344, 343, 0, 321,
	341, 340, 0, 0, 693, 692, 702, 703, 695, 696,
	697, 698, 699, 700, 701, 694, 0, 0, 704, 0,
	0, 0, 0, 0, 97, 0, 97, 0, 97, 0,
	0, 0, 0, 97, 0, 97, 97, 97, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	466, 0, 0, 0, 97, 316, 0, 0, 466, 466,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	0, 0, 466, 466, 466, 0, 466, 466, 0, 0,
	0, 0, 97, 0, 803, 0, 0, 0, 0, 466,
	466, 1267, 1268, 97, 97, 803, 803, 803, 803, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 0, 1293, 0, 97, 0, 0, 0, 0,
	803, 316, 0, 0, 803, 0, 0, 951, 0, 97,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 466, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1011, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1016, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 790, 0, 0, 466,
	0, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 466, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	30, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 466, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 0, 0, 0, 1202, 1203,
	1204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 345, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 452, 452, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 314, 0, 0, 0, 0, 0, 1011, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1562, 1563, 1564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 30, 466, 1440, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	1639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1391, 1392, 0,
	466, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 1412, 1413, 0, 1414, 1415, 0, 0, 0,
	0, 466, 0, 0, 0, 0, 0, 1422, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 466, 0,
	314, 1011, 0, 0, 1443, 1445, 314, 0, 0, 0,
	0, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 466,
	0, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 1511,
	1512, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 0, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	314, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 0, 1570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1596, 1597, 1598, 1599, 1600, 0, 0, 0,
	1603, 1604, 0, 0, 0, 0, 314, 0, 1615, 0,
	1617, 0, 1618, 0, 0, 0, 0, 1570, 0, 1570,
	1570, 1570, 314, 0, 314, 0, 0, 0, 0, 0,
	0, 314, 0, 0, 0, 314, 0, 0, 314, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 1570, 0,
	0, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1669, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 1694,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1699, 0, 0, 0, 0, 0, 0,
	0, 0, 452, 910, 0, 0, 0, 452, 452, 0,
	0, 452, 452, 452, 0, 0, 0, 1012, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1570, 0, 0, 0, 452, 452, 452, 452,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	314, 1746, 0, 0, 0, 0, 910, 314, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 314, 1073, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 314,
	314, 314, 314, 0, 0, 314, 314, 0, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 0, 1192, 1193, 314, 0, 0, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 452, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1012, 314, 314, 314, 314,
	314, 0, 0, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 314, 0, 0, 0, 1073, 0, 0, 0,
	0, 314, 314, 0, 0, 314, 1301, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1012, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1012, 0, 0, 0, 0, 577,
	565, 0, 314, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 202, 509, 0, 498, 474, 505, 475,
	496, 523, 135, 527, 493, 567, 537, 579, 169, 0,
	499, 213, 554, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 586, 172, 543,
	0, 253, 189, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 1099, 1100, 0, 0, 0, 0, 0, 121, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 1312, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 0, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 147, 564, 571, 519,
	317, 575, 517, 516, 578, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 568,
	497, 506, 128, 504, 234, 210, 277, 540, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	476, 0, 255, 280, 299, 119, 492, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 101, 111, 171, 296, 227, 143, 281,
	472, 485, 132, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 577, 565, 0, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 202, 509,
	0, 498, 474, 505, 475, 496, 523, 135, 527, 493,
	567, 537, 579, 169, 0, 499, 213, 554, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 586, 172, 543, 0, 253, 189, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 161, 125, 105, 199, 254, 142, 0,
	0, 0, 98, 99, 100, 0, 1099, 1100, 0, 0,
	0, 0, 0, 121, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	0, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 147, 564, 571, 519, 317, 575, 517, 516, 578,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 568, 497, 506, 128, 504, 234,
	210, 277, 540, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 115, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 476, 0, 255, 280, 299,
	119, 492, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 193, 116, 156, 251,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 101, 111,
	171, 296, 227, 143, 281, 472, 485, 132, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 577,
	565, 0, 0, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 202, 509, 0, 498, 474, 505, 475,
	496, 523, 135, 527, 493, 567, 537, 579, 169, 0,
	499, 213, 554, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 586, 172, 543,
	0, 253, 189, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 1432, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 147, 564, 571, 519,
	317, 575, 517, 516, 578, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 568,
	497, 506, 128, 504, 234, 210, 277, 540, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	476, 0, 255, 280, 299, 119, 492, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 101, 111, 171, 296, 227, 143, 281,
	472, 485, 132, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 577, 565, 0, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 202, 509,
	0, 498, 474, 505, 475, 496, 523, 135, 527, 493,
	567, 537, 579, 169, 0, 499, 213, 554, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 586, 172, 543, 0, 253, 189, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 161, 125, 105, 199, 254, 142, 62,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	0, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 147, 564, 571, 519, 317, 575, 517, 516, 578,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 568, 497, 506, 128, 504, 234,
	210, 277, 540, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 115, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 476, 0, 255, 280, 299,
	119, 492, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 193, 116, 156, 251,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 101, 111,
	171, 296, 227, 143, 281, 472, 485, 132, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 577,
	565, 0, 0, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 202, 509, 0, 498, 474, 505, 475,
	496, 523, 135, 527, 493, 567, 537, 579, 169, 0,
	499, 213, 554, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 586, 172, 543,
	0, 253, 189, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 1302, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 147, 564, 571, 519,
	317, 575, 517, 516, 578, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 568,
	497, 506, 128, 504, 234, 210, 277, 540, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	476, 0, 255, 280, 299, 119, 492, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 101, 111, 171, 296, 227, 143, 281,
	472, 485, 132, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 577, 565, 0, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 202, 509,
	0, 498, 474, 505, 475, 496, 523, 135, 527, 493,
	567, 537, 579, 169, 0, 499, 213, 554, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 586, 172, 543, 0, 253, 189, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 161, 125, 105, 199, 254, 142, 0,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	0, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 1045, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 147, 564, 571, 519, 317, 575, 517, 516, 578,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 568, 497, 506, 128, 504, 234,
	210, 277, 540, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 115, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 476, 0, 255, 280, 299,
	119, 492, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 193, 116, 156, 251,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 101, 111,
	171, 296, 227, 143, 281, 472, 485, 132, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 577,
	565, 0, 0, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 202, 509, 0, 498, 474, 505, 475,
	496, 523, 135, 527, 493, 567, 537, 579, 169, 0,
	499, 213, 554, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 586, 172, 543,
	0, 253, 189, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 0, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 147, 564, 571, 519,
	317, 575, 517, 516, 578, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 568,
	497, 506, 128, 504, 234, 210, 277, 540, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	476, 0, 255, 280, 299, 119, 492, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 101, 111, 171, 296, 227, 143, 281,
	472, 485, 132, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 577, 565, 0, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 202, 509,
	0, 498, 474, 505, 475, 496, 523, 135, 527, 493,
	567, 537, 579, 169, 0, 499, 213, 554, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 586, 172, 543, 0, 253, 189, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 161, 125, 105, 199, 254, 142, 0,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	0, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 147, 564, 571, 519, 317, 575, 517, 516, 578,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 568, 497, 506, 128, 504, 234,
	210, 277, 540, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 469, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 476, 0, 255, 280, 299,
	119, 492, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 470, 468, 463, 462,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 101, 111,
	171, 296, 227, 143, 281, 472, 485, 132, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 577,
	565, 0, 0, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 202, 509, 0, 498, 474, 505, 475,
	496, 523, 135, 527, 493, 567, 537, 579, 169, 0,
	499, 213, 554, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 586, 172, 543,
	0, 253, 189, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 0, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 147, 564, 571, 519,
	317, 575, 517, 516, 578, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 568,
	497, 506, 128, 504, 234, 210, 277, 540, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 812, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 469, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	476, 0, 255, 280, 299, 119, 492, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 470, 468, 463, 462, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 101, 111, 171, 296, 227, 143, 281,
	472, 485, 132, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 577, 565, 0, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 202, 509,
	0, 498, 474, 505, 475, 496, 523, 135, 527, 493,
	567, 537, 579, 169, 0, 499, 213, 554, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 586, 172, 543, 0, 253, 189, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 161, 125, 105, 199, 254, 142, 0,
	0, 0, 98, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	0, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 147, 564, 571, 519, 317, 575, 517, 516, 578,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 568, 497, 506, 128, 504, 234,
	210, 277, 540, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 460, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 469, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 476, 0, 255, 280, 299,
	119, 492, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 470, 468, 463, 462,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 101, 111,
	171, 296, 227, 143, 281, 472, 485, 132, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 202,
	0, 0, 983, 0, 366, 0, 0, 0, 135, 0,
	365, 0, 0, 0, 169, 0, 984, 213, 0, 245,
	127, 177, 175, 264, 140, 136, 134, 126, 157, 181,
	212, 261, 206, 409, 172, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 400, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 125, 105, 199, 254, 142,
	62, 0, 0, 98, 99, 100, 387, 386, 389, 390,
	391, 392, 0, 0, 121, 388, 393, 394, 395, 0,
	0, 0, 0, 363, 380, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 378, 450, 0,
	0, 0, 423, 0, 379, 0, 0, 372, 373, 375,
	374, 376, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 422, 0, 0, 317, 0, 0, 420,
	0, 224, 0, 258, 151, 168, 117, 165, 102, 113,
	0, 149, 198, 232, 236, 0, 0, 0, 128, 0,
	234, 210, 277, 0, 214, 233, 173, 266, 225, 276,
	286, 287, 262, 284, 295, 250, 106, 260, 274, 122,
	244, 0, 0, 0, 108, 272, 257, 187, 162, 163,
	107, 0, 230, 133, 145, 130, 201, 269, 270, 129,
	298, 114, 283, 110, 115, 282, 194, 265, 273, 188,
	180, 109, 271, 186, 179, 167, 139, 153, 222, 176,
	223, 154, 191, 190, 192, 0, 0, 0, 255, 280,
	299, 119, 0, 263, 291, 294, 0, 226, 120, 146,
	138, 221, 144, 170, 290, 292, 293, 193, 116, 156,
	251, 166, 174, 229, 297, 209, 235, 123, 279, 252,
	410, 421, 416, 417, 414, 415, 413, 412, 411, 424,
	402, 403, 404, 405, 407, 0, 418, 419, 406, 101,
	111, 171, 296, 227, 143, 281, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 131, 137, 141, 148,
	152, 155, 158, 159, 160, 164, 178, 182, 183, 184,
	185, 195, 196, 197, 200, 203, 204, 205, 207, 208,
	211, 215, 216, 217, 218, 219, 220, 228, 231, 237,
	238, 239, 240, 241, 242, 243, 246, 247, 248, 249,
	256, 259, 267, 268, 278, 285, 288, 150, 275, 289,
	202, 0, 0, 0, 0, 366, 0, 0, 0, 135,
	0, 365, 0, 0, 0, 169, 0, 0, 213, 0,
	245, 127, 177, 175, 264, 140, 136, 134, 126, 157,
	181, 212, 261, 206, 409, 172, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 400, 401, 0, 0, 0,
	0, 0, 0, 1090, 0, 161, 125, 105, 199, 254,
	142, 62, 0, 0, 98, 99, 100, 387, 386, 389,
	390, 391, 392, 0, 0, 121, 388, 393, 394, 395,
	1091, 0, 0, 0, 363, 380, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 0,
	0, 0, 0, 423, 0, 379, 0, 0, 372, 373,
	375, 374, 376, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 422, 0, 0, 317, 0, 0,
	420, 0, 224, 0, 258, 151, 168, 117, 165, 102,
	113, 0, 149, 198, 232, 236, 0, 0, 0, 128,
	0, 234, 210, 277, 0, 214, 233, 173, 266, 225,
	276, 286, 287, 262, 284, 295, 250, 106, 260, 274,
	122, 244, 0, 0, 0, 108, 272, 257, 187, 162,
	163, 107, 0, 230, 133, 145, 130, 201, 269, 270,
	129, 298, 114, 283, 110, 115, 282, 194, 265, 273,
	188, 180, 109, 271, 186, 179, 167, 139, 153, 222,
	176, 223, 154, 191, 190, 192, 0, 0, 0, 255,
	280, 299, 119, 0, 263, 291, 294, 0, 226, 120,
	146, 138, 221, 144, 170, 290, 292, 293, 193, 116,
	156, 251, 166, 174, 229, 297, 209, 235, 123, 279,
	252, 410, 421, 416, 417, 414, 415, 413, 412, 411,
	424, 402, 403, 404, 405, 407, 0, 418, 419, 406,
	101, 111, 171, 296, 227, 143, 281, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 112, 118, 124, 131, 137, 141,
	148, 152, 155, 158, 159, 160, 164, 178, 182, 183,
	184, 185, 195, 196, 197, 200, 203, 204, 205, 207,
	208, 211, 215, 216, 217, 218, 219, 220, 228, 231,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 256, 259, 267, 268, 278, 285, 288, 150, 275,
	289, 202, 0, 0, 0, 0, 366, 0, 0, 0,
	135, 0, 365, 0, 0, 0, 169, 0, 0, 213,
	0, 245, 127, 177, 175, 264, 140, 136, 134, 126,
	157, 181, 212, 261, 206, 409, 172, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 125, 105, 199,
	254, 142, 62, 0, 438, 98, 99, 100, 387, 386,
	389, 390, 391, 392, 0, 0, 121, 388, 393, 394,
	395, 0, 0, 0, 0, 363, 380, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	0, 0, 0, 0, 423, 0, 379, 0, 0, 372,
	373, 375, 374, 376, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 422, 0, 0, 317, 0,
	0, 420, 0, 224, 0, 258, 151, 168, 117, 165,
	102, 113, 0, 149, 198, 232, 236, 0, 0, 0,
	128, 0, 234, 210, 277, 0, 214, 233, 173, 266,
	225, 276, 286, 287, 262, 284, 295, 250, 106, 260,
	274, 122, 244, 0, 0, 0, 108, 272, 257, 187,
	162, 163, 107, 0, 230, 133, 145, 130, 201, 269,
	270, 129, 298, 114, 283, 110, 115, 282, 194, 265,
	273, 188, 180, 109, 271, 186, 179, 167, 139, 153,
	222, 176, 223, 154, 191, 190, 192, 0, 0, 0,
	255, 280, 299, 119, 0, 263, 291, 294, 0, 226,
	120, 146, 138, 221, 144, 170, 290, 292, 293, 193,
	116, 156, 251, 166, 174, 229, 297, 209, 235, 123,
	279, 252, 410, 421, 416, 417, 414, 415, 413, 412,
	411, 424, 402, 403, 404, 405, 407, 0, 418, 419,
	406, 101, 111, 171, 296, 227, 143, 281, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 131, 137,
	141, 148, 152, 155, 158, 159, 160, 164, 178, 182,
	183, 184, 185, 195, 196, 197, 200, 203, 204, 205,
	207, 208, 211, 215, 216, 217, 218, 219, 220, 228,
	231, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 256, 259, 267, 268, 278, 285, 288, 150,
	275, 289, 202, 0, 0, 0, 0, 366, 0, 0,
	0, 135, 0, 365, 0, 0, 0, 169, 0, 0,
	213, 0, 245, 127, 177, 175, 264, 140, 136, 134,
	126, 157, 181, 212, 261, 206, 409, 172, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 125, 105,
	199, 254, 142, 62, 0, 0, 98, 99, 100, 387,
	386, 389, 390, 391, 392, 0, 0, 121, 388, 393,
	394, 395, 0, 0, 0, 0, 363, 380, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 450, 0, 0, 0, 423, 0, 379, 0, 0,
	372, 373, 375, 374, 376, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 422, 0, 0, 317,
	0, 0, 420, 0, 224, 0, 258, 151, 168, 117,
	165, 102, 113, 0, 149, 198, 232, 236, 0, 0,
	0, 128, 0, 234, 210, 277, 0, 214, 233, 173,
	266, 225, 276, 286, 287, 262, 284, 295, 250, 106,
	260, 274, 122, 244, 0, 0, 0, 108, 272, 257,
	187, 162, 163, 107, 0, 230, 133, 145, 130, 201,
	269, 270, 129, 298, 114, 283, 110, 115, 282, 194,
	265, 273, 188, 180, 109, 271, 186, 179, 167, 139,
	153, 222, 176, 223, 154, 191, 190, 192, 0, 0,
	0, 255, 280, 299, 119, 0, 263, 291, 294, 0,
	226, 120, 146, 138, 221, 144, 170, 290, 292, 293,
	193, 116, 156, 251, 166, 174, 229, 297, 209, 235,
	123, 279, 252, 410, 421, 416, 417, 414, 415, 413,
	412, 411, 424, 402, 403, 404, 405, 407, 0, 418,
	419, 406, 101, 111, 171, 296, 227, 143, 281, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 112, 118, 124, 131,
	137, 141, 148, 152, 155, 158, 159, 160, 164, 178,
	182, 183, 184, 185, 195, 196, 197, 200, 203, 204,
	205, 207, 208, 211, 215, 216, 217, 218, 219, 220,
	228, 231, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 256, 259, 267, 268, 278, 285, 288,
	150, 275, 289, 202, 0, 0, 0, 0, 366, 0,
	0, 0, 135, 0, 365, 0, 0, 0, 169, 0,
	0, 213, 0, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 409, 172, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 400, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 125,
	105, 199, 254, 142, 62, 0, 0, 98, 99, 100,
	387, 1001, 389, 390, 391, 392, 0, 0, 121, 388,
	393, 394, 395, 0, 0, 0, 0, 363, 380, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	377, 378, 450, 0, 0, 0, 423, 0, 379, 0,
	0, 372, 373, 375, 374, 376, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 422, 0, 0,
	317, 0, 0, 420, 0, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 0,
	0, 0, 128, 0, 234, 210, 277, 0, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	0, 0, 255, 280, 299, 119, 0, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 410, 421, 416, 417, 414, 415,
	413, 412, 411, 424, 402, 403, 404, 405, 407, 0,
	418, 419, 406, 101, 111, 171, 296, 227, 143, 281,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 202, 0, 0, 0, 0, 366,
	0, 0, 0, 135, 0, 365, 0, 0, 0, 169,
	0, 0, 213, 0, 245, 127, 177, 175, 264, 140,
	136, 134, 126, 157, 181, 212, 261, 206, 409, 172,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 400,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	125, 105, 199, 254, 142, 62, 0, 0, 98, 99,
	100, 387, 998, 389, 390, 391, 392, 0, 0, 121,
	388, 393, 394, 395, 0, 0, 0, 0, 363, 380,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 377, 378, 450, 0, 0, 0, 423, 0, 379,
	0, 0, 372, 373, 375, 374, 376, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 422, 0,
	0, 317, 0, 0, 420, 0, 224, 0, 258, 151,
	168, 117, 165, 102, 113, 0, 149, 198, 232, 236,
	0, 0, 0, 128, 0, 234, 210, 277, 0, 214,
	233, 173, 266, 225, 276, 286, 287, 262, 284, 295,
	250, 106, 260, 274, 122, 244, 0, 0, 0, 108,
	272, 257, 187, 162, 163, 107, 0, 230, 133, 145,
	130, 201, 269, 270, 129, 298, 114, 283, 110, 115,
	282, 194, 265, 273, 188, 180, 109, 271, 186, 179,
	167, 139, 153, 222, 176, 223, 154, 191, 190, 192,
	0, 0, 0, 255, 280, 299, 119, 0, 263, 291,
	294, 0, 226, 120, 146, 138, 221, 144, 170, 290,
	292, 293, 193, 116, 156, 251, 166, 174, 229, 297,
	209, 235, 123, 279, 252, 410, 421, 416, 417, 414,
	415, 413, 412, 411, 424, 402, 403, 404, 405, 407,
	0, 418, 419, 406, 101, 111, 171, 296, 227, 143,
	281, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 131, 137, 141, 148, 152, 155, 158, 159, 160,
	164, 178, 182, 183, 184, 185, 195, 196, 197, 200,
	203, 204, 205, 207, 208, 211, 215, 216, 217, 218,
	219, 220, 228, 231, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 256, 259, 267, 268, 278,
	285, 288, 150, 275, 289, 431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 0, 366, 0, 0, 0, 135, 0, 365,
	0, 0, 0, 169, 0, 0, 213, 0, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 409, 172, 0, 0, 253, 189, 0, 0,
	0, 0, 0, 400, 401, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 125, 105, 199, 254, 142, 62,
	0, 0, 98, 99, 100, 387, 386, 389, 390, 391,
	392, 0, 0, 121, 388, 393, 394, 395, 0, 0,
	0, 0, 363, 380, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 0, 0, 0,
	0, 423, 0, 379, 0, 0, 372, 373, 375, 374,
	376, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 422, 0, 0, 317, 0, 0, 420, 0,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 0, 0, 0, 128, 0, 234,
	210, 277, 0, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 115, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 0, 0, 255, 280, 299,
	119, 0, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 193, 116, 156, 251,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 410,
	421, 416, 417, 414, 415, 413, 412, 411, 424, 402,
	403, 404, 405, 407, 0, 418, 419, 406, 101, 111,
	171, 296, 227, 143, 281, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 202,
	0, 0, 0, 0, 366, 0, 0, 0, 135, 0,
	365, 0, 0, 0, 169, 0, 0, 213, 0, 245,
	127, 177, 175, 264, 140, 136, 134, 126, 157, 181,
	212, 261, 206, 409, 172, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 400, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 125, 105, 199, 254, 142,
	62, 0, 0, 98, 99, 100, 387, 386, 389, 390,
	391, 392, 0, 0, 121, 388, 393, 394, 395, 0,
	0, 0, 0, 363, 380, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 423, 0, 379, 0, 0, 372, 373, 375,
	374, 376, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 422, 0, 0, 317, 0, 0, 420,
	0, 224, 0, 258, 151, 168, 117, 165, 102, 113,
	0, 149, 198, 232, 236, 0, 0, 0, 128, 0,
	234, 210, 277, 0, 214, 233, 173, 266, 225, 276,
	286, 287, 262, 284, 295, 250, 106, 260, 274, 122,
	244, 0, 0, 0, 108, 272, 257, 187, 162, 163,
	107, 0, 230, 133, 145, 130, 201, 269, 270, 129,
	298, 114, 283, 110, 115, 282, 194, 265, 273, 188,
	180, 109, 271, 186, 179, 167, 139, 153, 222, 176,
	223, 154, 191, 190, 192, 0, 0, 0, 255, 280,
	299, 119, 0, 263, 291, 294, 0, 226, 120, 146,
	138, 221, 144, 170, 290, 292, 293, 193, 116, 156,
	251, 166, 174, 229, 297, 209, 235, 123, 279, 252,
	410, 421, 416, 417, 414, 415, 413, 412, 411, 424,
	402, 403, 404, 405, 407, 0, 418, 419, 406, 101,
	111, 171, 296, 227, 143, 281, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 131, 137, 141, 148,
	152, 155, 158, 159, 160, 164, 178, 182, 183, 184,
	185, 195, 196, 197, 200, 203, 204, 205, 207, 208,
	211, 215, 216, 217, 218, 219, 220, 228, 231, 237,
	238, 239, 240, 241, 242, 243, 246, 247, 248, 249,
	256, 259, 267, 268, 278, 285, 288, 150, 275, 289,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 169, 0, 0, 213, 0,
	245, 127, 177, 175, 264, 140, 136, 134, 126, 157,
	181, 212, 261, 206, 409, 172, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 400, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 125, 105, 199, 254,
	142, 62, 0, 0, 98, 99, 100, 387, 386, 389,
	390, 391, 392, 0, 0, 121, 388, 393, 394, 395,
	0, 0, 0, 0, 0, 380, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 0,
	0, 0, 0, 423, 0, 379, 0, 0, 372, 373,
	375, 374, 376, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 422, 0, 0, 317, 0, 0,
	420, 0, 224, 0, 258, 151, 168, 117, 165, 102,
	113, 0, 149, 198, 232, 236, 0, 0, 0, 128,
	0, 234, 210, 277, 1747, 214, 233, 173, 266, 225,
	276, 286, 287, 262, 284, 295, 250, 106, 260, 274,
	122, 244, 0, 0, 0, 108, 272, 257, 187, 162,
	163, 107, 0, 230, 133, 145, 130, 201, 269, 270,
	129, 298, 114, 283, 110, 115, 282, 194, 265, 273,
	188, 180, 109, 271, 186, 179, 167, 139, 153, 222,
	176, 223, 154, 191, 190, 192, 0, 0, 0, 255,
	280, 299, 119, 0, 263, 291, 294, 0, 226, 120,
	146, 138, 221, 144, 170, 290, 292, 293, 193, 116,
	156, 251, 166, 174, 229, 297, 209, 235, 123, 279,
	252, 410, 421, 416, 417, 414, 415, 413, 412, 411,
	424, 402, 403, 404, 405, 407, 0, 418, 419, 406,
	101, 111, 171, 296, 227, 143, 281, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 112, 118, 124, 131, 137, 141,
	148, 152, 155, 158, 159, 160, 164, 178, 182, 183,
	184, 185, 195, 196, 197, 200, 203, 204, 205, 207,
	208, 211, 215, 216, 217, 218, 219, 220, 228, 231,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 256, 259, 267, 268, 278, 285, 288, 150, 275,
	289, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 169, 0, 0, 213,
	0, 245, 127, 177, 175, 264, 140, 136, 134, 126,
	157, 181, 212, 261, 206, 409, 172, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 125, 105, 199,
	254, 142, 62, 0, 438, 98, 99, 100, 387, 386,
	389, 390, 391, 392, 0, 0, 121, 388, 393, 394,
	395, 0, 0, 0, 0, 0, 380, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	0, 0, 0, 0, 423, 0, 379, 0, 0, 372,
	373, 375, 374, 376, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 422, 0, 0, 317, 0,
	0, 420, 0, 224, 0, 258, 151, 168, 117, 165,
	102, 113, 0, 149, 198, 232, 236, 0, 0, 0,
	128, 0, 234, 210, 277, 0, 214, 233, 173, 266,
	225, 276, 286, 287, 262, 284, 295, 250, 106, 260,
	274, 122, 244, 0, 0, 0, 108, 272, 257, 187,
	162, 163, 107, 0, 230, 133, 145, 130, 201, 269,
	270, 129, 298, 114, 283, 110, 115, 282, 194, 265,
	273, 188, 180, 109, 271, 186, 179, 167, 139, 153,
	222, 176, 223, 154, 191, 190, 192, 0, 0, 0,
	255, 280, 299, 119, 0, 263, 291, 294, 0, 226,
	120, 146, 138, 221, 144, 170, 290, 292, 293, 193,
	116, 156, 251, 166, 174, 229, 297, 209, 235, 123,
	279, 252, 410, 421, 416, 417, 414, 415, 413, 412,
	411, 424, 402, 403, 404, 405, 407, 0, 418, 419,
	406, 101, 111, 171, 296, 227, 143, 281, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 131, 137,
	141, 148, 152, 155, 158, 159, 160, 164, 178, 182,
	183, 184, 185, 195, 196, 197, 200, 203, 204, 205,
	207, 208, 211, 215, 216, 217, 218, 219, 220, 228,
	231, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 256, 259, 267, 268, 278, 285, 288, 150,
	275, 289, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 169, 0, 0,
	213, 0, 245, 127, 177, 175, 264, 140, 136, 134,
	126, 157, 181, 212, 261, 206, 409, 172, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 125, 105,
	199, 254, 142, 62, 0, 0, 98, 99, 100, 387,
	386, 389, 390, 391, 392, 0, 0, 121, 388, 393,
	394, 395, 0, 0, 0, 0, 0, 380, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 0, 0, 0, 0, 423, 0, 379, 0, 0,
	372, 373, 375, 374, 376, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 422, 0, 0, 317,
	0, 0, 420, 0, 224, 0, 258, 151, 168, 117,
	165, 102, 113, 0, 149, 198, 232, 236, 0, 0,
	0, 128, 0, 234, 210, 277, 0, 214, 233, 173,
	266, 225, 276, 286, 287, 262, 284, 295, 250, 106,
	260, 274, 122, 244, 0, 0, 0, 108, 272, 257,
	187, 162, 163, 107, 0, 230, 133, 145, 130, 201,
	269, 270, 129, 298, 114, 283, 110, 115, 282, 194,
	265, 273, 188, 180, 109, 271, 186, 179, 167, 139,
	153, 222, 176, 223, 154, 191, 190, 192, 0, 0,
	0, 255, 280, 299, 119, 0, 263, 291, 294, 0,
	226, 120, 146, 138, 221, 144, 170, 290, 292, 293,
	193, 116, 156, 251, 166, 174, 229, 297, 209, 235,
	123, 279, 252, 410, 421, 416, 417, 414, 415, 413,
	412, 411, 424, 402, 403, 404, 405, 407, 0, 418,
	419, 406, 101, 111, 171, 296, 227, 143, 281, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 112, 118, 124, 131,
	137, 141, 148, 152, 155, 158, 159, 160, 164, 178,
	182, 183, 184, 185, 195, 196, 197, 200, 203, 204,
	205, 207, 208, 211, 215, 216, 217, 218, 219, 220,
	228, 231, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 256, 259, 267, 268, 278, 285, 288,
	150, 275, 289, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 169, 0,
	0, 213, 0, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 0, 172, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 693, 692, 702, 703,
	695, 696, 697, 698, 699, 700, 701, 694, 0, 0,
	704, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	317, 0, 0, 0, 0, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 0,
	0, 0, 128, 0, 234, 210, 277, 0, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	0, 0, 255, 280, 299, 119, 0, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 111, 171, 296, 227, 143, 281,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 202, 0, 0, 0, 789, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 169,
	0, 0, 213, 0, 245, 127, 177, 175, 264, 140,
	136, 134, 126, 157, 181, 212, 261, 206, 0, 172,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	125, 105, 199, 254, 142, 0, 0, 0, 98, 99,
	100, 0, 791, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 682, 683, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 317, 0, 0, 0, 0, 224, 0, 258, 151,
	168, 117, 165, 102, 113, 0, 149, 198, 232, 236,
	0, 0, 0, 128, 0, 234, 210, 277, 0, 214,
	233, 173, 266, 225, 276, 286, 287, 262, 284, 295,
	250, 106, 260, 274, 122, 244, 0, 0, 0, 108,
	272, 257, 187, 162, 163, 107, 0, 230, 133, 145,
	130, 201, 269, 270, 129, 298, 114, 283, 110, 115,
	282, 194, 265, 273, 188, 180, 109, 271, 186, 179,
	167, 139, 153, 222, 176, 223, 154, 191, 190, 192,
	0, 0, 0, 255, 280, 299, 119, 0, 263, 291,
	294, 0, 226, 120, 146, 138, 221, 144, 170, 290,
	292, 293, 193, 116, 156, 251, 166, 174, 229, 297,
	209, 235, 123, 279, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 171, 296, 227, 143,
	281, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 131, 137, 141, 148, 152, 155, 158, 159, 160,
	164, 178, 182, 183, 184, 185, 195, 196, 197, 200,
	203, 204, 205, 207, 208, 211, 215, 216, 217, 218,
	219, 220, 228, 231, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 256, 259, 267, 268, 278,
	285, 288, 150, 275, 289, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	169, 0, 0, 213, 0, 245, 127, 177, 175, 264,
	140, 136, 134, 126, 157, 181, 212, 261, 206, 0,
	172, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 125, 105, 199, 254, 142, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 91,
	92, 0, 88, 0, 0, 0, 94, 224, 0, 258,
	151, 168, 117, 165, 102, 113, 0, 149, 198, 232,
	236, 0, 0, 0, 128, 0, 234, 210, 277, 0,
	214, 233, 173, 266, 225, 276, 286, 287, 262, 284,
	295, 250, 106, 260, 274, 122, 244, 0, 0, 0,
	108, 272, 257, 187, 162, 163, 107, 0, 230, 133,
	145, 130, 201, 269, 270, 129, 298, 114, 283, 110,
	115, 282, 194, 265, 273, 188, 180, 109, 271, 186,
	179, 167, 139, 153, 222, 176, 223, 154, 191, 190,
	192, 0, 0, 0, 255, 280, 299, 119, 0, 263,
	291, 294, 0, 226, 120, 146, 138, 221, 144, 170,
	290, 292, 293, 193, 116, 156, 251, 166, 174, 229,
	297, 209, 235, 123, 279, 252, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 111, 171, 296, 227,
	143, 281, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 112,
	118, 124, 131, 137, 141, 148, 152, 155, 158, 159,
	160, 164, 178, 182, 183, 184, 185, 195, 196, 197,
	200, 203, 204, 205, 207, 208, 211, 215, 216, 217,
	218, 219, 220, 228, 231, 237, 238, 239, 240, 241,
	242, 243, 246, 247, 248, 249, 256, 259, 267, 268,
	278, 285, 288, 150, 275, 289, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 1114, 0, 0, 0,
	0, 169, 0, 0, 213, 0, 245, 127, 177, 175,
	264, 140, 136, 134, 126, 157, 181, 212, 261, 206,
	0, 172, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 125, 105, 199, 254, 142, 0, 0, 0,
	98, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 1113, 317, 0, 0, 0, 1109, 1107, 0,
	1108, 151, 168, 598, 165, 102, 113, 1105, 1111, 198,
	232, 236, 0, 0, 0, 128, 0, 234, 210, 277,
	0, 214, 233, 173, 266, 225, 276, 286, 287, 262,
	284, 295, 250, 106, 260, 274, 122, 244, 0, 0,
	0, 108, 272, 257, 187, 162, 163, 107, 0, 230,
	133, 145, 130, 201, 269, 270, 129, 298, 114, 283,
	110, 115, 282, 194, 265, 273, 188, 180, 109, 271,
	186, 179, 167, 139, 153, 222, 176, 223, 154, 191,
	190, 192, 0, 0, 0, 255, 280, 299, 119, 0,
	263, 291, 294, 0, 226, 120, 146, 138, 221, 144,
	170, 290, 292, 293, 193, 116, 156, 251, 166, 174,
	229, 297, 209, 235, 123, 279, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 171, 296,
	227, 143, 281, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 131, 137, 141, 148, 152, 155, 158,
	159, 160, 164, 178, 182, 183, 184, 185, 195, 196,
	197, 200, 203, 204, 205, 207, 208, 211, 215, 216,
	217, 218, 219, 220, 228, 231, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 256, 259, 267,
	268, 278, 285, 288, 150, 275, 289, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 169, 0, 0, 213, 0,
	245, 127, 177, 175, 264, 140, 136, 134, 126, 157,
	181, 212, 261, 206, 0, 172, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 125, 105, 199, 254,
	142, 62, 0, 438, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 317, 0, 0,
	0, 0, 224, 0, 258, 151, 168, 117, 165, 102,
	113, 0, 149, 198, 232, 236, 0, 0, 0, 128,
	0, 234, 210, 277, 0, 214, 233, 173, 266, 225,
	276, 286, 287, 262, 284, 295, 250, 106, 260, 274,
	122, 244, 0, 0, 0, 108, 272, 257, 187, 162,
	163, 107, 0, 230, 133, 145, 130, 201, 269, 270,
	129, 298, 114, 283, 110, 115, 282, 194, 265, 273,
	188, 180, 109, 271, 186, 179, 167, 139, 153, 222,
	176, 223, 154, 191, 190, 192, 0, 0, 0, 255,
	280, 299, 119, 0, 263, 291, 294, 0, 226, 120,
	146, 138, 221, 144, 170, 290, 292, 293, 193, 116,
	156, 251, 166, 174, 229, 297, 209, 235, 123, 279,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 111, 171, 296, 227, 143, 281, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 112, 118, 124, 131, 137, 141,
	148, 152, 155, 158, 159, 160, 164, 178, 182, 183,
	184, 185, 195, 196, 197, 200, 203, 204, 205, 207,
	208, 211, 215, 216, 217, 218, 219, 220, 228, 231,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 256, 259, 267, 268, 278, 285, 288, 150, 275,
	289, 202, 0, 0, 0, 1072, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 169, 0, 0, 213,
	0, 245, 127, 177, 175, 264, 140, 136, 134, 126,
	157, 181, 212, 261, 206, 0, 172, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 125, 105, 199,
	254, 142, 0, 0, 0, 98, 99, 100, 0, 1074,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 317, 0,
	0, 0, 0, 224, 0, 258, 151, 168, 117, 165,
	102, 113, 0, 149, 198, 232, 236, 0, 0, 0,
	128, 0, 234, 210, 277, 0, 214, 233, 173, 266,
	225, 276, 286, 287, 262, 284, 295, 250, 106, 260,
	274, 122, 244, 0, 0, 0, 108, 272, 257, 187,
	162, 163, 107, 0, 230, 133, 145, 130, 201, 269,
	270, 129, 298, 114, 283, 110, 115, 282, 194, 265,
	273, 188, 180, 109, 271, 186, 179, 167, 139, 153,
	222, 176, 223, 154, 191, 190, 192, 0, 0, 0,
	255, 280, 299, 119, 0, 263, 291, 294, 0, 226,
	120, 146, 138, 221, 144, 170, 290, 292, 293, 193,
	116, 156, 251, 166, 174, 229, 297, 209, 235, 123,
	279, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 171, 296, 227, 143, 281, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 131, 137,
	141, 148, 152, 155, 158, 159, 160, 164, 178, 182,
	183, 184, 185, 195, 196, 197, 200, 203, 204, 205,
	207, 208, 211, 215, 216, 217, 218, 219, 220, 228,
	231, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 256, 259, 267, 268, 278, 285, 288, 150,
	275, 289, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	169, 0, 0, 213, 0, 245, 127, 177, 175, 264,
	140, 136, 134, 126, 157, 181, 212, 261, 206, 0,
	172, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 125, 105, 199, 254, 142, 62, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 317, 0, 0, 0, 0, 224, 0, 258,
	151, 168, 117, 165, 102, 113, 0, 149, 198, 232,
	236, 0, 0, 0, 128, 0, 234, 210, 277, 0,
	214, 233, 173, 266, 225, 276, 286, 287, 262, 284,
	295, 250, 106, 260, 274, 122, 244, 0, 0, 0,
	108, 272, 257, 187, 162, 163, 107, 0, 230, 133,
	145, 130, 201, 269, 270, 129, 298, 114, 283, 110,
	115, 282, 194, 265, 273, 188, 180, 109, 271, 186,
	179, 167, 139, 153, 222, 176, 223, 154, 191, 190,
	192, 0, 0, 0, 255, 280, 299, 119, 0, 263,
	291, 294, 0, 226, 120, 146, 138, 221, 144, 170,
	290, 292, 293, 193, 116, 156, 251, 166, 174, 229,
	297, 209, 235, 123, 279, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 111, 171, 296, 227,
	143, 281, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 112,
	118, 124, 131, 137, 141, 148, 152, 155, 158, 159,
	160, 164, 178, 182, 183, 184, 185, 195, 196, 197,
	200, 203, 204, 205, 207, 208, 211, 215, 216, 217,
	218, 219, 220, 228, 231, 237, 238, 239, 240, 241,
	242, 243, 246, 247, 248, 249, 256, 259, 267, 268,
	278, 285, 288, 150, 275, 289, 202, 0, 0, 0,
	1072, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 169, 0, 0, 213, 0, 245, 127, 177, 175,
	264, 140, 136, 134, 126, 157, 181, 212, 261, 206,
	0, 172, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 125, 105, 199, 254, 142, 0, 0, 0,
	98, 99, 100, 0, 1074, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 317, 0, 0, 0, 0, 224, 0,
	258, 151, 168, 117, 165, 102, 113, 0, 149, 198,
	232, 236, 0, 0, 0, 128, 0, 234, 210, 277,
	0, 1070, 233, 173, 266, 225, 276, 286, 287, 262,
	284, 295, 250, 106, 260, 274, 122, 244, 0, 0,
	0, 108, 272, 257, 187, 162, 163, 107, 0, 230,
	133, 145, 130, 201, 269, 270, 129, 298, 114, 283,
	110, 115, 282, 194, 265, 273, 188, 180, 109, 271,
	186, 179, 167, 139, 153, 222, 176, 223, 154, 191,
	190, 192, 0, 0, 0, 255, 280, 299, 119, 0,
	263, 291, 294, 0, 226, 120, 146, 138, 221, 144,
	170, 290, 292, 293, 193, 116, 156, 251, 166, 174,
	229, 297, 209, 235, 123, 279, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 171, 296,
	227, 143, 281, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 131, 137, 141, 148, 152, 155, 158,
	159, 160, 164, 178, 182, 183, 184, 185, 195, 196,
	197, 200, 203, 204, 205, 207, 208, 211, 215, 216,
	217, 218, 219, 220, 228, 231, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 256, 259, 267,
	268, 278, 285, 288, 150, 275, 289, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	0, 0, 169, 0, 0, 213, 0, 245, 127, 177,
	175, 264, 140, 136, 134, 126, 157, 181, 212, 261,
	206, 0, 172, 0, 0, 253, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 125, 105, 199, 254, 142, 0, 0,
	0, 98, 99, 100, 0, 0, 1037, 0, 0, 1038,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 317, 0, 0, 0, 0, 224,
	0, 258, 151, 168, 117, 165, 102, 113, 0, 149,
	198, 232, 236, 0, 0, 0, 128, 0, 234, 210,
	277, 0, 214, 233, 173, 266, 225, 276, 286, 287,
	262, 284, 295, 250, 106, 260, 274, 122, 244, 0,
	0, 0, 108, 272, 257, 187, 162, 163, 107, 0,
	230, 133, 145, 130, 201, 269, 270, 129, 298, 114,
	283, 110, 115, 282, 194, 265, 273, 188, 180, 109,
	271, 186, 179, 167, 139, 153, 222, 176, 223, 154,
	191, 190, 192, 0, 0, 0, 255, 280, 299, 119,
	0, 263, 291, 294, 0, 226, 120, 146, 138, 221,
	144, 170, 290, 292, 293, 193, 116, 156, 251, 166,
	174, 229, 297, 209, 235, 123, 279, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 111, 171,
	296, 227, 143, 281, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 112, 118, 124, 131, 137, 141, 148, 152, 155,
	158, 159, 160, 164, 178, 182, 183, 184, 185, 195,
	196, 197, 200, 203, 204, 205, 207, 208, 211, 215,
	216, 217, 218, 219, 220, 228, 231, 237, 238, 239,
	240, 241, 242, 243, 246, 247, 248, 249, 256, 259,
	267, 268, 278, 285, 288, 150, 275, 289, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 823,
	0, 0, 0, 169, 0, 0, 213, 0, 245, 127,
	177, 175, 264, 140, 136, 134, 126, 157, 181, 212,
	261, 206, 0, 172, 0, 0, 253, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 161, 125, 105, 199, 254, 142, 0,
	0, 0, 98, 99, 100, 0, 822, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 317, 0, 0, 0, 0,
	224, 0, 258, 151, 168, 117, 165, 102, 113, 0,
	149, 198, 232, 236, 0, 0, 0, 128, 0, 234,
	210, 277, 0, 214, 233, 173, 266, 225, 276, 286,
	287, 262, 284, 295, 250, 106, 260, 274, 122, 244,
	0, 0, 0, 108, 272, 257, 187, 162, 163, 107,
	0, 230, 133, 145, 130, 201, 269, 270, 129, 298,
	114, 283, 110, 115, 282, 194, 265, 273, 188, 180,
	109, 271, 186, 179, 167, 139, 153, 222, 176, 223,
	154, 191, 190, 192, 0, 0, 0, 255, 280, 299,
	119, 0, 263, 291, 294, 0, 226, 120, 146, 138,
	221, 144, 170, 290, 292, 293, 193, 116, 156, 251,
	166, 174, 229, 297, 209, 235, 123, 279, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 111,
	171, 296, 227, 143, 281, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 112, 118, 124, 131, 137, 141, 148, 152,
	155, 158, 159, 160, 164, 178, 182, 183, 184, 185,
	195, 196, 197, 200, 203, 204, 205, 207, 208, 211,
	215, 216, 217, 218, 219, 220, 228, 231, 237, 238,
	239, 240, 241, 242, 243, 246, 247, 248, 249, 256,
	259, 267, 268, 278, 285, 288, 150, 275, 289, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 169, 0, 0, 213, 0, 245,
	127, 177, 175, 264, 140, 136, 134, 126, 157, 181,
	212, 261, 206, 0, 172, 0, 0, 253, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 125, 105, 199, 254, 142,
	0, 0, 0, 98, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 317, 0, 0, 0,
	0, 224, 0, 258, 151, 168, 598, 165, 102, 113,
	596, 149, 198, 232, 236, 0, 0, 0, 128, 0,
	234, 210, 277, 0, 214, 233, 173, 266, 225, 276,
	286, 287, 262, 284, 295, 250, 106, 260, 274, 122,
	244, 0, 0, 0, 108, 272, 257, 187, 162, 163,
	107, 0, 230, 133, 145, 130, 201, 269, 270, 129,
	298, 114, 283, 110, 115, 282, 194, 265, 273, 188,
	180, 109, 271, 186, 179, 167, 139, 153, 222, 176,
	223, 154, 191, 190, 192, 0, 0, 0, 255, 280,
	299, 119, 0, 263, 291, 294, 0, 226, 120, 146,
	138, 221, 144, 170, 290, 292, 293, 193, 116, 156,
	251, 166, 174, 229, 297, 209, 235, 123, 279, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	111, 171, 296, 227, 143, 281, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 112, 118, 124, 131, 137, 141, 148,
	152, 155, 158, 159, 160, 164, 178, 182, 183, 184,
	185, 195, 196, 197, 200, 203, 204, 205, 207, 208,
	211, 215, 216, 217, 218, 219, 220, 228, 231, 237,
	238, 239, 240, 241, 242, 243, 246, 247, 248, 249,
	256, 259, 267, 268, 278, 285, 288, 150, 275, 289,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 169, 0, 0, 213, 0,
	245, 127, 177, 175, 264, 140, 136, 134, 126, 157,
	181, 212, 261, 206, 0, 172, 0, 0, 253, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 161, 125, 105, 199, 254,
	142, 0, 0, 438, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 317, 0, 0,
	0, 0, 224, 0, 258, 151, 168, 117, 165, 102,
	113, 0, 149, 198, 232, 236, 0, 0, 0, 128,
	0, 234, 210, 277, 0, 214, 233, 173, 266, 225,
	276, 286, 287, 262, 284, 295, 250, 106, 260, 274,
	122, 244, 0, 0, 0, 108, 272, 257, 187, 162,
	163, 107, 0, 230, 133, 145, 130, 201, 269, 270,
	129, 298, 114, 283, 110, 115, 282, 194, 265, 273,
	188, 180, 109, 271, 186, 179, 167, 139, 153, 222,
	176, 223, 154, 191, 190, 192, 0, 0, 0, 255,
	280, 299, 119, 0, 263, 291, 294, 0, 226, 120,
	146, 138, 221, 144, 170, 290, 292, 293, 193, 116,
	156, 251, 166, 174, 229, 297, 209, 235, 123, 279,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 111, 171, 296, 227, 143, 281, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 112, 118, 124, 131, 137, 141,
	148, 152, 155, 158, 159, 160, 164, 178, 182, 183,
	184, 185, 195, 196, 197, 200, 203, 204, 205, 207,
	208, 211, 215, 216, 217, 218, 219, 220, 228, 231,
	237, 238, 239, 240, 241, 242, 243, 246, 247, 248,
	249, 256, 259, 267, 268, 278, 285, 288, 150, 275,
	289, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 169, 0, 0, 213,
	0, 245, 127, 177, 175, 264, 140, 136, 134, 126,
	157, 181, 212, 261, 206, 0, 172, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 125, 105, 199,
	254, 142, 62, 0, 0, 98, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 317, 0,
	0, 0, 0, 224, 0, 258, 151, 168, 117, 165,
	102, 113, 0, 149, 198, 232, 236, 0, 0, 0,
	128, 0, 234, 210, 277, 0, 214, 233, 173, 266,
	225, 276, 286, 287, 262, 284, 295, 250, 106, 260,
	274, 122, 244, 0, 0, 0, 108, 272, 257, 187,
	162, 163, 107, 0, 230, 133, 145, 130, 201, 269,
	270, 129, 298, 114, 283, 110, 115, 282, 194, 265,
	273, 188, 180, 109, 271, 186, 179, 167, 139, 153,
	222, 176, 223, 154, 191, 190, 192, 0, 0, 0,
	255, 280, 299, 119, 0, 263, 291, 294, 0, 226,
	120, 146, 138, 221, 144, 170, 290, 292, 293, 193,
	116, 156, 251, 166, 174, 229, 297, 209, 235, 123,
	279, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 171, 296, 227, 143, 281, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 131, 137,
	141, 148, 152, 155, 158, 159, 160, 164, 178, 182,
	183, 184, 185, 195, 196, 197, 200, 203, 204, 205,
	207, 208, 211, 215, 216, 217, 218, 219, 220, 228,
	231, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 256, 259, 267, 268, 278, 285, 288, 150,
	275, 289, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 169, 0, 0,
	213, 0, 245, 127, 177, 175, 264, 140, 136, 134,
	126, 157, 181, 212, 261, 206, 0, 172, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 125, 105,
	199, 254, 142, 0, 0, 0, 98, 99, 100, 0,
	1074, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 317,
	0, 0, 0, 0, 224, 0, 258, 151, 168, 117,
	165, 102, 113, 0, 149, 198, 232, 236, 0, 0,
	0, 128, 0, 234, 210, 277, 0, 214, 233, 173,
	266, 225, 276, 286, 287, 262, 284, 295, 250, 106,
	260, 274, 122, 244, 0, 0, 0, 108, 272, 257,
	187, 162, 163, 107, 0, 230, 133, 145, 130, 201,
	269, 270, 129, 298, 114, 283, 110, 115, 282, 194,
	265, 273, 188, 180, 109, 271, 186, 179, 167, 139,
	153, 222, 176, 223, 154, 191, 190, 192, 0, 0,
	0, 255, 280, 299, 119, 0, 263, 291, 294, 0,
	226, 120, 146, 138, 221, 144, 170, 290, 292, 293,
	193, 116, 156, 251, 166, 174, 229, 297, 209, 235,
	123, 279, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 111, 171, 296, 227, 143, 281, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 112, 118, 124, 131,
	137, 141, 148, 152, 155, 158, 159, 160, 164, 178,
	182, 183, 184, 185, 195, 196, 197, 200, 203, 204,
	205, 207, 208, 211, 215, 216, 217, 218, 219, 220,
	228, 231, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 256, 259, 267, 268, 278, 285, 288,
	150, 275, 289, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 169, 0,
	0, 213, 0, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 0, 172, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 791, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	317, 0, 0, 0, 0, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 0,
	0, 0, 128, 0, 234, 210, 277, 0, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	0, 0, 255, 280, 299, 119, 0, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 111, 171, 296, 227, 143, 281,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 805, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 0, 0, 169, 0, 0, 213,
	0, 245, 127, 177, 175, 264, 140, 136, 134, 126,
	157, 181, 212, 261, 206, 0, 172, 0, 0, 253,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 161, 125, 105, 199,
	254, 142, 0, 0, 0, 98, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 317, 0,
	0, 0, 0, 224, 0, 258, 151, 168, 117, 165,
	102, 113, 0, 149, 198, 232, 236, 0, 0, 0,
	128, 0, 234, 210, 277, 0, 214, 233, 173, 266,
	225, 276, 286, 287, 262, 284, 295, 250, 106, 260,
	274, 122, 244, 0, 0, 0, 108, 272, 257, 187,
	162, 163, 107, 0, 230, 133, 145, 130, 201, 269,
	270, 129, 298, 114, 283, 110, 115, 282, 194, 265,
	273, 188, 180, 109, 271, 186, 179, 167, 139, 153,
	222, 176, 223, 154, 191, 190, 192, 0, 0, 0,
	255, 280, 299, 119, 0, 263, 291, 294, 0, 226,
	120, 146, 138, 221, 144, 170, 290, 292, 293, 193,
	116, 156, 251, 166, 174, 229, 297, 209, 235, 123,
	279, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 171, 296, 227, 143, 281, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 131, 137,
	141, 148, 152, 155, 158, 159, 160, 164, 178, 182,
	183, 184, 185, 195, 196, 197, 200, 203, 204, 205,
	207, 208, 211, 215, 216, 217, 218, 219, 220, 228,
	231, 237, 238, 239, 240, 241, 242, 243, 246, 247,
	248, 249, 256, 259, 267, 268, 278, 285, 288, 150,
	275, 289, 202, 0, 0, 0, 0, 0, 0, 0,
	795, 135, 0, 0, 0, 0, 0, 169, 0, 0,
	213, 0, 245, 127, 177, 175, 264, 140, 136, 134,
	126, 157, 181, 212, 261, 206, 0, 172, 0, 0,
	253, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 125, 105,
	199, 254, 142, 0, 0, 0, 98, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 317,
	0, 0, 0, 0, 224, 0, 258, 151, 168, 117,
	165, 102, 113, 0, 149, 198, 232, 236, 0, 0,
	0, 128, 0, 234, 210, 277, 0, 214, 233, 173,
	266, 225, 276, 286, 287, 262, 284, 295, 250, 106,
	260, 274, 122, 244, 0, 0, 0, 108, 272, 257,
	187, 162, 163, 107, 0, 230, 133, 145, 130, 201,
	269, 270, 129, 298, 114, 283, 110, 115, 282, 194,
	265, 273, 188, 180, 109, 271, 186, 179, 167, 139,
	153, 222, 176, 223, 154, 191, 190, 192, 0, 0,
	0, 255, 280, 299, 119, 0, 263, 291, 294, 0,
	226, 120, 146, 138, 221, 144, 170, 290, 292, 293,
	193, 116, 156, 251, 166, 174, 229, 297, 209, 235,
	123, 279, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 111, 171, 296, 227, 143, 281, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 112, 118, 124, 131,
	137, 141, 148, 152, 155, 158, 159, 160, 164, 178,
	182, 183, 184, 185, 195, 196, 197, 200, 203, 204,
	205, 207, 208, 211, 215, 216, 217, 218, 219, 220,
	228, 231, 237, 238, 239, 240, 241, 242, 243, 246,
	247, 248, 249, 256, 259, 267, 268, 278, 285, 288,
	150, 275, 289, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 0, 0, 169, 0,
	0, 213, 0, 245, 127, 177, 175, 264, 140, 136,
	134, 126, 157, 181, 212, 261, 206, 0, 172, 0,
	0, 253, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 125,
	105, 199, 254, 142, 0, 0, 0, 98, 99, 100,
	0, 671, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	317, 0, 0, 0, 0, 224, 0, 258, 151, 168,
	117, 165, 102, 113, 0, 149, 198, 232, 236, 0,
	0, 0, 128, 0, 234, 210, 277, 0, 214, 233,
	173, 266, 225, 276, 286, 287, 262, 284, 295, 250,
	106, 260, 274, 122, 244, 0, 0, 0, 108, 272,
	257, 187, 162, 163, 107, 0, 230, 133, 145, 130,
	201, 269, 270, 129, 298, 114, 283, 110, 115, 282,
	194, 265, 273, 188, 180, 109, 271, 186, 179, 167,
	139, 153, 222, 176, 223, 154, 191, 190, 192, 0,
	0, 0, 255, 280, 299, 119, 0, 263, 291, 294,
	0, 226, 120, 146, 138, 221, 144, 170, 290, 292,
	293, 193, 116, 156, 251, 166, 174, 229, 297, 209,
	235, 123, 279, 252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 111, 171, 296, 227, 143, 281,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 112, 118, 124,
	131, 137, 141, 148, 152, 155, 158, 159, 160, 164,
	178, 182, 183, 184, 185, 195, 196, 197, 200, 203,
	204, 205, 207, 208, 211, 215, 216, 217, 218, 219,
	220, 228, 231, 237, 238, 239, 240, 241, 242, 243,
	246, 247, 248, 249, 256, 259, 267, 268, 278, 285,
	288, 150, 275, 289, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 169,
	0, 0, 213, 0, 245, 127, 177, 175, 264, 140,
	136, 134, 126, 157, 181, 212, 261, 206, 0, 172,
	0, 0, 253, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	125, 105, 199, 254, 142, 0, 0, 0, 98, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 147, 0, 0,
	0, 317, 0, 0, 0, 0, 224, 0, 258, 151,
	168, 117, 165, 102, 113, 0, 149, 198, 232, 236,
	0, 0, 0, 128, 0, 234, 210, 277, 0, 214,
	233, 173, 266, 225, 276, 286, 287, 262, 284, 295,
	250, 106, 260, 274, 122, 244, 0, 0, 0, 108,
	272, 257, 187, 162, 163, 107, 0, 230, 133, 145,
	130, 201, 269, 270, 129, 298, 114, 283, 110, 115,
	282, 194, 265, 273, 188, 180, 109, 271, 186, 179,
	167, 139, 153, 222, 176, 223, 154, 191, 190, 192,
	0, 0, 0, 255, 280, 299, 119, 0, 263, 291,
	294, 0, 226, 120, 146, 138, 221, 144, 170, 290,
	292, 293, 193, 116, 156, 251, 166, 174, 229, 297,
	209, 235, 123, 279, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 111, 171, 296, 227, 143,
	281, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 112, 118,
	124, 131, 137, 141, 148, 152, 155, 158, 159, 160,
	164, 178, 182, 183, 184, 185, 195, 196, 197, 200,
	203, 204, 205, 207, 208, 211, 215, 216, 217, 218,
	219, 220, 228, 231, 237, 238, 239, 240, 241, 242,
	243, 246, 247, 248, 249, 256, 259, 267, 268, 278,
	285, 288, 353, 275, 289, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 0, 0,
	169, 0, 0, 213, 0, 245, 127, 177, 175, 264,
	140, 136, 134, 126, 157, 181, 212, 261, 206, 0,
	172, 0, 0, 253, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	161, 125, 105, 199, 254, 142, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	312, 0, 317, 0, 0, 0, 0, 224, 0, 258,
	151, 168, 117, 165, 102, 113, 0, 149, 198, 232,
	236, 0, 0, 0, 128, 0, 234, 210, 277, 0,
	214, 233, 173, 266, 225, 276, 286, 287, 262, 284,
	295, 250, 106, 260, 274, 122, 244, 0, 0, 0,
	108, 272, 257, 187, 162, 163, 107, 0, 230, 133,
	145, 130, 201, 269, 270, 129, 298, 114, 283, 110,
	115, 282, 194, 265, 273, 188, 180, 109, 271, 186,
	179, 167, 139, 153, 222, 176, 223, 154, 191, 190,
	192, 0, 0, 0, 255, 280, 299, 119, 0, 263,
	291, 294, 0, 226, 120, 146, 138, 221, 144, 170,
	290, 292, 293, 193, 116, 156, 251, 166, 174, 229,
	297, 209, 235, 123, 279, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 111, 171, 296, 227,
	143, 281, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 112,
	118, 124, 131, 137, 141, 148, 152, 155, 158, 159,
	160, 164, 178, 182, 183, 184, 185, 195, 196, 197,
	200, 203, 204, 205, 207, 208, 211, 215, 216, 217,
	218, 219, 220, 228, 231, 237, 238, 239, 240, 241,
	242, 243, 246, 247, 248, 249, 256, 259, 267, 268,
	278, 285, 288, 150, 275, 289, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 0,
	0, 169, 0, 0, 213, 0, 245, 127, 177, 175,
	264, 140, 136, 134, 126, 157, 181, 212, 261, 206,
	0, 172, 0, 0, 253, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 125, 105, 199, 254, 142, 0, 0, 0,
	98, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 317, 0, 0, 0, 0, 224, 0,
	258, 151, 168, 117, 165, 102, 113, 0, 149, 198,
	232, 236, 0, 0, 0, 128, 0, 234, 210, 277,
	0, 214, 233, 173, 266, 225, 276, 286, 287, 262,
	284, 295, 250, 106, 260, 274, 122, 244, 0, 0,
	0, 108, 272, 257, 187, 162, 163, 107, 0, 230,
	133, 145, 130, 201, 269, 270, 129, 298, 114, 283,
	110, 115, 282, 194, 265, 273, 188, 180, 109, 271,
	186, 179, 167, 139, 153, 222, 176, 223, 154, 191,
	190, 192, 0, 0, 0, 255, 280, 299, 119, 0,
	263, 291, 294, 0, 226, 120, 146, 138, 221, 144,
	170, 290, 292, 293, 193, 116, 156, 251, 166, 174,
	229, 297, 209, 235, 123, 279, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 171, 296,
	227, 143, 281, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 131, 137, 141, 148, 152, 155, 158,
	159, 160, 164, 178, 182, 183, 184, 185, 195, 196,
	197, 200, 203, 204, 205, 207, 208, 211, 215, 216,
	217, 218, 219, 220, 228, 231, 237, 238, 239, 240,
	241, 242, 243, 246, 247, 248, 249, 256, 259, 267,
	268, 278, 285, 288, 150, 275, 289,
}
var yyPact = [...]int{

	135, -1000, -286, 1139, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1085,
	867, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 322, 836,
	13096, -32, 168, 24, 19436, 154, 2081, 19807, -1000, 32,
	-1000, 16, 19807, 28, 19065, -1000, -1000, -84, -88, -1000,
	10870, 993, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	845, 1067, 1059, 1083, 707, 1150, -1000, 9373, 9373, 119,
	119, 119, 7889, -1000, -1000, 16090, 19807, 19807, 19807, -150,
	115, 115, 115, 163, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	145, 19807, 611, 611, 226, 578, 19807, 107, 611, 107,
	107, 107, 19807, -1000, 222, -1000, -1000, -1000, 19807, 611,
	1016, 392, 90, 291, 291, 291, -1000, 231, -1000, 5579,
	45, 51, -18, 1102, 49, -31, -1000, 392, 5579, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 139, -1000, -1000,
	19807, 18694, 153, 314, -1000, -1000, -1000, -1000, -1000, -1000,
	742, 558, -1000, 10870, 1815, 757, 757, -1000, -1000, 198,
	-1000, -1000, 11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
	11983, 11983, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 757, 218, -1000, 10499,
	757, 757, 757, 757, 757, 757, 757, 757, 10870, 757,
	757, 757, 757, 757, 757, 757, 757, 757, 757, 757,
	757, 757, 757, 757, 757, -1000, -1000, -1000, 1085, -1000,
	867, -1000, -1000, -1000, 1019, 10870, 10870, 1085, -1000, 944,
	9373, -1000, -1000, 1096, -1000, -1000, -1000, -1000, 376, 1115,
	-1000, 12725, 214, 1110, 18323, -1000, 16832, 17952, 772, 7504,
	-117, -1000, -1000, -1000, 306, 15719, -1000, -1000, -1000, 1015,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 718, 19807, -1000, -1000, 328, 611, -1000, 810, -1000,
	711, -1000, 799, 5579, 144, 611, 350, 611, 19807, 611,
	19807, 5579, 5579, 5579, 57, 96, 78, 19807, 569, 769,
	138, 19807, 1050, 880, 19807, 611, 611, -1000, 6734, -1000,
	5579, 392, -1000, 561, 10870, 5579, 5579, 5579, 19807, 5579,
	5579, -1000, 548, -1000, -1000, 381, -1000, -1000, -1000, -1000,
	-1000, -1000, 5579, 5579, 378, 381, 378, -1000, -1000, -1000,
	-1000, 10870, 291, -1000, 877, -1000, -1000, 23, -1000, -1000,
	-1000, -1000, -1000, 1139, -1000, -1000, -1000, -135, -1000, -1000,
	10870, 10870, 10870, 10870, 407, 293, 11983, 409, 372, 11983,
	11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983, 11983,
	11983, 11983, 11983, 11983, 626, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 611, -1000, 1137, 770, 770, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 12354, 8260, 6734,
	707, 697, 1085, 9373, 9373, 10870, 10870, 10115, 9744, 9373,
	1014, 338, 558, 19807, -1000, -1000, 11612, -1000, -1000, -1000,
	-1000, -1000, 588, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19807, 19807, 9373, 9373, 9373, 9373, 9373, -1000, 1059, 707,
	1096, 1037, 1132, 278, 571, 768, -1000, 396, 1059, 15348,
	808, -1000, 1096, -1000, -1000, -1000, 19807, -1000, -1000, 17574,
	-1000, -1000, 6349, 19807, 77, 19807, -1000, 790, 948, -1000,
	-1000, -1000, 1053, 14606, 14977, 19807, 710, 704, -1000, -1000,
	213, 7119, -117, -1000, 7119, 762, -1000, -122, -93, 8631,
	247, -1000, -1000, -1000, -1000, 4809, 13467, 706, 375, -66,
	-1000, -1000, -1000, 799, -1000, 799, 799, 799, 799, -11,
	-11, -11, -11, -1000, -1000, -1000, -1000, -1000, 820, 814,
	-1000, 799, 799, 799, 799, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 813, 813, 813, 800, 800, 106, 10870, 53,
	19807, 1042, 464, -1000, 19807, 5579, 1046, 5579, -1000, 856,
	142, -1000, -1000, -1000, 19807, 19807, 19807, 19807, 19807, 177,
	-1000, 19807, 19807, 767, -1000, 19807, 5579, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 558, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19807, -1000, -1000, -1000, -1000, 392, 19807,
	19807, 19807, 392, 558, -1000, 19807, 19807, -1000, -1000, -1000,
	-1000, -1000, 558, 293, 501, 298, -1000, -1000, 477, -1000,
	-1000, 1644, -1000, -1000, -1000, -1000, 409, 11983, 11983, 11983,
	455, 1644, 2232, 1051, 1403, 249, 514, 514, 240, 240,
	240, 240, 240, 307, 307, -1000, -1000, -1000, 588, -1000,
	-1000, -1000, 588, 9373, 9373, 766, 757, 211, -1000, 845,
	-1000, -1000, 1059, 689, 689, 582, 597, 329, 1108, 689,
	317, 1097, 689, 689, 9373, -1000, -1000, 337, -1000, 10870,
	588, -1000, 207, -1000, 609, 765, 763, 689, 588, 588,
	689, 689, 1019, -1000, -1000, 988, -1000, 938, 10870, 10870,
	10870, -1000, -1000, -1000, 1019, 1074, -1000, 954, 953, 1094,
	9373, 16832, 1096, -1000, -1000, -1000, 202, 1094, 750, 757,
	-1000, 19807, 16832, 16832, 16832, 16832, 16832, -1000, 929, 928,
	-1000, 914, 913, 922, 19807, -1000, 692, 707, 14606, 205,
	757, -1000, 17203, -1000, -1000, 77, 744, 16832, 19807, -1000,
	-1000, 16832, 19807, 5964, -1000, 762, -117, -45, -1000, -1000,
	-1000, -1000, 558, -1000, 634, 760, 4424, -1000, -1000, -1000,
	-1000, 101, -1000, -1000, 812, 611, -1000, 1033, 268, 263,
	611, 1031, -1000, -1000, -1000, -1000, 1018, -1000, 358, -79,
	-1000, -1000, -11, -11, -1000, -1000, 247, 1013, 247, 247,
	247, 546, 546, -1000, -1000, -1000, -1000, -1000, 427, -1000,
	-1000, -1000, 421, -1000, -1000, 810, 567, 886, 53, -1000,
	611, 302, 545, 998, -1000, -1000, 702, 5579, -1000, -1000,
	-1000, 876, 19807, -1000, 324, 324, 315, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76, 846,
	-1000, -1000, -1000, -1000, 13, 55, 137, -1000, 5579, -1000,
	378, -1000, -1000, -1000, 378, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 455, 1644, 1970, -1000, 11983, 11983, -1000, -1000,
	689, 689, 9373, 6734, 1085, 1019, -1000, -1000, 143, 626,
	143, 11983, 11983, -1000, 11983, 11983, -1000, -163, 743, 316,
	-1000, 10870, 499, -1000, 6734, -1000, 11983, 11983, -1000, -1000,
	-1000, -1000, -1000, -1000, 577, 543, 936, 558, 558, -1000,
	-1000, 19807, -1000, -1000, -1000, -1000, 1077, 10870, -1000, 759,
	-1000, 5194, 1059, 874, 19807, 757, 1139, 13851, 19807, 803,
	-1000, 304, 948, 854, 869, 1163, -1000, -1000, -1000, -1000,
	923, -1000, 895, -1000, -1000, -1000, -1000, -1000, 707, -1000,
	159, 151, 146, 19807, -1000, 1094, 16832, 716, -1000, 716,
	-1000, 197, -1000, -1000, -1000, -133, -129, -1000, -1000, -1000,
	4809, -1000, 4809, -1000, 19807, 98, -1000, 611, 611, -1000,
	-1000, -1000, 807, 866, 11983, -1000, -1000, -1000, 247, 247,
	-1000, 311, -1000, -1000, -1000, 687, -1000, 685, 755, 673,
	12, -1000, 841, 1011, 302, 302, -1000, -1000, 395, -1000,
	-1000, 534, -1000, -1000, 19807, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19807, -1000, -1000, -1000, -1000, -1000, 19807,
	-174, 611, 19807, 19807, 19807, 19807, -1000, 392, 392, -1000,
	11983, 1644, 1644, -1000, -1000, 588, -1000, 1059, -1000, 588,
	799, 799, -1000, 799, 800, -1000, 799, 8, 799, 5,
	588, 588, 2184, 2159, 2114, 1868, 757, -157, -1000, 558,
	10870, -1000, 1830, 1667, 528, -11, -1000, -1000, -1000, 1089,
	1081, 558, -1000, -1000, -1000, 1017, 729, 721, -1000, -1000,
	9002, 671, 950, 190, 668, -1000, 1085, 19807, 10870, -1000,
	-1000, 10870, 798, -1000, 10870, -1000, -1000, -1000, 1085, 757,
	757, 757, 668, 1085, 716, -1000, -1000, 261, -1000, -1000,
	-1000, 4424, -1000, 666, -1000, 1031, -1000, -1000, 19807, -61,
	1128, 1644, -1000, -1000, -1000, -1000, -11, 518, -11, 387,
	-1000, 380, -1000, -1000, -221, -1000, -1000, 756, 903, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1036, -1000, 6734, -1000,
	-1000, 796, 855, -1000, -1000, -1000, -1000, 1644, -1000, 1019,
	-1000, -1000, 173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11983, 11983, 11983, 11983, 11983, 1059, 511, 558, 11983,
	11983, -11, -59, -1000, 10870, 10870, 1030, -1000, 757, -1000,
	758, 19807, 757, 19807, -1000, 19807, 1059, -1000, 558, 558,
	19807, 558, 16461, 19807, 19807, 14222, 1059, -1000, 53, 662,
	-1000, 259, -1000, -76, 247, -1000, 247, 596, 592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 757, 751, -1000,
	301, 19807, 19807, -1000, -1000, -1000, 609, 609, 609, 609,
	65, 588, -1000, 609, 609, -278, -1000, 990, 986, 558,
	742, 1127, -1000, 757, 1139, 181, 721, -1000, -1000, -1000,
	643, 622, -1000, 622, 622, 205, -1000, -1000, 89, 19807,
	365, 1029, -1000, 1020, -1000, -1000, -1000, -1000, -1000, 67,
	6734, 4809, 620, -1000, -1000, -1000, -1000, -1000, 588, 68,
	-178, -1000, -1000, -1000, -59, 155, -1000, 967, 956, 1076,
	19807, 721, 19807, -1000, -1000, -1000, -1000, -1000, 19807, -1000,
	-1000, 508, -1000, -1000, 606, -1000, 19807, -1000, -1000, 846,
	-1000, 935, -172, -184, 970, 975, 975, 986, 1075, 984,
	982, -1000, 507, 714, -1000, 788, -1000, -1000, 67, 949,
	-174, -1000, 881, -1000, 951, 440, -1000, -1000, -1000, -1000,
	505, -1000, 1073, 1064, -1000, 19807, -1000, 66, -1000, -175,
	-1000, 408, -1000, -1000, -1000, 502, 467, 599, 61, -181,
	-1000, -1000, -1000, -1000, 863, 757, -186, 862, -1000, 1106,
	11241, -1000, -1000, 1118, 232, 232, 609, 588, -1000, -1000,
	-1000, 100, 566, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1422, 1421, 50, 82, 71, 1420, 1419, 1418, 1417,
	114, 111, 110, 1416, 1414, 1411, 1410, 1409, 1408, 1407,
	1406, 1405, 1404, 1401, 1400, 1399, 1398, 1397, 1395, 1393,
	1392, 1391, 1390, 1389, 1388, 97, 1387, 1381, 1378, 1377,
	1373, 1371, 1370, 1369, 1364, 98, 56, 216, 54, 73,
	1363, 69, 666, 1362, 43, 70, 79, 1361, 40, 1360,
	1359, 108, 1357, 1356, 67, 1354, 1344, 68, 1343, 65,
	1341, 12, 39, 1338, 1336, 1334, 1333, 96, 1810, 1330,
	1326, 26, 1325, 1324, 112, 1323, 74, 14, 15, 32,
	23, 1322, 84, 1317, 19, 1314, 72, 1312, 1310, 1306,
	1305, 27, 1304, 77, 90, 103, 1303, 7, 9, 1302,
	1300, 1299, 1296, 1295, 1293, 4, 1292, 1290, 1289, 17,
	1286, 25, 64, 37, 20, 10, 1285, 1283, 18, 101,
	63, 91, 1276, 1273, 1271, 726, 1266, 1264, 49, 1263,
	117, 1261, 76, 102, 119, 531, 1260, 1258, 1257, 1254,
	1253, 46, 822, 1806, 16, 93, 1250, 1249, 1248, 1247,
	2763, 52, 66, 33, 1246, 1245, 1243, 21, 384, 35,
	692, 1241, 44, 1239, 1238, 1237, 1234, 1223, 1222, 1219,
	106, 1218, 1217, 1216, 80, 38, 94, 24, 1215, 1212,
	1207, 1206, 60, 85, 1205, 1202, 62, 61, 1199, 95,
	34, 30, 1198, 1197, 1196, 1195, 31, 8, 1194, 92,
	36, 59, 28, 22, 1192, 13, 1191, 29, 42, 1190,
	6, 1188, 11, 1166, 3, 0, 1162, 5, 58, 1,
	1160, 2, 1154, 1153, 1149, 1412, 576, 107, 1146, 104,
}
var yyR1 = [...]int{

	0, 233, 234, 234, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 225, 225, 225, 21, 34, 3, 3, 3, 3,
	2, 2, 8, 9, 4, 5, 5, 10, 10, 39,
	39, 11, 12, 12, 12, 12, 237, 237, 61, 61,
	62, 62, 122, 122, 13, 14, 14, 131, 131, 130,
	130, 130, 132, 132, 132, 132, 170, 170, 15, 15,
	15, 15, 15, 15, 15, 227, 227, 226, 224, 224,
	223, 223, 222, 22, 24, 202, 204, 204, 203, 203,
	203, 203, 203, 203, 193, 173, 173, 173, 173, 176,
	176, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	175, 175, 175, 175, 175, 177, 177, 177, 177, 177,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 179, 179, 179, 179, 179,
	179, 179, 179, 192, 192, 180, 180, 186, 186, 187,
	187, 187, 189, 189, 190, 190, 146, 146, 146, 182,
	182, 183, 183, 188, 188, 184, 184, 184, 185, 185,
	185, 191, 191, 191, 191, 191, 181, 181, 194, 215,
	215, 214, 214, 211, 211, 211, 211, 201, 201, 208,
	208, 208, 208, 208, 198, 198, 198, 199, 199, 197,
	197, 200, 200, 210, 210, 209, 195, 195, 196, 196,
	217, 217, 217, 217, 217, 218, 230, 231, 229, 229,
	229, 229, 229, 147, 147, 147, 205, 205, 205, 206,
	206, 206, 207, 207, 207, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 221, 219, 219, 220,
	220, 17, 23, 23, 18, 18, 18, 18, 18, 19,
	19, 25, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 139, 139, 232, 232, 141, 141, 137, 137,
	140, 140, 138, 138, 138, 142, 142, 142, 143, 143,
	171, 171, 171, 27, 27, 29, 29, 30, 31, 31,
	165, 165, 166, 166, 32, 33, 38, 38, 38, 38,
	38, 38, 40, 40, 40, 7, 7, 7, 7, 37,
	37, 37, 6, 6, 28, 28, 28, 28, 20, 238,
	35, 36, 36, 45, 45, 45, 41, 41, 41, 44,
	44, 44, 48, 48, 50, 50, 50, 50, 50, 51,
	51, 51, 51, 51, 51, 47, 47, 49, 49, 49,
	49, 156, 156, 156, 155, 155, 53, 53, 54, 54,
	55, 55, 56, 56, 56, 93, 70, 70, 121, 121,
	123, 123, 57, 57, 57, 57, 58, 58, 59, 59,
	60, 60, 164, 164, 163, 163, 163, 162, 162, 63,
	63, 63, 65, 64, 64, 64, 64, 66, 66, 68,
	68, 67, 67, 69, 71, 71, 71, 71, 71, 72,
	72, 52, 52, 52, 52, 52, 52, 52, 52, 134,
	134, 74, 74, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 85, 85, 85, 85, 85, 85, 75,
	75, 75, 75, 75, 75, 75, 46, 46, 86, 86,
	86, 92, 87, 87, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 82, 82,
	82, 82, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 239, 239, 84, 83, 83, 83, 83, 83, 83,
	83, 43, 43, 43, 43, 43, 169, 169, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 97, 97, 42, 42, 95, 95, 96, 98, 98,
	94, 94, 94, 77, 77, 77, 77, 77, 77, 77,
	77, 79, 79, 79, 99, 99, 100, 100, 101, 101,
	102, 102, 103, 104, 104, 104, 105, 105, 105, 105,
	216, 216, 216, 216, 216, 212, 212, 212, 212, 213,
	213, 213, 119, 119, 119, 106, 106, 106, 106, 111,
	111, 111, 107, 107, 109, 109, 109, 110, 110, 110,
	108, 114, 114, 116, 116, 115, 115, 113, 113, 118,
	118, 117, 117, 112, 112, 76, 76, 76, 76, 76,
	120, 120, 120, 120, 124, 124, 88, 88, 90, 90,
	89, 91, 125, 125, 128, 126, 126, 129, 129, 129,
	129, 129, 127, 127, 127, 159, 159, 159, 133, 133,
	144, 144, 145, 145, 135, 135, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 136, 136, 136, 149,
	149, 149, 150, 150, 158, 158, 158, 157, 157, 153,
	153, 154, 154, 160, 160, 161, 161, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 235, 236, 167,
	168, 168, 168,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 3, 5, 6, 6, 7,
	4, 6, 5, 7, 8, 1, 3, 7, 8, 1,
	1, 9, 9, 8, 7, 7, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	6, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 7, 4, 2, 4, 1, 1,
	3, 4, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 0,
	1, 1, 2, 2, 3, 2, 3, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 3, 3, 1, 3, 1,
	10, 11, 11, 12, 1, 5, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 4, 4, 7, 5, 5, 5, 12, 7,
	5, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 2, 7, 2, 3, 4, 5,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	3, 3, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 4, 5, 5, 0,
	2, 1, 3, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 8, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 2, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 2, 4, 0, 9, 3, 5, 0,
	3, 3, 0, 1, 0, 2, 2, 0, 2, 2,
	2, 0, 3, 0, 3, 0, 3, 0, 4, 0,
	3, 0, 4, 0, 1, 2, 1, 5, 4, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 3, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -233, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -25, -26, -27, -29,
	-30, -31, -32, -33, -6, -28, -20, -21, -34, -4,
	-235, 6, 7, 8, -39, 10, 11, 31, -22, -24,
	146, 147, 149, 148, 182, 150, 175, 70, 196, 197,
	199, 200, 201, 202, -40, 180, 181, 32, 33, 152,
	35, 41, 80, 9, 289, 177, 176, 26, -234, 391,
	-45, 5, -101, 16, -3, -35, -238, -35, -35, -35,
	-35, -35, -35, -202, -204, 80, 119, 80, 156, 100,
	281, 153, 154, -158, 160, -153, -225, -152, 83, 84,
	85, 299, 168, 331, 332, 76, 196, 210, 204, 231,
	223, 300, 333, 169, 221, 224, 268, 166, 334, 251,
	258, 94, 199, 277, 335, 75, 47, 40, 178, 219,
	215, 336, 308, 213, 46, 28, 45, 337, 260, 236,
	44, 338, 79, 304, 262, 214, 259, 152, 339, 171,
	387, 164, 340, 237, 241, 341, 269, 48, 342, 343,
	344, 74, 208, 209, 345, 167, 271, 235, 165, 34,
	263, 301, 54, 186, 272, 42, 239, 41, 346, 234,
	230, 49, 347, 348, 349, 350, 233, 207, 229, 58,
	243, 242, 244, 267, 226, 351, 352, 353, 172, 77,
	354, 216, 19, 355, 356, 357, 52, 358, 359, 275,
	181, 360, 50, 37, 184, 361, 362, 363, 364, 365,
	366, 261, 238, 240, 161, 188, 257, 303, 367, 273,
	212, 368, 173, 185, 180, 276, 174, 369, 370, 371,
	372, 373, 374, 375, 200, 39, 376, 377, 378, 379,
	195, 270, 279, 57, 78, 248, 380, 206, 163, 381,
	197, 51, 192, 253, 43, 227, 187, 382, 383, 217,
	218, 232, 205, 228, 198, 388, 189, 182, 384, 278,
	249, 305, 225, 222, 193, 385, 190, 191, 386, 389,
	264, 254, 265, 266, 255, 194, 302, 274, 220, 250,
	-136, 156, 281, 153, 255, 302, 154, 154, 155, 156,
	281, 153, 154, -67, -160, -225, -152, 156, 154, 137,
	224, 268, 146, 252, 263, 264, 260, -141, 261, 188,
	-171, 154, -137, 251, 254, 255, 194, -232, -225, 262,
	270, 269, 256, 266, 265, -160, 198, -165, 203, -153,
	201, -67, -38, 387, 150, -167, -167, 253, 253, -167,
	-87, -52, -73, 103, -78, 30, 24, -77, -74, -94,
	-91, -92, 137, 138, 140, 139, 141, 126, 127, 134,
	104, 142, -82, -80, -81, -83, 87, 86, 95, 88,
	89, 90, 91, 96, 97, 98, -153, -160, -89, -235,
	64, 65, 290, 291, 292, 293, 298, 294, 106, 53,
	280, 288, 287, 286, 284, 285, 282, 283, 296, 297,
	159, 281, 153, 132, 289, -225, -152, 40, -5, -4,
	-235, 6, 21, 22, -105, 18, 17, -236, 82, -41,
	-50, 59, 60, -51, 22, 36, 63, 61, -36, -49,
	128, -52, -160, -49, -135, 158, -135, -135, -126, -170,
	198, -129, 270, 269, -154, -127, -153, -151, 268, 224,
	267, 151, 306, 102, 23, 25, 246, 105, 137, 17,
	106, 136, 290, 146, 68, 307, 282, 283, 280, 292,
	293, 281, 252, 30, 11, 309, 26, 176, 22, 36,
	130, 148, 109, 110, 179, 24, 177, 98, 312, 20,
	71, 12, 14, 313, 314, 15, 159, 158, 121, 155,
	66, 9, 142, 27, 118, 62, 315, 29, 316, 317,
	318, 319, 64, 119, 18, 284, 285, 32, 320, 298,
	183, 132, 69, 55, 103, 321, 322, 96, 323, 99,
	72, 100, 16, 67, 38, 324, 325, 326, 327, 120,
	149, 289, 65, 328, 153, 6, 295, 31, 175, 63,
	329, 154, 108, 296, 297, 157, 97, 5, 160, 33,
	10, 70, 73, 286, 287, 288, 53, 107, 13, 330,
	101, -203, 119, -193, -196, -153, 170, -218, 166, -67,
	-210, -209, -153, -67, 289, -145, 159, -145, -145, 155,
	154, -67, -225, -225, 146, 148, 151, 72, 87, -23,
	-67, -144, 159, -225, -144, -144, -144, -67, 143, -67,
	-225, 31, -142, 119, 13, 281, -225, 188, 154, 189,
	156, -143, 119, -143, -143, -198, 155, 34, 167, -168,
	-235, -154, 192, 193, 192, -140, -139, 258, 259, 253,
	257, 13, 193, 253, 191, -142, -168, 157, -153, -37,
	-153, 87, -7, -3, -11, -10, -12, 111, -167, -167,
	81, 102, 100, 101, 118, -52, -75, 121, 103, 119,
	120, 105, 123, 122, 133, 126, 127, 128, 129, 130,
	131, 132, 124, 125, 136, 111, 112, 113, 114, 115,
	116, 117, -134, -235, -92, -235, 144, 145, -78, -78,
	-78, -78, -78, -78, -78, -78, -78, -78, -235, 143,
	-2, -87, -4, -235, -235, -235, -235, -235, -235, -235,
	-235, -97, -52, -235, -239, -84, -235, -239, -84, -239,
	-84, -239, -235, -239, -84, -239, -84, -239, -239, -84,
	-235, -235, -235, -235, -235, -235, -235, -167, -101, -3,
	-35, -119, 20, 32, -52, -102, -103, -52, -101, 55,
	-47, -49, -51, 59, 60, 93, 12, -156, -155, 23,
	-153, 87, 143, 12, -68, 27, -67, -54, -55, -56,
	-57, -70, -93, -235, -67, 12, -61, -62, -67, -69,
	-160, 81, 198, -129, -170, -131, -130, 271, 273, 111,
	-159, -153, 87, 30, 31, 82, 81, -67, -173, -176,
	-178, -177, -179, -174, -175, 221, 222, 137, 225, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 236, 31,
	178, 217, 218, 219, 220, 237, 238, 239, 240, 241,
	242, 243, 244, 204, 223, 300, 205, 206, 207, 208,
	209, 210, 212, 213, 214, 215, 216, -225, 80, 82,
	81, -180, 80, -168, 156, -225, 103, -225, -67, -225,
	-67, -168, -168, -168, 190, 190, 154, 154, 195, -67,
	87, 81, 157, -61, 24, 72, -67, -225, -225, -161,
	-160, -151, -168, -142, 87, -52, -168, -168, -168, -67,
	-168, -168, 87, -199, 12, 121, -168, -168, -138, 12,
	121, -199, -138, -52, -143, 72, -166, 201, 235, 388,
	389, 390, -52, -52, -52, -52, -85, 96, 103, 97,
	98, -78, -86, -89, -92, 92, 121, 119, 120, 105,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -169, -225, 87, -225, -77,
	-77, -153, -48, 22, 36, -47, -154, -161, -151, -45,
	-236, -236, -101, -47, -47, -52, -52, -94, 87, -47,
	-94, 87, -47, -47, -44, 22, 36, -95, -96, 107,
	-94, -153, -160, -236, -78, -153, -153, -47, -48, -48,
	-47, -47, -105, -236, -106, 27, 10, 121, 81, 19,
	81, -104, 25, 26, -105, -79, -153, 88, 91, -53,
	81, 12, -51, -67, -155, 128, -161, -67, -122, 184,
	-67, 31, 81, -63, -65, -64, -66, 62, 66, 68,
	63, 64, 65, 69, -164, 23, -54, -3, -235, -163,
	184, -162, 23, -160, 87, -67, -61, -237, 81, 12,
	73, -237, 81, 143, -129, -131, 81, 272, 274, 275,
	72, 99, -52, -185, 136, -205, -206, -207, -154, 87,
	88, -193, -194, -195, -208, 170, -217, 161, 163, 160,
	-197, 171, -218, 155, 29, 82, -146, 96, 103, -189,
	249, -180, -180, -180, -180, -180, -184, 224, -184, -184,
	-184, 80, 80, -180, -180, -180, -180, -186, 80, -186,
	-186, -187, 80, -187, -218, 166, -52, -215, -214, -211,
	73, 165, 94, 302, -209, -104, 88, -67, -168, 24,
	-168, -157, 73, -148, 151, 148, 149, -221, 147, 246,
	224, 94, 30, 16, 290, 184, 305, -225, 185, -67,
	-67, -67, -67, -67, 151, 148, -67, -67, -67, -168,
	-67, -142, -160, -160, -67, -142, -67, -153, 96, 97,
	98, -86, -78, -78, -78, -46, 179, 102, -236, -236,
	-47, -47, -235, 143, -5, -105, -236, -236, 81, 73,
	23, 12, 12, -236, 12, 12, -236, -236, -47, -98,
	-96, 109, -52, -236, 143, -236, 81, 81, -236, -236,
	-236, -236, -236, -119, 38, 46, 57, -52, -52, -103,
	-119, -133, 20, 12, 53, 53, -72, 13, -49, -54,
	-51, 143, -72, -76, 31, 53, -3, -235, -235, -125,
	-128, -94, -55, -56, -56, -55, -56, 62, 62, 62,
	67, 62, 67, 62, -64, -160, -236, -236, -3, -71,
	70, 158, 71, -235, -162, -122, 73, -54, -67, -54,
	-69, -160, 128, -130, -132, 276, 273, 279, -225, 87,
	81, -207, 111, -196, 80, -225, 29, -197, -197, -200,
	-225, -200, 29, -182, 30, 96, -190, 250, -184, -184,
	-185, 31, -185, -185, -185, -192, 87, -192, 88, 88,
	82, -216, -212, -213, 32, 76, -211, -225, -201, 111,
	87, 37, 82, -168, 72, -153, -167, -228, 166, 162,
	170, 171, 164, 83, 84, 85, 155, 29, 161, 163,
	184, 160, -228, -149, -150, 157, 23, 155, 29, 184,
	-227, 73, 190, 246, 190, 157, -168, -138, -138, -46,
	102, -78, -78, -236, -236, -48, -154, -101, -119, -172,
	137, 221, 178, 219, 215, 235, 226, 248, 217, 249,
	-169, -172, -78, -78, -78, -78, 299, -101, 110, -52,
	108, -154, -78, -78, 39, 87, 87, 58, -67, -99,
	14, -52, 128, -105, -124, 72, -125, -88, -90, -89,
	-235, -120, -236, -153, -123, -153, -72, 81, 111, -59,
	-58, 72, 73, -60, 72, -58, 62, 62, -236, 155,
	155, 155, -123, -72, -54, -72, -72, 143, 273, 277,
	278, -206, -207, -210, -217, 171, -200, -200, 80, -183,
	72, -78, -185, -185, -225, 137, 82, 81, 82, 81,
	82, 81, -147, 337, 103, -213, -212, -201, -201, 88,
	87, -67, -167, -167, -67, -167, -153, -224, 302, -226,
	-225, -153, -153, -153, -67, -142, -142, -78, -236, -105,
	-236, -180, -180, -180, -187, -180, 209, -180, 209, -236,
	-236, 20, 20, 20, 20, -235, -42, 295, -52, 81,
	81, 87, -184, -100, 15, 17, 28, -124, 81, -236,
	-236, 81, 53, 143, -236, 81, -101, -128, -52, -52,
	80, -52, -235, -235, -235, -236, -101, -72, 82, -121,
	-153, -188, 246, 10, -184, 87, -184, 88, 88, 337,
	30, 77, 78, 79, 30, 74, 75, 27, -223, -222,
	-154, 80, 73, -119, -184, -225, -78, -78, -78, -78,
	-78, -105, 87, -78, -78, -184, -108, -113, -140, -52,
	-87, 29, -90, 53, -3, -153, -88, -153, -153, -105,
	-121, -121, -236, -121, -121, -163, -105, -215, 82, 81,
	-191, 161, 29, 160, -81, -185, -185, 82, 82, -235,
	81, 111, -121, -67, -236, -236, -236, -236, -43, 121,
	302, -236, -236, -236, -111, 387, -114, 42, -115, 43,
	10, -88, 143, 82, -236, -236, -236, -71, 173, -153,
	-181, 94, 29, 29, -219, -220, 184, -222, -207, 82,
	-236, 300, 69, 303, -108, 47, 227, -116, 51, -117,
	-112, 52, 17, -125, -153, -67, 87, -236, 81, -153,
	-227, 58, 301, 304, -109, 49, -107, 48, -107, -115,
	17, -118, 44, 45, 87, 80, -220, 53, -224, 58,
	-110, 50, 72, 99, 87, 17, 17, -121, 186, 302,
	72, 99, 87, 87, 82, 187, 303, -230, -231, 72,
	-235, 304, -231, 72, 11, 10, -78, 183, -229, 174,
	169, 172, 31, -229, -236, -236, 168, 30, 96,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 638,
	0, 379, 379, 379, 379, 379, 379, 379, 0, 0,
	754, 746, 0, 0, 0, 0, -2, 344, 345, 0,
	347, -2, 0, 0, 356, 1089, 1089, 0, 0, 1089,
	0, 0, 1087, 49, 50, 362, 363, 364, 1, 3,
	0, 383, 646, 0, 0, -2, 381, 0, 0, 734,
	734, 734, 0, 78, 79, 0, 0, 0, 1072, 0,
	732, 732, 732, 0, 755, 756, 759, 760, 31, 32,
	33, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 730,
	730, 730, 0, 290, 461, 763, 764, 1072, 0, 0,
	0, 335, 0, 338, 338, 338, 304, 0, 306, 1090,
	0, 0, 0, 313, 0, 0, 319, 335, 1090, 327,
	341, 342, 329, 324, 325, 343, 346, 0, 351, 354,
	0, 369, 0, 936, 361, 374, 375, 1089, 1089, 378,
	34, 512, 471, 0, 477, 479, 0, 514, 515, 516,
	517, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 545, 546, 547, 623, 624, 625, 626,
	627, 628, 629, 630, 481, 482, 620, 0, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	581, 581, 581, 581, 581, 581, 581, 581, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 1089, 638, 45,
	0, 379, 384, 385, 662, 0, 0, 638, 1088, 0,
	0, -2, -2, 395, 401, 402, 403, 404, 380, 0,
	407, 411, 0, 0, 0, 735, 0, 0, 64, 0,
	1060, 715, -2, -2, 0, 0, 761, 762, -2, 901,
	-2, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 0, 0, 98, 99, 0, 0, 219, 903, 96,
	0, 213, 155, 1090, 0, 0, 0, 0, 0, 0,
	0, 1090, 1090, 1090, 0, 0, 0, 0, 747, 281,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 291,
	1090, 335, 294, 0, 0, 1090, 1090, 1090, 0, 1090,
	1090, 301, 0, 302, 303, 0, 204, 205, 206, 307,
	1091, 1092, 1090, 1090, 332, 0, 332, 330, 331, 322,
	323, 0, 338, 316, 317, 320, 321, 352, 355, 372,
	370, 371, 373, 365, 366, 367, 368, 0, 376, 377,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 500, 501, 502, 503,
	504, 505, 478, 0, 492, 0, 0, 0, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 0, 392, 0,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 612, 0, 565, 573, 0, 566, 574, 567,
	575, 568, 0, 569, 576, 570, 577, 571, 572, 578,
	0, 0, 0, 392, 392, 0, 0, 35, 646, 0,
	394, 665, 0, 0, 647, 639, 640, 643, 646, 0,
	416, 405, 396, 399, 400, 382, 0, 408, 412, 0,
	414, 415, 0, 0, 62, 0, 460, 0, 418, 420,
	421, 422, 442, 0, 444, 0, 0, 0, 58, 60,
	461, 0, 1060, 721, 0, 66, 67, 0, 0, 0,
	178, 725, 726, 727, 723, 236, 0, 0, 166, 162,
	106, 107, 108, 155, 110, 155, 155, 155, 155, 175,
	175, 175, 175, 138, 139, 140, 141, 142, 0, 0,
	125, 155, 155, 155, 155, 145, 146, 147, 148, 149,
	150, 151, 152, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 157, 157, 157, 159, 159, 0, 0, 189,
	0, 643, 0, 81, 0, 1090, 0, 1090, 93, 757,
	0, 250, 252, 253, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 284, 731, 0, 1090, 287, 288, 462,
	765, 766, 292, 293, 336, 337, 295, 296, 297, 298,
	299, 300, 339, 0, 207, 208, 308, 312, 335, 0,
	0, 0, 335, 314, 315, 0, 0, 353, 357, 358,
	359, 360, 513, 472, 473, 474, 476, 493, 0, 495,
	497, 483, 484, 508, 509, 510, 0, 0, 0, 0,
	506, 488, 0, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 533, 596, 597, 0, 531,
	532, 543, 0, 0, 0, 393, 621, 0, -2, 0,
	511, 710, 646, 0, 0, 0, 0, 516, 623, 0,
	516, 623, 0, 0, 0, 390, 391, 618, 615, 0,
	0, 620, 0, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 662, 46, 36, 0, 663, 0, 0, 0,
	0, 642, 644, 645, 662, 0, 631, 0, 0, 469,
	0, 0, 397, 42, 413, 409, 0, 469, 0, 0,
	459, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	452, 0, 0, 0, 0, 443, 0, 0, 0, 464,
	1000, 445, 0, 447, 448, -2, 0, 0, 0, 56,
	57, 0, 0, 0, 716, 65, 0, 0, 70, 71,
	717, 718, 719, 720, 0, 95, 237, 239, 242, 243,
	244, 100, 102, 103, 0, 0, 217, 1010, 1044, 211,
	211, 935, 224, 209, 210, 97, 169, 167, 0, 164,
	163, 109, 175, 175, 132, 133, 178, 0, 178, 178,
	178, 0, 0, 126, 127, 128, 129, 120, 0, 121,
	122, 123, 0, 124, 218, 0, 0, 650, 190, 191,
	0, 197, 0, 0, 214, 215, 0, 1090, 83, 733,
	84, 0, 0, 1089, 0, 0, 749, 251, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 0, 85,
	255, 257, 256, 260, 0, 0, 0, 282, 1090, 286,
	332, 309, 333, 334, 332, 311, 318, 349, 494, 496,
	498, 485, 506, 489, 0, 486, 0, 0, 480, 548,
	0, 0, 392, 0, 638, 662, 552, 553, 0, 0,
	0, 0, 0, 589, 0, 0, 590, 0, 638, 0,
	616, 0, 0, 564, 0, 583, 0, 0, 584, 585,
	586, 587, 588, 38, 0, 0, 0, 648, 649, 641,
	37, 0, 728, 729, 632, 633, 634, 0, 406, 417,
	398, 0, 646, 704, 0, 0, 696, 0, 0, 469,
	712, 0, 419, 438, 440, 0, 435, 450, 451, 453,
	0, 455, 0, 457, 458, 423, 424, 425, 0, 426,
	0, 0, 0, 0, 446, 469, 0, 469, 59, 469,
	61, 0, 463, 68, 69, 0, 0, 75, 179, 180,
	0, 240, 0, 101, 0, 0, 199, 211, 211, 202,
	212, 203, 0, 171, 0, 168, 105, 165, 178, 178,
	134, 0, 135, 136, 137, 0, 153, 0, 0, 0,
	233, 80, 654, 653, 197, 197, 192, 193, 0, 198,
	195, 0, 156, 82, 0, 758, 245, 1089, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 1089, 0, 1089, 750, 751, 752, 753, 0,
	88, 0, 0, 0, 0, 0, 285, 335, 335, 487,
	0, 507, 490, 549, 550, 0, 622, 646, 40, 0,
	155, 155, 601, 155, 159, 604, 155, 606, 155, 609,
	0, 0, 0, 0, 0, 0, 0, 613, 563, 619,
	0, 621, 0, 0, 0, 175, 667, 664, 39, 636,
	0, 470, 410, 43, 47, 0, 704, 695, 706, 708,
	0, 0, 0, 700, 0, 430, 638, 0, 0, 432,
	439, 0, 0, 433, 0, 434, 454, 456, -2, 0,
	0, 0, 0, 638, 469, 54, 55, 0, 72, 73,
	74, 238, 241, 0, 216, 0, 200, 201, 0, 173,
	0, 170, 130, 131, 176, 177, 175, 0, 175, 0,
	160, 0, 225, 234, 0, 651, 652, 0, 0, 194,
	196, 94, 246, 247, 248, 249, 0, 254, 0, 86,
	87, 0, 0, 259, 283, 305, 310, 491, 551, 662,
	554, 598, 175, 602, 603, 605, 607, 608, 610, 556,
	555, 0, 0, 0, 0, 0, 646, 0, 617, 0,
	0, 175, 687, 44, 0, 0, 0, 48, 0, 709,
	0, 0, 0, 0, 63, 0, 646, 713, 714, 436,
	0, 441, 0, 0, 0, 444, 646, 53, 189, 0,
	428, 181, 174, 0, 178, 154, 178, 0, 0, 235,
	655, 656, 657, 658, 659, 660, 661, 0, 89, 90,
	0, 0, 0, 41, 599, 600, 0, 0, 0, 0,
	591, 0, 614, 0, 0, 669, 668, 681, 685, 637,
	635, 0, 707, 0, 699, 702, 698, 701, 431, 51,
	0, 0, 466, 0, 0, 464, 52, 188, 0, 0,
	186, 0, 183, 185, 172, 143, 144, 158, 161, 0,
	0, 0, 0, 261, 557, 559, 558, 560, 0, 0,
	0, 562, 579, 580, 687, 0, 680, 683, -2, 0,
	0, 697, 0, 437, 465, 467, 468, 427, 0, 429,
	104, 0, 182, 184, 0, 277, 0, 91, 92, 85,
	561, 0, 0, 0, 674, 672, 672, 685, 0, 689,
	0, 694, 0, 705, 703, 0, 187, 276, 0, 0,
	88, 592, 0, 595, 677, 0, 670, 673, 671, 682,
	0, 688, 0, 0, 686, 0, 278, 0, 258, 593,
	666, 0, 675, 676, 684, 0, 0, 0, 0, 0,
	678, 679, 690, 692, 220, 0, 0, 221, 222, 0,
	0, 594, 223, 0, 0, 0, 0, 0, 226, 228,
	229, 0, 0, 227, 279, 280, 230, 231, 232,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 391,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:365
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:404
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:424
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.statement = &Load{}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:436
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:476
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:504
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:521
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:533
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.insertAction = InsertAct
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:555
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.partitions = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.characteristic = ReadWrite
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.characteristic = ReadOnly
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:660
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.isolationLevel = Serializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.scope = SessionScope
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.scope = GlobalScope
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:691
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:697
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:701
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:705
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:709
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:714
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:718
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:729
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:734
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:745
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:751
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:757
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:764
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].colIdent, Name: yyDollar[4].colIdent, IndexType: yyDollar[5].colIdent, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:772
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:783
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:799
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:803
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:818
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.literal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1054
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1063
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1081
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1093
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.boolean = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.boolean = true
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.boolean = false
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.boolean = false
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.boolean = true
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.optVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1134
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.boolean = false
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.boolean = true
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1174
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.colKeyOpt = colKey
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1195
		{
			yyVAL.literal = nil
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1205
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexOptions = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1230
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1234
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1243
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1300
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1335
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1341
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 220:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1361
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 221:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1365
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 222:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1369
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 223:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1373
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1383
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1389
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1409
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1413
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1422
		{
			yyVAL.boolean = true
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.boolean = true
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.boolean = false
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1435
		{
			yyVAL.str = ""
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1443
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1455
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1469
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1491
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1496
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1603
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1613
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1619
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1623
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1639
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1651
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &OtherRead{}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1690
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1709
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1725
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1744
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1749
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1769
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1791
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = "extended "
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = "full "
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1911
		{
			yyVAL.showFilter = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1915
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1921
		{
			yyVAL.scope = ImplicitScope
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.scope = SessionScope
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1929
		{
			yyVAL.scope = GlobalScope
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.statement = &Begin{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &Commit{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &Rollback{}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1970
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1993
		{
			yyVAL.explainType = EmptyType
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.explainType = JSONType
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.explainType = TreeType
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.explainType = VitessType
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.explainType = TraditionalType
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.explainType = AnalyzeType
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &OtherRead{}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2086
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			setAllowComments(yylex, true)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2106
		{
			yyVAL.bytes2 = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.boolean = true
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.boolean = false
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolean = true
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = SQLCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.boolean = false
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.boolean = true
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.boolean = true
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2155
		{
			yyVAL.selectExprs = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2164
		{
			yyVAL.strs = nil
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2180
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = SQLCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = DistinctStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = StraightJoinHint
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2234
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2239
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2259
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2263
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2297
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2307
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2344
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2360
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2364
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2370
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2375
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2377
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2380
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.joinType = NormalJoinType
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.joinType = NormalJoinType
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.joinType = NormalJoinType
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.joinType = StraightJoinType
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.joinType = LeftJoinType
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.joinType = LeftJoinType
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.joinType = RightJoinType
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.joinType = RightJoinType
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2463
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2478
		{
			yyVAL.indexHints = nil
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2482
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2486
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2490
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2494
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = nil
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.matchExprOption = NoOption
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 594:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3060
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = nil
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.str = string("")
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3164
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &NullVal{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3245
		{
			yyVAL.exprs = nil
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3254
		{
			yyVAL.expr = nil
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3258
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3263
		{
			yyVAL.orderBy = nil
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3277
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			yyVAL.orderDirection = AscOrder
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.orderDirection = AscOrder
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.orderDirection = DescOrder
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3301
		{
			yyVAL.limit = nil
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3309
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3313
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3318
		{
			yyVAL.indexOptions = nil
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3322
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3326
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3345
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3349
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3359
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3363
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3372
		{
			yyVAL.lock = NoLock
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3376
		{
			yyVAL.lock = ForUpdateLock
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3380
		{
			yyVAL.lock = ShareModeLock
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3385
		{
			yyVAL.selectInto = nil
		}
	case 666:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3389
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3393
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3397
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3402
		{
			yyVAL.str = ""
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3406
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3415
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3419
		{
			yyVAL.str = " header"
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3428
		{
			yyVAL.str = " manifest on"
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3432
		{
			yyVAL.str = " manifest off"
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3437
		{
			yyVAL.str = ""
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3441
		{
			yyVAL.str = " overwrite on"
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3445
		{
			yyVAL.str = " overwrite off"
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3451
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3456
		{
			yyVAL.str = ""
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3460
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3465
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3469
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3474
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3478
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			yyVAL.str = ""
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3487
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3492
		{
			yyVAL.str = ""
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3496
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3501
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3505
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = " optionally"
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3527
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3535
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3539
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3543
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3549
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3553
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3557
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3561
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3566
		{
			yyVAL.updateExprs = nil
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3570
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3576
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3580
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3590
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3596
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3602
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3616
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3622
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3628
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3632
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3638
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3642
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3646
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3650
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3654
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3662
		{
			yyVAL.bytes = []byte("charset")
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3669
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3673
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.expr = &Default{}
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3686
		{
			yyVAL.boolean = false
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3688
		{
			yyVAL.boolean = true
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3691
		{
			yyVAL.boolean = false
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3693
		{
			yyVAL.boolean = true
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3696
		{
			yyVAL.ignore = false
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3698
		{
			yyVAL.ignore = true
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3702
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3706
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3708
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3710
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3714
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3716
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3720
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3724
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3728
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3734
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3742
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3755
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3757
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3762
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3768
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3772
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3779
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3789
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3796
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4142
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4151
		{
			decNesting(yylex)
		}
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4156
		{
			skipToEnd(yylex)
		}
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4161
		{
			skipToEnd(yylex)
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4165
		{
			skipToEnd(yylex)
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4169
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	literal              *Literal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	OnlineDDLHint        *OnlineDDLHint
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	33, 305,
	132, 305,
	144, 305,
	169, 319,
	170, 319,
	-2, 307,
	-1, 47,
	134, 329,
	-2, 327,
	-1, 70,
	38, 365,
	-2, 373,
	-1, 388,
	120, 699,
	-2, 695,
	-1, 389,
	120, 700,
	-2, 696,
	-1, 403,
	38, 366,
	-2, 378,
	-1, 404,
	38, 367,
	-2, 379,
	-1, 428,
	88, 953,
	-2, 72,
	-1, 429,
	88, 869,
	-2, 73,
	-1, 434,
	88, 836,
	-2, 658,
	-1, 436,
	88, 900,
	-2, 660,
	-1, 757,
	56, 54,
	58, 54,
	-2, 58,
	-1, 936,
	120, 702,
	-2, 698,
	-1, 1364,
	5, 617,
	17, 617,
	19, 617,
	31, 617,
	59, 617,
	-2, 404,
}

const yyPrivate = 57344

const yyLast = 17873

var yyAct = [...]int{

	388, 1593, 1403, 1291, 1476, 1560, 1603, 1463, 332, 1196,
	1041, 1509, 1377, 1216, 347, 1344, 1014, 1197, 1084, 1070,
	1037, 1341, 69, 3, 1050, 1345, 724, 361, 590, 601,
	1350, 685, 1040, 318, 731, 1184, 1356, 89, 1310, 858,
	930, 283, 1242, 303, 283, 1135, 756, 433, 413, 89,
	1268, 283, 396, 923, 877, 1259, 1016, 771, 1011, 1054,
	1000, 734, 67, 751, 405, 729, 1064, 334, 900, 770,
	956, 27, 558, 390, 768, 750, 283, 89, 422, 330,
	559, 283, 1080, 283, 993, 741, 319, 281, 323, 322,
	419, 65, 759, 699, 886, 64, 7, 314, 579, 1596,
	1103, 6, 698, 1580, 1591, 324, 430, 70, 5, 599,
	271, 1568, 1588, 269, 1102, 1404, 1579, 1327, 1567, 1433,
	563, 1371, 421, 91, 92, 93, 1031, 560, 321, 562,
	279, 275, 276, 277, 411, 1372, 1373, 391, 72, 73,
	74, 75, 76, 1032, 1033, 91, 92, 93, 1250, 320,
	29, 427, 58, 32, 33, 619, 1101, 1535, 647, 646,
	656, 657, 649, 650, 651, 652, 653, 654, 655, 648,
	1063, 373, 658, 379, 380, 377, 378, 376, 375, 374,
	1230, 1293, 772, 1229, 773, 614, 1231, 381, 382, 615,
	612, 613, 1466, 1071, 596, 1424, 598, 1422, 311, 885,
	313, 57, 91, 92, 93, 309, 607, 608, 846, 1098,
	1095, 1096, 272, 1094, 617, 845, 933, 618, 1295, 843,
	1590, 1587, 1561, 1290, 1553, 994, 1607, 1055, 595, 597,
	604, 1611, 580, 565, 270, 416, 1296, 1294, 1217, 1219,
	851, 621, 834, 887, 888, 889, 1105, 1108, 1311, 847,
	1510, 844, 1518, 1057, 278, 273, 1287, 1367, 1366, 1365,
	561, 1057, 1289, 568, 286, 1512, 274, 670, 671, 1542,
	283, 570, 571, 1115, 1446, 283, 1114, 581, 1226, 1189,
	1164, 283, 1143, 765, 745, 1154, 1100, 283, 588, 1313,
	1057, 594, 89, 91, 92, 93, 89, 683, 89, 575,
	586, 1038, 648, 658, 89, 658, 1027, 973, 1099, 635,
	79, 878, 882, 638, 89, 89, 569, 593, 1278, 592,
	1218, 578, 91, 92, 93, 638, 1315, 585, 1319, 603,
	1314, 1151, 1312, 587, 1536, 1551, 1511, 1317, 627, 1566,
	1527, 605, 1605, 1071, 1354, 1606, 1316, 1604, 1104, 80,
	1274, 1275, 1276, 872, 632, 633, 774, 1056, 631, 1318,
	1320, 1519, 1517, 1106, 804, 1056, 1288, 572, 1286, 573,
	1329, 957, 574, 1161, 836, 639, 582, 583, 584, 647,
	646, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 637, 635, 658, 1056, 670, 671, 668, 879, 1053,
	1051, 957, 1052, 591, 1248, 606, 59, 609, 638, 1049,
	1055, 324, 630, 620, 89, 722, 283, 628, 283, 283,
	696, 564, 1277, 1612, 629, 721, 89, 1282, 1279, 1270,
	1280, 1273, 89, 1269, 686, 1556, 1136, 1271, 1272, 415,
	873, 670, 671, 895, 897, 898, 727, 730, 792, 738,
	896, 1281, 91, 92, 93, 430, 651, 652, 653, 654,
	655, 648, 748, 57, 658, 757, 1060, 1613, 702, 704,
	735, 708, 710, 1061, 713, 903, 749, 701, 703, 705,
	707, 709, 711, 712, 769, 1571, 91, 92, 93, 805,
	646, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 723, 1573, 658, 1472, 1471, 1390, 566, 567, 758,
	1128, 1129, 1130, 763, 417, 818, 821, 822, 823, 824,
	825, 826, 557, 827, 828, 829, 830, 831, 806, 807,
	808, 809, 790, 791, 819, 1263, 793, 1262, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 810, 811,
	812, 813, 814, 815, 816, 817, 1251, 1552, 283, 907,
	1489, 425, 832, 89, 1469, 835, 1260, 837, 283, 283,
	89, 89, 89, 905, 906, 904, 283, 91, 92, 93,
	283, 925, 1125, 283, 856, 857, 863, 283, 849, 89,
	91, 92, 93, 576, 89, 89, 89, 283, 89, 89,
	1353, 91, 92, 93, 782, 1233, 400, 820, 89, 89,
	636, 637, 635, 400, 838, 839, 1515, 1589, 862, 733,
	1575, 400, 848, 1515, 1564, 1524, 421, 1523, 638, 855,
	1342, 1515, 400, 1353, 860, 350, 349, 352, 353, 354,
	355, 864, 1386, 868, 351, 356, 647, 646, 656, 657,
	649, 650, 651, 652, 653, 654, 655, 648, 66, 924,
	658, 1515, 1543, 1515, 1514, 880, 1461, 1460, 926, 901,
	852, 68, 833, 1448, 400, 1445, 400, 1396, 1395, 840,
	841, 842, 89, 890, 891, 892, 893, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 761, 861, 658,
	945, 948, 1058, 865, 866, 867, 958, 869, 870, 902,
	1392, 1393, 400, 934, 986, 89, 89, 874, 875, 1392,
	1391, 940, 29, 935, 1149, 1442, 1148, 986, 400, 997,
	400, 936, 634, 89, 978, 979, 634, 400, 943, 944,
	283, 686, 762, 89, 764, 636, 637, 635, 283, 1185,
	927, 928, 1496, 29, 781, 780, 283, 283, 966, 967,
	283, 283, 987, 638, 283, 283, 283, 89, 1185, 996,
	89, 57, 975, 57, 970, 934, 937, 1191, 1012, 761,
	1526, 89, 559, 1192, 980, 992, 989, 636, 637, 635,
	636, 637, 635, 936, 995, 997, 430, 997, 1331, 430,
	988, 1021, 1394, 760, 57, 638, 997, 1023, 638, 986,
	1042, 1234, 974, 860, 1353, 1072, 1073, 1074, 1022, 1030,
	1167, 1166, 1024, 1036, 762, 393, 760, 986, 990, 760,
	976, 636, 637, 635, 850, 283, 89, 1029, 89, 766,
	1107, 1028, 1020, 1025, 283, 283, 283, 283, 283, 638,
	1086, 283, 283, 1581, 1045, 283, 89, 1066, 1067, 1068,
	1069, 649, 650, 651, 652, 653, 654, 655, 648, 1150,
	29, 658, 283, 1077, 1078, 1079, 57, 283, 1478, 283,
	283, 1089, 1065, 1453, 283, 89, 1085, 1382, 1357, 1358,
	1109, 1110, 1111, 1112, 1113, 1237, 1081, 1116, 1117, 1076,
	1075, 1118, 1292, 1598, 941, 942, 1122, 1436, 947, 950,
	951, 1082, 1083, 1002, 1005, 1006, 1007, 1003, 1120, 1004,
	1008, 57, 1479, 1121, 636, 637, 635, 1088, 1594, 1384,
	1126, 1585, 901, 965, 1435, 1360, 968, 969, 1342, 1264,
	883, 854, 638, 1363, 1362, 1090, 1205, 1092, 647, 646,
	656, 657, 649, 650, 651, 652, 653, 654, 655, 648,
	1204, 1208, 658, 1206, 1578, 1119, 1209, 1210, 1207, 1006,
	1007, 1335, 902, 1131, 1174, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 732, 283, 658,
	1583, 1183, 1182, 1145, 953, 1255, 779, 1173, 283, 283,
	283, 283, 283, 725, 589, 1198, 1162, 1178, 954, 391,
	283, 1144, 1247, 1558, 283, 726, 1193, 1557, 283, 1494,
	1245, 1239, 283, 1175, 1176, 730, 1160, 1440, 1474, 1091,
	853, 1010, 394, 395, 389, 1181, 1215, 397, 1439, 1232,
	68, 89, 1177, 1180, 398, 1438, 1187, 1338, 1186, 1185,
	1238, 1235, 616, 1188, 1243, 1243, 1222, 1155, 1224, 1152,
	1225, 876, 1200, 1201, 1600, 1203, 1600, 1599, 1540, 1211,
	1042, 90, 1430, 1199, 1221, 284, 1202, 739, 284, 1467,
	1223, 972, 406, 90, 393, 284, 1252, 1253, 1227, 89,
	89, 1254, 66, 1256, 1257, 1258, 407, 1244, 71, 63,
	406, 1, 1592, 736, 737, 409, 1405, 408, 1475, 1097,
	284, 90, 1240, 1241, 407, 284, 1559, 284, 1508, 89,
	1376, 403, 404, 409, 1048, 408, 1039, 1267, 78, 556,
	77, 1550, 1261, 871, 602, 1047, 1046, 1516, 1465, 1059,
	1249, 1062, 1383, 1246, 89, 1555, 1283, 787, 1140, 1141,
	924, 785, 647, 646, 656, 657, 649, 650, 651, 652,
	653, 654, 655, 648, 786, 784, 658, 789, 788, 1158,
	783, 296, 1309, 1307, 884, 1298, 1299, 310, 1300, 1308,
	283, 1009, 775, 1306, 1087, 740, 81, 1285, 1284, 1322,
	89, 1093, 881, 1328, 1332, 89, 89, 293, 610, 1266,
	1198, 1343, 611, 1321, 935, 298, 268, 666, 1179, 1228,
	1330, 431, 936, 424, 1348, 977, 728, 1437, 1337, 1307,
	1346, 89, 1159, 695, 955, 754, 1336, 333, 1297, 894,
	348, 345, 1352, 346, 1339, 89, 981, 89, 89, 1361,
	1190, 1243, 1243, 640, 331, 325, 753, 1375, 746, 1001,
	999, 1368, 998, 420, 1359, 1355, 1389, 1369, 752, 1370,
	985, 402, 1432, 1379, 1042, 283, 1042, 1374, 1534, 401,
	952, 50, 623, 1387, 1388, 315, 31, 410, 22, 21,
	20, 19, 18, 1380, 1381, 283, 24, 17, 16, 15,
	577, 89, 35, 1406, 89, 89, 89, 283, 26, 25,
	14, 13, 1398, 12, 284, 11, 10, 9, 8, 284,
	4, 1397, 626, 23, 684, 284, 2, 1399, 0, 1401,
	0, 284, 0, 0, 0, 0, 90, 1411, 1412, 0,
	90, 1400, 90, 0, 1420, 0, 0, 0, 90, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 90, 90,
	0, 0, 0, 1002, 1005, 1006, 1007, 1003, 0, 1004,
	1008, 1415, 1198, 1357, 1358, 1441, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 89, 0, 0, 1417, 1418,
	1434, 1419, 0, 89, 1421, 1235, 1423, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 89, 0,
	0, 0, 0, 1451, 1042, 89, 1452, 0, 0, 1454,
	0, 1468, 0, 1470, 0, 0, 0, 0, 0, 1482,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 1481, 0,
	0, 0, 1480, 0, 0, 1462, 89, 89, 90, 89,
	284, 0, 284, 284, 89, 0, 89, 89, 89, 283,
	90, 1502, 89, 1503, 1505, 1506, 90, 1497, 1495, 0,
	1346, 1493, 0, 0, 1513, 1507, 0, 0, 0, 89,
	283, 0, 1520, 0, 0, 1488, 1528, 1492, 324, 1521,
	0, 1522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 1473, 0, 961,
	0, 1549, 1541, 0, 0, 0, 89, 0, 0, 0,
	1548, 1547, 0, 0, 1346, 0, 1529, 89, 89, 0,
	0, 1562, 0, 0, 0, 0, 0, 0, 1563, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 1198,
	1569, 0, 0, 0, 283, 0, 1477, 1042, 0, 0,
	0, 0, 89, 0, 1429, 0, 0, 0, 1577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	1584, 1582, 89, 0, 0, 0, 0, 0, 0, 1586,
	0, 0, 284, 0, 1597, 0, 0, 90, 0, 0,
	1572, 0, 284, 284, 90, 90, 90, 1608, 0, 0,
	284, 362, 28, 0, 284, 1428, 0, 284, 0, 0,
	0, 284, 0, 90, 0, 0, 0, 0, 90, 90,
	90, 284, 90, 90, 0, 0, 0, 0, 0, 0,
	28, 0, 90, 90, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 0, 0, 658, 0,
	0, 0, 0, 0, 0, 0, 29, 30, 58, 32,
	33, 1427, 0, 0, 0, 0, 0, 392, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	34, 53, 54, 0, 56, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 0, 0, 658,
	642, 0, 645, 43, 0, 0, 90, 57, 659, 660,
	661, 662, 663, 664, 665, 0, 643, 644, 641, 647,
	646, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 0, 0, 658, 0, 0, 0, 0, 0, 90,
	90, 647, 646, 656, 657, 649, 650, 651, 652, 653,
	654, 655, 648, 0, 0, 658, 0, 90, 0, 0,
	0, 0, 0, 0, 284, 0, 0, 90, 0, 0,
	0, 0, 284, 36, 37, 39, 38, 41, 0, 55,
	284, 284, 0, 0, 284, 284, 0, 0, 284, 284,
	284, 90, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 42, 61, 60, 90, 0, 51, 52, 40,
	1301, 647, 646, 656, 657, 649, 650, 651, 652, 653,
	654, 655, 648, 44, 45, 658, 46, 47, 48, 49,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	90, 1137, 90, 0, 0, 0, 0, 0, 284, 284,
	284, 284, 284, 0, 0, 284, 284, 0, 0, 284,
	90, 647, 646, 656, 657, 649, 650, 651, 652, 653,
	654, 655, 648, 600, 0, 658, 284, 600, 0, 600,
	0, 284, 0, 284, 284, 600, 0, 0, 284, 90,
	0, 0, 59, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	667, 669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 682, 0, 0, 0, 687, 688, 689, 690, 691,
	692, 693, 694, 0, 697, 700, 700, 700, 706, 700,
	700, 706, 700, 714, 715, 716, 717, 718, 719, 720,
	0, 0, 0, 0, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 284, 290, 0, 0, 0, 0, 0, 755,
	0, 297, 284, 284, 284, 284, 284, 0, 0, 0,
	0, 0, 0, 0, 284, 0, 0, 0, 284, 0,
	0, 0, 284, 0, 0, 0, 284, 0, 0, 0,
	0, 0, 0, 327, 0, 295, 0, 0, 359, 0,
	0, 302, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 90, 90, 0, 0, 0, 299, 291,
	0, 300, 301, 307, 0, 0, 0, 292, 294, 304,
	0, 289, 306, 305, 0, 432, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 90, 0,
	0, 600, 600, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 939, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 600, 600, 600, 0, 600,
	600, 0, 0, 0, 284, 0, 0, 0, 0, 600,
	600, 0, 0, 0, 90, 0, 0, 0, 0, 90,
	90, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 90, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 90, 0, 0, 90, 90,
	90, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	432, 0, 0, 0, 432, 0, 432, 1013, 0, 0,
	0, 755, 432, 0, 0, 755, 0, 0, 0, 0,
	0, 0, 622, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 90,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 1138, 0, 0, 90,
	1139, 0, 0, 0, 0, 0, 0, 600, 0, 600,
	0, 1146, 1147, 0, 0, 0, 0, 1153, 0, 0,
	1156, 1157, 0, 0, 0, 0, 0, 600, 1163, 0,
	0, 0, 1165, 0, 0, 1168, 1169, 1170, 1171, 1172,
	90, 90, 743, 90, 0, 0, 0, 0, 90, 0,
	90, 90, 90, 284, 432, 0, 90, 0, 0, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 284, 0, 0, 0, 0, 0,
	0, 1213, 1214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 392,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 284, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 755,
	0, 0, 0, 0, 0, 1194, 1195, 0, 0, 755,
	755, 755, 755, 755, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 1220, 0, 0,
	0, 432, 0, 755, 0, 0, 0, 0, 432, 432,
	432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 1305, 0, 0, 0, 0, 0, 432, 0, 0,
	0, 0, 432, 432, 432, 0, 432, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 432, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 0, 0, 899, 0, 0, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 0, 0, 0, 1364, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	929, 0, 432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 964, 0, 0, 0, 0, 0,
	0, 0, 360, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 1347, 0, 28, 0, 0, 0,
	0, 743, 0, 0, 432, 0, 1414, 0, 0, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 1426, 282, 0, 432, 308, 0, 432, 0,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 432,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	1447, 0, 0, 0, 0, 414, 0, 0, 423, 0,
	0, 0, 0, 282, 0, 282, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 1132,
	1133, 1134, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 1531, 1532, 1533, 0, 1537, 0,
	1538, 1539, 0, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 1544, 0, 1545, 1546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1565, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 28, 0, 0, 0,
	0, 0, 282, 0, 0, 959, 0, 282, 0, 1574,
	0, 0, 0, 282, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 1525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 432,
	0, 1609, 1610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1265, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
	0, 0, 0, 0, 0, 414, 0, 0, 0, 0,
	1302, 1303, 1595, 0, 0, 0, 0, 0, 282, 0,
	282, 282, 432, 0, 0, 1323, 1324, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 0, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 432, 0,
	959, 0, 0, 1349, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 432, 1378, 0, 0, 0,
	0, 1385, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 1402,
	282, 282, 1407, 1408, 1409, 1413, 0, 0, 282, 0,
	0, 0, 282, 0, 0, 282, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 432, 0, 0, 0,
	0, 0, 0, 432, 0, 414, 859, 0, 0, 0,
	414, 414, 0, 0, 414, 414, 414, 0, 0, 0,
	960, 1483, 1484, 1485, 1486, 1487, 0, 0, 0, 1490,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	414, 414, 414, 414, 1498, 1499, 0, 1500, 0, 0,
	0, 0, 1464, 0, 1464, 1464, 1464, 0, 0, 0,
	1378, 0, 282, 0, 0, 0, 0, 0, 859, 0,
	282, 0, 0, 0, 0, 0, 0, 1464, 282, 1018,
	0, 0, 282, 282, 0, 0, 282, 1026, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 1570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	1576, 0, 0, 0, 0, 0, 282, 282, 282, 282,
	282, 0, 0, 282, 282, 0, 0, 282, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 1601,
	0, 0, 0, 0, 282, 0, 0, 0, 0, 282,
	0, 1123, 1124, 0, 0, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 960,
	282, 282, 282, 282, 282, 0, 0, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 282, 0, 0, 0,
	1018, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 542, 530, 0,
	487, 545, 460, 477, 553, 478, 481, 518, 445, 500,
	180, 475, 282, 464, 440, 471, 441, 462, 489, 123,
	493, 459, 532, 503, 544, 152, 0, 465, 551, 154,
	509, 0, 227, 168, 0, 0, 0, 491, 534, 498,
	527, 486, 519, 450, 508, 546, 476, 516, 547, 0,
	0, 0, 91, 92, 93, 0, 1043, 1044, 0, 0,
	0, 0, 0, 113, 0, 513, 541, 473, 515, 517,
	555, 439, 510, 960, 443, 446, 552, 537, 468, 469,
	1236, 0, 0, 0, 0, 0, 282, 490, 499, 524,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	0, 507, 0, 0, 0, 447, 444, 0, 0, 0,
	0, 488, 0, 0, 0, 449, 0, 467, 525, 0,
	437, 132, 529, 536, 485, 285, 540, 483, 482, 543,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 533, 463, 472, 117, 470, 209,
	187, 248, 506, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 98, 233, 245, 114, 219,
	0, 0, 0, 100, 243, 230, 166, 145, 146, 99,
	0, 205, 122, 130, 119, 179, 240, 241, 118, 266,
	106, 254, 102, 107, 253, 173, 236, 244, 167, 160,
	101, 242, 165, 159, 150, 126, 138, 197, 157, 198,
	139, 170, 169, 171, 0, 442, 0, 228, 251, 267,
	111, 458, 235, 261, 262, 0, 201, 112, 131, 125,
	196, 129, 172, 108, 141, 225, 149, 156, 204, 265,
	186, 210, 115, 250, 226, 454, 457, 452, 453, 501,
	502, 548, 549, 550, 526, 448, 0, 455, 456, 0,
	531, 538, 539, 505, 94, 103, 153, 264, 202, 128,
	252, 438, 451, 121, 461, 0, 0, 474, 479, 480,
	492, 494, 495, 496, 497, 504, 511, 512, 514, 520,
	521, 522, 523, 528, 535, 554, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 203, 206, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 222, 223, 229, 232, 238, 239, 249,
	256, 259, 135, 246, 260, 542, 530, 0, 487, 545,
	460, 477, 553, 478, 481, 518, 445, 500, 180, 475,
	0, 464, 440, 471, 441, 462, 489, 123, 493, 459,
	532, 503, 544, 152, 0, 465, 551, 154, 509, 0,
	227, 168, 0, 0, 0, 491, 534, 498, 527, 486,
	519, 450, 508, 546, 476, 516, 547, 0, 0, 0,
	91, 92, 93, 0, 1043, 1044, 0, 0, 0, 0,
	0, 113, 0, 513, 541, 473, 515, 517, 555, 439,
	510, 0, 443, 446, 552, 537, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 490, 499, 524, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 507,
	0, 0, 0, 447, 444, 0, 0, 0, 0, 488,
	0, 0, 0, 449, 0, 467, 525, 0, 437, 132,
	529, 536, 485, 285, 540, 483, 482, 543, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 533, 463, 472, 117, 470, 209, 187, 248,
	506, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 442, 0, 228, 251, 267, 111, 458,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 454, 457, 452, 453, 501, 502, 548,
	549, 550, 526, 448, 0, 455, 456, 0, 531, 538,
	539, 505, 94, 103, 153, 264, 202, 128, 252, 438,
	451, 121, 461, 0, 0, 474, 479, 480, 492, 494,
	495, 496, 497, 504, 511, 512, 514, 520, 521, 522,
	523, 528, 535, 554, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	135, 246, 260, 542, 530, 0, 487, 545, 460, 477,
	553, 478, 481, 518, 445, 500, 180, 475, 0, 464,
	440, 471, 441, 462, 489, 123, 493, 459, 532, 503,
	544, 152, 0, 465, 551, 154, 509, 0, 227, 168,
	0, 0, 0, 491, 534, 498, 527, 486, 519, 450,
	508, 546, 476, 516, 547, 57, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 513, 541, 473, 515, 517, 555, 439, 510, 0,
	443, 446, 552, 537, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 490, 499, 524, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 507, 0, 0,
	0, 447, 444, 0, 0, 0, 0, 488, 0, 0,
	0, 449, 0, 467, 525, 0, 437, 132, 529, 536,
	485, 285, 540, 483, 482, 543, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	533, 463, 472, 117, 470, 209, 187, 248, 506, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 442, 0, 228, 251, 267, 111, 458, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 454, 457, 452, 453, 501, 502, 548, 549, 550,
	526, 448, 0, 455, 456, 0, 531, 538, 539, 505,
	94, 103, 153, 264, 202, 128, 252, 438, 451, 121,
	461, 0, 0, 474, 479, 480, 492, 494, 495, 496,
	497, 504, 511, 512, 514, 520, 521, 522, 523, 528,
	535, 554, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 542, 530, 0, 487, 545, 460, 477, 553, 478,
	481, 518, 445, 500, 180, 475, 0, 464, 440, 471,
	441, 462, 489, 123, 493, 459, 532, 503, 544, 152,
	0, 465, 551, 154, 509, 0, 227, 168, 0, 0,
	0, 491, 534, 498, 527, 486, 519, 450, 508, 546,
	476, 516, 547, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 513,
	541, 473, 515, 517, 555, 439, 510, 0, 443, 446,
	552, 537, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 490, 499, 524, 484, 0, 0, 0, 0, 0,
	0, 1340, 0, 466, 0, 507, 0, 0, 0, 447,
	444, 0, 0, 0, 0, 488, 0, 0, 0, 449,
	0, 467, 525, 0, 437, 132, 529, 536, 485, 285,
	540, 483, 482, 543, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 533, 463,
	472, 117, 470, 209, 187, 248, 506, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 442,
	0, 228, 251, 267, 111, 458, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 454,
	457, 452, 453, 501, 502, 548, 549, 550, 526, 448,
	0, 455, 456, 0, 531, 538, 539, 505, 94, 103,
	153, 264, 202, 128, 252, 438, 451, 121, 461, 0,
	0, 474, 479, 480, 492, 494, 495, 496, 497, 504,
	511, 512, 514, 520, 521, 522, 523, 528, 535, 554,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 542,
	530, 0, 487, 545, 460, 477, 553, 478, 481, 518,
	445, 500, 180, 475, 0, 464, 440, 471, 441, 462,
	489, 123, 493, 459, 532, 503, 544, 152, 0, 465,
	551, 154, 509, 0, 227, 168, 0, 0, 0, 491,
	534, 498, 527, 486, 519, 450, 508, 546, 476, 516,
	547, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 513, 541, 473,
	515, 517, 555, 439, 510, 0, 443, 446, 552, 537,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 490,
	499, 524, 484, 0, 0, 0, 0, 0, 0, 1027,
	0, 466, 0, 507, 0, 0, 0, 447, 444, 0,
	0, 0, 0, 488, 0, 0, 0, 449, 0, 467,
	525, 0, 437, 132, 529, 536, 485, 285, 540, 483,
	482, 543, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 533, 463, 472, 117,
	470, 209, 187, 248, 506, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 442, 0, 228,
	251, 267, 111, 458, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 454, 457, 452,
	453, 501, 502, 548, 549, 550, 526, 448, 0, 455,
	456, 0, 531, 538, 539, 505, 94, 103, 153, 264,
	202, 128, 252, 438, 451, 121, 461, 0, 0, 474,
	479, 480, 492, 494, 495, 496, 497, 504, 511, 512,
	514, 520, 521, 522, 523, 528, 535, 554, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 542, 530, 0,
	487, 545, 460, 477, 553, 478, 481, 518, 445, 500,
	180, 475, 0, 464, 440, 471, 441, 462, 489, 123,
	493, 459, 532, 503, 544, 152, 0, 465, 551, 154,
	509, 0, 227, 168, 0, 0, 0, 491, 534, 498,
	527, 486, 519, 450, 508, 546, 476, 516, 547, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 513, 541, 473, 515, 517,
	555, 439, 510, 0, 443, 446, 552, 537, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 490, 499, 524,
	484, 0, 0, 0, 0, 0, 0, 991, 0, 466,
	0, 507, 0, 0, 0, 447, 444, 0, 0, 0,
	0, 488, 0, 0, 0, 449, 0, 467, 525, 0,
	437, 132, 529, 536, 485, 285, 540, 483, 482, 543,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 533, 463, 472, 117, 470, 209,
	187, 248, 506, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 98, 233, 245, 114, 219,
	0, 0, 0, 100, 243, 230, 166, 145, 146, 99,
	0, 205, 122, 130, 119, 179, 240, 241, 118, 266,
	106, 254, 102, 107, 253, 173, 236, 244, 167, 160,
	101, 242, 165, 159, 150, 126, 138, 197, 157, 198,
	139, 170, 169, 171, 0, 442, 0, 228, 251, 267,
	111, 458, 235, 261, 262, 0, 201, 112, 131, 125,
	196, 129, 172, 108, 141, 225, 149, 156, 204, 265,
	186, 210, 115, 250, 226, 454, 457, 452, 453, 501,
	502, 548, 549, 550, 526, 448, 0, 455, 456, 0,
	531, 538, 539, 505, 94, 103, 153, 264, 202, 128,
	252, 438, 451, 121, 461, 0, 0, 474, 479, 480,
	492, 494, 495, 496, 497, 504, 511, 512, 514, 520,
	521, 522, 523, 528, 535, 554, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 203, 206, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 222, 223, 229, 232, 238, 239, 249,
	256, 259, 135, 246, 260, 542, 530, 0, 487, 545,
	460, 477, 553, 478, 481, 518, 445, 500, 180, 475,
	0, 464, 440, 471, 441, 462, 489, 123, 493, 459,
	532, 503, 544, 152, 0, 465, 551, 154, 509, 0,
	227, 168, 0, 0, 0, 491, 534, 498, 527, 486,
	519, 450, 508, 546, 476, 516, 547, 0, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 513, 541, 473, 515, 517, 555, 439,
	510, 0, 443, 446, 552, 537, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 490, 499, 524, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 507,
	0, 0, 0, 447, 444, 0, 0, 0, 0, 488,
	0, 0, 0, 449, 0, 467, 525, 0, 437, 132,
	529, 536, 485, 285, 540, 483, 482, 543, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 533, 463, 472, 117, 470, 209, 187, 248,
	506, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 442, 0, 228, 251, 267, 111, 458,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 454, 457, 452, 453, 501, 502, 548,
	549, 550, 526, 448, 0, 455, 456, 0, 531, 538,
	539, 505, 94, 103, 153, 264, 202, 128, 252, 438,
	451, 121, 461, 0, 0, 474, 479, 480, 492, 494,
	495, 496, 497, 504, 511, 512, 514, 520, 521, 522,
	523, 528, 535, 554, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	135, 246, 260, 542, 530, 0, 487, 545, 460, 477,
	553, 478, 481, 518, 445, 500, 180, 475, 0, 464,
	440, 471, 441, 462, 489, 123, 493, 459, 532, 503,
	544, 152, 0, 465, 551, 154, 509, 0, 227, 168,
	0, 0, 0, 491, 534, 498, 527, 486, 519, 450,
	508, 546, 476, 516, 547, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 513, 541, 473, 515, 517, 555, 439, 510, 0,
	443, 446, 552, 537, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 490, 499, 524, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 507, 0, 0,
	0, 447, 444, 0, 0, 0, 0, 488, 0, 0,
	0, 449, 0, 467, 525, 0, 437, 132, 529, 536,
	485, 285, 540, 483, 482, 543, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	533, 463, 472, 117, 470, 209, 187, 248, 506, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 435,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 442, 0, 228, 251, 267, 111, 458, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 436, 434,
	429, 428, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 454, 457, 452, 453, 501, 502, 548, 549, 550,
	526, 448, 0, 455, 456, 0, 531, 538, 539, 505,
	94, 103, 153, 264, 202, 128, 252, 438, 451, 121,
	461, 0, 0, 474, 479, 480, 492, 494, 495, 496,
	497, 504, 511, 512, 514, 520, 521, 522, 523, 528,
	535, 554, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 542, 530, 0, 487, 545, 460, 477, 553, 478,
	481, 518, 445, 500, 180, 475, 0, 464, 440, 471,
	441, 462, 489, 123, 493, 459, 532, 503, 544, 152,
	0, 465, 551, 154, 509, 0, 227, 168, 0, 0,
	0, 491, 534, 498, 527, 486, 519, 450, 508, 546,
	476, 516, 547, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 513,
	541, 473, 515, 517, 555, 439, 510, 0, 443, 446,
	552, 537, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 490, 499, 524, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 507, 0, 0, 0, 447,
	444, 0, 0, 0, 0, 488, 0, 0, 0, 449,
	0, 467, 525, 0, 437, 132, 529, 536, 485, 285,
	540, 483, 482, 543, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 533, 463,
	472, 117, 470, 209, 187, 248, 506, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 767, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 435, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 442,
	0, 228, 251, 267, 111, 458, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 436, 434, 429, 428,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 454,
	457, 452, 453, 501, 502, 548, 549, 550, 526, 448,
	0, 455, 456, 0, 531, 538, 539, 505, 94, 103,
	153, 264, 202, 128, 252, 438, 451, 121, 461, 0,
	0, 474, 479, 480, 492, 494, 495, 496, 497, 504,
	511, 512, 514, 520, 521, 522, 523, 528, 535, 554,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 542,
	530, 0, 487, 545, 460, 477, 553, 478, 481, 518,
	445, 500, 180, 475, 0, 464, 440, 471, 441, 462,
	489, 123, 493, 459, 532, 503, 544, 152, 0, 465,
	551, 154, 509, 0, 227, 168, 0, 0, 0, 491,
	534, 498, 527, 486, 519, 450, 508, 546, 476, 516,
	547, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 513, 541, 473,
	515, 517, 555, 439, 510, 0, 443, 446, 552, 537,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 490,
	499, 524, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 507, 0, 0, 0, 447, 444, 0,
	0, 0, 0, 488, 0, 0, 0, 449, 0, 467,
	525, 0, 437, 132, 529, 536, 485, 285, 540, 483,
	482, 543, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 533, 463, 472, 117,
	470, 209, 187, 248, 506, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 98, 233, 426,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 435, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 442, 0, 228,
	251, 267, 111, 458, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 436, 434, 429, 428, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 454, 457, 452,
	453, 501, 502, 548, 549, 550, 526, 448, 0, 455,
	456, 0, 531, 538, 539, 505, 94, 103, 153, 264,
	202, 128, 252, 438, 451, 121, 461, 0, 0, 474,
	479, 480, 492, 494, 495, 496, 497, 504, 511, 512,
	514, 520, 521, 522, 523, 528, 535, 554, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	931, 0, 329, 0, 0, 0, 123, 0, 328, 0,
	0, 0, 152, 0, 932, 372, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 350, 349, 352, 353, 354, 355, 0, 0,
	113, 351, 356, 357, 358, 0, 0, 0, 0, 326,
	343, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 412, 0, 0, 0, 386, 0,
	342, 0, 0, 335, 336, 338, 337, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 385,
	0, 0, 285, 0, 0, 383, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 387, 365, 366, 367, 368, 370, 0, 381, 382,
	369, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 329, 0, 0,
	0, 123, 0, 328, 0, 0, 0, 152, 0, 0,
	372, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 363, 364, 0, 0, 0, 0, 0, 0, 1034,
	0, 57, 0, 0, 91, 92, 93, 350, 349, 352,
	353, 354, 355, 0, 0, 113, 351, 356, 357, 358,
	1035, 0, 0, 0, 326, 343, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 341, 0,
	0, 0, 0, 386, 0, 342, 0, 0, 335, 336,
	338, 337, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 385, 0, 0, 285, 0, 0,
	383, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 387, 365, 366, 367,
	368, 370, 0, 381, 382, 369, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	0, 0, 329, 0, 0, 0, 123, 0, 328, 0,
	0, 0, 152, 0, 0, 372, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 400, 91,
	92, 93, 350, 349, 352, 353, 354, 355, 0, 0,
	113, 351, 356, 357, 358, 0, 0, 0, 0, 326,
	343, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 0, 0, 0, 0, 386, 0,
	342, 0, 0, 335, 336, 338, 337, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 385,
	0, 0, 285, 0, 0, 383, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 387, 365, 366, 367, 368, 370, 0, 381, 382,
	369, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 329, 0, 0,
	0, 123, 0, 328, 0, 0, 0, 152, 0, 0,
	372, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 363, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 350, 349, 352,
	353, 354, 355, 0, 0, 113, 351, 356, 357, 358,
	0, 0, 0, 0, 326, 343, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 341, 412,
	0, 0, 0, 386, 0, 342, 0, 0, 335, 336,
	338, 337, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 385, 0, 0, 285, 0, 0,
	383, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 387, 365, 366, 367,
	368, 370, 0, 381, 382, 369, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	0, 0, 329, 0, 0, 0, 123, 0, 328, 0,
	0, 0, 152, 0, 0, 372, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 363, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 350, 949, 352, 353, 354, 355, 0, 0,
	113, 351, 356, 357, 358, 0, 0, 0, 0, 326,
	343, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 412, 0, 0, 0, 386, 0,
	342, 0, 0, 335, 336, 338, 337, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 385,
	0, 0, 285, 0, 0, 383, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 387, 365, 366, 367, 368, 370, 0, 381, 382,
	369, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 329, 0, 0,
	0, 123, 0, 328, 0, 0, 0, 152, 0, 0,
	372, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 363, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 350, 946, 352,
	353, 354, 355, 0, 0, 113, 351, 356, 357, 358,
	0, 0, 0, 0, 326, 343, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 341, 412,
	0, 0, 0, 386, 0, 342, 0, 0, 335, 336,
	338, 337, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 385, 0, 0, 285, 0, 0,
	383, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 387, 365, 366, 367,
	368, 370, 0, 381, 382, 369, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 329, 0, 0, 0, 123, 0,
	328, 0, 0, 0, 152, 0, 0, 372, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 363, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 350, 349, 352, 353, 354, 355,
	0, 0, 113, 351, 356, 357, 358, 0, 0, 0,
	0, 326, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	386, 0, 342, 0, 0, 335, 336, 338, 337, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 385, 0, 0, 285, 0, 0, 383, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 387, 365, 366, 367, 368, 370, 0,
	381, 382, 369, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 329,
	0, 0, 0, 123, 0, 328, 0, 0, 0, 152,
	0, 0, 372, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 363, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 350,
	349, 352, 353, 354, 355, 0, 0, 113, 351, 356,
	357, 358, 0, 0, 0, 0, 326, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 386, 0, 342, 0, 0,
	335, 336, 338, 337, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 385, 0, 0, 285,
	0, 0, 383, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 387, 365,
	366, 367, 368, 370, 0, 381, 382, 369, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 372, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 363, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 350, 349, 352, 353, 354, 355,
	0, 0, 113, 351, 356, 357, 358, 0, 0, 0,
	0, 0, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	386, 0, 342, 0, 0, 335, 336, 338, 337, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 385, 0, 0, 285, 0, 0, 383, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 1602, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 387, 365, 366, 367, 368, 370, 0,
	381, 382, 369, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 372, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 363, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 400, 91, 92, 93, 350,
	349, 352, 353, 354, 355, 0, 0, 113, 351, 356,
	357, 358, 0, 0, 0, 0, 0, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 386, 0, 342, 0, 0,
	335, 336, 338, 337, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 385, 0, 0, 285,
	0, 0, 383, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 387, 365,
	366, 367, 368, 370, 0, 381, 382, 369, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 372, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 363, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 350, 349, 352, 353, 354, 355,
	0, 0, 113, 351, 356, 357, 358, 0, 0, 0,
	0, 0, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	386, 0, 342, 0, 0, 335, 336, 338, 337, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 385, 0, 0, 285, 0, 0, 383, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 387, 365, 366, 367, 368, 370, 0,
	381, 382, 369, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 0, 0, 658,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 285,
	0, 0, 0, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 742, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 744, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 636, 637,
	635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 285, 0, 0, 0, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 85, 86, 0, 82,
	0, 0, 0, 87, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 1017, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 1019, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 285, 0, 0, 0, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 285, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 1017, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 1019, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 285, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 1015, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 0, 983, 0, 0, 984, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 285, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 778, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 777, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 285, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 285, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 285, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 1019, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 285, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 744, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 285, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 180, 0, 0, 0,
	0, 0, 0, 0, 747, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 285, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 625, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 285, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 418, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 227, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 285, 0,
	0, 0, 0, 199, 0, 231, 136, 151, 109, 148,
	95, 105, 0, 134, 177, 207, 211, 0, 0, 0,
	117, 0, 209, 187, 248, 0, 189, 208, 155, 237,
	200, 247, 257, 258, 234, 255, 263, 224, 98, 233,
	245, 114, 219, 0, 0, 0, 100, 243, 230, 166,
	145, 146, 99, 0, 205, 122, 130, 119, 179, 240,
	241, 118, 266, 106, 254, 102, 107, 253, 173, 236,
	244, 167, 160, 101, 242, 165, 159, 150, 126, 138,
	197, 157, 198, 139, 170, 169, 171, 0, 0, 0,
	228, 251, 267, 111, 0, 235, 261, 262, 0, 201,
	112, 131, 125, 196, 129, 172, 108, 141, 225, 149,
	156, 204, 265, 186, 210, 115, 250, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 153,
	264, 202, 128, 252, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 203, 206, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 229, 232,
	238, 239, 249, 256, 259, 135, 246, 260, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	227, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 0, 132,
	0, 0, 0, 285, 0, 0, 0, 0, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 0, 0, 0, 117, 0, 209, 187, 248,
	0, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 0, 0, 228, 251, 267, 111, 0,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 153, 264, 202, 128, 252, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	316, 246, 260, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 227, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 280, 0, 285, 0,
	0, 0, 0, 199, 0, 231, 136, 151, 109, 148,
	95, 105, 0, 134, 177, 207, 211, 0, 0, 0,
	117, 0, 209, 187, 248, 0, 189, 208, 155, 237,
	200, 247, 257, 258, 234, 255, 263, 224, 98, 233,
	245, 114, 219, 0, 0, 0, 100, 243, 230, 166,
	145, 146, 99, 0, 205, 122, 130, 119, 179, 240,
	241, 118, 266, 106, 254, 102, 107, 253, 173, 236,
	244, 167, 160, 101, 242, 165, 159, 150, 126, 138,
	197, 157, 198, 139, 170, 169, 171, 0, 0, 0,
	228, 251, 267, 111, 0, 235, 261, 262, 0, 201,
	112, 131, 125, 196, 129, 172, 108, 141, 225, 149,
	156, 204, 265, 186, 210, 115, 250, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 153,
	264, 202, 128, 252, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 203, 206, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 229, 232,
	238, 239, 249, 256, 259, 135, 246, 260, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	227, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 285, 0, 0, 0, 0, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 0, 0, 0, 117, 0, 209, 187, 248,
	0, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 0, 0, 228, 251, 267, 111, 0,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 153, 264, 202, 128, 252, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	135, 246, 260,
}
var yyPact = [...]int{

	1660, -1000, -269, 1087, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1025, 864, -1000,
	-1000, -1000, -1000, -1000, -1000, 253, 12316, -20, 135, 0,
	17165, 133, 1900, 17510, -1000, 30, -1000, 18, 17510, 22,
	16820, -1000, -1000, -81, -102, -1000, 10246, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 819, 1012, 1020, 1028, 653,
	1079, -1000, 8854, 100, 100, 16475, 7474, -1000, -1000, 426,
	17510, 128, 17510, -142, 97, 97, 97, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 132, 17510,
	530, 530, 244, 529, 17510, 96, 530, 96, 96, 96,
	17510, -1000, 180, -1000, -1000, -1000, 17510, 530, 974, 307,
	63, 4968, -1000, 197, -1000, 4968, 37, 4968, -45, 1040,
	44, -13, -1000, 4968, -1000, -1000, -1000, -1000, -1000, -1000,
	107, -1000, -1000, 17510, 16123, 144, 270, -1000, -1000, -1000,
	-1000, -1000, -1000, 674, 533, -1000, 10246, 1630, 714, 714,
	-1000, -1000, 146, -1000, -1000, 11281, 11281, 11281, 11281, 11281,
	11281, 11281, 11281, 11281, 11281, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 714,
	177, -1000, 9901, 714, 714, 714, 714, 714, 714, 714,
	714, 10246, 714, 714, 714, 714, 714, 714, 714, 714,
	714, 714, 714, 714, 714, 714, 714, 714, -1000, -1000,
	1025, -1000, 864, -1000, -1000, -1000, 984, 10246, 10246, 1025,
	-1000, 949, 8854, -1000, -1000, 1061, -1000, -1000, -1000, -1000,
	379, 1066, -1000, 11971, 164, 15778, -1000, 14743, 17510, 768,
	686, -1000, -1000, 163, 781, 7116, -62, -1000, -1000, -1000,
	268, 14053, -1000, -1000, -1000, 966, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 696, 17510, -1000, 334,
	-1000, 530, 4968, 109, 530, 294, 530, 17510, 17510, 4968,
	4968, 4968, 52, 84, 77, 17510, 524, 776, 106, 17510,
	1007, 886, 17510, 530, 530, -1000, 6400, -1000, 4968, 307,
	-1000, 522, 10246, 4968, 4968, 4968, 17510, 4968, 4968, -1000,
	-1000, -1000, 342, -1000, -1000, -1000, -1000, 4968, 4968, -1000,
	1050, 300, -1000, -1000, -1000, -1000, 10246, 216, -1000, 885,
	-1000, 21, -1000, -1000, -1000, -1000, -1000, 1087, -1000, -1000,
	-1000, -118, -1000, -1000, 10246, 10246, 10246, 10246, 370, 218,
	11281, 406, 477, 11281, 11281, 11281, 11281, 11281, 11281, 11281,
	11281, 11281, 11281, 11281, 11281, 11281, 11281, 11281, 517, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000, 1078,
	572, 572, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 11626, 7819, 6400, 653, 678, 1025, 8854, 8854, 10246,
	10246, 9544, 9199, 8854, 973, 317, 533, 17510, -1000, -1000,
	10936, -1000, -1000, -1000, -1000, -1000, 554, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17510, 17510, 8854, 8854, 8854, 8854,
	8854, 1020, 653, 1061, -1000, 1072, 209, 754, 772, -1000,
	710, 1020, 13708, 751, -1000, 1061, -1000, -1000, -1000, 17510,
	-1000, -1000, 15433, -1000, -1000, 6042, 64, 17510, -1000, 739,
	868, -1000, -1000, -1000, 1009, 13018, 13363, 64, 745, 14743,
	17510, -1000, -1000, 14743, 17510, 5684, 6758, -62, -1000, 6758,
	761, -1000, -119, -104, 8164, 188, -1000, -1000, -1000, -1000,
	4610, 262, 643, 393, -56, -1000, -1000, -1000, 825, -1000,
	825, 825, 825, 825, -8, -8, -8, -8, -1000, -1000,
	-1000, -1000, -1000, 843, 842, -1000, 825, 825, 825, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 839, 839, 839,
	829, 829, 871, -1000, 17510, 4968, 1006, 4968, -1000, 85,
	-1000, -1000, -1000, 17510, 17510, 17510, 17510, 17510, 148, -1000,
	17510, 17510, 771, -1000, 17510, 4968, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 533, -1000, -1000, -1000, -1000, -1000,
	-1000, 17510, -1000, -1000, -1000, -1000, 17510, 307, 17510, 17510,
	533, -1000, 518, 17510, 17510, -1000, -1000, -1000, -1000, -1000,
	533, 218, 313, 230, -1000, -1000, 437, -1000, -1000, 1722,
	-1000, -1000, -1000, -1000, 406, 11281, 11281, 11281, 280, 1722,
	1792, 586, 390, 190, 351, 351, 192, 192, 192, 192,
	192, 758, 758, -1000, -1000, -1000, 554, -1000, -1000, -1000,
	554, 8854, 8854, 769, 714, 162, -1000, 819, -1000, -1000,
	1020, 669, 669, 668, 847, 320, 1048, 669, 274, 1046,
	669, 669, 8854, -1000, -1000, 287, -1000, 10246, 554, -1000,
	160, -1000, 547, 763, 762, 669, 554, 554, 669, 669,
	984, -1000, -1000, 934, 10246, 10246, 10246, -1000, -1000, -1000,
	984, 1024, -1000, 956, 955, 1037, 8854, 14743, 1061, -1000,
	-1000, -1000, 159, 747, 714, -1000, 17510, 14743, 14743, 14743,
	14743, 14743, -1000, 915, 901, -1000, 918, 916, 922, 17510,
	-1000, 671, 653, 13018, 185, 714, -1000, 15088, -1000, -1000,
	1037, 14743, 737, -1000, 737, -1000, 158, -1000, -1000, 761,
	-62, -66, -1000, -1000, -1000, -1000, 533, -1000, 541, 753,
	4252, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 838, 530,
	-1000, 993, 225, 233, 530, 992, -1000, -1000, -1000, 983,
	-1000, 331, -79, -1000, -1000, 491, -8, -8, -1000, -1000,
	188, 965, 188, 188, 188, 502, 502, -1000, -1000, -1000,
	-1000, 472, -1000, -1000, -1000, 470, -1000, 884, 17510, 4968,
	-1000, -1000, -1000, -1000, 290, 290, 234, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 62, 846,
	-1000, -1000, -1000, -1000, 14, 51, 102, -1000, 4968, -1000,
	300, 300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 280, 1722, 1741, -1000, 11281, 11281, -1000, -1000,
	669, 669, 8854, 6400, 1025, 984, -1000, -1000, 134, 517,
	134, 11281, 11281, -1000, 11281, 11281, -1000, -155, 656, 283,
	-1000, 10246, 713, -1000, 6400, -1000, 11281, 11281, -1000, -1000,
	-1000, -1000, -1000, -1000, 930, 533, 533, -1000, -1000, 17510,
	-1000, -1000, -1000, -1000, 1034, 10246, -1000, 748, -1000, 5326,
	883, 17510, 714, 1087, 13018, 17510, 756, -1000, 256, 868,
	833, 880, 1308, -1000, -1000, -1000, -1000, 899, -1000, 898,
	-1000, -1000, -1000, -1000, -1000, 653, -1000, 127, 126, 125,
	17510, -1000, 1025, 737, -1000, -1000, 201, -1000, -1000, -125,
	-115, -1000, -1000, -1000, 4610, -1000, 4610, 17510, 79, -1000,
	530, 530, -1000, -1000, -1000, 830, 874, 11281, -1000, -1000,
	-1000, 583, 188, 188, -1000, 392, -1000, -1000, -1000, 661,
	-1000, 652, 744, 619, 17510, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17510, -1000, -1000, -1000, -1000, -1000,
	17510, -160, 530, 17510, 17510, 17510, 17510, -1000, 307, 307,
	-1000, 11281, 1722, 1722, -1000, -1000, 554, -1000, 1020, -1000,
	554, 825, 825, -1000, 825, 829, -1000, 825, 11, 825,
	9, 554, 554, 1652, 1596, 1545, 1053, 714, -149, -1000,
	533, 10246, -1000, 876, 849, -1000, -1000, 1031, 1022, 533,
	-1000, -1000, 1000, 575, 667, -1000, -1000, 8509, 617, 154,
	615, -1000, 1025, 17510, 10246, -1000, -1000, 10246, 826, -1000,
	10246, -1000, -1000, -1000, 1025, 714, 714, 714, 615, 1020,
	-1000, -1000, -1000, -1000, 4252, -1000, 608, -1000, 825, -1000,
	-1000, -1000, 17510, -31, 1070, 1722, -1000, -1000, -1000, -1000,
	-1000, -8, 500, -8, 440, -1000, 439, 4968, -1000, -1000,
	-1000, -1000, 1002, -1000, 6400, -1000, -1000, 821, 866, -1000,
	-1000, -1000, -1000, 1722, -1000, 984, -1000, -1000, 142, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11281, 11281, 11281,
	11281, 11281, 1020, 496, 533, 11281, 11281, -1000, 10246, 10246,
	991, -1000, 714, -1000, 716, 17510, 17510, -1000, 17510, 1020,
	-1000, 533, 533, 17510, 533, 14398, 17510, 17510, 12661, -1000,
	194, 17510, -1000, 605, -1000, 224, -1000, -82, 188, -1000,
	188, 568, 566, -1000, 714, 722, -1000, 252, 17510, 17510,
	-1000, -1000, -1000, 547, 547, 547, 547, 59, 554, -1000,
	547, 547, 533, 674, 1059, -1000, 714, 1087, 149, -1000,
	-1000, -1000, 603, 573, -1000, 573, 573, 185, 194, -1000,
	530, 247, 493, -1000, 74, 17510, 364, 989, -1000, 985,
	-1000, -1000, -1000, -1000, -1000, 61, 6400, 4610, 565, -1000,
	-1000, -1000, -1000, -1000, 554, 66, -165, -1000, -1000, -1000,
	17510, 667, 17510, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	420, -1000, -1000, 17510, -1000, -1000, 438, -1000, -1000, 562,
	-1000, 17510, -1000, -1000, 846, -1000, 923, -158, -174, 542,
	-1000, -1000, 796, -1000, -1000, 61, 954, -160, -1000, 890,
	-1000, 17510, -1000, 58, -1000, -163, 558, 56, -172, 873,
	714, -178, 848, -1000, 1057, 10591, -1000, -1000, 1055, 196,
	196, 547, 554, -1000, -1000, -1000, 86, 394, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1316, 1314, 22, 71, 73, 1313, 1312, 1310, 108,
	101, 96, 1308, 1307, 1306, 1305, 1303, 1301, 1300, 1299,
	1298, 1292, 1290, 1289, 1288, 1287, 1286, 1282, 1281, 1280,
	1279, 1278, 107, 1277, 91, 1276, 1275, 1272, 1271, 1270,
	1269, 1268, 1262, 45, 216, 40, 61, 1261, 64, 48,
	1260, 58, 75, 63, 1258, 36, 1255, 1254, 90, 1253,
	1252, 60, 1250, 1249, 46, 1248, 78, 1246, 13, 35,
	1245, 1244, 1243, 1240, 79, 2063, 1236, 1233, 14, 1231,
	1230, 93, 1229, 68, 31, 15, 27, 25, 1227, 67,
	1225, 8, 1224, 70, 1223, 1222, 1218, 1217, 34, 1216,
	65, 1215, 52, 26, 1214, 7, 84, 30, 21, 9,
	1213, 1211, 17, 74, 57, 69, 1209, 1208, 439, 1207,
	1206, 1205, 54, 1202, 1198, 1197, 28, 1192, 98, 421,
	1191, 1188, 1187, 1186, 47, 1034, 2068, 29, 85, 1185,
	1184, 1182, 2792, 39, 56, 16, 1181, 1177, 1174, 33,
	109, 53, 484, 1171, 38, 1170, 1168, 1167, 1165, 1164,
	1151, 1147, 66, 1145, 1143, 1142, 19, 20, 1141, 1140,
	82, 18, 1139, 1138, 1137, 55, 72, 1136, 1135, 59,
	1134, 1133, 42, 1131, 1130, 1129, 1128, 1126, 32, 10,
	1124, 12, 1120, 11, 1118, 24, 1116, 5, 1109, 4,
	1108, 2, 0, 1106, 3, 50, 6, 1102, 1, 1101,
	1099, 1611, 1509, 92, 1098, 102,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 202,
	202, 202, 20, 3, 3, 3, 3, 2, 2, 8,
	4, 5, 5, 9, 9, 35, 35, 10, 11, 11,
	11, 11, 213, 213, 58, 58, 59, 59, 106, 106,
	12, 13, 13, 115, 115, 114, 114, 114, 116, 116,
	116, 116, 152, 152, 14, 14, 14, 14, 14, 14,
	14, 204, 204, 203, 201, 201, 200, 200, 199, 21,
	184, 186, 186, 185, 185, 185, 185, 176, 155, 155,
	155, 155, 158, 158, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 157, 159, 159,
	159, 159, 159, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 161, 161,
	161, 161, 161, 161, 161, 161, 175, 175, 162, 162,
	170, 170, 171, 171, 171, 168, 168, 169, 169, 172,
	172, 172, 164, 164, 165, 165, 173, 173, 166, 166,
	166, 167, 167, 167, 174, 174, 174, 174, 174, 163,
	163, 177, 177, 194, 194, 193, 193, 193, 183, 183,
	190, 190, 190, 190, 190, 180, 180, 180, 181, 181,
	179, 179, 182, 182, 192, 192, 191, 178, 178, 195,
	195, 195, 195, 207, 208, 206, 206, 206, 206, 206,
	187, 187, 187, 188, 188, 188, 189, 189, 189, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	198, 196, 196, 197, 197, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 123, 123, 125, 125, 121, 121, 124,
	124, 122, 122, 122, 126, 126, 126, 127, 127, 153,
	153, 153, 25, 25, 27, 27, 28, 29, 29, 147,
	147, 148, 148, 30, 31, 36, 36, 36, 36, 36,
	36, 38, 38, 38, 7, 7, 7, 7, 37, 37,
	37, 6, 6, 26, 26, 26, 26, 19, 214, 32,
	33, 33, 34, 34, 34, 40, 40, 40, 39, 39,
	39, 45, 45, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 44, 44, 46, 46, 46, 46,
	139, 139, 139, 138, 138, 50, 50, 51, 51, 52,
	52, 53, 53, 53, 90, 67, 67, 105, 105, 107,
	107, 54, 54, 54, 54, 55, 55, 56, 56, 57,
	57, 146, 146, 145, 145, 145, 144, 144, 60, 60,
	60, 62, 61, 61, 61, 61, 63, 63, 65, 65,
	64, 64, 66, 68, 68, 68, 68, 68, 69, 69,
	49, 49, 49, 49, 49, 49, 49, 49, 119, 119,
	71, 71, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 82, 82, 82, 82, 82, 82, 72, 72,
	72, 72, 72, 72, 72, 43, 43, 83, 83, 83,
	89, 84, 84, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 79, 79, 79,
	79, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	215, 215, 81, 80, 80, 80, 80, 80, 80, 80,
	41, 41, 41, 41, 41, 151, 151, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	94, 94, 42, 42, 92, 92, 93, 95, 95, 91,
	91, 91, 74, 74, 74, 74, 74, 74, 74, 74,
	76, 76, 76, 96, 96, 97, 97, 98, 98, 99,
	99, 100, 101, 101, 101, 102, 102, 102, 102, 103,
	103, 103, 73, 73, 73, 73, 104, 104, 104, 104,
	108, 108, 85, 85, 87, 87, 86, 88, 109, 109,
	112, 110, 110, 113, 113, 113, 113, 113, 111, 111,
	111, 141, 141, 141, 117, 117, 128, 128, 129, 129,
	118, 118, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 120, 120, 120, 131, 131, 131, 132, 132,
	133, 133, 133, 140, 140, 136, 136, 137, 137, 142,
	142, 143, 143, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 211, 212, 149,
	150, 150, 150,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 2, 4, 6, 6, 7, 4, 6, 5,
	8, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 4, 6, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 7, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 5, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 3, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -4, -211, 6,
	7, -35, 9, 10, 30, -21, 123, 124, 126, 125,
	159, 127, 152, 53, 173, 174, 176, 177, 178, 179,
	-38, 157, 158, 31, 32, 129, 34, 57, 8, 262,
	154, 153, 25, -210, 364, -34, 5, -98, 15, -3,
	-32, -214, -32, -32, -32, -32, -32, -184, -186, 57,
	96, -133, 133, 77, 254, 130, 131, 137, -136, -202,
	-135, 60, 61, 62, 272, 145, 304, 305, 173, 187,
	181, 208, 200, 273, 306, 146, 198, 201, 241, 143,
	307, 228, 235, 71, 176, 250, 308, 155, 196, 192,
	309, 281, 190, 27, 310, 237, 213, 311, 277, 239,
	191, 236, 129, 312, 148, 360, 141, 313, 214, 218,
	314, 242, 315, 316, 317, 185, 186, 318, 144, 244,
	212, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 320, 321, 322, 323, 210, 184, 206, 41, 220,
	219, 221, 240, 203, 324, 325, 326, 149, 327, 193,
	18, 328, 329, 330, 331, 332, 248, 158, 333, 161,
	334, 335, 336, 337, 338, 339, 238, 215, 217, 138,
	165, 234, 276, 340, 246, 189, 341, 150, 162, 157,
	249, 151, 342, 343, 344, 345, 346, 347, 348, 177,
	349, 350, 351, 352, 172, 243, 252, 40, 225, 353,
	183, 140, 354, 174, 169, 230, 204, 164, 355, 356,
	194, 195, 209, 182, 205, 175, 361, 166, 159, 357,
	251, 226, 278, 202, 199, 170, 358, 167, 168, 359,
	362, 231, 232, 171, 275, 247, 197, 227, -120, 133,
	254, 130, 232, 275, 131, 131, 132, 133, 254, 130,
	131, -64, -142, -202, -135, 133, 131, 114, 201, 241,
	123, 229, 237, -125, 238, 165, -153, 131, -121, 228,
	231, 232, 171, -202, 239, 243, 242, 233, -142, 175,
	-147, 180, -136, 178, -64, -36, 360, 127, -149, -149,
	230, 230, -149, -84, -49, -70, 80, -75, 29, 23,
	-74, -71, -91, -88, -89, 114, 115, 117, 116, 118,
	103, 104, 111, 81, 119, -79, -77, -78, -80, 64,
	63, 72, 65, 66, 67, 68, 73, 74, 75, -136,
	-142, -86, -211, 47, 48, 263, 264, 265, 266, 271,
	267, 83, 36, 253, 261, 260, 259, 257, 258, 255,
	256, 269, 270, 136, 254, 130, 109, 262, -202, -135,
	-5, -4, -211, 6, 20, 21, -102, 17, 16, -212,
	59, -40, -47, 42, 43, -48, 21, 35, 46, 44,
	-33, -46, 105, -49, -142, -118, 135, -118, 11, -58,
	-59, -64, -66, -142, -110, -152, 175, -113, 243, 242,
	-137, -111, -136, -134, 241, 201, 240, 128, 279, 79,
	22, 24, 223, 82, 114, 16, 83, 113, 263, 123,
	51, 280, 255, 256, 253, 265, 266, 254, 229, 29,
	10, 282, 25, 153, 21, 35, 107, 125, 86, 87,
	156, 23, 154, 75, 285, 19, 54, 11, 13, 286,
	287, 14, 136, 135, 98, 132, 49, 8, 119, 26,
	95, 45, 288, 28, 289, 290, 291, 292, 47, 96,
	17, 257, 258, 31, 293, 271, 160, 109, 52, 38,
	80, 294, 295, 73, 296, 76, 55, 77, 15, 50,
	297, 298, 299, 300, 97, 126, 262, 48, 301, 130,
	6, 268, 30, 152, 46, 302, 131, 85, 269, 270,
	134, 74, 5, 137, 32, 9, 53, 56, 259, 260,
	261, 36, 84, 12, 303, 78, -185, 96, -176, -202,
	-64, 132, -64, 262, -129, 136, -129, -129, 131, -64,
	-202, -202, 123, 125, 128, 55, 64, -22, -64, -128,
	136, -202, -128, -128, -128, -64, 120, -64, -202, 30,
	-126, 96, 12, 254, -202, 165, 131, 166, 133, -150,
	-211, -137, -180, 132, 33, 144, -150, 169, 170, -150,
	-124, -123, 235, 236, 230, 234, 12, 170, 230, 168,
	-150, 134, -136, -37, -136, 64, -7, -3, -10, -9,
	-11, 88, -149, -149, 58, 79, 77, 78, 95, -49,
	-72, 98, 80, 96, 97, 82, 100, 99, 110, 103,
	104, 105, 106, 107, 108, 109, 101, 102, 113, 88,
	89, 90, 91, 92, 93, 94, -119, -211, -89, -211,
	121, 122, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -211, 120, -2, -84, -4, -211, -211, -211,
	-211, -211, -211, -211, -211, -94, -49, -211, -215, -81,
	-211, -215, -81, -215, -81, -215, -211, -215, -81, -215,
	-81, -215, -215, -81, -211, -211, -211, -211, -211, -211,
	-211, -98, -3, -32, -103, 19, 31, -49, -99, -100,
	-49, -98, 38, -44, -46, -48, 42, 43, 70, 11,
	-139, -138, 22, -136, 64, 120, -65, 26, -64, -51,
	-52, -53, -54, -67, -90, -211, -64, -64, -58, -213,
	58, 11, 56, -213, 58, 120, 58, 175, -113, -152,
	-115, -114, 244, 246, 88, -141, -136, 64, 29, 30,
	59, 58, -64, -155, -158, -160, -159, -161, -156, -157,
	198, 199, 114, 202, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 30, 155, 194, 195, 196, 197,
	214, 215, 216, 217, 218, 219, 220, 221, 181, 200,
	273, 182, 183, 184, 185, 186, 187, 189, 190, 191,
	192, 193, -202, -150, 133, -202, 80, -202, -64, -64,
	-150, -150, -150, 167, 167, 131, 131, 172, -64, 64,
	58, 134, -58, 23, 55, -64, -202, -202, -143, -142,
	-134, -150, -126, 64, -49, -150, -150, -150, -64, -150,
	-150, -181, 11, 98, -150, -150, 11, -122, 11, 98,
	-49, -127, 96, 55, -148, 178, 212, 361, 362, 363,
	-49, -49, -49, -49, -82, 73, 80, 74, 75, -75,
	-83, -86, -89, 69, 98, 96, 97, 82, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -151, -202, 64, -202, -74, -74, -136,
	-45, 21, 35, -44, -137, -143, -134, -34, -212, -212,
	-98, -44, -44, -49, -49, -91, 64, -44, -91, 64,
	-44, -44, -39, 21, 35, -92, -93, 84, -91, -136,
	-142, -212, -75, -136, -136, -44, -45, -45, -44, -44,
	-102, -212, 9, 98, 58, 18, 58, -101, 24, 25,
	-102, -76, -136, 65, 68, -50, 58, 11, -48, -64,
	-138, 105, -143, -106, 161, -64, 30, 58, -60, -62,
	-61, -63, 45, 49, 51, 46, 47, 48, 52, -146,
	22, -51, -3, -211, -145, 161, -144, 22, -142, 64,
	-106, 56, -51, -64, -51, -66, -142, 105, -113, -115,
	58, 245, 247, 248, 55, 76, -49, -167, 113, -187,
	-188, -189, -137, 64, 65, -176, -177, -178, -190, 147,
	-195, 138, 140, 137, -179, 148, 132, 28, 59, -172,
	73, 80, -168, 226, -162, 57, -162, -162, -162, -162,
	-166, 201, -166, -166, -166, 57, 57, -162, -162, -162,
	-170, 57, -170, -170, -171, 57, -171, -140, 56, -64,
	-150, 23, -150, -130, 128, 125, 126, -198, 124, 223,
	201, 71, 29, 15, 263, 161, 278, -202, 162, -64,
	-64, -64, -64, -64, 128, 125, -64, -64, -64, -150,
	-64, -64, -126, -142, -142, 64, -64, -136, 73, 74,
	75, -83, -75, -75, -75, -43, 156, 79, -212, -212,
	-44, -44, -211, 120, -5, -102, -212, -212, 58, 56,
	22, 11, 11, -212, 11, 11, -212, -212, -44, -95,
	-93, 86, -49, -212, 120, -212, 58, 58, -212, -212,
	-212, -212, -212, -103, 40, -49, -49, -100, -103, -117,
	19, 11, 36, 36, -69, 12, -46, -51, -48, 120,
	-73, 30, 36, -3, -211, -211, -109, -112, -91, -52,
	-53, -53, -52, -53, 45, 45, 45, 50, 45, 50,
	45, -61, -142, -212, -212, -3, -68, 53, 135, 54,
	-211, -144, -69, -51, -69, -69, 120, -114, -116, 249,
	246, 252, -202, 64, 58, -189, 88, 57, -202, 28,
	-179, -179, -182, -202, -182, 28, -164, 29, 73, -169,
	227, 65, -166, -166, -167, 30, -167, -167, -167, -175,
	64, -175, 65, 65, 55, -136, -150, -149, -205, 143,
	139, 147, 148, 141, 60, 61, 62, 132, 28, 138,
	140, 161, 137, -205, -131, -132, 134, 22, 132, 28,
	161, -204, 56, 167, 223, 167, 134, -150, -122, -122,
	-43, 79, -75, -75, -212, -212, -45, -137, -98, -103,
	-154, 114, 198, 155, 196, 192, 212, 203, 225, 194,
	226, -151, -154, -75, -75, -75, -75, 272, -98, 87,
	-49, 85, -137, -75, -75, 41, -64, -96, 13, -49,
	105, -108, 55, -109, -85, -87, -86, -211, -104, -136,
	-107, -136, -69, 58, 88, -56, -55, 55, 56, -57,
	55, -55, 45, 45, -212, 132, 132, 132, -107, -98,
	-69, 246, 250, 251, -188, -189, -192, -191, -136, -195,
	-182, -182, 57, -165, 55, -75, 59, -167, -167, -202,
	114, 59, 58, 59, 58, 59, 58, -64, -149, -149,
	-64, -149, -136, -201, 275, -203, -202, -136, -136, -136,
	-64, -126, -126, -75, -212, -102, -212, -162, -162, -162,
	-171, -162, 186, -162, 186, -212, -212, 19, 19, 19,
	19, -211, -42, 268, -49, 58, 58, -97, 14, 16,
	27, -108, 58, -212, -212, 58, 120, -212, 58, -98,
	-112, -49, -49, 57, -49, -211, -211, -211, -212, -102,
	59, 58, -162, -105, -136, -173, 223, 9, -166, 64,
	-166, 65, 65, -150, 26, -200, -199, -137, 57, 56,
	-103, -166, -202, -75, -75, -75, -75, -75, -102, 64,
	-75, -75, -49, -84, 28, -87, 36, -3, -136, -136,
	-136, -102, -105, -105, -212, -105, -105, -145, -194, -193,
	56, 142, 71, -191, 59, 58, -174, 138, 28, 137,
	-78, -167, -167, 59, 59, -211, 58, 88, -105, -64,
	-212, -212, -212, -212, -41, 98, 275, -212, -212, -212,
	9, -85, 120, 59, -212, -212, -212, -68, -193, -202,
	-183, 88, 64, 150, -136, -163, 71, 28, 28, -196,
	-197, 161, -199, -189, 59, -212, 273, 52, 276, -109,
	-136, 65, -64, 64, -212, 58, -136, -204, 41, 274,
	277, 57, -197, 36, -201, 41, -105, 163, 275, 59,
	164, 276, -207, -208, 55, -211, 277, -208, 55, 10,
	9, -75, 160, -206, 151, 146, 149, 30, -206, -212,
	-212, 145, 29, 73,
}
var yyDef = [...]int{

	28, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 617, 0, 358,
	358, 358, 358, 358, 358, 0, 690, 682, 0, 0,
	0, 0, -2, 323, 324, 0, 326, -2, 0, 0,
	335, 999, 999, 0, 0, 999, 0, 997, 45, 46,
	341, 342, 343, 1, 3, 0, 362, 625, 0, 0,
	-2, 360, 0, 670, 670, 0, 0, 74, 75, 0,
	0, 0, 985, 0, 668, 668, 668, 691, 692, 695,
	696, 29, 30, 31, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 0, 0,
	0, 0, 0, 0, 0, 666, 0, 666, 666, 666,
	0, 274, 440, 699, 700, 985, 0, 0, 0, 314,
	0, 1000, 286, 0, 288, 1000, 0, 1000, 0, 295,
	0, 0, 301, 1000, 306, 320, 321, 308, 322, 325,
	0, 330, 333, 0, 348, 0, 863, 340, 353, 354,
	999, 999, 357, 32, 491, 450, 0, 456, 458, 0,
	493, 494, 495, 496, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 523, 524, 525, 526, 602,
	603, 604, 605, 606, 607, 608, 609, 460, 461, 599,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 560, 560, 560, 560, 560, 560, 560,
	560, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	617, 41, 0, 358, 363, 364, 629, 0, 0, 617,
	998, 0, 0, -2, -2, 374, 380, 381, 382, 383,
	359, 0, 386, 390, 0, 0, 671, 0, 0, 0,
	0, 54, 56, 440, 60, 0, 973, 651, -2, -2,
	0, 0, 697, 698, -2, 835, -2, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 0, 0, 93, 0,
	91, 0, 1000, 0, 0, 0, 0, 0, 0, 1000,
	1000, 1000, 0, 0, 0, 0, 683, 265, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 275, 1000, 314,
	278, 0, 0, 1000, 1000, 1000, 0, 1000, 1000, 285,
	1001, 1002, 0, 195, 196, 197, 289, 1000, 1000, 291,
	0, 311, 309, 310, 303, 304, 0, 317, 298, 299,
	302, 331, 334, 351, 349, 350, 352, 344, 345, 346,
	347, 0, 355, 356, 0, 0, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 478,
	479, 480, 481, 482, 483, 484, 457, 0, 471, 0,
	0, 0, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 0, 371, 0, 0, 0, 617, 0, 0, 0,
	0, 0, 0, 0, 368, 0, 591, 0, 544, 552,
	0, 545, 553, 546, 554, 547, 0, 548, 555, 549,
	556, 550, 551, 557, 0, 0, 0, 371, 371, 0,
	0, 625, 0, 373, 33, 0, 0, 626, 618, 619,
	622, 625, 0, 395, 384, 375, 378, 379, 361, 0,
	387, 391, 0, 393, 394, 0, 58, 0, 439, 0,
	397, 399, 400, 401, 421, 0, 423, -2, 0, 0,
	0, 52, 53, 0, 0, 0, 0, 973, 657, 0,
	62, 63, 0, 0, 0, 171, 661, 662, 663, 659,
	220, 0, 0, 159, 155, 99, 100, 101, 148, 103,
	148, 148, 148, 148, 168, 168, 168, 168, 131, 132,
	133, 134, 135, 0, 0, 118, 148, 148, 148, 122,
	138, 139, 140, 141, 142, 143, 144, 145, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 150, 150, 150,
	152, 152, 693, 77, 0, 1000, 0, 1000, 89, 0,
	234, 236, 237, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 268, 667, 0, 1000, 271, 272, 441, 701,
	702, 276, 277, 315, 316, 279, 280, 281, 282, 283,
	284, 0, 198, 199, 290, 294, 0, 314, 0, 0,
	296, 297, 0, 0, 0, 332, 336, 337, 338, 339,
	492, 451, 452, 453, 455, 472, 0, 474, 476, 462,
	463, 487, 488, 489, 0, 0, 0, 0, 485, 467,
	0, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 512, 575, 576, 0, 510, 511, 522,
	0, 0, 0, 372, 600, 0, -2, 0, 490, 646,
	625, 0, 0, 0, 0, 495, 602, 0, 495, 602,
	0, 0, 0, 369, 370, 597, 594, 0, 0, 599,
	0, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 42, 630, 0, 0, 0, 0, 621, 623, 624,
	629, 0, 610, 0, 0, 448, 0, 0, 376, 39,
	392, 388, 0, 0, 0, 438, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 431, 0, 0, 0, 0,
	422, 0, 0, 0, 443, 917, 424, 0, 426, 427,
	448, 0, 448, 55, 448, 57, 0, 442, 652, 61,
	0, 0, 66, 67, 653, 654, 655, 656, 0, 90,
	221, 223, 226, 227, 228, 94, 95, 96, 0, 0,
	208, 0, 0, 202, 202, 0, 200, 201, 92, 162,
	160, 0, 157, 156, 102, 0, 168, 168, 125, 126,
	171, 0, 171, 171, 171, 0, 0, 119, 120, 121,
	113, 0, 114, 115, 116, 0, 117, 0, 0, 1000,
	79, 669, 80, 999, 0, 0, 685, 235, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 0, 81,
	239, 241, 240, 244, 0, 0, 0, 266, 1000, 270,
	311, 311, 293, 312, 313, 318, 300, 328, 473, 475,
	477, 464, 485, 468, 0, 465, 0, 0, 459, 527,
	0, 0, 371, 0, 617, 629, 531, 532, 0, 0,
	0, 0, 0, 568, 0, 0, 569, 0, 617, 0,
	595, 0, 0, 543, 0, 562, 0, 0, 563, 564,
	565, 566, 567, 35, 0, 627, 628, 620, 34, 0,
	664, 665, 611, 612, 613, 0, 385, 396, 377, 0,
	640, 0, 0, 633, 0, 0, 448, 648, 0, 398,
	417, 419, 0, 414, 429, 430, 432, 0, 434, 0,
	436, 437, 402, 403, 404, 0, 405, 0, 0, 0,
	0, 425, 617, 448, 50, 51, 0, 64, 65, 0,
	0, 71, 172, 173, 0, 224, 0, 0, 0, 190,
	202, 202, 193, 203, 194, 0, 164, 0, 161, 98,
	158, 0, 171, 171, 127, 0, 128, 129, 130, 0,
	146, 0, 0, 0, 0, 694, 78, 229, 999, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 999, 0, 999, 686, 687, 688, 689,
	0, 84, 0, 0, 0, 0, 0, 269, 314, 314,
	466, 0, 486, 469, 528, 529, 0, 601, 625, 37,
	0, 148, 148, 580, 148, 152, 583, 148, 585, 148,
	588, 0, 0, 0, 0, 0, 0, 0, 592, 542,
	598, 0, 600, 0, 0, 631, 36, 615, 0, 449,
	389, 43, 0, 640, 632, 642, 644, 0, 0, 636,
	0, 409, 617, 0, 0, 411, 418, 0, 0, 412,
	0, 413, 433, 435, -2, 0, 0, 0, 0, 625,
	49, 68, 69, 70, 222, 225, 0, 204, 148, 207,
	191, 192, 0, 166, 0, 163, 149, 123, 124, 169,
	170, 168, 0, 168, 0, 153, 0, 1000, 230, 231,
	232, 233, 0, 238, 0, 82, 83, 0, 0, 243,
	267, 287, 292, 470, 530, 629, 533, 577, 168, 581,
	582, 584, 586, 587, 589, 535, 534, 0, 0, 0,
	0, 0, 625, 0, 596, 0, 0, 40, 0, 0,
	0, 44, 0, 645, 0, 0, 0, 59, 0, 625,
	649, 650, 415, 0, 420, 0, 0, 0, 423, 48,
	182, 0, 206, 0, 407, 174, 167, 0, 171, 147,
	171, 0, 0, 76, 0, 85, 86, 0, 0, 0,
	38, 578, 579, 0, 0, 0, 0, 570, 0, 593,
	0, 0, 616, 614, 0, 643, 0, 635, 638, 637,
	410, 47, 0, 0, 445, 0, 0, 443, 181, 183,
	0, 188, 0, 205, 0, 0, 179, 0, 176, 178,
	165, 136, 137, 151, 154, 0, 0, 0, 0, 245,
	536, 538, 537, 539, 0, 0, 0, 541, 558, 559,
	0, 634, 0, 416, 444, 446, 447, 406, 184, 185,
	0, 189, 187, 0, 408, 97, 0, 175, 177, 0,
	261, 0, 87, 88, 81, 540, 0, 0, 0, 641,
	639, 186, 0, 180, 260, 0, 0, 84, 571, 0,
	574, 0, 262, 0, 242, 572, 0, 0, 0, 209,
	0, 0, 210, 211, 0, 0, 573, 212, 0, 0,
	0, 0, 0, 213, 215, 216, 0, 0, 214, 263,
	264, 217, 218, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 364,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:376
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:396
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:402
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:441
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:463
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:492
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.str = InsertStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.str = ReplaceStr
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:542
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:546
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:556
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:561
		{
			yyVAL.partitions = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:565
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:591
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.str = RepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyVAL.str = ReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyVAL.str = ReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.str = Serializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:650
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:667
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:672
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:687
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:715
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:752
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:758
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.literal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1015
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1021
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1092
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1101
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1135
		{
			yyVAL.literal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1283
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1287
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1291
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1295
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1301
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1321
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1334
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1350
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1390
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1395
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1502
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1518
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1522
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1538
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1554
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1559
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1640
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1661
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1666
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1688
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1701
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1705
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = "extended "
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = "full "
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
			yyVAL.showFilter = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.str = SessionStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = GlobalStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &Begin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.statement = &Commit{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Rollback{}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1854
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1857
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.str = JSONStr
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = TreeStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = VitessStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = TraditionalStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = AnalyzeStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1946
		{
			yyVAL.statement = &OtherRead{}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			setAllowComments(yylex, true)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.bytes2 = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1998
		{
			yyVAL.str = UnionStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.str = UnionAllStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = UnionDistinctStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = SQLCacheStr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = DistinctStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = DistinctStr
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2037
		{
			yyVAL.selectExprs = nil
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2046
		{
			yyVAL.strs = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2058
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2062
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = SQLCacheStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = DistinctStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = DistinctStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = StraightJoinHint
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2116
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2121
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2129
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2141
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2145
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2189
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2222
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2226
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2230
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2240
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2246
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2252
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2257
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2262
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = JoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = JoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.str = StraightJoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = LeftJoinStr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = LeftJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = RightJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = RightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = NaturalJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2325
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2339
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2355
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2360
		{
			yyVAL.indexHints = nil
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2364
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2372
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2376
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = IsNullStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = IsNotNullStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = IsTrueStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = IsNotTrueStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = IsFalseStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = IsNotFalseStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = EqualStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = LessThanStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = GreaterThanStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = LessEqualStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = GreaterEqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = NotEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2537
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2560
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2566
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2576
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2712
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = ""
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = BooleanModeStr
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 573:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2942
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2946
		{
			yyVAL.str = QueryExpansionStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.str = string("")
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3046
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3061
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3065
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3069
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3083
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3091
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = &NullVal{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3127
		{
			yyVAL.exprs = nil
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3131
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3145
		{
			yyVAL.orderBy = nil
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3149
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3170
		{
			yyVAL.str = AscScr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.str = AscScr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.str = DescScr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3183
		{
			yyVAL.limit = nil
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3187
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3191
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3195
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3200
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3204
		{
			yyVAL.str = ForUpdateStr
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3208
		{
			yyVAL.str = ShareModeStr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3221
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3229
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3233
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3247
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3251
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3256
		{
			yyVAL.updateExprs = nil
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3260
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3280
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3286
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3306
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3312
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3322
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3328
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("on"))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("off"))}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3336
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3344
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3352
		{
			yyVAL.bytes = []byte("charset")
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.expr = &Default{}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3376
		{
			yyVAL.byt = 0
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.byt = 1
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3381
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3383
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3386
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.str = IgnoreStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3414
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3418
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3424
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3432
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3452
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3454
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3458
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3462
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3806
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3815
		{
			decNesting(yylex)
		}
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3820
		{
			skipToEnd(yylex)
		}
	case 1000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3825
		{
			skipToEnd(yylex)
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3829
		{
			skipToEnd(yylex)
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3833
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const CASCADED = 57523
const DEFINER = 57524
const OPTION = 57525
const SQL = 57526
const UNDEFINED = 57527
const SEQUENCE = 57528
const MERGE = 57529
const TEMPTABLE = 57530
const INVOKER = 57531
const LOCAL = 57532
const SECURITY = 57533
const BEGIN = 57534
const START = 57535
const TRANSACTION = 57536
const COMMIT = 57537
const ROLLBACK = 57538
const SAVEPOINT = 57539
const RELEASE = 57540
const WORK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const BIGINT = 57548
const INTNUM = 57549
const REAL = 57550
const DOUBLE = 57551
const FLOAT_TYPE = 57552
const DECIMAL = 57553
const NUMERIC = 57554
const TIME = 57555
const TIMESTAMP = 57556
const DATETIME = 57557
const YEAR = 57558
const CHAR = 57559
const VARCHAR = 57560
const BOOL = 57561
const CHARACTER = 57562
const VARBINARY = 57563
const NCHAR = 57564
const TEXT = 57565
const TINYTEXT = 57566
const MEDIUMTEXT = 57567
const LONGTEXT = 57568
const BLOB = 57569
const TINYBLOB = 57570
const MEDIUMBLOB = 57571
const LONGBLOB = 57572
const JSON = 57573
const ENUM = 57574
const GEOMETRY = 57575
const POINT = 57576
const LINESTRING = 57577
const POLYGON = 57578
const GEOMETRYCOLLECTION = 57579
const MULTIPOINT = 57580
const MULTILINESTRING = 57581
const MULTIPOLYGON = 57582
const NULLX = 57583
const AUTO_INCREMENT = 57584
const APPROXNUM = 57585
const SIGNED = 57586
const UNSIGNED = 57587
const ZEROFILL = 57588
const COLLATION = 57589
const DATABASES = 57590
const SCHEMAS = 57591
const TABLES = 57592
const VITESS_METADATA = 57593
const VSCHEMA = 57594
const FULL = 57595
const PROCESSLIST = 57596
const COLUMNS = 57597
const FIELDS = 57598
const ENGINES = 57599
const PLUGINS = 57600
const EXTENDED = 57601
const KEYSPACES = 57602
const VITESS_KEYSPACES = 57603
const VITESS_SHARDS = 57604
const VITESS_TABLETS = 57605
const NAMES = 57606
const CHARSET = 57607
const GLOBAL = 57608
const SESSION = 57609
const ISOLATION = 57610
const LEVEL = 57611
const READ = 57612
const WRITE = 57613
const ONLY = 57614
const REPEATABLE = 57615
const COMMITTED = 57616
const UNCOMMITTED = 57617
const SERIALIZABLE = 57618
const CURRENT_TIMESTAMP = 57619
const DATABASE = 57620
const CURRENT_DATE = 57621
const CURRENT_TIME = 57622
const LOCALTIME = 57623
const LOCALTIMESTAMP = 57624
const CURRENT_USER = 57625
const UTC_DATE = 57626
const UTC_TIME = 57627
const UTC_TIMESTAMP = 57628
const REPLACE = 57629
const CONVERT = 57630
const CAST = 57631
const SUBSTR = 57632
const SUBSTRING = 57633
const GROUP_CONCAT = 57634
const SEPARATOR = 57635
const TIMESTAMPADD = 57636
const TIMESTAMPDIFF = 57637
const MATCH = 57638
const AGAINST = 57639
const BOOLEAN = 57640
const LANGUAGE = 57641
const WITH = 57642
const QUERY = 57643
const EXPANSION = 57644
const UNUSED = 57645
const ARRAY = 57646
const CUME_DIST = 57647
const DESCRIPTION = 57648
const DENSE_RANK = 57649
const EMPTY = 57650
const EXCEPT = 57651
const FIRST_VALUE = 57652
const GROUPING = 57653
const GROUPS = 57654
const JSON_TABLE = 57655
const LAG = 57656
const LAST_VALUE = 57657
const LATERAL = 57658
const LEAD = 57659
const MEMBER = 57660
const NTH_VALUE = 57661
const NTILE = 57662
const OF = 57663
const OVER = 57664
const PERCENT_RANK = 57665
const RANK = 57666
const RECURSIVE = 57667
const ROW_NUMBER = 57668
const SYSTEM = 57669
const WINDOW = 57670
const ACTIVE = 57671
const ADMIN = 57672
const BUCKETS = 57673
const CLONE = 57674
const COMPONENT = 57675
const DEFINITION = 57676
const ENFORCED = 57677
const EXCLUDE = 57678
const FOLLOWING = 57679
const GEOMCOLLECTION = 57680
const GET_MASTER_PUBLIC_KEY = 57681
const HISTOGRAM = 57682
const HISTORY = 57683
const INACTIVE = 57684
const INVISIBLE = 57685
const LOCKED = 57686
const MASTER_COMPRESSION_ALGORITHMS = 57687
const MASTER_PUBLIC_KEY_PATH = 57688
const MASTER_TLS_CIPHERSUITES = 57689
const MASTER_ZSTD_COMPRESSION_LEVEL = 57690
const NESTED = 57691
const NETWORK_NAMESPACE = 57692
const NOWAIT = 57693
const NULLS = 57694
const OJ = 57695
const OLD = 57696
const OPTIONAL = 57697
const ORDINALITY = 57698
const ORGANIZATION = 57699
const OTHERS = 57700
const PATH = 57701
const PERSIST = 57702
const PERSIST_ONLY = 57703
const PRECEDING = 57704
const PRIVILEGE_CHECKS_USER = 57705
const PROCESS = 57706
const RANDOM = 57707
const REFERENCE = 57708
const REQUIRE_ROW_FORMAT = 57709
const RESOURCE = 57710
const RESPECT = 57711
const RESTART = 57712
const RETAIN = 57713
const REUSE = 57714
const ROLE = 57715
const SECONDARY = 57716
const SECONDARY_ENGINE = 57717
const SECONDARY_LOAD = 57718
const SECONDARY_UNLOAD = 57719
const SKIP = 57720
const SRID = 57721
const THREAD_PRIORITY = 57722
const TIES = 57723
const UNBOUNDED = 57724
const VCPU = 57725
const VISIBLE = 57726
const FORMAT = 57727
const TREE = 57728
const VITESS = 57729
const TRADITIONAL = 57730

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPTABLE",
	"INVOKER",
	"LOCAL",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	155, 791,
	-2, 85,
	-1, 41,
	136, 108,
	237, 108,
	-2, 102,
	-1, 48,
	34, 345,
	155, 345,
	167, 345,
	195, 359,
	196, 359,
	-2, 347,
	-1, 53,
	157, 369,
	-2, 367,
	-1, 77,
	55, 405,
	-2, 413,
	-1, 101,
	136, 108,
	237, 108,
	-2, 103,
	-1, 447,
	143, 801,
	-2, 797,
	-1, 448,
	143, 802,
	-2, 798,
	-1, 463,
	55, 406,
	-2, 418,
	-1, 464,
	55, 407,
	-2, 419,
	-1, 484,
	111, 1087,
	-2, 78,
	-1, 485,
	111, 986,
	-2, 79,
	-1, 490,
	111, 944,
	-2, 762,
	-1, 492,
	111, 1027,
	-2, 764,
	-1, 645,
	136, 108,
	237, 108,
	-2, 271,
	-1, 1031,
	143, 804,
	-2, 800,
	-1, 1118,
	73, 60,
	81, 60,
	-2, 64,
	-1, 1506,
	5, 659,
	18, 659,
	20, 659,
	32, 659,
	82, 659,
	-2, 444,
	-1, 1716,
	45, 733,
	-2, 731,
}

const yyPrivate = 57344

const yyLast = 19876

var yyAct = [...]int{
	447, 1814, 1716, 1558, 1767, 1803, 1427, 1696, 1348, 1660,
	679, 391, 1328, 1140, 1485, 1643, 1136, 76, 3, 1191,
	406, 1112, 1486, 759, 799, 1329, 1482, 1185, 659, 420,
	919, 1379, 622, 1402, 806, 1403, 909, 1149, 1492, 1447,
	1620, 1139, 625, 1264, 111, 952, 1109, 123, 1498, 358,
	123, 489, 1025, 1018, 1193, 370, 1395, 123, 844, 971,
	377, 1154, 619, 1091, 74, 1114, 1098, 837, 809, 1315,
	832, 465, 804, 1051, 450, 393, 995, 456, 1214, 827,
	1074, 29, 626, 843, 826, 370, 382, 841, 370, 123,
	370, 1181, 1120, 618, 816, 486, 834, 72, 966, 981,
	77, 389, 102, 668, 103, 772, 71, 1713, 123, 123,
	877, 8, 7, 1543, 6, 1662, 123, 121, 651, 378,
	1630, 123, 381, 773, 1807, 1194, 1764, 373, 1801, 1743,
	73, 1793, 1559, 79, 80, 81, 82, 83, 84, 1763,
	1464, 1742, 1588, 634, 1516, 94, 1196, 31, 471, 475,
	65, 35, 36, 432, 451, 438, 439, 436, 437, 624,
	435, 434, 433, 1517, 1518, 1417, 1131, 1132, 1130, 1416,
	440, 441, 483, 692, 99, 116, 117, 118, 639, 640,
	845, 380, 846, 685, 686, 379, 648, 112, 113, 114,
	1365, 654, 1028, 1364, 677, 1387, 1366, 687, 99, 91,
	1170, 688, 685, 686, 636, 95, 635, 1164, 96, 97,
	1623, 1745, 931, 1429, 1171, 1579, 865, 1195, 112, 113,
	114, 64, 1577, 368, 366, 980, 930, 1707, 721, 720,
	730, 731, 723, 724, 725, 726, 727, 728, 729, 722,
	372, 1413, 732, 1202, 1778, 638, 941, 99, 107, 691,
	108, 1799, 1552, 1779, 982, 983, 984, 878, 665, 1553,
	667, 1204, 912, 1205, 1206, 680, 681, 690, 682, 646,
	1432, 1431, 1244, 938, 1792, 1780, 1726, 1697, 1820, 112,
	113, 114, 1430, 1092, 1236, 675, 1818, 1189, 1791, 1189,
	929, 621, 664, 666, 1523, 942, 891, 894, 895, 896,
	897, 898, 899, 1189, 900, 901, 902, 903, 904, 879,
	880, 881, 882, 863, 864, 892, 98, 866, 650, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 883,
	884, 885, 886, 887, 888, 889, 890, 631, 123, 657,
	98, 940, 663, 926, 923, 924, 637, 922, 1349, 1351,
	370, 477, 1433, 337, 946, 695, 1412, 1509, 1508, 370,
	1507, 632, 1542, 109, 1158, 1224, 115, 1720, 1243, 1197,
	1448, 1242, 1171, 370, 370, 1604, 1283, 939, 744, 745,
	933, 936, 1415, 1686, 1515, 1320, 693, 1741, 1293, 98,
	1233, 1272, 701, 1126, 893, 820, 1235, 1158, 1137, 662,
	757, 655, 1280, 732, 1746, 1361, 674, 722, 656, 972,
	732, 1450, 112, 113, 114, 112, 113, 114, 676, 1220,
	1221, 1222, 967, 1708, 1816, 1070, 661, 1817, 709, 1815,
	669, 712, 649, 928, 1699, 920, 1350, 87, 1496, 1203,
	706, 707, 1758, 1002, 712, 66, 915, 670, 671, 672,
	913, 112, 113, 114, 644, 927, 847, 1000, 1001, 999,
	705, 1452, 1466, 1456, 742, 1451, 338, 1449, 683, 1534,
	797, 1161, 1454, 1052, 370, 341, 88, 123, 1162, 123,
	123, 1453, 370, 351, 1794, 796, 704, 702, 370, 703,
	1157, 1223, 486, 1821, 1455, 1457, 1228, 1225, 1216, 1226,
	1219, 932, 1215, 760, 711, 709, 1217, 1218, 744, 745,
	795, 1795, 1385, 473, 1687, 1685, 934, 349, 973, 101,
	1227, 712, 1234, 1157, 1232, 825, 356, 1052, 641, 1290,
	642, 968, 660, 643, 744, 745, 1729, 810, 1072, 775,
	777, 779, 781, 783, 785, 786, 813, 824, 1785, 1629,
	836, 652, 653, 694, 798, 630, 1628, 776, 778, 1822,
	782, 784, 1548, 787, 1555, 1399, 339, 723, 724, 725,
	726, 727, 728, 729, 722, 1786, 383, 732, 721, 720,
	730, 731, 723, 724, 725, 726, 727, 728, 729, 722,
	64, 1472, 732, 353, 342, 343, 1398, 354, 355, 362,
	1071, 1200, 998, 346, 348, 359, 344, 345, 364, 363,
	1797, 340, 361, 360, 1796, 1278, 460, 1787, 123, 710,
	711, 709, 905, 1277, 1775, 990, 992, 993, 1756, 460,
	645, 123, 991, 916, 917, 1265, 1656, 712, 1626, 1473,
	935, 370, 710, 711, 709, 123, 1592, 1549, 1591, 633,
	123, 1474, 1409, 123, 951, 808, 123, 1396, 370, 965,
	712, 957, 842, 370, 370, 370, 123, 370, 370, 721,
	720, 730, 731, 723, 724, 725, 726, 727, 728, 729,
	722, 370, 370, 732, 448, 1683, 1798, 956, 855, 721,
	720, 730, 731, 723, 724, 725, 726, 727, 728, 729,
	722, 914, 1692, 732, 1075, 1076, 1691, 954, 725, 726,
	727, 728, 729, 722, 1640, 943, 732, 710, 711, 709,
	836, 1683, 1739, 950, 1411, 1468, 1257, 1258, 1259, 1735,
	460, 124, 1159, 1019, 124, 712, 962, 1683, 1733, 371,
	1483, 124, 1021, 1495, 975, 996, 947, 481, 636, 1495,
	635, 1683, 460, 710, 711, 709, 370, 720, 730, 731,
	723, 724, 725, 726, 727, 728, 729, 722, 1029, 371,
	732, 712, 371, 124, 371, 1683, 1721, 1040, 1043, 710,
	711, 709, 974, 1053, 112, 113, 114, 1599, 1020, 370,
	370, 997, 124, 124, 977, 1035, 73, 712, 1683, 1682,
	124, 1400, 1279, 1030, 708, 124, 908, 1619, 370, 1031,
	112, 113, 114, 1094, 1421, 123, 1606, 460, 370, 710,
	711, 709, 123, 1316, 123, 760, 112, 113, 114, 1698,
	1368, 1029, 123, 123, 123, 937, 1538, 712, 476, 1095,
	370, 1602, 460, 370, 1061, 1062, 1022, 1023, 1369, 1110,
	486, 1129, 955, 486, 370, 370, 1032, 959, 960, 961,
	75, 963, 964, 1095, 1141, 1122, 1089, 112, 113, 114,
	1296, 1212, 1031, 460, 1065, 969, 970, 1540, 1539, 710,
	711, 709, 1085, 1295, 1077, 1086, 64, 1156, 112, 113,
	114, 1095, 1090, 1083, 1093, 1536, 1537, 712, 1165, 713,
	1166, 1167, 1168, 1169, 1118, 1536, 1535, 1056, 1122, 370,
	1083, 460, 1087, 1095, 460, 31, 1177, 1178, 1179, 1180,
	1211, 478, 479, 31, 1128, 1083, 1123, 1127, 1124, 453,
	1119, 31, 1187, 1316, 1125, 383, 708, 460, 1188, 123,
	123, 123, 123, 123, 770, 1084, 123, 123, 1144, 1210,
	123, 370, 908, 907, 1036, 1037, 1323, 1355, 1042, 1045,
	1046, 854, 853, 1121, 1073, 1121, 945, 123, 839, 1123,
	1667, 802, 805, 123, 123, 123, 1405, 1121, 1324, 123,
	370, 1776, 1213, 1060, 459, 1645, 1063, 1064, 1639, 64,
	1199, 1198, 1631, 1183, 1184, 1611, 910, 64, 1186, 1554,
	1250, 1495, 1229, 64, 1254, 64, 1527, 906, 1373, 1237,
	1238, 1239, 1240, 1241, 1083, 1182, 1245, 1246, 1176, 1175,
	1247, 89, 124, 409, 408, 411, 412, 413, 414, 996,
	1404, 629, 410, 415, 371, 1499, 1500, 1249, 1428, 1632,
	1633, 1634, 1646, 371, 1209, 1253, 1809, 1635, 1804, 1255,
	1529, 1502, 1483, 1418, 978, 949, 1505, 371, 371, 1100,
	1103, 1104, 1105, 1101, 1504, 1102, 1106, 1340, 1338, 1172,
	1173, 1174, 1341, 1339, 1405, 997, 1260, 1100, 1103, 1104,
	1105, 1101, 1337, 1102, 1106, 123, 1336, 1499, 1500, 1782,
	1302, 1636, 1637, 1762, 1475, 1305, 123, 123, 123, 123,
	123, 1342, 1309, 1104, 1105, 807, 1330, 1273, 123, 1325,
	1760, 1603, 123, 1274, 451, 1314, 123, 1313, 1751, 1748,
	1784, 123, 123, 1766, 1289, 123, 123, 123, 1768, 1347,
	1774, 1318, 1773, 1303, 1717, 1715, 944, 449, 1367, 1410,
	370, 1304, 1048, 1404, 1391, 1248, 1308, 800, 918, 1374,
	1141, 93, 1317, 1370, 1380, 1380, 1049, 1319, 371, 801,
	1321, 124, 852, 124, 124, 658, 371, 1356, 1557, 1384,
	105, 1358, 371, 1343, 1731, 958, 1332, 1333, 954, 1335,
	1331, 1353, 1354, 1334, 1730, 1665, 1381, 1390, 1362, 1392,
	1393, 1394, 1357, 1359, 106, 1407, 1382, 119, 1375, 1597,
	1075, 1076, 1207, 976, 1068, 948, 1693, 1372, 1108, 457,
	370, 1420, 75, 1376, 1377, 1378, 454, 455, 1789, 1269,
	1270, 1312, 985, 986, 987, 988, 1408, 1788, 1771, 1311,
	1752, 123, 1596, 1397, 458, 1595, 1478, 370, 1316, 689,
	1287, 716, 1284, 719, 1811, 1810, 1811, 1406, 370, 733,
	734, 735, 736, 737, 738, 739, 1281, 717, 718, 715,
	721, 720, 730, 731, 723, 724, 725, 726, 727, 728,
	729, 722, 821, 370, 732, 1422, 814, 1038, 1039, 1019,
	1718, 1624, 1069, 1444, 453, 73, 78, 70, 1, 357,
	1423, 1802, 1425, 110, 1560, 1642, 925, 1695, 1401, 1446,
	1192, 1424, 124, 1147, 1469, 1437, 1138, 86, 1445, 1435,
	616, 123, 85, 1436, 673, 124, 1146, 1145, 1684, 1459,
	1386, 370, 1465, 1163, 1443, 371, 1622, 370, 370, 124,
	1528, 1444, 1458, 418, 124, 1330, 1484, 124, 1383, 1030,
	124, 1728, 371, 860, 1585, 1031, 858, 371, 371, 371,
	124, 371, 371, 370, 1487, 859, 123, 857, 862, 861,
	856, 1135, 350, 979, 367, 371, 371, 1388, 1389, 1107,
	370, 848, 370, 815, 370, 1231, 1230, 1380, 1380, 1380,
	1141, 1476, 1141, 1503, 921, 1520, 1541, 1160, 369, 347,
	684, 1510, 1533, 352, 740, 1310, 1363, 487, 1494, 1481,
	480, 1638, 1512, 1489, 1208, 1531, 1532, 1156, 1524, 1525,
	1526, 1519, 1522, 123, 421, 30, 1521, 92, 488, 123,
	1190, 620, 1772, 627, 1511, 1749, 1513, 1747, 1514, 1561,
	370, 370, 370, 1714, 123, 1546, 1547, 1545, 1544, 1661,
	371, 1750, 1434, 1712, 1783, 30, 721, 720, 730, 731,
	723, 724, 725, 726, 727, 728, 729, 722, 1765, 1067,
	732, 803, 1594, 1477, 1566, 1567, 1288, 769, 1050, 830,
	392, 989, 407, 371, 371, 404, 405, 1078, 1322, 714,
	1575, 390, 384, 1550, 829, 1572, 1573, 452, 1574, 1556,
	822, 1576, 371, 1578, 1099, 1097, 1096, 835, 1501, 124,
	386, 1497, 371, 828, 1565, 1082, 124, 1330, 124, 1414,
	911, 1598, 1201, 1551, 628, 462, 124, 124, 124, 90,
	370, 1608, 1047, 1570, 371, 1706, 466, 371, 370, 1607,
	1141, 1587, 461, 1370, 56, 34, 374, 1777, 371, 371,
	467, 1757, 697, 470, 28, 23, 1617, 721, 720, 730,
	731, 723, 724, 725, 726, 727, 728, 729, 722, 466,
	370, 732, 22, 811, 812, 469, 1291, 468, 21, 20,
	1644, 19, 25, 467, 1649, 18, 17, 16, 104, 100,
	43, 41, 1618, 39, 38, 1306, 1307, 805, 647, 27,
	26, 15, 14, 371, 13, 1647, 463, 464, 469, 12,
	468, 11, 10, 370, 9, 370, 5, 370, 4, 700,
	24, 758, 370, 2, 370, 370, 370, 123, 1670, 1668,
	1664, 0, 1666, 124, 124, 124, 124, 124, 0, 1487,
	124, 124, 0, 1487, 124, 371, 0, 0, 1679, 1681,
	370, 0, 1689, 0, 1690, 1688, 370, 123, 0, 0,
	1584, 124, 1674, 0, 1675, 1677, 1678, 124, 124, 124,
	0, 0, 0, 124, 371, 1655, 1033, 1034, 0, 0,
	0, 0, 0, 0, 1593, 0, 0, 0, 0, 0,
	1694, 0, 1719, 488, 370, 1673, 1700, 0, 1725, 0,
	0, 0, 488, 0, 0, 1680, 0, 1487, 370, 370,
	370, 0, 0, 0, 0, 1066, 696, 698, 0, 1644,
	1141, 1732, 0, 1738, 1737, 0, 0, 1701, 0, 0,
	0, 370, 1744, 0, 0, 0, 0, 123, 0, 0,
	1330, 1753, 0, 0, 0, 0, 1625, 0, 1627, 0,
	0, 0, 0, 1759, 0, 0, 1761, 0, 0, 0,
	1770, 1769, 721, 720, 730, 731, 723, 724, 725, 726,
	727, 728, 729, 722, 678, 1781, 732, 0, 0, 124,
	0, 0, 0, 678, 1648, 0, 0, 370, 0, 0,
	124, 124, 124, 124, 124, 0, 0, 0, 0, 30,
	0, 0, 124, 1659, 0, 0, 124, 1755, 0, 0,
	124, 0, 741, 743, 1467, 124, 124, 818, 1808, 124,
	124, 124, 0, 1819, 0, 488, 0, 1790, 0, 0,
	0, 849, 0, 0, 371, 0, 0, 1590, 0, 0,
	1479, 0, 0, 756, 0, 0, 0, 761, 762, 763,
	764, 765, 766, 767, 768, 0, 771, 774, 774, 774,
	780, 774, 774, 780, 774, 788, 789, 790, 791, 792,
	793, 794, 0, 0, 0, 0, 0, 30, 721, 720,
	730, 731, 723, 724, 725, 726, 727, 728, 729, 722,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 371, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 1583, 0, 0,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 1267,
	0, 0, 371, 1268, 730, 731, 723, 724, 725, 726,
	727, 728, 729, 722, 1275, 1276, 732, 0, 0, 0,
	1282, 0, 0, 1285, 1286, 0, 0, 371, 1582, 0,
	0, 1292, 0, 0, 0, 1294, 0, 0, 1297, 1298,
	1299, 1300, 1301, 0, 488, 0, 0, 0, 0, 0,
	0, 0, 1589, 0, 0, 0, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 124, 488, 488, 488, 0,
	488, 488, 383, 0, 0, 371, 0, 0, 0, 0,
	1609, 371, 371, 1610, 488, 488, 1612, 1345, 1346, 721,
	720, 730, 731, 723, 724, 725, 726, 727, 728, 729,
	722, 0, 0, 732, 0, 0, 0, 371, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 678, 371, 0, 371, 0,
	721, 720, 730, 731, 723, 724, 725, 726, 727, 728,
	729, 722, 678, 0, 732, 0, 0, 678, 678, 678,
	0, 678, 678, 0, 0, 0, 0, 0, 0, 1024,
	0, 488, 0, 0, 0, 678, 678, 124, 0, 0,
	0, 0, 0, 124, 1438, 1054, 0, 0, 0, 1663,
	383, 0, 0, 0, 371, 371, 371, 0, 124, 0,
	0, 0, 1058, 1059, 721, 720, 730, 731, 723, 724,
	725, 726, 727, 728, 729, 722, 1266, 0, 732, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 488, 0, 721, 720, 730, 731,
	723, 724, 725, 726, 727, 728, 729, 722, 0, 0,
	732, 0, 0, 488, 0, 0, 488, 1441, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 371, 0, 0, 994, 0, 0, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 371, 0, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 488, 0, 0, 371, 0, 371,
	0, 371, 0, 0, 0, 0, 371, 0, 371, 371,
	371, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 0, 0,
	371, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1569, 0, 0, 0, 1571, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 1580, 1581, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 371, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1600, 1601, 0, 0,
	1605, 0, 0, 122, 0, 371, 365, 0, 0, 0,
	0, 124, 0, 122, 0, 0, 0, 0, 1616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 474, 474, 0, 0,
	0, 0, 0, 0, 1271, 122, 0, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 371, 0, 0, 122, 122, 0, 0, 0, 0,
	0, 0, 122, 488, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 1261, 1262, 1263, 0, 0, 1326, 1327, 0, 0,
	831, 831, 831, 831, 831, 0, 0, 0, 0, 0,
	0, 1676, 0, 0, 0, 0, 1111, 0, 1352, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 831,
	0, 0, 0, 1419, 0, 0, 0, 31, 32, 33,
	65, 35, 36, 0, 0, 0, 0, 0, 1702, 1703,
	1704, 1705, 0, 1709, 0, 1710, 1711, 69, 0, 0,
	1426, 0, 37, 59, 60, 0, 62, 0, 0, 0,
	0, 488, 63, 1722, 0, 1723, 1724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1734, 0, 0, 488, 0, 0, 0,
	0, 49, 0, 0, 1740, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 488, 0, 0, 1054, 0, 0,
	1491, 1493, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 40, 42, 45,
	44, 47, 0, 61, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 0, 488, 0, 627, 0, 0,
	0, 0, 0, 1812, 1813, 0, 48, 68, 67, 0,
	0, 57, 58, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 51, 0, 52, 53, 54, 55, 0, 0, 0,
	0, 0, 0, 1562, 1563, 1564, 1439, 1440, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 1462, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 122, 0, 122, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1586,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1613, 1614, 1615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1669, 0, 1671, 1568,
	1672, 0, 0, 0, 0, 1621, 0, 1621, 1621, 1621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1641, 1621, 122, 0, 0, 0, 0, 1621,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 122, 0, 0, 122,
	0, 0, 953, 0, 1488, 0, 30, 1727, 1488, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 1736, 488, 488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 0, 1754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 1650, 1651, 1652, 1653, 1654, 0, 0,
	0, 1657, 1658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 30, 0,
	1621, 0, 0, 474, 953, 0, 0, 0, 474, 474,
	0, 0, 474, 474, 474, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 474, 474,
	474, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 0, 0, 0, 0, 0, 953, 122, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 122, 1116,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1800, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 122, 122, 122, 122,
	0, 1805, 122, 122, 0, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 1251,
	1252, 122, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	474, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 122, 122, 122, 122, 122, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 122, 0,
	0, 0, 1116, 0, 0, 0, 0, 122, 122, 0,
	0, 122, 1360, 953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 122,
	0, 0, 0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 1142, 1143, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	1371, 0, 0, 1116, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 122, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 1055, 132, 307, 290, 216,
	189, 190, 131, 122, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 1142, 1143, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 1480, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 64,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 1361, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 1088, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 491, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	492, 490, 485, 484, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	840, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 491, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	492, 490, 485, 484, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 601, 589, 0, 0, 544, 604,
	517, 534, 613, 535, 538, 575, 501, 557, 233, 532,
	0, 521, 496, 528, 497, 519, 546, 162, 550, 516,
	591, 560, 603, 197, 0, 522, 245, 577, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 610, 200, 566, 0, 286, 219, 0, 0,
	0, 548, 593, 555, 585, 543, 576, 506, 565, 605,
	533, 573, 606, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 570, 600, 530, 572, 574,
	615, 495, 567, 0, 499, 502, 612, 596, 525, 526,
	0, 0, 0, 0, 0, 0, 0, 547, 556, 582,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 523,
	0, 564, 0, 0, 0, 503, 500, 0, 0, 0,
	0, 545, 0, 0, 0, 505, 0, 524, 583, 0,
	493, 174, 587, 595, 542, 323, 599, 540, 539, 602,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 592, 520, 529, 153, 527, 266,
	242, 312, 563, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	482, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 491, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 498, 0,
	288, 316, 336, 144, 515, 588, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	492, 490, 485, 484, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 510, 514, 508, 509, 558, 559, 511,
	607, 608, 609, 584, 504, 0, 512, 513, 0, 590,
	597, 598, 562, 125, 135, 199, 611, 259, 170, 317,
	494, 507, 158, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 561, 568, 569, 571, 578, 579,
	580, 581, 586, 594, 614, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 233, 0, 0, 1026, 0, 388,
	0, 0, 0, 162, 0, 387, 0, 0, 0, 197,
	0, 1027, 245, 0, 277, 152, 205, 203, 299, 167,
	163, 161, 151, 184, 210, 244, 295, 238, 431, 200,
	0, 0, 286, 219, 0, 0, 0, 0, 0, 422,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	150, 129, 230, 287, 169, 64, 0, 0, 112, 113,
	114, 409, 408, 411, 412, 413, 414, 0, 0, 146,
	410, 415, 416, 417, 0, 0, 0, 0, 385, 402,
	0, 430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 400, 472, 0, 0, 0, 445, 0, 401,
	0, 0, 394, 395, 397, 396, 398, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 444, 0,
	0, 323, 0, 0, 442, 0, 256, 0, 291, 178,
	196, 142, 193, 126, 137, 0, 176, 229, 264, 268,
	0, 0, 0, 153, 0, 266, 242, 312, 0, 246,
	265, 201, 301, 257, 311, 324, 325, 159, 223, 318,
	296, 321, 333, 138, 156, 236, 292, 315, 283, 218,
	298, 192, 206, 282, 130, 294, 309, 147, 276, 0,
	0, 0, 132, 307, 290, 216, 189, 190, 131, 0,
	262, 160, 172, 155, 232, 304, 305, 154, 335, 139,
	320, 134, 140, 319, 225, 300, 308, 217, 209, 133,
	306, 215, 208, 195, 166, 180, 254, 204, 255, 181,
	221, 220, 222, 0, 0, 0, 288, 316, 336, 144,
	0, 0, 297, 329, 332, 0, 258, 145, 173, 165,
	253, 171, 198, 328, 330, 331, 224, 141, 183, 284,
	194, 202, 261, 334, 241, 267, 148, 314, 285, 432,
	443, 438, 439, 436, 437, 0, 435, 434, 433, 446,
	424, 425, 426, 427, 429, 0, 440, 441, 428, 125,
	135, 199, 0, 259, 170, 317, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 128, 136, 143, 149, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 207, 211, 212, 213,
	214, 226, 227, 228, 231, 234, 235, 237, 239, 240,
	243, 247, 248, 249, 250, 251, 252, 260, 263, 269,
	270, 271, 272, 273, 274, 275, 278, 279, 280, 281,
	289, 293, 302, 303, 313, 322, 326, 177, 310, 327,
	233, 0, 0, 0, 0, 388, 0, 0, 0, 162,
	0, 387, 0, 0, 0, 197, 0, 0, 245, 0,
	277, 152, 205, 203, 299, 167, 163, 161, 151, 184,
	210, 244, 295, 238, 431, 200, 0, 0, 286, 219,
	0, 0, 0, 0, 0, 422, 423, 0, 0, 0,
	0, 0, 0, 1133, 0, 188, 150, 129, 230, 287,
	169, 64, 0, 0, 112, 113, 114, 409, 408, 411,
	412, 413, 414, 0, 0, 146, 410, 415, 416, 417,
	1134, 0, 0, 0, 385, 402, 0, 430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 399, 400, 0,
	0, 0, 0, 445, 0, 401, 0, 0, 394, 395,
	397, 396, 398, 403, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 444, 0, 0, 323, 0, 0,
	442, 0, 256, 0, 291, 178, 196, 142, 193, 126,
	137, 0, 176, 229, 264, 268, 0, 0, 0, 153,
	0, 266, 242, 312, 0, 246, 265, 201, 301, 257,
	311, 324, 325, 159, 223, 318, 296, 321, 333, 138,
	156, 236, 292, 315, 283, 218, 298, 192, 206, 282,
	130, 294, 309, 147, 276, 0, 0, 0, 132, 307,
	290, 216, 189, 190, 131, 0, 262, 160, 172, 155,
	232, 304, 305, 154, 335, 139, 320, 134, 140, 319,
	225, 300, 308, 217, 209, 133, 306, 215, 208, 195,
	166, 180, 254, 204, 255, 181, 221, 220, 222, 0,
	0, 0, 288, 316, 336, 144, 0, 0, 297, 329,
	332, 0, 258, 145, 173, 165, 253, 171, 198, 328,
	330, 331, 224, 141, 183, 284, 194, 202, 261, 334,
	241, 267, 148, 314, 285, 432, 443, 438, 439, 436,
	437, 0, 435, 434, 433, 446, 424, 425, 426, 427,
	429, 0, 440, 441, 428, 125, 135, 199, 0, 259,
	170, 317, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 128, 136,
	143, 149, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 207, 211, 212, 213, 214, 226, 227, 228,
	231, 234, 235, 237, 239, 240, 243, 247, 248, 249,
	250, 251, 252, 260, 263, 269, 270, 271, 272, 273,
	274, 275, 278, 279, 280, 281, 289, 293, 302, 303,
	313, 322, 326, 177, 310, 327, 233, 0, 0, 0,
	0, 388, 0, 0, 0, 162, 0, 387, 0, 0,
	0, 197, 0, 0, 245, 0, 277, 152, 205, 203,
	299, 167, 163, 161, 151, 184, 210, 244, 295, 238,
	431, 200, 0, 0, 286, 219, 0, 0, 0, 0,
	0, 422, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 150, 129, 230, 287, 169, 64, 0, 460,
	112, 113, 114, 409, 408, 411, 412, 413, 414, 0,
	0, 146, 410, 415, 416, 417, 0, 0, 0, 0,
	385, 402, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 400, 0, 0, 0, 0, 445,
	0, 401, 0, 0, 394, 395, 397, 396, 398, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	444, 0, 0, 323, 0, 0, 442, 0, 256, 0,
	291, 178, 196, 142, 193, 126, 137, 0, 176, 229,
	264, 268, 0, 0, 0, 153, 0, 266, 242, 312,
	0, 246, 265, 201, 301, 257, 311, 324, 325, 159,
	223, 318, 296, 321, 333, 138, 156, 236, 292, 315,
	283, 218, 298, 192, 206, 282, 130, 294, 309, 147,
	276, 0, 0, 0, 132, 307, 290, 216, 189, 190,
	131, 0, 262, 160, 172, 155, 232, 304, 305, 154,
	335, 139, 320, 134, 140, 319, 225, 300, 308, 217,
	209, 133, 306, 215, 208, 195, 166, 180, 254, 204,
	255, 181, 221, 220, 222, 0, 0, 0, 288, 316,
	336, 144, 0, 0, 297, 329, 332, 0, 258, 145,
	173, 165, 253, 171, 198, 328, 330, 331, 224, 141,
	183, 284, 194, 202, 261, 334, 241, 267, 148, 314,
	285, 432, 443, 438, 439, 436, 437, 0, 435, 434,
	433, 446, 424, 425, 426, 427, 429, 0, 440, 441,
	428, 125, 135, 199, 0, 259, 170, 317, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 128, 136, 143, 149, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 207, 211,
	212, 213, 214, 226, 227, 228, 231, 234, 235, 237,
	239, 240, 243, 247, 248, 249, 250, 251, 252, 260,
	263, 269, 270, 271, 272, 273, 274, 275, 278, 279,
	280, 281, 289, 293, 302, 303, 313, 322, 326, 177,
	310, 327, 233, 0, 0, 0, 0, 388, 0, 0,
	0, 162, 0, 387, 0, 0, 0, 197, 0, 0,
	245, 0, 277, 152, 205, 203, 299, 167, 163, 161,
	151, 184, 210, 244, 295, 238, 431, 200, 0, 0,
	286, 219, 0, 0, 0, 0, 0, 422, 423, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 150, 129,
	230, 287, 169, 64, 0, 0, 112, 113, 114, 409,
	408, 411, 412, 413, 414, 0, 0, 146, 410, 415,
	416, 417, 0, 0, 0, 0, 385, 402, 0, 430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	400, 472, 0, 0, 0, 445, 0, 401, 0, 0,
	394, 395, 397, 396, 398, 403, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 444, 0, 0, 323,
	0, 0, 442, 0, 256, 0, 291, 178, 196, 142,
	193, 126, 137, 0, 176, 229, 264, 268, 0, 0,
	0, 153, 0, 266, 242, 312, 0, 246, 265, 201,
	301, 257, 311, 324, 325, 159, 223, 318, 296, 321,
	333, 138, 156, 236, 292, 315, 283, 218, 298, 192,
	206, 282, 130, 294, 309, 147, 276, 0, 0, 0,
	132, 307, 290, 216, 189, 190, 131, 0, 262, 160,
	172, 155, 232, 304, 305, 154, 335, 139, 320, 134,
	140, 319, 225, 300, 308, 217, 209, 133, 306, 215,
	208, 195, 166, 180, 254, 204, 255, 181, 221, 220,
	222, 0, 0, 0, 288, 316, 336, 144, 0, 0,
	297, 329, 332, 0, 258, 145, 173, 165, 253, 171,
	198, 328, 330, 331, 224, 141, 183, 284, 194, 202,
	261, 334, 241, 267, 148, 314, 285, 432, 443, 438,
	439, 436, 437, 0, 435, 434, 433, 446, 424, 425,
	426, 427, 429, 0, 440, 441, 428, 125, 135, 199,
	0, 259, 170, 317, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	128, 136, 143, 149, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 207, 211, 212, 213, 214, 226,
	227, 228, 231, 234, 235, 237, 239, 240, 243, 247,
	248, 249, 250, 251, 252, 260, 263, 269, 270, 271,
	272, 273, 274, 275, 278, 279, 280, 281, 289, 293,
	302, 303, 313, 322, 326, 177, 310, 327, 233, 0,
	0, 0, 0, 388, 0, 0, 0, 162, 0, 387,
	0, 0, 0, 197, 0, 0, 245, 0, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 431, 200, 0, 0, 286, 219, 0, 0,
	0, 0, 0, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 150, 129, 230, 287, 169, 64,
	0, 0, 112, 113, 114, 409, 1044, 411, 412, 413,
	414, 0, 0, 146, 410, 415, 416, 417, 0, 0,
	0, 0, 385, 402, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 400, 472, 0, 0,
	0, 445, 0, 401, 0, 0, 394, 395, 397, 396,
	398, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 444, 0, 0, 323, 0, 0, 442, 0,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 0, 0, 0, 153, 0, 266,
	242, 312, 0, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 0, 0,
	288, 316, 336, 144, 0, 0, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 432, 443, 438, 439, 436, 437, 0,
	435, 434, 433, 446, 424, 425, 426, 427, 429, 0,
	440, 441, 428, 125, 135, 199, 0, 259, 170, 317,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 177, 310, 327, 233, 0, 0, 0, 0, 388,
	0, 0, 0, 162, 0, 387, 0, 0, 0, 197,
	0, 0, 245, 0, 277, 152, 205, 203, 299, 167,
	163, 161, 151, 184, 210, 244, 295, 238, 431, 200,
	0, 0, 286, 219, 0, 0, 0, 0, 0, 422,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	150, 129, 230, 287, 169, 64, 0, 0, 112, 113,
	114, 409, 1041, 411, 412, 413, 414, 0, 0, 146,
	410, 415, 416, 417, 0, 0, 0, 0, 385, 402,
	0, 430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 400, 472, 0, 0, 0, 445, 0, 401,
	0, 0, 394, 395, 397, 396, 398, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 444, 0,
	0, 323, 0, 0, 442, 0, 256, 0, 291, 178,
	196, 142, 193, 126, 137, 0, 176, 229, 264, 268,
	0, 0, 0, 153, 0, 266, 242, 312, 0, 246,
	265, 201, 301, 257, 311, 324, 325, 159, 223, 318,
	296, 321, 333, 138, 156, 236, 292, 315, 283, 218,
	298, 192, 206, 282, 130, 294, 309, 147, 276, 0,
	0, 0, 132, 307, 290, 216, 189, 190, 131, 0,
	262, 160, 172, 155, 232, 304, 305, 154, 335, 139,
	320, 134, 140, 319, 225, 300, 308, 217, 209, 133,
	306, 215, 208, 195, 166, 180, 254, 204, 255, 181,
	221, 220, 222, 0, 0, 0, 288, 316, 336, 144,
	0, 0, 297, 329, 332, 0, 258, 145, 173, 165,
	253, 171, 198, 328, 330, 331, 224, 141, 183, 284,
	194, 202, 261, 334, 241, 267, 148, 314, 285, 432,
	443, 438, 439, 436, 437, 0, 435, 434, 433, 446,
	424, 425, 426, 427, 429, 0, 440, 441, 428, 125,
	135, 199, 0, 259, 170, 317, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 128, 136, 143, 149, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 207, 211, 212, 213,
	214, 226, 227, 228, 231, 234, 235, 237, 239, 240,
	243, 247, 248, 249, 250, 251, 252, 260, 263, 269,
	270, 271, 272, 273, 274, 275, 278, 279, 280, 281,
	289, 293, 302, 303, 313, 322, 326, 177, 310, 327,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 388, 0,
	0, 0, 162, 0, 387, 0, 0, 0, 197, 0,
	0, 245, 0, 277, 152, 205, 203, 299, 167, 163,
	161, 151, 184, 210, 244, 295, 238, 431, 200, 0,
	0, 286, 219, 0, 0, 0, 0, 0, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 150,
	129, 230, 287, 169, 64, 0, 0, 112, 113, 114,
	409, 408, 411, 412, 413, 414, 0, 0, 146, 410,
	415, 416, 417, 0, 0, 0, 0, 385, 402, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 400, 0, 0, 0, 0, 445, 0, 401, 0,
	0, 394, 395, 397, 396, 398, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 444, 0, 0,
	323, 0, 0, 442, 0, 256, 0, 291, 178, 196,
	142, 193, 126, 137, 0, 176, 229, 264, 268, 0,
	0, 0, 153, 0, 266, 242, 312, 0, 246, 265,
	201, 301, 257, 311, 324, 325, 159, 223, 318, 296,
	321, 333, 138, 156, 236, 292, 315, 283, 218, 298,
	192, 206, 282, 130, 294, 309, 147, 276, 0, 0,
	0, 132, 307, 290, 216, 189, 190, 131, 0, 262,
	160, 172, 155, 232, 304, 305, 154, 335, 139, 320,
	134, 140, 319, 225, 300, 308, 217, 209, 133, 306,
	215, 208, 195, 166, 180, 254, 204, 255, 181, 221,
	220, 222, 0, 0, 0, 288, 316, 336, 144, 0,
	0, 297, 329, 332, 0, 258, 145, 173, 165, 253,
	171, 198, 328, 330, 331, 224, 141, 183, 284, 194,
	202, 261, 334, 241, 267, 148, 314, 285, 432, 443,
	438, 439, 436, 437, 0, 435, 434, 433, 446, 424,
	425, 426, 427, 429, 0, 440, 441, 428, 125, 135,
	199, 0, 259, 170, 317, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 128, 136, 143, 149, 157, 164, 168, 175, 179,
	182, 185, 186, 187, 191, 207, 211, 212, 213, 214,
	226, 227, 228, 231, 234, 235, 237, 239, 240, 243,
	247, 248, 249, 250, 251, 252, 260, 263, 269, 270,
	271, 272, 273, 274, 275, 278, 279, 280, 281, 289,
	293, 302, 303, 313, 322, 326, 177, 310, 327, 233,
	0, 0, 0, 0, 388, 0, 0, 0, 162, 0,
	387, 0, 0, 0, 197, 0, 0, 245, 0, 277,
	152, 205, 203, 299, 167, 163, 161, 151, 184, 210,
	244, 295, 238, 431, 200, 0, 0, 286, 219, 0,
	0, 0, 0, 0, 422, 423, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 150, 129, 230, 287, 169,
	64, 0, 0, 112, 113, 114, 409, 408, 411, 412,
	413, 414, 0, 0, 146, 410, 415, 416, 417, 0,
	0, 0, 0, 385, 402, 0, 430, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 399, 400, 0, 0,
	0, 0, 445, 0, 401, 0, 0, 394, 395, 397,
	396, 398, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 444, 0, 0, 323, 0, 0, 442,
	0, 256, 0, 291, 178, 196, 142, 193, 126, 137,
	0, 176, 229, 264, 268, 0, 0, 0, 153, 0,
	266, 242, 312, 0, 246, 265, 201, 301, 257, 311,
	324, 325, 159, 223, 318, 296, 321, 333, 138, 156,
	236, 292, 315, 283, 218, 298, 192, 206, 282, 130,
	294, 309, 147, 276, 0, 0, 0, 132, 307, 290,
	216, 189, 190, 131, 0, 262, 160, 172, 155, 232,
	304, 305, 154, 335, 139, 320, 134, 140, 319, 225,
	300, 308, 217, 209, 133, 306, 215, 208, 195, 166,
	180, 254, 204, 255, 181, 221, 220, 222, 0, 0,
	0, 288, 316, 336, 144, 0, 0, 297, 329, 332,
	0, 258, 145, 173, 165, 253, 171, 198, 328, 330,
	331, 224, 141, 183, 284, 194, 202, 261, 334, 241,
	267, 148, 314, 285, 432, 443, 438, 439, 436, 437,
	0, 435, 434, 433, 446, 424, 425, 426, 427, 429,
	0, 440, 441, 428, 125, 135, 199, 0, 259, 170,
	317, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 128, 136, 143,
	149, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 207, 211, 212, 213, 214, 226, 227, 228, 231,
	234, 235, 237, 239, 240, 243, 247, 248, 249, 250,
	251, 252, 260, 263, 269, 270, 271, 272, 273, 274,
	275, 278, 279, 280, 281, 289, 293, 302, 303, 313,
	322, 326, 177, 310, 327, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	197, 0, 0, 245, 0, 277, 152, 205, 203, 299,
	167, 163, 161, 151, 184, 210, 244, 295, 238, 431,
	200, 0, 0, 286, 219, 0, 0, 0, 0, 0,
	422, 423, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 150, 129, 230, 287, 169, 64, 0, 0, 112,
	113, 114, 409, 408, 411, 412, 413, 414, 0, 0,
	146, 410, 415, 416, 417, 0, 0, 0, 0, 0,
	402, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 400, 0, 0, 0, 0, 445, 0,
	401, 0, 0, 394, 395, 397, 396, 398, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 444,
	0, 0, 323, 0, 0, 442, 0, 256, 0, 291,
	178, 196, 142, 193, 126, 137, 0, 176, 229, 264,
	268, 0, 0, 0, 153, 0, 266, 242, 312, 1806,
	246, 265, 201, 301, 257, 311, 324, 325, 159, 223,
	318, 296, 321, 333, 138, 156, 236, 292, 315, 283,
	218, 298, 192, 206, 282, 130, 294, 309, 147, 276,
	0, 0, 0, 132, 307, 290, 216, 189, 190, 131,
	0, 262, 160, 172, 155, 232, 304, 305, 154, 335,
	139, 320, 134, 140, 319, 225, 300, 308, 217, 209,
	133, 306, 215, 208, 195, 166, 180, 254, 204, 255,
	181, 221, 220, 222, 0, 0, 0, 288, 316, 336,
	144, 0, 0, 297, 329, 332, 0, 258, 145, 173,
	165, 253, 171, 198, 328, 330, 331, 224, 141, 183,
	284, 194, 202, 261, 334, 241, 267, 148, 314, 285,
	432, 443, 438, 439, 436, 437, 0, 435, 434, 433,
	446, 424, 425, 426, 427, 429, 0, 440, 441, 428,
	125, 135, 199, 0, 259, 170, 317, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 128, 136, 143, 149, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 207, 211, 212,
	213, 214, 226, 227, 228, 231, 234, 235, 237, 239,
	240, 243, 247, 248, 249, 250, 251, 252, 260, 263,
	269, 270, 271, 272, 273, 274, 275, 278, 279, 280,
	281, 289, 293, 302, 303, 313, 322, 326, 177, 310,
	327, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 197, 0, 0, 245,
	0, 277, 152, 205, 203, 299, 167, 163, 161, 151,
	184, 210, 244, 295, 238, 431, 200, 0, 0, 286,
	219, 0, 0, 0, 0, 0, 422, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 150, 129, 230,
	287, 169, 64, 0, 460, 112, 113, 114, 409, 408,
	411, 412, 413, 414, 0, 0, 146, 410, 415, 416,
	417, 0, 0, 0, 0, 0, 402, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 400,
	0, 0, 0, 0, 445, 0, 401, 0, 0, 394,
	395, 397, 396, 398, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 444, 0, 0, 323, 0,
	0, 442, 0, 256, 0, 291, 178, 196, 142, 193,
	126, 137, 0, 176, 229, 264, 268, 0, 0, 0,
	153, 0, 266, 242, 312, 0, 246, 265, 201, 301,
	257, 311, 324, 325, 159, 223, 318, 296, 321, 333,
	138, 156, 236, 292, 315, 283, 218, 298, 192, 206,
	282, 130, 294, 309, 147, 276, 0, 0, 0, 132,
	307, 290, 216, 189, 190, 131, 0, 262, 160, 172,
	155, 232, 304, 305, 154, 335, 139, 320, 134, 140,
	319, 225, 300, 308, 217, 209, 133, 306, 215, 208,
	195, 166, 180, 254, 204, 255, 181, 221, 220, 222,
	0, 0, 0, 288, 316, 336, 144, 0, 0, 297,
	329, 332, 0, 258, 145, 173, 165, 253, 171, 198,
	328, 330, 331, 224, 141, 183, 284, 194, 202, 261,
	334, 241, 267, 148, 314, 285, 432, 443, 438, 439,
	436, 437, 0, 435, 434, 433, 446, 424, 425, 426,
	427, 429, 0, 440, 441, 428, 125, 135, 199, 0,
	259, 170, 317, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 128,
	136, 143, 149, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 207, 211, 212, 213, 214, 226, 227,
	228, 231, 234, 235, 237, 239, 240, 243, 247, 248,
	249, 250, 251, 252, 260, 263, 269, 270, 271, 272,
	273, 274, 275, 278, 279, 280, 281, 289, 293, 302,
	303, 313, 322, 326, 177, 310, 327, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 197, 0, 0, 245, 0, 277, 152, 205,
	203, 299, 167, 163, 161, 151, 184, 210, 244, 295,
	238, 431, 200, 0, 0, 286, 219, 0, 0, 0,
	0, 0, 422, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 150, 129, 230, 287, 169, 64, 0,
	0, 112, 113, 114, 409, 408, 411, 412, 413, 414,
	0, 0, 146, 410, 415, 416, 417, 0, 0, 0,
	0, 0, 402, 0, 430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 399, 400, 0, 0, 0, 0,
	445, 0, 401, 0, 0, 394, 395, 397, 396, 398,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 444, 0, 0, 323, 0, 0, 442, 0, 256,
	0, 291, 178, 196, 142, 193, 126, 137, 0, 176,
	229, 264, 268, 0, 0, 0, 153, 0, 266, 242,
	312, 0, 246, 265, 201, 301, 257, 311, 324, 325,
	159, 223, 318, 296, 321, 333, 138, 156, 236, 292,
	315, 283, 218, 298, 192, 206, 282, 130, 294, 309,
	147, 276, 0, 0, 0, 132, 307, 290, 216, 189,
	190, 131, 0, 262, 160, 172, 155, 232, 304, 305,
	154, 335, 139, 320, 134, 140, 319, 225, 300, 308,
	217, 209, 133, 306, 215, 208, 195, 166, 180, 254,
	204, 255, 181, 221, 220, 222, 0, 0, 0, 288,
	316, 336, 144, 0, 0, 297, 329, 332, 0, 258,
	145, 173, 165, 253, 171, 198, 328, 330, 331, 224,
	141, 183, 284, 194, 202, 261, 334, 241, 267, 148,
	314, 285, 432, 443, 438, 439, 436, 437, 0, 435,
	434, 433, 446, 424, 425, 426, 427, 429, 0, 440,
	441, 428, 125, 135, 199, 0, 259, 170, 317, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 128, 136, 143, 149, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 207,
	211, 212, 213, 214, 226, 227, 228, 231, 234, 235,
	237, 239, 240, 243, 247, 248, 249, 250, 251, 252,
	260, 263, 269, 270, 271, 272, 273, 274, 275, 278,
	279, 280, 281, 289, 293, 302, 303, 313, 322, 326,
	177, 310, 327, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 197, 0,
	0, 245, 0, 277, 152, 205, 203, 299, 167, 163,
	161, 151, 184, 210, 244, 295, 238, 0, 200, 0,
	0, 286, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 150,
	129, 230, 287, 169, 0, 0, 0, 112, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 720, 730, 731,
	723, 724, 725, 726, 727, 728, 729, 722, 0, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	323, 0, 0, 0, 0, 256, 0, 291, 178, 196,
	142, 193, 126, 137, 0, 176, 229, 264, 268, 0,
	0, 0, 153, 0, 266, 242, 312, 0, 246, 265,
	201, 301, 257, 311, 324, 325, 159, 223, 318, 296,
	321, 333, 138, 156, 236, 292, 315, 283, 218, 298,
	192, 206, 282, 130, 294, 309, 147, 276, 0, 0,
	0, 132, 307, 290, 216, 189, 190, 131, 0, 262,
	160, 172, 155, 232, 304, 305, 154, 335, 139, 320,
	134, 140, 319, 225, 300, 308, 217, 209, 133, 306,
	215, 208, 195, 166, 180, 254, 204, 255, 181, 221,
	220, 222, 0, 0, 0, 288, 316, 336, 144, 0,
	0, 297, 329, 332, 0, 258, 145, 173, 165, 253,
	171, 198, 328, 330, 331, 224, 141, 183, 284, 194,
	202, 261, 334, 241, 267, 148, 314, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 135,
	199, 0, 259, 170, 317, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 128, 136, 143, 149, 157, 164, 168, 175, 179,
	182, 185, 186, 187, 191, 207, 211, 212, 213, 214,
	226, 227, 228, 231, 234, 235, 237, 239, 240, 243,
	247, 248, 249, 250, 251, 252, 260, 263, 269, 270,
	271, 272, 273, 274, 275, 278, 279, 280, 281, 289,
	293, 302, 303, 313, 322, 326, 177, 310, 327, 233,
	0, 0, 0, 817, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 197, 0, 0, 245, 0, 277,
	152, 205, 203, 299, 167, 163, 161, 151, 184, 210,
	244, 295, 238, 0, 200, 0, 0, 286, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 150, 129, 230, 287, 169,
	0, 0, 0, 112, 113, 114, 0, 819, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	710, 711, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 323, 0, 0, 0,
	0, 256, 0, 291, 178, 196, 142, 193, 126, 137,
	0, 176, 229, 264, 268, 0, 0, 0, 153, 0,
	266, 242, 312, 0, 246, 265, 201, 301, 257, 311,
	324, 325, 159, 223, 318, 296, 321, 333, 138, 156,
	236, 292, 315, 283, 218, 298, 192, 206, 282, 130,
	294, 309, 147, 276, 0, 0, 0, 132, 307, 290,
	216, 189, 190, 131, 0, 262, 160, 172, 155, 232,
	304, 305, 154, 335, 139, 320, 134, 140, 319, 225,
	300, 308, 217, 209, 133, 306, 215, 208, 195, 166,
	180, 254, 204, 255, 181, 221, 220, 222, 0, 0,
	0, 288, 316, 336, 144, 0, 0, 297, 329, 332,
	0, 258, 145, 173, 165, 253, 171, 198, 328, 330,
	331, 224, 141, 183, 284, 194, 202, 261, 334, 241,
	267, 148, 314, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 135, 199, 0, 259, 170,
	317, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 128, 136, 143,
	149, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 207, 211, 212, 213, 214, 226, 227, 228, 231,
	234, 235, 237, 239, 240, 243, 247, 248, 249, 250,
	251, 252, 260, 263, 269, 270, 271, 272, 273, 274,
	275, 278, 279, 280, 281, 289, 293, 302, 303, 313,
	322, 326, 177, 310, 327, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 1158, 0, 0, 0, 0,
	197, 0, 0, 245, 0, 277, 152, 205, 203, 299,
	167, 163, 161, 151, 184, 210, 244, 295, 238, 0,
	200, 0, 0, 286, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 150, 129, 230, 287, 169, 0, 0, 0, 112,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 1157, 323, 0, 0, 0, 1153, 1150, 0, 1151,
	1152, 196, 623, 193, 126, 137, 1148, 1155, 229, 264,
	268, 0, 0, 0, 153, 0, 266, 242, 312, 0,
	246, 265, 201, 301, 257, 311, 324, 325, 159, 223,
	318, 296, 321, 333, 138, 156, 236, 292, 315, 283,
	218, 298, 192, 206, 282, 130, 294, 309, 147, 276,
	0, 0, 0, 132, 307, 290, 216, 189, 190, 131,
	0, 262, 160, 172, 155, 232, 304, 305, 154, 335,
	139, 320, 134, 140, 319, 225, 300, 308, 217, 209,
	133, 306, 215, 208, 195, 166, 180, 254, 204, 255,
	181, 221, 220, 222, 0, 0, 0, 288, 316, 336,
	144, 0, 0, 297, 329, 332, 0, 258, 145, 173,
	165, 253, 171, 198, 328, 330, 331, 224, 141, 183,
	284, 194, 202, 261, 334, 241, 267, 148, 314, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 135, 199, 0, 259, 170, 317, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 128, 136, 143, 149, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 207, 211, 212,
	213, 214, 226, 227, 228, 231, 234, 235, 237, 239,
	240, 243, 247, 248, 249, 250, 251, 252, 260, 263,
	269, 270, 271, 272, 273, 274, 275, 278, 279, 280,
	281, 289, 293, 302, 303, 313, 322, 326, 177, 310,
	327, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 197,
	0, 0, 245, 0, 277, 152, 205, 203, 299, 167,
	163, 161, 151, 184, 210, 244, 295, 238, 0, 200,
	0, 0, 286, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	150, 129, 230, 287, 169, 64, 0, 460, 112, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 323, 0, 0, 0, 0, 256, 0, 291, 178,
	196, 142, 193, 126, 137, 0, 176, 229, 264, 268,
	0, 0, 0, 153, 0, 266, 242, 312, 0, 246,
	265, 201, 301, 257, 311, 324, 325, 159, 223, 318,
	296, 321, 333, 138, 156, 236, 292, 315, 283, 218,
	298, 192, 206, 282, 130, 294, 309, 147, 276, 0,
	0, 0, 132, 307, 290, 216, 189, 190, 131, 0,
	262, 160, 172, 155, 232, 304, 305, 154, 335, 139,
	320, 134, 140, 319, 225, 300, 308, 217, 209, 133,
	306, 215, 208, 195, 166, 180, 254, 204, 255, 181,
	221, 220, 222, 0, 0, 0, 288, 316, 336, 144,
	0, 0, 297, 329, 332, 0, 258, 145, 173, 165,
	253, 171, 198, 328, 330, 331, 224, 141, 183, 284,
	194, 202, 261, 334, 241, 267, 148, 314, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	135, 199, 0, 259, 170, 317, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 128, 136, 143, 149, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 207, 211, 212, 213,
	214, 226, 227, 228, 231, 234, 235, 237, 239, 240,
	243, 247, 248, 249, 250, 251, 252, 260, 263, 269,
	270, 271, 272, 273, 274, 275, 278, 279, 280, 281,
	289, 293, 302, 303, 313, 322, 326, 177, 310, 327,
	233, 0, 0, 0, 1115, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 197, 0, 0, 245, 0,
	277, 152, 205, 203, 299, 167, 163, 161, 151, 184,
	210, 244, 295, 238, 0, 200, 0, 0, 286, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 150, 129, 230, 287,
	169, 0, 0, 0, 112, 113, 114, 0, 1117, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 323, 0, 0,
	0, 0, 256, 0, 291, 178, 196, 142, 193, 126,
	137, 0, 176, 229, 264, 268, 0, 0, 0, 153,
	0, 266, 242, 312, 0, 246, 265, 201, 301, 257,
	311, 324, 325, 159, 223, 318, 296, 321, 333, 138,
	156, 236, 292, 315, 283, 218, 298, 192, 206, 282,
	130, 294, 309, 147, 276, 0, 0, 0, 132, 307,
	290, 216, 189, 190, 131, 0, 262, 160, 172, 155,
	232, 304, 305, 154, 335, 139, 320, 134, 140, 319,
	225, 300, 308, 217, 209, 133, 306, 215, 208, 195,
	166, 180, 254, 204, 255, 181, 221, 220, 222, 0,
	0, 0, 288, 316, 336, 144, 0, 0, 297, 329,
	332, 0, 258, 145, 173, 165, 253, 171, 198, 328,
	330, 331, 224, 141, 183, 284, 194, 202, 261, 334,
	241, 267, 148, 314, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 135, 199, 0, 259,
	170, 317, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 128, 136,
	143, 149, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 207, 211, 212, 213, 214, 226, 227, 228,
	231, 234, 235, 237, 239, 240, 243, 247, 248, 249,
	250, 251, 252, 260, 263, 269, 270, 271, 272, 273,
	274, 275, 278, 279, 280, 281, 289, 293, 302, 303,
	313, 322, 326, 177, 310, 327, 31, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 197, 0, 0, 245, 0, 277,
	152, 205, 203, 299, 167, 163, 161, 151, 184, 210,
	244, 295, 238, 0, 200, 0, 0, 286, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 150, 129, 230, 287, 169,
	64, 0, 0, 112, 113, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 323, 0, 0, 0,
	0, 256, 0, 291, 178, 196, 142, 193, 126, 137,
	0, 176, 229, 264, 268, 0, 0, 0, 153, 0,
	266, 242, 312, 0, 246, 265, 201, 301, 257, 311,
	324, 325, 159, 223, 318, 296, 321, 333, 138, 156,
	236, 292, 315, 283, 218, 298, 192, 206, 282, 130,
	294, 309, 147, 276, 0, 0, 0, 132, 307, 290,
	216, 189, 190, 131, 0, 262, 160, 172, 155, 232,
	304, 305, 154, 335, 139, 320, 134, 140, 319, 225,
	300, 308, 217, 209, 133, 306, 215, 208, 195, 166,
	180, 254, 204, 255, 181, 221, 220, 222, 0, 0,
	0, 288, 316, 336, 144, 0, 0, 297, 329, 332,
	0, 258, 145, 173, 165, 253, 171, 198, 328, 330,
	331, 224, 141, 183, 284, 194, 202, 261, 334, 241,
	267, 148, 314, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 135, 199, 0, 259, 170,
	317, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 128, 136, 143,
	149, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 207, 211, 212, 213, 214, 226, 227, 228, 231,
	234, 235, 237, 239, 240, 243, 247, 248, 249, 250,
	251, 252, 260, 263, 269, 270, 271, 272, 273, 274,
	275, 278, 279, 280, 281, 289, 293, 302, 303, 313,
	322, 326, 177, 310, 327, 233, 0, 0, 0, 1115,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	197, 0, 0, 245, 0, 277, 152, 205, 203, 299,
	167, 163, 161, 151, 184, 210, 244, 295, 238, 0,
	200, 0, 0, 286, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 150, 129, 230, 287, 169, 0, 0, 0, 112,
	113, 114, 0, 1117, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 323, 0, 0, 0, 0, 256, 0, 291,
	178, 196, 142, 193, 126, 137, 0, 176, 229, 264,
	268, 0, 0, 0, 153, 0, 266, 242, 312, 0,
	1113, 265, 201, 301, 257, 311, 324, 325, 159, 223,
	318, 296, 321, 333, 138, 156, 236, 292, 315, 283,
	218, 298, 192, 206, 282, 130, 294, 309, 147, 276,
	0, 0, 0, 132, 307, 290, 216, 189, 190, 131,
	0, 262, 160, 172, 155, 232, 304, 305, 154, 335,
	139, 320, 134, 140, 319, 225, 300, 308, 217, 209,
	133, 306, 215, 208, 195, 166, 180, 254, 204, 255,
	181, 221, 220, 222, 0, 0, 0, 288, 316, 336,
	144, 0, 0, 297, 329, 332, 0, 258, 145, 173,
	165, 253, 171, 198, 328, 330, 331, 224, 141, 183,
	284, 194, 202, 261, 334, 241, 267, 148, 314, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 135, 199, 0, 259, 170, 317, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 128, 136, 143, 149, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 207, 211, 212,
	213, 214, 226, 227, 228, 231, 234, 235, 237, 239,
	240, 243, 247, 248, 249, 250, 251, 252, 260, 263,
	269, 270, 271, 272, 273, 274, 275, 278, 279, 280,
	281, 289, 293, 302, 303, 313, 322, 326, 177, 310,
	327, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 197, 0, 0, 245,
	0, 277, 152, 205, 203, 299, 167, 163, 161, 151,
	184, 210, 244, 295, 238, 0, 200, 0, 0, 286,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 150, 129, 230,
	287, 169, 0, 0, 0, 112, 113, 114, 0, 0,
	1080, 0, 0, 1081, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 323, 0,
	0, 0, 0, 256, 0, 291, 178, 196, 142, 193,
	126, 137, 0, 176, 229, 264, 268, 0, 0, 0,
	153, 0, 266, 242, 312, 0, 246, 265, 201, 301,
	257, 311, 324, 325, 159, 223, 318, 296, 321, 333,
	138, 156, 236, 292, 315, 283, 218, 298, 192, 206,
	282, 130, 294, 309, 147, 276, 0, 0, 0, 132,
	307, 290, 216, 189, 190, 131, 0, 262, 160, 172,
	155, 232, 304, 305, 154, 335, 139, 320, 134, 140,
	319, 225, 300, 308, 217, 209, 133, 306, 215, 208,
	195, 166, 180, 254, 204, 255, 181, 221, 220, 222,
	0, 0, 0, 288, 316, 336, 144, 0, 0, 297,
	329, 332, 0, 258, 145, 173, 165, 253, 171, 198,
	328, 330, 331, 224, 141, 183, 284, 194, 202, 261,
	334, 241, 267, 148, 314, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 135, 199, 0,
	259, 170, 317, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 128,
	136, 143, 149, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 207, 211, 212, 213, 214, 226, 227,
	228, 231, 234, 235, 237, 239, 240, 243, 247, 248,
	249, 250, 251, 252, 260, 263, 269, 270, 271, 272,
	273, 274, 275, 278, 279, 280, 281, 289, 293, 302,
	303, 313, 322, 326, 177, 310, 327, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 851, 0,
	0, 0, 197, 0, 0, 245, 0, 277, 152, 205,
	203, 299, 167, 163, 161, 151, 184, 210, 244, 295,
	238, 0, 200, 0, 0, 286, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 150, 129, 230, 287, 169, 0, 0,
	0, 112, 113, 114, 0, 850, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 323, 0, 0, 0, 0, 256,
	0, 291, 178, 196, 142, 193, 126, 137, 0, 176,
	229, 264, 268, 0, 0, 0, 153, 0, 266, 242,
	312, 0, 246, 265, 201, 301, 257, 311, 324, 325,
	159, 223, 318, 296, 321, 333, 138, 156, 236, 292,
	315, 283, 218, 298, 192, 206, 282, 130, 294, 309,
	147, 276, 0, 0, 0, 132, 307, 290, 216, 189,
	190, 131, 0, 262, 160, 172, 155, 232, 304, 305,
	154, 335, 139, 320, 134, 140, 319, 225, 300, 308,
	217, 209, 133, 306, 215, 208, 195, 166, 180, 254,
	204, 255, 181, 221, 220, 222, 0, 0, 0, 288,
	316, 336, 144, 0, 0, 297, 329, 332, 0, 258,
	145, 173, 165, 253, 171, 198, 328, 330, 331, 224,
	141, 183, 284, 194, 202, 261, 334, 241, 267, 148,
	314, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 135, 199, 0, 259, 170, 317, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 128, 136, 143, 149, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 207,
	211, 212, 213, 214, 226, 227, 228, 231, 234, 235,
	237, 239, 240, 243, 247, 248, 249, 250, 251, 252,
	260, 263, 269, 270, 271, 272, 273, 274, 275, 278,
	279, 280, 281, 289, 293, 302, 303, 313, 322, 326,
	177, 310, 327, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 197, 0,
	0, 245, 0, 277, 152, 205, 203, 299, 167, 163,
	161, 151, 184, 210, 244, 295, 238, 0, 200, 0,
	0, 286, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 150,
	129, 230, 287, 169, 0, 0, 0, 112, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	323, 0, 0, 0, 0, 256, 0, 291, 178, 196,
	623, 193, 126, 137, 621, 176, 229, 264, 268, 0,
	0, 0, 153, 0, 266, 242, 312, 0, 246, 265,
	201, 301, 257, 311, 324, 325, 159, 223, 318, 296,
	321, 333, 138, 156, 236, 292, 315, 283, 218, 298,
	192, 206, 282, 130, 294, 309, 147, 276, 0, 0,
	0, 132, 307, 290, 216, 189, 190, 131, 0, 262,
	160, 172, 155, 232, 304, 305, 154, 335, 139, 320,
	134, 140, 319, 225, 300, 308, 217, 209, 133, 306,
	215, 208, 195, 166, 180, 254, 204, 255, 181, 221,
	220, 222, 0, 0, 0, 288, 316, 336, 144, 0,
	0, 297, 329, 332, 0, 258, 145, 173, 165, 253,
	171, 198, 328, 330, 331, 224, 141, 183, 284, 194,
	202, 261, 334, 241, 267, 148, 314, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 135,
	199, 0, 259, 170, 317, 0, 0, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 128, 136, 143, 149, 157, 164, 168, 175, 179,
	182, 185, 186, 187, 191, 207, 211, 212, 213, 214,
	226, 227, 228, 231, 234, 235, 237, 239, 240, 243,
	247, 248, 249, 250, 251, 252, 260, 263, 269, 270,
	271, 272, 273, 274, 275, 278, 279, 280, 281, 289,
	293, 302, 303, 313, 322, 326, 177, 310, 327, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 0, 197, 0, 0, 245, 0, 277,
	152, 205, 203, 299, 167, 163, 161, 151, 184, 210,
	244, 295, 238, 0, 200, 0, 0, 286, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 150, 129, 230, 287, 169,
	0, 0, 460, 112, 113, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 323, 0, 0, 0,
	0, 256, 0, 291, 178, 196, 142, 193, 126, 137,
	0, 176, 229, 264, 268, 0, 0, 0, 153, 0,
	266, 242, 312, 0, 246, 265, 201, 301, 257, 311,
	324, 325, 159, 223, 318, 296, 321, 333, 138, 156,
	236, 292, 315, 283, 218, 298, 192, 206, 282, 130,
	294, 309, 147, 276, 0, 0, 0, 132, 307, 290,
	216, 189, 190, 131, 0, 262, 160, 172, 155, 232,
	304, 305, 154, 335, 139, 320, 134, 140, 319, 225,
	300, 308, 217, 209, 133, 306, 215, 208, 195, 166,
	180, 254, 204, 255, 181, 221, 220, 222, 0, 0,
	0, 288, 316, 336, 144, 0, 0, 297, 329, 332,
	0, 258, 145, 173, 165, 253, 171, 198, 328, 330,
	331, 224, 141, 183, 284, 194, 202, 261, 334, 241,
	267, 148, 314, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 135, 199, 0, 259, 170,
	317, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 128, 136, 143,
	149, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 207, 211, 212, 213, 214, 226, 227, 228, 231,
	234, 235, 237, 239, 240, 243, 247, 248, 249, 250,
	251, 252, 260, 263, 269, 270, 271, 272, 273, 274,
	275, 278, 279, 280, 281, 289, 293, 302, 303, 313,
	322, 326, 177, 310, 327, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	197, 0, 0, 245, 0, 277, 152, 205, 203, 299,
	167, 163, 161, 151, 184, 210, 244, 295, 238, 0,
	200, 0, 0, 286, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 150, 129, 230, 287, 169, 64, 0, 0, 112,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 323, 0, 0, 0, 0, 256, 0, 291,
	178, 196, 142, 193, 126, 137, 0, 176, 229, 264,
	268, 0, 0, 0, 153, 0, 266, 242, 312, 0,
	246, 265, 201, 301, 257, 311, 324, 325, 159, 223,
	318, 296, 321, 333, 138, 156, 236, 292, 315, 283,
	218, 298, 192, 206, 282, 130, 294, 309, 147, 276,
	0, 0, 0, 132, 307, 290, 216, 189, 190, 131,
	0, 262, 160, 172, 155, 232, 304, 305, 154, 335,
	139, 320, 134, 140, 319, 225, 300, 308, 217, 209,
	133, 306, 215, 208, 195, 166, 180, 254, 204, 255,
	181, 221, 220, 222, 0, 0, 0, 288, 316, 336,
	144, 0, 0, 297, 329, 332, 0, 258, 145, 173,
	165, 253, 171, 198, 328, 330, 331, 224, 141, 183,
	284, 194, 202, 261, 334, 241, 267, 148, 314, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 135, 199, 0, 259, 170, 317, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 128, 136, 143, 149, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 207, 211, 212,
	213, 214, 226, 227, 228, 231, 234, 235, 237, 239,
	240, 243, 247, 248, 249, 250, 251, 252, 260, 263,
	269, 270, 271, 272, 273, 274, 275, 278, 279, 280,
	281, 289, 293, 302, 303, 313, 322, 326, 177, 310,
	327, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 197, 0, 0, 245,
	0, 277, 152, 205, 203, 299, 167, 163, 161, 151,
	184, 210, 244, 295, 238, 0, 200, 0, 0, 286,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 150, 129, 230,
	287, 169, 0, 0, 0, 112, 113, 114, 0, 1117,
	0, 0, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 323, 0,
	0, 0, 0, 256, 0, 291, 178, 196, 142, 193,
	126, 137, 0, 176, 229, 264, 268, 0, 0, 0,
	153, 0, 266, 242, 312, 0, 246, 265, 201, 301,
	257, 311, 324, 325, 159, 223, 318, 296, 321, 333,
	138, 156, 236, 292, 315, 283, 218, 298, 192, 206,
	282, 130, 294, 309, 147, 276, 0, 0, 0, 132,
	307, 290, 216, 189, 190, 131, 0, 262, 160, 172,
	155, 232, 304, 305, 154, 335, 139, 320, 134, 140,
	319, 225, 300, 308, 217, 209, 133, 306, 215, 208,
	195, 166, 180, 254, 204, 255, 181, 221, 220, 222,
	0, 0, 0, 288, 316, 336, 144, 0, 0, 297,
	329, 332, 0, 258, 145, 173, 165, 253, 171, 198,
	328, 330, 331, 224, 141, 183, 284, 194, 202, 261,
	334, 241, 267, 148, 314, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 135, 199, 0,
	259, 170, 317, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 128,
	136, 143, 149, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 207, 211, 212, 213, 214, 226, 227,
	228, 231, 234, 235, 237, 239, 240, 243, 247, 248,
	249, 250, 251, 252, 260, 263, 269, 270, 271, 272,
	273, 274, 275, 278, 279, 280, 281, 289, 293, 302,
	303, 313, 322, 326, 177, 310, 327, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 197, 0, 0, 245, 0, 277, 152, 205,
	203, 299, 167, 163, 161, 151, 184, 210, 244, 295,
	238, 0, 200, 0, 0, 286, 219, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 150, 129, 230, 287, 169, 0, 0,
	0, 112, 113, 114, 0, 819, 0, 0, 0, 0,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 323, 0, 0, 0, 0, 256,
	0, 291, 178, 196, 142, 193, 126, 137, 0, 176,
	229, 264, 268, 0, 0, 0, 153, 0, 266, 242,
	312, 0, 246, 265, 201, 301, 257, 311, 324, 325,
	159, 223, 318, 296, 321, 333, 138, 156, 236, 292,
	315, 283, 218, 298, 192, 206, 282, 130, 294, 309,
	147, 276, 0, 0, 0, 132, 307, 290, 216, 189,
	190, 131, 0, 262, 160, 172, 155, 232, 304, 305,
	154, 335, 139, 320, 134, 140, 319, 225, 300, 308,
	217, 209, 133, 306, 215, 208, 195, 166, 180, 254,
	204, 255, 181, 221, 220, 222, 0, 0, 0, 288,
	316, 336, 144, 0, 0, 297, 329, 332, 0, 258,
	145, 173, 165, 253, 171, 198, 328, 330, 331, 224,
	141, 183, 284, 194, 202, 261, 334, 241, 267, 148,
	314, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 135, 199, 0, 259, 170, 317, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 128, 136, 143, 149, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 207,
	211, 212, 213, 214, 226, 227, 228, 231, 234, 235,
	237, 239, 240, 243, 247, 248, 249, 250, 251, 252,
	260, 263, 269, 270, 271, 272, 273, 274, 275, 278,
	279, 280, 281, 289, 293, 302, 303, 313, 322, 326,
	177, 310, 327, 833, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 197, 0, 0, 245, 0,
	277, 152, 205, 203, 299, 167, 163, 161, 151, 184,
	210, 244, 295, 238, 0, 200, 0, 0, 286, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 150, 129, 230, 287,
	169, 0, 0, 0, 112, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 323, 0, 0,
	0, 0, 256, 0, 291, 178, 196, 142, 193, 126,
	137, 0, 176, 229, 264, 268, 0, 0, 0, 153,
	0, 266, 242, 312, 0, 246, 265, 201, 301, 257,
	311, 324, 325, 159, 223, 318, 296, 321, 333, 138,
	156, 236, 292, 315, 283, 218, 298, 192, 206, 282,
	130, 294, 309, 147, 276, 0, 0, 0, 132, 307,
	290, 216, 189, 190, 131, 0, 262, 160, 172, 155,
	232, 304, 305, 154, 335, 139, 320, 134, 140, 319,
	225, 300, 308, 217, 209, 133, 306, 215, 208, 195,
	166, 180, 254, 204, 255, 181, 221, 220, 222, 0,
	0, 0, 288, 316, 336, 144, 0, 0, 297, 329,
	332, 0, 258, 145, 173, 165, 253, 171, 198, 328,
	330, 331, 224, 141, 183, 284, 194, 202, 261, 334,
	241, 267, 148, 314, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 135, 199, 0, 259,
	170, 317, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 128, 136,
	143, 149, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 207, 211, 212, 213, 214, 226, 227, 228,
	231, 234, 235, 237, 239, 240, 243, 247, 248, 249,
	250, 251, 252, 260, 263, 269, 270, 271, 272, 273,
	274, 275, 278, 279, 280, 281, 289, 293, 302, 303,
	313, 322, 326, 177, 310, 327, 233, 0, 0, 0,
	0, 0, 0, 0, 823, 162, 0, 0, 0, 0,
	0, 197, 0, 0, 245, 0, 277, 152, 205, 203,
	299, 167, 163, 161, 151, 184, 210, 244, 295, 238,
	0, 200, 0, 0, 286, 219, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 150, 129, 230, 287, 169, 0, 0, 0,
	112, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 323, 0, 0, 0, 0, 256, 0,
	291, 178, 196, 142, 193, 126, 137, 0, 176, 229,
	264, 268, 0, 0, 0, 153, 0, 266, 242, 312,
	0, 246, 265, 201, 301, 257, 311, 324, 325, 159,
	223, 318, 296, 321, 333, 138, 156, 236, 292, 315,
	283, 218, 298, 192, 206, 282, 130, 294, 309, 147,
	276, 0, 0, 0, 132, 307, 290, 216, 189, 190,
	131, 0, 262, 160, 172, 155, 232, 304, 305, 154,
	335, 139, 320, 134, 140, 319, 225, 300, 308, 217,
	209, 133, 306, 215, 208, 195, 166, 180, 254, 204,
	255, 181, 221, 220, 222, 0, 0, 0, 288, 316,
	336, 144, 0, 0, 297, 329, 332, 0, 258, 145,
	173, 165, 253, 171, 198, 328, 330, 331, 224, 141,
	183, 284, 194, 202, 261, 334, 241, 267, 148, 314,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 135, 199, 0, 259, 170, 317, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 128, 136, 143, 149, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 207, 211,
	212, 213, 214, 226, 227, 228, 231, 234, 235, 237,
	239, 240, 243, 247, 248, 249, 250, 251, 252, 260,
	263, 269, 270, 271, 272, 273, 274, 275, 278, 279,
	280, 281, 289, 293, 302, 303, 313, 322, 326, 177,
	310, 327, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 0, 197, 0, 0,
	245, 0, 277, 152, 205, 203, 299, 167, 163, 161,
	151, 184, 210, 244, 295, 238, 0, 200, 0, 0,
	286, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 150, 129,
	230, 287, 169, 0, 0, 0, 112, 113, 114, 0,
	699, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 323,
	0, 0, 0, 0, 256, 0, 291, 178, 196, 142,
	193, 126, 137, 0, 176, 229, 264, 268, 0, 0,
	0, 153, 0, 266, 242, 312, 0, 246, 265, 201,
	301, 257, 311, 324, 325, 159, 223, 318, 296, 321,
	333, 138, 156, 236, 292, 315, 283, 218, 298, 192,
	206, 282, 130, 294, 309, 147, 276, 0, 0, 0,
	132, 307, 290, 216, 189, 190, 131, 0, 262, 160,
	172, 155, 232, 304, 305, 154, 335, 139, 320, 134,
	140, 319, 225, 300, 308, 217, 209, 133, 306, 215,
	208, 195, 166, 180, 254, 204, 255, 181, 221, 220,
	222, 0, 0, 0, 288, 316, 336, 144, 0, 0,
	297, 329, 332, 0, 258, 145, 173, 165, 253, 171,
	198, 328, 330, 331, 224, 141, 183, 284, 194, 202,
	261, 334, 241, 267, 148, 314, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 135, 199,
	0, 259, 170, 317, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	128, 136, 143, 149, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 207, 211, 212, 213, 214, 226,
	227, 228, 231, 234, 235, 237, 239, 240, 243, 247,
	248, 249, 250, 251, 252, 260, 263, 269, 270, 271,
	272, 273, 274, 275, 278, 279, 280, 281, 289, 293,
	302, 303, 313, 322, 326, 177, 310, 327, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 197, 0, 0, 245, 0, 277, 152,
	205, 203, 299, 167, 163, 161, 151, 184, 210, 244,
	295, 238, 0, 200, 0, 0, 286, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 150, 129, 230, 287, 169, 0,
	0, 0, 112, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	0, 174, 0, 0, 0, 323, 0, 0, 0, 0,
	256, 0, 291, 178, 196, 142, 193, 126, 137, 0,
	176, 229, 264, 268, 0, 0, 0, 153, 0, 266,
	242, 312, 0, 246, 265, 201, 301, 257, 311, 324,
	325, 159, 223, 318, 296, 321, 333, 138, 156, 236,
	292, 315, 283, 218, 298, 192, 206, 282, 130, 294,
	309, 147, 276, 0, 0, 0, 132, 307, 290, 216,
	189, 190, 131, 0, 262, 160, 172, 155, 232, 304,
	305, 154, 335, 139, 320, 134, 140, 319, 225, 300,
	308, 217, 209, 133, 306, 215, 208, 195, 166, 180,
	254, 204, 255, 181, 221, 220, 222, 0, 0, 0,
	288, 316, 336, 144, 0, 0, 297, 329, 332, 0,
	258, 145, 173, 165, 253, 171, 198, 328, 330, 331,
	224, 141, 183, 284, 194, 202, 261, 334, 241, 267,
	148, 314, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 135, 199, 0, 259, 170, 317,
	0, 0, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 128, 136, 143, 149,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	207, 211, 212, 213, 214, 226, 227, 228, 231, 234,
	235, 237, 239, 240, 243, 247, 248, 249, 250, 251,
	252, 260, 263, 269, 270, 271, 272, 273, 274, 275,
	278, 279, 280, 281, 289, 293, 302, 303, 313, 322,
	326, 375, 310, 327, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 0, 197,
	0, 0, 245, 0, 277, 152, 205, 203, 299, 167,
	163, 161, 151, 184, 210, 244, 295, 238, 0, 200,
	0, 0, 286, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	150, 129, 230, 287, 169, 0, 0, 0, 112, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 120,
	0, 323, 0, 0, 0, 0, 256, 0, 291, 178,
	196, 142, 193, 126, 137, 0, 176, 229, 264, 268,
	0, 0, 0, 153, 0, 266, 242, 312, 0, 246,
	265, 201, 301, 257, 311, 324, 325, 159, 223, 318,
	296, 321, 333, 138, 156, 236, 292, 315, 283, 218,
	298, 192, 206, 282, 130, 294, 309, 147, 276, 0,
	0, 0, 132, 307, 290, 216, 189, 190, 131, 0,
	262, 160, 172, 155, 232, 304, 305, 154, 335, 139,
	320, 134, 140, 319, 225, 300, 308, 217, 209, 133,
	306, 215, 208, 195, 166, 180, 254, 204, 255, 181,
	221, 220, 222, 0, 0, 0, 288, 316, 336, 144,
	0, 0, 297, 329, 332, 0, 258, 145, 173, 165,
	253, 171, 198, 328, 330, 331, 224, 141, 183, 284,
	194, 202, 261, 334, 241, 267, 148, 314, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	135, 199, 0, 259, 170, 317, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 128, 136, 143, 149, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 207, 211, 212, 213,
	214, 226, 227, 228, 231, 234, 235, 237, 239, 240,
	243, 247, 248, 249, 250, 251, 252, 260, 263, 269,
	270, 271, 272, 273, 274, 275, 278, 279, 280, 281,
	289, 293, 302, 303, 313, 322, 326, 177, 310, 327,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 197, 0, 0, 245, 0,
	277, 152, 205, 203, 299, 167, 163, 161, 151, 184,
	210, 244, 295, 238, 0, 200, 0, 0, 286, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 150, 129, 230, 287,
	169, 0, 0, 0, 112, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 323, 0, 0,
	0, 0, 256, 0, 291, 178, 196, 142, 193, 126,
	137, 0, 176, 229, 264, 268, 0, 0, 0, 153,
	0, 266, 242, 312, 0, 246, 265, 201, 301, 257,
	311, 324, 325, 159, 223, 318, 296, 321, 333, 138,
	156, 236, 292, 315, 283, 218, 298, 192, 206, 282,
	130, 294, 309, 147, 276, 0, 0, 0, 132, 307,
	290, 216, 189, 190, 131, 0, 262, 160, 172, 155,
	232, 304, 305, 154, 335, 139, 320, 134, 140, 319,
	225, 300, 308, 217, 209, 133, 306, 215, 208, 195,
	166, 180, 254, 204, 255, 181, 221, 220, 222, 0,
	0, 0, 288, 316, 336, 144, 0, 0, 297, 329,
	332, 0, 258, 145, 173, 165, 253, 171, 198, 328,
	330, 331, 224, 141, 183, 284, 194, 202, 261, 334,
	241, 267, 148, 314, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 135, 199, 0, 259,
	170, 317, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 128, 136,
	143, 149, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 207, 211, 212, 213, 214, 226, 227, 228,
	231, 234, 235, 237, 239, 240, 243, 247, 248, 249,
	250, 251, 252, 260, 263, 269, 270, 271, 272, 273,
	274, 275, 278, 279, 280, 281, 289, 293, 302, 303,
	313, 322, 326, 177, 310, 327,
}

var yyPact = [...]int{
	2541, -1000, -300, 1280, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1196,
	909, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 357, 941,
	45, 1140, 94, 805, 212, 21, 19085, 199, 329, 19471,
	-1000, 13, -1000, 7, 19471, 26, 18699, -1000, -1000, -82,
	-86, -1000, 10560, 1097, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 923, 1195, 1191, 1217, 791, 1537, -1000, 9003,
	9003, 193, 193, 193, 7459, -1000, -1000, 15604, 19471, 19471,
	955, 178, 206, 178, -161, -1000, -1000, -1000, -1000, -1000,
	-1000, 1140, -1000, -1000, 109, -1000, -1000, 19471, 19471, 382,
	1140, 75, -1000, -1000, -1000, 19471, 159, 805, 159, 159,
	19471, -1000, 258, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19471, 805, 1134,
	413, 104, 311, 311, 311, 311, -1000, 251, -1000, 5059,
	70, 73, -70, 1226, 71, -18, -1000, 413, 5059, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 198, -1000, -1000,
	-1000, -1000, 19471, 18313, 141, 349, -1000, -1000, -1000, -1000,
	-1000, -1000, 723, 653, -1000, 10560, 1138, 806, 806, -1000,
	-1000, 234, -1000, -1000, 11718, 11718, 11718, 11718, 11718, 11718,
	11718, 11718, 11718, 11718, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, 257,
	-1000, 10174, 806, 806, 806, 806, 806, 806, 806, 806,
	10560, 806, 806, 806, 806, 806, 806, 806, 806, 806,
	806, 806, 806, 806, 806, 806, 806, -1000, -1000, -1000,
	1196, -1000, 909, -1000, -1000, -1000, 1127, 10560, 10560, 1196,
	-1000, 1050, 9003, -1000, -1000, 1504, -1000, -1000, -1000, -1000,
	453, 1264, -1000, 12490, 252, 1260, 17927, -1000, 16376, 17541,
	887, 7059, -105, -1000, -1000, -1000, 345, 15218, -1000, -1000,
	-1000, 1131, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 880, 19471, -1000, -1000,
	79, 805, -1000, 927, -1000, 871, -1000, 916, 63, 339,
	19471, 343, 805, 805, -1000, -1000, -1000, 1117, 324, 196,
	5059, 83, 187, 92, 19471, 1140, 1096, 885, 197, 19471,
	1181, 983, 19471, 805, -1000, 6259, -1000, 5059, 413, -1000,
	574, 10560, 5059, 5059, 5059, 19471, 5059, 5059, -1000, 572,
	-1000, -1000, -1000, 410, -1000, -1000, -1000, -1000, -1000, -1000,
	5059, 5059, 397, 410, 397, -1000, -1000, -1000, -1000, 10560,
	311, -1000, 982, -1000, -1000, 11, -1000, -1000, -1000, -1000,
	-1000, 1280, -1000, -1000, -1000, -149, -1000, -1000, 10560, 10560,
	10560, 10560, 529, 313, 11718, 510, 338, 11718, 11718, 11718,
	11718, 11718, 11718, 11718, 11718, 11718, 11718, 11718, 11718, 11718,
	11718, 11718, 701, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 805, -1000, 1278, 937, 937, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 12104, 7845, 6259, 791, 855,
	1196, 9003, 9003, 10560, 10560, 9775, 9389, 9003, 1120, 366,
	653, 19471, -1000, -1000, 11332, -1000, -1000, -1000, -1000, -1000,
	534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19471, 19471,
	9003, 9003, 9003, 9003, 9003, -1000, 1191, 791, 1504, 1177,
	1272, 304, 519, 883, -1000, 679, 1191, 14832, 933, -1000,
	1504, -1000, -1000, -1000, 19471, -1000, -1000, 17148, -1000, -1000,
	5859, 19471, 99, 19471, -1000, 782, 997, -1000, -1000, -1000,
	1185, 14060, 14446, 19471, 896, 853, -1000, -1000, 250, 6659,
	-105, -1000, 6659, 770, -1000, -118, -122, 8231, 262, -1000,
	-1000, -1000, -1000, 4259, 12876, 650, 375, -55, -1000, -1000,
	-1000, 916, -1000, 916, 916, 916, 916, -23, -23, -23,
	-23, -1000, -1000, -1000, -1000, -1000, 939, 938, -1000, 916,
	916, 916, 916, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	935, 935, 935, 918, 918, 137, 10560, 52, 19471, 1175,
	513, 42, 328, 59, -1000, 1178, 971, -1000, 324, 784,
	-1000, -1000, 336, 336, 367, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 100, -1000, 19471, 19471,
	19471, 19471, 19471, 220, 80, 19471, 19471, 882, -1000, 19471,
	5059, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 653, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19471, -1000, -1000, -1000,
	-1000, 413, 19471, 19471, 19471, 413, 653, -1000, 19471, 19471,
	-1000, -1000, -1000, -1000, -1000, 653, 313, 403, 326, -1000,
	-1000, 630, -1000, -1000, 1425, -1000, -1000, -1000, -1000, 510,
	11718, 11718, 11718, 456, 1425, 2034, 1810, 634, 267, 580,
	580, 274, 274, 274, 274, 274, 441, 441, -1000, -1000,
	-1000, 534, -1000, -1000, -1000, 534, 9003, 9003, 812, 806,
	248, -1000, 923, -1000, -1000, 1191, 829, 829, 542, 779,
	390, 1244, 829, 364, 1230, 829, 829, 9003, -1000, -1000,
	420, -1000, 10560, 534, -1000, 245, -1000, 547, 802, 789,
	829, 534, 534, 829, 829, 1127, -1000, -1000, 1095, -1000,
	1038, 10560, 10560, 10560, -1000, -1000, -1000, 1127, 1209, -1000,
	1064, 1062, 1225, 9003, 16376, 1504, -1000, -1000, -1000, 242,
	1225, 925, 806, -1000, 19471, 16376, 16376, 16376, 16376, 16376,
	-1000, 1024, 1020, -1000, 1006, 1005, 1039, 19471, -1000, 832,
	791, 14060, 278, 806, -1000, 16762, -1000, -1000, 99, 884,
	16376, 19471, -1000, -1000, 16376, 19471, 5459, -1000, 770, -105,
	-97, -1000, -1000, -1000, -1000, 653, -1000, 743, 767, 3859,
	-1000, -1000, -1000, -1000, 121, -1000, -1000, 928, 805, -1000,
	1169, 335, 335, 368, 805, 1167, -1000, -1000, -1000, -1000,
	1139, -1000, 416, -68, -1000, -1000, -23, -23, -1000, -1000,
	262, 1113, 262, 262, 262, 570, 570, -1000, -1000, -1000,
	-1000, -1000, 508, -1000, -1000, -1000, 477, -1000, -1000, 927,
	719, 998, 52, -1000, 805, 324, 565, 1102, -1000, -1000,
	642, 200, 33, 82, -1000, -1000, -1000, -1000, 981, 19471,
	727, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19471, -1000, -1000, -1000, -1000, -1000, 19471, 965, -1000, -1000,
	-1000, -1000, 23, 81, 77, 195, -1000, 5059, -1000, 397,
	-1000, -1000, -1000, 397, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 456, 1425, 2002, -1000, 11718, 11718, -1000, -1000, 829,
	829, 9003, 6259, 1196, 1127, -1000, -1000, 233, 701, 233,
	11718, 11718, -1000, 11718, 11718, -1000, -174, 844, 352, -1000,
	10560, 617, -1000, 6259, -1000, 11718, 11718, -1000, -1000, -1000,
	-1000, -1000, -1000, 552, 564, 1036, 653, 653, -1000, -1000,
	19471, -1000, -1000, -1000, -1000, 1222, 10560, -1000, 758, -1000,
	4659, 1191, 980, 19471, 806, 1280, 13275, 19471, 920, -1000,
	327, 997, 963, 979, 1015, -1000, -1000, -1000, -1000, 1002,
	-1000, 994, -1000, -1000, -1000, -1000, -1000, 791, -1000, 205,
	203, 202, 19471, -1000, 1225, 16376, 810, -1000, 810, -1000,
	241, -1000, -1000, -1000, -143, -128, -1000, -1000, -1000, 4259,
	-1000, 4259, -1000, 19471, 123, -1000, 805, 805, 805, -1000,
	-1000, -1000, 926, 978, 11718, -1000, -1000, -1000, 262, 262,
	-1000, 332, -1000, -1000, -1000, 824, -1000, 814, 755, 796,
	10, -1000, 900, 1111, 324, 324, -1000, -1000, 474, -1000,
	560, -1000, 19471, 53, -1000, 919, 480, -1000, 19471, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1141, -185, 805, 19471,
	19471, 19471, -1000, 19471, -1000, 413, 413, -1000, 11718, 1425,
	1425, -1000, -1000, 534, -1000, 1191, -1000, 534, 916, 916,
	-1000, 916, 918, -1000, 916, 0, 916, -7, 534, 534,
	1938, 1897, 1630, 1324, 806, -168, -1000, 653, 10560, -1000,
	1746, 567, 559, -23, -1000, -1000, -1000, 1220, 1215, 653,
	-1000, -1000, -1000, 1171, 668, 706, -1000, -1000, 8617, 760,
	1058, 232, 735, -1000, 1196, 19471, 10560, -1000, -1000, 10560,
	915, -1000, 10560, -1000, -1000, -1000, 1196, 806, 806, 806,
	735, 1196, 810, -1000, -1000, 277, -1000, -1000, -1000, 3859,
	-1000, 725, -1000, 1167, -1000, -1000, -1000, 19471, -49, 1271,
	1425, -1000, -1000, -1000, -1000, -23, 551, -23, 468, -1000,
	461, -1000, -1000, -232, -1000, -1000, 962, 1017, -1000, -1000,
	908, -1000, -1000, -1000, 632, -1000, -1000, 806, -1000, 6259,
	-1000, -1000, 905, 969, -1000, -1000, -1000, -1000, 1425, -1000,
	1127, -1000, -1000, 135, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11718, 11718, 11718, 11718, 11718, 1191, 549, 653,
	11718, 11718, -23, -89, -1000, 10560, 10560, 1156, -1000, 806,
	-1000, 917, 19471, 806, 19471, -1000, 19471, 1191, -1000, 653,
	653, 19471, 653, 15990, 19471, 19471, 13661, 1191, -1000, 52,
	717, -1000, 354, -1000, -141, 262, -1000, 262, 624, 620,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1183, 19471,
	-1000, 93, 748, -1000, 323, 19471, 19471, -1000, -1000, -1000,
	547, 547, 547, 547, 106, 534, -1000, 547, 547, -295,
	-1000, 1093, 1091, 653, 723, 1270, -1000, 806, 1280, 224,
	706, -1000, -1000, -1000, 694, 670, -1000, 670, 670, 278,
	-1000, -1000, 103, 19471, 442, 1155, -1000, 1145, -1000, -1000,
	-1000, -1000, -1000, 909, 656, 648, -1000, 19471, 6259, 4259,
	640, -1000, -1000, -1000, -1000, -1000, 534, 72, -189, -1000,
	-1000, -1000, -89, 164, -1000, 1068, 1066, 1213, 19471, 706,
	19471, -1000, -1000, -1000, -1000, -1000, 19471, -1000, -1000, 541,
	-1000, -1000, 125, -1000, -1000, 93, 1057, -1000, -1000, 965,
	-1000, 1035, -177, -193, 1074, 1080, 1080, 1091, 1211, 1088,
	1085, -1000, 537, 662, -1000, 901, -1000, -1000, 46, -1000,
	89, -185, -1000, 1031, -1000, 1070, 476, -1000, -1000, -1000,
	-1000, 530, -1000, 1210, 1201, -1000, 19471, 122, -1000, -1000,
	87, -1000, -186, -1000, 412, -1000, -1000, -1000, 527, 523,
	604, 51, 806, -190, -1000, -1000, -1000, -1000, 976, -1000,
	10946, -195, 974, -1000, 1234, 547, 534, -1000, -1000, 1236,
	255, 255, -1000, -1000, -1000, -1000, -1000, 110, 463, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1613, 1611, 17, 81, 74, 1610, 1609, 1608, 1606,
	114, 112, 111, 1604, 1602, 1601, 1599, 1594, 1592, 1591,
	1590, 1589, 1588, 1584, 1583, 1581, 1580, 104, 102, 519,
	1579, 1578, 1577, 1576, 1575, 1572, 1571, 1569, 1568, 1562,
	1545, 1544, 100, 1543, 1542, 1541, 1537, 1536, 1535, 1534,
	1532, 1531, 1525, 1522, 97, 1519, 43, 192, 52, 68,
	1515, 71, 1514, 1513, 1512, 1510, 1509, 513, 1505, 46,
	84, 79, 1503, 48, 1501, 1498, 96, 1497, 1496, 66,
	1495, 1494, 70, 1490, 67, 1484, 8, 69, 1482, 1481,
	1479, 1478, 101, 1500, 1477, 1476, 20, 1475, 1472, 123,
	1471, 76, 23, 14, 29, 22, 1470, 75, 1469, 11,
	1468, 73, 1467, 1466, 1463, 1462, 34, 1461, 72, 80,
	77, 1459, 4, 9, 1458, 1444, 1443, 1441, 1439, 1433,
	2, 1427, 1425, 1422, 1417, 1404, 24, 1403, 40, 1401,
	63, 38, 26, 12, 1400, 1397, 25, 87, 58, 83,
	1396, 1395, 1394, 838, 1393, 59, 1390, 115, 1389, 28,
	103, 432, 555, 1387, 1386, 1384, 1376, 1375, 51, 684,
	1333, 10, 94, 1373, 1371, 2356, 45, 65, 21, 1369,
	1364, 1363, 60, 194, 53, 662, 1362, 39, 1360, 1359,
	1358, 1357, 1355, 1346, 1343, 36, 1341, 1338, 1330, 200,
	16, 91, 27, 1326, 1323, 1320, 1318, 56, 93, 1317,
	1316, 62, 61, 1314, 98, 31, 30, 1312, 1310, 1307,
	1306, 41, 13, 1303, 82, 42, 54, 33, 35, 1300,
	19, 1298, 37, 32, 1297, 7, 1296, 15, 1295, 3,
	0, 1294, 6, 1293, 78, 1151, 1, 1291, 5, 1289,
	1288, 1287, 1414, 907, 92, 1286, 105,
}

var yyR1 = [...]int{
	0, 250, 251, 251, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 240, 240, 240, 243, 243, 21, 41, 3, 3,
	3, 3, 2, 2, 8, 9, 4, 5, 5, 10,
	10, 48, 48, 11, 12, 12, 12, 12, 254, 254,
	76, 76, 77, 77, 140, 140, 13, 14, 14, 149,
	149, 148, 148, 148, 150, 150, 150, 150, 185, 185,
	15, 15, 15, 15, 15, 55, 55, 242, 242, 241,
	239, 239, 238, 238, 237, 23, 24, 25, 26, 245,
	245, 217, 30, 30, 29, 29, 29, 29, 31, 31,
	28, 28, 27, 27, 219, 219, 218, 218, 218, 218,
	218, 218, 208, 188, 188, 188, 188, 191, 191, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 190, 190,
	190, 190, 190, 192, 192, 192, 192, 192, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 194, 194, 194, 194, 194, 194, 194,
	194, 207, 207, 195, 195, 201, 201, 202, 202, 202,
	204, 204, 205, 205, 163, 163, 163, 197, 197, 198,
	198, 203, 203, 199, 199, 199, 200, 200, 200, 206,
	206, 206, 206, 206, 196, 196, 209, 230, 230, 229,
	229, 226, 226, 226, 226, 216, 216, 223, 223, 223,
	223, 223, 223, 213, 213, 213, 214, 214, 212, 212,
	215, 215, 225, 225, 224, 210, 210, 211, 211, 232,
	232, 232, 232, 232, 233, 247, 248, 246, 246, 246,
	246, 246, 164, 164, 164, 220, 220, 220, 221, 221,
	221, 222, 222, 222, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 236, 234, 234, 235, 235,
	17, 22, 22, 18, 18, 18, 18, 19, 19, 32,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 156, 156, 249, 249, 158, 158, 154, 154, 157,
	157, 155, 155, 155, 159, 159, 159, 160, 160, 186,
	186, 186, 34, 34, 36, 36, 37, 38, 38, 180,
	180, 181, 181, 39, 40, 47, 47, 47, 47, 47,
	47, 49, 49, 49, 7, 7, 7, 7, 44, 44,
	44, 6, 6, 35, 35, 35, 35, 20, 255, 42,
	43, 43, 54, 54, 54, 50, 50, 50, 53, 53,
	53, 58, 58, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 57, 57, 59, 59, 59, 59,
	173, 173, 173, 172, 172, 68, 68, 69, 69, 70,
	70, 71, 71, 71, 108, 85, 85, 139, 139, 138,
	138, 141, 141, 72, 72, 72, 72, 73, 73, 74,
	74, 75, 75, 179, 179, 178, 178, 178, 177, 177,
	78, 78, 78, 80, 79, 79, 79, 79, 81, 81,
	83, 83, 82, 82, 84, 86, 86, 86, 86, 86,
	87, 87, 67, 67, 67, 67, 67, 67, 67, 67,
	152, 152, 89, 89, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 100, 100, 100, 100, 100, 100,
	90, 90, 90, 90, 90, 90, 90, 56, 56, 101,
	101, 101, 107, 102, 102, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 97,
	97, 97, 97, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 256, 256, 99, 98, 98, 98, 98, 98,
	98, 98, 52, 52, 52, 52, 52, 184, 184, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 112, 112, 51, 51, 110, 110, 111, 113,
	113, 109, 109, 109, 92, 92, 92, 92, 92, 92,
	92, 92, 94, 94, 94, 114, 114, 115, 115, 116,
	116, 117, 117, 118, 119, 119, 119, 120, 120, 120,
	120, 231, 231, 231, 231, 231, 227, 227, 227, 227,
	228, 228, 228, 62, 62, 62, 62, 64, 64, 63,
	63, 45, 45, 46, 46, 46, 65, 65, 66, 66,
	66, 66, 136, 136, 136, 121, 121, 121, 121, 126,
	126, 126, 122, 122, 124, 124, 124, 125, 125, 125,
	123, 129, 129, 131, 131, 130, 130, 128, 128, 133,
	133, 132, 132, 127, 127, 91, 91, 91, 91, 91,
	137, 137, 137, 137, 142, 142, 103, 103, 105, 105,
	104, 106, 143, 143, 146, 144, 144, 147, 147, 147,
	147, 147, 145, 145, 145, 174, 174, 174, 151, 151,
	161, 161, 162, 162, 153, 153, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 166, 166, 166, 167,
	167, 134, 134, 134, 134, 135, 135, 170, 170, 171,
	171, 175, 175, 176, 176, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	252, 253, 182, 183, 183, 183,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 1, 2, 3, 5, 6,
	6, 7, 4, 6, 5, 7, 8, 1, 3, 7,
	8, 1, 1, 9, 9, 8, 7, 7, 1, 1,
	1, 3, 1, 3, 0, 4, 3, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 6, 11, 2, 0, 2, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 7, 4, 2, 1,
	1, 4, 0, 1, 1, 1, 2, 2, 0, 1,
	5, 5, 4, 4, 2, 4, 1, 1, 3, 4,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 0, 1, 1,
	2, 2, 3, 2, 3, 0, 1, 2, 3, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 3, 1, 3, 1, 10,
	11, 11, 12, 1, 5, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 5, 6, 6, 6, 6, 4,
	4, 3, 6, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 2, 7, 2, 3, 4, 5, 7,
	5, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	3, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 7, 0, 3, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 2, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 3, 3, 3, 0, 3, 1,
	1, 0, 4, 0, 1, 1, 0, 3, 1, 3,
	2, 1, 0, 2, 4, 0, 9, 3, 5, 0,
	3, 3, 0, 1, 0, 2, 2, 0, 2, 2,
	2, 0, 3, 0, 3, 0, 3, 0, 4, 0,
	3, 0, 4, 0, 1, 2, 1, 5, 4, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -250, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -4,
	-252, 6, 7, 8, -48, 10, 11, 31, -23, -24,
	146, -25, 147, -26, 149, 148, 182, 150, 175, 70,
	209, 210, 212, 213, 214, 215, -49, 180, 181, 32,
	33, 152, 35, 41, 80, 9, 304, 177, 176, 26,
	-251, 406, -54, 5, -116, 16, -3, -42, -255, -42,
	-42, -42, -42, -42, -42, -217, -219, 80, 119, 80,
	-55, 154, -134, -245, 100, 160, 163, 164, 295, 153,
	-30, -29, -28, -27, -31, 30, -245, 154, 156, 269,
	-243, -240, 83, 84, 85, 154, 154, 155, 156, -245,
	154, -82, -175, -240, -169, 314, 168, 346, 347, 76,
	209, 223, 217, 244, 236, 315, 348, 169, 198, 234,
	237, 282, 166, 349, 264, 272, 94, 212, 291, 350,
	75, 47, 40, 178, 232, 228, 199, 351, 323, 192,
	226, 46, 28, 45, 352, 274, 249, 44, 353, 79,
	319, 276, 227, 273, 152, 354, 171, 402, 164, 355,
	250, 254, 356, 283, 48, 357, 358, 359, 74, 221,
	222, 360, 206, 167, 285, 248, 165, 34, 277, 316,
	54, 186, 286, 42, 252, 41, 207, 361, 247, 243,
	49, 362, 363, 364, 365, 246, 220, 242, 204, 58,
	256, 255, 257, 193, 281, 239, 366, 367, 368, 172,
	77, 369, 229, 19, 370, 371, 200, 372, 52, 373,
	374, 289, 181, 375, 50, 37, 184, 376, 377, 378,
	379, 380, 381, 275, 251, 253, 161, 188, 271, 318,
	382, 287, 225, 383, 173, 185, 180, 290, 174, 384,
	385, 386, 387, 388, 389, 390, 213, 39, 391, 392,
	393, 394, 208, 203, 284, 293, 57, 78, 261, 395,
	219, 163, 201, 396, 210, 51, 195, 267, 205, 43,
	240, 187, 397, 398, 230, 231, 245, 218, 241, 211,
	403, 189, 182, 399, 292, 202, 262, 320, 194, 238,
	235, 196, 400, 156, 190, 191, 401, 404, 278, 268,
	279, 280, 269, 197, 288, 233, 263, 154, 137, 237,
	282, 146, 265, 266, 277, 278, 274, -158, 275, 188,
	-186, 154, -154, 264, 268, 269, 197, -249, -240, 276,
	284, 283, 270, 280, 279, -175, 211, -180, 216, -170,
	-240, -169, 214, -82, -47, 402, 150, -182, -182, 267,
	267, -182, -102, -67, -88, 103, -93, 30, 24, -92,
	-89, -109, -106, -107, 137, 138, 140, 139, 141, 126,
	127, 134, 104, 142, -97, -95, -96, -98, 87, 86,
	95, 88, 89, 90, 91, 96, 97, 98, -170, -175,
	-104, -252, 64, 65, 305, 306, 307, 308, 313, 309,
	106, 53, 294, 303, 302, 301, 298, 299, 296, 297,
	311, 312, 159, 295, 153, 132, 304, -240, -169, 40,
	-5, -4, -252, 6, 21, 22, -120, 18, 17, -253,
	82, -50, -60, 59, 60, -61, 22, 36, 63, 61,
	-43, -59, 128, -67, -175, -59, -153, 158, -153, -153,
	-144, -185, 211, -147, 284, 283, -171, -145, -170, -168,
	282, 237, 281, 151, 321, 102, 23, 25, 259, 105,
	137, 17, 106, 136, 305, 146, 68, 322, 296, 297,
	294, 300, 307, 308, 295, 265, 30, 11, 324, 26,
	176, 22, 36, 130, 148, 109, 110, 179, 24, 177,
	98, 327, 20, 71, 12, 14, 328, 329, 15, 159,
	158, 121, 155, 66, 9, 142, 27, 118, 62, 330,
	29, 331, 332, 333, 334, 64, 119, 18, 298, 299,
	32, 335, 313, 183, 132, 69, 55, 103, 336, 337,
	96, 338, 99, 72, 100, 16, 67, 38, 339, 340,
	341, 342, 120, 149, 304, 65, 343, 153, 266, 6,
	310, 31, 175, 63, 344, 154, 108, 311, 312, 157,
	97, 5, 160, 33, 10, 70, 73, 301, 302, 303,
	53, 317, 107, 13, 345, 101, -218, 119, -208, -211,
	-170, 170, -233, 166, -82, -225, -224, -170, -62, 76,
	-162, 159, 155, -162, 304, -27, -28, 237, 136, -82,
	-82, 146, 148, 151, 72, -29, 194, -22, -82, -161,
	159, -240, -161, -161, -82, 143, -82, -240, 31, -159,
	119, 13, 295, -240, 188, 154, 189, 156, -160, 119,
	-160, -160, -160, -213, 155, 34, 167, -183, -252, -171,
	195, 196, 195, -157, -156, 272, 273, 267, 271, 13,
	196, 267, 191, -159, -183, 157, -170, -44, -170, 87,
	-7, -3, -11, -10, -12, 111, -182, -182, 81, 102,
	100, 101, 118, -67, -90, 121, 103, 119, 120, 105,
	123, 122, 133, 126, 127, 128, 129, 130, 131, 132,
	124, 125, 136, 111, 112, 113, 114, 115, 116, 117,
	-152, -252, -107, -252, 144, 145, -93, -93, -93, -93,
	-93, -93, -93, -93, -93, -93, -252, 143, -2, -102,
	-4, -252, -252, -252, -252, -252, -252, -252, -252, -112,
	-67, -252, -256, -99, -252, -256, -99, -256, -99, -256,
	-252, -256, -99, -256, -99, -256, -256, -99, -252, -252,
	-252, -252, -252, -252, -252, -182, -116, -3, -42, -136,
	20, 32, -67, -117, -118, -67, -116, 55, -57, -59,
	-61, 59, 60, 93, 12, -173, -172, 23, -170, 87,
	143, 12, -83, 27, -82, -69, -70, -71, -72, -85,
	-108, -252, -82, 12, -76, -77, -82, -84, -175, 81,
	211, -147, -185, -149, -148, 285, 287, 111, -174, -170,
	87, 30, 31, 82, 81, -82, -188, -191, -193, -192,
	-194, -189, -190, 234, 235, 137, 238, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 31, 178, 230,
	231, 232, 233, 250, 251, 252, 253, 254, 255, 256,
	257, 217, 236, 315, 218, 219, 220, 221, 222, 223,
	225, 226, 227, 228, 229, -240, 80, 82, 81, -195,
	80, -65, 199, 111, -82, 103, -240, -240, 31, -216,
	111, -165, 151, 148, 149, -236, 147, 259, 237, 94,
	30, 16, 305, 184, 320, -240, 185, -183, 190, 190,
	154, 154, 203, -82, 40, 81, 157, -76, 24, 72,
	-82, -240, -176, -175, -168, -183, -159, 87, -67, -183,
	-183, -183, -82, -183, -183, 87, -214, 12, 121, -183,
	-183, -155, 12, 121, -214, -155, -67, -160, 72, -181,
	214, 248, 403, 404, 405, -67, -67, -67, -67, -100,
	96, 103, 97, 98, -93, -101, -104, -107, 92, 121,
	119, 120, 105, -93, -93, -93, -93, -93, -93, -93,
	-93, -93, -93, -93, -93, -93, -93, -93, -184, -240,
	87, -240, -92, -92, -170, -58, 22, 36, -57, -171,
	-176, -168, -54, -253, -253, -116, -57, -57, -67, -67,
	-109, 87, -57, -109, 87, -57, -57, -53, 22, 36,
	-110, -111, 107, -109, -170, -175, -253, -93, -170, -170,
	-57, -58, -58, -57, -57, -120, -253, -121, 27, 10,
	121, 81, 19, 81, -119, 25, 26, -120, -94, -170,
	88, 91, -68, 81, 12, -61, -82, -172, 128, -176,
	-82, -140, 184, -82, 31, 81, -78, -80, -79, -81,
	62, 66, 68, 63, 64, 65, 69, -179, 23, -69,
	-3, -252, -178, 184, -177, 23, -175, 87, -82, -76,
	-254, 81, 12, 73, -254, 81, 143, -147, -149, 81,
	286, 288, 289, 72, 99, -67, -200, 136, -220, -221,
	-222, -171, 87, 88, -208, -209, -210, -223, 170, -232,
	161, 163, 164, 160, -212, 171, -233, 155, 29, 82,
	-163, 96, 103, -204, 262, -195, -195, -195, -195, -195,
	-199, 237, -199, -199, -199, 80, 80, -195, -195, -195,
	-195, -201, 80, -201, -201, -202, 80, -202, -233, 166,
	-67, -230, -229, -226, 73, 165, 94, 317, -224, -119,
	88, -64, 201, 111, 202, 204, 205, 24, -135, 73,
	-216, -240, 87, -182, -244, 166, 162, 170, 171, 164,
	83, 84, 85, 155, 29, 161, 163, 184, 160, -244,
	-166, -167, 157, 23, 155, 29, 184, -82, -82, -82,
	-82, -82, 151, 148, 192, -82, -82, -82, -183, -82,
	-159, -175, -175, -82, -159, -82, -170, 96, 97, 98,
	-101, -93, -93, -93, -56, 179, 102, -253, -253, -57,
	-57, -252, 143, -5, -120, -253, -253, 81, 73, 23,
	12, 12, -253, 12, 12, -253, -253, -57, -113, -111,
	109, -67, -253, 143, -253, 81, 81, -253, -253, -253,
	-253, -253, -136, 38, 46, 57, -67, -67, -118, -136,
	-151, 20, 12, 53, 53, -87, 13, -59, -69, -61,
	143, -87, -91, 31, 53, -3, -252, -252, -143, -146,
	-109, -70, -71, -71, -70, -71, 62, 62, 62, 67,
	62, 67, 62, -79, -175, -253, -253, -3, -86, 70,
	158, 71, -252, -177, -140, 73, -69, -82, -69, -84,
	-175, 128, -148, -150, 290, 287, 293, -240, 87, 81,
	-222, 111, -211, 80, -240, 29, -212, -212, -212, -215,
	-240, -215, 29, -197, 30, 96, -205, 263, -199, -199,
	-200, 31, -200, -200, -200, -207, 87, -207, 88, 88,
	82, -231, -227, -228, 32, 76, -226, -240, -216, 87,
	37, 82, 156, 208, -66, 300, 87, 83, 72, -170,
	-240, 87, -182, -182, -82, -182, -170, -242, 73, 190,
	259, 190, 193, 157, -183, -155, -155, -56, 102, -93,
	-93, -253, -253, -58, -171, -116, -136, -187, 137, 234,
	178, 232, 228, 248, 239, 261, 230, 262, -184, -187,
	-93, -93, -93, -93, 314, -116, 110, -67, 108, -171,
	-93, -93, 39, 87, 87, 58, -82, -114, 14, -67,
	128, -120, -142, 72, -143, -103, -105, -104, -252, -137,
	-253, -170, -141, -170, -87, 81, 111, -74, -73, 72,
	73, -75, 72, -73, 62, 62, -253, 155, 155, 155,
	-141, -87, -69, -87, -87, 143, 287, 291, 292, -221,
	-222, -225, -232, 171, -215, -215, -215, 80, -198, 72,
	-93, -200, -200, -240, 137, 82, 81, 82, 81, 82,
	81, -164, 352, 103, -228, -227, -216, -216, 88, 87,
	-82, -63, 199, 206, 80, 84, -82, 27, -239, 317,
	-241, -240, -170, -170, -170, -82, -159, -159, -93, -253,
	-120, -253, -195, -195, -195, -202, -195, 222, -195, 222,
	-253, -253, 20, 20, 20, 20, -252, -51, 310, -67,
	81, 81, 87, -199, -115, 15, 17, 28, -142, 81,
	-253, -253, 81, 53, 143, -253, 81, -116, -146, -67,
	-67, 80, -67, -252, -252, -252, -253, -116, -87, 82,
	-138, -170, -203, 259, 10, -199, 87, -199, 88, 88,
	352, 30, 77, 78, 79, 30, 74, 75, -139, 80,
	82, -252, -238, -237, -171, 80, 73, -136, -199, -240,
	-93, -93, -93, -93, -93, -120, 87, -93, -93, -199,
	-123, -128, -157, -67, -102, 29, -105, 53, -3, -170,
	-103, -170, -170, -120, -138, -138, -253, -138, -138, -178,
	-120, -230, 82, 81, -206, 161, 29, 160, -96, -200,
	-200, 82, 82, 23, -138, -234, -235, 184, 81, 111,
	-138, -82, -253, -253, -253, -253, -52, 121, 317, -253,
	-253, -253, -126, 402, -129, 42, -130, 43, 10, -103,
	143, 82, -253, -253, -253, -86, 173, -170, -196, 94,
	29, 29, -3, 82, -253, 81, -170, -237, -222, 82,
	-253, 315, 69, 318, -123, 47, 240, -131, 51, -132,
	-127, 52, 17, -143, -170, -82, 87, -45, 317, -235,
	53, -242, 58, 316, 319, -124, 49, -122, 48, -122,
	-130, 17, -133, 44, 45, 87, 80, -46, 198, 207,
	186, -239, 58, -125, 50, 72, 99, 87, 17, 17,
	-138, 166, 187, 317, 72, 99, 87, 87, 82, 200,
	-252, 318, -247, -248, 72, -93, 183, 319, -248, 72,
	11, 10, -253, -253, -246, 174, 169, 172, 31, -246,
	168, 30, 96,
}

var yyDef = [...]int{
	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 659,
	0, 398, 398, 398, 398, 398, 398, 398, 0, 0,
	-2, -2, 0, 34, 0, 0, 0, 0, -2, 363,
	364, 0, 366, -2, 0, 0, 375, 1142, 1142, 0,
	0, 1142, 0, 0, 1140, 51, 52, 381, 382, 383,
	1, 3, 0, 402, 667, 0, 0, -2, 400, 0,
	0, 774, 774, 774, 0, 80, 81, 0, 0, 0,
	683, 772, 0, 772, 0, 792, 793, 794, 99, 100,
	84, -2, 104, 105, 0, 109, 98, 0, 0, 0,
	108, 35, 31, 32, 33, 0, 770, 0, 770, 770,
	0, 308, 482, 801, 802, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 0, 0, 0,
	354, 0, 357, 357, 357, 357, 323, 0, 325, 1143,
	0, 0, 0, 332, 0, 0, 338, 354, 1143, 346,
	360, 361, 348, 343, 344, 362, 365, 0, 370, 373,
	797, 798, 0, 388, 0, 980, 380, 393, 394, 1142,
	1142, 397, 36, 533, 492, 0, 498, 500, 0, 535,
	536, 537, 538, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 567, 568, 644, 645,
	646, 647, 648, 649, 650, 651, 502, 503, 641, 0,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 602, 602, 602, 602, 602, 602, 602, 602,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 1142,
	659, 47, 0, 398, 403, 404, 702, 0, 0, 659,
	1141, 0, 0, -2, -2, 414, 420, 421, 422, 423,
	399, 0, 426, 430, 0, 0, 0, 775, 0, 0,
	66, 0, 1112, 755, -2, -2, 0, 0, 799, 800,
	-2, 943, -2, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 0, 0, 116, 117,
	0, 0, 238, 945, 114, 0, 232, 173, 696, 0,
	0, 0, 0, 0, 86, 106, 107, 0, 215, 0,
	1143, 0, 0, 0, 0, -2, 0, 300, 0, 0,
	0, 0, 0, 0, 307, 0, 309, 1143, 354, 312,
	0, 0, 1143, 1143, 1143, 0, 1143, 1143, 319, 0,
	320, 321, 322, 0, 223, 224, 225, 326, 1144, 1145,
	1143, 1143, 351, 0, 351, 349, 350, 341, 342, 0,
	357, 335, 336, 339, 340, 371, 374, 391, 389, 390,
	392, 384, 385, 386, 387, 0, 395, 396, 0, 0,
	0, 0, 0, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 520, 521, 522, 523, 524, 525, 526,
	499, 0, 513, 0, 0, 0, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 0, 411, 0, 0, 0,
	659, 0, 0, 0, 0, 0, 0, 0, 408, 0,
	633, 0, 586, 594, 0, 587, 595, 588, 596, 589,
	0, 590, 597, 591, 598, 592, 593, 599, 0, 0,
	0, 411, 411, 0, 0, 37, 667, 0, 413, 705,
	0, 0, 668, 660, 661, 664, 667, 0, 435, 424,
	415, 418, 419, 401, 0, 427, 431, 0, 433, 434,
	0, 0, 64, 0, 481, 0, 437, 439, 440, 441,
	463, 0, 465, 0, 0, 0, 60, 62, 482, 0,
	1112, 761, 0, 68, 69, 0, 0, 0, 196, 765,
	766, 767, 763, 255, 0, 0, 184, 180, 124, 125,
	126, 173, 128, 173, 173, 173, 173, 193, 193, 193,
	193, 156, 157, 158, 159, 160, 0, 0, 143, 173,
	173, 173, 173, 163, 164, 165, 166, 167, 168, 169,
	170, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	175, 175, 175, 177, 177, 0, 0, 207, 0, 664,
	0, 687, 0, 0, 95, 0, 795, 97, 215, 0,
	216, 1142, 0, 0, 786, 270, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 771, 0,
	1143, 306, 483, 803, 804, 310, 311, 355, 356, 313,
	314, 315, 316, 317, 318, 358, 0, 226, 227, 327,
	331, 354, 0, 0, 0, 354, 333, 334, 0, 0,
	372, 376, 377, 378, 379, 534, 493, 494, 495, 497,
	514, 0, 516, 518, 504, 505, 529, 530, 531, 0,
	0, 0, 0, 527, 509, 0, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 554, 617,
	618, 0, 552, 553, 564, 0, 0, 0, 412, 642,
	0, -2, 0, 532, 750, 667, 0, 0, 0, 0,
	537, 644, 0, 537, 644, 0, 0, 0, 409, 410,
	639, 636, 0, 0, 641, 0, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 48, 38, 0, 703,
	0, 0, 0, 0, 663, 665, 666, 702, 0, 652,
	0, 0, 490, 0, 0, 416, 44, 432, 428, 0,
	490, 0, 0, 480, 0, 0, 0, 0, 0, 0,
	470, 0, 0, 473, 0, 0, 0, 0, 464, 0,
	0, 0, 485, 1049, 466, 0, 468, 469, -2, 0,
	0, 0, 58, 59, 0, 0, 0, 756, 67, 0,
	0, 72, 73, 757, 758, 759, 760, 0, 101, 256,
	258, 261, 262, 263, 118, 120, 121, 0, 0, 236,
	1059, 1094, 981, 230, 230, 979, 243, 228, 229, 115,
	187, 185, 0, 182, 181, 127, 193, 193, 150, 151,
	196, 0, 196, 196, 196, 0, 0, 144, 145, 146,
	147, 138, 0, 139, 140, 141, 0, 142, 237, 0,
	0, 671, 208, 209, 0, 215, 0, 0, 233, 234,
	0, 0, 0, 0, 684, 685, 686, 773, 0, 0,
	0, 112, 113, 264, 1142, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, 1142,
	0, 1142, 787, 788, 789, 790, 0, 87, 274, 276,
	275, 279, 0, 0, 0, 0, 301, 1143, 305, 351,
	328, 352, 353, 351, 330, 337, 368, 515, 517, 519,
	506, 527, 510, 0, 507, 0, 0, 501, 569, 0,
	0, 411, 0, 659, 702, 573, 574, 0, 0, 0,
	0, 0, 610, 0, 0, 611, 0, 659, 0, 637,
	0, 0, 585, 0, 604, 0, 0, 605, 606, 607,
	608, 609, 40, 0, 0, 0, 669, 670, 662, 39,
	0, 768, 769, 653, 654, 655, 0, 425, 436, 417,
	0, 667, 744, 0, 0, 736, 0, 0, 490, 752,
	0, 438, 459, 461, 0, 456, 471, 472, 474, 0,
	476, 0, 478, 479, 442, 443, 444, 0, 445, 0,
	0, 0, 0, 467, 490, 0, 490, 61, 490, 63,
	0, 484, 70, 71, 0, 0, 77, 197, 198, 0,
	259, 0, 119, 0, 0, 217, 230, 230, 230, 221,
	231, 222, 0, 189, 0, 186, 123, 183, 196, 196,
	152, 0, 153, 154, 155, 0, 171, 0, 0, 0,
	252, 82, 675, 674, 215, 215, 210, 211, 0, 213,
	0, 174, 0, 0, 697, 698, 0, 701, 0, 796,
	110, 111, 265, 266, 267, 268, 0, 90, 0, 0,
	0, 0, 272, 0, 304, 354, 354, 508, 0, 528,
	511, 570, 571, 0, 643, 667, 42, 0, 173, 173,
	622, 173, 177, 625, 173, 627, 173, 630, 0, 0,
	0, 0, 0, 0, 0, 634, 584, 640, 0, 642,
	0, 0, 0, 193, 707, 704, 41, 657, 0, 491,
	429, 45, 49, 0, 744, 735, 746, 748, 0, 0,
	0, 740, 0, 451, 659, 0, 0, 453, 460, 0,
	0, 454, 0, 455, 475, 477, -2, 0, 0, 0,
	0, 659, 490, 56, 57, 0, 74, 75, 76, 257,
	260, 0, 235, 0, 218, 219, 220, 0, 191, 0,
	188, 148, 149, 194, 195, 193, 0, 193, 0, 178,
	0, 244, 253, 0, 672, 673, 0, 0, 212, 214,
	447, 688, 689, 690, 0, 700, 96, 0, 273, 0,
	88, 89, 0, 0, 278, 302, 324, 329, 512, 572,
	702, 575, 619, 193, 623, 624, 626, 628, 629, 631,
	577, 576, 0, 0, 0, 0, 0, 667, 0, 638,
	0, 0, 193, 727, 46, 0, 0, 0, 50, 0,
	749, 0, 0, 0, 0, 65, 0, 667, 753, 754,
	457, 0, 462, 0, 0, 0, 465, 667, 55, 207,
	0, 449, 199, 192, 0, 196, 172, 196, 0, 0,
	254, 676, 677, 678, 679, 680, 681, 682, 0, 0,
	699, 0, 91, 92, 0, 0, 0, 43, 620, 621,
	0, 0, 0, 0, 612, 0, 635, 0, 0, 709,
	708, 721, 725, 658, 656, 0, 747, 0, 739, 742,
	738, 741, 452, 53, 0, 0, 487, 0, 0, 485,
	54, 206, 0, 0, 204, 0, 201, 203, 190, 161,
	162, 176, 179, 0, 0, 0, 296, 0, 0, 0,
	0, 280, 578, 580, 579, 581, 0, 0, 0, 583,
	600, 601, 727, 0, 720, 723, -2, 0, 0, 737,
	0, 458, 486, 488, 489, 446, 0, 450, 122, 0,
	200, 202, 691, 448, 295, 0, 0, 93, 94, 87,
	582, 0, 0, 0, 714, 712, 712, 725, 0, 729,
	0, 734, 0, 745, 743, 0, 205, 83, 693, 297,
	0, 90, 613, 0, 616, 717, 0, 710, 713, 711,
	722, 0, 728, 0, 0, 726, 0, 0, 694, 695,
	0, 277, 614, 706, 0, 715, 716, 724, 0, 0,
	0, 0, 0, 0, 718, 719, 730, 732, 239, 692,
	0, 0, 240, 241, 0, 0, 0, 615, 242, 0,
	0, 0, 298, 299, 245, 247, 248, 0, 0, 246,
	249, 250, 251,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 406,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:377
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:382
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:416
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:435
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:445
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Load{}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:457
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:466
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:470
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:474
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:497
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:525
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:535
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:542
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:554
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
			yyVAL.insertAction = InsertAct
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:599
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.partitions = nil
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:639
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:659
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.characteristic = ReadWrite
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyVAL.characteristic = ReadOnly
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:673
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:685
		{
			yyVAL.isolationLevel = Serializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.scope = SessionScope
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.scope = GlobalScope
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:701
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:707
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:714
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 83:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:721
		{
			yyVAL.statement = &CreateView{ViewName: yyDollar[7].tableName.ToViewName(), IsReplace: yyDollar[2].boolean, Algorithm: yyDollar[3].str, Definer: yyDollar[4].str, Security: yyDollar[5].str, Columns: yyDollar[8].columns, Select: yyDollar[10].selStmt, CheckOption: yyDollar[11].str}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:725
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:732
		{
			yyVAL.boolean = false
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:736
		{
			yyVAL.boolean = true
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:741
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:756
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:784
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:791
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, IndexType: yyDollar[5].str, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:822
		{
			yyVAL.collateAndCharsets = nil
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:849
		{
			yyVAL.boolean = false
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.boolean = true
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:859
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:863
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:869
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:873
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:880
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:904
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:909
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:919
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1151
		{
			yyVAL.literal = nil
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1160
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1164
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1172
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1182
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1190
		{
			yyVAL.boolean = false
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.boolean = true
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1199
		{
			yyVAL.boolean = false
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.boolean = true
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1209
		{
			yyVAL.boolean = false
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.boolean = false
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1217
		{
			yyVAL.boolean = true
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1222
		{
			yyVAL.optVal = nil
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1231
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1240
		{
			yyVAL.boolean = false
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.boolean = true
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1270
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1275
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.colKeyOpt = colKey
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1296
		{
			yyVAL.literal = nil
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1306
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.indexOptions = nil
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1315
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1335
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1344
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1350
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1376
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1386
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = ""
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1430
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1434
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1440
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1446
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1466
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 240:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1470
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 241:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1474
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1478
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1488
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1527
		{
			yyVAL.boolean = true
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1531
		{
			yyVAL.boolean = true
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.boolean = false
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1548
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1596
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1601
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1614
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1621
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1714
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1730
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 299:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1734
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1750
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 304:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1762
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1797
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1802
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1856
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1881
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1903
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = "extended "
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = "full "
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.showFilter = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.showFilter = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.scope = ImplicitScope
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.scope = SessionScope
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.scope = GlobalScope
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2051
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &Begin{}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &Begin{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &Commit{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = &Rollback{}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2084
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2087
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2094
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2105
		{
			yyVAL.explainType = EmptyType
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2109
		{
			yyVAL.explainType = JSONType
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.explainType = TreeType
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.explainType = VitessType
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.explainType = TraditionalType
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.explainType = AnalyzeType
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2135
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.statement = &OtherRead{}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2186
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2208
		{
			setAllowComments(yylex, true)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2218
		{
			yyVAL.bytes2 = nil
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.boolean = true
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.boolean = false
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.boolean = true
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2241
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.str = SQLCacheStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2254
		{
			yyVAL.boolean = false
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.boolean = true
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.boolean = true
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2267
		{
			yyVAL.selectExprs = nil
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2276
		{
			yyVAL.strs = nil
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2292
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.str = SQLCacheStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = DistinctStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = DistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = StraightJoinHint
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2324
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2346
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2351
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2359
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2371
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2381
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2385
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2419
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2424
		{
			yyVAL.columns = nil
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2465
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2469
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2481
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2491
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2496
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2501
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.joinType = NormalJoinType
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.joinType = NormalJoinType
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.joinType = NormalJoinType
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2536
		{
			yyVAL.joinType = StraightJoinType
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.joinType = LeftJoinType
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2546
		{
			yyVAL.joinType = LeftJoinType
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.joinType = RightJoinType
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2554
		{
			yyVAL.joinType = RightJoinType
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2574
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2599
		{
			yyVAL.indexHints = nil
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2603
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2607
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2611
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2615
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = nil
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2760
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2799
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2929
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2951
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3072
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3111
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 601:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.matchExprOption = NoOption
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3173
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3177
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3181
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3185
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3231
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3239
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3243
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3251
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = nil
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = string("")
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3285
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3290
		{
			yyVAL.expr = nil
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3308
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = &NullVal{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3348
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3366
		{
			yyVAL.exprs = nil
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3370
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3375
		{
			yyVAL.expr = nil
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3379
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3384
		{
			yyVAL.orderBy = nil
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3388
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3398
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3404
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3409
		{
			yyVAL.orderDirection = AscOrder
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.orderDirection = AscOrder
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.orderDirection = DescOrder
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3422
		{
			yyVAL.limit = nil
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3426
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3430
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3434
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3439
		{
			yyVAL.indexOptions = nil
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3443
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3447
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3462
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3466
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3470
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3474
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3480
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3488
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3493
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3497
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3501
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ""
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = yyDollar[3].str
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3529
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3533
		{
			yyVAL.str = yyDollar[2].str
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3538
		{
			yyVAL.str = "cascaded"
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3542
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3546
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3551
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = yyDollar[3].str
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3569
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'@" + string(yyDollar[2].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3578
		{
			yyVAL.lock = NoLock
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3582
		{
			yyVAL.lock = ForUpdateLock
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3586
		{
			yyVAL.lock = ShareModeLock
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3591
		{
			yyVAL.selectInto = nil
		}
	case 706:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3595
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3599
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3603
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3608
		{
			yyVAL.str = ""
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3612
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3616
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3621
		{
			yyVAL.str = ""
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.str = " header"
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3630
		{
			yyVAL.str = ""
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3634
		{
			yyVAL.str = " manifest on"
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3638
		{
			yyVAL.str = " manifest off"
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3643
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3647
		{
			yyVAL.str = " overwrite on"
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3651
		{
			yyVAL.str = " overwrite off"
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3657
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3662
		{
			yyVAL.str = ""
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3666
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3671
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3675
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3680
		{
			yyVAL.str = ""
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3684
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3689
		{
			yyVAL.str = ""
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3693
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3698
		{
			yyVAL.str = ""
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3702
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3707
		{
			yyVAL.str = ""
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3711
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3716
		{
			yyVAL.str = ""
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3720
		{
			yyVAL.str = " optionally"
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3733
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3737
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3741
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3745
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3749
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3755
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3759
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3763
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3767
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3772
		{
			yyVAL.updateExprs = nil
		}
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3776
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3782
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3786
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3792
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3796
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3802
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3808
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3818
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3822
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3828
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3838
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3844
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3848
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3852
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3856
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3860
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3868
		{
			yyVAL.bytes = []byte("charset")
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3879
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3883
		{
			yyVAL.expr = &Default{}
		}
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3892
		{
			yyVAL.boolean = false
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3894
		{
			yyVAL.boolean = true
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3897
		{
			yyVAL.boolean = false
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3899
		{
			yyVAL.boolean = true
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3902
		{
			yyVAL.ignore = false
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3904
		{
			yyVAL.ignore = true
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3908
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3910
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3912
		{
			yyVAL.empty = struct{}{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3914
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3916
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3918
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3920
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3922
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3924
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3926
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3930
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3932
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3934
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3938
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3940
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3943
		{
			yyVAL.str = ""
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3947
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3952
		{
			yyVAL.str = ""
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3954
		{
			yyVAL.str = yyDollar[2].colIdent.val
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3958
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3969
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3979
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4346
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4355
		{
			decNesting(yylex)
		}
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4360
		{
			skipToEnd(yylex)
		}
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4365
		{
			skipToEnd(yylex)
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4369
		{
			skipToEnd(yylex)
		}
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4373
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

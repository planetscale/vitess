// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	literal              *Literal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	OnlineDDLHint        *OnlineDDLHint
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const WITH_GHOST = 57498
const WITH_PT = 57499
const BEGIN = 57500
const START = 57501
const TRANSACTION = 57502
const COMMIT = 57503
const ROLLBACK = 57504
const SAVEPOINT = 57505
const RELEASE = 57506
const WORK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const TIME = 57521
const TIMESTAMP = 57522
const DATETIME = 57523
const YEAR = 57524
const CHAR = 57525
const VARCHAR = 57526
const BOOL = 57527
const CHARACTER = 57528
const VARBINARY = 57529
const NCHAR = 57530
const TEXT = 57531
const TINYTEXT = 57532
const MEDIUMTEXT = 57533
const LONGTEXT = 57534
const BLOB = 57535
const TINYBLOB = 57536
const MEDIUMBLOB = 57537
const LONGBLOB = 57538
const JSON = 57539
const ENUM = 57540
const GEOMETRY = 57541
const POINT = 57542
const LINESTRING = 57543
const POLYGON = 57544
const GEOMETRYCOLLECTION = 57545
const MULTIPOINT = 57546
const MULTILINESTRING = 57547
const MULTIPOLYGON = 57548
const NULLX = 57549
const AUTO_INCREMENT = 57550
const APPROXNUM = 57551
const SIGNED = 57552
const UNSIGNED = 57553
const ZEROFILL = 57554
const COLLATION = 57555
const DATABASES = 57556
const TABLES = 57557
const VITESS_METADATA = 57558
const VSCHEMA = 57559
const FULL = 57560
const PROCESSLIST = 57561
const COLUMNS = 57562
const FIELDS = 57563
const ENGINES = 57564
const PLUGINS = 57565
const EXTENDED = 57566
const NAMES = 57567
const CHARSET = 57568
const GLOBAL = 57569
const SESSION = 57570
const ISOLATION = 57571
const LEVEL = 57572
const READ = 57573
const WRITE = 57574
const ONLY = 57575
const REPEATABLE = 57576
const COMMITTED = 57577
const UNCOMMITTED = 57578
const SERIALIZABLE = 57579
const CURRENT_TIMESTAMP = 57580
const DATABASE = 57581
const CURRENT_DATE = 57582
const CURRENT_TIME = 57583
const LOCALTIME = 57584
const LOCALTIMESTAMP = 57585
const UTC_DATE = 57586
const UTC_TIME = 57587
const UTC_TIMESTAMP = 57588
const REPLACE = 57589
const CONVERT = 57590
const CAST = 57591
const SUBSTR = 57592
const SUBSTRING = 57593
const GROUP_CONCAT = 57594
const SEPARATOR = 57595
const TIMESTAMPADD = 57596
const TIMESTAMPDIFF = 57597
const MATCH = 57598
const AGAINST = 57599
const BOOLEAN = 57600
const LANGUAGE = 57601
const WITH = 57602
const QUERY = 57603
const EXPANSION = 57604
const UNUSED = 57605
const ARRAY = 57606
const CUME_DIST = 57607
const DESCRIPTION = 57608
const DENSE_RANK = 57609
const EMPTY = 57610
const EXCEPT = 57611
const FIRST_VALUE = 57612
const GROUPING = 57613
const GROUPS = 57614
const JSON_TABLE = 57615
const LAG = 57616
const LAST_VALUE = 57617
const LATERAL = 57618
const LEAD = 57619
const MEMBER = 57620
const NTH_VALUE = 57621
const NTILE = 57622
const OF = 57623
const OVER = 57624
const PERCENT_RANK = 57625
const RANK = 57626
const RECURSIVE = 57627
const ROW_NUMBER = 57628
const SYSTEM = 57629
const WINDOW = 57630
const ACTIVE = 57631
const ADMIN = 57632
const BUCKETS = 57633
const CLONE = 57634
const COMPONENT = 57635
const DEFINITION = 57636
const ENFORCED = 57637
const EXCLUDE = 57638
const FOLLOWING = 57639
const GEOMCOLLECTION = 57640
const GET_MASTER_PUBLIC_KEY = 57641
const HISTOGRAM = 57642
const HISTORY = 57643
const INACTIVE = 57644
const INVISIBLE = 57645
const LOCKED = 57646
const MASTER_COMPRESSION_ALGORITHMS = 57647
const MASTER_PUBLIC_KEY_PATH = 57648
const MASTER_TLS_CIPHERSUITES = 57649
const MASTER_ZSTD_COMPRESSION_LEVEL = 57650
const NESTED = 57651
const NETWORK_NAMESPACE = 57652
const NOWAIT = 57653
const NULLS = 57654
const OJ = 57655
const OLD = 57656
const OPTIONAL = 57657
const ORDINALITY = 57658
const ORGANIZATION = 57659
const OTHERS = 57660
const PATH = 57661
const PERSIST = 57662
const PERSIST_ONLY = 57663
const PRECEDING = 57664
const PRIVILEGE_CHECKS_USER = 57665
const PROCESS = 57666
const RANDOM = 57667
const REFERENCE = 57668
const REQUIRE_ROW_FORMAT = 57669
const RESOURCE = 57670
const RESPECT = 57671
const RESTART = 57672
const RETAIN = 57673
const REUSE = 57674
const ROLE = 57675
const SECONDARY = 57676
const SECONDARY_ENGINE = 57677
const SECONDARY_LOAD = 57678
const SECONDARY_UNLOAD = 57679
const SKIP = 57680
const SRID = 57681
const THREAD_PRIORITY = 57682
const TIES = 57683
const UNBOUNDED = 57684
const VCPU = 57685
const VISIBLE = 57686
const FORMAT = 57687
const TREE = 57688
const VITESS = 57689
const TRADITIONAL = 57690

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"WITH_GHOST",
	"WITH_PT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	33, 305,
	132, 305,
	144, 305,
	169, 319,
	170, 319,
	-2, 307,
	-1, 47,
	134, 329,
	-2, 327,
	-1, 70,
	38, 365,
	-2, 373,
	-1, 389,
	120, 701,
	-2, 697,
	-1, 390,
	120, 702,
	-2, 698,
	-1, 404,
	38, 366,
	-2, 378,
	-1, 405,
	38, 367,
	-2, 379,
	-1, 429,
	88, 955,
	-2, 72,
	-1, 430,
	88, 871,
	-2, 73,
	-1, 435,
	88, 838,
	-2, 658,
	-1, 437,
	88, 902,
	-2, 660,
	-1, 759,
	56, 54,
	58, 54,
	-2, 58,
	-1, 937,
	120, 704,
	-2, 700,
	-1, 1365,
	5, 617,
	17, 617,
	19, 617,
	31, 617,
	59, 617,
	-2, 404,
}

const yyPrivate = 57344

const yyLast = 17681

var yyAct = [...]int{

	389, 1604, 1594, 1404, 1561, 1292, 1197, 1464, 1477, 1510,
	1042, 1217, 1345, 1038, 1378, 348, 1015, 397, 1198, 1342,
	1051, 1085, 726, 362, 592, 1346, 333, 1041, 1351, 687,
	1357, 1311, 1071, 1136, 924, 931, 1243, 89, 733, 859,
	878, 284, 1269, 304, 284, 1260, 69, 3, 1185, 89,
	434, 284, 1055, 1001, 1017, 406, 736, 753, 731, 957,
	901, 319, 773, 1081, 772, 994, 67, 391, 27, 423,
	559, 420, 770, 1012, 65, 335, 284, 89, 752, 743,
	560, 284, 64, 284, 7, 761, 324, 70, 700, 887,
	6, 331, 5, 1597, 1581, 701, 1592, 1104, 1536, 649,
	648, 658, 659, 651, 652, 653, 654, 655, 656, 657,
	650, 1103, 1569, 660, 320, 1589, 1405, 323, 72, 73,
	74, 75, 76, 581, 1580, 1568, 1328, 1434, 564, 412,
	91, 92, 93, 1372, 392, 29, 1032, 58, 32, 33,
	1373, 1374, 91, 92, 93, 1033, 1034, 621, 271, 428,
	322, 269, 374, 1102, 380, 381, 378, 379, 377, 376,
	375, 280, 276, 277, 278, 321, 1251, 1231, 382, 383,
	1230, 1294, 774, 1232, 775, 616, 414, 1064, 1467, 617,
	614, 615, 1065, 1072, 1425, 1423, 57, 312, 603, 886,
	314, 273, 274, 91, 92, 93, 310, 609, 610, 619,
	1296, 598, 845, 600, 1591, 1588, 1099, 1096, 1097, 601,
	1095, 620, 848, 1562, 1291, 847, 995, 1554, 1312, 1056,
	1612, 582, 29, 30, 58, 32, 33, 1511, 1519, 1295,
	1218, 1220, 934, 325, 1608, 597, 599, 566, 888, 889,
	890, 62, 1513, 1106, 1109, 606, 34, 53, 54, 1288,
	56, 846, 272, 849, 417, 1290, 1297, 852, 623, 1314,
	1058, 836, 1058, 1368, 1367, 431, 1366, 562, 569, 43,
	284, 571, 572, 57, 270, 287, 284, 1537, 583, 275,
	1116, 1543, 284, 1115, 576, 1101, 1447, 279, 284, 590,
	672, 673, 596, 89, 91, 92, 93, 89, 1316, 89,
	1320, 1155, 1315, 1152, 1313, 89, 1227, 1100, 1190, 1318,
	1165, 1144, 1219, 1512, 767, 89, 89, 747, 1317, 685,
	363, 28, 588, 1039, 650, 1028, 595, 660, 660, 879,
	640, 1319, 1321, 91, 92, 93, 1072, 1520, 1518, 36,
	37, 39, 38, 41, 605, 55, 974, 1105, 1567, 28,
	1606, 873, 573, 1607, 574, 1605, 607, 575, 883, 1289,
	958, 1287, 1107, 629, 1057, 1552, 1057, 1528, 42, 61,
	60, 639, 637, 51, 52, 40, 594, 653, 654, 655,
	656, 657, 650, 634, 635, 660, 393, 1391, 640, 79,
	1279, 44, 45, 59, 46, 47, 48, 49, 91, 92,
	93, 632, 584, 585, 586, 1355, 670, 630, 776, 631,
	637, 672, 673, 672, 673, 89, 880, 284, 633, 284,
	284, 908, 1275, 1276, 1277, 1058, 640, 89, 80, 838,
	723, 1330, 688, 89, 558, 906, 907, 905, 874, 1249,
	724, 649, 648, 658, 659, 651, 652, 653, 654, 655,
	656, 657, 650, 1557, 740, 660, 976, 91, 92, 93,
	593, 958, 737, 1162, 703, 705, 707, 709, 711, 713,
	714, 704, 706, 1572, 710, 712, 1473, 715, 771, 1472,
	59, 416, 725, 651, 652, 653, 654, 655, 656, 657,
	650, 760, 751, 660, 1278, 1264, 975, 565, 1137, 1283,
	1280, 1271, 1281, 1274, 641, 1270, 608, 765, 611, 1272,
	1273, 1263, 57, 1613, 622, 638, 639, 637, 638, 639,
	637, 1061, 1252, 1282, 904, 1574, 1332, 1553, 1062, 1057,
	638, 639, 637, 640, 1054, 1052, 640, 1053, 1490, 1150,
	325, 1149, 1470, 1354, 1050, 1056, 1261, 401, 640, 698,
	979, 980, 1129, 1130, 1131, 426, 418, 1614, 1126, 284,
	638, 639, 637, 834, 89, 864, 837, 1151, 839, 284,
	284, 89, 89, 89, 578, 729, 732, 284, 640, 91,
	92, 93, 284, 567, 568, 284, 857, 858, 577, 284,
	66, 89, 1525, 1516, 1590, 1524, 89, 89, 89, 284,
	89, 89, 1387, 638, 639, 637, 1186, 896, 898, 899,
	89, 89, 1059, 602, 897, 431, 863, 602, 1022, 602,
	762, 640, 638, 639, 637, 602, 658, 659, 651, 652,
	653, 654, 655, 656, 657, 650, 735, 28, 660, 861,
	640, 91, 92, 93, 401, 926, 1576, 401, 1516, 1565,
	669, 671, 998, 853, 351, 350, 353, 354, 355, 356,
	1443, 925, 636, 352, 357, 1516, 401, 902, 1516, 1544,
	927, 91, 92, 93, 1527, 1234, 1516, 1515, 1462, 1461,
	1395, 684, 1449, 401, 89, 689, 690, 691, 692, 693,
	694, 695, 696, 998, 699, 702, 702, 702, 708, 702,
	702, 708, 702, 716, 717, 718, 719, 720, 721, 722,
	1446, 401, 1397, 1396, 28, 1393, 1394, 89, 89, 903,
	946, 949, 1393, 1392, 29, 936, 959, 941, 987, 401,
	998, 401, 636, 401, 68, 89, 937, 783, 782, 757,
	688, 971, 284, 763, 763, 89, 29, 988, 1192, 1343,
	284, 981, 1354, 1186, 1193, 967, 968, 997, 284, 284,
	1235, 938, 284, 284, 928, 929, 284, 284, 284, 89,
	1031, 865, 89, 835, 1168, 57, 1497, 987, 1167, 987,
	842, 843, 844, 89, 560, 998, 762, 993, 764, 764,
	766, 762, 394, 989, 987, 881, 977, 57, 937, 1354,
	862, 851, 768, 57, 1013, 866, 867, 868, 29, 870,
	871, 1582, 1479, 891, 892, 893, 894, 1066, 861, 875,
	876, 1454, 1086, 1383, 991, 1021, 1358, 1359, 1599, 1238,
	1073, 1074, 1075, 1082, 1030, 1023, 1026, 284, 89, 1025,
	89, 1029, 1108, 57, 1077, 1076, 284, 284, 284, 284,
	284, 1293, 284, 284, 1046, 1087, 284, 89, 1595, 57,
	1003, 1006, 1007, 1008, 1004, 1480, 1005, 1009, 944, 945,
	1358, 1359, 1089, 284, 935, 1385, 1361, 1343, 284, 1265,
	284, 284, 884, 855, 602, 284, 89, 1211, 1364, 1007,
	1008, 602, 602, 602, 1083, 1084, 1209, 1207, 401, 1363,
	1206, 1210, 1208, 1123, 1205, 1586, 1003, 1006, 1007, 1008,
	1004, 602, 1005, 1009, 1579, 1336, 602, 602, 602, 1175,
	602, 602, 942, 943, 734, 1584, 948, 951, 952, 902,
	602, 602, 1184, 1183, 1256, 781, 935, 591, 649, 648,
	658, 659, 651, 652, 653, 654, 655, 656, 657, 650,
	954, 966, 660, 1037, 969, 970, 727, 431, 1559, 1146,
	431, 1248, 1558, 1495, 955, 1441, 1132, 1246, 728, 1240,
	1475, 1043, 1092, 854, 1011, 1067, 1068, 1069, 1070, 395,
	396, 903, 1182, 398, 1440, 399, 1339, 68, 390, 284,
	1181, 1078, 1079, 1080, 1174, 1439, 1186, 618, 1156, 284,
	284, 284, 284, 284, 1179, 1153, 1145, 392, 1601, 1600,
	394, 284, 877, 741, 1601, 284, 1161, 1541, 66, 284,
	1468, 973, 71, 284, 1199, 90, 63, 1, 1593, 285,
	1406, 1476, 285, 1098, 1560, 1509, 1178, 90, 1377, 285,
	1233, 1194, 89, 1049, 1187, 1189, 1040, 1091, 78, 1093,
	557, 1239, 1236, 77, 1551, 1244, 1244, 1201, 1202, 872,
	1204, 1216, 1188, 1212, 285, 90, 1120, 1437, 604, 285,
	1223, 285, 1225, 1222, 1226, 1048, 1047, 1200, 1014, 1517,
	1203, 1466, 757, 1060, 1250, 1255, 757, 1257, 1258, 1259,
	89, 89, 1245, 1063, 1228, 1384, 1224, 1247, 1556, 789,
	1253, 1254, 787, 788, 786, 791, 1241, 1242, 649, 648,
	658, 659, 651, 652, 653, 654, 655, 656, 657, 650,
	89, 790, 660, 1262, 648, 658, 659, 651, 652, 653,
	654, 655, 656, 657, 650, 1163, 785, 660, 297, 1284,
	885, 311, 1010, 777, 1088, 89, 742, 81, 1286, 1285,
	407, 925, 1176, 1177, 732, 1094, 1268, 882, 602, 294,
	602, 612, 1299, 1300, 408, 1141, 1142, 1301, 613, 1310,
	299, 738, 739, 410, 268, 409, 668, 602, 1180, 1307,
	1229, 284, 432, 1323, 1309, 1322, 1159, 407, 425, 1349,
	978, 89, 730, 1438, 1338, 1160, 89, 89, 1329, 1344,
	697, 408, 956, 756, 334, 936, 895, 349, 404, 405,
	410, 346, 409, 347, 982, 1191, 937, 1347, 642, 1199,
	332, 326, 89, 755, 748, 1002, 1000, 999, 421, 1360,
	1043, 1356, 754, 986, 1362, 403, 89, 1433, 89, 89,
	1535, 402, 1244, 1244, 953, 50, 1353, 625, 1376, 316,
	1369, 31, 411, 22, 21, 20, 1143, 1390, 285, 393,
	1380, 19, 1370, 1375, 285, 18, 284, 1388, 1389, 24,
	285, 17, 16, 1371, 15, 579, 285, 35, 1381, 1382,
	26, 90, 25, 14, 13, 90, 284, 90, 12, 11,
	10, 9, 89, 90, 1407, 89, 89, 89, 284, 8,
	1267, 4, 628, 90, 90, 23, 686, 2, 0, 757,
	0, 0, 0, 0, 0, 1195, 1196, 0, 0, 757,
	757, 757, 757, 757, 1412, 1413, 0, 1416, 0, 1298,
	0, 1399, 0, 1308, 0, 1014, 0, 1221, 1421, 1331,
	0, 0, 0, 757, 0, 0, 1400, 962, 1402, 0,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 1442, 360, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 89, 0, 0, 1308,
	0, 1199, 0, 0, 89, 0, 1236, 0, 1460, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 88, 90, 0, 285, 89, 285, 285, 0,
	0, 602, 0, 0, 313, 90, 0, 400, 0, 0,
	1483, 90, 0, 0, 1043, 1469, 1043, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	602, 0, 433, 0, 0, 0, 0, 89, 89, 0,
	89, 1489, 1482, 0, 0, 89, 0, 89, 89, 89,
	284, 0, 1503, 89, 1504, 1506, 1507, 1347, 1502, 1496,
	1494, 0, 0, 0, 0, 0, 1508, 1514, 0, 0,
	89, 284, 0, 1522, 1521, 1523, 0, 1529, 0, 0,
	0, 0, 1498, 0, 0, 1418, 1419, 0, 1420, 0,
	0, 1422, 0, 1424, 0, 0, 0, 0, 0, 1435,
	1542, 0, 1550, 0, 1348, 0, 28, 89, 0, 1549,
	1548, 1347, 0, 0, 0, 325, 0, 0, 89, 89,
	0, 0, 1452, 0, 0, 1453, 1563, 0, 1455, 1564,
	0, 0, 0, 0, 89, 0, 0, 285, 1570, 0,
	0, 0, 90, 0, 0, 284, 0, 285, 285, 90,
	90, 90, 1463, 89, 1043, 285, 0, 0, 1199, 0,
	285, 1578, 0, 285, 0, 0, 0, 285, 0, 90,
	0, 1583, 1585, 89, 90, 90, 90, 285, 90, 90,
	1587, 1436, 0, 0, 1478, 0, 1598, 0, 90, 90,
	0, 0, 0, 1609, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1431, 0, 0, 1493, 325, 0, 0,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 648, 658, 659, 651, 652, 653, 654,
	655, 656, 657, 650, 0, 0, 660, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 0, 433, 0, 433, 0, 0, 0, 0, 0,
	433, 0, 90, 0, 288, 0, 0, 0, 0, 0,
	624, 626, 0, 291, 0, 0, 0, 1456, 1457, 1458,
	0, 298, 0, 649, 648, 658, 659, 651, 652, 653,
	654, 655, 656, 657, 650, 90, 90, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 1043, 0, 602,
	0, 0, 0, 90, 0, 296, 1430, 0, 0, 0,
	285, 303, 0, 90, 0, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 0, 285, 285, 0, 0,
	285, 285, 0, 0, 285, 285, 285, 90, 0, 0,
	90, 0, 0, 289, 1348, 0, 28, 0, 1429, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 292, 433, 301, 302, 308, 1526, 0, 778, 293,
	295, 305, 0, 290, 307, 306, 649, 648, 658, 659,
	651, 652, 653, 654, 655, 656, 657, 650, 1348, 0,
	660, 0, 0, 0, 0, 285, 90, 0, 90, 0,
	0, 0, 0, 1428, 285, 285, 285, 285, 285, 0,
	285, 285, 0, 0, 285, 90, 0, 0, 649, 648,
	658, 659, 651, 652, 653, 654, 655, 656, 657, 650,
	0, 285, 660, 0, 0, 0, 285, 0, 285, 285,
	644, 0, 647, 285, 90, 0, 0, 0, 661, 662,
	663, 664, 665, 666, 667, 0, 645, 646, 643, 649,
	648, 658, 659, 651, 652, 653, 654, 655, 656, 657,
	650, 0, 0, 660, 0, 0, 0, 0, 0, 0,
	0, 0, 1596, 649, 648, 658, 659, 651, 652, 653,
	654, 655, 656, 657, 650, 0, 0, 660, 0, 433,
	0, 0, 0, 0, 0, 0, 433, 433, 433, 649,
	648, 658, 659, 651, 652, 653, 654, 655, 656, 657,
	650, 0, 0, 660, 0, 0, 433, 0, 0, 0,
	0, 433, 433, 433, 0, 433, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 433, 433, 285, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 285, 285, 285,
	285, 285, 1302, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 285, 0, 0, 0, 285, 0, 0,
	0, 285, 649, 648, 658, 659, 651, 652, 653, 654,
	655, 656, 657, 650, 0, 0, 660, 0, 0, 0,
	90, 0, 1138, 0, 939, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 433, 649, 648, 658, 659, 651, 652, 653, 654,
	655, 656, 657, 650, 0, 960, 660, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 90, 90,
	0, 0, 964, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	745, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 433, 0, 0, 433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 90, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 0, 433, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 90, 0, 90, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 1139, 0, 0, 0, 1140,
	90, 0, 0, 90, 90, 90, 285, 0, 0, 0,
	1147, 1148, 0, 0, 0, 0, 1154, 0, 0, 1157,
	1158, 0, 0, 0, 0, 0, 0, 1164, 0, 0,
	0, 1166, 0, 0, 1169, 1170, 1171, 1172, 1173, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1214, 1215, 0, 960, 90, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 90, 90, 0, 90, 0,
	0, 0, 0, 90, 0, 90, 90, 90, 285, 0,
	0, 90, 0, 0, 0, 1266, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 285,
	0, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 361, 433, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 422, 0, 0,
	433, 0, 561, 0, 563, 0, 90, 90, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 309, 0,
	0, 433, 90, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 433, 415, 960, 0,
	424, 1350, 1352, 0, 1365, 283, 0, 283, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 433, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 900, 0, 0, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 0, 1403, 0, 1417,
	1408, 1409, 1410, 0, 0, 0, 0, 0, 0, 0,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 1448,
	0, 570, 0, 0, 0, 0, 0, 580, 0, 0,
	0, 0, 0, 587, 0, 0, 0, 1459, 0, 589,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 433, 0, 283, 0, 0, 0,
	0, 433, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 1501, 0, 0, 0, 0,
	1465, 0, 1465, 1465, 1465, 0, 0, 0, 1379, 0,
	0, 0, 1531, 1532, 1533, 1534, 0, 1538, 0, 1539,
	1540, 0, 0, 0, 0, 1465, 0, 0, 750, 0,
	0, 759, 1545, 0, 1546, 1547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1555, 1566, 0, 0, 0, 0, 415, 1133,
	1134, 1135, 0, 433, 433, 0, 0, 0, 0, 0,
	0, 283, 0, 283, 283, 0, 0, 960, 1575, 1571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 1577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1610, 1611, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	784, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 841, 0, 0, 0, 0, 0, 794, 850, 0,
	0, 0, 0, 422, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 283, 283, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 283, 0, 0, 283,
	0, 0, 0, 860, 0, 0, 820, 823, 824, 825,
	826, 827, 828, 283, 829, 830, 831, 832, 833, 808,
	809, 810, 811, 792, 793, 821, 0, 795, 0, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 812,
	813, 814, 815, 816, 817, 818, 819, 0, 0, 0,
	1303, 1304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 1325, 0, 1326, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 415,
	860, 0, 0, 990, 415, 415, 0, 0, 415, 415,
	415, 996, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 0, 0, 0, 0, 0,
	0, 0, 0, 415, 415, 415, 415, 415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 1386, 860, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 283, 1019, 0, 0, 283, 283, 0, 0,
	283, 1027, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 1110, 1111, 1112,
	1113, 1114, 0, 1117, 1118, 1414, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 283, 283, 283, 283, 0, 283, 283, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 283, 0, 1124, 1125, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 1488, 0, 415, 415, 1491,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 415, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 961, 283, 283, 283, 283, 283, 0, 0,
	0, 0, 0, 0, 0, 1213, 0, 0, 0, 283,
	0, 0, 0, 1019, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1019, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1573, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 961, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 283,
	0, 0, 91, 92, 93, 0, 1044, 1045, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	1237, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 1044, 1045, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 57,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 1341, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 1028, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 992, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 436, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 437, 435, 430, 429, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 769,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 436, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 437, 435, 430, 429, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 543, 531, 0,
	488, 546, 461, 478, 554, 479, 482, 519, 446, 501,
	180, 476, 0, 465, 441, 472, 442, 463, 490, 123,
	494, 460, 533, 504, 545, 152, 0, 466, 552, 154,
	510, 0, 227, 168, 0, 0, 0, 492, 535, 499,
	528, 487, 520, 451, 509, 547, 477, 517, 548, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 514, 542, 474, 516, 518,
	556, 440, 511, 0, 444, 447, 553, 538, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 491, 500, 525,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 467,
	0, 508, 0, 0, 0, 448, 445, 0, 0, 0,
	0, 489, 0, 0, 0, 450, 0, 468, 526, 0,
	438, 132, 530, 537, 486, 286, 541, 484, 483, 544,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 534, 464, 473, 117, 471, 209,
	187, 248, 507, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 427,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 436, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 443, 0, 228,
	251, 267, 111, 459, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 437, 435, 430, 429, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 455, 458, 453,
	454, 502, 503, 549, 550, 551, 527, 449, 0, 456,
	457, 0, 532, 539, 540, 506, 94, 103, 153, 264,
	202, 128, 252, 439, 452, 121, 462, 0, 0, 475,
	480, 481, 493, 495, 496, 497, 498, 505, 512, 513,
	515, 521, 522, 523, 524, 529, 536, 555, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	932, 0, 330, 0, 0, 0, 123, 0, 329, 0,
	0, 0, 152, 0, 933, 373, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 351, 350, 353, 354, 355, 356, 0, 0,
	113, 352, 357, 358, 359, 0, 0, 0, 0, 327,
	344, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 342, 413, 0, 0, 0, 387, 0,
	343, 0, 0, 336, 337, 339, 338, 340, 345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 386,
	0, 0, 286, 0, 0, 384, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 0, 0, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 374, 385, 380, 381, 378, 379,
	377, 376, 375, 388, 366, 367, 368, 369, 371, 0,
	382, 383, 370, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 330,
	0, 0, 0, 123, 0, 329, 0, 0, 0, 152,
	0, 0, 373, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 364, 365, 0, 0, 0, 0, 0,
	0, 1035, 0, 57, 0, 0, 91, 92, 93, 351,
	350, 353, 354, 355, 356, 0, 0, 113, 352, 357,
	358, 359, 1036, 0, 0, 0, 327, 344, 0, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	342, 0, 0, 0, 0, 387, 0, 343, 0, 0,
	336, 337, 339, 338, 340, 345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 386, 0, 0, 286,
	0, 0, 384, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 0,
	0, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 374, 385, 380, 381, 378, 379, 377, 376, 375,
	388, 366, 367, 368, 369, 371, 0, 382, 383, 370,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 330, 0, 0, 0,
	123, 0, 329, 0, 0, 0, 152, 0, 0, 373,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 401, 91, 92, 93, 351, 350, 353, 354,
	355, 356, 0, 0, 113, 352, 357, 358, 359, 0,
	0, 0, 0, 327, 344, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 342, 0, 0,
	0, 0, 387, 0, 343, 0, 0, 336, 337, 339,
	338, 340, 345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 386, 0, 0, 286, 0, 0, 384,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 0, 0, 98, 233,
	245, 114, 219, 0, 0, 0, 100, 243, 230, 166,
	145, 146, 99, 0, 205, 122, 130, 119, 179, 240,
	241, 118, 266, 106, 254, 102, 107, 253, 173, 236,
	244, 167, 160, 101, 242, 165, 159, 150, 126, 138,
	197, 157, 198, 139, 170, 169, 171, 0, 0, 0,
	228, 251, 267, 111, 0, 235, 261, 262, 0, 201,
	112, 131, 125, 196, 129, 172, 108, 141, 225, 149,
	156, 204, 265, 186, 210, 115, 250, 226, 374, 385,
	380, 381, 378, 379, 377, 376, 375, 388, 366, 367,
	368, 369, 371, 0, 382, 383, 370, 94, 103, 153,
	264, 202, 128, 252, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 203, 206, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 229, 232,
	238, 239, 249, 256, 259, 135, 246, 260, 180, 0,
	0, 0, 0, 330, 0, 0, 0, 123, 0, 329,
	0, 0, 0, 152, 0, 0, 373, 154, 0, 0,
	227, 168, 0, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	91, 92, 93, 351, 350, 353, 354, 355, 356, 0,
	0, 113, 352, 357, 358, 359, 0, 0, 0, 0,
	327, 344, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 342, 413, 0, 0, 0, 387,
	0, 343, 0, 0, 336, 337, 339, 338, 340, 345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	386, 0, 0, 286, 0, 0, 384, 0, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 0, 0, 0, 117, 0, 209, 187, 248,
	0, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 0, 0, 98, 233, 245, 114, 219,
	0, 0, 0, 100, 243, 230, 166, 145, 146, 99,
	0, 205, 122, 130, 119, 179, 240, 241, 118, 266,
	106, 254, 102, 107, 253, 173, 236, 244, 167, 160,
	101, 242, 165, 159, 150, 126, 138, 197, 157, 198,
	139, 170, 169, 171, 0, 0, 0, 228, 251, 267,
	111, 0, 235, 261, 262, 0, 201, 112, 131, 125,
	196, 129, 172, 108, 141, 225, 149, 156, 204, 265,
	186, 210, 115, 250, 226, 374, 385, 380, 381, 378,
	379, 377, 376, 375, 388, 366, 367, 368, 369, 371,
	0, 382, 383, 370, 94, 103, 153, 264, 202, 128,
	252, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 203, 206, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 222, 223, 229, 232, 238, 239, 249,
	256, 259, 135, 246, 260, 180, 0, 0, 0, 0,
	330, 0, 0, 0, 123, 0, 329, 0, 0, 0,
	152, 0, 0, 373, 154, 0, 0, 227, 168, 0,
	0, 0, 0, 0, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 91, 92, 93,
	351, 950, 353, 354, 355, 356, 0, 0, 113, 352,
	357, 358, 359, 0, 0, 0, 0, 327, 344, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 342, 413, 0, 0, 0, 387, 0, 343, 0,
	0, 336, 337, 339, 338, 340, 345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 386, 0, 0,
	286, 0, 0, 384, 0, 199, 0, 231, 136, 151,
	109, 148, 95, 105, 0, 134, 177, 207, 211, 0,
	0, 0, 117, 0, 209, 187, 248, 0, 189, 208,
	155, 237, 200, 247, 257, 258, 234, 255, 263, 224,
	0, 0, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 374, 385, 380, 381, 378, 379, 377, 376,
	375, 388, 366, 367, 368, 369, 371, 0, 382, 383,
	370, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 330, 0, 0,
	0, 123, 0, 329, 0, 0, 0, 152, 0, 0,
	373, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 351, 947, 353,
	354, 355, 356, 0, 0, 113, 352, 357, 358, 359,
	0, 0, 0, 0, 327, 344, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 342, 413,
	0, 0, 0, 387, 0, 343, 0, 0, 336, 337,
	339, 338, 340, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 386, 0, 0, 286, 0, 0,
	384, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 0, 0, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 374,
	385, 380, 381, 378, 379, 377, 376, 375, 388, 366,
	367, 368, 369, 371, 0, 382, 383, 370, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 330, 0, 0, 0,
	123, 0, 329, 0, 0, 0, 152, 0, 0, 373,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 91, 92, 93, 351, 350, 353, 354,
	355, 356, 0, 0, 113, 352, 357, 358, 359, 0,
	0, 0, 0, 327, 344, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 342, 0, 0,
	0, 0, 387, 0, 343, 0, 0, 336, 337, 339,
	338, 340, 345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 386, 0, 0, 286, 0, 0, 384,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 0, 0, 98, 233,
	245, 114, 219, 0, 0, 0, 100, 243, 230, 166,
	145, 146, 99, 0, 205, 122, 130, 119, 179, 240,
	241, 118, 266, 106, 254, 102, 107, 253, 173, 236,
	244, 167, 160, 101, 242, 165, 159, 150, 126, 138,
	197, 157, 198, 139, 170, 169, 171, 0, 0, 0,
	228, 251, 267, 111, 0, 235, 261, 262, 0, 201,
	112, 131, 125, 196, 129, 172, 108, 141, 225, 149,
	156, 204, 265, 186, 210, 115, 250, 226, 374, 385,
	380, 381, 378, 379, 377, 376, 375, 388, 366, 367,
	368, 369, 371, 0, 382, 383, 370, 94, 103, 153,
	264, 202, 128, 252, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 203, 206, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 229, 232,
	238, 239, 249, 256, 259, 135, 246, 260, 180, 0,
	0, 0, 0, 330, 0, 0, 0, 123, 0, 329,
	0, 0, 0, 152, 0, 0, 373, 154, 0, 0,
	227, 168, 0, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	91, 92, 93, 351, 350, 353, 354, 355, 356, 0,
	0, 113, 352, 357, 358, 359, 0, 0, 0, 0,
	327, 344, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 342, 0, 0, 0, 0, 387,
	0, 343, 0, 0, 336, 337, 339, 338, 340, 345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	386, 0, 0, 286, 0, 0, 384, 0, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 0, 0, 0, 117, 0, 209, 187, 248,
	0, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 0, 0, 98, 233, 245, 114, 219,
	0, 0, 0, 100, 243, 230, 166, 145, 146, 99,
	0, 205, 122, 130, 119, 179, 240, 241, 118, 266,
	106, 254, 102, 107, 253, 173, 236, 244, 167, 160,
	101, 242, 165, 159, 150, 126, 138, 197, 157, 198,
	139, 170, 169, 171, 0, 0, 0, 228, 251, 267,
	111, 0, 235, 261, 262, 0, 201, 112, 131, 125,
	196, 129, 172, 108, 141, 225, 149, 156, 204, 265,
	186, 210, 115, 250, 226, 374, 385, 380, 381, 378,
	379, 377, 376, 375, 388, 366, 367, 368, 369, 371,
	0, 382, 383, 370, 94, 103, 153, 264, 202, 128,
	252, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 203, 206, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 222, 223, 229, 232, 238, 239, 249,
	256, 259, 135, 246, 260, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	152, 0, 0, 373, 154, 0, 0, 227, 168, 0,
	0, 0, 0, 0, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 91, 92, 93,
	351, 350, 353, 354, 355, 356, 0, 0, 113, 352,
	357, 358, 359, 0, 0, 0, 0, 0, 344, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 342, 0, 0, 0, 0, 387, 0, 343, 0,
	0, 336, 337, 339, 338, 340, 345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 386, 0, 0,
	286, 0, 0, 384, 0, 199, 0, 231, 136, 151,
	109, 148, 95, 105, 0, 134, 177, 207, 211, 0,
	0, 0, 117, 0, 209, 187, 248, 1603, 189, 208,
	155, 237, 200, 247, 257, 258, 234, 255, 263, 224,
	0, 0, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 374, 385, 380, 381, 378, 379, 377, 376,
	375, 388, 366, 367, 368, 369, 371, 0, 382, 383,
	370, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 152, 0, 0,
	373, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 401, 91, 92, 93, 351, 350, 353,
	354, 355, 356, 0, 0, 113, 352, 357, 358, 359,
	0, 0, 0, 0, 0, 344, 0, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 342, 0,
	0, 0, 0, 387, 0, 343, 0, 0, 336, 337,
	339, 338, 340, 345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 386, 0, 0, 286, 0, 0,
	384, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 0, 0, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 374,
	385, 380, 381, 378, 379, 377, 376, 375, 388, 366,
	367, 368, 369, 371, 0, 382, 383, 370, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 373, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 91, 92, 93, 351, 350, 353, 354, 355, 356,
	0, 0, 113, 352, 357, 358, 359, 0, 0, 0,
	0, 0, 344, 0, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 342, 0, 0, 0, 0,
	387, 0, 343, 0, 0, 336, 337, 339, 338, 340,
	345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 386, 0, 0, 286, 0, 0, 384, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 0, 0, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 374, 385, 380, 381,
	378, 379, 377, 376, 375, 388, 366, 367, 368, 369,
	371, 0, 382, 383, 370, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 648, 658,
	659, 651, 652, 653, 654, 655, 656, 657, 650, 0,
	0, 660, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 286, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 0, 0, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 0, 0, 228, 251, 267, 111, 0,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 153, 264, 202, 128, 252, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	135, 246, 260, 180, 0, 0, 0, 744, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 227, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 746,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 638, 639, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 286, 0,
	0, 0, 0, 199, 0, 231, 136, 151, 109, 148,
	95, 105, 0, 134, 177, 207, 211, 0, 0, 0,
	117, 0, 209, 187, 248, 0, 189, 208, 155, 237,
	200, 247, 257, 258, 234, 255, 263, 224, 0, 0,
	98, 233, 245, 114, 219, 0, 0, 0, 100, 243,
	230, 166, 145, 146, 99, 0, 205, 122, 130, 119,
	179, 240, 241, 118, 266, 106, 254, 102, 107, 253,
	173, 236, 244, 167, 160, 101, 242, 165, 159, 150,
	126, 138, 197, 157, 198, 139, 170, 169, 171, 0,
	0, 0, 228, 251, 267, 111, 0, 235, 261, 262,
	0, 201, 112, 131, 125, 196, 129, 172, 108, 141,
	225, 149, 156, 204, 265, 186, 210, 115, 250, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 153, 264, 202, 128, 252, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 203, 206, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 222, 223,
	229, 232, 238, 239, 249, 256, 259, 135, 246, 260,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 227, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 85, 86, 0, 82, 0, 0, 0, 87,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 0, 0, 0, 117, 0, 209,
	187, 248, 0, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	0, 1018, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 1020, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 286, 0, 0, 0, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 0, 0, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 227, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 286, 0, 0, 0, 0, 199, 0, 231, 136,
	151, 109, 148, 95, 105, 0, 134, 177, 207, 211,
	0, 0, 0, 117, 0, 209, 187, 248, 0, 189,
	208, 155, 237, 200, 247, 257, 258, 234, 255, 263,
	224, 0, 0, 98, 233, 245, 114, 219, 0, 0,
	0, 100, 243, 230, 166, 145, 146, 99, 0, 205,
	122, 130, 119, 179, 240, 241, 118, 266, 106, 254,
	102, 107, 253, 173, 236, 244, 167, 160, 101, 242,
	165, 159, 150, 126, 138, 197, 157, 198, 139, 170,
	169, 171, 0, 0, 0, 228, 251, 267, 111, 0,
	235, 261, 262, 0, 201, 112, 131, 125, 196, 129,
	172, 108, 141, 225, 149, 156, 204, 265, 186, 210,
	115, 250, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 153, 264, 202, 128, 252, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	203, 206, 212, 213, 214, 215, 216, 217, 218, 220,
	221, 222, 223, 229, 232, 238, 239, 249, 256, 259,
	135, 246, 260, 180, 0, 0, 0, 1018, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 227, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 1020,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 286, 0,
	0, 0, 0, 199, 0, 231, 136, 151, 109, 148,
	95, 105, 0, 134, 177, 207, 211, 0, 0, 0,
	117, 0, 209, 187, 248, 0, 1016, 208, 155, 237,
	200, 247, 257, 258, 234, 255, 263, 224, 0, 0,
	98, 233, 245, 114, 219, 0, 0, 0, 100, 243,
	230, 166, 145, 146, 99, 0, 205, 122, 130, 119,
	179, 240, 241, 118, 266, 106, 254, 102, 107, 253,
	173, 236, 244, 167, 160, 101, 242, 165, 159, 150,
	126, 138, 197, 157, 198, 139, 170, 169, 171, 0,
	0, 0, 228, 251, 267, 111, 0, 235, 261, 262,
	0, 201, 112, 131, 125, 196, 129, 172, 108, 141,
	225, 149, 156, 204, 265, 186, 210, 115, 250, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 153, 264, 202, 128, 252, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 203, 206, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 222, 223,
	229, 232, 238, 239, 249, 256, 259, 135, 246, 260,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 227, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 0, 984, 0, 0,
	985, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 286, 0, 0, 0, 0,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 0, 0, 0, 117, 0, 209,
	187, 248, 0, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 135, 246, 260, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 780, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 779, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 286, 0, 0, 0, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 0, 0, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 286,
	0, 0, 0, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 0,
	0, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 227, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 286, 0, 0, 0,
	0, 199, 0, 231, 136, 151, 109, 148, 95, 105,
	0, 134, 177, 207, 211, 0, 0, 0, 117, 0,
	209, 187, 248, 0, 189, 208, 155, 237, 200, 247,
	257, 258, 234, 255, 263, 224, 0, 0, 98, 233,
	245, 114, 219, 0, 0, 0, 100, 243, 230, 166,
	145, 146, 99, 0, 205, 122, 130, 119, 179, 240,
	241, 118, 266, 106, 254, 102, 107, 253, 173, 236,
	244, 167, 160, 101, 242, 165, 159, 150, 126, 138,
	197, 157, 198, 139, 170, 169, 171, 0, 0, 0,
	228, 251, 267, 111, 0, 235, 261, 262, 0, 201,
	112, 131, 125, 196, 129, 172, 108, 141, 225, 149,
	156, 204, 265, 186, 210, 115, 250, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 153,
	264, 202, 128, 252, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 203, 206, 212, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 229, 232,
	238, 239, 249, 256, 259, 135, 246, 260, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	227, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 1020, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 286, 0, 0, 0, 0, 199, 0,
	231, 136, 151, 109, 148, 95, 105, 0, 134, 177,
	207, 211, 0, 0, 0, 117, 0, 209, 187, 248,
	0, 189, 208, 155, 237, 200, 247, 257, 258, 234,
	255, 263, 224, 0, 0, 98, 233, 245, 114, 219,
	0, 0, 0, 100, 243, 230, 166, 145, 146, 99,
	0, 205, 122, 130, 119, 179, 240, 241, 118, 266,
	106, 254, 102, 107, 253, 173, 236, 244, 167, 160,
	101, 242, 165, 159, 150, 126, 138, 197, 157, 198,
	139, 170, 169, 171, 0, 0, 0, 228, 251, 267,
	111, 0, 235, 261, 262, 0, 201, 112, 131, 125,
	196, 129, 172, 108, 141, 225, 149, 156, 204, 265,
	186, 210, 115, 250, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 153, 264, 202, 128,
	252, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 203, 206, 212, 213, 214, 215, 216, 217,
	218, 220, 221, 222, 223, 229, 232, 238, 239, 249,
	256, 259, 135, 246, 260, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 227, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	0, 746, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	286, 0, 0, 0, 0, 199, 0, 231, 136, 151,
	109, 148, 95, 105, 0, 134, 177, 207, 211, 0,
	0, 0, 117, 0, 209, 187, 248, 0, 189, 208,
	155, 237, 200, 247, 257, 258, 234, 255, 263, 224,
	0, 0, 98, 233, 245, 114, 219, 0, 0, 0,
	100, 243, 230, 166, 145, 146, 99, 0, 205, 122,
	130, 119, 179, 240, 241, 118, 266, 106, 254, 102,
	107, 253, 173, 236, 244, 167, 160, 101, 242, 165,
	159, 150, 126, 138, 197, 157, 198, 139, 170, 169,
	171, 0, 0, 0, 228, 251, 267, 111, 0, 235,
	261, 262, 0, 201, 112, 131, 125, 196, 129, 172,
	108, 141, 225, 149, 156, 204, 265, 186, 210, 115,
	250, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 153, 264, 202, 128, 252, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 203,
	206, 212, 213, 214, 215, 216, 217, 218, 220, 221,
	222, 223, 229, 232, 238, 239, 249, 256, 259, 135,
	246, 260, 180, 0, 0, 0, 0, 0, 0, 0,
	749, 123, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 154, 0, 0, 227, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 286, 0, 0,
	0, 0, 199, 0, 231, 136, 151, 109, 148, 95,
	105, 0, 134, 177, 207, 211, 0, 0, 0, 117,
	0, 209, 187, 248, 0, 189, 208, 155, 237, 200,
	247, 257, 258, 234, 255, 263, 224, 0, 0, 98,
	233, 245, 114, 219, 0, 0, 0, 100, 243, 230,
	166, 145, 146, 99, 0, 205, 122, 130, 119, 179,
	240, 241, 118, 266, 106, 254, 102, 107, 253, 173,
	236, 244, 167, 160, 101, 242, 165, 159, 150, 126,
	138, 197, 157, 198, 139, 170, 169, 171, 0, 0,
	0, 228, 251, 267, 111, 0, 235, 261, 262, 0,
	201, 112, 131, 125, 196, 129, 172, 108, 141, 225,
	149, 156, 204, 265, 186, 210, 115, 250, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	153, 264, 202, 128, 252, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 203, 206, 212, 213,
	214, 215, 216, 217, 218, 220, 221, 222, 223, 229,
	232, 238, 239, 249, 256, 259, 135, 246, 260, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 227, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 627, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 286, 0, 0, 0, 0, 199,
	0, 231, 136, 151, 109, 148, 95, 105, 0, 134,
	177, 207, 211, 0, 0, 0, 117, 0, 209, 187,
	248, 0, 189, 208, 155, 237, 200, 247, 257, 258,
	234, 255, 263, 224, 0, 0, 98, 233, 245, 114,
	219, 0, 0, 0, 100, 243, 230, 166, 145, 146,
	99, 0, 205, 122, 130, 119, 179, 240, 241, 118,
	266, 106, 254, 102, 107, 253, 173, 236, 244, 167,
	160, 101, 242, 165, 159, 150, 126, 138, 197, 157,
	198, 139, 170, 169, 171, 0, 0, 0, 228, 251,
	267, 111, 0, 235, 261, 262, 0, 201, 112, 131,
	125, 196, 129, 172, 108, 141, 225, 149, 156, 204,
	265, 186, 210, 115, 250, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 153, 264, 202,
	128, 252, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 203, 206, 212, 213, 214, 215, 216,
	217, 218, 220, 221, 222, 223, 229, 232, 238, 239,
	249, 256, 259, 135, 246, 260, 419, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 227, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 286, 0,
	0, 0, 0, 199, 0, 231, 136, 151, 109, 148,
	95, 105, 0, 134, 177, 207, 211, 0, 0, 0,
	117, 0, 209, 187, 248, 0, 189, 208, 155, 237,
	200, 247, 257, 258, 234, 255, 263, 224, 0, 0,
	98, 233, 245, 114, 219, 0, 0, 0, 100, 243,
	230, 166, 145, 146, 99, 0, 205, 122, 130, 119,
	179, 240, 241, 118, 266, 106, 254, 102, 107, 253,
	173, 236, 244, 167, 160, 101, 242, 165, 159, 150,
	126, 138, 197, 157, 198, 139, 170, 169, 171, 0,
	0, 0, 228, 251, 267, 111, 0, 235, 261, 262,
	0, 201, 112, 131, 125, 196, 129, 172, 108, 141,
	225, 149, 156, 204, 265, 186, 210, 115, 250, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 153, 264, 202, 128, 252, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 203, 206, 212,
	213, 214, 215, 216, 217, 218, 220, 221, 222, 223,
	229, 232, 238, 239, 249, 256, 259, 135, 246, 260,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 227, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 318,
	0, 132, 0, 0, 0, 286, 0, 0, 0, 0,
	199, 0, 231, 136, 151, 109, 148, 95, 105, 0,
	134, 177, 207, 211, 0, 0, 0, 117, 0, 209,
	187, 248, 0, 189, 208, 155, 237, 200, 247, 257,
	258, 234, 255, 263, 224, 0, 0, 98, 233, 245,
	114, 219, 0, 0, 0, 100, 243, 230, 166, 145,
	146, 99, 0, 205, 122, 130, 119, 179, 240, 241,
	118, 266, 106, 254, 102, 107, 253, 173, 236, 244,
	167, 160, 101, 242, 165, 159, 150, 126, 138, 197,
	157, 198, 139, 170, 169, 171, 0, 0, 0, 228,
	251, 267, 111, 0, 235, 261, 262, 0, 201, 112,
	131, 125, 196, 129, 172, 108, 141, 225, 149, 156,
	204, 265, 186, 210, 115, 250, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 153, 264,
	202, 128, 252, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 203, 206, 212, 213, 214, 215,
	216, 217, 218, 220, 221, 222, 223, 229, 232, 238,
	239, 249, 256, 259, 317, 246, 260, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 227,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	281, 0, 286, 0, 0, 0, 0, 199, 0, 231,
	136, 151, 109, 148, 95, 105, 0, 134, 177, 207,
	211, 0, 0, 0, 117, 0, 209, 187, 248, 0,
	189, 208, 155, 237, 200, 247, 257, 258, 234, 255,
	263, 224, 0, 0, 98, 233, 245, 114, 219, 0,
	0, 0, 100, 243, 230, 166, 145, 146, 99, 0,
	205, 122, 130, 119, 179, 240, 241, 118, 266, 106,
	254, 102, 107, 253, 173, 236, 244, 167, 160, 101,
	242, 165, 159, 150, 126, 138, 197, 157, 198, 139,
	170, 169, 171, 0, 0, 0, 228, 251, 267, 111,
	0, 235, 261, 262, 0, 201, 112, 131, 125, 196,
	129, 172, 108, 141, 225, 149, 156, 204, 265, 186,
	210, 115, 250, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 153, 264, 202, 128, 252,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 203, 206, 212, 213, 214, 215, 216, 217, 218,
	220, 221, 222, 223, 229, 232, 238, 239, 249, 256,
	259, 135, 246, 260, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 227, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 286,
	0, 0, 0, 0, 199, 0, 231, 136, 151, 109,
	148, 95, 105, 0, 134, 177, 207, 211, 0, 0,
	0, 117, 0, 209, 187, 248, 0, 189, 208, 155,
	237, 200, 247, 257, 258, 234, 255, 263, 224, 0,
	0, 98, 233, 245, 114, 219, 0, 0, 0, 100,
	243, 230, 166, 145, 146, 99, 0, 205, 122, 130,
	119, 179, 240, 241, 118, 266, 106, 254, 102, 107,
	253, 173, 236, 244, 167, 160, 101, 242, 165, 159,
	150, 126, 138, 197, 157, 198, 139, 170, 169, 171,
	0, 0, 0, 228, 251, 267, 111, 0, 235, 261,
	262, 0, 201, 112, 131, 125, 196, 129, 172, 108,
	141, 225, 149, 156, 204, 265, 186, 210, 115, 250,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 153, 264, 202, 128, 252, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 203, 206,
	212, 213, 214, 215, 216, 217, 218, 220, 221, 222,
	223, 229, 232, 238, 239, 249, 256, 259, 135, 246,
	260,
}
var yyPact = [...]int{

	216, -1000, -284, 1013, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 972, 802, -1000,
	-1000, -1000, -1000, -1000, -1000, 332, 12092, 18, 148, 31,
	16969, 144, 1560, 17316, -1000, 19, -1000, 5, 17316, 10,
	16622, -1000, -1000, -67, -82, -1000, 10010, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 786, 959, 966, 969, 585,
	1166, -1000, 8610, 119, 119, 16275, 7222, -1000, -1000, 338,
	17316, 135, 17316, -136, 101, 101, 101, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 137, 17316,
	519, 519, 229, 524, 510, 17316, 85, 519, 85, 85,
	85, 17316, -1000, 202, -1000, -1000, -1000, 17316, 519, 907,
	364, 70, 4702, -1000, 212, -1000, 4702, 28, 4702, -57,
	985, 29, -21, -1000, 4702, -1000, -1000, -1000, -1000, -1000,
	-1000, 124, -1000, -1000, 17316, 15921, 129, 330, -1000, -1000,
	-1000, -1000, -1000, -1000, 604, 453, -1000, 10010, 1790, 746,
	746, -1000, -1000, 169, -1000, -1000, 11051, 11051, 11051, 11051,
	11051, 11051, 11051, 11051, 11051, 11051, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	746, 199, -1000, 9663, 746, 746, 746, 746, 746, 746,
	746, 746, 10010, 746, 746, 746, 746, 746, 746, 746,
	746, 746, 746, 746, 746, 746, 746, 746, 746, -1000,
	-1000, 972, -1000, 802, -1000, -1000, -1000, 937, 10010, 10010,
	972, -1000, 886, 8610, -1000, -1000, 1129, -1000, -1000, -1000,
	-1000, 384, 1002, -1000, 11745, 197, 15574, -1000, 14533, 17316,
	733, 732, -1000, -1000, 194, 744, 6862, -74, -1000, -1000,
	-1000, 320, 13839, -1000, -1000, -1000, 905, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 679, 17316, -1000,
	2893, -1000, 519, 4702, 128, 519, 349, 519, 17316, 17316,
	4702, 4702, 4702, 35, 84, 81, 17316, -1000, -1000, 743,
	123, 17316, 950, 828, 17316, 519, 519, -1000, 6142, -1000,
	4702, 364, -1000, 501, 10010, 4702, 4702, 4702, 17316, 4702,
	4702, -1000, -1000, -1000, 340, -1000, -1000, -1000, -1000, 4702,
	4702, -1000, 1001, 318, -1000, -1000, -1000, -1000, 10010, 262,
	-1000, 827, -1000, 9, -1000, -1000, -1000, -1000, -1000, 1013,
	-1000, -1000, -1000, -125, -1000, -1000, 10010, 10010, 10010, 10010,
	534, 235, 11051, 455, 339, 11051, 11051, 11051, 11051, 11051,
	11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051, 11051,
	581, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 519,
	-1000, 1004, 591, 591, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 11398, 7569, 6142, 585, 674, 972, 8610,
	8610, 10010, 10010, 9304, 8957, 8610, 929, 276, 453, 17316,
	-1000, -1000, 10704, -1000, -1000, -1000, -1000, -1000, 488, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17316, 17316, 8610, 8610,
	8610, 8610, 8610, 966, 585, 1129, -1000, 1012, 248, 438,
	738, -1000, 526, 966, 13492, 736, -1000, 1129, -1000, -1000,
	-1000, 17316, -1000, -1000, 15227, -1000, -1000, 5782, 55, 17316,
	-1000, 727, 861, -1000, -1000, -1000, 952, 12798, 13145, 55,
	562, 14533, 17316, -1000, -1000, 14533, 17316, 5422, 6502, -74,
	-1000, 6502, 712, -1000, -111, -104, 7916, 210, -1000, -1000,
	-1000, -1000, 4342, 397, 553, 448, -51, -1000, -1000, -1000,
	760, -1000, 760, 760, 760, 760, -20, -20, -20, -20,
	-1000, -1000, -1000, -1000, -1000, 788, 787, -1000, 760, 760,
	760, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 776,
	776, 776, 765, 765, 816, -1000, 17316, 4702, 949, 4702,
	-1000, 82, -1000, -1000, -1000, 17316, 17316, 17316, 17316, 17316,
	155, 17316, 17316, 728, -1000, 17316, 4702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 453, -1000, -1000, -1000, -1000,
	-1000, -1000, 17316, -1000, -1000, -1000, -1000, 17316, 364, 17316,
	17316, 453, -1000, 494, 17316, 17316, -1000, -1000, -1000, -1000,
	-1000, 453, 235, 293, 331, -1000, -1000, 479, -1000, -1000,
	1840, -1000, -1000, -1000, -1000, 455, 11051, 11051, 11051, 342,
	1840, 1953, 525, 1024, 215, 272, 272, 214, 214, 214,
	214, 214, 380, 380, -1000, -1000, -1000, 488, -1000, -1000,
	-1000, 488, 8610, 8610, 721, 746, 191, -1000, 786, -1000,
	-1000, 966, 670, 670, 483, 545, 292, 994, 670, 290,
	987, 670, 670, 8610, -1000, -1000, 377, -1000, 10010, 488,
	-1000, 190, -1000, 839, 720, 716, 670, 488, 488, 670,
	670, 937, -1000, -1000, 879, 10010, 10010, 10010, -1000, -1000,
	-1000, 937, 971, -1000, 897, 896, 984, 8610, 14533, 1129,
	-1000, -1000, -1000, 188, 718, 746, -1000, 17316, 14533, 14533,
	14533, 14533, 14533, -1000, 859, 855, -1000, 852, 851, 842,
	17316, -1000, 672, 585, 12798, 177, 746, -1000, 14880, -1000,
	-1000, 984, 14533, 594, -1000, 594, -1000, 186, -1000, -1000,
	712, -74, -81, -1000, -1000, -1000, -1000, 453, -1000, 611,
	702, 3982, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 772,
	519, -1000, 941, 232, 234, 519, 939, -1000, -1000, -1000,
	932, -1000, 366, -63, -1000, -1000, 457, -20, -20, -1000,
	-1000, 210, 904, 210, 210, 210, 482, 482, -1000, -1000,
	-1000, -1000, 446, -1000, -1000, -1000, 430, -1000, 824, 17316,
	4702, -1000, -1000, -1000, -1000, 362, 362, 227, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 53,
	795, -1000, -1000, -1000, -1000, 4, 33, 122, -1000, 4702,
	-1000, 318, 318, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 342, 1840, 1913, -1000, 11051, 11051, -1000,
	-1000, 670, 670, 8610, 6142, 972, 937, -1000, -1000, 104,
	581, 104, 11051, 11051, -1000, 11051, 11051, -1000, -148, 719,
	344, -1000, 10010, 441, -1000, 6142, -1000, 11051, 11051, -1000,
	-1000, -1000, -1000, -1000, -1000, 874, 453, 453, -1000, -1000,
	17316, -1000, -1000, -1000, -1000, 973, 10010, -1000, 635, -1000,
	5062, 822, 17316, 746, 1013, 12798, 17316, 741, -1000, 317,
	861, 771, 821, 815, -1000, -1000, -1000, -1000, 854, -1000,
	843, -1000, -1000, -1000, -1000, -1000, 585, -1000, 134, 132,
	131, 17316, -1000, 972, 594, -1000, -1000, 220, -1000, -1000,
	-115, -112, -1000, -1000, -1000, 4342, -1000, 4342, 17316, 71,
	-1000, 519, 519, -1000, -1000, -1000, 766, 820, 11051, -1000,
	-1000, -1000, 543, 210, 210, -1000, 273, -1000, -1000, -1000,
	664, -1000, 657, 622, 654, 17316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 17316, -1000, -1000, -1000, -1000,
	-1000, 17316, -161, 519, 17316, 17316, 17316, 17316, -1000, 364,
	364, -1000, 11051, 1840, 1840, -1000, -1000, 488, -1000, 966,
	-1000, 488, 760, 760, -1000, 760, 765, -1000, 760, -3,
	760, -4, 488, 488, 1814, 1749, 1707, 1594, 746, -143,
	-1000, 453, 10010, -1000, 1533, 1009, -1000, -1000, 981, 968,
	453, -1000, -1000, 938, 694, 602, -1000, -1000, 8263, 652,
	166, 624, -1000, 972, 17316, 10010, -1000, -1000, 10010, 764,
	-1000, 10010, -1000, -1000, -1000, 972, 746, 746, 746, 624,
	966, -1000, -1000, -1000, -1000, 3982, -1000, 620, -1000, 760,
	-1000, -1000, -1000, 17316, -47, 1011, 1840, -1000, -1000, -1000,
	-1000, -1000, -20, 478, -20, 414, -1000, 411, 4702, -1000,
	-1000, -1000, -1000, 944, -1000, 6142, -1000, -1000, 755, 809,
	-1000, -1000, -1000, -1000, 1840, -1000, 937, -1000, -1000, 133,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11051, 11051,
	11051, 11051, 11051, 966, 474, 453, 11051, 11051, -1000, 10010,
	10010, 935, -1000, 746, -1000, 740, 17316, 17316, -1000, 17316,
	966, -1000, 453, 453, 17316, 453, 14186, 17316, 17316, 12439,
	-1000, 171, 17316, -1000, 618, -1000, 200, -1000, -103, 210,
	-1000, 210, 536, 533, -1000, 746, 616, -1000, 279, 17316,
	17316, -1000, -1000, -1000, 839, 839, 839, 839, 0, 488,
	-1000, 839, 839, 453, 604, 1008, -1000, 746, 1013, 161,
	-1000, -1000, -1000, 610, 607, -1000, 607, 607, 177, 171,
	-1000, 519, 277, 463, -1000, 67, 17316, 382, 934, -1000,
	930, -1000, -1000, -1000, -1000, -1000, 52, 6142, 4342, 590,
	-1000, -1000, -1000, -1000, -1000, 488, 73, -166, -1000, -1000,
	-1000, 17316, 602, 17316, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 408, -1000, -1000, 17316, -1000, -1000, 461, -1000, -1000,
	588, -1000, 17316, -1000, -1000, 795, -1000, 873, -152, -185,
	485, -1000, -1000, 754, -1000, -1000, 52, 889, -161, -1000,
	864, -1000, 17316, -1000, 42, -1000, -162, 535, 40, -182,
	803, 746, -186, 773, -1000, 999, 10357, -1000, -1000, 1005,
	204, 204, 839, 488, -1000, -1000, -1000, 75, 484, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1307, 1306, 46, 68, 67, 1305, 1302, 1301, 92,
	90, 84, 1299, 1291, 1290, 1289, 1288, 1284, 1283, 1282,
	1280, 1277, 1275, 1274, 1272, 1271, 1269, 1265, 1261, 1255,
	1254, 1253, 87, 1252, 74, 1251, 1249, 1247, 1245, 1244,
	1241, 1240, 1237, 33, 232, 35, 56, 1235, 55, 176,
	1233, 73, 78, 57, 1232, 30, 1231, 1229, 71, 1228,
	1227, 53, 1226, 1225, 2431, 1224, 69, 1223, 11, 48,
	1221, 1220, 1218, 1215, 91, 1982, 1214, 1213, 15, 1211,
	1207, 95, 1206, 60, 29, 12, 23, 25, 1204, 75,
	1203, 26, 1202, 59, 1200, 1195, 1194, 1193, 38, 1192,
	58, 1190, 17, 22, 1189, 7, 65, 28, 19, 6,
	1188, 1182, 18, 72, 62, 64, 1180, 1178, 481, 1176,
	1174, 1170, 40, 1168, 1161, 1159, 24, 1157, 123, 497,
	1155, 1149, 1148, 1147, 50, 988, 1365, 188, 79, 1146,
	1144, 1143, 2484, 39, 54, 16, 1142, 1141, 1140, 61,
	209, 34, 478, 1138, 31, 1136, 1121, 1105, 1104, 1103,
	1102, 1099, 182, 1098, 1097, 1095, 32, 13, 1093, 1084,
	63, 21, 1083, 1081, 1079, 45, 70, 1076, 1075, 52,
	1068, 1059, 36, 1054, 1053, 1050, 1048, 1046, 27, 10,
	1043, 14, 1038, 9, 1035, 20, 1034, 4, 1033, 8,
	1031, 3, 0, 1030, 5, 42, 1, 1028, 2, 1027,
	1026, 320, 1347, 85, 1022, 88,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 202,
	202, 202, 20, 3, 3, 3, 3, 2, 2, 8,
	4, 5, 5, 9, 9, 35, 35, 10, 11, 11,
	11, 11, 213, 213, 58, 58, 59, 59, 106, 106,
	12, 13, 13, 115, 115, 114, 114, 114, 116, 116,
	116, 116, 152, 152, 14, 14, 14, 14, 14, 14,
	14, 204, 204, 203, 201, 201, 200, 200, 199, 21,
	184, 186, 186, 185, 185, 185, 185, 176, 155, 155,
	155, 155, 158, 158, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 157, 157, 157, 157, 157, 159, 159,
	159, 159, 159, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 161, 161,
	161, 161, 161, 161, 161, 161, 175, 175, 162, 162,
	170, 170, 171, 171, 171, 168, 168, 169, 169, 172,
	172, 172, 164, 164, 165, 165, 173, 173, 166, 166,
	166, 167, 167, 167, 174, 174, 174, 174, 174, 163,
	163, 177, 177, 194, 194, 193, 193, 193, 183, 183,
	190, 190, 190, 190, 190, 180, 180, 180, 181, 181,
	179, 179, 182, 182, 192, 192, 191, 178, 178, 195,
	195, 195, 195, 207, 208, 206, 206, 206, 206, 206,
	187, 187, 187, 188, 188, 188, 189, 189, 189, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	198, 196, 196, 197, 197, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 123, 123, 125, 125, 121, 121, 124,
	124, 122, 122, 122, 126, 126, 126, 127, 127, 153,
	153, 153, 25, 25, 27, 27, 28, 29, 29, 147,
	147, 148, 148, 30, 31, 36, 36, 36, 36, 36,
	36, 38, 38, 38, 7, 7, 7, 7, 37, 37,
	37, 6, 6, 26, 26, 26, 26, 19, 214, 32,
	33, 33, 34, 34, 34, 40, 40, 40, 39, 39,
	39, 45, 45, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 44, 44, 46, 46, 46, 46,
	139, 139, 139, 138, 138, 50, 50, 51, 51, 52,
	52, 53, 53, 53, 90, 67, 67, 105, 105, 107,
	107, 54, 54, 54, 54, 55, 55, 56, 56, 57,
	57, 146, 146, 145, 145, 145, 144, 144, 60, 60,
	60, 62, 61, 61, 61, 61, 63, 63, 65, 65,
	64, 64, 66, 68, 68, 68, 68, 68, 69, 69,
	49, 49, 49, 49, 49, 49, 49, 49, 119, 119,
	71, 71, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 82, 82, 82, 82, 82, 82, 72, 72,
	72, 72, 72, 72, 72, 43, 43, 83, 83, 83,
	89, 84, 84, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 79, 79, 79,
	79, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	215, 215, 81, 80, 80, 80, 80, 80, 80, 80,
	41, 41, 41, 41, 41, 151, 151, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	94, 94, 42, 42, 92, 92, 93, 95, 95, 91,
	91, 91, 74, 74, 74, 74, 74, 74, 74, 74,
	76, 76, 76, 96, 96, 97, 97, 98, 98, 99,
	99, 100, 101, 101, 101, 102, 102, 102, 102, 103,
	103, 103, 73, 73, 73, 73, 104, 104, 104, 104,
	108, 108, 85, 85, 87, 87, 86, 88, 109, 109,
	112, 110, 110, 113, 113, 113, 113, 113, 111, 111,
	111, 141, 141, 141, 117, 117, 128, 128, 129, 129,
	118, 118, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 120, 120, 120, 120, 120, 131, 131, 131,
	132, 132, 133, 133, 133, 140, 140, 136, 136, 137,
	137, 142, 142, 143, 143, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 211,
	212, 149, 150, 150, 150,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 2, 4, 6, 6, 7, 4, 6, 5,
	8, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 4, 6, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 7, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 5, 0,
	1, 0, 1, 2, 3, 0, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 3, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 2, 3, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 5, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 2, 1, 2, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -4, -211, 6,
	7, -35, 9, 10, 30, -21, 123, 124, 126, 125,
	159, 127, 152, 53, 175, 176, 178, 179, 180, 181,
	-38, 157, 158, 31, 32, 129, 34, 57, 8, 264,
	154, 153, 25, -210, 366, -34, 5, -98, 15, -3,
	-32, -214, -32, -32, -32, -32, -32, -184, -186, 57,
	96, -133, 133, 77, 256, 130, 131, 137, -136, -202,
	-135, 60, 61, 62, 274, 145, 306, 307, 175, 189,
	183, 210, 202, 275, 308, 146, 200, 203, 243, 143,
	309, 230, 237, 71, 178, 252, 310, 155, 198, 194,
	311, 283, 192, 27, 312, 239, 215, 313, 279, 241,
	193, 238, 129, 314, 148, 362, 141, 315, 216, 220,
	316, 244, 317, 318, 319, 187, 188, 320, 144, 246,
	214, 142, 33, 276, 37, 163, 247, 218, 321, 213,
	209, 322, 323, 324, 325, 212, 186, 208, 41, 222,
	221, 223, 242, 205, 326, 327, 328, 149, 329, 195,
	18, 330, 331, 332, 333, 334, 250, 158, 335, 161,
	336, 337, 338, 339, 340, 341, 240, 217, 219, 138,
	165, 236, 278, 342, 248, 191, 343, 150, 162, 157,
	251, 151, 344, 345, 346, 347, 348, 349, 350, 179,
	351, 352, 353, 354, 172, 245, 254, 40, 227, 355,
	185, 140, 356, 176, 169, 232, 206, 164, 357, 358,
	196, 197, 211, 184, 207, 177, 363, 166, 159, 359,
	253, 228, 280, 204, 201, 170, 360, 167, 168, 361,
	364, 233, 234, 171, 277, 249, 199, 229, -120, 133,
	256, 130, 234, 173, 174, 131, 131, 132, 133, 256,
	130, 131, -64, -142, -202, -135, 133, 131, 114, 203,
	243, 123, 231, 239, -125, 240, 165, -153, 131, -121,
	230, 233, 234, 171, -202, 241, 245, 244, 235, -142,
	177, -147, 182, -136, 180, -64, -36, 362, 127, -149,
	-149, 232, 232, -149, -84, -49, -70, 80, -75, 29,
	23, -74, -71, -91, -88, -89, 114, 115, 117, 116,
	118, 103, 104, 111, 81, 119, -79, -77, -78, -80,
	64, 63, 72, 65, 66, 67, 68, 73, 74, 75,
	-136, -142, -86, -211, 47, 48, 265, 266, 267, 268,
	273, 269, 83, 36, 255, 263, 262, 261, 259, 260,
	257, 258, 271, 272, 136, 256, 130, 109, 264, -202,
	-135, -5, -4, -211, 6, 20, 21, -102, 17, 16,
	-212, 59, -40, -47, 42, 43, -48, 21, 35, 46,
	44, -33, -46, 105, -49, -142, -118, 135, -118, 11,
	-58, -59, -64, -66, -142, -110, -152, 177, -113, 245,
	244, -137, -111, -136, -134, 243, 203, 242, 128, 281,
	79, 22, 24, 225, 82, 114, 16, 83, 113, 265,
	123, 51, 282, 257, 258, 255, 267, 268, 256, 231,
	29, 10, 284, 25, 153, 21, 35, 107, 125, 86,
	87, 156, 23, 154, 75, 287, 19, 54, 11, 13,
	288, 289, 14, 136, 135, 98, 132, 49, 8, 119,
	26, 95, 45, 290, 28, 291, 292, 293, 294, 47,
	96, 17, 259, 260, 31, 295, 273, 160, 109, 52,
	38, 80, 296, 297, 73, 298, 76, 55, 77, 15,
	50, 299, 300, 301, 302, 97, 126, 264, 48, 303,
	130, 6, 270, 30, 152, 46, 304, 131, 85, 271,
	272, 134, 74, 5, 137, 32, 9, 53, 56, 261,
	262, 263, 36, 84, 12, 305, 78, -185, 96, -176,
	-202, -64, 132, -64, 264, -129, 136, -129, -129, 131,
	-64, -202, -202, 123, 125, 128, 55, 64, 64, -22,
	-64, -128, 136, -202, -128, -128, -128, -64, 120, -64,
	-202, 30, -126, 96, 12, 256, -202, 165, 131, 166,
	133, -150, -211, -137, -180, 132, 33, 144, -150, 169,
	170, -150, -124, -123, 237, 238, 232, 236, 12, 170,
	232, 168, -150, 134, -136, -37, -136, 64, -7, -3,
	-10, -9, -11, 88, -149, -149, 58, 79, 77, 78,
	95, -49, -72, 98, 80, 96, 97, 82, 100, 99,
	110, 103, 104, 105, 106, 107, 108, 109, 101, 102,
	113, 88, 89, 90, 91, 92, 93, 94, -119, -211,
	-89, -211, 121, 122, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -211, 120, -2, -84, -4, -211,
	-211, -211, -211, -211, -211, -211, -211, -94, -49, -211,
	-215, -81, -211, -215, -81, -215, -81, -215, -211, -215,
	-81, -215, -81, -215, -215, -81, -211, -211, -211, -211,
	-211, -211, -211, -98, -3, -32, -103, 19, 31, -49,
	-99, -100, -49, -98, 38, -44, -46, -48, 42, 43,
	70, 11, -139, -138, 22, -136, 64, 120, -65, 26,
	-64, -51, -52, -53, -54, -67, -90, -211, -64, -64,
	-58, -213, 58, 11, 56, -213, 58, 120, 58, 177,
	-113, -152, -115, -114, 246, 248, 88, -141, -136, 64,
	29, 30, 59, 58, -64, -155, -158, -160, -159, -161,
	-156, -157, 200, 201, 114, 204, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 30, 155, 196, 197,
	198, 199, 216, 217, 218, 219, 220, 221, 222, 223,
	183, 202, 275, 184, 185, 186, 187, 188, 189, 191,
	192, 193, 194, 195, -202, -150, 133, -202, 80, -202,
	-64, -64, -150, -150, -150, 167, 167, 131, 131, 172,
	-64, 58, 134, -58, 23, 55, -64, -202, -202, -143,
	-142, -134, -150, -126, 64, -49, -150, -150, -150, -64,
	-150, -150, -181, 11, 98, -150, -150, 11, -122, 11,
	98, -49, -127, 96, 55, -148, 180, 214, 363, 364,
	365, -49, -49, -49, -49, -82, 73, 80, 74, 75,
	-75, -83, -86, -89, 69, 98, 96, 97, 82, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -151, -202, 64, -202, -74, -74,
	-136, -45, 21, 35, -44, -137, -143, -134, -34, -212,
	-212, -98, -44, -44, -49, -49, -91, 64, -44, -91,
	64, -44, -44, -39, 21, 35, -92, -93, 84, -91,
	-136, -142, -212, -75, -136, -136, -44, -45, -45, -44,
	-44, -102, -212, 9, 98, 58, 18, 58, -101, 24,
	25, -102, -76, -136, 65, 68, -50, 58, 11, -48,
	-64, -138, 105, -143, -106, 161, -64, 30, 58, -60,
	-62, -61, -63, 45, 49, 51, 46, 47, 48, 52,
	-146, 22, -51, -3, -211, -145, 161, -144, 22, -142,
	64, -106, 56, -51, -64, -51, -66, -142, 105, -113,
	-115, 58, 247, 249, 250, 55, 76, -49, -167, 113,
	-187, -188, -189, -137, 64, 65, -176, -177, -178, -190,
	147, -195, 138, 140, 137, -179, 148, 132, 28, 59,
	-172, 73, 80, -168, 228, -162, 57, -162, -162, -162,
	-162, -166, 203, -166, -166, -166, 57, 57, -162, -162,
	-162, -170, 57, -170, -170, -171, 57, -171, -140, 56,
	-64, -150, 23, -150, -130, 128, 125, 126, -198, 124,
	225, 203, 71, 29, 15, 265, 161, 280, -202, 162,
	-64, -64, -64, -64, -64, 128, 125, -64, -64, -64,
	-150, -64, -64, -126, -142, -142, 64, -64, -136, 73,
	74, 75, -83, -75, -75, -75, -43, 156, 79, -212,
	-212, -44, -44, -211, 120, -5, -102, -212, -212, 58,
	56, 22, 11, 11, -212, 11, 11, -212, -212, -44,
	-95, -93, 86, -49, -212, 120, -212, 58, 58, -212,
	-212, -212, -212, -212, -103, 40, -49, -49, -100, -103,
	-117, 19, 11, 36, 36, -69, 12, -46, -51, -48,
	120, -73, 30, 36, -3, -211, -211, -109, -112, -91,
	-52, -53, -53, -52, -53, 45, 45, 45, 50, 45,
	50, 45, -61, -142, -212, -212, -3, -68, 53, 135,
	54, -211, -144, -69, -51, -69, -69, 120, -114, -116,
	251, 248, 254, -202, 64, 58, -189, 88, 57, -202,
	28, -179, -179, -182, -202, -182, 28, -164, 29, 73,
	-169, 229, 65, -166, -166, -167, 30, -167, -167, -167,
	-175, 64, -175, 65, 65, 55, -136, -150, -149, -205,
	143, 139, 147, 148, 141, 60, 61, 62, 132, 28,
	138, 140, 161, 137, -205, -131, -132, 134, 22, 132,
	28, 161, -204, 56, 167, 225, 167, 134, -150, -122,
	-122, -43, 79, -75, -75, -212, -212, -45, -137, -98,
	-103, -154, 114, 200, 155, 198, 194, 214, 205, 227,
	196, 228, -151, -154, -75, -75, -75, -75, 274, -98,
	87, -49, 85, -137, -75, -75, 41, -64, -96, 13,
	-49, 105, -108, 55, -109, -85, -87, -86, -211, -104,
	-136, -107, -136, -69, 58, 88, -56, -55, 55, 56,
	-57, 55, -55, 45, 45, -212, 132, 132, 132, -107,
	-98, -69, 248, 252, 253, -188, -189, -192, -191, -136,
	-195, -182, -182, 57, -165, 55, -75, 59, -167, -167,
	-202, 114, 59, 58, 59, 58, 59, 58, -64, -149,
	-149, -64, -149, -136, -201, 277, -203, -202, -136, -136,
	-136, -64, -126, -126, -75, -212, -102, -212, -162, -162,
	-162, -171, -162, 188, -162, 188, -212, -212, 19, 19,
	19, 19, -211, -42, 270, -49, 58, 58, -97, 14,
	16, 27, -108, 58, -212, -212, 58, 120, -212, 58,
	-98, -112, -49, -49, 57, -49, -211, -211, -211, -212,
	-102, 59, 58, -162, -105, -136, -173, 225, 9, -166,
	64, -166, 65, 65, -150, 26, -200, -199, -137, 57,
	56, -103, -166, -202, -75, -75, -75, -75, -75, -102,
	64, -75, -75, -49, -84, 28, -87, 36, -3, -136,
	-136, -136, -102, -105, -105, -212, -105, -105, -145, -194,
	-193, 56, 142, 71, -191, 59, 58, -174, 138, 28,
	137, -78, -167, -167, 59, 59, -211, 58, 88, -105,
	-64, -212, -212, -212, -212, -41, 98, 277, -212, -212,
	-212, 9, -85, 120, 59, -212, -212, -212, -68, -193,
	-202, -183, 88, 64, 150, -136, -163, 71, 28, 28,
	-196, -197, 161, -199, -189, 59, -212, 275, 52, 278,
	-109, -136, 65, -64, 64, -212, 58, -136, -204, 41,
	276, 279, 57, -197, 36, -201, 41, -105, 163, 277,
	59, 164, 278, -207, -208, 55, -211, 279, -208, 55,
	10, 9, -75, 160, -206, 151, 146, 149, 30, -206,
	-212, -212, 145, 29, 73,
}
var yyDef = [...]int{

	28, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 617, 0, 358,
	358, 358, 358, 358, 358, 0, 692, 682, 0, 0,
	0, 0, -2, 323, 324, 0, 326, -2, 0, 0,
	335, 1001, 1001, 0, 0, 1001, 0, 999, 45, 46,
	341, 342, 343, 1, 3, 0, 362, 625, 0, 0,
	-2, 360, 0, 670, 670, 0, 0, 74, 75, 0,
	0, 0, 987, 0, 668, 668, 668, 693, 694, 697,
	698, 29, 30, 31, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 0, 0,
	0, 0, 0, 683, 685, 0, 666, 0, 666, 666,
	666, 0, 274, 440, 701, 702, 987, 0, 0, 0,
	314, 0, 1002, 286, 0, 288, 1002, 0, 1002, 0,
	295, 0, 0, 301, 1002, 306, 320, 321, 308, 322,
	325, 0, 330, 333, 0, 348, 0, 865, 340, 353,
	354, 1001, 1001, 357, 32, 491, 450, 0, 456, 458,
	0, 493, 494, 495, 496, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 523, 524, 525, 526,
	602, 603, 604, 605, 606, 607, 608, 609, 460, 461,
	599, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 560, 560, 560, 560, 560, 560,
	560, 560, 0, 0, 0, 0, 0, 0, 0, -2,
	-2, 617, 41, 0, 358, 363, 364, 629, 0, 0,
	617, 1000, 0, 0, -2, -2, 374, 380, 381, 382,
	383, 359, 0, 386, 390, 0, 0, 671, 0, 0,
	0, 0, 54, 56, 440, 60, 0, 975, 651, -2,
	-2, 0, 0, 699, 700, -2, 837, -2, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 0, 0, 93,
	0, 91, 0, 1002, 0, 0, 0, 0, 0, 0,
	1002, 1002, 1002, 0, 0, 0, 0, 684, 686, 265,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 275,
	1002, 314, 278, 0, 0, 1002, 1002, 1002, 0, 1002,
	1002, 285, 1003, 1004, 0, 195, 196, 197, 289, 1002,
	1002, 291, 0, 311, 309, 310, 303, 304, 0, 317,
	298, 299, 302, 331, 334, 351, 349, 350, 352, 344,
	345, 346, 347, 0, 355, 356, 0, 0, 0, 0,
	0, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 479, 480, 481, 482, 483, 484, 457, 0,
	471, 0, 0, 0, 513, 514, 515, 516, 517, 518,
	519, 520, 521, 0, 371, 0, 0, 0, 617, 0,
	0, 0, 0, 0, 0, 0, 368, 0, 591, 0,
	544, 552, 0, 545, 553, 546, 554, 547, 0, 548,
	555, 549, 556, 550, 551, 557, 0, 0, 0, 371,
	371, 0, 0, 625, 0, 373, 33, 0, 0, 626,
	618, 619, 622, 625, 0, 395, 384, 375, 378, 379,
	361, 0, 387, 391, 0, 393, 394, 0, 58, 0,
	439, 0, 397, 399, 400, 401, 421, 0, 423, -2,
	0, 0, 0, 52, 53, 0, 0, 0, 0, 975,
	657, 0, 62, 63, 0, 0, 0, 171, 661, 662,
	663, 659, 220, 0, 0, 159, 155, 99, 100, 101,
	148, 103, 148, 148, 148, 148, 168, 168, 168, 168,
	131, 132, 133, 134, 135, 0, 0, 118, 148, 148,
	148, 122, 138, 139, 140, 141, 142, 143, 144, 145,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 150,
	150, 150, 152, 152, 695, 77, 0, 1002, 0, 1002,
	89, 0, 234, 236, 237, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 667, 0, 1002, 271, 272, 441,
	703, 704, 276, 277, 315, 316, 279, 280, 281, 282,
	283, 284, 0, 198, 199, 290, 294, 0, 314, 0,
	0, 296, 297, 0, 0, 0, 332, 336, 337, 338,
	339, 492, 451, 452, 453, 455, 472, 0, 474, 476,
	462, 463, 487, 488, 489, 0, 0, 0, 0, 485,
	467, 0, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 512, 575, 576, 0, 510, 511,
	522, 0, 0, 0, 372, 600, 0, -2, 0, 490,
	646, 625, 0, 0, 0, 0, 495, 602, 0, 495,
	602, 0, 0, 0, 369, 370, 597, 594, 0, 0,
	599, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 42, 630, 0, 0, 0, 0, 621, 623,
	624, 629, 0, 610, 0, 0, 448, 0, 0, 376,
	39, 392, 388, 0, 0, 0, 438, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 431, 0, 0, 0,
	0, 422, 0, 0, 0, 443, 919, 424, 0, 426,
	427, 448, 0, 448, 55, 448, 57, 0, 442, 652,
	61, 0, 0, 66, 67, 653, 654, 655, 656, 0,
	90, 221, 223, 226, 227, 228, 94, 95, 96, 0,
	0, 208, 0, 0, 202, 202, 0, 200, 201, 92,
	162, 160, 0, 157, 156, 102, 0, 168, 168, 125,
	126, 171, 0, 171, 171, 171, 0, 0, 119, 120,
	121, 113, 0, 114, 115, 116, 0, 117, 0, 0,
	1002, 79, 669, 80, 1001, 0, 0, 687, 235, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 0,
	81, 239, 241, 240, 244, 0, 0, 0, 266, 1002,
	270, 311, 311, 293, 312, 313, 318, 300, 328, 473,
	475, 477, 464, 485, 468, 0, 465, 0, 0, 459,
	527, 0, 0, 371, 0, 617, 629, 531, 532, 0,
	0, 0, 0, 0, 568, 0, 0, 569, 0, 617,
	0, 595, 0, 0, 543, 0, 562, 0, 0, 563,
	564, 565, 566, 567, 35, 0, 627, 628, 620, 34,
	0, 664, 665, 611, 612, 613, 0, 385, 396, 377,
	0, 640, 0, 0, 633, 0, 0, 448, 648, 0,
	398, 417, 419, 0, 414, 429, 430, 432, 0, 434,
	0, 436, 437, 402, 403, 404, 0, 405, 0, 0,
	0, 0, 425, 617, 448, 50, 51, 0, 64, 65,
	0, 0, 71, 172, 173, 0, 224, 0, 0, 0,
	190, 202, 202, 193, 203, 194, 0, 164, 0, 161,
	98, 158, 0, 171, 171, 127, 0, 128, 129, 130,
	0, 146, 0, 0, 0, 0, 696, 78, 229, 1001,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 259, 1001, 0, 1001, 688, 689, 690,
	691, 0, 84, 0, 0, 0, 0, 0, 269, 314,
	314, 466, 0, 486, 469, 528, 529, 0, 601, 625,
	37, 0, 148, 148, 580, 148, 152, 583, 148, 585,
	148, 588, 0, 0, 0, 0, 0, 0, 0, 592,
	542, 598, 0, 600, 0, 0, 631, 36, 615, 0,
	449, 389, 43, 0, 640, 632, 642, 644, 0, 0,
	636, 0, 409, 617, 0, 0, 411, 418, 0, 0,
	412, 0, 413, 433, 435, -2, 0, 0, 0, 0,
	625, 49, 68, 69, 70, 222, 225, 0, 204, 148,
	207, 191, 192, 0, 166, 0, 163, 149, 123, 124,
	169, 170, 168, 0, 168, 0, 153, 0, 1002, 230,
	231, 232, 233, 0, 238, 0, 82, 83, 0, 0,
	243, 267, 287, 292, 470, 530, 629, 533, 577, 168,
	581, 582, 584, 586, 587, 589, 535, 534, 0, 0,
	0, 0, 0, 625, 0, 596, 0, 0, 40, 0,
	0, 0, 44, 0, 645, 0, 0, 0, 59, 0,
	625, 649, 650, 415, 0, 420, 0, 0, 0, 423,
	48, 182, 0, 206, 0, 407, 174, 167, 0, 171,
	147, 171, 0, 0, 76, 0, 85, 86, 0, 0,
	0, 38, 578, 579, 0, 0, 0, 0, 570, 0,
	593, 0, 0, 616, 614, 0, 643, 0, 635, 638,
	637, 410, 47, 0, 0, 445, 0, 0, 443, 181,
	183, 0, 188, 0, 205, 0, 0, 179, 0, 176,
	178, 165, 136, 137, 151, 154, 0, 0, 0, 0,
	245, 536, 538, 537, 539, 0, 0, 0, 541, 558,
	559, 0, 634, 0, 416, 444, 446, 447, 406, 184,
	185, 0, 189, 187, 0, 408, 97, 0, 175, 177,
	0, 261, 0, 87, 88, 81, 540, 0, 0, 0,
	641, 639, 186, 0, 180, 260, 0, 0, 84, 571,
	0, 574, 0, 262, 0, 242, 572, 0, 0, 0,
	209, 0, 0, 210, 211, 0, 0, 573, 212, 0,
	0, 0, 0, 0, 213, 215, 216, 0, 0, 214,
	263, 264, 217, 218, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 366,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:377
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:397
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:403
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:411
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:442
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:464
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:474
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:493
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.str = InsertStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.str = ReplaceStr
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:521
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:525
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:557
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:562
		{
			yyVAL.partitions = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:598
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = RepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = ReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.str = ReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.str = Serializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:651
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:668
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:673
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:688
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:693
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:704
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:710
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:716
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:734
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:745
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:749
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:753
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:759
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:986
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.literal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1115
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1136
		{
			yyVAL.literal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1146
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1267
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1273
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1284
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1288
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1292
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1296
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1302
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1308
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1322
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1326
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1330
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1335
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1339
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1343
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1373
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1391
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1396
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{Action: AlterStr, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1417
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1447
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1503
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1513
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1519
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1523
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1539
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1547
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1555
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1560
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1598
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1641
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1662
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1667
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1689
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.str = "extended "
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.str = "full "
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1780
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1794
		{
			yyVAL.showFilter = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1798
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = SessionStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = GlobalStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Begin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Commit{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &Rollback{}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1848
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1853
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1858
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = JSONStr
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = TreeStr
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = VitessStr
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = TraditionalStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = AnalyzeStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1933
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &OtherRead{}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			setAllowComments(yylex, true)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1983
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1989
		{
			yyVAL.bytes2 = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = UnionStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = UnionAllStr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = UnionDistinctStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = SQLCacheStr
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = DistinctStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = DistinctStr
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2038
		{
			yyVAL.selectExprs = nil
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2047
		{
			yyVAL.strs = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2051
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2055
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = SQLCacheStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = DistinctStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = DistinctStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = StraightJoinHint
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2099
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2117
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2122
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 406:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2190
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2223
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2227
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2243
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2247
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2253
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2258
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2263
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = JoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = JoinStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = JoinStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.str = StraightJoinStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = LeftJoinStr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = LeftJoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = RightJoinStr
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = RightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = NaturalJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2361
		{
			yyVAL.indexHints = nil
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2365
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2369
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2373
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2377
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = nil
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2426
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2430
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = IsNullStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = IsNotNullStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = IsTrueStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = IsNotTrueStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = IsFalseStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = IsNotFalseStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = EqualStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.str = LessThanStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.str = GreaterThanStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.str = LessEqualStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = GreaterEqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.str = NotEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = nil
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2577
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2713
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 538:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2931
		{
			yyVAL.str = ""
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.str = BooleanModeStr
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2939
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 573:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = QueryExpansionStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3027
		{
			yyVAL.str = string("")
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3041
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3070
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &NullVal{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3128
		{
			yyVAL.exprs = nil
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3132
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3146
		{
			yyVAL.orderBy = nil
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3150
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3171
		{
			yyVAL.str = AscScr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.str = AscScr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.str = DescScr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3184
		{
			yyVAL.limit = nil
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3192
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3196
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3201
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.str = ForUpdateStr
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3209
		{
			yyVAL.str = ShareModeStr
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3230
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3234
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3244
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3248
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3252
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3257
		{
			yyVAL.updateExprs = nil
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3261
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3271
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3281
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3303
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3307
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3313
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3323
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3329
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("on"))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3333
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("off"))}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3337
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.bytes = []byte("charset")
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = &Default{}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3377
		{
			yyVAL.byt = 0
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3379
		{
			yyVAL.byt = 1
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3382
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3384
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3387
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.str = IgnoreStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3415
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{Strategy: "", Options: ""}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3419
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: "gh-ost",
			}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3425
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: "gh-ost",
				Options:  string(yyDollar[2].bytes),
			}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: "pt-osc",
			}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3438
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: "pt-osc",
				Options:  string(yyDollar[2].bytes),
			}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3446
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3450
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3459
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3461
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3466
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3468
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3489
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3500
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3820
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3829
		{
			decNesting(yylex)
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3834
		{
			skipToEnd(yylex)
		}
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3839
		{
			skipToEnd(yylex)
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			skipToEnd(yylex)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3847
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

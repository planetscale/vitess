// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const AT_ID = 57398
const AT_AT_ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const INDEXES = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const WARNINGS = 57491
const SEQUENCE = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const TABLES = 57547
const VITESS_METADATA = 57548
const VSCHEMA = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const EXTENDED = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const ARRAY = 57596
const CUME_DIST = 57597
const DESCRIPTION = 57598
const DENSE_RANK = 57599
const EMPTY = 57600
const EXCEPT = 57601
const FIRST_VALUE = 57602
const GROUPING = 57603
const GROUPS = 57604
const JSON_TABLE = 57605
const LAG = 57606
const LAST_VALUE = 57607
const LATERAL = 57608
const LEAD = 57609
const MEMBER = 57610
const NTH_VALUE = 57611
const NTILE = 57612
const OF = 57613
const OVER = 57614
const PERCENT_RANK = 57615
const RANK = 57616
const RECURSIVE = 57617
const ROW_NUMBER = 57618
const SYSTEM = 57619
const WINDOW = 57620
const ACTIVE = 57621
const ADMIN = 57622
const BUCKETS = 57623
const CLONE = 57624
const COMPONENT = 57625
const DEFINITION = 57626
const ENFORCED = 57627
const EXCLUDE = 57628
const FOLLOWING = 57629
const GEOMCOLLECTION = 57630
const GET_MASTER_PUBLIC_KEY = 57631
const HISTOGRAM = 57632
const HISTORY = 57633
const INACTIVE = 57634
const INVISIBLE = 57635
const LOCKED = 57636
const MASTER_COMPRESSION_ALGORITHMS = 57637
const MASTER_PUBLIC_KEY_PATH = 57638
const MASTER_TLS_CIPHERSUITES = 57639
const MASTER_ZSTD_COMPRESSION_LEVEL = 57640
const NESTED = 57641
const NETWORK_NAMESPACE = 57642
const NOWAIT = 57643
const NULLS = 57644
const OJ = 57645
const OLD = 57646
const OPTIONAL = 57647
const ORDINALITY = 57648
const ORGANIZATION = 57649
const OTHERS = 57650
const PATH = 57651
const PERSIST = 57652
const PERSIST_ONLY = 57653
const PRECEDING = 57654
const PRIVILEGE_CHECKS_USER = 57655
const PROCESS = 57656
const RANDOM = 57657
const REFERENCE = 57658
const REQUIRE_ROW_FORMAT = 57659
const RESOURCE = 57660
const RESPECT = 57661
const RESTART = 57662
const RETAIN = 57663
const REUSE = 57664
const ROLE = 57665
const SECONDARY = 57666
const SECONDARY_ENGINE = 57667
const SECONDARY_LOAD = 57668
const SECONDARY_UNLOAD = 57669
const SKIP = 57670
const SRID = 57671
const THREAD_PRIORITY = 57672
const TIES = 57673
const UNBOUNDED = 57674
const VCPU = 57675
const VISIBLE = 57676

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 37,
	33, 296,
	127, 296,
	139, 296,
	164, 310,
	165, 310,
	-2, 298,
	-1, 327,
	115, 654,
	-2, 650,
	-1, 328,
	115, 655,
	-2, 651,
	-1, 397,
	85, 905,
	-2, 66,
	-1, 398,
	85, 822,
	-2, 67,
	-1, 403,
	85, 790,
	-2, 616,
	-1, 405,
	85, 853,
	-2, 618,
	-1, 705,
	1, 363,
	5, 363,
	12, 363,
	13, 363,
	14, 363,
	15, 363,
	17, 363,
	19, 363,
	30, 363,
	31, 363,
	43, 363,
	44, 363,
	45, 363,
	46, 363,
	47, 363,
	49, 363,
	50, 363,
	53, 363,
	54, 363,
	56, 363,
	57, 363,
	352, 363,
	-2, 381,
	-1, 708,
	54, 47,
	56, 47,
	-2, 51,
	-1, 863,
	115, 657,
	-2, 653,
	-1, 1096,
	5, 33,
	-2, 449,
	-1, 1127,
	5, 32,
	-2, 590,
	-1, 1379,
	5, 33,
	-2, 591,
	-1, 1432,
	5, 32,
	-2, 593,
	-1, 1512,
	5, 33,
	-2, 594,
}

const yyPrivate = 57344

const yyLast = 16630

var yyAct = [...]int{

	327, 1546, 1536, 1338, 1500, 1224, 660, 1130, 321, 1445,
	1399, 332, 1148, 1278, 345, 978, 1131, 1412, 358, 1312,
	1021, 57, 987, 1279, 951, 1275, 949, 1007, 1291, 977,
	557, 1175, 80, 659, 3, 974, 270, 1285, 290, 270,
	402, 1250, 807, 888, 899, 895, 826, 1087, 1201, 306,
	1154, 991, 721, 297, 953, 1192, 938, 917, 702, 865,
	591, 701, 597, 1017, 720, 396, 391, 270, 80, 931,
	612, 527, 270, 603, 270, 526, 330, 388, 393, 315,
	710, 56, 1539, 674, 61, 305, 1523, 546, 1040, 1534,
	1510, 675, 1531, 1339, 1522, 1267, 1509, 1371, 298, 299,
	300, 301, 1039, 531, 304, 82, 83, 84, 319, 1306,
	63, 64, 65, 66, 67, 1307, 1308, 968, 568, 370,
	585, 376, 377, 374, 375, 373, 372, 371, 969, 970,
	303, 82, 83, 84, 258, 378, 379, 256, 722, 260,
	723, 1251, 1038, 302, 266, 262, 263, 264, 922, 1474,
	625, 624, 634, 635, 627, 628, 629, 630, 631, 632,
	633, 626, 1163, 1000, 636, 1162, 580, 1183, 1164, 1226,
	581, 578, 579, 563, 1402, 565, 1008, 1362, 1360, 584,
	1253, 296, 796, 82, 83, 84, 399, 573, 574, 566,
	583, 795, 1035, 1032, 1033, 1228, 1031, 793, 1533, 1530,
	1501, 1223, 1493, 992, 932, 547, 1554, 562, 564, 1550,
	1149, 1151, 533, 260, 1255, 1229, 1259, 800, 1254, 784,
	1252, 571, 1227, 797, 1301, 1257, 1300, 794, 1299, 1042,
	1045, 1446, 1454, 259, 1256, 994, 529, 536, 273, 994,
	261, 325, 1052, 1220, 1482, 1051, 1448, 1258, 1260, 1222,
	648, 649, 1382, 1236, 1159, 257, 1115, 270, 538, 539,
	1081, 837, 270, 754, 548, 265, 1037, 716, 270, 82,
	83, 84, 616, 1105, 270, 555, 1102, 553, 561, 80,
	975, 626, 636, 80, 636, 80, 964, 834, 1036, 1150,
	827, 80, 831, 560, 625, 624, 634, 635, 627, 628,
	629, 630, 631, 632, 633, 626, 543, 1001, 636, 70,
	334, 1508, 610, 609, 1447, 569, 594, 598, 1008, 1271,
	1548, 1475, 80, 1549, 559, 1547, 609, 570, 1041, 611,
	611, 599, 1491, 617, 993, 1269, 1455, 1453, 993, 82,
	83, 84, 611, 1043, 742, 600, 1463, 71, 1221, 1088,
	1219, 1289, 549, 550, 551, 724, 587, 588, 634, 635,
	627, 628, 629, 630, 631, 632, 633, 626, 661, 918,
	636, 540, 994, 541, 828, 872, 542, 672, 648, 649,
	786, 648, 649, 755, 1555, 1181, 270, 270, 270, 870,
	871, 869, 1325, 997, 918, 80, 1112, 601, 1101, 998,
	1496, 80, 82, 83, 84, 558, 768, 771, 772, 773,
	774, 775, 776, 700, 777, 778, 779, 780, 781, 756,
	757, 758, 759, 740, 741, 769, 1556, 743, 606, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 760,
	761, 762, 763, 764, 765, 766, 767, 1514, 82, 83,
	84, 610, 609, 1516, 589, 677, 679, 681, 683, 685,
	687, 688, 590, 678, 680, 709, 684, 686, 611, 689,
	714, 993, 572, 718, 575, 1408, 990, 988, 1407, 989,
	586, 532, 1196, 525, 1195, 54, 986, 992, 1184, 627,
	628, 629, 630, 631, 632, 633, 626, 868, 770, 636,
	1492, 625, 624, 634, 635, 627, 628, 629, 630, 631,
	632, 633, 626, 399, 1426, 636, 629, 630, 631, 632,
	633, 626, 1405, 1193, 636, 1064, 270, 812, 610, 609,
	782, 80, 590, 785, 1460, 787, 270, 270, 80, 80,
	80, 840, 841, 1459, 270, 611, 1321, 270, 1451, 1532,
	270, 805, 806, 22, 270, 255, 80, 1276, 534, 535,
	1288, 80, 80, 80, 270, 80, 80, 1100, 813, 1099,
	855, 857, 858, 995, 80, 80, 856, 650, 651, 652,
	653, 654, 655, 656, 657, 1374, 1288, 811, 610, 609,
	901, 829, 610, 609, 809, 1225, 1377, 348, 347, 350,
	351, 352, 353, 80, 1462, 611, 349, 354, 270, 611,
	1078, 1079, 1080, 310, 80, 82, 83, 84, 852, 853,
	385, 386, 1518, 590, 801, 625, 624, 634, 635, 627,
	628, 629, 630, 631, 632, 633, 626, 889, 866, 636,
	646, 1451, 1504, 1451, 590, 836, 891, 1451, 1483, 842,
	82, 83, 84, 1239, 890, 1451, 1450, 863, 80, 861,
	624, 634, 635, 627, 628, 629, 630, 631, 632, 633,
	626, 661, 935, 636, 906, 907, 1397, 1396, 1329, 908,
	911, 844, 1167, 835, 859, 919, 82, 83, 84, 58,
	1166, 80, 80, 1384, 590, 967, 903, 705, 1094, 270,
	1381, 590, 610, 609, 1331, 1330, 1118, 270, 270, 1327,
	1328, 270, 270, 1327, 1326, 270, 270, 270, 80, 611,
	783, 1094, 590, 935, 590, 892, 893, 790, 791, 792,
	1094, 80, 527, 973, 712, 862, 1155, 959, 24, 927,
	928, 961, 901, 590, 915, 810, 731, 730, 712, 843,
	814, 815, 816, 1117, 818, 819, 958, 809, 711, 1155,
	1094, 24, 1125, 823, 824, 711, 934, 1126, 717, 838,
	24, 799, 54, 1009, 1010, 1011, 312, 713, 957, 715,
	935, 1524, 962, 965, 966, 270, 80, 54, 80, 1414,
	1044, 713, 935, 711, 270, 270, 270, 270, 270, 1431,
	270, 270, 1023, 1288, 270, 80, 1002, 982, 900, 902,
	54, 940, 943, 944, 945, 941, 1389, 942, 946, 54,
	1022, 270, 270, 270, 1317, 54, 270, 1170, 270, 270,
	1292, 1293, 1415, 270, 1018, 1013, 399, 1012, 1025, 1541,
	1537, 1319, 1019, 1020, 1067, 1068, 1295, 598, 1276, 979,
	898, 1197, 832, 803, 1142, 1298, 1140, 1061, 850, 1143,
	864, 1141, 1297, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 863, 1144,
	1069, 944, 945, 940, 943, 944, 945, 941, 866, 942,
	946, 1139, 1138, 1292, 1293, 316, 317, 1528, 1521, 1235,
	1066, 1070, 1526, 1071, 604, 1076, 1075, 592, 604, 1188,
	1095, 729, 556, 1180, 1498, 1028, 1375, 605, 923, 593,
	602, 605, 1497, 1429, 1178, 1172, 1410, 1113, 802, 1083,
	867, 948, 313, 314, 328, 1074, 270, 270, 270, 270,
	270, 58, 307, 1073, 1468, 308, 1132, 1467, 270, 1417,
	1155, 270, 582, 1543, 1542, 270, 862, 1106, 1103, 270,
	825, 822, 821, 820, 607, 1127, 81, 1543, 1479, 1403,
	271, 833, 60, 271, 1111, 1027, 1165, 1029, 80, 62,
	55, 1, 1535, 1340, 903, 1156, 1411, 1171, 1034, 1499,
	1444, 1176, 1176, 1168, 1056, 1134, 1135, 1133, 1137, 1311,
	1136, 271, 81, 1145, 985, 976, 271, 69, 271, 1153,
	1157, 524, 1158, 68, 1490, 984, 983, 705, 1452, 1401,
	1160, 705, 996, 1177, 1182, 705, 80, 80, 999, 1318,
	1179, 1185, 1186, 1495, 737, 735, 736, 734, 739, 738,
	1090, 1173, 1174, 1187, 1091, 1189, 1190, 1191, 1003, 1004,
	1005, 1006, 1096, 1097, 1098, 733, 80, 283, 394, 1104,
	947, 725, 1107, 1108, 1014, 1015, 1016, 1024, 1114, 1194,
	608, 72, 1116, 270, 1218, 1119, 1120, 1121, 1122, 1123,
	1217, 1216, 80, 1030, 1200, 830, 280, 576, 577, 285,
	644, 1072, 1161, 400, 1283, 839, 979, 596, 1147, 1466,
	1416, 889, 1110, 671, 1231, 1232, 1233, 1234, 916, 333,
	854, 346, 1084, 1085, 1086, 343, 344, 845, 1124, 618,
	331, 1270, 323, 704, 697, 939, 937, 936, 1242, 80,
	80, 1268, 1243, 1277, 389, 1294, 1290, 1132, 703, 1249,
	1238, 1370, 1473, 1262, 1261, 1280, 849, 26, 59, 318,
	19, 18, 17, 80, 20, 16, 863, 15, 1069, 14,
	544, 30, 1282, 21, 1304, 1296, 13, 12, 80, 11,
	80, 80, 10, 9, 1176, 1176, 1303, 8, 7, 6,
	867, 1287, 5, 4, 309, 1310, 23, 2, 0, 1324,
	1302, 271, 0, 0, 1314, 0, 271, 1309, 270, 0,
	1241, 0, 271, 0, 0, 1315, 1316, 1305, 271, 0,
	0, 0, 0, 81, 0, 0, 1199, 81, 270, 81,
	0, 1322, 1323, 0, 80, 81, 1341, 80, 80, 80,
	270, 0, 0, 0, 1272, 0, 0, 80, 0, 0,
	270, 1247, 1248, 0, 0, 1230, 705, 705, 705, 705,
	705, 0, 0, 0, 0, 1333, 81, 0, 0, 0,
	0, 705, 1346, 1347, 1348, 1349, 1351, 0, 0, 705,
	1334, 0, 1336, 0, 0, 0, 1358, 0, 0, 0,
	1372, 0, 0, 0, 0, 0, 979, 0, 979, 1350,
	661, 0, 0, 0, 0, 0, 0, 0, 1387, 0,
	1132, 1388, 0, 1376, 1390, 1386, 0, 0, 0, 1385,
	80, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	271, 271, 271, 1373, 0, 1168, 0, 0, 0, 81,
	1245, 1246, 0, 80, 0, 81, 0, 0, 0, 0,
	80, 0, 0, 0, 1263, 1264, 0, 1265, 1266, 0,
	0, 0, 0, 1395, 1404, 1241, 1406, 1419, 0, 1273,
	1274, 0, 0, 625, 624, 634, 635, 627, 628, 629,
	630, 631, 632, 633, 626, 0, 0, 636, 0, 0,
	0, 0, 80, 80, 1418, 80, 0, 0, 0, 0,
	80, 1352, 80, 80, 80, 270, 1280, 0, 80, 1354,
	1438, 1430, 1439, 1441, 1442, 0, 0, 0, 0, 0,
	1363, 1364, 0, 0, 1432, 80, 270, 1449, 1456, 1443,
	1425, 0, 1320, 0, 0, 1464, 0, 0, 979, 0,
	1378, 1379, 1380, 0, 1383, 1437, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 1480, 0, 1489, 0, 0,
	1280, 1394, 80, 0, 1488, 0, 1487, 0, 1413, 0,
	271, 0, 0, 80, 80, 81, 0, 1481, 0, 0,
	271, 271, 81, 81, 81, 1506, 1505, 661, 271, 1503,
	1502, 271, 0, 80, 271, 0, 1353, 1511, 271, 0,
	81, 1132, 0, 0, 270, 81, 81, 81, 271, 81,
	81, 0, 80, 0, 0, 0, 0, 0, 81, 81,
	1520, 0, 0, 0, 904, 905, 0, 0, 910, 913,
	914, 0, 1409, 1525, 1527, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1529, 0, 81, 1540, 0,
	1440, 0, 271, 926, 0, 1551, 929, 930, 81, 0,
	705, 0, 0, 359, 51, 0, 0, 0, 0, 1355,
	1356, 0, 1357, 1211, 0, 1359, 0, 1361, 0, 1469,
	1470, 1471, 1472, 0, 1476, 0, 1477, 1478, 0, 0,
	0, 1413, 979, 0, 0, 0, 0, 0, 1484, 0,
	1485, 1486, 81, 1207, 1208, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 1420, 1421, 1422,
	1423, 1424, 0, 311, 0, 1427, 1428, 0, 0, 0,
	0, 1398, 1507, 0, 0, 81, 81, 0, 0, 0,
	1512, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 271, 271, 0, 0, 271, 271, 0, 1517, 271,
	271, 271, 81, 0, 0, 0, 24, 25, 52, 27,
	28, 0, 1210, 0, 0, 81, 0, 1215, 1212, 1203,
	1213, 1206, 0, 1202, 0, 43, 0, 1204, 1205, 0,
	29, 48, 49, 0, 0, 0, 0, 1244, 0, 0,
	0, 1214, 0, 1552, 1553, 0, 0, 0, 0, 0,
	1077, 38, 0, 0, 0, 54, 0, 625, 624, 634,
	635, 627, 628, 629, 630, 631, 632, 633, 626, 271,
	81, 636, 81, 0, 0, 82, 83, 84, 271, 271,
	271, 271, 271, 0, 271, 271, 0, 0, 271, 81,
	0, 0, 0, 0, 0, 0, 0, 1092, 1093, 0,
	0, 0, 0, 0, 0, 271, 271, 271, 0, 0,
	271, 0, 271, 271, 0, 0, 1109, 271, 31, 32,
	34, 33, 36, 0, 50, 0, 0, 0, 274, 0,
	1544, 0, 0, 0, 0, 277, 1089, 0, 0, 0,
	0, 0, 0, 284, 0, 0, 0, 37, 44, 45,
	0, 0, 46, 47, 35, 0, 625, 624, 634, 635,
	627, 628, 629, 630, 631, 632, 633, 626, 39, 40,
	636, 41, 42, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 567, 289, 0, 0, 567, 0, 567, 0,
	0, 0, 0, 0, 567, 625, 624, 634, 635, 627,
	628, 629, 630, 631, 632, 633, 626, 0, 0, 636,
	275, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	271, 271, 271, 271, 271, 0, 0, 0, 0, 0,
	645, 0, 271, 647, 0, 271, 0, 286, 278, 271,
	287, 288, 294, 271, 0, 0, 279, 281, 291, 0,
	276, 293, 292, 0, 53, 0, 0, 0, 0, 0,
	0, 658, 81, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 0, 673, 676, 676, 676, 682, 676, 676,
	682, 676, 690, 691, 692, 693, 694, 695, 696, 0,
	706, 1368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 623, 0, 0,
	81, 81, 1367, 637, 638, 639, 640, 641, 642, 643,
	357, 621, 622, 619, 625, 624, 634, 635, 627, 628,
	629, 630, 631, 632, 633, 626, 0, 0, 636, 1366,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 625, 624,
	634, 635, 627, 628, 629, 630, 631, 632, 633, 626,
	0, 0, 636, 0, 0, 0, 0, 0, 401, 625,
	624, 634, 635, 627, 628, 629, 630, 631, 632, 633,
	626, 0, 0, 636, 0, 0, 1365, 0, 0, 0,
	0, 0, 0, 81, 81, 0, 625, 624, 634, 635,
	627, 628, 629, 630, 631, 632, 633, 626, 0, 0,
	636, 0, 0, 0, 567, 0, 0, 81, 0, 0,
	0, 567, 567, 567, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 81, 81, 0, 0, 0, 567,
	0, 0, 0, 0, 567, 567, 567, 0, 567, 567,
	0, 0, 0, 0, 0, 0, 0, 567, 567, 0,
	0, 0, 271, 625, 624, 634, 635, 627, 628, 629,
	630, 631, 632, 633, 626, 0, 0, 636, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 81, 0,
	0, 81, 81, 81, 271, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 401,
	0, 0, 81, 401, 0, 401, 0, 0, 0, 0,
	950, 401, 0, 0, 706, 0, 0, 81, 706, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 81, 0, 81,
	0, 0, 0, 0, 81, 0, 81, 81, 81, 271,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 567,
	0, 567, 0, 0, 0, 0, 0, 0, 707, 81,
	271, 0, 0, 0, 0, 0, 0, 0, 567, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 390, 1082, 81, 0, 0,
	528, 0, 530, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1128, 1129, 0, 0, 706,
	706, 706, 706, 706, 0, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 950, 0, 1152, 0, 401, 401,
	401, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 0,
	0, 401, 401, 401, 0, 401, 401, 0, 0, 0,
	0, 0, 0, 0, 401, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 0, 0,
	567, 0, 0, 0, 614, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 0, 0, 0, 567,
	545, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 0, 51, 0, 0, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 699, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	295, 0, 0, 0, 0, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 322, 0, 0, 392, 0,
	0, 0, 0, 269, 0, 269, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1391, 1392, 1393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 788, 789, 567, 0, 0, 0,
	0, 0, 798, 0, 0, 390, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 920, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 0, 51, 269, 0,
	0, 0, 0, 269, 0, 0, 1198, 401, 0, 269,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	0, 0, 401, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 401, 1538, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 0, 0, 1284,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 269, 269,
	0, 0, 0, 1286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1026, 0, 0, 0, 0, 401, 0,
	401, 1313, 1046, 1047, 1048, 1049, 1050, 0, 1053, 1054,
	0, 0, 1055, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1057,
	1058, 1059, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 920,
	0, 0, 0, 0, 0, 0, 0, 269, 269, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 269, 0,
	401, 269, 0, 0, 0, 808, 0, 0, 1400, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 1434, 1435, 0, 1436, 0, 0, 0, 0,
	1400, 0, 1400, 1400, 1400, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	322, 0, 0, 0, 0, 322, 322, 0, 0, 322,
	322, 322, 0, 0, 0, 921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1237, 1494, 0, 322, 322, 322, 322, 322, 0,
	269, 0, 0, 401, 401, 0, 0, 0, 269, 955,
	0, 0, 269, 269, 0, 0, 269, 963, 808, 0,
	920, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 269, 269, 269, 269,
	0, 269, 269, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 269, 269, 269, 0, 0, 269, 0, 1062,
	1063, 0, 0, 0, 269, 0, 1335, 0, 0, 808,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 322, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 269, 269, 269,
	269, 269, 0, 0, 0, 0, 0, 0, 0, 1146,
	0, 0, 269, 0, 0, 0, 955, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 511, 499, 0, 456, 514, 429, 446, 522, 447,
	450, 487, 414, 469, 170, 444, 955, 433, 409, 440,
	410, 431, 458, 114, 462, 428, 501, 472, 513, 142,
	434, 520, 144, 478, 0, 216, 158, 269, 0, 460,
	503, 467, 496, 455, 488, 419, 477, 515, 445, 485,
	516, 0, 0, 0, 82, 83, 84, 0, 980, 981,
	0, 0, 0, 0, 0, 104, 0, 482, 510, 442,
	484, 486, 408, 479, 0, 412, 415, 521, 506, 437,
	438, 1169, 0, 0, 0, 0, 0, 0, 459, 468,
	493, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	435, 921, 476, 0, 0, 0, 416, 413, 0, 0,
	457, 0, 0, 0, 418, 269, 436, 494, 0, 406,
	123, 498, 505, 454, 272, 509, 452, 451, 512, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 502, 432, 441, 108, 439, 198, 177,
	236, 475, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 411, 0, 217, 239, 254, 102, 427, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 423, 426, 421, 422, 470, 471, 517, 518, 519,
	495, 417, 0, 424, 425, 0, 500, 507, 508, 474,
	85, 94, 143, 251, 191, 119, 240, 407, 420, 112,
	430, 0, 0, 443, 448, 449, 461, 463, 464, 465,
	466, 473, 480, 481, 483, 489, 490, 491, 492, 497,
	504, 523, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 511, 499,
	0, 456, 514, 429, 446, 522, 447, 450, 487, 414,
	469, 170, 444, 0, 433, 409, 440, 410, 431, 458,
	114, 462, 428, 501, 472, 513, 142, 434, 520, 144,
	478, 0, 216, 158, 0, 0, 460, 503, 467, 496,
	455, 488, 419, 477, 515, 445, 485, 516, 0, 0,
	0, 82, 83, 84, 0, 980, 981, 0, 0, 0,
	0, 0, 104, 0, 482, 510, 442, 484, 486, 408,
	479, 0, 412, 415, 521, 506, 437, 438, 0, 0,
	0, 0, 0, 0, 0, 459, 468, 493, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 0, 476,
	0, 0, 0, 416, 413, 0, 0, 457, 0, 0,
	0, 418, 0, 436, 494, 0, 406, 123, 498, 505,
	454, 272, 509, 452, 451, 512, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	502, 432, 441, 108, 439, 198, 177, 236, 475, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 411, 0,
	217, 239, 254, 102, 427, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 423, 426,
	421, 422, 470, 471, 517, 518, 519, 495, 417, 0,
	424, 425, 0, 500, 507, 508, 474, 85, 94, 143,
	251, 191, 119, 240, 407, 420, 112, 430, 0, 0,
	443, 448, 449, 461, 463, 464, 465, 466, 473, 480,
	481, 483, 489, 490, 491, 492, 497, 504, 523, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 511, 499, 0, 456, 514,
	429, 446, 522, 447, 450, 487, 414, 469, 170, 444,
	0, 433, 409, 440, 410, 431, 458, 114, 462, 428,
	501, 472, 513, 142, 434, 520, 144, 478, 0, 216,
	158, 0, 0, 460, 503, 467, 496, 455, 488, 419,
	477, 515, 445, 485, 516, 54, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 482, 510, 442, 484, 486, 408, 479, 0, 412,
	415, 521, 506, 437, 438, 0, 0, 0, 0, 0,
	0, 0, 459, 468, 493, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 435, 0, 476, 0, 0, 0,
	416, 413, 0, 0, 457, 0, 0, 0, 418, 0,
	436, 494, 0, 406, 123, 498, 505, 454, 272, 509,
	452, 451, 512, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 502, 432, 441,
	108, 439, 198, 177, 236, 475, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 411, 0, 217, 239, 254,
	102, 427, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 423, 426, 421, 422, 470,
	471, 517, 518, 519, 495, 417, 0, 424, 425, 0,
	500, 507, 508, 474, 85, 94, 143, 251, 191, 119,
	240, 407, 420, 112, 430, 0, 0, 443, 448, 449,
	461, 463, 464, 465, 466, 473, 480, 481, 483, 489,
	490, 491, 492, 497, 504, 523, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 511, 499, 0, 456, 514, 429, 446, 522,
	447, 450, 487, 414, 469, 170, 444, 0, 433, 409,
	440, 410, 431, 458, 114, 462, 428, 501, 472, 513,
	142, 434, 520, 144, 478, 0, 216, 158, 0, 0,
	460, 503, 467, 496, 455, 488, 419, 477, 515, 445,
	485, 516, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 482, 510,
	442, 484, 486, 408, 479, 0, 412, 415, 521, 506,
	437, 438, 0, 0, 0, 0, 0, 0, 0, 459,
	468, 493, 453, 0, 0, 0, 0, 0, 0, 1240,
	0, 435, 0, 476, 0, 0, 0, 416, 413, 0,
	0, 457, 0, 0, 0, 418, 0, 436, 494, 0,
	406, 123, 498, 505, 454, 272, 509, 452, 451, 512,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 502, 432, 441, 108, 439, 198,
	177, 236, 475, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 411, 0, 217, 239, 254, 102, 427, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 423, 426, 421, 422, 470, 471, 517, 518,
	519, 495, 417, 0, 424, 425, 0, 500, 507, 508,
	474, 85, 94, 143, 251, 191, 119, 240, 407, 420,
	112, 430, 0, 0, 443, 448, 449, 461, 463, 464,
	465, 466, 473, 480, 481, 483, 489, 490, 491, 492,
	497, 504, 523, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 511,
	499, 0, 456, 514, 429, 446, 522, 447, 450, 487,
	414, 469, 170, 444, 0, 433, 409, 440, 410, 431,
	458, 114, 462, 428, 501, 472, 513, 142, 434, 520,
	144, 478, 0, 216, 158, 0, 0, 460, 503, 467,
	496, 455, 488, 419, 477, 515, 445, 485, 516, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 482, 510, 442, 484, 486,
	408, 479, 0, 412, 415, 521, 506, 437, 438, 0,
	0, 0, 0, 0, 0, 0, 459, 468, 493, 453,
	0, 0, 0, 0, 0, 0, 964, 0, 435, 0,
	476, 0, 0, 0, 416, 413, 0, 0, 457, 0,
	0, 0, 418, 0, 436, 494, 0, 406, 123, 498,
	505, 454, 272, 509, 452, 451, 512, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 502, 432, 441, 108, 439, 198, 177, 236, 475,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 411,
	0, 217, 239, 254, 102, 427, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 423,
	426, 421, 422, 470, 471, 517, 518, 519, 495, 417,
	0, 424, 425, 0, 500, 507, 508, 474, 85, 94,
	143, 251, 191, 119, 240, 407, 420, 112, 430, 0,
	0, 443, 448, 449, 461, 463, 464, 465, 466, 473,
	480, 481, 483, 489, 490, 491, 492, 497, 504, 523,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 511, 499, 0, 456,
	514, 429, 446, 522, 447, 450, 487, 414, 469, 170,
	444, 0, 433, 409, 440, 410, 431, 458, 114, 462,
	428, 501, 472, 513, 142, 434, 520, 144, 478, 0,
	216, 158, 0, 0, 460, 503, 467, 496, 455, 488,
	419, 477, 515, 445, 485, 516, 0, 0, 0, 82,
	83, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 482, 510, 442, 484, 486, 408, 479, 0,
	412, 415, 521, 506, 437, 438, 0, 0, 0, 0,
	0, 0, 0, 459, 468, 493, 453, 0, 0, 0,
	0, 0, 0, 860, 0, 435, 0, 476, 0, 0,
	0, 416, 413, 0, 0, 457, 0, 0, 0, 418,
	0, 436, 494, 0, 406, 123, 498, 505, 454, 272,
	509, 452, 451, 512, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 502, 432,
	441, 108, 439, 198, 177, 236, 475, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 411, 0, 217, 239,
	254, 102, 427, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 423, 426, 421, 422,
	470, 471, 517, 518, 519, 495, 417, 0, 424, 425,
	0, 500, 507, 508, 474, 85, 94, 143, 251, 191,
	119, 240, 407, 420, 112, 430, 0, 0, 443, 448,
	449, 461, 463, 464, 465, 466, 473, 480, 481, 483,
	489, 490, 491, 492, 497, 504, 523, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 511, 499, 0, 456, 514, 429, 446,
	522, 447, 450, 487, 414, 469, 170, 444, 0, 433,
	409, 440, 410, 431, 458, 114, 462, 428, 501, 472,
	513, 142, 434, 520, 144, 478, 0, 216, 158, 0,
	0, 460, 503, 467, 496, 455, 488, 419, 477, 515,
	445, 485, 516, 0, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 482,
	510, 442, 484, 486, 408, 479, 0, 412, 415, 521,
	506, 437, 438, 0, 0, 0, 0, 0, 0, 0,
	459, 468, 493, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 476, 0, 0, 0, 416, 413,
	0, 0, 457, 0, 0, 0, 418, 0, 436, 494,
	0, 406, 123, 498, 505, 454, 272, 509, 452, 451,
	512, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 502, 432, 441, 108, 439,
	198, 177, 236, 475, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 411, 0, 217, 239, 254, 102, 427,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 423, 426, 421, 422, 470, 471, 517,
	518, 519, 495, 417, 0, 424, 425, 0, 500, 507,
	508, 474, 85, 94, 143, 251, 191, 119, 240, 407,
	420, 112, 430, 0, 0, 443, 448, 449, 461, 463,
	464, 465, 466, 473, 480, 481, 483, 489, 490, 491,
	492, 497, 504, 523, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	511, 499, 0, 456, 514, 429, 446, 522, 447, 450,
	487, 414, 469, 170, 444, 0, 433, 409, 440, 410,
	431, 458, 114, 462, 428, 501, 472, 513, 142, 434,
	520, 144, 478, 0, 216, 158, 0, 0, 460, 503,
	467, 496, 455, 488, 419, 477, 515, 445, 485, 516,
	0, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 482, 510, 442, 484,
	486, 408, 479, 0, 412, 415, 521, 506, 437, 438,
	0, 0, 0, 0, 0, 0, 0, 459, 468, 493,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 435,
	0, 476, 0, 0, 0, 416, 413, 0, 0, 457,
	0, 0, 0, 418, 0, 436, 494, 0, 406, 123,
	498, 505, 454, 272, 509, 452, 451, 512, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 502, 432, 441, 108, 439, 198, 177, 236,
	475, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 404, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	411, 0, 217, 239, 254, 102, 427, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 405, 403, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	423, 426, 421, 422, 470, 471, 517, 518, 519, 495,
	417, 0, 424, 425, 0, 500, 507, 508, 474, 85,
	94, 143, 251, 191, 119, 240, 407, 420, 112, 430,
	0, 0, 443, 448, 449, 461, 463, 464, 465, 466,
	473, 480, 481, 483, 489, 490, 491, 492, 497, 504,
	523, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 511, 499, 0,
	456, 514, 429, 446, 522, 447, 450, 487, 414, 469,
	170, 444, 0, 433, 409, 440, 410, 431, 458, 114,
	462, 428, 501, 472, 513, 142, 434, 520, 144, 478,
	0, 216, 158, 0, 0, 460, 503, 467, 496, 455,
	488, 419, 477, 515, 445, 485, 516, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 482, 510, 442, 484, 486, 408, 479,
	0, 412, 415, 521, 506, 437, 438, 0, 0, 0,
	0, 0, 0, 0, 459, 468, 493, 453, 0, 0,
	0, 0, 0, 0, 0, 0, 435, 0, 476, 0,
	0, 0, 416, 413, 0, 0, 457, 0, 0, 0,
	418, 0, 436, 494, 0, 406, 123, 498, 505, 454,
	272, 509, 452, 451, 512, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 502,
	432, 441, 108, 439, 198, 177, 236, 475, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 719, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 404, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 411, 0, 217,
	239, 254, 102, 427, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 405, 403, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 423, 426, 421,
	422, 470, 471, 517, 518, 519, 495, 417, 0, 424,
	425, 0, 500, 507, 508, 474, 85, 94, 143, 251,
	191, 119, 240, 407, 420, 112, 430, 0, 0, 443,
	448, 449, 461, 463, 464, 465, 466, 473, 480, 481,
	483, 489, 490, 491, 492, 497, 504, 523, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 511, 499, 0, 456, 514, 429,
	446, 522, 447, 450, 487, 414, 469, 170, 444, 0,
	433, 409, 440, 410, 431, 458, 114, 462, 428, 501,
	472, 513, 142, 434, 520, 144, 478, 0, 216, 158,
	0, 0, 460, 503, 467, 496, 455, 488, 419, 477,
	515, 445, 485, 516, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	482, 510, 442, 484, 486, 408, 479, 0, 412, 415,
	521, 506, 437, 438, 0, 0, 0, 0, 0, 0,
	0, 459, 468, 493, 453, 0, 0, 0, 0, 0,
	0, 0, 0, 435, 0, 476, 0, 0, 0, 416,
	413, 0, 0, 457, 0, 0, 0, 418, 0, 436,
	494, 0, 406, 123, 498, 505, 454, 272, 509, 452,
	451, 512, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 502, 432, 441, 108,
	439, 198, 177, 236, 475, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 395,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 404, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 411, 0, 217, 239, 254, 102,
	427, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 405, 403, 398, 397, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 423, 426, 421, 422, 470, 471,
	517, 518, 519, 495, 417, 0, 424, 425, 0, 500,
	507, 508, 474, 85, 94, 143, 251, 191, 119, 240,
	407, 420, 112, 430, 0, 0, 443, 448, 449, 461,
	463, 464, 465, 466, 473, 480, 481, 483, 489, 490,
	491, 492, 497, 504, 523, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 896, 0, 329, 0, 0, 0,
	114, 0, 326, 0, 0, 0, 142, 897, 369, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 82, 83, 84, 348, 347, 350, 351, 352, 353,
	0, 0, 104, 349, 354, 355, 356, 0, 0, 0,
	324, 341, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 339, 320, 0, 0, 0, 383,
	0, 340, 0, 0, 335, 336, 337, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 382, 0,
	0, 272, 0, 0, 380, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 370, 381,
	376, 377, 374, 375, 373, 372, 371, 384, 362, 363,
	364, 365, 367, 0, 378, 379, 366, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 170, 0, 0, 0, 0,
	329, 0, 0, 0, 114, 0, 326, 0, 0, 0,
	142, 0, 369, 144, 0, 0, 216, 158, 0, 0,
	0, 0, 360, 361, 0, 0, 0, 0, 0, 0,
	971, 0, 54, 0, 0, 82, 83, 84, 348, 347,
	350, 351, 352, 353, 0, 0, 104, 349, 354, 355,
	356, 972, 0, 0, 324, 341, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 338, 339, 0,
	0, 0, 0, 383, 0, 340, 0, 0, 335, 336,
	337, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 382, 0, 0, 272, 0, 0, 380, 0,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 0, 0, 0, 108, 0, 198,
	177, 236, 0, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 0, 0, 217, 239, 254, 102, 0, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 370, 381, 376, 377, 374, 375, 373, 372,
	371, 384, 362, 363, 364, 365, 367, 0, 378, 379,
	366, 85, 94, 143, 251, 191, 119, 240, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 170,
	0, 0, 0, 0, 329, 0, 0, 0, 114, 0,
	326, 0, 0, 0, 142, 0, 369, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 590, 82,
	83, 84, 348, 347, 350, 351, 352, 353, 0, 0,
	104, 349, 354, 355, 356, 0, 0, 0, 324, 341,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 338, 339, 0, 0, 0, 0, 383, 0, 340,
	0, 0, 335, 336, 337, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 382, 0, 0, 272,
	0, 0, 380, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 370, 381, 376, 377,
	374, 375, 373, 372, 371, 384, 362, 363, 364, 365,
	367, 0, 378, 379, 366, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 170, 0, 0, 0, 0, 329, 0,
	0, 0, 114, 0, 326, 0, 0, 0, 142, 0,
	369, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 82, 83, 84, 348, 347, 350, 351,
	352, 353, 0, 0, 104, 349, 354, 355, 356, 0,
	0, 0, 324, 341, 0, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 339, 320, 0, 0,
	0, 383, 0, 340, 0, 0, 335, 336, 337, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	382, 0, 0, 272, 0, 0, 380, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	370, 381, 376, 377, 374, 375, 373, 372, 371, 384,
	362, 363, 364, 365, 367, 0, 378, 379, 366, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 329, 0, 0, 0, 114, 0, 326, 0,
	0, 0, 142, 0, 369, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 82, 83, 84,
	348, 912, 350, 351, 352, 353, 0, 0, 104, 349,
	354, 355, 356, 0, 0, 0, 324, 341, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 338,
	339, 320, 0, 0, 0, 383, 0, 340, 0, 0,
	335, 336, 337, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 382, 0, 0, 272, 0, 0,
	380, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 370, 381, 376, 377, 374, 375,
	373, 372, 371, 384, 362, 363, 364, 365, 367, 0,
	378, 379, 366, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 0, 0, 329, 0, 0, 0,
	114, 0, 326, 0, 0, 0, 142, 0, 369, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 82, 83, 84, 348, 909, 350, 351, 352, 353,
	0, 0, 104, 349, 354, 355, 356, 0, 0, 0,
	324, 341, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 339, 320, 0, 0, 0, 383,
	0, 340, 0, 0, 335, 336, 337, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 382, 0,
	0, 272, 0, 0, 380, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 370, 381,
	376, 377, 374, 375, 373, 372, 371, 384, 362, 363,
	364, 365, 367, 0, 378, 379, 366, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 329, 0, 0, 0, 114, 0, 326, 0,
	0, 0, 142, 0, 369, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 82, 83, 84,
	348, 347, 350, 351, 352, 353, 0, 0, 104, 349,
	354, 355, 356, 0, 0, 0, 324, 341, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 338,
	339, 0, 0, 0, 0, 383, 0, 340, 0, 0,
	335, 336, 337, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 382, 0, 0, 272, 0, 0,
	380, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 370, 381, 376, 377, 374, 375,
	373, 372, 371, 384, 362, 363, 364, 365, 367, 0,
	378, 379, 366, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 0, 0, 329, 0, 0, 0,
	114, 0, 326, 0, 0, 0, 142, 0, 369, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 82, 83, 84, 348, 347, 350, 351, 352, 353,
	0, 0, 104, 349, 354, 355, 356, 0, 0, 0,
	324, 341, 0, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 339, 0, 0, 0, 0, 383,
	0, 340, 0, 0, 335, 336, 337, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 382, 0,
	0, 272, 0, 0, 380, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 370, 381,
	376, 377, 374, 375, 373, 372, 371, 384, 362, 363,
	364, 365, 367, 0, 378, 379, 366, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	142, 0, 369, 144, 0, 0, 216, 158, 0, 0,
	0, 0, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 82, 83, 84, 348, 347,
	350, 351, 352, 353, 0, 0, 104, 349, 354, 355,
	356, 0, 0, 0, 0, 341, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 338, 339, 0,
	0, 0, 0, 383, 0, 340, 0, 0, 335, 336,
	337, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 382, 0, 0, 272, 0, 0, 380, 0,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 0, 0, 0, 108, 0, 198,
	177, 236, 1545, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 0, 0, 217, 239, 254, 102, 0, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 370, 381, 376, 377, 374, 375, 373, 372,
	371, 384, 362, 363, 364, 365, 367, 0, 378, 379,
	366, 85, 94, 143, 251, 191, 119, 240, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 142, 0, 369, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 590, 82,
	83, 84, 348, 347, 350, 351, 352, 353, 0, 0,
	104, 349, 354, 355, 356, 0, 0, 0, 0, 341,
	0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 338, 339, 0, 0, 0, 0, 383, 0, 340,
	0, 0, 335, 336, 337, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 382, 0, 0, 272,
	0, 0, 380, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 370, 381, 376, 377,
	374, 375, 373, 372, 371, 384, 362, 363, 364, 365,
	367, 0, 378, 379, 366, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 142, 0,
	369, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 82, 83, 84, 348, 347, 350, 351,
	352, 353, 0, 0, 104, 349, 354, 355, 356, 0,
	0, 0, 0, 341, 0, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 339, 0, 0, 0,
	0, 383, 0, 340, 0, 0, 335, 336, 337, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	382, 0, 0, 272, 0, 0, 380, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	370, 381, 376, 377, 374, 375, 373, 372, 371, 384,
	362, 363, 364, 365, 367, 0, 378, 379, 366, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 0, 142, 0, 0, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 625, 624, 634, 635, 627,
	628, 629, 630, 631, 632, 633, 626, 0, 0, 636,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 272, 0, 0,
	0, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 0, 613, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 142, 0, 0, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 0, 615, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 610, 609,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 272, 0, 0, 0, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	142, 0, 0, 144, 0, 0, 216, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 76, 77, 0, 73, 0, 0, 0, 78,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 0, 0, 0, 108, 0, 198,
	177, 236, 0, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 0, 0, 217, 239, 254, 102, 0, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 94, 143, 251, 191, 119, 240, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 170,
	0, 0, 0, 954, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 142, 0, 0, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 0, 956, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 272,
	0, 0, 0, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	142, 0, 0, 144, 0, 0, 216, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 272, 0, 0, 0, 0,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 0, 0, 0, 108, 0, 198,
	177, 236, 0, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 0, 0, 217, 239, 254, 102, 0, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 94, 143, 251, 191, 119, 240, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 170,
	0, 0, 0, 954, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 142, 0, 0, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 0, 956, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 272,
	0, 0, 0, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 952, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 142, 0,
	0, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 0, 0, 847, 0,
	0, 848, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 272, 0, 0, 0, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 728, 0,
	0, 0, 142, 0, 0, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 727, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 272, 0, 0,
	0, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 142, 0, 0, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 272, 0, 0, 0, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 0, 0, 0, 0,
	142, 0, 0, 144, 0, 0, 216, 158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 272, 0, 0, 0, 0,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 0, 0, 0, 108, 0, 198,
	177, 236, 0, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 234, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	98, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 0, 0, 217, 239, 254, 102, 0, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 162,
	99, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 94, 143, 251, 191, 119, 240, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 114, 0,
	0, 0, 0, 0, 142, 0, 0, 144, 0, 0,
	216, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 84, 0, 956, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 272,
	0, 0, 0, 0, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 0, 0,
	0, 108, 0, 198, 177, 236, 0, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 0, 0, 217, 239,
	254, 102, 0, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 94, 143, 251, 191,
	119, 240, 0, 0, 112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 142, 0,
	0, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 0, 615, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 272, 0, 0, 0, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 0, 0, 0, 698, 114, 0, 0, 0,
	0, 0, 142, 0, 0, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 272, 0, 0,
	0, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 387, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	267, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 272, 0, 0, 0,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
}
var yyPact = [...]int{

	1650, -1000, -271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 926, 967, -1000, -1000, -1000, -1000, -1000, -1000,
	254, 11917, 9, 114, 19, 15944, 112, 1667, 16278, -1000,
	11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -79, -92,
	-1000, 755, -1000, -1000, -1000, -1000, -1000, 925, 929, 770,
	912, 854, -1000, 8565, 83, 83, 15610, 7229, -1000, -1000,
	390, 16278, 109, 16278, -151, 81, 81, 81, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 111, 16278, 557, 557, 253,
	-1000, 16278, 74, 557, 74, 74, 74, 16278, -1000, 162,
	-1000, -1000, -1000, 16278, 557, 882, 312, 47, 4800, -1000,
	188, -1000, 4800, 23, 4800, -56, 940, 25, -43, -1000,
	4800, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 475, 888, 9913, 9913, 926,
	-1000, 755, -1000, -1000, -1000, 883, -1000, -1000, 360, 953,
	-1000, 11583, 157, -1000, 9913, 1878, 717, -1000, -1000, 717,
	-1000, -1000, 134, -1000, -1000, 10915, 10915, 10915, 10915, 10915,
	10915, 10915, 10915, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 717, -1000, 9579,
	717, 717, 717, 717, 717, 717, 717, 717, 9913, 717,
	717, 717, 717, 717, 717, 717, 717, 717, 717, 717,
	717, 717, 717, 717, 717, 15269, 14267, 16278, 737, 723,
	-1000, -1000, 152, 712, 6882, -98, -1000, -1000, -1000, 270,
	13599, -1000, -1000, -1000, 881, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 690, 16278, -1000, 233, -1000, 557,
	4800, 91, 557, 303, 557, 16278, 16278, 4800, 4800, 4800,
	35, 65, 56, 16278, 715, 88, 16278, 905, 800, 16278,
	557, 557, -1000, 6188, -1000, 4800, 312, -1000, 465, 9913,
	4800, 4800, 4800, 16278, 4800, 4800, -1000, -1000, -1000, 952,
	951, 950, -1000, 4800, 4800, -1000, 949, 279, -1000, -1000,
	-1000, -1000, 9913, 199, -1000, 799, -1000, -1000, -1000, -1000,
	-1000, -1000, 962, 192, 627, 146, 713, -1000, 517, 925,
	475, 854, 13265, 814, -1000, -1000, -1000, 16278, -1000, 9913,
	9913, 499, -1000, 14935, -1000, -1000, 5841, 238, 10915, 430,
	296, 10915, 10915, 10915, 10915, 10915, 10915, 10915, 10915, 10915,
	10915, 10915, 10915, 10915, 10915, 10915, 592, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 557, -1000, 755, 536, 536,
	172, 172, 172, 172, 172, 172, 172, 11249, 7563, 475,
	686, 453, 9579, 8565, 8565, 9913, 9913, 9233, 8899, 8565,
	887, 288, 453, 16278, -1000, -1000, 10581, -1000, -1000, -1000,
	-1000, -1000, 475, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16278, 16278, 8565, 8565, 8565, 8565, 8565, 48, 16278, -1000,
	736, 768, -1000, -1000, -1000, 909, 12597, 12931, 48, 702,
	14267, 16278, -1000, -1000, 14267, 16278, 5494, 6535, 712, -98,
	639, -1000, -120, -111, 7897, 170, -1000, -1000, -1000, -1000,
	4453, 344, 516, 322, -55, -1000, -1000, -1000, 751, -1000,
	751, 751, 751, 751, -17, -17, -17, -17, -1000, -1000,
	-1000, -1000, -1000, 782, 780, -1000, 751, 751, 751, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 779, 779, 779,
	765, 765, 784, -1000, 16278, 4800, 892, 4800, -1000, 73,
	-1000, -1000, -1000, 16278, 16278, 16278, 16278, 16278, 122, 16278,
	16278, 709, -1000, 16278, 4800, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 453, -1000, -1000, -1000, -1000, -1000, -1000,
	16278, 16278, 16278, -1000, -1000, 16278, 312, 16278, 16278, 453,
	-1000, 463, 16278, -1000, 861, 9913, 9913, 6188, 9913, -1000,
	-1000, -1000, 888, -1000, 887, 924, -1000, 871, 870, 8565,
	-1000, -1000, 238, 250, -1000, -1000, 539, -1000, -1000, -1000,
	-1000, 145, 717, -1000, 1749, -1000, -1000, -1000, -1000, 430,
	10915, 10915, 10915, 198, 1749, 1710, 260, 563, 172, 414,
	414, 174, 174, 174, 174, 174, 389, 389, -1000, -1000,
	-1000, 475, -1000, -1000, -1000, 475, 8565, 8565, 704, -1000,
	-1000, 9913, -1000, 475, 665, 665, 513, 376, 265, 947,
	665, 262, 946, 665, 665, 8565, 313, -1000, 9913, 475,
	-1000, 141, -1000, 405, 697, 650, 665, 475, 475, 665,
	665, 732, 717, -1000, 16278, 14267, 14267, 14267, 14267, 14267,
	-1000, 849, 848, -1000, 813, 811, 836, 16278, -1000, 667,
	12597, 159, 717, -1000, 14601, -1000, -1000, 938, 14267, 724,
	-1000, 724, -1000, 139, -1000, -1000, 639, -98, -76, -1000,
	-1000, -1000, -1000, 453, -1000, 628, 626, 4106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 772, 557, -1000, 897, 207,
	211, 557, 896, -1000, -1000, -1000, 884, -1000, 314, -52,
	-1000, -1000, 425, -17, -17, -1000, -1000, 170, 879, 170,
	170, 170, 461, 461, -1000, -1000, -1000, -1000, 421, -1000,
	-1000, -1000, 419, -1000, 798, 16278, 4800, -1000, -1000, -1000,
	-1000, 1535, 1535, 221, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45, 541, -1000, -1000, -1000,
	-1000, 7, 33, 86, -1000, 4800, -1000, 279, 279, 279,
	279, -1000, -1000, -1000, -1000, -1000, 859, 453, 453, 138,
	-1000, -1000, 16278, -1000, -1000, -1000, -1000, 642, -1000, -1000,
	-1000, 5147, 8565, -1000, 198, 1749, 1611, -1000, 10915, 10915,
	-1000, -1000, 665, 665, 8565, 453, -1000, -1000, -1000, 30,
	592, 30, 10915, 10915, -1000, 10915, 10915, -1000, -169, 674,
	251, -1000, 9913, 237, -1000, 6188, -1000, 10915, 10915, -1000,
	-1000, -1000, -1000, -1000, 795, 16278, 717, -1000, 12597, 16278,
	747, -1000, 266, 768, 777, 793, 840, -1000, -1000, -1000,
	-1000, 819, -1000, 812, -1000, -1000, -1000, -1000, -1000, 101,
	99, 97, 16278, -1000, 926, 9913, 724, -1000, -1000, 184,
	-1000, -1000, -129, -127, -1000, -1000, -1000, 4453, -1000, 4453,
	16278, 60, -1000, 557, 557, -1000, -1000, -1000, 769, 788,
	10915, -1000, -1000, -1000, 489, 170, 170, -1000, 281, -1000,
	-1000, -1000, 657, -1000, 653, 622, 648, 16278, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16278, -1000, -1000,
	-1000, -1000, -1000, 16278, -174, 557, 16278, 16278, 16278, 16278,
	-1000, 312, 312, 312, 312, -1000, 6188, -1000, 938, 14267,
	-1000, -1000, 475, -1000, 10915, 1749, 1749, -1000, -1000, -1000,
	475, 751, 751, -1000, 751, 765, -1000, 751, 0, 751,
	-1, 475, 475, 2037, 1970, 1943, 1922, 717, -163, -1000,
	453, 9913, -1000, 1267, 529, -1000, 889, 504, 540, -1000,
	-1000, 8231, 475, 644, 137, 637, -1000, 926, 16278, 9913,
	-1000, -1000, 9913, 761, -1000, 9913, -1000, -1000, -1000, 717,
	717, 717, 637, 925, 453, -1000, -1000, -1000, -1000, 4106,
	-1000, 620, -1000, 751, -1000, -1000, -1000, 16278, -41, 960,
	1749, -1000, -1000, -1000, -1000, -1000, -17, 460, -17, 415,
	-1000, 412, 4800, -1000, -1000, -1000, -1000, 900, -1000, 6188,
	-1000, -1000, 734, 778, -1000, -1000, -1000, -1000, -1000, -1000,
	936, 616, -1000, 1749, -1000, -1000, 125, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10915, 10915, 10915, 10915, 10915,
	925, 452, 453, 10915, 10915, 895, -1000, 717, -1000, -1000,
	764, 16278, 16278, -1000, 16278, 925, -1000, 453, 453, 16278,
	453, 13933, 16278, 16278, 12251, -1000, 177, 16278, -1000, 599,
	-1000, 204, -1000, -126, 170, -1000, 170, 486, 477, -1000,
	717, 548, -1000, 261, 16278, 16278, 933, 928, -1000, -1000,
	405, 405, 405, 405, 54, 475, -1000, 405, 405, 959,
	-1000, 717, -1000, 755, 129, -1000, -1000, -1000, 591, 587,
	-1000, 587, 587, 159, 177, -1000, 557, 247, 438, -1000,
	57, 16278, 331, 894, -1000, 886, -1000, -1000, -1000, -1000,
	-1000, 44, 6188, 4453, 585, -1000, -1000, 9913, 9913, -1000,
	-1000, -1000, -1000, 475, 46, -178, -1000, -1000, -1000, 16278,
	540, 475, 16278, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	384, -1000, -1000, 16278, -1000, -1000, 391, -1000, -1000, 566,
	-1000, 16278, -1000, -1000, 541, 453, 534, -1000, 858, -172,
	-183, 530, -1000, -1000, -1000, 726, -1000, -1000, 44, 867,
	-174, -1000, 857, -1000, 16278, -1000, 41, -1000, -175, 492,
	39, -179, 787, 717, -187, 786, -1000, 944, 10247, -1000,
	-1000, 958, 179, 179, 405, 475, -1000, -1000, -1000, 66,
	355, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1187, 33, 553, 1186, 1184, 1183, 1182, 1179, 1178,
	1177, 1173, 1172, 1169, 1167, 1166, 1163, 1161, 1160, 1159,
	1157, 1155, 1154, 1152, 1151, 1150, 84, 1149, 1148, 1147,
	73, 1146, 79, 1142, 1141, 47, 850, 45, 44, 8,
	1140, 26, 61, 58, 1138, 28, 1136, 1135, 77, 1134,
	1127, 56, 1126, 1125, 2348, 1124, 66, 1123, 12, 50,
	1122, 1120, 1119, 1118, 76, 241, 1117, 1116, 14, 1115,
	1111, 91, 1110, 59, 6, 13, 18, 23, 1109, 310,
	11, 1108, 57, 1103, 1102, 1100, 1099, 21, 1097, 62,
	1095, 49, 60, 1094, 10, 69, 37, 25, 7, 78,
	64, 1093, 16, 65, 52, 1092, 1091, 555, 1090, 1089,
	46, 1088, 1087, 1086, 30, 1085, 87, 481, 1083, 1080,
	1074, 1071, 40, 934, 1970, 118, 70, 1070, 1067, 1061,
	2731, 42, 54, 24, 1060, 53, 189, 43, 1058, 1057,
	41, 1055, 1039, 1038, 1037, 1036, 1035, 1034, 307, 1033,
	1030, 1029, 27, 35, 1028, 1024, 63, 20, 1022, 1019,
	1018, 55, 75, 1016, 1015, 51, 31, 1014, 1013, 1011,
	1007, 1005, 29, 15, 1004, 19, 999, 9, 990, 22,
	989, 4, 988, 17, 986, 3, 0, 983, 5, 48,
	1, 982, 2, 981, 980, 1553, 148, 80, 979, 83,
}
var yyR1 = [...]int{

	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 186, 186, 186, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 29, 29,
	8, 9, 9, 9, 9, 197, 197, 48, 48, 49,
	49, 95, 95, 10, 10, 10, 10, 100, 100, 104,
	104, 104, 105, 105, 105, 105, 138, 138, 11, 11,
	11, 11, 11, 11, 11, 188, 188, 187, 185, 185,
	184, 184, 183, 17, 168, 170, 170, 169, 169, 169,
	169, 162, 141, 141, 141, 141, 144, 144, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 143, 143, 143,
	143, 143, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 147, 147, 147, 147, 147, 147, 147, 147,
	161, 161, 148, 148, 156, 156, 157, 157, 157, 154,
	154, 155, 155, 158, 158, 158, 150, 150, 151, 151,
	159, 159, 152, 152, 152, 153, 153, 153, 160, 160,
	160, 160, 160, 149, 149, 163, 163, 178, 178, 177,
	177, 177, 167, 167, 174, 174, 174, 174, 174, 165,
	165, 166, 166, 176, 176, 175, 164, 164, 179, 179,
	179, 179, 191, 192, 190, 190, 190, 190, 190, 171,
	171, 171, 172, 172, 172, 173, 173, 173, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 182,
	180, 180, 181, 181, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 111, 111, 113, 113, 109, 109,
	112, 112, 110, 110, 110, 114, 114, 114, 115, 115,
	139, 139, 139, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 16, 198, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 30,
	31, 31, 37, 37, 36, 36, 38, 38, 38, 38,
	127, 127, 127, 126, 126, 40, 40, 41, 41, 42,
	42, 43, 43, 43, 43, 57, 57, 94, 94, 96,
	96, 44, 44, 44, 44, 45, 45, 46, 46, 47,
	47, 134, 134, 133, 133, 133, 132, 132, 50, 50,
	50, 52, 51, 51, 51, 51, 53, 53, 55, 55,
	54, 54, 56, 58, 58, 58, 58, 58, 59, 59,
	39, 39, 39, 39, 39, 39, 39, 108, 108, 61,
	61, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 72, 72, 72, 72, 72, 72, 62, 62, 62,
	62, 62, 62, 62, 35, 35, 73, 73, 73, 79,
	74, 74, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 69, 69, 69, 69, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 199, 199, 71,
	70, 70, 70, 70, 70, 70, 70, 33, 33, 33,
	33, 33, 137, 137, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 83, 83, 34,
	34, 81, 81, 82, 84, 84, 80, 80, 80, 64,
	64, 64, 64, 64, 64, 64, 64, 66, 66, 66,
	85, 85, 86, 86, 87, 87, 88, 88, 89, 90,
	90, 90, 91, 91, 91, 91, 92, 92, 92, 63,
	63, 63, 63, 63, 63, 93, 93, 93, 93, 97,
	97, 75, 75, 77, 77, 76, 78, 98, 98, 102,
	99, 99, 103, 103, 103, 103, 101, 101, 101, 129,
	129, 129, 106, 106, 116, 116, 117, 117, 107, 107,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	119, 119, 119, 120, 120, 121, 121, 121, 128, 128,
	124, 124, 125, 125, 130, 130, 131, 131, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 195, 196, 135,
	136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 4, 4, 7, 5, 5,
	5, 12, 7, 5, 9, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 7, 7, 7, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 4, 3,
	3, 5, 2, 3, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 4, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 118, 119, 121, 120, 154, 122, 147, 51, 168,
	169, 171, 172, 25, 148, 149, 152, 153, 31, 32,
	124, -195, 8, 254, 55, -194, 352, -87, 15, -28,
	5, -26, -198, -26, -26, -26, -26, -26, -168, -170,
	55, 93, -121, 128, 75, 246, 125, 126, 132, -124,
	-186, -123, 58, 59, 60, 264, 140, 296, 297, 168,
	179, 173, 200, 192, 265, 298, 141, 190, 193, 233,
	138, 299, 220, 227, 69, 171, 242, 300, 150, 188,
	184, 301, 273, 182, 27, 302, 229, 205, 303, 269,
	231, 183, 228, 124, 304, 143, 136, 305, 206, 210,
	306, 234, 307, 308, 309, 177, 178, 310, 139, 236,
	204, 137, 33, 266, 36, 158, 237, 208, 311, 203,
	199, 312, 313, 314, 315, 202, 176, 198, 40, 212,
	211, 213, 232, 195, 316, 317, 318, 144, 319, 185,
	18, 320, 321, 322, 323, 324, 240, 153, 325, 156,
	326, 327, 328, 329, 330, 331, 230, 207, 209, 133,
	160, 268, 332, 238, 181, 333, 145, 157, 152, 241,
	146, 334, 335, 336, 337, 338, 339, 340, 172, 341,
	342, 343, 344, 167, 235, 244, 39, 217, 345, 175,
	135, 346, 169, 164, 222, 196, 159, 347, 348, 186,
	187, 201, 174, 197, 170, 161, 154, 349, 243, 218,
	270, 194, 191, 165, 350, 162, 163, 351, 223, 224,
	166, 267, 239, 189, 219, -107, 128, 246, 125, 224,
	130, 126, 126, 127, 128, 246, 125, 126, -54, -130,
	-186, -123, 128, 126, 111, 193, 233, 118, 221, 229,
	-113, 230, 160, -139, 126, -109, 220, 223, 224, 166,
	-186, 231, 235, 234, 225, -130, 170, -135, -135, -135,
	-135, -135, 222, 222, -135, -2, -91, 17, 16, -5,
	-3, -195, 6, 20, 21, -32, 41, 42, -27, -38,
	102, -39, -130, -60, 77, -65, 29, -186, -123, 23,
	-64, -61, -80, -78, -79, 111, 112, 113, 100, 101,
	108, 78, 114, -69, -67, -68, -70, 62, 61, 70,
	63, 64, 65, 66, 71, 72, 73, -124, -76, -195,
	45, 46, 255, 256, 257, 258, 263, 259, 80, 35,
	245, 253, 252, 251, 249, 250, 247, 248, 261, 262,
	131, 246, 125, 106, 254, -107, -107, 11, -48, -49,
	-54, -56, -130, -99, -138, 170, -103, 235, 234, -125,
	-101, -124, -122, 233, 193, 232, 123, 271, 76, 22,
	24, 215, 79, 111, 16, 80, 110, 255, 118, 49,
	272, 247, 248, 245, 257, 258, 246, 221, 29, 10,
	274, 25, 148, 21, 34, 104, 120, 83, 84, 151,
	23, 149, 73, 277, 19, 52, 11, 13, 278, 279,
	14, 131, 130, 95, 127, 47, 8, 114, 26, 92,
	43, 280, 28, 281, 282, 283, 284, 45, 93, 17,
	249, 250, 31, 285, 263, 155, 106, 50, 37, 77,
	286, 287, 71, 288, 74, 53, 75, 15, 48, 289,
	290, 291, 292, 94, 121, 254, 46, 293, 125, 6,
	260, 30, 147, 44, 294, 126, 82, 261, 262, 129,
	72, 5, 132, 32, 9, 51, 54, 251, 252, 253,
	35, 81, 12, 295, -169, 93, -162, -186, -54, 127,
	-54, 254, -117, 131, -117, -117, 126, -54, -186, -186,
	118, 120, 123, 53, -18, -54, -116, 131, -186, -116,
	-116, -116, -54, 115, -54, -186, 30, -114, 93, 12,
	246, -186, 160, 126, 161, 128, -136, -195, -125, 127,
	139, 33, -136, 164, 165, -136, -112, -111, 227, 228,
	222, 226, 12, 165, 222, 163, -136, -135, -135, -196,
	57, -92, 19, 31, -39, -130, -88, -89, -39, -87,
	-2, -26, 37, -30, 21, 34, 68, 11, -127, 76,
	75, 92, -126, 22, -124, 62, 115, -39, -62, 95,
	77, 93, 94, 79, 97, 96, 107, 100, 101, 102,
	103, 104, 105, 106, 98, 99, 110, 85, 86, 87,
	88, 89, 90, 91, -108, -195, -79, -195, 116, 117,
	-65, -65, -65, -65, -65, -65, -65, -65, -195, -2,
	-74, -39, -195, -195, -195, -195, -195, -195, -195, -195,
	-195, -83, -39, -195, -199, -71, -195, -199, -71, -199,
	-71, -199, -195, -199, -71, -199, -71, -199, -199, -71,
	-195, -195, -195, -195, -195, -195, -195, -55, 26, -54,
	-41, -42, -43, -44, -57, -79, -195, -54, -54, -48,
	-197, 56, 11, 54, -197, 56, 115, 56, -99, 170,
	-100, -104, 236, 238, 85, -129, -124, 62, 29, 30,
	57, 56, -54, -141, -144, -146, -145, -147, -142, -143,
	190, 191, 111, 194, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 30, 150, 186, 187, 188, 189,
	206, 207, 208, 209, 210, 211, 212, 213, 173, 192,
	265, 174, 175, 176, 177, 178, 179, 181, 182, 183,
	184, 185, -186, -136, 128, -186, 77, -186, -54, -54,
	-136, -136, -136, 162, 162, 126, 126, 167, -54, 56,
	129, -48, 23, 53, -54, -186, -186, -131, -130, -122,
	-136, -114, 62, -39, -136, -136, -136, -54, -136, -136,
	11, 11, 11, -136, -136, 11, -110, 11, 95, -39,
	-115, 93, 53, 9, 95, 56, 18, 115, 56, -90,
	24, 25, -91, -196, -32, -66, -124, 63, 66, -31,
	44, -54, -39, -39, -72, 71, 77, 72, 73, -126,
	102, -131, -125, -122, -65, -73, -76, -79, 67, 95,
	93, 94, 79, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -137, -186,
	62, -186, -64, -64, -124, -37, 21, 34, -36, -38,
	-196, 56, -196, -2, -36, -36, -39, -39, -80, 62,
	-36, -80, 62, -36, -36, -30, -81, -82, 81, -80,
	-124, -130, -196, -65, -124, -124, -36, -37, -37, -36,
	-36, -95, 156, -54, 30, 56, -50, -52, -51, -53,
	43, 47, 49, 44, 45, 46, 50, -134, 22, -41,
	-195, -133, 156, -132, 22, -130, 62, -95, 54, -41,
	-54, -41, -56, -130, 102, -103, -100, 56, 237, 239,
	240, 53, 74, -39, -153, 110, -171, -172, -173, -125,
	62, 63, -162, -163, -164, -174, 142, -179, 133, 135,
	132, -165, 143, 127, 28, 57, -158, 71, 77, -154,
	218, -148, 55, -148, -148, -148, -148, -152, 193, -152,
	-152, -152, 55, 55, -148, -148, -148, -156, 55, -156,
	-156, -157, 55, -157, -128, 54, -54, -136, 23, -136,
	-118, 123, 120, 121, -182, 119, 215, 193, 69, 29,
	15, 255, 156, 270, -186, 157, -54, -54, -54, -54,
	-54, 123, 120, -54, -54, -54, -136, -54, -54, -54,
	-54, -114, -130, -130, 62, -54, 39, -39, -39, -131,
	-89, -92, -106, 19, 11, 35, 35, -36, 71, 72,
	73, 115, -195, -73, -65, -65, -65, -35, 151, 76,
	-196, -196, -36, -36, 56, -39, -196, -196, -196, 56,
	54, 22, 11, 11, -196, 11, 11, -196, -196, -36,
	-84, -82, 83, -39, -196, 115, -196, 56, 56, -196,
	-196, -196, -196, -196, -63, 30, 35, -2, -195, -195,
	-98, -102, -80, -42, -43, -43, -42, -43, 43, 43,
	43, 48, 43, 48, 43, -51, -130, -196, -58, 51,
	130, 52, -195, -132, -59, 12, -41, -59, -59, 115,
	-104, -105, 241, 238, 244, -186, 62, 56, -173, 85,
	55, -186, 28, -165, -165, -166, -186, -166, 28, -150,
	29, 71, -155, 219, 63, -152, -152, -153, 30, -153,
	-153, -153, -161, 62, -161, 63, 63, 53, -124, -136,
	-135, -189, 138, 134, 142, 143, 136, 58, 59, 60,
	127, 28, 133, 135, 156, 132, -189, -119, -120, 129,
	22, 127, 28, 156, -188, 54, 162, 215, 162, 129,
	-136, -110, -110, -110, -110, 40, 115, -54, -40, 11,
	102, -125, -37, -35, 76, -65, -65, -196, -196, -38,
	-140, 111, 190, 150, 188, 184, 204, 195, 217, 186,
	218, -137, -140, -65, -65, -65, -65, 264, -87, 84,
	-39, 82, -125, -65, -65, -97, 53, -98, -75, -77,
	-76, -195, -2, -93, -124, -96, -124, -59, 56, 85,
	-46, -45, 53, 54, -47, 53, -45, 43, 43, 127,
	127, 127, -96, -87, -39, -59, 238, 242, 243, -172,
	-173, -176, -175, -124, -179, -166, -166, 55, -151, 53,
	-65, 57, -153, -153, -186, 111, 57, 56, 57, 56,
	57, 56, -54, -135, -135, -54, -135, -124, -185, 267,
	-187, -186, -124, -124, -124, -54, -114, -114, -114, -114,
	-59, -41, -196, -65, -196, -148, -148, -148, -157, -148,
	178, -148, 178, -196, -196, 19, 19, 19, 19, -195,
	-34, 260, -39, 56, 56, 27, -97, 56, -196, -196,
	-196, 56, 115, -196, 56, -87, -102, -39, -39, 55,
	-39, -195, -195, -195, -196, -91, 57, 56, -148, -94,
	-124, -159, 215, 9, -152, 62, -152, 63, 63, -136,
	26, -184, -183, -125, 55, 54, -85, 13, -152, -186,
	-65, -65, -65, -65, -65, -91, 62, -65, -65, 28,
	-77, 35, -2, -195, -124, -124, -124, -91, -94, -94,
	-196, -94, -94, -133, -178, -177, 54, 137, 69, -175,
	57, 56, -160, 133, 28, 132, -68, -153, -153, 57,
	57, -195, 56, 85, -94, -54, -86, 14, 16, -196,
	-196, -196, -196, -33, 95, 267, -196, -196, -196, 9,
	-75, -2, 115, 57, -196, -196, -196, -58, -177, -186,
	-167, 85, 62, 145, -124, -149, 69, 28, 28, -180,
	-181, 156, -183, -173, 57, -39, -74, -196, 265, 50,
	268, -98, -196, -124, 63, -54, 62, -196, 56, -124,
	-188, 40, 266, 269, 55, -181, 35, -185, 40, -94,
	158, 267, 57, 159, 268, -191, -192, 53, -195, 269,
	-192, 53, 10, 9, -65, 155, -190, 146, 141, 144,
	30, -190, -196, -196, 140, 29, 71,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 574, 0, 327, 327, 327, 327, 327, 327,
	0, 645, 628, 0, 0, 0, 0, -2, 314, 315,
	0, 317, 318, 949, 949, 949, 949, 949, 0, 0,
	949, 0, 38, 39, 947, 1, 3, 582, 0, 0,
	331, 334, 329, 0, 628, 628, 0, 0, 68, 69,
	0, 0, 0, 936, 0, 626, 626, 626, 646, 647,
	650, 651, 24, 25, 26, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 0, 0, 0, 0, 0,
	629, 0, 624, 0, 624, 624, 624, 0, 263, 400,
	654, 655, 936, 0, 0, 0, 305, 0, 950, 275,
	0, 279, 950, 0, 950, 0, 286, 0, 0, 292,
	950, 297, 311, 312, 299, 313, 316, 319, 320, 321,
	322, 323, 949, 949, 326, 32, 586, 0, 0, 574,
	34, 0, 327, 332, 333, 337, 335, 336, 328, 0,
	346, 350, 0, 410, 0, 415, 417, -2, -2, 0,
	452, 453, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 480, 481, 482, 483, 559, 560, 561,
	562, 563, 564, 565, 566, 419, 420, 556, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 547, 0,
	517, 517, 517, 517, 517, 517, 517, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 49, 400, 53, 0, 925, 610, -2, -2, 0,
	0, 652, 653, -2, 789, -2, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 0, 0, 87, 0, 85, 0,
	950, 0, 0, 0, 0, 0, 0, 950, 950, 950,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 264, 950, 305, 267, 0, 0,
	950, 950, 950, 0, 950, 950, 274, 951, 952, 0,
	0, 0, 280, 950, 950, 282, 0, 302, 300, 301,
	294, 295, 0, 308, 289, 290, 293, 324, 325, 33,
	948, 27, 0, 0, 583, 0, 575, 576, 579, 582,
	32, 334, 0, 340, 338, 339, 330, 0, 347, 0,
	0, 0, 351, 0, 353, 354, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 438, 439,
	440, 441, 442, 443, 416, 0, 430, 0, 0, 0,
	472, 473, 474, 475, 476, 477, 478, 0, 342, 32,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 548, 0, 501, 509, 0, 502, 510, 503,
	511, 504, 0, 505, 512, 506, 513, 507, 508, 514,
	0, 0, 0, 342, 342, 0, 0, 51, 0, 399,
	0, 357, 359, 360, 361, -2, 0, 383, -2, 0,
	0, 0, 45, 46, 0, 0, 0, 0, 54, 925,
	56, 57, 0, 0, 0, 165, 619, 620, 621, 617,
	209, 0, 0, 153, 149, 93, 94, 95, 142, 97,
	142, 142, 142, 142, 162, 162, 162, 162, 125, 126,
	127, 128, 129, 0, 0, 112, 142, 142, 142, 116,
	132, 133, 134, 135, 136, 137, 138, 139, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 144, 144, 144,
	146, 146, 648, 71, 0, 950, 0, 950, 83, 0,
	223, 225, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 625, 0, 950, 260, 261, 401, 656, 657,
	265, 266, 306, 307, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 285, 0, 305, 0, 0, 287,
	288, 0, 0, 587, 0, 0, 0, 0, 0, 578,
	580, 581, 586, 35, 337, 0, 567, 0, 0, 0,
	341, 30, 411, 412, 414, 431, 0, 433, 435, 352,
	348, 0, 557, -2, 421, 422, 446, 447, 448, 0,
	0, 0, 0, 444, 426, 0, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 471, 532,
	533, 0, 469, 470, 479, 0, 0, 0, 343, 344,
	449, 0, 605, 32, 0, 0, 0, 0, 454, 559,
	0, 454, 559, 0, 0, 0, 554, 551, 0, 0,
	556, 0, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 398, 0, 0, 0, 0, 0, 0,
	388, 0, 0, 391, 0, 0, 0, 0, 382, 0,
	0, 403, 870, 384, 0, 386, 387, 408, 0, 408,
	48, 408, 50, 0, 402, 611, 55, 0, 0, 60,
	61, 612, 613, 614, 615, 0, 84, 210, 212, 215,
	216, 217, 88, 89, 90, 0, 0, 197, 0, 0,
	191, 191, 0, 189, 190, 86, 156, 154, 0, 151,
	150, 96, 0, 162, 162, 119, 120, 165, 0, 165,
	165, 165, 0, 0, 113, 114, 115, 107, 0, 108,
	109, 110, 0, 111, 0, 0, 950, 73, 627, 74,
	949, 0, 0, 640, 224, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 0, 75, 228, 230, 229,
	233, 0, 0, 0, 255, 950, 259, 302, 302, 302,
	302, 284, 303, 304, 309, 291, 0, 584, 585, 0,
	577, 28, 0, 622, 623, 568, 569, 355, 432, 434,
	436, 0, 342, 423, 444, 427, 0, 424, 0, 0,
	418, 484, 0, 0, 0, 451, -2, 488, 489, 0,
	0, 0, 0, 0, 525, 0, 0, 526, 0, 574,
	0, 552, 0, 0, 500, 0, 519, 0, 0, 520,
	521, 522, 523, 524, 599, 0, 0, -2, 0, 0,
	408, 607, 0, 358, 377, 379, 0, 374, 389, 390,
	392, 0, 394, 0, 396, 397, 362, 364, 365, 0,
	0, 0, 0, 385, 574, 0, 408, 43, 44, 0,
	58, 59, 0, 0, 65, 166, 167, 0, 213, 0,
	0, 0, 184, 191, 191, 187, 192, 188, 0, 158,
	0, 155, 92, 152, 0, 165, 165, 121, 0, 122,
	123, 124, 0, 140, 0, 0, 0, 0, 649, 72,
	218, 949, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 949, 0, 949, 641,
	642, 643, 644, 0, 78, 0, 0, 0, 0, 0,
	258, 305, 305, 305, 305, 588, 0, 29, 408, 0,
	349, 558, 0, 425, 0, 445, 428, 485, 486, 345,
	0, 142, 142, 537, 142, 146, 540, 142, 542, 142,
	545, 0, 0, 0, 0, 0, 0, 0, 549, 499,
	555, 0, 557, 0, 0, 36, 0, 599, 589, 601,
	603, 0, 32, 0, 595, 0, 369, 574, 0, 0,
	371, 378, 0, 0, 372, 0, 373, 393, 395, 0,
	0, 0, 0, 582, 409, 42, 62, 63, 64, 211,
	214, 0, 193, 142, 196, 185, 186, 0, 160, 0,
	157, 143, 117, 118, 163, 164, 162, 0, 162, 0,
	147, 0, 950, 219, 220, 221, 222, 0, 227, 0,
	76, 77, 0, 0, 232, 256, 276, 277, 278, 283,
	570, 356, 487, 429, 490, 534, 162, 538, 539, 541,
	543, 544, 546, 492, 491, 0, 0, 0, 0, 0,
	582, 0, 553, 0, 0, 0, 37, 0, 604, -2,
	0, 0, 0, 52, 0, 582, 608, 609, 375, 0,
	380, 0, 0, 0, 383, 41, 176, 0, 195, 0,
	367, 168, 161, 0, 165, 141, 165, 0, 0, 70,
	0, 79, 80, 0, 0, 0, 572, 0, 535, 536,
	0, 0, 0, 0, 527, 0, 550, 0, 0, 0,
	602, 0, -2, 0, 597, 596, 370, 40, 0, 0,
	405, 0, 0, 403, 175, 177, 0, 182, 0, 194,
	0, 0, 173, 0, 170, 172, 159, 130, 131, 145,
	148, 0, 0, 0, 0, 234, 31, 0, 0, 493,
	495, 494, 496, 0, 0, 0, 498, 515, 516, 0,
	592, 32, 0, 376, 404, 406, 407, 366, 178, 179,
	0, 183, 181, 0, 368, 91, 0, 169, 171, 0,
	250, 0, 81, 82, 75, 573, 571, 497, 0, 0,
	0, 600, -2, 598, 180, 0, 174, 249, 0, 0,
	78, 528, 0, 531, 0, 251, 0, 231, 529, 0,
	0, 0, 198, 0, 0, 199, 200, 0, 0, 530,
	201, 0, 0, 0, 0, 0, 202, 204, 205, 0,
	0, 203, 252, 253, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 105, 97, 3,
	55, 57, 102, 100, 56, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 352,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:357
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:395
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:412
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:429
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:441
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:487
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:510
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:514
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:570
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:601
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:638
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:666
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:684
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:699
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:709
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:954
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:966
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1016
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1077
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1120
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1209
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1213
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1217
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1221
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1251
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1316
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1321
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1338
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1428
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1438
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1444
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1448
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1460
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1464
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1472
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1480
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1485
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1493
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &OtherRead{}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1523
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1566
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1571
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1576
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1602
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1626
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = "extended "
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = "full "
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.showFilter = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1731
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = SessionStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = GlobalStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Begin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Begin{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &Commit{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Rollback{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &OtherRead{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &OtherRead{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1821
		{
			setAllowComments(yylex, true)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.bytes2 = nil
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = UnionStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = UnionAllStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = UnionDistinctStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1858
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.str = SQLCacheStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = DistinctStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = DistinctStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = StraightJoinHint
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1889
		{
			yyVAL.selectExprs = nil
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1921
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1926
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 366:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1994
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2031
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2035
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2045
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2047
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2051
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2057
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2062
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2067
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = StraightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = NaturalJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			yyVAL.indexHints = nil
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2169
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2173
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2177
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2181
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = IsNullStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = IsNotNullStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.str = IsTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.str = IsNotTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = IsFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = IsNotFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = EqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = LessThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = GreaterThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = LessEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = GreaterEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = NotEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2353
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2357
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2373
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2483
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = ""
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = BooleanModeStr
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 530:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = QueryExpansionStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2819
		{
			yyVAL.str = string("")
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2839
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2862
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &NullVal{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.exprs = nil
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2924
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = nil
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2938
		{
			yyVAL.orderBy = nil
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2942
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2952
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.str = AscScr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.str = AscScr
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.str = DescScr
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.limit = nil
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2984
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2988
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2993
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.str = ForUpdateStr
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = ShareModeStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3027
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3031
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3035
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3054
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3059
		{
			yyVAL.updateExprs = nil
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3063
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3089
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3115
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3125
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3131
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3135
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3143
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.bytes = []byte("charset")
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = &Default{}
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3174
		{
			yyVAL.byt = 0
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3176
		{
			yyVAL.byt = 1
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3181
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3184
		{
			yyVAL.str = ""
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.str = IgnoreStr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3196
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3211
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3233
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			decNesting(yylex)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3594
		{
			skipToEnd(yylex)
		}
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3599
		{
			skipToEnd(yylex)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3603
		{
			skipToEnd(yylex)
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3607
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

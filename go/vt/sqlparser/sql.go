//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const BOOL = 57501
const CHARACTER = 57502
const VARBINARY = 57503
const NCHAR = 57504
const TEXT = 57505
const TINYTEXT = 57506
const MEDIUMTEXT = 57507
const LONGTEXT = 57508
const BLOB = 57509
const TINYBLOB = 57510
const MEDIUMBLOB = 57511
const LONGBLOB = 57512
const JSON = 57513
const ENUM = 57514
const GEOMETRY = 57515
const POINT = 57516
const LINESTRING = 57517
const POLYGON = 57518
const GEOMETRYCOLLECTION = 57519
const MULTIPOINT = 57520
const MULTILINESTRING = 57521
const MULTIPOLYGON = 57522
const NULLX = 57523
const AUTO_INCREMENT = 57524
const APPROXNUM = 57525
const SIGNED = 57526
const UNSIGNED = 57527
const ZEROFILL = 57528
const DATABASES = 57529
const TABLES = 57530
const VITESS_KEYSPACES = 57531
const VITESS_SHARDS = 57532
const VITESS_TABLETS = 57533
const VSCHEMA_TABLES = 57534
const NAMES = 57535
const CHARSET = 57536
const GLOBAL = 57537
const SESSION = 57538
const CURRENT_TIMESTAMP = 57539
const DATABASE = 57540
const CURRENT_DATE = 57541
const CURRENT_TIME = 57542
const LOCALTIME = 57543
const LOCALTIMESTAMP = 57544
const UTC_DATE = 57545
const UTC_TIME = 57546
const UTC_TIMESTAMP = 57547
const REPLACE = 57548
const CONVERT = 57549
const CAST = 57550
const SUBSTR = 57551
const SUBSTRING = 57552
const GROUP_CONCAT = 57553
const SEPARATOR = 57554
const MATCH = 57555
const AGAINST = 57556
const BOOLEAN = 57557
const LANGUAGE = 57558
const WITH = 57559
const QUERY = 57560
const EXPANSION = 57561
const UNUSED = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 228,
	109, 564,
	-2, 560,
	-1, 229,
	109, 565,
	-2, 561,
	-1, 297,
	80, 717,
	-2, 47,
	-1, 298,
	80, 683,
	-2, 48,
	-1, 303,
	80, 668,
	-2, 526,
	-1, 305,
	80, 702,
	-2, 528,
	-1, 563,
	52, 41,
	54, 41,
	-2, 43,
	-1, 688,
	109, 567,
	-2, 563,
	-1, 884,
	5, 28,
	-2, 372,
	-1, 909,
	5, 27,
	-2, 501,
	-1, 1118,
	5, 28,
	-2, 502,
	-1, 1162,
	5, 27,
	-2, 504,
	-1, 1224,
	5, 28,
	-2, 505,
}

const yyPrivate = 57344

const yyLast = 10137

var yyAct = [...]int{

	259, 47, 1215, 829, 629, 750, 233, 510, 258, 1173,
	509, 3, 768, 1031, 1032, 965, 1056, 823, 785, 1028,
	1124, 557, 555, 784, 928, 809, 53, 912, 751, 201,
	207, 876, 781, 713, 1005, 723, 302, 968, 720, 956,
	917, 795, 739, 690, 443, 449, 819, 399, 47, 559,
	296, 747, 284, 544, 455, 231, 212, 463, 206, 294,
	858, 216, 289, 524, 292, 285, 52, 1244, 1234, 1242,
	1222, 803, 1240, 202, 203, 204, 205, 830, 1233, 1023,
	1112, 403, 1182, 424, 283, 1221, 947, 172, 168, 169,
	170, 57, 802, 1136, 1151, 220, 810, 1197, 476, 475,
	485, 486, 478, 479, 480, 481, 482, 483, 484, 477,
	1101, 1099, 487, 200, 435, 436, 59, 60, 61, 62,
	63, 412, 1241, 1239, 1216, 989, 748, 1180, 1062, 1063,
	1064, 166, 1174, 413, 769, 771, 1067, 1065, 406, 165,
	797, 166, 637, 797, 628, 1176, 426, 409, 428, 476,
	475, 485, 486, 478, 479, 480, 481, 482, 483, 484,
	477, 927, 926, 487, 925, 401, 180, 167, 941, 499,
	500, 1202, 1121, 425, 427, 992, 229, 892, 870, 23,
	24, 48, 26, 27, 171, 430, 430, 430, 430, 462,
	430, 430, 662, 467, 782, 877, 419, 430, 42, 797,
	487, 659, 477, 28, 986, 487, 1071, 76, 770, 1207,
	988, 177, 1175, 47, 177, 810, 461, 460, 460, 1081,
	915, 235, 37, 452, 1181, 1179, 50, 400, 496, 571,
	1025, 498, 796, 462, 462, 796, 740, 451, 177, 177,
	76, 1198, 423, 740, 177, 899, 76, 478, 479, 480,
	481, 482, 483, 484, 477, 722, 1072, 487, 508, 632,
	512, 513, 514, 515, 516, 517, 518, 519, 520, 1220,
	523, 525, 525, 525, 525, 525, 525, 525, 525, 533,
	534, 535, 536, 288, 1066, 30, 31, 33, 32, 35,
	556, 796, 415, 416, 417, 945, 794, 792, 799, 1210,
	793, 697, 987, 800, 985, 453, 36, 43, 44, 457,
	1226, 45, 46, 34, 1142, 695, 696, 694, 1006, 480,
	481, 482, 483, 484, 477, 38, 39, 487, 40, 41,
	1141, 164, 665, 666, 960, 526, 527, 528, 529, 530,
	531, 532, 177, 976, 177, 959, 948, 405, 1008, 661,
	177, 1227, 461, 460, 1208, 570, 564, 177, 888, 1027,
	887, 76, 76, 76, 76, 50, 76, 76, 1158, 462,
	714, 974, 715, 76, 1139, 693, 461, 460, 461, 460,
	1010, 957, 1014, 1205, 1009, 660, 1007, 1230, 442, 976,
	889, 1012, 282, 462, 1059, 462, 49, 1166, 1213, 76,
	1011, 461, 460, 430, 680, 682, 683, 1166, 442, 681,
	226, 430, 1058, 1013, 1015, 942, 933, 974, 462, 407,
	408, 832, 430, 430, 430, 430, 430, 430, 430, 430,
	867, 868, 869, 1166, 1167, 975, 430, 430, 461, 460,
	980, 977, 970, 971, 978, 973, 972, 1133, 1132, 1050,
	442, 23, 497, 1120, 442, 462, 646, 979, 716, 177,
	1078, 1077, 442, 982, 1074, 1075, 177, 177, 177, 1074,
	1073, 567, 76, 882, 442, 907, 643, 76, 908, 691,
	644, 975, 667, 541, 442, 1186, 980, 977, 970, 971,
	978, 973, 972, 725, 442, 21, 642, 633, 50, 47,
	631, 913, 626, 979, 688, 431, 578, 577, 1185, 969,
	421, 288, 568, 512, 566, 669, 914, 414, 400, 222,
	1068, 23, 684, 727, 732, 735, 1029, 995, 686, 913,
	741, 248, 247, 250, 251, 252, 253, 54, 914, 894,
	249, 254, 289, 289, 289, 289, 289, 752, 1161, 725,
	891, 211, 775, 540, 566, 717, 718, 556, 541, 772,
	1116, 541, 1080, 1076, 934, 882, 289, 727, 50, 299,
	882, 569, 663, 744, 23, 737, 882, 541, 213, 76,
	913, 630, 893, 50, 1146, 177, 177, 76, 776, 177,
	804, 824, 177, 890, 753, 1044, 177, 756, 76, 76,
	76, 76, 76, 76, 76, 76, 765, 937, 754, 755,
	773, 757, 76, 76, 820, 774, 177, 811, 812, 813,
	778, 50, 815, 441, 814, 50, 789, 918, 919, 1061,
	65, 76, 430, 827, 430, 177, 1029, 257, 961, 921,
	640, 76, 430, 825, 439, 675, 924, 501, 502, 503,
	504, 505, 506, 507, 923, 759, 758, 762, 805, 806,
	807, 808, 763, 217, 218, 1238, 760, 1232, 74, 821,
	822, 761, 991, 855, 816, 817, 818, 1237, 865, 546,
	549, 550, 551, 547, 76, 548, 552, 864, 871, 918,
	919, 764, 692, 550, 551, 952, 456, 576, 422, 688,
	944, 301, 444, 691, 1212, 1211, 1159, 404, 938, 859,
	454, 1114, 860, 1147, 445, 177, 834, 639, 177, 177,
	177, 177, 177, 554, 214, 215, 456, 863, 446, 450,
	177, 208, 54, 177, 1191, 862, 209, 177, 872, 1190,
	1149, 914, 177, 177, 458, 468, 76, 1199, 910, 911,
	1137, 658, 56, 58, 76, 565, 51, 1, 909, 831,
	964, 840, 1214, 288, 288, 288, 288, 288, 1172, 728,
	729, 1055, 791, 783, 398, 736, 289, 64, 288, 511,
	1206, 898, 790, 1178, 1135, 798, 946, 288, 522, 743,
	801, 745, 746, 1060, 1209, 943, 583, 922, 931, 581,
	582, 299, 930, 935, 932, 177, 580, 585, 76, 584,
	76, 579, 188, 295, 177, 553, 572, 177, 76, 826,
	459, 66, 301, 301, 301, 301, 984, 301, 301, 430,
	983, 949, 950, 836, 301, 939, 940, 495, 861, 300,
	1036, 664, 951, 448, 953, 954, 955, 1189, 1148, 897,
	521, 738, 234, 679, 430, 958, 246, 243, 245, 244,
	465, 546, 549, 550, 551, 547, 967, 548, 552, 670,
	906, 469, 232, 224, 287, 537, 981, 545, 543, 542,
	689, 920, 916, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 286, 994,
	1111, 1196, 674, 25, 55, 999, 219, 19, 18, 1034,
	998, 47, 17, 1030, 752, 20, 692, 1033, 1004, 16,
	752, 1035, 1016, 1024, 1017, 15, 1046, 1047, 1048, 688,
	866, 14, 29, 301, 13, 12, 1038, 11, 573, 1039,
	10, 9, 1040, 8, 7, 6, 5, 4, 210, 76,
	22, 2, 177, 0, 0, 1054, 0, 1051, 1053, 1052,
	0, 76, 475, 485, 486, 478, 479, 480, 481, 482,
	483, 484, 477, 687, 0, 487, 0, 881, 0, 0,
	677, 678, 1069, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 289, 288, 1082, 0,
	0, 0, 0, 0, 76, 76, 0, 76, 0, 0,
	0, 1084, 0, 0, 1087, 0, 0, 0, 1090, 0,
	0, 0, 1089, 0, 1110, 0, 0, 0, 1097, 0,
	76, 0, 511, 0, 0, 730, 731, 0, 177, 0,
	301, 0, 0, 0, 0, 0, 0, 76, 301, 0,
	1115, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	301, 301, 301, 301, 301, 301, 301, 1126, 1127, 1128,
	1123, 1129, 935, 301, 301, 299, 668, 0, 1094, 1095,
	430, 1096, 1131, 786, 1098, 0, 1100, 76, 76, 0,
	0, 780, 671, 0, 0, 0, 1144, 0, 0, 1138,
	1145, 1140, 465, 0, 0, 301, 873, 874, 875, 0,
	0, 76, 0, 76, 76, 0, 0, 1034, 0, 0,
	1163, 1150, 0, 0, 0, 1033, 0, 0, 0, 1134,
	1162, 1160, 0, 724, 726, 0, 0, 0, 177, 0,
	0, 0, 1171, 0, 0, 719, 76, 0, 1188, 742,
	1177, 0, 0, 0, 0, 733, 733, 0, 0, 76,
	177, 733, 1034, 0, 47, 0, 76, 1187, 687, 76,
	1033, 1183, 177, 1184, 1201, 1200, 0, 0, 733, 767,
	856, 857, 1204, 450, 485, 486, 478, 479, 480, 481,
	482, 483, 484, 477, 846, 0, 487, 0, 0, 1218,
	0, 0, 0, 0, 0, 1223, 752, 301, 845, 0,
	0, 0, 0, 0, 0, 301, 0, 288, 1228, 0,
	0, 76, 0, 76, 76, 76, 177, 76, 0, 0,
	76, 0, 1235, 1236, 0, 850, 0, 0, 0, 0,
	0, 0, 1243, 0, 844, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 76, 76, 0,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 1001, 1002,
	786, 0, 841, 838, 839, 0, 837, 76, 76, 0,
	301, 1018, 1019, 186, 1021, 1022, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 851, 76, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 429, 0,
	879, 0, 0, 76, 880, 0, 0, 0, 0, 0,
	0, 884, 885, 886, 0, 0, 843, 0, 0, 0,
	895, 0, 0, 0, 0, 901, 0, 902, 903, 904,
	905, 0, 0, 0, 0, 0, 997, 181, 842, 76,
	0, 0, 0, 183, 0, 0, 0, 0, 0, 447,
	189, 185, 0, 76, 0, 0, 0, 0, 1020, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 0, 0,
	929, 1092, 0, 0, 0, 0, 849, 187, 0, 1026,
	191, 0, 301, 0, 175, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 1041, 1042, 0, 0, 1043, 0,
	786, 1045, 786, 0, 0, 0, 0, 0, 182, 223,
	0, 175, 175, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 962, 301, 0, 301, 0,
	0, 0, 0, 0, 0, 184, 190, 192, 193, 194,
	195, 0, 0, 198, 197, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 1003, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 1152, 1153, 0, 1154,
	1155, 1156, 0, 0, 432, 433, 434, 0, 437, 438,
	301, 290, 0, 0, 0, 440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 1113, 1037, 929,
	0, 733, 1049, 0, 511, 175, 0, 175, 0, 786,
	0, 0, 0, 175, 0, 0, 174, 0, 0, 0,
	175, 0, 301, 0, 301, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 966, 786, 0, 0,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 1091, 0, 0, 0, 0, 1088, 0, 1093,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 1103, 1104, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 1245, 0, 0, 0, 1117, 1118,
	1119, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 175,
	561, 175, 1125, 0, 1125, 1125, 1125, 442, 1130, 0,
	0, 301, 0, 0, 0, 0, 0, 410, 0, 411,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 0,
	1217, 511, 420, 0, 1109, 0, 0, 301, 301, 301,
	0, 0, 0, 476, 475, 485, 486, 478, 479, 480,
	481, 482, 483, 484, 477, 1157, 0, 487, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 0, 0, 636,
	1168, 1169, 1170, 0, 0, 0, 0, 0, 1164, 1165,
	647, 648, 649, 650, 651, 652, 653, 654, 0, 0,
	0, 1057, 0, 0, 655, 656, 1192, 1193, 1194, 1195,
	0, 0, 0, 0, 1125, 0, 476, 475, 485, 486,
	478, 479, 480, 481, 482, 483, 484, 477, 175, 175,
	487, 0, 175, 0, 1203, 175, 0, 0, 0, 645,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	1219, 0, 0, 563, 0, 1224, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 733, 1229, 0,
	1225, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 1231, 0, 0, 645, 0, 0,
	0, 0, 0, 471, 0, 474, 0, 0, 0, 1247,
	1248, 488, 489, 490, 491, 492, 493, 494, 0, 472,
	473, 470, 476, 475, 485, 486, 478, 479, 480, 481,
	482, 483, 484, 477, 0, 0, 487, 0, 223, 0,
	0, 0, 0, 223, 223, 0, 0, 734, 734, 223,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 223, 223, 223, 223, 0, 175, 0,
	734, 175, 175, 175, 175, 175, 0, 0, 0, 0,
	634, 635, 0, 766, 638, 0, 175, 641, 0, 0,
	561, 0, 0, 0, 0, 175, 175, 1108, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 657, 835, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 476, 475, 485, 486, 478, 479,
	480, 481, 482, 483, 484, 477, 0, 0, 487, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	175, 0, 0, 0, 1105, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	749, 476, 475, 485, 486, 478, 479, 480, 481, 482,
	483, 484, 477, 0, 0, 487, 476, 475, 485, 486,
	478, 479, 480, 481, 482, 483, 484, 477, 777, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 223, 476, 475,
	485, 486, 478, 479, 480, 481, 482, 483, 484, 477,
	0, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 175, 0, 963, 0, 852,
	0, 0, 853, 614, 615, 616, 617, 618, 619, 620,
	0, 621, 622, 623, 624, 625, 602, 603, 604, 605,
	586, 587, 990, 0, 589, 878, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 606, 607, 608, 609,
	610, 611, 612, 613, 0, 476, 475, 485, 486, 478,
	479, 480, 481, 482, 483, 484, 477, 0, 0, 487,
	476, 475, 485, 486, 478, 479, 480, 481, 482, 483,
	484, 477, 0, 0, 487, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	387, 377, 0, 349, 389, 327, 341, 397, 342, 343,
	370, 313, 357, 122, 339, 1086, 330, 308, 336, 309,
	328, 351, 92, 354, 326, 379, 360, 105, 395, 107,
	365, 0, 135, 115, 0, 0, 353, 381, 355, 375,
	348, 371, 318, 364, 390, 340, 368, 391, 0, 0,
	0, 75, 0, 787, 788, 0, 0, 0, 0, 0,
	86, 0, 367, 386, 338, 369, 307, 366, 0, 311,
	314, 396, 384, 333, 334, 936, 0, 0, 0, 0,
	0, 0, 352, 356, 372, 346, 0, 0, 0, 734,
	0, 0, 0, 0, 331, 0, 363, 0, 0, 0,
	315, 312, 0, 350, 0, 0, 0, 317, 0, 332,
	373, 0, 306, 376, 382, 347, 178, 385, 345, 344,
	388, 127, 0, 0, 138, 97, 96, 104, 380, 329,
	337, 88, 335, 132, 123, 150, 362, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 310, 0, 136, 151, 163, 325,
	383, 157, 158, 159, 160, 119, 85, 100, 134, 321,
	324, 319, 320, 358, 359, 392, 393, 394, 374, 316,
	0, 322, 323, 0, 378, 361, 77, 0, 106, 161,
	129, 94, 152, 387, 377, 0, 349, 389, 327, 341,
	397, 342, 343, 370, 313, 357, 122, 339, 0, 330,
	308, 336, 309, 328, 351, 92, 354, 326, 379, 360,
	105, 395, 107, 365, 0, 135, 115, 0, 0, 353,
	381, 355, 375, 348, 371, 318, 364, 390, 340, 368,
	391, 0, 0, 0, 75, 0, 787, 788, 0, 0,
	0, 0, 0, 86, 0, 367, 386, 338, 369, 307,
	366, 0, 311, 314, 396, 384, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 352, 356, 372, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 0, 363,
	0, 0, 0, 315, 312, 0, 350, 0, 0, 0,
	317, 0, 332, 373, 0, 306, 376, 382, 347, 178,
	385, 345, 344, 388, 127, 0, 0, 138, 97, 96,
	104, 380, 329, 337, 88, 335, 132, 123, 150, 362,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 310, 0, 136,
	151, 163, 325, 383, 157, 158, 159, 160, 119, 85,
	100, 134, 321, 324, 319, 320, 358, 359, 392, 393,
	394, 374, 316, 0, 322, 323, 0, 378, 361, 77,
	0, 106, 161, 129, 94, 152, 387, 377, 0, 349,
	389, 327, 341, 397, 342, 343, 370, 313, 357, 122,
	339, 0, 330, 308, 336, 309, 328, 351, 92, 354,
	326, 379, 360, 105, 395, 107, 365, 0, 135, 115,
	0, 0, 353, 381, 355, 375, 348, 371, 318, 364,
	390, 340, 368, 391, 50, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 367, 386,
	338, 369, 307, 366, 0, 311, 314, 396, 384, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 352, 356,
	372, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 0, 363, 0, 0, 0, 315, 312, 0, 350,
	0, 0, 0, 317, 0, 332, 373, 0, 306, 376,
	382, 347, 178, 385, 345, 344, 388, 127, 0, 0,
	138, 97, 96, 104, 380, 329, 337, 88, 335, 132,
	123, 150, 362, 124, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	310, 0, 136, 151, 163, 325, 383, 157, 158, 159,
	160, 119, 85, 100, 134, 321, 324, 319, 320, 358,
	359, 392, 393, 394, 374, 316, 0, 322, 323, 0,
	378, 361, 77, 0, 106, 161, 129, 94, 152, 387,
	377, 0, 349, 389, 327, 341, 397, 342, 343, 370,
	313, 357, 122, 339, 0, 330, 308, 336, 309, 328,
	351, 92, 354, 326, 379, 360, 105, 395, 107, 365,
	0, 135, 115, 0, 0, 353, 381, 355, 375, 348,
	371, 318, 364, 390, 340, 368, 391, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 367, 386, 338, 369, 307, 366, 0, 311, 314,
	396, 384, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 352, 356, 372, 346, 0, 0, 0, 0, 0,
	0, 996, 0, 331, 0, 363, 0, 0, 0, 315,
	312, 0, 350, 0, 0, 0, 317, 0, 332, 373,
	0, 306, 376, 382, 347, 178, 385, 345, 344, 388,
	127, 0, 0, 138, 97, 96, 104, 380, 329, 337,
	88, 335, 132, 123, 150, 362, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 310, 0, 136, 151, 163, 325, 383,
	157, 158, 159, 160, 119, 85, 100, 134, 321, 324,
	319, 320, 358, 359, 392, 393, 394, 374, 316, 0,
	322, 323, 0, 378, 361, 77, 0, 106, 161, 129,
	94, 152, 387, 377, 0, 349, 389, 327, 341, 397,
	342, 343, 370, 313, 357, 122, 339, 0, 330, 308,
	336, 309, 328, 351, 92, 354, 326, 379, 360, 105,
	395, 107, 365, 0, 135, 115, 0, 0, 353, 381,
	355, 375, 348, 371, 318, 364, 390, 340, 368, 391,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 367, 386, 338, 369, 307, 366,
	0, 311, 314, 396, 384, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 352, 356, 372, 346, 0, 0,
	0, 0, 0, 0, 685, 0, 331, 0, 363, 0,
	0, 0, 315, 312, 0, 350, 0, 0, 0, 317,
	0, 332, 373, 0, 306, 376, 382, 347, 178, 385,
	345, 344, 388, 127, 0, 0, 138, 97, 96, 104,
	380, 329, 337, 88, 335, 132, 123, 150, 362, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 310, 0, 136, 151,
	163, 325, 383, 157, 158, 159, 160, 119, 85, 100,
	134, 321, 324, 319, 320, 358, 359, 392, 393, 394,
	374, 316, 0, 322, 323, 0, 378, 361, 77, 0,
	106, 161, 129, 94, 152, 387, 377, 0, 349, 389,
	327, 341, 397, 342, 343, 370, 313, 357, 122, 339,
	0, 330, 308, 336, 309, 328, 351, 92, 354, 326,
	379, 360, 105, 395, 107, 365, 0, 135, 115, 0,
	0, 353, 381, 355, 375, 348, 371, 318, 364, 390,
	340, 368, 391, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 367, 386, 338,
	369, 307, 366, 0, 311, 314, 396, 384, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 352, 356, 372,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 363, 0, 0, 0, 315, 312, 0, 350, 0,
	0, 0, 317, 0, 332, 373, 0, 306, 376, 382,
	347, 178, 385, 345, 344, 388, 127, 0, 0, 138,
	97, 96, 104, 380, 329, 337, 88, 335, 132, 123,
	150, 362, 124, 131, 108, 142, 128, 149, 179, 156,
	140, 155, 78, 139, 148, 87, 133, 80, 146, 137,
	113, 101, 102, 79, 0, 130, 91, 95, 90, 121,
	143, 144, 89, 162, 83, 154, 82, 84, 153, 120,
	141, 147, 114, 111, 81, 145, 112, 110, 103, 93,
	98, 125, 109, 126, 99, 117, 116, 118, 0, 310,
	0, 136, 151, 163, 325, 383, 157, 158, 159, 160,
	119, 85, 100, 134, 321, 324, 319, 320, 358, 359,
	392, 393, 394, 374, 316, 0, 322, 323, 0, 378,
	361, 77, 0, 106, 161, 129, 94, 152, 387, 377,
	0, 349, 389, 327, 341, 397, 342, 343, 370, 313,
	357, 122, 339, 0, 330, 308, 336, 309, 328, 351,
	92, 354, 326, 379, 360, 105, 395, 107, 365, 0,
	135, 115, 0, 0, 353, 381, 355, 375, 348, 371,
	318, 364, 390, 340, 368, 391, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	367, 386, 338, 369, 307, 366, 0, 311, 314, 396,
	384, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	352, 356, 372, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 363, 0, 0, 0, 315, 312,
	0, 350, 0, 0, 0, 317, 0, 332, 373, 0,
	306, 376, 382, 347, 178, 385, 345, 344, 388, 127,
	0, 0, 138, 97, 96, 104, 380, 329, 337, 88,
	335, 132, 123, 150, 362, 124, 131, 108, 142, 128,
	149, 179, 156, 140, 155, 78, 139, 148, 87, 133,
	80, 146, 137, 113, 101, 102, 79, 0, 130, 91,
	95, 90, 121, 143, 144, 89, 162, 83, 154, 82,
	84, 153, 120, 141, 147, 114, 111, 81, 145, 112,
	110, 103, 93, 98, 125, 109, 126, 99, 117, 116,
	118, 0, 310, 0, 136, 151, 163, 325, 383, 157,
	158, 159, 160, 119, 85, 100, 134, 321, 324, 319,
	320, 358, 359, 392, 393, 394, 374, 316, 0, 322,
	323, 0, 378, 361, 77, 0, 106, 161, 129, 94,
	152, 387, 377, 0, 349, 389, 327, 341, 397, 342,
	343, 370, 313, 357, 122, 339, 0, 330, 308, 336,
	309, 328, 351, 92, 354, 326, 379, 360, 105, 395,
	107, 365, 0, 135, 115, 0, 0, 353, 381, 355,
	375, 348, 371, 318, 364, 390, 340, 368, 391, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 367, 386, 338, 369, 307, 366, 0,
	311, 314, 396, 384, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 352, 356, 372, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 0, 363, 0, 0,
	0, 315, 312, 0, 350, 0, 0, 0, 317, 0,
	332, 373, 0, 306, 376, 382, 347, 178, 385, 345,
	344, 388, 127, 0, 0, 138, 97, 96, 104, 380,
	329, 337, 88, 335, 132, 123, 150, 362, 124, 131,
	108, 142, 128, 149, 179, 156, 140, 155, 78, 139,
	148, 87, 133, 80, 146, 137, 113, 101, 102, 79,
	0, 130, 91, 95, 90, 121, 143, 144, 89, 162,
	83, 154, 82, 304, 153, 120, 141, 147, 114, 111,
	81, 145, 112, 110, 103, 93, 98, 125, 109, 126,
	99, 117, 116, 118, 0, 310, 0, 136, 151, 163,
	325, 383, 157, 158, 159, 160, 305, 303, 100, 134,
	321, 324, 319, 320, 358, 359, 392, 393, 394, 374,
	316, 0, 322, 323, 0, 378, 361, 77, 0, 106,
	161, 129, 94, 152, 387, 377, 0, 349, 389, 327,
	341, 397, 342, 343, 370, 313, 357, 122, 339, 0,
	330, 308, 336, 309, 328, 351, 92, 354, 326, 379,
	360, 105, 395, 107, 365, 0, 135, 115, 0, 0,
	353, 381, 355, 375, 348, 371, 318, 364, 390, 340,
	368, 391, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 367, 386, 338, 369,
	307, 366, 0, 311, 314, 396, 384, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 352, 356, 372, 346,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	363, 0, 0, 0, 315, 312, 0, 350, 0, 0,
	0, 317, 0, 332, 373, 0, 306, 376, 382, 347,
	178, 385, 345, 344, 388, 127, 0, 0, 138, 97,
	96, 104, 380, 329, 337, 88, 335, 132, 123, 150,
	362, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 310, 0,
	136, 151, 163, 325, 383, 157, 158, 159, 160, 119,
	85, 100, 134, 321, 324, 319, 320, 358, 359, 392,
	393, 394, 374, 316, 0, 322, 323, 0, 378, 361,
	77, 0, 106, 161, 129, 94, 152, 387, 377, 0,
	349, 389, 327, 341, 397, 342, 343, 370, 313, 357,
	122, 339, 0, 330, 308, 336, 309, 328, 351, 92,
	354, 326, 379, 360, 105, 395, 107, 365, 0, 135,
	115, 0, 0, 353, 381, 355, 375, 348, 371, 318,
	364, 390, 340, 368, 391, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 367,
	386, 338, 369, 307, 366, 0, 311, 314, 396, 384,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 352,
	356, 372, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 0, 363, 0, 0, 0, 315, 312, 0,
	350, 0, 0, 0, 317, 0, 332, 373, 0, 306,
	376, 382, 347, 178, 385, 345, 344, 388, 127, 0,
	0, 138, 97, 96, 104, 380, 329, 337, 88, 335,
	132, 123, 150, 362, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 304,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 310, 0, 136, 151, 163, 325, 383, 157, 158,
	159, 160, 305, 303, 298, 297, 321, 324, 319, 320,
	358, 359, 392, 393, 394, 374, 316, 0, 322, 323,
	0, 378, 361, 77, 0, 106, 161, 129, 94, 152,
	122, 0, 0, 721, 0, 230, 0, 0, 0, 92,
	0, 227, 0, 0, 105, 269, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 228, 248,
	247, 250, 251, 252, 253, 0, 0, 86, 249, 254,
	255, 256, 0, 0, 225, 241, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 239, 221,
	0, 0, 0, 280, 0, 240, 0, 0, 236, 237,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 278, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 0, 157, 158,
	159, 160, 119, 85, 100, 134, 270, 279, 276, 277,
	274, 275, 273, 272, 271, 281, 262, 263, 264, 265,
	267, 0, 266, 77, 0, 106, 161, 129, 94, 152,
	122, 0, 0, 0, 0, 230, 0, 0, 0, 92,
	0, 227, 0, 0, 105, 269, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 442, 228, 248,
	247, 250, 251, 252, 253, 0, 0, 86, 249, 254,
	255, 256, 0, 0, 225, 241, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 239, 0,
	0, 0, 0, 280, 0, 240, 0, 0, 236, 237,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 278, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 0, 157, 158,
	159, 160, 119, 85, 100, 134, 270, 279, 276, 277,
	274, 275, 273, 272, 271, 281, 262, 263, 264, 265,
	267, 0, 266, 77, 0, 106, 161, 129, 94, 152,
	122, 0, 0, 0, 0, 230, 0, 0, 0, 92,
	0, 227, 0, 0, 105, 269, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 228, 248,
	247, 250, 251, 252, 253, 0, 0, 86, 249, 254,
	255, 256, 0, 0, 225, 241, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 239, 221,
	0, 0, 0, 280, 0, 240, 0, 0, 236, 237,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 278, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 0, 157, 158,
	159, 160, 119, 85, 100, 134, 270, 279, 276, 277,
	274, 275, 273, 272, 271, 281, 262, 263, 264, 265,
	267, 0, 266, 77, 0, 106, 161, 129, 94, 152,
	122, 0, 0, 0, 0, 230, 0, 0, 0, 92,
	0, 227, 0, 0, 105, 269, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 260, 261, 0, 0, 0,
	0, 0, 0, 779, 0, 50, 0, 0, 228, 248,
	247, 250, 251, 252, 253, 0, 0, 86, 249, 254,
	255, 256, 0, 0, 225, 241, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 239, 0,
	0, 0, 0, 280, 0, 240, 0, 0, 236, 237,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 278, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 0, 157, 158,
	159, 160, 119, 85, 100, 134, 270, 279, 276, 277,
	274, 275, 273, 272, 271, 281, 262, 263, 264, 265,
	267, 23, 266, 77, 0, 106, 161, 129, 94, 152,
	0, 0, 0, 122, 0, 0, 0, 0, 230, 0,
	0, 0, 92, 0, 227, 0, 0, 105, 269, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 228, 248, 247, 250, 251, 252, 253, 0, 0,
	86, 249, 254, 255, 256, 0, 0, 225, 241, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 239, 0, 0, 0, 0, 280, 0, 240, 0,
	0, 236, 237, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 278,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 270,
	279, 276, 277, 274, 275, 273, 272, 271, 281, 262,
	263, 264, 265, 267, 0, 266, 77, 0, 106, 161,
	129, 94, 152, 122, 0, 0, 0, 0, 230, 0,
	0, 0, 92, 0, 227, 0, 0, 105, 269, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 228, 248, 247, 250, 251, 252, 253, 0, 0,
	86, 249, 254, 255, 256, 0, 0, 225, 241, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	238, 239, 0, 0, 0, 0, 280, 0, 240, 0,
	0, 236, 237, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 278,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 270,
	279, 276, 277, 274, 275, 273, 272, 271, 281, 262,
	263, 264, 265, 267, 122, 266, 77, 0, 106, 161,
	129, 94, 152, 92, 0, 0, 0, 0, 105, 269,
	107, 0, 0, 135, 115, 0, 0, 0, 0, 260,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 228, 248, 247, 250, 251, 252, 253, 0,
	0, 86, 249, 254, 255, 256, 0, 0, 0, 241,
	0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 238, 239, 0, 0, 0, 0, 280, 0, 240,
	0, 0, 236, 237, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	278, 0, 127, 0, 0, 138, 97, 96, 104, 0,
	0, 0, 88, 0, 132, 123, 150, 1246, 124, 131,
	108, 142, 128, 149, 179, 156, 140, 155, 78, 139,
	148, 87, 133, 80, 146, 137, 113, 101, 102, 79,
	0, 130, 91, 95, 90, 121, 143, 144, 89, 162,
	83, 154, 82, 84, 153, 120, 141, 147, 114, 111,
	81, 145, 112, 110, 103, 93, 98, 125, 109, 126,
	99, 117, 116, 118, 0, 0, 0, 136, 151, 163,
	0, 0, 157, 158, 159, 160, 119, 85, 100, 134,
	270, 279, 276, 277, 274, 275, 273, 272, 271, 281,
	262, 263, 264, 265, 267, 122, 266, 77, 0, 106,
	161, 129, 94, 152, 92, 0, 0, 0, 0, 105,
	269, 107, 0, 0, 135, 115, 0, 0, 0, 0,
	260, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 228, 248, 247, 250, 251, 252, 253,
	0, 0, 86, 249, 254, 255, 256, 0, 0, 0,
	241, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 239, 0, 0, 0, 0, 280, 0,
	240, 0, 0, 236, 237, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 278, 0, 127, 0, 0, 138, 97, 96, 104,
	0, 0, 0, 88, 0, 132, 123, 150, 0, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 0, 0, 136, 151,
	163, 0, 0, 157, 158, 159, 160, 119, 85, 100,
	134, 270, 279, 276, 277, 274, 275, 273, 272, 271,
	281, 262, 263, 264, 265, 267, 122, 266, 77, 0,
	106, 161, 129, 94, 152, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	475, 485, 486, 478, 479, 480, 481, 482, 483, 484,
	477, 0, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 0, 0, 157, 158, 159, 160, 119, 85,
	100, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 122, 0, 0, 0,
	464, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 466, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 461, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 0, 122, 157, 158, 159, 160, 119, 85,
	100, 134, 92, 0, 0, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 72, 0, 67, 0, 0, 0,
	73, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 69, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 106, 161,
	129, 94, 152, 122, 0, 0, 0, 560, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 562, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	0, 157, 158, 159, 160, 119, 85, 100, 134, 0,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 77, 0, 106, 161,
	129, 94, 152, 92, 0, 0, 0, 0, 105, 0,
	107, 0, 0, 135, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 127, 0, 0, 138, 97, 96, 104, 0,
	0, 0, 88, 0, 132, 123, 150, 0, 124, 131,
	108, 142, 128, 149, 179, 156, 140, 155, 78, 139,
	148, 87, 133, 80, 146, 137, 113, 101, 102, 79,
	0, 130, 91, 95, 90, 121, 143, 144, 89, 162,
	83, 154, 82, 84, 153, 120, 141, 147, 114, 111,
	81, 145, 112, 110, 103, 93, 98, 125, 109, 126,
	99, 117, 116, 118, 0, 0, 0, 136, 151, 163,
	0, 0, 157, 158, 159, 160, 119, 85, 100, 134,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 122, 0, 77, 0, 106,
	161, 129, 94, 152, 92, 0, 0, 0, 0, 105,
	0, 107, 0, 0, 135, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 127, 0, 0, 138, 97, 96, 104,
	0, 0, 0, 88, 0, 132, 123, 150, 0, 124,
	131, 108, 142, 128, 149, 179, 156, 140, 155, 78,
	139, 148, 87, 133, 80, 146, 137, 113, 101, 102,
	79, 0, 130, 91, 95, 90, 121, 143, 144, 89,
	162, 83, 154, 82, 84, 153, 120, 141, 147, 114,
	111, 81, 145, 112, 110, 103, 93, 98, 125, 109,
	126, 99, 117, 116, 118, 0, 0, 0, 136, 151,
	163, 0, 122, 157, 158, 159, 160, 119, 85, 100,
	134, 92, 0, 0, 0, 0, 105, 0, 107, 0,
	0, 135, 115, 0, 0, 0, 0, 0, 77, 0,
	106, 161, 129, 94, 152, 0, 0, 0, 0, 0,
	75, 0, 0, 672, 0, 0, 673, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	127, 0, 0, 138, 97, 96, 104, 0, 0, 0,
	88, 0, 132, 123, 150, 0, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 0, 0, 0, 136, 151, 163, 0, 122,
	157, 158, 159, 160, 119, 85, 100, 134, 92, 0,
	575, 0, 0, 105, 0, 107, 0, 0, 135, 115,
	0, 0, 0, 0, 0, 77, 0, 106, 161, 129,
	94, 152, 0, 0, 0, 0, 0, 75, 0, 574,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 127, 0, 0,
	138, 97, 96, 104, 0, 0, 0, 88, 0, 132,
	123, 150, 0, 124, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	0, 0, 136, 151, 163, 0, 0, 157, 158, 159,
	160, 119, 85, 100, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 106, 161, 129, 94, 152, 122,
	0, 0, 0, 560, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 105, 0, 107, 0, 0, 135, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 562,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 127, 0, 0,
	138, 97, 96, 104, 0, 0, 0, 88, 0, 132,
	123, 150, 0, 558, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	0, 0, 136, 151, 163, 0, 122, 157, 158, 159,
	160, 119, 85, 100, 134, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 77, 0, 106, 161, 129, 94, 152, 0,
	0, 50, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 0, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 0, 122, 157, 158, 159, 160, 119, 85,
	100, 134, 92, 0, 0, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 0, 0, 0, 0,
	0, 176, 0, 562, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	122, 157, 158, 159, 160, 119, 85, 100, 134, 92,
	0, 0, 0, 0, 105, 0, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 0, 77, 0, 106, 161,
	129, 94, 152, 0, 0, 0, 0, 0, 75, 0,
	466, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 0, 157, 158,
	159, 160, 119, 85, 100, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 77, 0, 106, 161, 129, 94, 152,
	538, 92, 0, 0, 0, 0, 105, 0, 107, 0,
	0, 135, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	127, 0, 0, 138, 97, 96, 104, 0, 0, 0,
	88, 0, 132, 123, 150, 0, 124, 131, 108, 142,
	128, 149, 179, 156, 140, 155, 78, 139, 148, 87,
	133, 80, 146, 137, 113, 101, 102, 79, 0, 130,
	91, 95, 90, 121, 143, 144, 89, 162, 83, 154,
	82, 84, 153, 120, 141, 147, 114, 111, 81, 145,
	112, 110, 103, 93, 98, 125, 109, 126, 99, 117,
	116, 118, 291, 0, 0, 136, 151, 163, 0, 122,
	157, 158, 159, 160, 119, 85, 100, 134, 92, 0,
	0, 0, 0, 105, 0, 107, 0, 0, 135, 115,
	0, 0, 0, 0, 0, 77, 0, 106, 161, 129,
	94, 152, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 0, 127, 0, 0,
	138, 97, 96, 104, 0, 0, 0, 88, 0, 132,
	123, 150, 0, 124, 131, 108, 142, 128, 149, 179,
	156, 140, 155, 78, 139, 148, 87, 133, 80, 146,
	137, 113, 101, 102, 79, 0, 130, 91, 95, 90,
	121, 143, 144, 89, 162, 83, 154, 82, 84, 153,
	120, 141, 147, 114, 111, 81, 145, 112, 110, 103,
	93, 98, 125, 109, 126, 99, 117, 116, 118, 0,
	0, 0, 136, 151, 163, 0, 122, 157, 158, 159,
	160, 119, 85, 100, 134, 92, 0, 0, 0, 0,
	105, 0, 107, 0, 0, 135, 115, 0, 0, 0,
	0, 0, 77, 0, 106, 161, 129, 94, 152, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 178,
	0, 0, 0, 0, 127, 0, 0, 138, 97, 96,
	104, 0, 0, 0, 88, 0, 132, 123, 150, 0,
	124, 131, 108, 142, 128, 149, 179, 156, 140, 155,
	78, 139, 148, 87, 133, 80, 146, 137, 113, 101,
	102, 79, 0, 130, 91, 95, 90, 121, 143, 144,
	89, 162, 83, 154, 82, 84, 153, 120, 141, 147,
	114, 111, 81, 145, 112, 110, 103, 93, 98, 125,
	109, 126, 99, 117, 116, 118, 0, 0, 0, 136,
	151, 163, 0, 122, 157, 158, 159, 160, 119, 85,
	100, 134, 92, 0, 0, 0, 0, 105, 0, 107,
	0, 0, 135, 115, 0, 0, 0, 0, 0, 77,
	0, 106, 161, 129, 94, 152, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 127, 0, 0, 138, 97, 96, 104, 0, 0,
	0, 88, 0, 132, 123, 150, 0, 124, 131, 108,
	142, 128, 149, 179, 156, 140, 155, 78, 139, 148,
	87, 133, 80, 146, 137, 113, 101, 102, 79, 0,
	130, 91, 95, 90, 121, 143, 144, 89, 162, 83,
	154, 82, 84, 153, 120, 141, 147, 114, 111, 81,
	145, 112, 110, 103, 93, 98, 125, 109, 126, 99,
	117, 116, 118, 0, 0, 0, 136, 151, 163, 0,
	122, 157, 158, 159, 160, 119, 85, 100, 134, 92,
	0, 0, 0, 0, 105, 0, 107, 0, 0, 135,
	115, 0, 0, 0, 0, 0, 77, 0, 106, 161,
	129, 94, 152, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 0, 0, 0, 127, 0,
	0, 138, 97, 96, 104, 0, 0, 0, 88, 0,
	132, 123, 150, 0, 124, 131, 108, 142, 128, 149,
	179, 156, 140, 155, 78, 139, 148, 87, 133, 80,
	146, 137, 113, 101, 102, 79, 0, 130, 91, 95,
	90, 121, 143, 144, 89, 162, 83, 154, 82, 84,
	153, 120, 141, 147, 114, 111, 81, 145, 112, 110,
	103, 93, 98, 125, 109, 126, 99, 117, 116, 118,
	0, 0, 0, 136, 151, 163, 0, 122, 157, 158,
	159, 160, 119, 85, 100, 134, 92, 0, 0, 0,
	0, 105, 0, 107, 0, 0, 135, 115, 0, 0,
	0, 0, 0, 77, 0, 106, 161, 129, 94, 152,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 127, 0, 0, 138, 97,
	96, 104, 0, 0, 0, 88, 0, 132, 123, 150,
	0, 124, 131, 108, 142, 128, 149, 179, 156, 140,
	155, 78, 139, 148, 87, 133, 80, 146, 137, 113,
	101, 102, 79, 0, 130, 91, 95, 90, 121, 143,
	144, 89, 162, 83, 154, 82, 84, 153, 120, 141,
	147, 114, 111, 81, 145, 112, 110, 103, 93, 98,
	125, 109, 126, 99, 117, 116, 118, 0, 0, 0,
	136, 151, 163, 0, 0, 157, 158, 159, 160, 119,
	85, 100, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 106, 161, 129, 94, 152,
}
var yyPact = [...]int{

	173, -1000, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, 747, -1000, -1000, -1000, -1000, -1000, -1000, 577,
	6955, 18, 48, -31, 9338, 47, 1271, 9899, -1000, -41,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 568, -1000, -1000,
	-1000, -1000, -1000, 714, 720, 572, 704, 624, -1000, 5252,
	8, 8378, 9151, 4592, -1000, 462, 45, 9899, -142, 9525,
	14, 14, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28, 9899, -1000, 9899, 9, 461,
	9, 9, 9, 9899, -1000, 87, -1000, -1000, -1000, -1000,
	9899, 454, 668, 27, 2961, 2961, 2961, 2961, -36, 2961,
	2961, 593, -1000, -1000, -1000, -1000, 2961, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 407, 683, 5915, 5915,
	717, -1000, 568, -1000, -1000, -1000, 675, -1000, -1000, 245,
	733, -1000, 6768, 84, -1000, 5915, 1791, 530, -1000, -1000,
	530, -1000, -1000, 59, -1000, -1000, 6337, 6337, 6337, 6337,
	6337, 6337, 6337, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000, 5695,
	530, 530, 530, 530, 530, 530, 530, 530, 5915, 530,
	530, 530, 530, 530, 530, 530, 530, 530, 530, 530,
	530, 530, 8964, 523, 820, -1000, -1000, -1000, 701, 7597,
	8191, 9899, 460, -1000, 517, 4126, -1000, -1000, -1000, 149,
	7971, -1000, -1000, -1000, 667, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 452, -1000,
	2016, 446, 2961, 23, 529, 444, 187, 441, 9899, 9899,
	2961, 20, 9899, 694, 589, 9899, 440, 420, -1000, 4359,
	-1000, 2961, 2961, 2961, 2961, 2961, 2961, 2961, 2961, -1000,
	-1000, -1000, -1000, -1000, -1000, 2961, 2961, -1000, -1000, 9899,
	-1000, -1000, -1000, -1000, 742, 111, 331, 83, 518, -1000,
	308, 714, 407, 624, 7784, 603, -1000, -1000, 9899, -1000,
	5915, 5915, 337, -1000, 8752, -1000, -1000, 3427, 102, 6337,
	312, 227, 6337, 6337, 6337, 6337, 6337, 6337, 6337, 6337,
	6337, 6337, 6337, 6337, 6337, 6337, 6337, 314, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 402, -1000, 568, 474,
	474, 95, 95, 95, 95, 95, 95, 6548, 4812, 407,
	439, 146, 5695, 5252, 5252, 5915, 5915, 9712, 9712, 5252,
	705, 160, 146, 9712, -1000, 407, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5252, 5252, 5252, 5252, -16, 9899, -1000,
	9712, 8378, 8378, 8378, 8378, 8378, -1000, 615, 614, -1000,
	625, 616, 650, 9899, -1000, 429, 7597, 85, 530, -1000,
	8565, -1000, -1000, -16, 500, 8378, 9899, -1000, -1000, 4126,
	517, 5472, 89, -1000, -1000, -1000, -1000, 2728, 171, 231,
	-110, -1000, -1000, -1000, 537, -1000, 537, 537, 537, 537,
	-81, -81, -81, -81, -1000, -1000, -1000, -1000, -1000, 571,
	569, -1000, 537, 537, 537, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 561, 561, 561, 538, 538, 581, -1000, 9899, -157,
	365, 2961, 693, 2961, -1000, 1179, -1000, 9899, -1000, -1000,
	9899, 2961, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 636,
	5915, 5915, 3893, 5915, -1000, -1000, -1000, 683, -1000, 705,
	716, -1000, 654, 645, 5252, -1000, -1000, 102, 147, -1000,
	-1000, 363, -1000, -1000, -1000, -1000, 69, 530, -1000, 2139,
	-1000, -1000, -1000, -1000, 312, 6337, 6337, 6337, 58, 2139,
	2124, 1091, 870, 95, 222, 222, 100, 100, 100, 100,
	100, 152, 152, -1000, -1000, -1000, 407, -1000, -1000, -1000,
	407, 5252, 511, -1000, -1000, 5915, -1000, 407, 419, 419,
	306, 368, 539, -1000, 68, 528, 419, 5252, 167, -1000,
	5915, 407, -1000, 419, 407, 419, 419, 445, 530, -1000,
	526, -1000, 140, 820, 576, 588, 638, -1000, -1000, -1000,
	-1000, 613, -1000, 605, -1000, -1000, -1000, -1000, -1000, 44,
	42, 41, 9525, -1000, 729, 8378, 504, -1000, -1000, -1000,
	146, -1000, 360, 510, 2495, -1000, -1000, -1000, -1000, -1000,
	-1000, 554, 680, 115, 112, 359, -1000, -1000, 671, -1000,
	228, -117, -1000, -1000, 287, -81, -81, -1000, -1000, 89,
	665, 89, 89, 89, 323, 323, -1000, -1000, -1000, -1000,
	286, -1000, -1000, -1000, 275, -1000, 587, 9525, 2961, -1000,
	3660, -1000, -1000, -1000, -1000, -1000, -1000, 361, 315, 182,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -17, -1000, 2961, -1000, 634, 146, 146, 66, -1000,
	-1000, 9899, -1000, -1000, -1000, -1000, 516, -1000, -1000, -1000,
	3194, 5252, -1000, 58, 2139, 2037, -1000, 6337, 6337, -1000,
	-1000, 419, 5252, 146, -1000, -1000, -1000, 212, 314, 212,
	6337, 6337, 3893, 6337, 6337, -152, 522, 151, -1000, 5915,
	282, -1000, -1000, -1000, -1000, -1000, 585, 9712, 530, -1000,
	7386, 9525, 717, 9712, 5915, 5915, -1000, -1000, 5915, 542,
	-1000, 5915, -1000, -1000, -1000, 530, 530, 530, 395, -1000,
	717, 504, -1000, -1000, 2728, -1000, 2728, 9525, -1000, 356,
	338, -1000, -1000, 578, 70, -1000, -1000, -1000, 465, 89,
	89, -1000, 150, -1000, -1000, -1000, 415, -1000, 410, 509,
	406, 9899, -1000, -1000, 508, -1000, 139, -1000, -1000, 9525,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9525, 9899, -1000, -1000, -1000, -1000, -1000, 9525,
	-1000, -1000, 3660, -1000, 729, 8378, -1000, -1000, 407, -1000,
	6337, 2139, 2139, -1000, -1000, 407, 537, 537, -1000, 537,
	538, -1000, 537, -51, 537, -52, 407, 407, 1980, 1995,
	-1000, 1903, 1695, 530, -149, -1000, 146, 5915, -1000, 684,
	475, 506, -1000, -1000, 5032, 407, 399, 63, 395, 714,
	-1000, 146, 146, 146, 9525, 146, 9525, 9525, 9525, 7175,
	9525, 714, -1000, 2495, -1000, 393, -1000, 537, -1000, -1000,
	-106, 741, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -81, 316, -81, 271, -1000, 255, 2961,
	3660, 2728, -1000, 531, -1000, -1000, -1000, -1000, 687, 727,
	507, -1000, 2139, -1000, -1000, 38, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6337, 6337, -1000, 6337, 6337,
	6337, 407, 310, 146, 678, -1000, 530, -1000, -1000, 515,
	9525, 9525, -1000, -1000, 379, -1000, 353, 353, 353, 85,
	-1000, -1000, 80, 9525, -1000, 99, -1000, -132, 89, -1000,
	89, 453, 430, -1000, -1000, -1000, 9525, 530, 725, 718,
	-1000, -1000, 1632, 1632, 1632, 1632, 7, -1000, -1000, 738,
	-1000, 530, -1000, 568, 62, -1000, 9525, -1000, -1000, -1000,
	-1000, -1000, 80, -1000, 327, 129, 296, -1000, 234, 677,
	-1000, 676, -1000, -1000, -1000, -1000, -1000, 343, -18, -1000,
	5915, 5915, -1000, -1000, -1000, -1000, 407, 37, -165, 9712,
	506, 407, 9525, -1000, -1000, -1000, 251, -1000, -1000, -1000,
	293, -1000, -1000, 529, 333, -1000, 9525, 146, 495, -1000,
	629, -155, -168, 447, -1000, -1000, -1000, -1000, -157, -1000,
	-18, 644, -1000, 627, -1000, -1000, -1000, -21, -162, -23,
	-166, 530, -169, 6126, -1000, 1632, 407, -1000, -1000,
}
var yyPgo = [...]int{

	0, 951, 10, 495, 950, 948, 947, 946, 945, 944,
	943, 941, 940, 937, 935, 934, 932, 931, 925, 919,
	915, 912, 908, 907, 91, 906, 904, 903, 54, 902,
	61, 901, 900, 31, 255, 38, 35, 519, 899, 22,
	52, 65, 898, 40, 882, 881, 64, 879, 53, 878,
	877, 1531, 875, 874, 12, 27, 873, 872, 871, 870,
	55, 410, 869, 859, 858, 857, 856, 853, 43, 7,
	13, 8, 14, 852, 221, 6, 851, 42, 850, 849,
	848, 847, 26, 843, 45, 841, 30, 44, 840, 20,
	51, 24, 19, 5, 59, 839, 28, 50, 838, 331,
	837, 121, 347, 833, 830, 826, 821, 36, 176, 637,
	505, 57, 820, 819, 816, 1389, 60, 49, 21, 815,
	29, 1338, 33, 813, 812, 34, 811, 809, 807, 806,
	800, 799, 796, 71, 795, 794, 793, 25, 32, 790,
	786, 46, 17, 785, 784, 783, 39, 47, 782, 41,
	780, 777, 774, 773, 23, 18, 772, 16, 771, 9,
	768, 762, 2, 761, 15, 760, 3, 759, 4, 37,
	757, 756, 0, 623, 755, 753, 63,
}
var yyR1 = [...]int{

	0, 170, 171, 171, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 174,
	174, 46, 46, 90, 90, 10, 10, 123, 123, 11,
	11, 11, 11, 11, 11, 11, 168, 168, 167, 166,
	166, 165, 165, 164, 16, 151, 152, 152, 152, 147,
	126, 126, 126, 126, 129, 129, 127, 127, 127, 127,
	127, 127, 127, 128, 128, 128, 128, 128, 130, 130,
	130, 130, 130, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 132, 132,
	132, 132, 132, 132, 132, 132, 146, 146, 133, 133,
	141, 141, 142, 142, 142, 139, 139, 140, 140, 143,
	143, 143, 134, 134, 134, 134, 134, 134, 134, 136,
	136, 144, 144, 137, 137, 137, 138, 138, 145, 145,
	145, 145, 145, 135, 135, 148, 148, 160, 160, 159,
	159, 159, 150, 150, 156, 156, 156, 156, 156, 149,
	149, 158, 158, 157, 153, 153, 153, 154, 154, 154,
	155, 155, 155, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 163, 161, 161, 162, 162, 13, 14,
	14, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	124, 124, 124, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 175, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 112, 112, 112, 111,
	111, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 119, 119, 118, 118,
	118, 117, 117, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	100, 100, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 176, 176, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 122, 122, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	96, 94, 94, 97, 97, 97, 95, 95, 95, 114,
	114, 114, 98, 98, 101, 101, 102, 102, 99, 99,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	104, 104, 104, 105, 105, 106, 106, 106, 113, 113,
	109, 109, 110, 110, 115, 115, 116, 116, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 172,
	173, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 1, 1, 2,
	8, 4, 6, 5, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -170, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -172, 8, 223,
	53, -171, 238, -82, 15, -26, 5, -24, -175, -24,
	-24, -24, -24, -24, -151, 53, -106, 121, 70, 148,
	215, 118, 119, 125, -109, 56, -108, 231, 152, 163,
	157, 184, 176, 174, 177, 211, 65, 155, 136, 172,
	168, 166, 27, 189, 236, 167, 131, 130, 190, 194,
	212, 161, 162, 188, 132, 32, 233, 34, 144, 192,
	187, 183, 186, 160, 182, 38, 196, 195, 197, 210,
	179, 169, 18, 139, 142, 191, 193, 126, 146, 235,
	165, 143, 138, 156, 213, 37, 201, 159, 129, 153,
	150, 180, 145, 170, 171, 185, 158, 181, 154, 147,
	140, 202, 237, 178, 175, 151, 149, 206, 207, 208,
	209, 234, 173, 203, -99, 121, 123, 119, 119, 120,
	121, 215, 118, 119, -51, -115, 56, -108, 121, 148,
	119, 106, 177, 112, 204, 120, 32, 146, -124, 119,
	205, 149, 206, 207, 208, 209, 56, 213, 212, -115,
	154, -120, -120, -120, -120, -120, -2, -86, 17, 16,
	-5, -3, -172, 6, 20, 21, -30, 39, 40, -25,
	-36, 97, -37, -115, -56, 72, -61, 29, 56, -108,
	23, -60, -57, -75, -73, -74, 106, 107, 95, 96,
	103, 73, 108, -65, -63, -64, -66, 58, 57, 66,
	59, 60, 61, 62, 67, 68, 69, -109, -71, -172,
	43, 44, 224, 225, 226, 227, 230, 228, 75, 33,
	214, 222, 221, 220, 218, 219, 216, 217, 124, 215,
	101, 223, -99, -39, -40, -41, -42, -53, -74, -172,
	-51, 11, -46, -51, -94, -123, -97, 213, 212, -110,
	-95, -109, -107, 211, 177, 210, 117, 71, 22, 24,
	199, 74, 106, 16, 75, 105, 224, 112, 47, 216,
	217, 214, 226, 227, 215, 204, 29, 10, 25, 134,
	21, 99, 114, 78, 79, 137, 23, 135, 69, 19,
	50, 11, 13, 14, 124, 123, 90, 120, 45, 8,
	108, 26, 87, 41, 28, 43, 88, 17, 218, 219,
	31, 230, 141, 101, 48, 35, 72, 67, 51, 70,
	15, 46, 89, 115, 223, 44, 118, 6, 229, 30,
	133, 42, 119, 205, 77, 122, 68, 5, 125, 9,
	49, 52, 220, 221, 222, 33, 76, 12, -152, -147,
	56, 120, -51, 223, -109, -102, 124, -102, -102, 119,
	-51, -51, -101, 124, 56, -101, -101, -101, -51, 109,
	-51, 56, 30, 215, 56, 146, 119, 147, 121, -121,
	-172, -110, -121, -121, -121, 150, 151, -121, -121, 51,
	-121, -173, 55, -87, 19, 31, -37, -115, -83, -84,
	-37, -82, -2, -24, 35, -28, 21, 64, 11, -112,
	71, 70, 87, -111, 22, -109, 58, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 80, 81,
	82, 83, 84, 85, 86, -100, -172, -74, -172, 110,
	111, -61, -61, -61, -61, -61, -61, -61, -172, -2,
	-69, -37, -172, -172, -172, -172, -172, -172, -172, -172,
	-172, -78, -37, -172, -176, -172, -176, -176, -176, -176,
	-176, -176, -176, -172, -172, -172, -172, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -119, 22, -39, -172, -118, 142, -117,
	22, -115, 58, -51, -46, -174, 54, 11, 52, 54,
	-94, 80, -114, -109, 58, 29, 30, 55, 54, -126,
	-129, -131, -130, -132, -127, -128, 174, 175, 106, 178,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	30, 136, 170, 171, 172, 173, 190, 191, 192, 193,
	194, 195, 196, 197, 157, 158, 159, 160, 161, 162,
	163, 165, 166, 167, 168, 169, 56, -121, 121, -168,
	52, 56, 72, 56, -51, -51, -121, 122, -51, 23,
	51, -51, 56, 56, -116, -115, -107, -121, -121, -121,
	-121, -121, -121, -121, -121, -121, -121, -51, 9, 90,
	54, 18, 109, 54, -85, 24, 25, -86, -173, -30,
	-62, -109, 59, 62, -29, 42, -51, -37, -37, -67,
	67, 72, 68, 69, -111, 97, -116, -110, -107, -61,
	-68, -71, -74, 63, 90, 88, 89, 74, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -122, 56, 58, 56, -60, -60, -109,
	-35, 21, -34, -36, -173, 54, -173, -2, -34, -34,
	-37, -37, -75, -109, -115, -75, -34, -28, -76, -77,
	76, -75, -173, -34, -35, -34, -34, -90, 142, -51,
	-93, -96, -75, -40, -41, -41, -40, -41, 41, 41,
	41, 46, 41, 46, 41, -48, -115, -173, -54, 49,
	123, 50, -172, -117, -90, 52, -39, -51, -97, 51,
	-37, -138, 105, -153, -154, -155, -110, 58, 59, -147,
	-148, -156, 126, 129, 125, -149, 120, 28, -143, 67,
	72, -139, 202, -133, 53, -133, -133, -133, -133, -137,
	177, -137, -137, -137, 53, 53, -133, -133, -133, -141,
	53, -141, -141, -142, 53, -142, -113, 52, -51, -166,
	234, -167, 56, -121, 23, -121, -103, 117, 114, 115,
	-163, 113, 199, 177, 65, 29, 15, 224, 142, 237,
	56, 143, -51, -51, -121, 37, -37, -37, -116, -84,
	-87, -98, 19, 11, 33, 33, -34, 67, 68, 69,
	109, -172, -68, -61, -61, -61, -33, 137, 71, -173,
	-173, -34, 54, -37, -173, -173, -173, 54, 52, 22,
	54, 11, 109, 54, 11, -173, -34, -79, -77, 78,
	-37, -173, -173, -173, -173, -173, -59, 30, 33, -2,
	-172, -172, -55, 54, 12, 80, -44, -43, 51, 52,
	-45, 51, -43, 41, 41, 120, 120, 120, -91, -109,
	-55, -39, -55, 56, 54, -155, 80, 53, 28, -149,
	-149, 56, 56, -134, 29, 67, -140, 203, 59, -137,
	-137, -138, 30, -138, -138, -138, -146, 58, -146, 59,
	59, 51, -109, -121, -165, -164, -110, -120, -169, 148,
	127, 128, 131, 130, 56, 120, 28, 126, 129, 142,
	125, -169, 148, -104, -105, 122, 22, 120, 28, 142,
	-121, 38, 109, -51, -38, 11, 97, -110, -35, -33,
	71, -61, -61, -173, -36, -125, 106, 174, 136, 172,
	168, 188, 179, 201, 170, 202, -122, -125, -61, -61,
	-110, -61, -61, 231, -82, 79, -37, 77, -92, 51,
	-93, -70, -72, -71, -172, -2, -88, -109, -91, -82,
	-96, -37, -37, -37, 53, -37, -172, -172, -172, -173,
	54, -82, -55, -154, -155, -158, -157, -109, 56, 56,
	-136, 51, 58, 59, 60, 67, 214, 66, 55, -138,
	-138, 56, 106, 55, 54, 55, 54, 55, 54, -51,
	54, 80, -120, -109, -120, -109, -51, -120, -109, -55,
	-39, -173, -61, -173, -133, -133, -133, -142, -133, 162,
	-133, 162, -173, -173, -173, 54, 19, -173, 54, 19,
	-172, -32, 229, -37, 27, -92, 54, -173, -173, -173,
	54, 109, -173, -86, -89, -109, -89, -89, -89, -118,
	-109, -86, 55, 54, -133, -144, 199, 9, -137, 58,
	-137, 59, 59, -121, -164, -155, 53, 26, -80, 13,
	-137, 56, -61, -61, -61, -61, -61, -173, 58, 28,
	-72, 33, -2, -172, -109, -109, 54, 55, -173, -173,
	-173, -54, -160, -159, 52, 132, 65, -157, -145, 126,
	28, 125, 214, -138, -138, 55, 55, -89, -172, -81,
	14, 16, -173, -173, -173, -173, -31, 90, 234, 9,
	-70, -2, 109, -109, -159, 56, -150, 80, 58, -135,
	65, 28, 28, 55, -161, -162, 142, -37, -69, -173,
	232, 48, 235, -93, -173, -109, 59, 58, -168, -173,
	54, -109, 38, 233, 236, -166, -162, 33, 38, 144,
	234, 145, 235, -172, 236, -61, 141, -173, -173,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 485, 0, 254, 254, 254, 254, 254, 254, 0,
	555, 538, 0, 0, 0, 0, 240, 244, 245, 0,
	247, 248, 751, 751, 751, 751, 751, 0, 33, 34,
	749, 1, 3, 493, 0, 0, 258, 261, 256, 0,
	538, 0, 0, 0, 49, 0, 0, 739, 0, 740,
	536, 536, 536, 556, 557, 560, 561, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 741, 742, 743, 744,
	745, 746, 747, 748, 0, 0, 539, 0, 534, 0,
	534, 534, 534, 0, 215, 325, 564, 565, 739, 740,
	0, 0, 0, 0, 752, 752, 752, 752, 0, 752,
	752, 233, 235, 236, 237, 238, 752, 241, 242, 243,
	246, 249, 250, 251, 252, 253, 27, 497, 0, 0,
	485, 29, 0, 254, 259, 260, 264, 262, 263, 255,
	0, 272, 276, 0, 333, 0, 338, 340, -2, -2,
	0, 375, 376, 377, 378, 379, 0, 0, 0, 0,
	0, 0, 0, 402, 403, 404, 405, 470, 471, 472,
	473, 474, 475, 476, 477, 342, 343, 467, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 458, 0,
	432, 432, 432, 432, 432, 432, 432, 432, 0, 0,
	0, 0, 0, 0, 283, 285, 286, 287, 306, 0,
	308, 0, 0, 41, 45, 0, 521, -2, -2, 0,
	0, 562, 563, -2, 667, -2, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 0, 66,
	0, 0, 752, 0, 56, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	216, 752, 752, 752, 752, 752, 752, 752, 752, 225,
	753, 754, 226, 227, 228, 752, 752, 230, 231, 0,
	239, 28, 750, 22, 0, 0, 494, 0, 486, 487,
	490, 493, 27, 261, 0, 266, 265, 257, 0, 273,
	0, 0, 0, 277, 0, 279, 280, 0, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 361,
	362, 363, 364, 365, 366, 339, 0, 353, 0, 0,
	0, 395, 396, 397, 398, 399, 400, 0, 268, 27,
	0, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 0, 459, 0, 424, 0, 425, 426, 427, 428,
	429, 430, 431, 0, 268, 0, 0, 43, 0, 324,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 316,
	0, 0, 0, 0, 307, 0, 0, 327, 707, 309,
	0, 311, 312, -2, 0, 0, 0, 39, 40, 0,
	46, 0, 146, 529, 530, 531, 527, 174, 0, 129,
	125, 71, 72, 73, 118, 75, 118, 118, 118, 118,
	143, 143, 143, 143, 101, 102, 103, 104, 105, 0,
	0, 88, 118, 118, 118, 92, 108, 109, 110, 111,
	112, 113, 114, 115, 76, 77, 78, 79, 80, 81,
	82, 120, 120, 120, 122, 122, 558, 51, 0, 59,
	0, 752, 0, 752, 64, 0, 190, 0, 209, 535,
	0, 752, 212, 213, 326, 566, 567, 217, 218, 219,
	220, 221, 222, 223, 224, 229, 232, 234, 498, 0,
	0, 0, 0, 0, 489, 491, 492, 497, 30, 264,
	0, 478, 0, 0, 0, 267, 25, 334, 335, 337,
	354, 0, 356, 358, 278, 274, 0, 468, -2, 344,
	345, 369, 370, 371, 0, 0, 0, 0, 367, 349,
	0, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 394, 443, 444, 0, 392, 393, 401,
	0, 0, 269, 270, 372, 0, 516, 27, 0, 0,
	0, 0, 0, 467, 0, 0, 0, 0, 465, 462,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 323,
	331, 518, 0, 284, 302, 304, 0, 299, 314, 315,
	317, 0, 319, 0, 321, 322, 288, 289, 290, 0,
	0, 0, 0, 310, 331, 0, 331, 42, 522, 523,
	524, 525, 0, 65, 175, 177, 180, 181, 182, 67,
	68, 0, 0, 0, 0, 0, 169, 170, 132, 130,
	0, 127, 126, 74, 0, 143, 143, 95, 96, 146,
	0, 146, 146, 146, 0, 0, 89, 90, 91, 83,
	0, 84, 85, 86, 0, 87, 0, 0, 752, 53,
	0, 57, 58, 54, 537, 55, 751, 0, 0, 550,
	191, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 0, 208, 752, 211, 0, 495, 496, 0, 488,
	23, 0, 532, 533, 479, 480, 281, 355, 357, 359,
	0, 268, 346, 367, 350, 0, 347, 0, 0, 341,
	406, 0, 0, 374, -2, 409, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 0, 463, 0,
	0, 423, 434, 435, 436, 437, 510, 0, 0, -2,
	0, 0, 485, 0, 0, 0, 296, 303, 0, 0,
	297, 0, 298, 318, 320, 0, 0, 0, 0, 294,
	485, 331, 38, 147, 0, 178, 0, 0, 164, 0,
	0, 167, 168, 139, 0, 131, 70, 128, 0, 146,
	146, 97, 0, 98, 99, 100, 0, 116, 0, 0,
	0, 0, 559, 52, 60, 61, 0, 183, 751, 0,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 751, 0, 0, 751, 551, 552, 553, 554, 0,
	210, 499, 0, 24, 331, 0, 275, 469, 0, 348,
	0, 368, 351, 407, 271, 0, 118, 118, 448, 118,
	122, 451, 118, 453, 118, 456, 0, 0, 0, 0,
	468, 0, 0, 0, 460, 422, 466, 0, 31, 0,
	510, 500, 512, 514, 0, 27, 0, 506, 0, 493,
	519, 332, 520, 300, 0, 305, 0, 0, 0, 308,
	0, 493, 37, 176, 179, 0, 171, 118, 165, 166,
	141, 0, 133, 134, 135, 136, 137, 138, 119, 93,
	94, 144, 145, 143, 0, 143, 0, 123, 0, 752,
	0, 0, 184, 0, 185, 187, 188, 189, 0, 481,
	282, 408, 352, 411, 445, 143, 449, 450, 452, 454,
	455, 457, 413, 412, 414, 0, 0, 417, 0, 0,
	0, 0, 0, 464, 0, 32, 0, 515, -2, 0,
	0, 0, 44, 35, 0, 292, 0, 0, 0, 327,
	295, 36, 156, 0, 173, 148, 142, 0, 146, 117,
	146, 0, 0, 50, 62, 63, 0, 0, 483, 0,
	446, 447, 0, 0, 0, 0, 438, 421, 461, 0,
	513, 0, -2, 0, 508, 507, 0, 301, 328, 329,
	330, 291, 155, 157, 0, 162, 0, 172, 153, 0,
	150, 152, 140, 106, 107, 121, 124, 0, 0, 26,
	0, 0, 415, 416, 418, 419, 0, 0, 0, 0,
	503, 27, 0, 293, 158, 159, 0, 163, 161, 69,
	0, 149, 151, 56, 0, 204, 0, 484, 482, 420,
	0, 0, 0, 511, -2, 509, 160, 154, 59, 203,
	0, 0, 439, 0, 442, 186, 205, 0, 440, 0,
	0, 0, 0, 0, 441, 0, 0, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:299
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:304
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:305
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:309
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:332
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:340
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:344
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:350
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:384
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:396
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:424
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:446
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:451
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
			yyVAL.str = SessionStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:475
		{
			yyVAL.str = GlobalStr
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:481
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:486
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:495
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:499
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:507
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:511
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:516
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:520
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:531
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:536
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:547
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:559
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:566
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:573
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:578
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:582
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:588
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:599
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:807
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:812
		{
			yyVAL.optVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:821
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:825
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:833
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:837
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:843
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:851
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:860
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:870
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:883
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:887
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:891
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:895
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:899
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:903
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:912
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:916
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:930
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:938
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:943
		{
			yyVAL.str = ""
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:947
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:952
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.colKeyOpt = colKey
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:968
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:973
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:977
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:983
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:987
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:997
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.str = yyDollar[1].str
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1154
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1159
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1219
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1227
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1232
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.str = SessionStr
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.str = GlobalStr
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &Begin{}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &Begin{}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Commit{}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &Rollback{}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &OtherRead{}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.statement = &OtherRead{}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.statement = &OtherRead{}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1433
		{
			setAllowComments(yylex, true)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.bytes2 = nil
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.str = UnionStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.str = UnionAllStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = UnionDistinctStr
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.str = SQLCacheStr
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.str = DistinctStr
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.str = StraightJoinHint
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.selectExprs = nil
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.empty = struct{}{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = JoinStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = JoinStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.str = JoinStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = StraightJoinStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = LeftJoinStr
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = LeftJoinStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = RightJoinStr
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.str = RightJoinStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = NaturalJoinStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1732
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.indexHints = nil
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = nil
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.str = IsNullStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.str = IsNotNullStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.str = IsTrueStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = IsNotTrueStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = IsFalseStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = IsNotFalseStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = EqualStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = LessThanStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.str = GreaterThanStr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = LessEqualStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.str = GreaterEqualStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.str = NotEqualStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2063
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2071
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 412:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 415:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 418:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 419:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 420:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.str = BooleanModeStr
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.str = QueryExpansionStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = nil
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.str = string("")
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = &NullVal{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.exprs = nil
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = nil
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.orderBy = nil
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.str = AscScr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.str = AscScr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.str = DescScr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.limit = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.str = ForUpdateStr
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.str = ShareModeStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2571
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 509:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.updateExprs = nil
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.bytes = []byte("charset")
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.expr = &Default{}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.byt = 0
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.byt = 1
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.str = IgnoreStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.empty = struct{}{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.empty = struct{}{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2734
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.empty = struct{}{}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.empty = struct{}{}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.empty = struct{}{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.empty = struct{}{}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.empty = struct{}{}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.empty = struct{}{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.empty = struct{}{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.empty = struct{}{}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3013
		{
			decNesting(yylex)
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3018
		{
			forceEOF(yylex)
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3023
		{
			forceEOF(yylex)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			forceEOF(yylex)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3031
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

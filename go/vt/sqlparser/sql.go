//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const SHOW = 57451
const DESCRIBE = 57452
const EXPLAIN = 57453
const DATE = 57454
const ESCAPE = 57455
const REPAIR = 57456
const OPTIMIZE = 57457
const TRUNCATE = 57458
const MAXVALUE = 57459
const PARTITION = 57460
const REORGANIZE = 57461
const LESS = 57462
const THAN = 57463
const PROCEDURE = 57464
const TRIGGER = 57465
const VINDEX = 57466
const VINDEXES = 57467
const STATUS = 57468
const VARIABLES = 57469
const BEGIN = 57470
const START = 57471
const TRANSACTION = 57472
const COMMIT = 57473
const ROLLBACK = 57474
const BIT = 57475
const TINYINT = 57476
const SMALLINT = 57477
const MEDIUMINT = 57478
const INT = 57479
const INTEGER = 57480
const BIGINT = 57481
const INTNUM = 57482
const REAL = 57483
const DOUBLE = 57484
const FLOAT_TYPE = 57485
const DECIMAL = 57486
const NUMERIC = 57487
const TIME = 57488
const TIMESTAMP = 57489
const DATETIME = 57490
const YEAR = 57491
const CHAR = 57492
const VARCHAR = 57493
const BOOL = 57494
const CHARACTER = 57495
const VARBINARY = 57496
const NCHAR = 57497
const TEXT = 57498
const TINYTEXT = 57499
const MEDIUMTEXT = 57500
const LONGTEXT = 57501
const BLOB = 57502
const TINYBLOB = 57503
const MEDIUMBLOB = 57504
const LONGBLOB = 57505
const JSON = 57506
const ENUM = 57507
const NULLX = 57508
const AUTO_INCREMENT = 57509
const APPROXNUM = 57510
const SIGNED = 57511
const UNSIGNED = 57512
const ZEROFILL = 57513
const DATABASES = 57514
const TABLES = 57515
const VITESS_KEYSPACES = 57516
const VITESS_SHARDS = 57517
const VITESS_TABLETS = 57518
const VSCHEMA_TABLES = 57519
const NAMES = 57520
const CHARSET = 57521
const GLOBAL = 57522
const SESSION = 57523
const CURRENT_TIMESTAMP = 57524
const DATABASE = 57525
const CURRENT_DATE = 57526
const CURRENT_TIME = 57527
const LOCALTIME = 57528
const LOCALTIMESTAMP = 57529
const UTC_DATE = 57530
const UTC_TIME = 57531
const UTC_TIMESTAMP = 57532
const REPLACE = 57533
const CONVERT = 57534
const CAST = 57535
const GROUP_CONCAT = 57536
const SEPARATOR = 57537
const MATCH = 57538
const AGAINST = 57539
const BOOLEAN = 57540
const LANGUAGE = 57541
const WITH = 57542
const QUERY = 57543
const EXPANSION = 57544
const UNUSED = 57545

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 212,
	109, 518,
	-2, 514,
	-1, 213,
	109, 519,
	-2, 515,
	-1, 280,
	80, 657,
	109, 657,
	-2, 52,
	-1, 281,
	80, 630,
	109, 630,
	-2, 53,
	-1, 282,
	80, 619,
	109, 619,
	-2, 47,
	-1, 284,
	80, 644,
	109, 644,
	-2, 49,
	-1, 648,
	109, 521,
	-2, 517,
	-1, 832,
	5, 28,
	-2, 342,
	-1, 852,
	5, 27,
	-2, 465,
	-1, 1026,
	5, 28,
	-2, 466,
	-1, 1064,
	5, 27,
	-2, 468,
	-1, 1113,
	5, 28,
	-2, 469,
}

const yyPrivate = 57344

const yyLast = 8691

var yyAct = [...]int{

	243, 47, 1104, 903, 487, 780, 593, 951, 1032, 217,
	276, 242, 486, 3, 973, 722, 996, 738, 777, 952,
	761, 191, 532, 680, 774, 948, 930, 530, 737, 855,
	53, 683, 869, 824, 890, 673, 695, 747, 858, 420,
	650, 426, 703, 534, 770, 279, 289, 432, 47, 519,
	215, 319, 735, 440, 185, 200, 196, 52, 1133, 1122,
	190, 1131, 271, 682, 499, 1111, 1129, 904, 1121, 1110,
	943, 266, 170, 285, 1020, 1091, 453, 452, 462, 463,
	455, 456, 457, 458, 459, 460, 461, 454, 293, 265,
	464, 204, 57, 1080, 886, 754, 180, 267, 186, 187,
	188, 189, 1044, 1057, 762, 1015, 1013, 184, 412, 413,
	755, 908, 1130, 300, 1128, 1105, 915, 59, 60, 61,
	62, 63, 704, 310, 301, 749, 296, 1078, 978, 979,
	980, 723, 725, 931, 151, 152, 152, 981, 154, 155,
	156, 297, 912, 599, 206, 592, 165, 868, 914, 749,
	867, 866, 167, 290, 291, 164, 933, 153, 173, 169,
	476, 477, 1096, 1029, 619, 873, 818, 622, 550, 316,
	316, 316, 316, 444, 316, 316, 891, 880, 305, 171,
	454, 316, 175, 464, 464, 312, 1051, 314, 935, 437,
	939, 439, 934, 549, 932, 945, 907, 47, 696, 937,
	210, 696, 1092, 842, 724, 439, 311, 313, 936, 429,
	166, 596, 473, 938, 940, 475, 748, 762, 438, 437,
	884, 746, 745, 1079, 1077, 428, 815, 816, 817, 168,
	174, 176, 177, 178, 179, 439, 1109, 182, 181, 913,
	748, 911, 485, 219, 489, 490, 491, 492, 493, 494,
	495, 795, 498, 500, 500, 500, 500, 500, 500, 500,
	500, 508, 509, 510, 511, 793, 418, 309, 317, 982,
	303, 1099, 531, 434, 1048, 453, 452, 462, 463, 455,
	456, 457, 458, 459, 460, 461, 454, 285, 544, 464,
	430, 751, 799, 316, 150, 987, 752, 213, 836, 316,
	835, 792, 640, 642, 643, 270, 1047, 641, 316, 316,
	316, 316, 316, 316, 316, 316, 438, 437, 501, 502,
	503, 504, 505, 506, 507, 674, 899, 675, 74, 438,
	437, 898, 161, 439, 887, 161, 947, 423, 427, 457,
	458, 459, 460, 461, 454, 988, 439, 464, 657, 789,
	794, 787, 1115, 786, 445, 264, 1060, 606, 604, 161,
	161, 986, 655, 656, 654, 161, 1046, 74, 897, 1118,
	419, 797, 800, 453, 452, 462, 463, 455, 456, 457,
	458, 459, 460, 461, 454, 1068, 1102, 464, 488, 1068,
	419, 419, 419, 1068, 1069, 497, 462, 463, 455, 456,
	457, 458, 459, 460, 461, 454, 791, 975, 464, 50,
	881, 783, 825, 316, 316, 1041, 1040, 625, 626, 653,
	790, 478, 479, 480, 481, 482, 483, 484, 453, 452,
	462, 463, 455, 456, 457, 458, 459, 460, 461, 454,
	837, 676, 464, 968, 419, 796, 1028, 419, 54, 161,
	627, 161, 993, 992, 1082, 161, 798, 590, 474, 651,
	990, 989, 161, 438, 437, 307, 74, 74, 74, 74,
	302, 74, 74, 830, 419, 21, 47, 290, 74, 1081,
	439, 516, 419, 685, 419, 983, 629, 830, 438, 437,
	489, 552, 551, 920, 543, 644, 648, 646, 949, 621,
	856, 543, 687, 23, 74, 439, 455, 456, 457, 458,
	459, 460, 461, 454, 23, 270, 464, 271, 271, 271,
	271, 271, 541, 685, 515, 285, 706, 677, 678, 1024,
	1063, 195, 531, 700, 726, 620, 830, 23, 850, 516,
	271, 851, 516, 693, 687, 1050, 991, 546, 516, 874,
	50, 438, 437, 285, 688, 689, 830, 623, 692, 50,
	1052, 50, 161, 542, 594, 540, 241, 729, 439, 161,
	161, 161, 699, 756, 701, 702, 74, 719, 197, 727,
	856, 728, 637, 638, 50, 763, 764, 765, 707, 731,
	74, 710, 775, 161, 962, 161, 74, 72, 161, 742,
	732, 161, 648, 161, 316, 74, 74, 74, 74, 74,
	74, 74, 74, 877, 776, 708, 709, 771, 711, 766,
	315, 778, 543, 65, 781, 50, 859, 860, 977, 949,
	286, 772, 773, 900, 488, 862, 294, 690, 691, 521,
	524, 525, 526, 522, 602, 523, 527, 649, 819, 635,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 807, 651, 808, 416, 865,
	757, 758, 759, 760, 648, 718, 864, 525, 526, 232,
	231, 234, 235, 236, 237, 767, 768, 769, 233, 238,
	713, 652, 716, 712, 733, 820, 628, 717, 814, 1126,
	1120, 714, 201, 202, 853, 854, 715, 917, 804, 1125,
	74, 74, 813, 647, 161, 812, 852, 452, 462, 463,
	455, 456, 457, 458, 459, 460, 461, 454, 433, 74,
	464, 841, 421, 161, 892, 318, 318, 318, 318, 74,
	318, 318, 431, 883, 422, 829, 548, 318, 308, 863,
	1101, 1100, 1061, 684, 686, 875, 878, 839, 871, 872,
	270, 270, 270, 270, 270, 805, 806, 698, 427, 1022,
	1053, 784, 601, 442, 529, 270, 198, 199, 888, 889,
	316, 433, 74, 270, 879, 811, 192, 1089, 193, 1088,
	409, 410, 411, 810, 414, 415, 74, 721, 893, 894,
	895, 417, 54, 316, 1055, 856, 435, 1093, 1045, 618,
	56, 161, 58, 539, 161, 161, 161, 161, 161, 734,
	739, 521, 524, 525, 526, 522, 161, 523, 527, 161,
	831, 859, 860, 161, 51, 1, 782, 161, 161, 995,
	906, 843, 788, 923, 286, 318, 1103, 972, 744, 74,
	736, 288, 954, 64, 47, 924, 821, 822, 823, 318,
	285, 950, 929, 953, 942, 318, 955, 964, 965, 966,
	944, 743, 941, 896, 318, 318, 318, 318, 318, 318,
	318, 318, 1076, 1043, 750, 885, 959, 958, 753, 976,
	161, 647, 1098, 882, 971, 555, 556, 161, 652, 554,
	161, 74, 969, 970, 558, 557, 553, 172, 277, 528,
	545, 436, 66, 591, 910, 909, 785, 295, 472, 598,
	809, 271, 278, 984, 985, 956, 624, 425, 607, 608,
	609, 610, 611, 612, 613, 614, 1087, 1054, 840, 496,
	694, 218, 639, 827, 1018, 230, 227, 828, 1004, 1003,
	229, 228, 630, 849, 832, 833, 834, 446, 216, 838,
	1011, 208, 269, 999, 844, 1001, 845, 846, 847, 848,
	512, 520, 518, 1034, 1035, 1036, 1023, 517, 274, 318,
	318, 1031, 861, 857, 268, 919, 1019, 946, 875, 1090,
	1037, 1039, 634, 25, 55, 316, 203, 19, 631, 18,
	17, 960, 20, 16, 961, 15, 739, 963, 442, 14,
	29, 318, 13, 12, 11, 10, 9, 8, 7, 6,
	5, 4, 194, 22, 74, 954, 926, 927, 1065, 2,
	1056, 0, 0, 615, 616, 74, 953, 0, 0, 0,
	1064, 0, 1008, 1009, 1062, 1010, 0, 0, 1012, 0,
	1014, 679, 0, 1073, 1086, 0, 1075, 0, 0, 1074,
	0, 1085, 0, 0, 954, 697, 47, 1083, 0, 1084,
	0, 1094, 0, 0, 0, 953, 74, 74, 1095, 161,
	0, 0, 286, 0, 0, 1042, 0, 922, 0, 0,
	0, 0, 1021, 0, 1107, 0, 928, 0, 0, 488,
	74, 0, 0, 285, 1112, 0, 0, 161, 0, 1116,
	286, 0, 0, 0, 0, 0, 74, 318, 318, 0,
	0, 1124, 1123, 0, 0, 0, 1006, 1127, 0, 0,
	0, 1132, 0, 272, 0, 0, 967, 0, 0, 0,
	0, 0, 922, 739, 0, 739, 0, 0, 0, 0,
	0, 74, 74, 0, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 158, 0,
	318, 74, 74, 997, 74, 74, 0, 453, 452, 462,
	463, 455, 456, 457, 458, 459, 460, 461, 454, 318,
	1005, 464, 0, 0, 0, 0, 275, 1007, 161, 0,
	0, 292, 74, 0, 0, 74, 0, 161, 1016, 1017,
	0, 0, 0, 74, 0, 0, 0, 0, 161, 1058,
	826, 1025, 1026, 1027, 803, 1030, 0, 0, 0, 0,
	0, 0, 0, 1106, 488, 0, 0, 0, 0, 739,
	453, 452, 462, 463, 455, 456, 457, 458, 459, 460,
	461, 454, 0, 0, 464, 0, 0, 0, 0, 0,
	74, 0, 74, 74, 74, 161, 74, 0, 74, 0,
	0, 0, 0, 0, 424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 1059, 299, 0, 0,
	0, 304, 74, 870, 0, 0, 0, 0, 306, 0,
	0, 1070, 1071, 1072, 318, 0, 0, 0, 0, 159,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 997,
	739, 0, 0, 0, 0, 0, 74, 74, 0, 0,
	0, 0, 0, 1134, 207, 0, 159, 159, 287, 74,
	0, 0, 159, 0, 0, 901, 318, 0, 74, 74,
	74, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	0, 0, 1113, 0, 0, 0, 74, 0, 0, 318,
	1117, 23, 24, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 0, 0, 0, 0,
	42, 0, 0, 0, 74, 28, 0, 0, 514, 0,
	902, 1136, 1137, 74, 0, 0, 0, 538, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 286, 50, 0,
	957, 870, 0, 916, 0, 0, 159, 0, 159, 595,
	0, 597, 159, 0, 600, 0, 0, 603, 0, 159,
	318, 318, 0, 318, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 0, 0, 998, 0, 0, 30, 31, 33,
	32, 35, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1033,
	0, 1033, 1033, 1033, 0, 1038, 0, 318, 0, 159,
	0, 0, 0, 0, 0, 0, 159, 536, 159, 0,
	617, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 0, 0, 0, 0, 0, 0, 0, 636,
	159, 0, 159, 49, 0, 159, 0, 0, 159, 0,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 1049, 0, 318, 318, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 0, 730, 0, 448, 0, 451, 0,
	0, 0, 0, 0, 465, 466, 467, 468, 469, 470,
	471, 159, 449, 450, 447, 453, 452, 462, 463, 455,
	456, 457, 458, 459, 460, 461, 454, 0, 0, 464,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 0, 0, 0, 0, 779, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 207, 207, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 207, 207, 207, 0, 159, 0,
	287, 159, 159, 159, 159, 159, 0, 0, 0, 0,
	0, 0, 0, 720, 0, 0, 159, 0, 0, 0,
	536, 0, 0, 0, 159, 159, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 98, 159, 100, 0,
	0, 122, 107, 0, 159, 0, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 605, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 453, 452, 462, 463, 455,
	456, 457, 458, 459, 460, 461, 454, 0, 0, 464,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 207, 0, 0, 114,
	0, 0, 0, 86, 0, 119, 112, 136, 207, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 0, 0,
	123, 137, 149, 0, 0, 143, 144, 145, 146, 108,
	83, 94, 121, 0, 994, 0, 0, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 75, 0,
	99, 147, 116, 92, 138, 0, 905, 0, 0, 0,
	0, 0, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 573, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 578, 579, 580, 581,
	582, 583, 584, 0, 585, 586, 587, 588, 589, 574,
	575, 576, 577, 559, 560, 287, 0, 562, 0, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 388, 0,
	361, 400, 339, 353, 408, 354, 355, 382, 327, 369,
	111, 351, 0, 342, 322, 348, 323, 340, 363, 90,
	366, 338, 390, 372, 98, 406, 100, 377, 0, 122,
	107, 0, 0, 365, 392, 367, 387, 360, 383, 332,
	376, 401, 352, 380, 402, 0, 0, 0, 73, 0,
	740, 741, 0, 0, 0, 0, 0, 84, 0, 379,
	397, 350, 381, 321, 378, 0, 325, 328, 407, 395,
	345, 346, 876, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 329, 326, 0,
	362, 0, 0, 0, 331, 0, 344, 385, 287, 320,
	393, 359, 162, 396, 357, 356, 399, 114, 391, 341,
	349, 86, 347, 119, 112, 136, 374, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 324, 0, 123, 137,
	149, 337, 394, 143, 144, 145, 146, 108, 83, 94,
	121, 335, 336, 333, 334, 370, 371, 403, 404, 405,
	386, 330, 0, 0, 389, 373, 75, 0, 99, 147,
	116, 92, 138, 398, 388, 0, 361, 400, 339, 353,
	408, 354, 355, 382, 327, 369, 111, 351, 0, 342,
	322, 348, 323, 340, 363, 90, 366, 338, 390, 372,
	98, 406, 100, 377, 0, 122, 107, 0, 0, 365,
	392, 367, 387, 360, 383, 332, 376, 401, 352, 380,
	402, 0, 0, 0, 73, 0, 740, 741, 0, 0,
	0, 0, 0, 84, 0, 379, 397, 350, 381, 321,
	378, 0, 325, 328, 407, 395, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 329, 326, 0, 362, 0, 0, 0,
	331, 0, 344, 385, 0, 320, 393, 359, 162, 396,
	357, 356, 399, 114, 391, 341, 349, 86, 347, 119,
	112, 136, 374, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 324, 0, 123, 137, 149, 337, 394, 143,
	144, 145, 146, 108, 83, 94, 121, 335, 336, 333,
	334, 370, 371, 403, 404, 405, 386, 330, 0, 0,
	389, 373, 75, 0, 99, 147, 116, 92, 138, 398,
	388, 0, 361, 400, 339, 353, 408, 354, 355, 382,
	327, 369, 111, 351, 0, 342, 322, 348, 323, 340,
	363, 90, 366, 338, 390, 372, 98, 406, 100, 377,
	0, 122, 107, 0, 0, 365, 392, 367, 387, 360,
	383, 332, 376, 401, 352, 380, 402, 50, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 379, 397, 350, 381, 321, 378, 0, 325, 328,
	407, 395, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 329,
	326, 0, 362, 0, 0, 0, 331, 0, 344, 385,
	0, 320, 393, 359, 162, 396, 357, 356, 399, 114,
	391, 341, 349, 86, 347, 119, 112, 136, 374, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 324, 0,
	123, 137, 149, 337, 394, 143, 144, 145, 146, 108,
	83, 94, 121, 335, 336, 333, 334, 370, 371, 403,
	404, 405, 386, 330, 0, 0, 389, 373, 75, 0,
	99, 147, 116, 92, 138, 398, 388, 0, 361, 400,
	339, 353, 408, 354, 355, 382, 327, 369, 111, 351,
	0, 342, 322, 348, 323, 340, 363, 90, 366, 338,
	390, 372, 98, 406, 100, 377, 0, 122, 107, 0,
	0, 365, 392, 367, 387, 360, 383, 332, 376, 401,
	352, 380, 402, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 379, 397, 350,
	381, 321, 378, 0, 325, 328, 407, 395, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 921, 0, 343,
	0, 375, 0, 0, 0, 329, 326, 0, 362, 0,
	0, 0, 331, 0, 344, 385, 0, 320, 393, 359,
	162, 396, 357, 356, 399, 114, 391, 341, 349, 86,
	347, 119, 112, 136, 374, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 324, 0, 123, 137, 149, 337,
	394, 143, 144, 145, 146, 108, 83, 94, 121, 335,
	336, 333, 334, 370, 371, 403, 404, 405, 386, 330,
	0, 0, 389, 373, 75, 0, 99, 147, 116, 92,
	138, 398, 388, 0, 361, 400, 339, 353, 408, 354,
	355, 382, 327, 369, 111, 351, 0, 342, 322, 348,
	323, 340, 363, 90, 366, 338, 390, 372, 98, 406,
	100, 377, 0, 122, 107, 0, 0, 365, 392, 367,
	387, 360, 383, 332, 376, 401, 352, 380, 402, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 379, 397, 350, 381, 321, 378, 0,
	325, 328, 407, 395, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	0, 0, 0, 645, 0, 343, 0, 375, 0, 0,
	0, 329, 326, 0, 362, 0, 0, 0, 331, 0,
	344, 385, 0, 320, 393, 359, 162, 396, 357, 356,
	399, 114, 391, 341, 349, 86, 347, 119, 112, 136,
	374, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	324, 0, 123, 137, 149, 337, 394, 143, 144, 145,
	146, 108, 83, 94, 121, 335, 336, 333, 334, 370,
	371, 403, 404, 405, 386, 330, 0, 0, 389, 373,
	75, 0, 99, 147, 116, 92, 138, 398, 388, 0,
	361, 400, 339, 353, 408, 354, 355, 382, 327, 369,
	111, 351, 0, 342, 322, 348, 323, 340, 363, 90,
	366, 338, 390, 372, 98, 406, 100, 377, 0, 122,
	107, 0, 0, 365, 392, 367, 387, 360, 383, 332,
	376, 401, 352, 380, 402, 0, 0, 0, 73, 0,
	547, 0, 0, 0, 0, 0, 0, 84, 0, 379,
	397, 350, 381, 321, 378, 0, 325, 328, 407, 395,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 329, 326, 0,
	362, 0, 0, 0, 331, 0, 344, 385, 0, 320,
	393, 359, 162, 396, 357, 356, 399, 114, 391, 341,
	349, 86, 347, 119, 112, 136, 374, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 324, 0, 123, 137,
	149, 337, 394, 143, 144, 145, 146, 108, 83, 94,
	121, 335, 336, 333, 334, 370, 371, 403, 404, 405,
	386, 330, 0, 0, 389, 373, 75, 0, 99, 147,
	116, 92, 138, 398, 388, 0, 361, 400, 339, 353,
	408, 354, 355, 382, 327, 369, 111, 351, 0, 342,
	322, 348, 323, 340, 363, 90, 366, 338, 390, 372,
	98, 406, 100, 377, 0, 122, 107, 0, 0, 365,
	392, 367, 387, 360, 383, 332, 376, 401, 352, 380,
	402, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 379, 397, 350, 381, 321,
	378, 0, 325, 328, 407, 395, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 329, 326, 0, 362, 0, 0, 0,
	331, 0, 344, 385, 0, 320, 393, 359, 162, 396,
	357, 356, 399, 114, 391, 341, 349, 86, 347, 119,
	112, 136, 374, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 324, 0, 123, 137, 149, 337, 394, 143,
	144, 145, 146, 108, 83, 94, 121, 335, 336, 333,
	334, 370, 371, 403, 404, 405, 386, 330, 0, 0,
	389, 373, 75, 0, 99, 147, 116, 92, 138, 398,
	388, 0, 361, 400, 339, 353, 408, 354, 355, 382,
	327, 369, 111, 351, 0, 342, 322, 348, 323, 340,
	363, 90, 366, 338, 390, 372, 98, 406, 100, 377,
	0, 122, 107, 0, 0, 365, 392, 367, 387, 360,
	383, 332, 376, 401, 352, 380, 402, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 379, 397, 350, 381, 321, 378, 0, 325, 328,
	407, 395, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 329,
	326, 0, 362, 0, 0, 0, 331, 0, 344, 385,
	0, 320, 393, 359, 162, 396, 357, 356, 399, 114,
	391, 341, 349, 86, 347, 119, 112, 136, 374, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 324, 0,
	123, 137, 149, 337, 394, 143, 144, 145, 146, 108,
	83, 94, 121, 335, 336, 333, 334, 370, 371, 403,
	404, 405, 386, 330, 0, 0, 389, 373, 75, 0,
	99, 147, 116, 92, 138, 398, 388, 0, 361, 400,
	339, 353, 408, 354, 355, 382, 327, 369, 111, 351,
	0, 342, 322, 348, 323, 340, 363, 90, 366, 338,
	390, 372, 98, 406, 100, 377, 0, 122, 107, 0,
	0, 365, 392, 367, 387, 360, 383, 332, 376, 401,
	352, 380, 402, 0, 0, 0, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 379, 397, 350,
	381, 321, 378, 0, 325, 328, 407, 395, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 375, 0, 0, 0, 329, 326, 0, 362, 0,
	0, 0, 331, 0, 344, 385, 0, 320, 393, 359,
	162, 396, 357, 356, 399, 114, 391, 341, 349, 86,
	347, 119, 112, 136, 374, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 324, 0, 123, 137, 149, 337,
	394, 143, 144, 145, 146, 108, 83, 94, 121, 335,
	336, 333, 334, 370, 371, 403, 404, 405, 386, 330,
	0, 0, 389, 373, 75, 0, 99, 147, 116, 92,
	138, 111, 0, 0, 681, 0, 214, 0, 0, 0,
	90, 0, 211, 0, 0, 98, 251, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 244, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 212,
	232, 231, 234, 235, 236, 237, 0, 0, 84, 233,
	238, 239, 240, 0, 0, 209, 225, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	205, 0, 0, 0, 262, 0, 224, 0, 0, 220,
	221, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 260, 0, 114, 0,
	0, 0, 86, 0, 119, 112, 136, 0, 113, 118,
	101, 128, 115, 135, 163, 142, 126, 141, 76, 125,
	134, 85, 120, 78, 132, 124, 105, 95, 96, 77,
	0, 117, 89, 93, 88, 110, 129, 130, 87, 148,
	81, 140, 80, 82, 139, 109, 127, 133, 106, 103,
	79, 131, 104, 102, 97, 91, 0, 0, 0, 123,
	137, 149, 0, 0, 143, 144, 145, 146, 108, 83,
	94, 121, 252, 261, 258, 259, 256, 257, 255, 254,
	253, 263, 246, 247, 249, 0, 248, 75, 0, 99,
	147, 116, 92, 138, 111, 0, 0, 0, 0, 214,
	0, 0, 0, 90, 0, 211, 0, 0, 98, 251,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 419, 212, 232, 231, 234, 235, 236, 237, 0,
	0, 84, 233, 238, 239, 240, 0, 0, 209, 225,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 0, 0, 0, 0, 262, 0, 224,
	0, 0, 220, 221, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 260,
	0, 114, 0, 0, 0, 86, 0, 119, 112, 136,
	0, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	0, 0, 123, 137, 149, 0, 0, 143, 144, 145,
	146, 108, 83, 94, 121, 252, 261, 258, 259, 256,
	257, 255, 254, 253, 263, 246, 247, 249, 0, 248,
	75, 0, 99, 147, 116, 92, 138, 111, 0, 0,
	0, 0, 214, 0, 0, 0, 90, 0, 211, 0,
	0, 98, 251, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 244, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 212, 232, 231, 234, 235,
	236, 237, 0, 0, 84, 233, 238, 239, 240, 0,
	0, 209, 225, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 205, 0, 0, 0,
	262, 0, 224, 0, 0, 220, 221, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 260, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 113, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 0,
	143, 144, 145, 146, 108, 83, 94, 121, 252, 261,
	258, 259, 256, 257, 255, 254, 253, 263, 246, 247,
	249, 23, 248, 75, 0, 99, 147, 116, 92, 138,
	0, 0, 0, 111, 0, 0, 0, 0, 214, 0,
	0, 0, 90, 0, 211, 0, 0, 98, 251, 100,
	0, 0, 122, 107, 0, 0, 0, 0, 244, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 212, 232, 231, 234, 235, 236, 237, 0, 0,
	84, 233, 238, 239, 240, 0, 0, 209, 225, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 0, 0, 0, 0, 262, 0, 224, 0,
	0, 220, 221, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 260, 0,
	114, 0, 0, 0, 86, 0, 119, 112, 136, 0,
	113, 118, 101, 128, 115, 135, 163, 142, 126, 141,
	76, 125, 134, 85, 120, 78, 132, 124, 105, 95,
	96, 77, 0, 117, 89, 93, 88, 110, 129, 130,
	87, 148, 81, 140, 80, 82, 139, 109, 127, 133,
	106, 103, 79, 131, 104, 102, 97, 91, 0, 0,
	0, 123, 137, 149, 0, 0, 143, 144, 145, 146,
	108, 83, 94, 121, 252, 261, 258, 259, 256, 257,
	255, 254, 253, 263, 246, 247, 249, 0, 248, 75,
	0, 99, 147, 116, 92, 138, 111, 0, 0, 0,
	0, 214, 0, 0, 0, 90, 0, 211, 0, 0,
	98, 251, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 212, 232, 231, 234, 235, 236,
	237, 0, 0, 84, 233, 238, 239, 240, 0, 0,
	209, 225, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 0, 0, 0, 0, 262,
	0, 224, 0, 0, 220, 221, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 260, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 0, 143,
	144, 145, 146, 108, 83, 94, 121, 252, 261, 258,
	259, 256, 257, 255, 254, 253, 263, 246, 247, 249,
	111, 248, 75, 0, 99, 147, 116, 92, 138, 90,
	0, 0, 0, 0, 98, 251, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 212, 232,
	231, 234, 235, 236, 237, 0, 0, 84, 233, 238,
	239, 240, 0, 0, 0, 225, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 0,
	0, 0, 0, 262, 0, 224, 0, 0, 220, 221,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 260, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 1135, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 0, 143, 144, 145, 146, 108, 83, 94,
	121, 252, 261, 258, 259, 256, 257, 255, 254, 253,
	263, 246, 247, 249, 111, 248, 75, 0, 99, 147,
	116, 92, 138, 90, 0, 0, 0, 0, 98, 251,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 212, 232, 231, 234, 235, 236, 237, 0,
	0, 84, 233, 238, 239, 240, 0, 0, 0, 225,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 0, 0, 0, 0, 262, 0, 224,
	0, 0, 220, 221, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 260,
	0, 114, 0, 0, 0, 86, 0, 119, 112, 136,
	0, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	0, 0, 123, 137, 149, 0, 0, 143, 144, 145,
	146, 108, 83, 94, 121, 252, 261, 258, 259, 256,
	257, 255, 254, 253, 263, 246, 247, 249, 0, 248,
	75, 0, 99, 147, 116, 92, 138, 111, 0, 0,
	0, 441, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 443, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 438,
	437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 113, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 111,
	143, 144, 145, 146, 108, 83, 94, 121, 90, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 75, 0, 99, 147, 116, 92, 138,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 67, 0, 0, 0, 71, 114, 0, 0, 0,
	86, 0, 119, 112, 136, 0, 113, 118, 101, 128,
	115, 135, 69, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 0, 0, 123, 137, 149,
	0, 0, 143, 144, 145, 146, 108, 83, 94, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 99, 147, 116,
	92, 138, 111, 0, 0, 0, 535, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 537, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 114,
	0, 0, 0, 86, 0, 119, 112, 136, 0, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 0, 0,
	123, 137, 149, 0, 0, 143, 144, 145, 146, 108,
	83, 94, 121, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 75, 0,
	99, 147, 116, 92, 138, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 0, 143,
	144, 145, 146, 108, 83, 94, 121, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 75, 0, 99, 147, 116, 92, 138, 90,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 0, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 111, 143, 144, 145, 146, 108, 83, 94,
	121, 90, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 75, 0, 99, 147,
	116, 92, 138, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 632, 0, 0, 633, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 114,
	0, 0, 0, 86, 0, 119, 112, 136, 0, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 0, 0,
	123, 137, 149, 0, 0, 143, 144, 145, 146, 108,
	83, 94, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	99, 147, 116, 92, 138, 111, 0, 0, 0, 535,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 537, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 114, 0, 0, 0, 86, 0, 119, 112,
	136, 0, 533, 118, 101, 128, 115, 135, 163, 142,
	126, 141, 76, 125, 134, 85, 120, 78, 132, 124,
	105, 95, 96, 77, 0, 117, 89, 93, 88, 110,
	129, 130, 87, 148, 81, 140, 80, 82, 139, 109,
	127, 133, 106, 103, 79, 131, 104, 102, 97, 91,
	0, 0, 0, 123, 137, 149, 0, 111, 143, 144,
	145, 146, 108, 83, 94, 121, 90, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 75, 0, 99, 147, 116, 92, 138, 0, 0,
	0, 0, 50, 0, 0, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 113, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 111,
	143, 144, 145, 146, 108, 83, 94, 121, 90, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 75, 0, 99, 147, 116, 92, 138,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 537,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 114, 0, 0, 0,
	86, 0, 119, 112, 136, 0, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 0, 0, 123, 137, 149,
	0, 111, 143, 144, 145, 146, 108, 83, 94, 121,
	90, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 75, 0, 99, 147, 116,
	92, 138, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 443, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 114, 0,
	0, 0, 86, 0, 119, 112, 136, 0, 113, 118,
	101, 128, 115, 135, 163, 142, 126, 141, 76, 125,
	134, 85, 120, 78, 132, 124, 105, 95, 96, 77,
	0, 117, 89, 93, 88, 110, 129, 130, 87, 148,
	81, 140, 80, 82, 139, 109, 127, 133, 106, 103,
	79, 131, 104, 102, 97, 91, 0, 0, 0, 123,
	137, 149, 0, 0, 143, 144, 145, 146, 108, 83,
	94, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 75, 0, 99,
	147, 116, 92, 138, 513, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 273, 0, 0, 123, 137, 149, 0, 111, 143,
	144, 145, 146, 108, 83, 94, 121, 90, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 75, 0, 99, 147, 116, 92, 138, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	111, 143, 144, 145, 146, 108, 83, 94, 121, 90,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 75, 0, 99, 147, 116, 92,
	138, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 162, 0, 0, 0, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 0, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 111, 143, 144, 145, 146, 108, 83, 94,
	121, 90, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 75, 0, 99, 147,
	116, 92, 138, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 114,
	0, 0, 0, 86, 0, 119, 112, 136, 0, 113,
	118, 101, 128, 115, 135, 163, 142, 126, 141, 76,
	125, 134, 85, 120, 78, 132, 124, 105, 95, 96,
	77, 0, 117, 89, 93, 88, 110, 129, 130, 87,
	148, 81, 140, 80, 82, 139, 109, 127, 133, 106,
	103, 79, 131, 104, 102, 97, 91, 0, 0, 0,
	123, 137, 149, 0, 111, 143, 144, 145, 146, 108,
	83, 94, 121, 90, 0, 0, 0, 0, 98, 0,
	100, 0, 0, 122, 107, 0, 0, 0, 75, 0,
	99, 147, 116, 92, 138, 0, 0, 0, 0, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 114, 0, 0, 0, 86, 0, 119, 112, 136,
	0, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	0, 0, 123, 137, 149, 0, 111, 143, 144, 145,
	146, 108, 83, 94, 121, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	75, 0, 99, 147, 116, 92, 138, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 111, 143,
	144, 145, 146, 108, 83, 94, 121, 90, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 75, 0, 99, 147, 116, 92, 138, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	283, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	0, 143, 144, 145, 146, 284, 282, 281, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 99, 147, 116, 92,
	138,
}
var yyPact = [...]int{

	1365, -1000, -164, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 787, 805, -1000, -1000, -1000, -1000, -1000, -1000, 570,
	5761, 14, 39, 20, 7782, 37, 40, 8298, -1000, -40,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 531, -1000, -1000,
	-1000, -1000, -1000, 769, 772, 572, 756, 663, -1000, 4589,
	13, 6899, 7610, 8470, -1000, 421, 35, 8298, -120, 7954,
	3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23, 8298, -1000, 8298, 1, 414, 1, 8298, -1000, 69,
	-1000, -1000, -1000, -1000, 8298, 409, 718, 67, 2684, 2684,
	2684, 2684, -35, 2684, 2684, 617, -1000, -1000, -1000, -1000,
	2684, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	336, 713, 4998, 4998, 787, -1000, 531, -1000, -1000, -1000,
	707, -1000, -1000, 209, 795, -1000, 5589, 64, -1000, 4998,
	1604, 506, -1000, -1000, 506, -1000, -1000, 50, -1000, -1000,
	5386, 5386, 5386, 5386, 5386, 5386, 5386, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 506, -1000, 4795, 506, 506, 506, 506, 506, 506,
	4998, 506, 506, 506, 506, 506, 506, 506, 506, 506,
	506, 506, 506, 506, 7438, 494, 598, -1000, -1000, -1000,
	752, 6352, 6727, 8298, 511, -1000, 440, 8126, 3332, -1000,
	-1000, -1000, -1000, 716, -1000, 113, -1000, 59, 437, -1000,
	1956, 401, 2684, 25, 512, 8298, 139, 8298, 2684, 22,
	8298, 749, 593, 8298, -1000, 3980, -1000, 2684, 2684, 2684,
	2684, 2684, 2684, 2684, 2684, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2684, 2684, -1000, -1000, 8298, -1000, -1000, -1000,
	-1000, 800, 74, 481, 58, 503, -1000, 393, 769, 336,
	663, 6524, 607, -1000, -1000, 8298, -1000, 4998, 4998, 235,
	-1000, 7243, -1000, -1000, 3116, 104, 5386, 356, 274, 5386,
	5386, 5386, 5386, 5386, 5386, 5386, 5386, 5386, 5386, 5386,
	5386, 5386, 5386, 5386, 269, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 385, -1000, 531, 622, 622, 79, 79,
	79, 79, 79, 79, 1834, 4183, 336, 429, 148, 4795,
	4589, 4589, 4998, 4998, 4589, 760, 122, 148, 7954, -1000,
	336, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4589, 4589,
	4589, 4589, -13, 8298, -1000, 8126, 6899, 6899, 6899, 6899,
	6899, -1000, 652, 649, -1000, 660, 651, 634, 8298, -1000,
	427, 6352, 82, 506, -1000, 7071, -1000, -1000, -13, 6899,
	8298, -1000, -1000, 8126, 440, -1000, -1000, -1000, -1000, 4998,
	3764, 2468, 97, 224, -92, -1000, -1000, 520, -1000, 520,
	520, 520, 520, -66, -66, -66, -66, -1000, -1000, -1000,
	-1000, -1000, 566, -1000, 520, 520, 520, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 564, 564, 564, 539, 539,
	569, -1000, 8298, 573, 355, -1000, 748, 236, -1000, 8298,
	-1000, -1000, 8298, 2684, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 671,
	4998, 4998, 3764, 4998, -1000, -1000, -1000, 713, -1000, 760,
	774, -1000, 682, 679, 4589, -1000, -1000, 104, 118, -1000,
	-1000, 159, -1000, -1000, -1000, -1000, 57, 506, -1000, 184,
	-1000, -1000, -1000, -1000, 356, 5386, 5386, 5386, 282, 184,
	1149, 303, 625, 79, 242, 242, 78, 78, 78, 78,
	78, 411, 411, -1000, -1000, -1000, 336, -1000, -1000, -1000,
	336, 4589, 502, -1000, -1000, 4998, -1000, 336, 419, 419,
	246, 418, 419, 4589, 125, -1000, 4998, 336, -1000, 419,
	336, 419, 419, 508, 506, -1000, 568, 598, 575, 584,
	780, -1000, -1000, -1000, -1000, 635, -1000, 628, -1000, -1000,
	-1000, -1000, -1000, 32, 31, 28, 7954, -1000, 793, 488,
	-1000, -1000, -1000, 148, -1000, 56, 495, 2252, -1000, -1000,
	-1000, -1000, -1000, -1000, 560, 728, 121, 354, -1000, -1000,
	714, -1000, 153, -94, -1000, -1000, 275, -66, -66, -1000,
	-1000, 71, 704, 71, 71, 71, 310, -1000, -1000, -1000,
	-1000, 272, -1000, -1000, -1000, 267, -1000, 582, 7954, 2684,
	-150, 8298, -1000, -1000, -1000, -1000, 55, 120, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-19, -1000, 2684, -1000, 669, 148, 148, -1000, -1000, 8298,
	-1000, -1000, -1000, -1000, 482, -1000, -1000, -1000, 2900, 4589,
	-1000, 282, 184, 1086, -1000, 5386, 5386, -1000, -1000, 419,
	4589, 148, -1000, -1000, -1000, 27, 269, 27, -144, 433,
	116, -1000, 4998, 259, -1000, -1000, -1000, -1000, -1000, 578,
	8126, 506, -1000, 6158, 7954, 787, 4998, -1000, -1000, 4998,
	541, -1000, 4998, -1000, -1000, -1000, 506, 506, 506, 389,
	-1000, 787, -1000, 3548, 2468, -1000, 2468, 7954, -1000, 351,
	-1000, -1000, 577, 70, -1000, -1000, -1000, 430, 71, 71,
	-1000, 305, 239, -1000, -1000, -1000, 406, -1000, 492, 398,
	8298, -1000, -1000, -1000, 3548, -1000, -1000, 7954, -1000, 8298,
	-1000, -1000, -1000, -1000, -1000, 7954, -1000, -1000, -1000, 793,
	6899, -1000, -1000, 336, -1000, 5386, 184, 184, -1000, -1000,
	336, 520, 520, -1000, 520, 539, -1000, 520, -49, 520,
	-50, 336, 336, 506, -138, -1000, 148, 4998, -1000, 742,
	447, 475, -1000, -1000, 4386, 336, 392, 54, 389, 769,
	148, 148, 7954, 148, 7954, 7954, 7954, 5964, 7954, 769,
	2252, -1000, 361, -1000, 520, -1000, -82, 799, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	308, 247, -1000, 215, 2684, 491, -1000, 106, 507, -1000,
	-1000, -1000, 744, 791, 485, -1000, 184, -1000, -1000, 47,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5386, 336,
	298, 148, 724, -1000, 506, -1000, -1000, 497, 7954, 7954,
	-1000, -1000, 339, -1000, 335, 335, 335, 82, -1000, -1000,
	569, 7954, -1000, 99, -1000, -106, -1000, 424, 399, -1000,
	3548, 2468, 7954, 506, 775, 771, -1000, -1000, -15, -1000,
	-1000, 798, -1000, 506, -1000, 531, 53, -1000, 7954, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 206, 723, -1000, 722,
	-1000, -1000, -1000, -1000, -1000, 331, -20, -1000, 4998, 4998,
	336, 21, -153, 8126, 475, 336, 7954, -1000, -1000, 294,
	-1000, -1000, 512, 315, -1000, 7954, 148, 469, -1000, 662,
	-148, -160, 440, -1000, -1000, -1000, 573, -1000, -20, 676,
	-1000, 661, -1000, -150, -1000, -23, -151, -1000, -26, -157,
	506, -161, 5192, -1000, 337, 336, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1029, 12, 475, 1023, 1022, 1021, 1020, 1019, 1018,
	1017, 1016, 1015, 1014, 1013, 1012, 1010, 1009, 1005, 1003,
	1002, 1000, 999, 997, 92, 996, 994, 993, 47, 992,
	55, 989, 986, 33, 63, 23, 31, 144, 985, 27,
	71, 97, 984, 38, 983, 982, 978, 977, 49, 972,
	971, 1133, 970, 962, 15, 29, 961, 958, 957, 953,
	50, 200, 952, 951, 950, 946, 945, 942, 40, 4,
	7, 11, 19, 941, 243, 9, 940, 36, 939, 938,
	937, 936, 30, 927, 41, 926, 21, 39, 925, 8,
	42, 32, 25, 10, 922, 45, 920, 294, 918, 113,
	917, 916, 915, 914, 912, 51, 297, 566, 268, 53,
	911, 910, 18, 1274, 52, 43, 22, 909, 54, 620,
	35, 908, 907, 26, 906, 905, 904, 899, 896, 895,
	110, 893, 892, 889, 20, 34, 888, 885, 44, 24,
	884, 883, 882, 873, 46, 871, 37, 853, 851, 850,
	28, 17, 848, 14, 847, 846, 2, 842, 16, 839,
	3, 836, 6, 5, 835, 834, 0, 266, 813, 812,
	64,
}
var yyR1 = [...]int{

	0, 164, 165, 165, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 168, 168,
	46, 46, 90, 90, 10, 10, 10, 94, 94, 94,
	111, 111, 121, 121, 11, 11, 11, 11, 11, 162,
	162, 161, 163, 163, 160, 160, 159, 159, 158, 16,
	147, 148, 148, 148, 144, 124, 124, 124, 127, 127,
	125, 125, 125, 125, 125, 125, 125, 126, 126, 126,
	126, 126, 128, 128, 128, 128, 128, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 143, 143, 130, 130, 138, 138, 139, 139, 139,
	136, 136, 137, 137, 140, 140, 140, 131, 131, 131,
	131, 131, 131, 133, 133, 141, 141, 134, 134, 134,
	135, 135, 142, 142, 142, 142, 142, 132, 132, 145,
	152, 152, 152, 152, 146, 146, 154, 154, 153, 149,
	149, 149, 150, 150, 150, 151, 151, 151, 12, 12,
	12, 12, 12, 12, 12, 157, 155, 155, 156, 156,
	13, 14, 14, 14, 15, 15, 17, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	122, 122, 122, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 169, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 110, 110, 110, 109,
	109, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 117, 117, 116, 116,
	116, 115, 115, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	98, 98, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 170, 170, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 120, 120, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 95, 96, 96, 99, 99, 100,
	100, 97, 97, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 102, 102, 102, 103, 103, 104,
	104, 104, 112, 112, 107, 107, 108, 108, 113, 113,
	114, 114, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 166, 167,
	118, 119, 119, 119,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 1, 2, 1,
	1, 1, 1, 1, 2, 8, 4, 6, 6, 0,
	2, 1, 0, 2, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 8, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	4, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	2, 3, 2, 2, 1, 1, 1, 3, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 13,
	7, 7, 7, 4, 5, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 3, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 4,
	3, 3, 4, 2, 4, 2, 2, 2, 2, 3,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -164, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 133, 116, 126, 49, 145, 146,
	148, 149, 25, 127, 128, 131, 132, -166, 8, 208,
	53, -165, 221, -82, 15, -26, 5, -24, -169, -24,
	-24, -24, -24, -24, -147, 53, -104, 120, 70, 141,
	118, 124, -107, 56, -106, 214, 145, 156, 150, 177,
	169, 167, 170, 196, 65, 148, 129, 165, 161, 159,
	27, 182, 219, 160, 197, 154, 155, 181, 32, 216,
	34, 137, 180, 176, 179, 153, 175, 38, 195, 172,
	162, 18, 132, 135, 125, 139, 218, 158, 136, 131,
	149, 198, 37, 186, 152, 146, 143, 173, 138, 163,
	164, 178, 151, 174, 147, 140, 133, 187, 220, 171,
	168, 144, 142, 191, 192, 193, 194, 217, 166, 188,
	-97, 120, 122, 118, 118, 119, 120, 118, -51, -113,
	56, -106, 120, 141, 118, 106, 170, 112, 189, 119,
	32, 139, -122, 118, 190, 142, 191, 192, 193, 194,
	56, 198, 197, -113, 147, -118, -118, -118, -118, -118,
	-2, -86, 17, 16, -5, -3, -166, 6, 20, 21,
	-30, 39, 40, -25, -36, 97, -37, -113, -56, 72,
	-61, 29, 56, -106, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -107, -71, -166, 43, 44, 209, 210, 213, 211,
	75, 33, 199, 207, 206, 205, 203, 204, 201, 202,
	123, 200, 101, 208, -97, -39, -40, -41, -42, -53,
	-74, -166, -51, 11, -46, -51, -93, -121, -94, -95,
	198, 197, 196, 170, 195, -75, -107, -113, -148, -144,
	56, 119, -51, 208, -107, -100, 123, 118, -51, -51,
	-99, 123, 56, -99, -51, 109, -51, 56, 30, 200,
	56, 139, 118, 140, 120, -119, -166, -108, -107, -105,
	117, 71, 22, 24, 184, 74, 106, 16, 75, 105,
	209, 112, 47, 201, 202, 199, 200, 189, 29, 10,
	25, 127, 21, 99, 114, 78, 79, 130, 23, 128,
	69, 19, 50, 11, 13, 14, 123, 122, 90, 119,
	45, 8, 108, 26, 87, 41, 28, 43, 88, 17,
	203, 204, 31, 213, 134, 101, 48, 35, 72, 67,
	51, 70, 15, 46, 89, 115, 208, 44, 6, 212,
	30, 126, 42, 118, 190, 77, 121, 68, 5, 124,
	9, 49, 52, 205, 206, 207, 33, 76, 12, -119,
	-119, -119, 143, 144, -119, -119, 51, -119, -167, 55,
	-87, 19, 31, -37, -113, -83, -84, -37, -82, -2,
	-24, 35, -28, 21, 64, 11, -110, 71, 70, 87,
	-109, 22, -107, 58, 109, -37, -58, 90, 72, 88,
	89, 74, 92, 91, 102, 95, 96, 97, 98, 99,
	100, 101, 93, 94, 105, 80, 81, 82, 83, 84,
	85, 86, -98, -166, -74, -166, 110, 111, -61, -61,
	-61, -61, -61, -61, -61, -166, -2, -69, -37, -166,
	-166, -166, -166, -166, -166, -166, -78, -37, -166, -170,
	-166, -170, -170, -170, -170, -170, -170, -170, -166, -166,
	-166, -166, -52, 26, -51, 30, 54, -47, -49, -48,
	-50, 41, 45, 47, 42, 43, 44, 48, -117, 22,
	-39, -166, -116, 135, -115, 22, -113, 58, -51, -168,
	54, 11, 52, 54, -93, -111, -108, 58, 30, 80,
	109, 55, 54, -124, -127, -129, -128, -125, -126, 167,
	168, 106, 171, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 129, 163, 164, 165, 166, 150, 151,
	152, 153, 154, 155, 156, 158, 159, 160, 161, 162,
	56, -119, 120, -162, 52, -51, 72, -51, -119, 121,
	-51, 23, 51, -51, -114, -113, -105, -119, -119, -119,
	-119, -119, -119, -119, -119, -119, -119, -51, 9, 90,
	54, 18, 109, 54, -85, 24, 25, -86, -167, -30,
	-62, -107, 59, 62, -29, 42, -51, -37, -37, -67,
	67, 72, 68, 69, -109, 97, -114, -108, -105, -61,
	-68, -71, -74, 63, 90, 88, 89, 74, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -120, 56, 58, 56, -60, -60, -107,
	-35, 21, -34, -36, -167, 54, -167, -2, -34, -34,
	-37, -37, -34, -28, -76, -77, 76, -107, -167, -34,
	-35, -34, -34, -90, 135, -51, -93, -40, -41, -41,
	-40, -41, 41, 41, 41, 46, 41, 46, 41, -48,
	-113, -167, -54, 49, 122, 50, -166, -115, -90, -39,
	-51, -95, -118, -37, -108, -114, -149, -150, -151, -108,
	58, 59, -144, -145, -152, 125, 124, -146, 119, 28,
	-140, 67, 72, -136, 187, -130, 53, -130, -130, -130,
	-130, -134, 170, -134, -134, -134, 53, -130, -130, -130,
	-138, 53, -138, -138, -139, 53, -139, -112, 52, -51,
	-163, 51, -161, 56, 23, -101, 117, 115, -157, 113,
	184, 170, 65, 29, 114, 15, 209, 135, 220, 56,
	136, -51, -51, -119, 37, -37, -37, -84, -87, -96,
	19, 11, 33, 33, -34, 67, 68, 69, 109, -166,
	-68, -61, -61, -61, -33, 130, 71, -167, -167, -34,
	54, -37, -167, -167, -167, 54, 52, 22, -167, -34,
	-79, -77, 78, -37, -167, -167, -167, -167, -167, -59,
	30, 33, -2, -166, -166, -55, 12, -44, -43, 51,
	52, -45, 51, -43, 41, 41, 119, 119, 119, -91,
	-107, -55, -55, 109, 54, -151, 80, 53, 28, -146,
	56, 56, -131, 29, 67, -137, 188, 59, -134, -134,
	-135, 105, 30, -135, -135, -135, -143, 58, 59, 59,
	51, -107, -119, -160, 217, -113, -118, 141, 56, -102,
	-103, 121, 22, 119, 28, 135, -119, 38, -51, -38,
	11, 97, -108, -35, -33, 71, -61, -61, -167, -36,
	-123, 106, 167, 129, 165, 161, 181, 172, 186, 163,
	187, -120, -123, 214, -82, 79, -37, 77, -92, 51,
	-93, -70, -72, -71, -166, -2, -88, -107, -91, -82,
	-37, -37, 53, -37, -166, -166, -166, -167, 54, -82,
	-150, -151, -154, -153, -107, 56, -133, 51, 58, 59,
	60, 67, 199, 55, -135, -135, 56, 56, 106, 55,
	54, 54, 55, 54, -51, -159, -158, -108, -107, -118,
	-51, -118, -107, -55, -39, -167, -61, -167, -130, -130,
	-130, -139, -130, 155, -130, 155, -167, -167, -166, -32,
	212, -37, 27, -92, 54, -167, -167, -167, 54, 109,
	-167, -86, -89, -107, -89, -89, -89, -116, -107, -86,
	55, 54, -130, -141, 184, 9, 58, 59, 59, -119,
	54, 80, 53, 26, -80, 13, -134, 56, -61, -167,
	58, 28, -72, 33, -2, -166, -107, -107, 54, 55,
	-167, -167, -167, -54, -112, -153, -142, 125, 28, 124,
	199, 55, 55, -158, -151, -89, -166, -81, 14, 16,
	-31, 90, 217, 9, -70, -2, 109, -107, -132, 65,
	28, 28, 55, -155, -156, 135, -37, -69, -167, 215,
	48, 218, -93, -167, -107, 58, -162, -167, 54, -107,
	38, 216, 219, -163, -156, 33, 38, -160, 137, 217,
	138, 218, -166, 219, -61, 134, -167, -167,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 449, 0, 224, 224, 224, 224, 224, 224, 0,
	509, 491, 0, 0, 0, 0, 210, 214, 215, 0,
	217, 218, 690, 690, 690, 690, 690, 0, 33, 34,
	688, 1, 3, 457, 0, 0, 228, 231, 226, 0,
	491, 0, 0, 0, 54, 0, 0, 678, 0, 679,
	489, 510, 511, 514, 515, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 680, 681, 682, 683, 684, 685, 686, 687,
	0, 0, 492, 0, 487, 0, 487, 0, 185, 295,
	518, 519, 678, 679, 0, 0, 0, 0, 691, 691,
	691, 691, 0, 691, 691, 203, 205, 206, 207, 208,
	691, 211, 212, 213, 216, 219, 220, 221, 222, 223,
	27, 461, 0, 0, 449, 29, 0, 224, 229, 230,
	234, 232, 233, 225, 0, 242, 246, 0, 303, 0,
	308, 310, -2, -2, 0, 345, 346, 347, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 372, 373, 374,
	375, 434, 435, 436, 437, 438, 439, 440, 441, 312,
	313, 431, 481, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 396, 396, 396, 396, 396, 396, 396, 396,
	0, 0, 0, 0, 0, 0, 253, 255, 256, 257,
	276, 0, 278, 0, 0, 40, 44, 0, 0, 482,
	-2, -2, -2, 618, -2, 0, 431, 0, 0, 71,
	0, 0, 691, 0, 59, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 184, 0, 186, 691, 691, 691,
	691, 691, 691, 691, 691, 195, 692, 693, 516, 517,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 196,
	197, 198, 691, 691, 200, 201, 0, 209, 28, 689,
	22, 0, 0, 458, 0, 450, 451, 454, 457, 27,
	231, 0, 236, 235, 227, 0, 243, 0, 0, 0,
	247, 0, 249, 250, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	335, 336, 309, 0, 323, 0, 0, 0, 365, 366,
	367, 368, 369, 370, 0, 238, 27, 0, 343, 0,
	0, 0, 0, 0, 0, 234, 0, 423, 0, 388,
	0, 389, 390, 391, 392, 393, 394, 395, 0, 238,
	0, 0, 42, 0, 294, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 286, 0, 0, 0, 0, 277,
	0, 0, 297, 649, 279, 0, 281, 282, 42, 0,
	0, 38, 39, 0, 45, 690, 50, 51, 48, 0,
	0, 159, 0, 124, 120, 76, 77, 113, 79, 113,
	113, 113, 113, 137, 137, 137, 137, 105, 106, 107,
	108, 109, 0, 92, 113, 113, 113, 96, 80, 81,
	82, 83, 84, 85, 86, 115, 115, 115, 117, 117,
	512, 56, 0, 62, 0, 69, 0, 0, 173, 0,
	181, 488, 0, 691, 296, 520, 521, 187, 188, 189,
	190, 191, 192, 193, 194, 199, 202, 204, 462, 0,
	0, 0, 0, 0, 453, 455, 456, 461, 30, 234,
	0, 442, 0, 0, 0, 237, 25, 304, 305, 307,
	324, 0, 326, 328, 248, 244, 0, 432, -2, 314,
	315, 339, 340, 341, 0, 0, 0, 0, 337, 319,
	0, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 364, 407, 408, 0, 362, 363, 371,
	0, 0, 239, 240, 342, 0, 480, 27, 0, 0,
	0, 0, 0, 0, 429, 426, 0, 0, 397, 0,
	0, 0, 0, 0, 0, 293, 301, 254, 272, 274,
	0, 269, 284, 285, 287, 0, 289, 0, 291, 292,
	258, 259, 260, 0, 0, 0, 0, 280, 301, 301,
	41, 483, 46, 484, 432, 0, 70, 160, 162, 165,
	166, 167, 72, 73, 0, 0, 0, 0, 154, 155,
	127, 125, 0, 122, 121, 78, 0, 137, 137, 99,
	100, 140, 0, 140, 140, 140, 0, 93, 94, 95,
	87, 0, 88, 89, 90, 0, 91, 0, 0, 691,
	64, 0, 60, 61, 490, 690, 0, 504, 174, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	0, 180, 691, 183, 0, 459, 460, 452, 23, 0,
	485, 486, 443, 444, 251, 325, 327, 329, 0, 238,
	316, 337, 320, 0, 317, 0, 0, 311, 376, 0,
	0, 344, -2, 379, 380, 0, 0, 0, 0, 449,
	0, 427, 0, 0, 387, 398, 399, 400, 401, 474,
	0, 0, -2, 0, 0, 449, 0, 266, 273, 0,
	0, 267, 0, 268, 288, 290, 0, 0, 0, 0,
	264, 449, 37, 0, 0, 163, 0, 0, 150, 0,
	152, 153, 133, 0, 126, 75, 123, 0, 140, 140,
	101, 0, 0, 102, 103, 104, 0, 111, 0, 0,
	0, 513, 57, 58, 0, 63, 168, 0, 690, 0,
	690, 505, 506, 507, 508, 0, 182, 463, 24, 301,
	0, 245, 433, 0, 318, 0, 338, 321, 377, 241,
	0, 113, 113, 412, 113, 117, 415, 113, 417, 113,
	420, 0, 0, 0, 424, 386, 430, 0, 31, 0,
	474, 464, 476, 478, 0, 27, 0, 470, 0, 457,
	302, 270, 0, 275, 0, 0, 0, 278, 0, 457,
	161, 164, 0, 156, 113, 151, 135, 0, 128, 129,
	130, 131, 132, 114, 97, 98, 141, 138, 139, 110,
	0, 0, 118, 0, 691, 65, 66, 0, 0, 170,
	171, 172, 0, 445, 252, 378, 322, 381, 409, 137,
	413, 414, 416, 418, 419, 421, 383, 382, 0, 0,
	0, 428, 0, 32, 0, 479, -2, 0, 0, 0,
	43, 35, 0, 262, 0, 0, 0, 297, 265, 36,
	512, 0, 158, 142, 136, 0, 112, 0, 0, 55,
	0, 0, 0, 0, 447, 0, 410, 411, 402, 385,
	425, 0, 477, 0, -2, 0, 472, 471, 0, 271,
	298, 299, 300, 261, 149, 157, 147, 0, 144, 146,
	134, 116, 119, 67, 68, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 467, 27, 0, 263, 74, 0,
	143, 145, 59, 0, 176, 0, 448, 446, 384, 0,
	0, 0, 475, -2, 473, 148, 62, 175, 0, 0,
	403, 0, 406, 64, 177, 0, 404, 169, 0, 0,
	0, 0, 0, 405, 0, 0, 178, 179,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 221,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:287
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:292
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:293
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:297
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:320
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:338
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:351
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:361
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:372
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:384
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:406
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:416
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:422
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:430
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:435
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:439
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:449
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:453
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:468
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.str = SessionStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:478
		{
			yyVAL.str = GlobalStr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:484
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:489
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:494
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:498
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:502
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Owner:  yyDollar[5].str,
				Params: yyDollar[6].vindexParams,
			}}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:512
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:516
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:527
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyVAL.str = yyDollar[2].tableIdent.String()
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:536
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:541
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:552
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:558
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:564
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:571
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:578
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:583
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:587
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:593
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:604
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:767
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:772
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:777
		{
			yyVAL.optVal = nil
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:781
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:786
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:790
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:802
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:808
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:835
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:839
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:848
		{
			yyVAL.optVal = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:860
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:873
		{
			yyVAL.optVal = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:877
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:882
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:886
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:891
		{
			yyVAL.str = ""
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:899
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:904
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:908
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:913
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:917
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.colKeyOpt = colKey
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:925
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:934
		{
			yyVAL.optVal = nil
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:938
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:944
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:950
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:954
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:958
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:962
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:982
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:988
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:993
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Owner:  yyDollar[12].str,
					Params: yyDollar[13].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1059
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1064
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1111
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1119
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1124
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.str = SessionStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.str = GlobalStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &Begin{}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.statement = &Begin{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.statement = &Commit{}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Rollback{}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &OtherRead{}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.statement = &OtherRead{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.statement = &OtherRead{}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1317
		{
			setAllowComments(yylex, true)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.bytes2 = nil
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = UnionStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = UnionAllStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.str = UnionDistinctStr
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.str = SQLCacheStr
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.str = DistinctStr
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.str = ""
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.str = StraightJoinHint
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.selectExprs = nil
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1537
		{
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1543
		{
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.empty = struct{}{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.empty = struct{}{}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.str = JoinStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.str = JoinStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = JoinStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.str = StraightJoinStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = LeftJoinStr
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = LeftJoinStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = RightJoinStr
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = RightJoinStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = NaturalJoinStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1616
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.indexHints = nil
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.str = IsNullStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.str = IsNotNullStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.str = IsTrueStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = IsNotTrueStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = IsFalseStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = IsNotFalseStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = EqualStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.str = LessThanStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.str = GreaterThanStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.str = LessEqualStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.str = GreaterEqualStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = NotEqualStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = nil
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1955
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1977
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 384:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.str = BooleanModeStr
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = QueryExpansionStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = string("")
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = &NullVal{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.exprs = nil
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.expr = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.orderBy = nil
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.str = AscScr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.str = AscScr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.str = DescScr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.limit = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.str = ForUpdateStr
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.str = ShareModeStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2418
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2431
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.updateExprs = nil
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.byt = 0
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.byt = 1
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.str = IgnoreStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2805
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2814
		{
			decNesting(yylex)
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2819
		{
			forceEOF(yylex)
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2824
		{
			forceEOF(yylex)
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2828
		{
			forceEOF(yylex)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2832
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

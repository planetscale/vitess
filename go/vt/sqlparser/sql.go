// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const TABLES = 57541
const VITESS_KEYSPACES = 57542
const VITESS_SHARDS = 57543
const VITESS_TABLETS = 57544
const VSCHEMA = 57545
const VSCHEMA_TABLES = 57546
const VITESS_TARGET = 57547
const FULL = 57548
const PROCESSLIST = 57549
const COLUMNS = 57550
const FIELDS = 57551
const ENGINES = 57552
const PLUGINS = 57553
const NAMES = 57554
const CHARSET = 57555
const GLOBAL = 57556
const SESSION = 57557
const ISOLATION = 57558
const LEVEL = 57559
const READ = 57560
const WRITE = 57561
const ONLY = 57562
const REPEATABLE = 57563
const COMMITTED = 57564
const UNCOMMITTED = 57565
const SERIALIZABLE = 57566
const CURRENT_TIMESTAMP = 57567
const DATABASE = 57568
const CURRENT_DATE = 57569
const CURRENT_TIME = 57570
const LOCALTIME = 57571
const LOCALTIMESTAMP = 57572
const UTC_DATE = 57573
const UTC_TIME = 57574
const UTC_TIMESTAMP = 57575
const REPLACE = 57576
const CONVERT = 57577
const CAST = 57578
const SUBSTR = 57579
const SUBSTRING = 57580
const GROUP_CONCAT = 57581
const SEPARATOR = 57582
const TIMESTAMPADD = 57583
const TIMESTAMPDIFF = 57584
const MATCH = 57585
const AGAINST = 57586
const BOOLEAN = 57587
const LANGUAGE = 57588
const WITH = 57589
const QUERY = 57590
const EXPANSION = 57591
const UNUSED = 57592

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 300,
	160, 300,
	-2, 290,
	-1, 267,
	112, 644,
	-2, 640,
	-1, 268,
	112, 645,
	-2, 641,
	-1, 333,
	82, 817,
	-2, 60,
	-1, 334,
	82, 774,
	-2, 61,
	-1, 339,
	82, 753,
	-2, 606,
	-1, 341,
	82, 795,
	-2, 608,
	-1, 609,
	1, 352,
	5, 352,
	12, 352,
	13, 352,
	14, 352,
	15, 352,
	17, 352,
	19, 352,
	30, 352,
	31, 352,
	42, 352,
	43, 352,
	44, 352,
	45, 352,
	46, 352,
	48, 352,
	49, 352,
	52, 352,
	53, 352,
	55, 352,
	56, 352,
	268, 352,
	-2, 370,
	-1, 612,
	53, 43,
	55, 43,
	-2, 45,
	-1, 752,
	112, 647,
	-2, 643,
	-1, 978,
	5, 30,
	-2, 436,
	-1, 1015,
	5, 29,
	-2, 580,
	-1, 1272,
	5, 30,
	-2, 581,
	-1, 1329,
	5, 29,
	-2, 583,
	-1, 1412,
	5, 30,
	-2, 584,
}

const yyPrivate = 57344

const yyLast = 12774

var yyAct = [...]int{

	268, 1447, 1437, 1227, 1400, 1018, 272, 566, 1341, 1292,
	1306, 1036, 864, 1107, 1162, 1196, 57, 841, 1163, 246,
	860, 1159, 1019, 943, 907, 565, 3, 1061, 873, 893,
	887, 863, 81, 298, 1042, 1169, 208, 839, 1175, 208,
	777, 1130, 717, 1087, 338, 787, 970, 611, 1078, 784,
	622, 877, 843, 828, 805, 237, 754, 498, 504, 903,
	621, 606, 439, 332, 952, 518, 821, 208, 81, 605,
	255, 329, 208, 327, 208, 56, 510, 245, 1440, 1424,
	1435, 580, 1410, 205, 1432, 1228, 1423, 1152, 1264, 1409,
	444, 1352, 261, 472, 1191, 1192, 274, 61, 1190, 270,
	238, 239, 240, 241, 1049, 854, 244, 1048, 492, 259,
	1050, 855, 856, 243, 328, 203, 199, 200, 201, 441,
	242, 443, 218, 63, 64, 65, 66, 67, 926, 1374,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 925, 623, 542, 624, 231, 1204, 1205, 1206,
	195, 886, 197, 1069, 488, 1209, 1207, 786, 1295, 474,
	1312, 476, 489, 486, 487, 457, 491, 894, 1247, 1245,
	930, 236, 481, 482, 692, 1110, 1109, 690, 1434, 924,
	1431, 1401, 1106, 822, 1392, 1451, 878, 1342, 1455, 458,
	446, 473, 475, 1037, 1039, 197, 208, 211, 1111, 208,
	1344, 696, 683, 1185, 214, 208, 1184, 1183, 691, 880,
	442, 208, 222, 217, 81, 693, 81, 880, 81, 81,
	454, 81, 449, 81, 210, 198, 861, 554, 555, 921,
	918, 919, 81, 917, 1350, 1381, 202, 937, 1062, 1275,
	936, 1103, 1117, 450, 220, 196, 456, 1105, 988, 964,
	230, 880, 463, 726, 522, 542, 464, 532, 465, 1213,
	542, 470, 81, 723, 928, 931, 506, 718, 1343, 517,
	1038, 945, 516, 515, 1390, 1360, 212, 507, 1173, 471,
	440, 440, 70, 451, 1154, 452, 625, 806, 453, 517,
	894, 1449, 685, 806, 1450, 997, 1448, 1067, 494, 495,
	923, 1375, 1408, 224, 215, 879, 225, 226, 227, 229,
	1214, 228, 234, 879, 438, 1094, 216, 219, 71, 213,
	233, 232, 922, 299, 51, 208, 208, 208, 883, 335,
	1208, 81, 1456, 1131, 884, 1351, 1349, 81, 515, 983,
	501, 505, 1395, 1104, 1092, 1102, 54, 879, 719, 944,
	508, 1414, 876, 874, 517, 875, 757, 523, 512, 1302,
	872, 878, 761, 604, 1301, 927, 552, 460, 461, 462,
	1133, 1457, 603, 1082, 612, 51, 759, 760, 758, 778,
	929, 779, 445, 251, 961, 962, 963, 1388, 1081, 516,
	515, 1070, 567, 582, 584, 586, 588, 590, 592, 593,
	613, 578, 619, 1135, 1416, 1139, 517, 1134, 1051, 1132,
	1052, 1093, 1391, 1323, 1137, 1299, 1098, 1095, 1088, 1096,
	1091, 22, 609, 1136, 1089, 1090, 535, 536, 537, 538,
	539, 532, 1114, 982, 542, 981, 1138, 1140, 1097, 208,
	516, 515, 1079, 1230, 81, 1347, 1433, 1156, 497, 208,
	208, 81, 516, 515, 1062, 208, 194, 517, 208, 447,
	448, 208, 725, 729, 730, 208, 1057, 81, 81, 517,
	1419, 497, 81, 81, 81, 81, 81, 81, 744, 746,
	747, 250, 81, 81, 745, 780, 633, 702, 533, 534,
	535, 536, 537, 538, 539, 532, 687, 688, 542, 724,
	1347, 1404, 694, 1347, 497, 328, 1347, 1382, 700, 705,
	81, 516, 515, 701, 208, 686, 516, 515, 1347, 1346,
	81, 324, 325, 1290, 1289, 1417, 731, 684, 517, 703,
	681, 697, 466, 517, 1277, 497, 1357, 469, 459, 469,
	616, 469, 469, 1356, 469, 1172, 469, 288, 287, 290,
	291, 292, 293, 1274, 497, 469, 289, 294, 1353, 755,
	1210, 740, 1220, 1219, 81, 1216, 1217, 752, 1216, 1215,
	976, 497, 825, 497, 1043, 51, 789, 497, 58, 733,
	796, 800, 617, 720, 615, 748, 807, 750, 632, 631,
	551, 881, 335, 553, 791, 1160, 81, 81, 1172, 848,
	789, 615, 1270, 208, 1359, 825, 1218, 1120, 741, 742,
	1053, 208, 208, 1043, 992, 208, 208, 825, 976, 81,
	24, 564, 756, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 81, 579, 581, 583, 585, 587, 589, 591,
	587, 594, 595, 596, 597, 598, 599, 600, 818, 610,
	823, 976, 849, 803, 781, 782, 1172, 853, 991, 990,
	987, 567, 985, 850, 794, 795, 1007, 1006, 54, 1442,
	976, 615, 889, 890, 891, 892, 895, 896, 897, 847,
	618, 852, 851, 824, 208, 81, 24, 81, 900, 901,
	902, 81, 81, 208, 208, 868, 208, 208, 24, 727,
	208, 81, 695, 989, 986, 909, 984, 609, 825, 54,
	1013, 609, 1425, 1398, 1014, 1308, 1297, 208, 859, 208,
	208, 888, 208, 1282, 252, 908, 1328, 792, 793, 1201,
	1056, 912, 904, 802, 54, 809, 297, 905, 906, 899,
	934, 935, 898, 938, 939, 1438, 54, 940, 1176, 1177,
	1108, 911, 1203, 1179, 1160, 817, 1083, 819, 820, 830,
	833, 834, 835, 831, 942, 832, 836, 469, 79, 948,
	739, 752, 54, 721, 469, 699, 1030, 1028, 1182, 1181,
	1027, 1031, 1029, 1026, 751, 1032, 953, 834, 835, 954,
	469, 469, 755, 256, 257, 469, 469, 469, 469, 469,
	469, 1429, 1422, 1116, 337, 469, 469, 949, 511, 1427,
	959, 958, 499, 1074, 630, 966, 467, 950, 951, 1066,
	505, 1304, 1397, 509, 500, 1396, 208, 208, 208, 208,
	208, 1020, 1326, 830, 833, 834, 835, 831, 208, 832,
	836, 208, 1064, 1176, 1177, 208, 1058, 1015, 1268, 208,
	914, 698, 838, 253, 254, 756, 511, 957, 247, 996,
	1364, 248, 58, 1363, 81, 956, 791, 1310, 1043, 490,
	1444, 1443, 60, 716, 513, 1444, 1054, 51, 1378, 1296,
	335, 722, 977, 62, 1045, 614, 1044, 55, 1022, 1023,
	1033, 1025, 568, 865, 1, 1021, 960, 1041, 1024, 998,
	1436, 1229, 1305, 920, 1046, 1063, 1399, 1340, 1195, 871,
	862, 69, 81, 81, 1073, 437, 1075, 1076, 1077, 1071,
	1072, 68, 609, 609, 609, 609, 609, 1059, 1060, 1389,
	870, 869, 1348, 1294, 840, 882, 1068, 609, 610, 885,
	1202, 81, 1394, 975, 1065, 609, 638, 636, 1080, 637,
	337, 635, 337, 640, 337, 337, 208, 337, 639, 337,
	634, 994, 1099, 221, 330, 81, 837, 626, 337, 910,
	514, 72, 1086, 1101, 1100, 916, 484, 485, 223, 550,
	955, 496, 1047, 336, 1167, 1113, 728, 503, 751, 1362,
	1309, 995, 577, 804, 273, 743, 286, 283, 520, 285,
	284, 734, 1012, 1118, 524, 271, 263, 608, 469, 601,
	469, 1153, 829, 827, 1124, 1123, 826, 81, 81, 1161,
	1020, 468, 1129, 1141, 469, 1142, 1178, 1174, 607, 1119,
	1263, 1373, 738, 752, 26, 59, 258, 19, 1115, 18,
	17, 81, 1166, 20, 16, 15, 14, 455, 1164, 30,
	21, 13, 12, 1171, 81, 11, 81, 81, 10, 1187,
	9, 8, 7, 1180, 6, 5, 4, 337, 1194, 249,
	23, 2, 0, 627, 0, 965, 1186, 0, 0, 1189,
	0, 0, 0, 0, 208, 1193, 1198, 1199, 1200, 0,
	1155, 0, 1211, 1212, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 81, 0, 0,
	81, 81, 208, 0, 0, 0, 0, 0, 81, 0,
	0, 208, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 1221, 0, 0, 265, 0, 1188, 1234, 0, 0,
	0, 0, 0, 1222, 0, 1016, 1017, 0, 1224, 610,
	610, 610, 610, 610, 1235, 1223, 0, 1225, 1236, 1233,
	1243, 0, 1240, 1241, 840, 1242, 1040, 0, 1244, 0,
	1246, 0, 610, 0, 0, 0, 0, 0, 0, 1020,
	337, 0, 0, 1269, 0, 0, 0, 337, 1278, 0,
	0, 0, 0, 0, 81, 1279, 0, 0, 0, 0,
	0, 0, 81, 337, 337, 0, 1054, 1288, 337, 337,
	337, 337, 337, 337, 0, 0, 0, 609, 337, 337,
	0, 0, 81, 0, 0, 0, 1122, 0, 1291, 81,
	0, 0, 0, 0, 0, 0, 469, 477, 0, 478,
	479, 0, 480, 732, 483, 1298, 735, 1300, 0, 1265,
	1147, 0, 0, 493, 0, 0, 520, 0, 567, 337,
	0, 0, 0, 0, 469, 0, 1280, 0, 0, 1281,
	0, 1311, 1283, 0, 0, 81, 81, 0, 81, 0,
	0, 0, 0, 81, 0, 81, 81, 81, 208, 1327,
	0, 81, 1335, 0, 1336, 1337, 1338, 0, 1334, 1329,
	783, 788, 790, 0, 1164, 1339, 1345, 0, 0, 81,
	798, 798, 0, 0, 0, 865, 798, 865, 1361, 1354,
	0, 1355, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 815, 816, 542, 0, 0, 0, 1165, 0,
	51, 0, 0, 1379, 0, 0, 0, 0, 81, 1387,
	0, 1386, 0, 0, 0, 337, 1380, 0, 0, 0,
	81, 81, 1164, 0, 0, 0, 0, 0, 337, 0,
	1402, 0, 1406, 1403, 0, 0, 0, 0, 0, 1122,
	0, 0, 81, 0, 1411, 1020, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	556, 557, 558, 559, 560, 561, 562, 563, 1421, 0,
	0, 337, 0, 337, 1426, 1428, 81, 932, 933, 0,
	0, 0, 0, 0, 0, 1430, 0, 337, 0, 1441,
	1415, 0, 0, 0, 610, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 1405, 567, 0, 0,
	0, 0, 0, 337, 0, 682, 0, 0, 0, 0,
	0, 0, 689, 0, 0, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 707,
	1307, 0, 0, 708, 709, 710, 711, 712, 713, 0,
	0, 0, 0, 714, 715, 0, 0, 1284, 1285, 1286,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 978, 979, 980,
	0, 0, 0, 0, 0, 0, 0, 0, 993, 1260,
	497, 0, 0, 999, 1000, 469, 1001, 1002, 1003, 1004,
	1005, 0, 0, 1008, 1009, 1010, 1011, 0, 0, 0,
	0, 798, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 0, 1035, 542, 531, 530, 540,
	541, 533, 534, 535, 536, 537, 538, 539, 532, 0,
	0, 542, 1257, 497, 1165, 0, 0, 1330, 0, 0,
	337, 0, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 0, 971, 542, 0, 0, 0,
	0, 1307, 865, 0, 0, 0, 0, 0, 1358, 0,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 1254, 497, 542, 0, 0, 0, 1084, 337,
	0, 0, 1165, 0, 51, 0, 0, 0, 0, 753,
	0, 0, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 337, 0, 0,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 0, 0, 542, 0, 0, 0, 0, 0,
	0, 337, 0, 0, 0, 0, 913, 0, 915, 0,
	0, 1128, 0, 0, 0, 0, 808, 0, 810, 0,
	811, 0, 941, 497, 812, 337, 813, 0, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	798, 0, 0, 1168, 1170, 0, 0, 0, 1439, 0,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 0, 0, 542, 0, 206, 1170, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 0, 337, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 206, 526, 0,
	529, 0, 206, 0, 206, 0, 543, 544, 545, 546,
	547, 548, 549, 0, 527, 528, 525, 531, 530, 540,
	541, 533, 534, 535, 536, 537, 538, 539, 532, 0,
	0, 542, 0, 1226, 0, 0, 1231, 1232, 0, 0,
	0, 0, 0, 0, 337, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 1239, 0, 0, 0,
	0, 0, 1251, 497, 0, 0, 0, 1248, 1249, 1250,
	0, 1253, 0, 0, 1256, 0, 1259, 0, 0, 0,
	0, 0, 0, 0, 967, 968, 969, 0, 0, 0,
	0, 1271, 1272, 1273, 0, 1276, 0, 0, 0, 798,
	531, 530, 540, 541, 533, 534, 535, 536, 537, 538,
	539, 532, 1287, 0, 542, 0, 0, 0, 1267, 0,
	337, 0, 0, 0, 1085, 0, 206, 0, 1293, 206,
	0, 0, 0, 1266, 0, 206, 0, 0, 0, 0,
	0, 206, 0, 0, 1261, 0, 0, 0, 337, 0,
	0, 0, 1112, 0, 0, 337, 531, 530, 540, 541,
	533, 534, 535, 536, 537, 538, 539, 532, 0, 0,
	542, 531, 530, 540, 541, 533, 534, 535, 536, 537,
	538, 539, 532, 0, 0, 542, 0, 0, 0, 1322,
	530, 540, 541, 533, 534, 535, 536, 537, 538, 539,
	532, 1331, 1332, 542, 1333, 0, 0, 0, 0, 1293,
	0, 1293, 1293, 1293, 0, 0, 0, 1197, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	0, 0, 542, 0, 0, 1293, 0, 0, 0, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 0, 0, 0,
	1376, 1377, 0, 0, 0, 206, 206, 206, 0, 0,
	0, 0, 1383, 1384, 1385, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1393, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 337, 337, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 1127, 0, 1407,
	0, 0, 0, 0, 0, 798, 1412, 0, 1413, 1143,
	1144, 1145, 1146, 0, 1148, 1149, 1150, 1151, 0, 24,
	25, 52, 27, 28, 1258, 1418, 0, 0, 1420, 0,
	0, 1157, 1158, 0, 0, 0, 0, 0, 43, 1255,
	0, 0, 0, 29, 48, 49, 0, 0, 0, 0,
	0, 0, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 54, 0, 206,
	0, 1453, 1454, 0, 0, 0, 0, 0, 0, 206,
	206, 0, 0, 0, 0, 206, 0, 0, 206, 1252,
	0, 206, 0, 0, 0, 704, 0, 0, 531, 530,
	540, 541, 533, 534, 535, 536, 537, 538, 539, 532,
	0, 0, 542, 531, 530, 540, 541, 533, 534, 535,
	536, 537, 538, 539, 532, 0, 0, 542, 31, 32,
	34, 33, 36, 1303, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	1238, 0, 0, 704, 0, 37, 44, 45, 0, 0,
	46, 47, 35, 531, 530, 540, 541, 533, 534, 535,
	536, 537, 538, 539, 532, 39, 40, 542, 41, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1125, 0, 0, 262, 0, 0, 0, 0,
	262, 262, 0, 0, 799, 799, 262, 0, 0, 0,
	799, 0, 531, 530, 540, 541, 533, 534, 535, 536,
	537, 538, 539, 532, 0, 655, 542, 972, 262, 262,
	262, 262, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 206, 845, 0, 0, 206, 206, 531, 530, 540,
	541, 533, 534, 535, 536, 537, 538, 539, 532, 0,
	0, 542, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 0, 1315,
	1316, 0, 1317, 1318, 0, 1319, 1320, 1321, 0, 0,
	0, 1324, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 206, 0, 206, 206, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 0, 0, 0, 206, 0, 946,
	947, 0, 206, 0, 0, 0, 0, 704, 0, 0,
	0, 0, 669, 670, 671, 672, 673, 674, 675, 262,
	676, 677, 678, 679, 680, 657, 658, 659, 660, 641,
	642, 0, 0, 644, 0, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 661, 662, 663, 664, 665,
	666, 667, 668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 799, 206, 206, 206, 206,
	206, 0, 0, 0, 1445, 0, 0, 0, 1034, 0,
	0, 206, 0, 0, 0, 845, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 799, 425, 414, 0, 385, 428, 363,
	377, 436, 378, 379, 407, 349, 393, 138, 375, 0,
	366, 344, 372, 345, 364, 387, 102, 390, 362, 416,
	396, 427, 119, 434, 121, 401, 0, 158, 130, 0,
	0, 389, 418, 391, 412, 384, 408, 354, 400, 429,
	376, 405, 430, 0, 0, 0, 80, 0, 866, 867,
	0, 0, 0, 0, 0, 95, 0, 403, 424, 374,
	404, 406, 343, 402, 0, 347, 350, 435, 420, 369,
	370, 1055, 0, 0, 0, 0, 0, 0, 388, 392,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	386, 0, 0, 0, 353, 0, 368, 410, 845, 342,
	108, 413, 419, 383, 209, 423, 381, 380, 426, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 417, 365, 373, 98, 371, 152, 140, 174, 398,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 346, 799,
	159, 176, 193, 93, 361, 164, 183, 184, 185, 186,
	187, 188, 0, 206, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 357, 360, 355, 356, 394, 395, 431, 432, 433,
	411, 352, 0, 358, 359, 0, 415, 421, 422, 397,
	82, 0, 120, 190, 147, 105, 177, 425, 414, 0,
	385, 428, 363, 377, 436, 378, 379, 407, 349, 393,
	138, 375, 0, 366, 344, 372, 345, 364, 387, 102,
	390, 362, 416, 396, 427, 119, 434, 121, 401, 0,
	158, 130, 0, 0, 389, 418, 391, 412, 384, 408,
	354, 400, 429, 376, 405, 430, 0, 0, 0, 80,
	0, 866, 867, 0, 0, 0, 0, 0, 95, 0,
	403, 424, 374, 404, 406, 343, 402, 0, 347, 350,
	435, 420, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 388, 392, 409, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 399, 0, 0, 0, 351,
	348, 0, 0, 386, 0, 0, 0, 353, 0, 368,
	410, 0, 342, 108, 413, 419, 383, 209, 423, 381,
	380, 426, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 417, 365, 373, 98, 371, 152,
	140, 174, 398, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 346, 0, 159, 176, 193, 93, 361, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 357, 360, 355, 356, 394, 395,
	431, 432, 433, 411, 352, 0, 358, 359, 0, 415,
	421, 422, 397, 82, 0, 120, 190, 147, 105, 177,
	425, 414, 0, 385, 428, 363, 377, 436, 378, 379,
	407, 349, 393, 138, 375, 0, 366, 344, 372, 345,
	364, 387, 102, 390, 362, 416, 396, 427, 119, 434,
	121, 401, 0, 158, 130, 0, 0, 389, 418, 391,
	412, 384, 408, 354, 400, 429, 376, 405, 430, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 403, 424, 374, 404, 406, 343, 402,
	0, 347, 350, 435, 420, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 388, 392, 409, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 0, 399, 0,
	0, 0, 351, 348, 0, 0, 386, 0, 0, 0,
	353, 0, 368, 410, 0, 342, 108, 413, 419, 383,
	209, 423, 381, 380, 426, 145, 0, 161, 110, 118,
	83, 89, 0, 109, 136, 150, 154, 417, 365, 373,
	98, 371, 152, 140, 174, 398, 141, 151, 122, 166,
	146, 173, 181, 182, 163, 180, 189, 84, 162, 172,
	96, 155, 86, 170, 160, 128, 114, 115, 85, 0,
	149, 101, 106, 100, 137, 167, 168, 99, 192, 90,
	179, 88, 91, 178, 135, 165, 171, 129, 126, 87,
	169, 127, 125, 117, 104, 111, 143, 124, 144, 112,
	132, 131, 133, 0, 346, 0, 159, 176, 193, 93,
	361, 164, 183, 184, 185, 186, 187, 188, 0, 0,
	94, 107, 103, 142, 134, 92, 113, 156, 116, 123,
	148, 191, 139, 153, 97, 175, 157, 357, 360, 355,
	356, 394, 395, 431, 432, 433, 411, 352, 0, 358,
	359, 0, 415, 421, 422, 397, 82, 0, 120, 190,
	147, 105, 177, 425, 414, 0, 385, 428, 363, 377,
	436, 378, 379, 407, 349, 393, 138, 375, 0, 366,
	344, 372, 345, 364, 387, 102, 390, 362, 416, 396,
	427, 119, 434, 121, 401, 0, 158, 130, 0, 0,
	389, 418, 391, 412, 384, 408, 354, 400, 429, 376,
	405, 430, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 403, 424, 374, 404,
	406, 343, 402, 0, 347, 350, 435, 420, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 409,
	382, 0, 0, 0, 0, 0, 0, 1121, 0, 367,
	0, 399, 0, 0, 0, 351, 348, 0, 0, 386,
	0, 0, 0, 353, 0, 368, 410, 0, 342, 108,
	413, 419, 383, 209, 423, 381, 380, 426, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	417, 365, 373, 98, 371, 152, 140, 174, 398, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 346, 0, 159,
	176, 193, 93, 361, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	357, 360, 355, 356, 394, 395, 431, 432, 433, 411,
	352, 0, 358, 359, 0, 415, 421, 422, 397, 82,
	0, 120, 190, 147, 105, 177, 425, 414, 0, 385,
	428, 363, 377, 436, 378, 379, 407, 349, 393, 138,
	375, 0, 366, 344, 372, 345, 364, 387, 102, 390,
	362, 416, 396, 427, 119, 434, 121, 401, 0, 158,
	130, 0, 0, 389, 418, 391, 412, 384, 408, 354,
	400, 429, 376, 405, 430, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 403,
	424, 374, 404, 406, 343, 402, 0, 347, 350, 435,
	420, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	388, 392, 409, 382, 0, 0, 0, 0, 0, 0,
	749, 0, 367, 0, 399, 0, 0, 0, 351, 348,
	0, 0, 386, 0, 0, 0, 353, 0, 368, 410,
	0, 342, 108, 413, 419, 383, 209, 423, 381, 380,
	426, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 417, 365, 373, 98, 371, 152, 140,
	174, 398, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	346, 0, 159, 176, 193, 93, 361, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 357, 360, 355, 356, 394, 395, 431,
	432, 433, 411, 352, 0, 358, 359, 0, 415, 421,
	422, 397, 82, 0, 120, 190, 147, 105, 177, 425,
	414, 0, 385, 428, 363, 377, 436, 378, 379, 407,
	349, 393, 138, 375, 0, 366, 344, 372, 345, 364,
	387, 102, 390, 362, 416, 396, 427, 119, 434, 121,
	401, 0, 158, 130, 0, 0, 389, 418, 391, 412,
	384, 408, 354, 400, 429, 376, 405, 430, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 403, 424, 374, 404, 406, 343, 402, 0,
	347, 350, 435, 420, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 409, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 399, 0, 0,
	0, 351, 348, 0, 0, 386, 0, 0, 0, 353,
	0, 368, 410, 0, 342, 108, 413, 419, 383, 209,
	423, 381, 380, 426, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 417, 365, 373, 98,
	371, 152, 140, 174, 398, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 346, 0, 159, 176, 193, 93, 361,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 357, 360, 355, 356,
	394, 395, 431, 432, 433, 411, 352, 0, 358, 359,
	0, 415, 421, 422, 397, 82, 0, 120, 190, 147,
	105, 177, 425, 414, 0, 385, 428, 363, 377, 436,
	378, 379, 407, 349, 393, 138, 375, 0, 366, 344,
	372, 345, 364, 387, 102, 390, 362, 416, 396, 427,
	119, 434, 121, 401, 0, 158, 130, 0, 0, 389,
	418, 391, 412, 384, 408, 354, 400, 429, 376, 405,
	430, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 403, 424, 374, 404, 406,
	343, 402, 0, 347, 350, 435, 420, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 388, 392, 409, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
	399, 0, 0, 0, 351, 348, 0, 0, 386, 0,
	0, 0, 353, 0, 368, 410, 0, 342, 108, 413,
	419, 383, 209, 423, 381, 380, 426, 145, 0, 161,
	110, 118, 83, 89, 0, 109, 136, 150, 154, 417,
	365, 373, 98, 371, 152, 140, 174, 398, 141, 151,
	122, 166, 146, 173, 181, 182, 163, 180, 189, 84,
	162, 172, 96, 155, 86, 170, 160, 128, 114, 115,
	85, 0, 149, 101, 106, 100, 137, 167, 168, 99,
	192, 90, 179, 88, 91, 178, 135, 165, 171, 129,
	126, 87, 169, 127, 125, 117, 104, 111, 143, 124,
	144, 112, 132, 131, 133, 0, 346, 0, 159, 176,
	193, 93, 361, 164, 183, 184, 185, 186, 187, 188,
	0, 0, 94, 107, 103, 142, 134, 92, 113, 156,
	116, 123, 148, 191, 139, 153, 97, 175, 157, 357,
	360, 355, 356, 394, 395, 431, 432, 433, 411, 352,
	0, 358, 359, 0, 415, 421, 422, 397, 82, 0,
	120, 190, 147, 105, 177, 425, 414, 0, 385, 428,
	363, 377, 436, 378, 379, 407, 349, 393, 138, 375,
	0, 366, 344, 372, 345, 364, 387, 102, 390, 362,
	416, 396, 427, 119, 434, 121, 401, 0, 158, 130,
	0, 0, 389, 418, 391, 412, 384, 408, 354, 400,
	429, 376, 405, 430, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 403, 424,
	374, 404, 406, 343, 402, 0, 347, 350, 435, 420,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 388,
	392, 409, 382, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 0, 399, 0, 0, 0, 351, 348, 0,
	0, 386, 0, 0, 0, 353, 0, 368, 410, 0,
	342, 108, 413, 419, 383, 209, 423, 381, 380, 426,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 417, 365, 373, 98, 371, 152, 140, 174,
	398, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 340, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 346,
	0, 159, 176, 193, 93, 361, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 341,
	339, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 357, 360, 355, 356, 394, 395, 431, 432,
	433, 411, 352, 0, 358, 359, 0, 415, 421, 422,
	397, 82, 0, 120, 190, 147, 105, 177, 425, 414,
	0, 385, 428, 363, 377, 436, 378, 379, 407, 349,
	393, 138, 375, 0, 366, 344, 372, 345, 364, 387,
	102, 390, 362, 416, 396, 427, 119, 434, 121, 401,
	0, 158, 130, 0, 0, 389, 418, 391, 412, 384,
	408, 354, 400, 429, 376, 405, 430, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 403, 424, 374, 404, 406, 343, 402, 0, 347,
	350, 435, 420, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 388, 392, 409, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 0, 399, 0, 0, 0,
	351, 348, 0, 0, 386, 0, 0, 0, 353, 0,
	368, 410, 0, 342, 108, 413, 419, 383, 209, 423,
	381, 380, 426, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 417, 365, 373, 98, 371,
	152, 140, 174, 398, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 346, 0, 159, 176, 193, 93, 361, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 357, 360, 355, 356, 394,
	395, 431, 432, 433, 411, 352, 0, 358, 359, 0,
	415, 421, 422, 397, 82, 0, 120, 190, 147, 105,
	177, 425, 414, 0, 385, 428, 363, 377, 436, 378,
	379, 407, 349, 393, 138, 375, 0, 366, 344, 372,
	345, 364, 387, 102, 390, 362, 416, 396, 427, 119,
	434, 121, 401, 0, 158, 130, 0, 0, 389, 418,
	391, 412, 384, 408, 354, 400, 429, 376, 405, 430,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 403, 424, 374, 404, 406, 343,
	402, 0, 347, 350, 435, 420, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 388, 392, 409, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 0, 399,
	0, 0, 0, 351, 348, 0, 0, 386, 0, 0,
	0, 353, 0, 368, 410, 0, 342, 108, 413, 419,
	383, 209, 423, 381, 380, 426, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 417, 365,
	373, 98, 371, 152, 140, 174, 398, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	620, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 340, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 346, 0, 159, 176, 193,
	93, 361, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 341, 339, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 357, 360,
	355, 356, 394, 395, 431, 432, 433, 411, 352, 0,
	358, 359, 0, 415, 421, 422, 397, 82, 0, 120,
	190, 147, 105, 177, 425, 414, 0, 385, 428, 363,
	377, 436, 378, 379, 407, 349, 393, 138, 375, 0,
	366, 344, 372, 345, 364, 387, 102, 390, 362, 416,
	396, 427, 119, 434, 121, 401, 0, 158, 130, 0,
	0, 389, 418, 391, 412, 384, 408, 354, 400, 429,
	376, 405, 430, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 403, 424, 374,
	404, 406, 343, 402, 0, 347, 350, 435, 420, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	409, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 0, 399, 0, 0, 0, 351, 348, 0, 0,
	386, 0, 0, 0, 353, 0, 368, 410, 0, 342,
	108, 413, 419, 383, 209, 423, 381, 380, 426, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 417, 365, 373, 98, 371, 152, 140, 174, 398,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 331, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 340, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 346, 0,
	159, 176, 193, 93, 361, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 341, 339,
	334, 333, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 357, 360, 355, 356, 394, 395, 431, 432, 433,
	411, 352, 0, 358, 359, 0, 415, 421, 422, 397,
	82, 0, 120, 190, 147, 105, 177, 138, 0, 0,
	0, 0, 269, 0, 0, 0, 102, 0, 266, 0,
	0, 0, 119, 309, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 300, 301, 0, 0, 0, 0, 0,
	0, 857, 0, 54, 0, 0, 267, 288, 287, 290,
	291, 292, 293, 0, 0, 95, 289, 294, 295, 296,
	858, 0, 0, 264, 281, 0, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 322, 0, 280, 0, 0, 275, 276, 277,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 320, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 310, 321, 316, 317, 314, 315, 313, 312, 311,
	323, 302, 303, 304, 305, 307, 0, 318, 319, 306,
	82, 0, 120, 190, 147, 105, 177, 138, 0, 0,
	785, 0, 269, 0, 0, 0, 102, 0, 266, 0,
	0, 0, 119, 309, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 267, 288, 287, 290,
	291, 292, 293, 0, 0, 95, 289, 294, 295, 296,
	0, 0, 0, 264, 281, 0, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 260, 0,
	0, 0, 322, 0, 280, 0, 0, 275, 276, 277,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 320, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 310, 321, 316, 317, 314, 315, 313, 312, 311,
	323, 302, 303, 304, 305, 307, 0, 318, 319, 306,
	82, 0, 120, 190, 147, 105, 177, 138, 0, 0,
	0, 0, 269, 0, 0, 0, 102, 0, 266, 0,
	0, 0, 119, 309, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 497, 267, 288, 287, 290,
	291, 292, 293, 0, 0, 95, 289, 294, 295, 296,
	0, 0, 0, 264, 281, 0, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 322, 0, 280, 0, 0, 275, 276, 277,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 320, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 310, 321, 316, 317, 314, 315, 313, 312, 311,
	323, 302, 303, 304, 305, 307, 0, 318, 319, 306,
	82, 0, 120, 190, 147, 105, 177, 138, 0, 0,
	0, 0, 269, 0, 0, 0, 102, 0, 266, 0,
	0, 0, 119, 309, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 300, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 267, 288, 287, 290,
	291, 292, 293, 0, 0, 95, 289, 294, 295, 296,
	0, 0, 0, 264, 281, 0, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 260, 0,
	0, 0, 322, 0, 280, 0, 0, 275, 276, 277,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 320, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 310, 321, 316, 317, 314, 315, 313, 312, 311,
	323, 302, 303, 304, 305, 307, 24, 318, 319, 306,
	82, 0, 120, 190, 147, 105, 177, 0, 138, 0,
	0, 0, 0, 269, 0, 0, 0, 102, 0, 266,
	0, 0, 0, 119, 309, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 267, 288, 287,
	290, 291, 292, 293, 0, 0, 95, 289, 294, 295,
	296, 0, 0, 0, 264, 281, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 0,
	0, 0, 0, 322, 0, 280, 0, 0, 275, 276,
	277, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 320, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 310, 321, 316, 317, 314, 315, 313, 312,
	311, 323, 302, 303, 304, 305, 307, 0, 318, 319,
	306, 82, 0, 120, 190, 147, 105, 177, 138, 0,
	0, 0, 0, 269, 0, 0, 0, 102, 0, 266,
	0, 0, 0, 119, 309, 121, 0, 0, 158, 130,
	0, 0, 0, 0, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 267, 288, 287,
	290, 291, 292, 293, 0, 0, 95, 289, 294, 295,
	296, 0, 0, 0, 264, 281, 0, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 0,
	0, 0, 0, 322, 0, 280, 0, 0, 275, 276,
	277, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 209, 0, 0, 320, 0,
	145, 0, 161, 110, 118, 83, 89, 0, 109, 136,
	150, 154, 0, 0, 0, 98, 0, 152, 140, 174,
	0, 141, 151, 122, 166, 146, 173, 181, 182, 163,
	180, 189, 84, 162, 172, 96, 155, 86, 170, 160,
	128, 114, 115, 85, 0, 149, 101, 106, 100, 137,
	167, 168, 99, 192, 90, 179, 88, 91, 178, 135,
	165, 171, 129, 126, 87, 169, 127, 125, 117, 104,
	111, 143, 124, 144, 112, 132, 131, 133, 0, 0,
	0, 159, 176, 193, 93, 0, 164, 183, 184, 185,
	186, 187, 188, 0, 0, 94, 107, 103, 142, 134,
	92, 113, 156, 116, 123, 148, 191, 139, 153, 97,
	175, 157, 310, 321, 316, 317, 314, 315, 313, 312,
	311, 323, 302, 303, 304, 305, 307, 0, 318, 319,
	306, 82, 138, 120, 190, 147, 105, 177, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 119, 309, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 267, 288, 287, 290, 291, 292, 293, 0, 0,
	95, 289, 294, 295, 296, 0, 0, 0, 0, 281,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 322, 0, 280,
	0, 0, 275, 276, 277, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 320, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 1446, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 310, 321, 316, 317,
	314, 315, 313, 312, 311, 323, 302, 303, 304, 305,
	307, 0, 318, 319, 306, 82, 138, 120, 190, 147,
	105, 177, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 119, 309, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 497, 267, 288, 287, 290, 291,
	292, 293, 0, 0, 95, 289, 294, 295, 296, 0,
	0, 0, 0, 281, 0, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 322, 0, 280, 0, 0, 275, 276, 277, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 320, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 141,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	310, 321, 316, 317, 314, 315, 313, 312, 311, 323,
	302, 303, 304, 305, 307, 0, 318, 319, 306, 82,
	138, 120, 190, 147, 105, 177, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 119, 309, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 267,
	288, 287, 290, 291, 292, 293, 0, 0, 95, 289,
	294, 295, 296, 0, 0, 0, 0, 281, 0, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 0, 0, 0, 0, 322, 0, 280, 0, 0,
	275, 276, 277, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	320, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 310, 321, 316, 317, 314, 315,
	313, 312, 311, 323, 302, 303, 304, 305, 307, 0,
	318, 319, 306, 82, 138, 120, 190, 147, 105, 177,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	530, 540, 541, 533, 534, 535, 536, 537, 538, 539,
	532, 0, 0, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 519, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	521, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 76, 77,
	0, 73, 0, 0, 0, 78, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 844, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	846, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 82, 0, 120, 190, 147, 105, 177, 102,
	0, 0, 0, 0, 0, 119, 0, 121, 0, 0,
	158, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 209, 0, 0,
	0, 0, 145, 0, 161, 110, 118, 83, 89, 0,
	109, 136, 150, 154, 0, 0, 0, 98, 0, 152,
	140, 174, 0, 141, 151, 122, 166, 146, 173, 181,
	182, 163, 180, 189, 84, 162, 172, 96, 155, 86,
	170, 160, 128, 114, 115, 85, 0, 149, 101, 106,
	100, 137, 167, 168, 99, 192, 90, 179, 88, 91,
	178, 135, 165, 171, 129, 126, 87, 169, 127, 125,
	117, 104, 111, 143, 124, 144, 112, 132, 131, 133,
	0, 0, 0, 159, 176, 193, 93, 0, 164, 183,
	184, 185, 186, 187, 188, 0, 0, 94, 107, 103,
	142, 134, 92, 113, 156, 116, 123, 148, 191, 139,
	153, 97, 175, 157, 0, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 82, 0, 120, 190, 147, 105, 177,
	102, 0, 0, 0, 0, 0, 119, 0, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 0, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	844, 0, 0, 0, 82, 102, 120, 190, 147, 105,
	177, 119, 0, 121, 0, 0, 158, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 846, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 209, 0, 0, 0, 0, 145, 0,
	161, 110, 118, 83, 89, 0, 109, 136, 150, 154,
	0, 0, 0, 98, 0, 152, 140, 174, 0, 842,
	151, 122, 166, 146, 173, 181, 182, 163, 180, 189,
	84, 162, 172, 96, 155, 86, 170, 160, 128, 114,
	115, 85, 0, 149, 101, 106, 100, 137, 167, 168,
	99, 192, 90, 179, 88, 91, 178, 135, 165, 171,
	129, 126, 87, 169, 127, 125, 117, 104, 111, 143,
	124, 144, 112, 132, 131, 133, 0, 0, 0, 159,
	176, 193, 93, 0, 164, 183, 184, 185, 186, 187,
	188, 0, 0, 94, 107, 103, 142, 134, 92, 113,
	156, 116, 123, 148, 191, 139, 153, 97, 175, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 82,
	102, 120, 190, 147, 105, 177, 119, 0, 121, 0,
	0, 158, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 736, 0, 0, 737, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 209, 0,
	0, 0, 0, 145, 0, 161, 110, 118, 83, 89,
	0, 109, 136, 150, 154, 0, 0, 0, 98, 0,
	152, 140, 174, 0, 141, 151, 122, 166, 146, 173,
	181, 182, 163, 180, 189, 84, 162, 172, 96, 155,
	86, 170, 160, 128, 114, 115, 85, 0, 149, 101,
	106, 100, 137, 167, 168, 99, 192, 90, 179, 88,
	91, 178, 135, 165, 171, 129, 126, 87, 169, 127,
	125, 117, 104, 111, 143, 124, 144, 112, 132, 131,
	133, 0, 0, 0, 159, 176, 193, 93, 0, 164,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 107,
	103, 142, 134, 92, 113, 156, 116, 123, 148, 191,
	139, 153, 97, 175, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 82, 0, 120, 190, 147, 105,
	177, 102, 0, 629, 0, 0, 0, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 628, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 82, 102, 120, 190, 147,
	105, 177, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	82, 102, 120, 190, 147, 105, 177, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 846, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 82, 102, 120, 190, 147,
	105, 177, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 801, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	82, 102, 120, 190, 147, 105, 177, 119, 0, 121,
	0, 0, 158, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 797, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 209,
	0, 0, 0, 0, 145, 0, 161, 110, 118, 83,
	89, 0, 109, 136, 150, 154, 0, 0, 0, 98,
	0, 152, 140, 174, 0, 141, 151, 122, 166, 146,
	173, 181, 182, 163, 180, 189, 84, 162, 172, 96,
	155, 86, 170, 160, 128, 114, 115, 85, 0, 149,
	101, 106, 100, 137, 167, 168, 99, 192, 90, 179,
	88, 91, 178, 135, 165, 171, 129, 126, 87, 169,
	127, 125, 117, 104, 111, 143, 124, 144, 112, 132,
	131, 133, 0, 0, 0, 159, 176, 193, 93, 0,
	164, 183, 184, 185, 186, 187, 188, 0, 0, 94,
	107, 103, 142, 134, 92, 113, 156, 116, 123, 148,
	191, 139, 153, 97, 175, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 82, 102, 120, 190, 147,
	105, 177, 119, 0, 121, 0, 0, 158, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 521, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 209, 0, 0, 0, 0, 145,
	0, 161, 110, 118, 83, 89, 0, 109, 136, 150,
	154, 0, 0, 0, 98, 0, 152, 140, 174, 0,
	141, 151, 122, 166, 146, 173, 181, 182, 163, 180,
	189, 84, 162, 172, 96, 155, 86, 170, 160, 128,
	114, 115, 85, 0, 149, 101, 106, 100, 137, 167,
	168, 99, 192, 90, 179, 88, 91, 178, 135, 165,
	171, 129, 126, 87, 169, 127, 125, 117, 104, 111,
	143, 124, 144, 112, 132, 131, 133, 0, 0, 0,
	159, 176, 193, 93, 0, 164, 183, 184, 185, 186,
	187, 188, 0, 0, 94, 107, 103, 142, 134, 92,
	113, 156, 116, 123, 148, 191, 139, 153, 97, 175,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	82, 0, 120, 190, 147, 105, 177, 602, 102, 0,
	0, 0, 0, 0, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 326, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 204, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 82, 102, 120,
	190, 147, 105, 177, 119, 0, 121, 0, 0, 158,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 209, 0, 0, 0,
	0, 145, 0, 161, 110, 118, 83, 89, 0, 109,
	136, 150, 154, 0, 0, 0, 98, 0, 152, 140,
	174, 0, 141, 151, 122, 166, 146, 173, 181, 182,
	163, 180, 189, 84, 162, 172, 96, 155, 86, 170,
	160, 128, 114, 115, 85, 0, 149, 101, 106, 100,
	137, 167, 168, 99, 192, 90, 179, 88, 91, 178,
	135, 165, 171, 129, 126, 87, 169, 127, 125, 117,
	104, 111, 143, 124, 144, 112, 132, 131, 133, 0,
	0, 0, 159, 176, 193, 93, 0, 164, 183, 184,
	185, 186, 187, 188, 0, 0, 94, 107, 103, 142,
	134, 92, 113, 156, 116, 123, 148, 191, 139, 153,
	97, 175, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 82, 102, 120, 190, 147, 105, 177, 119,
	0, 121, 0, 0, 158, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 209, 0, 0, 0, 0, 145, 0, 161, 110,
	118, 83, 89, 0, 109, 136, 150, 154, 0, 0,
	0, 98, 0, 152, 140, 174, 0, 141, 151, 122,
	166, 146, 173, 181, 182, 163, 180, 189, 84, 162,
	172, 96, 155, 86, 170, 160, 128, 114, 115, 85,
	0, 149, 101, 106, 100, 137, 167, 168, 99, 192,
	90, 179, 88, 91, 178, 135, 165, 171, 129, 126,
	87, 169, 127, 125, 117, 104, 111, 143, 124, 144,
	112, 132, 131, 133, 0, 0, 0, 159, 176, 193,
	93, 0, 164, 183, 184, 185, 186, 187, 188, 0,
	0, 94, 107, 103, 142, 134, 92, 113, 156, 116,
	123, 148, 191, 139, 153, 97, 175, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 120,
	190, 147, 105, 177,
}
var yyPact = [...]int{

	2123, -1000, -193, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 847, 867, -1000, -1000, -1000, -1000, -1000, -1000,
	228, 8486, 25, 102, -7, 11801, 101, 89, 12271, -1000,
	7, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -96, -103,
	-1000, 614, -1000, -1000, -1000, -1000, -1000, 841, 845, 718,
	833, 753, -1000, 6539, 68, 68, 11566, 5539, -1000, -1000,
	224, 12271, 86, 12271, -161, 62, 62, 62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 99, 12271, 168, -1000, 12271, 61,
	481, 61, 61, 61, 12271, -1000, 144, -1000, -1000, -1000,
	12271, 475, 786, 3435, 36, 3435, -1000, 3435, 3435, -1000,
	3435, 13, 3435, -62, 857, -1000, -1000, -1000, -1000, -50,
	-1000, 3435, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 392, 793, 7040, 7040, 847,
	-1000, 614, -1000, -1000, -1000, 787, -1000, -1000, 293, 863,
	-1000, 8251, 142, -1000, 7040, 1734, 655, -1000, -1000, 655,
	-1000, -1000, 114, -1000, -1000, 7772, 7772, 7772, 7772, 7772,
	7772, 7772, 7772, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 655, -1000, 6790,
	655, 655, 655, 655, 655, 655, 655, 655, 7040, 655,
	655, 655, 655, 655, 655, 655, 655, 655, 655, 655,
	655, 655, 655, 655, 11331, 10149, 12271, 529, -1000, 625,
	5276, -90, -1000, -1000, -1000, 204, 9914, -1000, -1000, -1000,
	784, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 533, 12271, -1000,
	2305, -1000, 473, 3435, 77, 470, 218, 458, 12271, 12271,
	3435, 20, 51, 92, 12271, 647, 75, 12271, 828, 723,
	12271, 456, 430, -1000, 5013, -1000, 3435, 3435, -1000, -1000,
	-1000, 3435, 3435, 3435, 3435, 3435, 3435, -1000, -1000, -1000,
	-1000, 3435, 3435, -1000, 862, 256, -1000, -1000, -1000, -1000,
	7040, -1000, 721, -1000, -1000, -1000, -1000, -1000, -1000, 872,
	171, 444, 141, 644, -1000, 439, 841, 392, 753, 9673,
	727, -1000, -1000, 12271, -1000, 7040, 7040, 410, -1000, 11089,
	-1000, -1000, 3961, 180, 7772, 292, 286, 7772, 7772, 7772,
	7772, 7772, 7772, 7772, 7772, 7772, 7772, 7772, 7772, 7772,
	7772, 7772, 322, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 428, -1000, 614, 489, 489, 148, 148, 148, 148,
	148, 148, 148, 8016, 6039, 392, 521, 200, 6790, 6539,
	6539, 7040, 7040, 10854, 10619, 6539, 835, 209, 200, 12506,
	-1000, 7528, -1000, 7528, -1000, 7528, -1000, 392, -1000, 7528,
	-1000, 7528, -1000, -1000, 7528, 12036, 12036, 6539, 6539, 6539,
	6539, 32, 12271, -1000, 653, 717, -1000, -1000, -1000, 830,
	9203, 9438, 32, 546, 10149, 12271, -1000, -1000, 4750, 625,
	-90, 602, -1000, -129, -125, 5789, 119, -1000, -1000, -1000,
	-1000, 3172, 223, 535, 260, -61, -1000, -1000, -1000, 667,
	-1000, 667, 667, 667, 667, -20, -20, -20, -20, -1000,
	-1000, -1000, -1000, -1000, 688, 685, -1000, 667, 667, 667,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 678, 678, 678, 671,
	671, 698, -1000, 12271, 3435, 827, 3435, -1000, 113, -1000,
	12036, 12036, 12271, 12271, 120, 12271, 12271, 616, -1000, 12271,
	3435, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12271, 259, 12271, 12271,
	200, 12271, -1000, 769, 7040, 7040, 4487, 7040, -1000, -1000,
	-1000, 793, -1000, 835, 846, -1000, 777, 776, 6539, -1000,
	-1000, 180, 265, -1000, -1000, 316, -1000, -1000, -1000, -1000,
	137, 655, -1000, 1509, -1000, -1000, -1000, -1000, 292, 7772,
	7772, 7772, 1469, 1509, 2264, 1227, 1906, 148, 327, 327,
	153, 153, 153, 153, 153, 391, 391, -1000, -1000, -1000,
	392, -1000, -1000, -1000, 392, 6539, 615, -1000, -1000, 7040,
	-1000, 392, 515, 515, 380, 317, 651, 649, -1000, 136,
	648, 603, 515, 6539, 215, -1000, 7040, 392, 1667, -1000,
	1667, 1667, 1667, 1667, 1667, 612, 611, 515, 392, 515,
	515, 680, 655, -1000, 12506, 10149, 10149, 10149, 10149, 10149,
	-1000, 741, 738, -1000, 735, 734, 743, 12271, -1000, 517,
	9203, 143, 655, -1000, 10384, -1000, -1000, 856, 10149, 562,
	-1000, -1000, 602, -90, -131, -1000, -1000, -1000, -1000, 200,
	-1000, 351, 555, 2909, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 676, 409, -1000, 818, 189, 181, 397, 814, -1000,
	-1000, -1000, 790, -1000, 229, -60, -1000, -1000, 331, -20,
	-20, -1000, -1000, 119, 783, 119, 119, 119, 383, 383,
	-1000, -1000, -1000, -1000, 328, -1000, -1000, -1000, 313, -1000,
	704, 12036, 3435, -1000, -1000, -1000, -1000, 287, 287, 219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 31, 697, -1000, -1000, -1000, 19, 18, 72, -1000,
	3435, -1000, 256, -1000, 373, 7040, -1000, -1000, -1000, 764,
	200, 200, 130, -1000, -1000, 12271, -1000, -1000, -1000, -1000,
	596, -1000, -1000, -1000, 3698, 6539, -1000, 1469, 1509, 2229,
	-1000, 7772, 7772, -1000, -1000, 515, 6539, 200, -1000, -1000,
	-1000, 225, 322, 225, 7772, 7772, 7772, 7772, 4487, 7772,
	7772, 7772, 7772, -174, 563, 203, -1000, 7040, 368, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7772, 7772, -1000, -1000,
	-1000, -1000, 702, 12506, 655, -1000, 8962, 12036, 601, -1000,
	196, 717, 696, 701, 791, -1000, -1000, -1000, -1000, 737,
	-1000, 736, -1000, -1000, -1000, -1000, -1000, 83, 82, 79,
	12036, -1000, 847, 7040, 562, -1000, -1000, -1000, -137, -145,
	-1000, -1000, -1000, 3172, -1000, 3172, 12036, 48, -1000, 397,
	397, -1000, -1000, -1000, 675, 700, 88, -1000, -1000, -1000,
	504, 119, 119, -1000, 202, -1000, -1000, -1000, 513, -1000,
	510, 551, 507, 12271, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12271, -1000, -1000, -1000, -1000, -1000, 12036, -179, 386, 12036,
	12036, 12271, -1000, 259, -1000, 200, -1000, 4224, -1000, 856,
	10149, -1000, -1000, 392, -1000, 7772, 1509, 1509, -1000, -1000,
	392, 667, 667, -1000, 667, 671, -1000, 667, -3, 667,
	-4, 392, 392, 1817, 2180, 1587, 2130, -1000, 1537, 2115,
	1484, 1935, 655, -169, -1000, 200, 7040, 1888, 1873, -1000,
	821, 543, 547, -1000, -1000, 6289, 392, 498, 127, 479,
	-1000, 847, 12506, 7040, -1000, -1000, 7040, 669, -1000, 7040,
	-1000, -1000, -1000, 655, 655, 655, 479, 841, 200, -1000,
	-1000, -1000, -1000, 2909, -1000, 468, -1000, 667, -1000, -1000,
	-1000, 12036, -51, 870, -1000, -1000, -1000, -1000, 662, -1000,
	-1000, -1000, -1000, -1000, -1000, -20, 356, -20, 304, -1000,
	299, 3435, -1000, -1000, -1000, -1000, 795, -1000, 4224, -1000,
	-1000, 661, -1000, -1000, -1000, 854, 550, -1000, 1509, -1000,
	-1000, 103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7772, 7772, -1000, 7772, 7772, -1000, 7772, 7772, -1000,
	7772, 7772, 7772, 392, 354, 200, 7772, 7772, 804, -1000,
	655, -1000, -1000, 692, 12036, 12036, -1000, 12036, 841, -1000,
	200, 200, 12036, 200, 12036, 12036, 12036, 8721, -1000, 134,
	12036, -1000, 463, -1000, 206, -1000, -151, 502, 119, -1000,
	119, 487, 480, -1000, 655, 549, -1000, 193, 12036, 849,
	844, -1000, -1000, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
	1667, 37, -1000, -1000, 1667, 1667, 869, -1000, 655, -1000,
	614, 123, -1000, -1000, -1000, 451, 448, 448, 448, 143,
	134, -1000, 330, 192, 353, -1000, 44, 12036, 276, 797,
	-1000, 794, 659, -1000, -1000, -1000, -1000, -1000, 30, 4224,
	3172, 445, -1000, 7040, 7040, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 392, 40, -183, -1000, -1000, 12506, 547,
	392, 12036, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 291,
	-1000, -1000, 12271, -1000, -1000, 345, -1000, -1000, 469, 415,
	-1000, 12036, -1000, -1000, 697, 200, 545, -1000, 763, -177,
	-187, 490, -1000, -1000, -1000, 658, -1000, -1000, -1000, 30,
	775, -179, -1000, 762, -1000, 12036, -1000, 27, -1000, -180,
	390, 24, -185, 693, 655, -188, 617, -1000, 861, 7284,
	-1000, -1000, 866, 155, 155, 1667, 392, -1000, -1000, -1000,
	53, 303, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1071, 25, 421, 1070, 1069, 1066, 1065, 1064, 1062,
	1061, 1060, 1058, 1055, 1052, 1051, 1050, 1049, 1047, 1046,
	1045, 1044, 1043, 1040, 1039, 1037, 97, 1036, 1035, 1034,
	76, 1032, 70, 1031, 1030, 46, 157, 49, 45, 92,
	1029, 37, 69, 61, 1028, 38, 1027, 1026, 73, 1016,
	53, 1013, 1012, 47, 1009, 1007, 11, 34, 1006, 1005,
	1004, 1002, 99, 1134, 1001, 1000, 999, 997, 996, 995,
	56, 7, 14, 33, 18, 994, 96, 6, 993, 54,
	992, 991, 990, 989, 16, 987, 58, 986, 19, 57,
	984, 9, 66, 35, 21, 5, 71, 60, 983, 22,
	63, 50, 982, 980, 456, 979, 978, 42, 977, 976,
	23, 165, 382, 975, 974, 973, 971, 44, 0, 736,
	261, 65, 970, 969, 967, 1740, 64, 52, 17, 966,
	55, 1021, 40, 964, 963, 41, 960, 958, 953, 951,
	949, 947, 946, 30, 944, 942, 940, 29, 20, 939,
	936, 59, 24, 935, 933, 932, 48, 62, 931, 930,
	51, 27, 929, 921, 915, 911, 910, 31, 12, 909,
	15, 908, 8, 907, 28, 906, 4, 903, 10, 902,
	3, 901, 13, 43, 1, 900, 2, 894, 887, 323,
	735, 885, 883, 81,
}
var yyR1 = [...]int{

	0, 187, 188, 188, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 191, 191, 48, 48, 92, 92, 10, 10, 10,
	10, 97, 97, 101, 101, 101, 102, 102, 102, 102,
	133, 133, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 181, 180, 180, 179, 179, 178, 17, 163, 165,
	165, 164, 164, 164, 164, 157, 136, 136, 136, 136,
	139, 139, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 142,
	142, 142, 156, 156, 143, 143, 151, 151, 152, 152,
	152, 149, 149, 150, 150, 153, 153, 153, 144, 144,
	144, 144, 144, 144, 144, 144, 146, 146, 146, 154,
	154, 147, 147, 147, 148, 148, 148, 155, 155, 155,
	155, 155, 145, 145, 158, 158, 173, 173, 172, 172,
	172, 162, 162, 169, 169, 169, 169, 169, 160, 160,
	161, 161, 171, 171, 170, 159, 159, 174, 174, 174,
	174, 185, 186, 184, 184, 184, 184, 184, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 177, 175, 175, 176, 176, 13, 18, 18, 14,
	14, 14, 14, 14, 15, 15, 19, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 108, 108,
	106, 106, 109, 109, 107, 107, 107, 110, 110, 110,
	134, 134, 134, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 16, 192, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 122,
	122, 122, 121, 121, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 55, 55, 91, 91, 93, 93,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	129, 129, 128, 128, 128, 127, 127, 49, 49, 49,
	51, 50, 50, 50, 50, 52, 52, 54, 54, 53,
	53, 56, 56, 56, 56, 57, 57, 39, 39, 39,
	39, 39, 39, 39, 105, 105, 59, 59, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 69, 69,
	69, 69, 69, 69, 60, 60, 60, 60, 60, 60,
	60, 35, 35, 70, 70, 70, 76, 71, 71, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 67, 67, 67, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 193, 193, 68, 68, 68, 68, 33, 33, 33,
	33, 33, 132, 132, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 80, 80, 34,
	34, 78, 78, 79, 81, 81, 77, 77, 77, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	82, 82, 83, 83, 84, 84, 85, 85, 86, 87,
	87, 87, 88, 88, 88, 88, 89, 89, 89, 61,
	61, 61, 61, 61, 61, 90, 90, 90, 90, 94,
	94, 72, 72, 74, 74, 73, 75, 95, 95, 99,
	96, 96, 100, 100, 100, 100, 98, 98, 98, 124,
	124, 124, 103, 103, 111, 111, 112, 112, 104, 104,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	114, 114, 114, 115, 115, 116, 116, 116, 123, 123,
	119, 119, 120, 120, 125, 125, 126, 126, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 189, 190, 130, 131,
	131, 131,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 4, 2, 0, 3, 5, 0,
	1, 0, 3, 3, 0, 2, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 7, 5, 5, 5, 12, 7,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 2,
	2, 2, 2, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 4, 4, 4, 4, 4, 4, 8,
	8, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -187, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -189, 8, 251, 54, -188, 268, -84, 15, -28,
	5, -26, -192, -26, -26, -26, -26, -26, -163, -165,
	54, 90, -116, 125, 72, 243, 122, 123, 129, -119,
	57, -118, 261, 135, 162, 173, 167, 194, 186, 136,
	184, 187, 230, 214, 225, 66, 165, 239, 145, 182,
	178, 176, 27, 227, 199, 266, 177, 226, 121, 138,
	133, 200, 204, 231, 171, 172, 233, 198, 134, 33,
	263, 35, 153, 234, 202, 197, 193, 196, 170, 192,
	39, 206, 205, 207, 229, 189, 139, 179, 18, 237,
	148, 151, 228, 201, 203, 130, 155, 265, 235, 175,
	140, 152, 147, 238, 141, 166, 232, 241, 38, 211,
	169, 132, 163, 159, 216, 190, 154, 180, 181, 195,
	168, 191, 164, 156, 149, 240, 212, 267, 188, 185,
	160, 157, 158, 217, 218, 219, 220, 221, 222, 161,
	264, 236, 183, 213, -104, 125, 220, 127, 123, 123,
	124, 125, 243, 122, 123, -53, -125, 57, -118, 125,
	123, 108, 187, 230, 115, 215, 227, 124, 33, 228,
	155, -134, 123, -106, 214, 217, 218, 219, 222, 220,
	161, 57, 232, 231, 223, -125, 164, -130, -130, -130,
	-130, -130, 216, 216, -130, -2, -88, 17, 16, -5,
	-3, -189, 6, 20, 21, -32, 40, 41, -27, -38,
	99, -39, -125, -58, 74, -63, 29, 57, -118, 23,
	-62, -59, -77, -75, -76, 108, 109, 110, 97, 98,
	105, 75, 111, -67, -65, -66, -68, 59, 58, 67,
	60, 61, 62, 63, 68, 69, 70, -119, -73, -189,
	44, 45, 252, 253, 254, 255, 260, 256, 77, 34,
	242, 250, 249, 248, 246, 247, 244, 245, 258, 259,
	128, 243, 103, 251, -104, -104, 11, -48, -53, -96,
	-133, 164, -100, 232, 231, -120, -98, -119, -117, 230,
	187, 229, 120, 73, 22, 24, 209, 76, 108, 16,
	77, 107, 252, 115, 48, 244, 245, 242, 254, 255,
	243, 215, 29, 10, 25, 143, 21, 101, 117, 80,
	81, 146, 23, 144, 70, 19, 51, 11, 13, 14,
	128, 127, 92, 124, 46, 8, 111, 26, 89, 42,
	28, 44, 90, 17, 246, 247, 31, 260, 150, 103,
	49, 36, 74, 68, 71, 52, 72, 15, 47, 91,
	118, 251, 45, 122, 6, 257, 30, 142, 43, 123,
	79, 258, 259, 126, 69, 5, 129, 32, 9, 50,
	53, 248, 249, 250, 34, 78, 12, -164, 90, -157,
	57, -53, 124, -53, 251, -112, 128, -112, -112, 123,
	-53, 115, 117, 120, 52, -18, -53, -111, 128, 57,
	-111, -111, -111, -53, 112, -53, 57, 30, -131, -189,
	-120, 243, 57, 155, 123, 156, 125, -131, -131, -131,
	-131, 159, 160, -131, -109, -108, 225, 226, 216, 224,
	12, 216, 158, -131, -130, -130, -190, 56, -89, 19,
	31, -39, -125, -85, -86, -39, -84, -2, -26, 36,
	-30, 21, 65, 11, -122, 73, 72, 89, -121, 22,
	-119, 59, 112, -39, -60, 92, 74, 90, 91, 76,
	94, 93, 104, 97, 98, 99, 100, 101, 102, 103,
	95, 96, 107, 82, 83, 84, 85, 86, 87, 88,
	-105, -189, -76, -189, 113, 114, -63, -63, -63, -63,
	-63, -63, -63, -63, -189, -2, -71, -39, -189, -189,
	-189, -189, -189, -189, -189, -189, -189, -80, -39, -189,
	-193, -189, -193, -189, -193, -189, -193, -189, -193, -189,
	-193, -189, -193, -193, -189, -189, -189, -189, -189, -189,
	-189, -54, 26, -53, -41, -42, -43, -44, -55, -76,
	-189, -53, -53, -48, -191, 55, 11, 53, 55, -96,
	164, -97, -101, 233, 235, 82, -124, -119, 59, 29,
	30, 56, 55, -53, -136, -139, -141, -140, -142, -137,
	-138, 184, 185, 108, 188, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 30, 145, 180, 181, 182,
	183, 200, 201, 202, 203, 204, 205, 206, 207, 167,
	168, 169, 170, 171, 172, 173, 175, 176, 177, 178,
	179, 57, -131, 125, 57, 74, 57, -53, -53, -131,
	157, 157, 123, 123, -53, 55, 126, -48, 23, 52,
	-53, 57, 57, -126, -125, -117, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, 11, -107, 11, 92,
	-39, 52, 9, 92, 55, 18, 112, 55, -87, 24,
	25, -88, -190, -32, -64, -119, 60, 63, -31, 43,
	-53, -39, -39, -69, 68, 74, 69, 70, -121, 99,
	-126, -120, -117, -63, -70, -73, -76, 64, 92, 90,
	91, 76, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -132, 57, 59,
	57, -62, -62, -119, -37, 21, -36, -38, -190, 55,
	-190, -2, -36, -36, -39, -39, -77, 59, -119, -125,
	-77, 59, -36, -30, -78, -79, 78, -77, -63, -190,
	-63, -63, -63, -63, -63, -119, -119, -36, -37, -36,
	-36, -92, 151, -53, 30, 55, -49, -51, -50, -52,
	42, 46, 48, 43, 44, 45, 49, -129, 22, -41,
	-189, -128, 151, -127, 22, -125, 59, -92, 53, -41,
	-53, -100, -97, 55, 234, 236, 237, 52, 71, -39,
	-148, 107, -166, -167, -168, -120, 59, 60, -157, -158,
	-159, -169, 137, -174, 130, 132, 129, -160, 138, 124,
	28, 56, -153, 68, 74, -149, 212, -143, 54, -143,
	-143, -143, -143, -147, 187, -147, -147, -147, 54, 54,
	-143, -143, -143, -151, 54, -151, -151, -152, 54, -152,
	-123, 53, -53, -131, 23, -131, -113, 120, 117, 118,
	-177, 116, 209, 187, 66, 29, 15, 252, 151, 267,
	57, 152, -119, -119, -53, -53, 120, 117, -53, -53,
	-53, -131, -53, -110, 90, 12, -125, -125, -53, 38,
	-39, -39, -126, -86, -89, -103, 19, 11, 34, 34,
	-36, 68, 69, 70, 112, -189, -70, -63, -63, -63,
	-35, 146, 73, -190, -190, -36, 55, -39, -190, -190,
	-190, 55, 53, 22, 55, 11, 55, 11, 112, 55,
	11, 55, 11, -190, -36, -81, -79, 80, -39, -190,
	-190, -190, -190, -190, -190, -190, 55, 55, -190, -190,
	-190, -190, -61, 30, 34, -2, -189, -189, -95, -99,
	-77, -42, -43, -43, -42, -43, 42, 42, 42, 47,
	42, 47, 42, -50, -125, -190, -56, 50, 127, 51,
	-189, -127, -57, 12, -41, -57, -101, -102, 238, 235,
	241, 57, 59, 55, -168, 82, 54, 57, 28, -160,
	-160, -161, 57, -161, 28, -144, 29, 68, -150, 213,
	60, -147, -147, -148, 30, -148, -148, -148, -156, 59,
	-156, 60, 60, 52, -119, -131, -130, -183, 131, 137,
	138, 133, 57, 124, 28, 130, 132, 151, 129, -183,
	-114, -115, 126, 22, 124, 28, 151, -182, 53, 157,
	157, 126, -131, -107, 59, -39, 39, 112, -53, -40,
	11, 99, -120, -37, -35, 73, -63, -63, -190, -38,
	-135, 108, 184, 145, 182, 178, 198, 189, 211, 180,
	212, -132, -135, -63, -63, -63, -63, -120, -63, -63,
	-63, -63, 261, -84, 81, -39, 79, -63, -63, -94,
	52, -95, -72, -74, -73, -189, -2, -90, -119, -93,
	-119, -57, 55, 82, -46, -45, 52, 53, -47, 52,
	-45, 42, 42, 124, 124, 124, -93, -84, -39, -57,
	235, 239, 240, -167, -168, -171, -170, -119, -174, -161,
	-161, 54, -146, 52, 59, 60, 61, 68, 242, 67,
	56, -148, -148, 57, 108, 56, 55, 56, 55, 56,
	55, -53, -130, -130, -53, -130, -119, -180, 264, -181,
	57, -119, -119, -53, -110, -57, -41, -190, -63, -190,
	-143, -143, -143, -152, -143, 172, -143, 172, -190, -190,
	-190, 55, 19, -190, 55, 19, -190, 55, 19, -190,
	55, 19, -189, -34, 257, -39, 55, 55, 27, -94,
	55, -190, -190, -190, 55, 112, -190, 55, -84, -99,
	-39, -39, 54, -39, -189, -189, -189, -190, -88, 56,
	55, -143, -91, -119, -154, 209, 9, 54, -147, 59,
	-147, 60, 60, -131, 26, -179, -178, -120, 54, -82,
	13, -147, 57, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -190, 59, -63, -63, 28, -74, 34, -2,
	-189, -119, -119, -119, -88, -91, -91, -91, -91, -128,
	-173, -172, 53, 134, 66, -170, 56, 55, -155, 130,
	28, 129, 242, 56, -148, -148, 56, 56, -189, 55,
	82, -91, -83, 14, 16, -190, -190, -190, -190, -190,
	-190, -190, -190, -33, 92, 264, -190, -190, 9, -72,
	-2, 112, 56, -190, -190, -190, -56, -172, 57, -162,
	82, 59, 140, -119, -145, 66, 28, 28, 54, -175,
	-176, 151, -178, -168, 56, -39, -71, -190, 262, 49,
	265, -95, -190, -119, 60, -53, 59, 56, -190, 55,
	-119, -182, 39, 263, 266, 54, -176, 34, -180, 39,
	-91, 153, 264, 56, 154, 265, -185, -186, 52, -189,
	266, -186, 52, 10, 9, -63, 150, -184, 141, 136,
	139, 30, -184, -190, -190, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 564, 0, 317, 317, 317, 317, 317, 317,
	0, 635, 618, 0, 0, 0, 0, -2, 304, 305,
	0, 307, 308, 858, 858, 858, 858, 858, 0, 0,
	858, 0, 35, 36, 856, 1, 3, 572, 0, 0,
	321, 324, 319, 0, 618, 618, 0, 0, 62, 63,
	0, 0, 0, 842, 0, 616, 616, 616, 636, 637,
	640, 641, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 0, 0, 0, 619, 0, 614,
	0, 614, 614, 614, 0, 255, 389, 644, 645, 842,
	0, 0, 0, 859, 0, 859, 267, 859, 859, 270,
	859, 0, 859, 0, 277, 279, 280, 281, 282, 0,
	286, 859, 301, 302, 291, 303, 306, 309, 310, 311,
	312, 313, 858, 858, 316, 29, 576, 0, 0, 564,
	31, 0, 317, 322, 323, 327, 325, 326, 318, 0,
	335, 339, 0, 397, 0, 402, 404, -2, -2, 0,
	439, 440, 441, 442, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 468, 469, 470, 549, 550, 551,
	552, 553, 554, 555, 556, 406, 407, 546, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 0,
	511, 511, 511, 511, 511, 511, 511, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 47,
	0, 833, 600, -2, -2, 0, 0, 642, 643, -2,
	752, -2, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 0, 0, 81,
	0, 79, 0, 859, 0, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 256, 859, 859, 259, 860,
	861, 859, 859, 859, 859, 859, 859, 266, 268, 269,
	271, 859, 859, 273, 0, 294, 292, 293, 288, 289,
	0, 283, 284, 287, 314, 315, 30, 857, 24, 0,
	0, 573, 0, 565, 566, 569, 572, 29, 324, 0,
	329, 328, 320, 0, 336, 0, 0, 0, 340, 0,
	342, 343, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 425, 426, 427, 428, 429, 430,
	403, 0, 417, 0, 0, 0, 459, 460, 461, 462,
	463, 464, 465, 0, 331, 29, 0, 437, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 538, 0,
	495, 0, 496, 0, 497, 0, 498, 0, 499, 0,
	500, 0, 501, 502, 0, 0, 0, 0, 331, 0,
	0, 45, 0, 388, 0, 346, 348, 349, 350, -2,
	0, 372, -2, 0, 0, 0, 41, 42, 0, 48,
	833, 50, 51, 0, 0, 0, 164, 609, 610, 611,
	607, 208, 0, 0, 145, 141, 87, 88, 89, 134,
	91, 134, 134, 134, 134, 161, 161, 161, 161, 117,
	118, 119, 120, 121, 0, 0, 104, 134, 134, 134,
	108, 124, 125, 126, 127, 128, 129, 130, 131, 92,
	93, 94, 95, 96, 97, 98, 136, 136, 136, 138,
	138, 638, 65, 0, 859, 0, 859, 77, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 249, 615, 0,
	859, 252, 253, 390, 646, 647, 257, 258, 260, 261,
	262, 263, 264, 265, 272, 276, 0, 297, 0, 0,
	278, 0, 577, 0, 0, 0, 0, 0, 568, 570,
	571, 576, 32, 327, 0, 557, 0, 0, 0, 330,
	27, 398, 399, 401, 418, 0, 420, 422, 341, 337,
	0, 547, -2, 408, 409, 433, 434, 435, 0, 0,
	0, 0, 431, 413, 0, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 458, 522, 523,
	0, 456, 457, 466, 0, 0, 332, 333, 436, 0,
	595, 29, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 0, 0, 544, 541, 0, 0, 0, 512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 0, 0, 0, 0, 0, 0,
	377, 0, 0, 380, 0, 0, 0, 0, 371, 0,
	0, 391, 802, 373, 0, 375, 376, 395, 0, 395,
	44, 601, 49, 0, 0, 54, 55, 602, 603, 604,
	605, 0, 78, 209, 211, 214, 215, 216, 82, 83,
	84, 0, 0, 196, 0, 0, 190, 190, 0, 188,
	189, 80, 148, 146, 0, 143, 142, 90, 0, 161,
	161, 111, 112, 164, 0, 164, 164, 164, 0, 0,
	105, 106, 107, 99, 0, 100, 101, 102, 0, 103,
	0, 0, 859, 67, 617, 68, 858, 0, 0, 630,
	223, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 0, 69, 225, 227, 226, 0, 0, 0, 247,
	859, 251, 294, 275, 0, 0, 295, 296, 285, 0,
	574, 575, 0, 567, 25, 0, 612, 613, 558, 559,
	344, 419, 421, 423, 0, 331, 410, 431, 414, 0,
	411, 0, 0, 405, 471, 0, 0, 438, -2, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 0, 542, 0, 0, 494,
	503, 504, 505, 506, 507, 508, 0, 0, 513, 514,
	515, 516, 589, 0, 0, -2, 0, 0, 395, 597,
	0, 347, 366, 368, 0, 363, 378, 379, 381, 0,
	383, 0, 385, 386, 351, 353, 354, 0, 0, 0,
	0, 374, 564, 0, 395, 40, 52, 53, 0, 0,
	59, 165, 166, 0, 212, 0, 0, 0, 183, 190,
	190, 186, 191, 187, 0, 156, 0, 147, 86, 144,
	0, 164, 164, 113, 0, 114, 115, 116, 0, 132,
	0, 0, 0, 0, 639, 66, 217, 858, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 858,
	0, 858, 631, 632, 633, 634, 0, 72, 0, 0,
	0, 0, 250, 297, 298, 299, 578, 0, 26, 395,
	0, 338, 548, 0, 412, 0, 432, 415, 472, 334,
	0, 134, 134, 527, 134, 138, 530, 134, 532, 134,
	535, 0, 0, 0, 0, 0, 0, 547, 0, 0,
	0, 0, 0, 539, 493, 545, 0, 0, 0, 33,
	0, 589, 579, 591, 593, 0, 29, 0, 585, 0,
	358, 564, 0, 0, 360, 367, 0, 0, 361, 0,
	362, 382, 384, 0, 0, 0, 0, 572, 396, 39,
	56, 57, 58, 210, 213, 0, 192, 134, 195, 184,
	185, 0, 159, 0, 149, 150, 151, 152, 153, 155,
	135, 109, 110, 162, 163, 161, 0, 161, 0, 139,
	0, 859, 218, 219, 220, 221, 0, 224, 0, 70,
	71, 0, 229, 248, 274, 560, 345, 473, 416, 476,
	524, 161, 528, 529, 531, 533, 534, 536, 478, 477,
	479, 0, 0, 485, 0, 0, 482, 0, 0, 488,
	0, 0, 0, 0, 0, 543, 0, 0, 0, 34,
	0, 594, -2, 0, 0, 0, 46, 0, 572, 598,
	599, 364, 0, 369, 0, 0, 0, 372, 38, 175,
	0, 194, 0, 356, 167, 160, 0, 0, 164, 133,
	164, 0, 0, 64, 0, 73, 74, 0, 0, 562,
	0, 525, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 517, 492, 540, 0, 0, 0, 592, 0, -2,
	0, 587, 586, 359, 37, 0, 0, 0, 0, 391,
	174, 176, 0, 181, 0, 193, 0, 0, 172, 0,
	169, 171, 157, 154, 122, 123, 137, 140, 0, 0,
	0, 0, 28, 0, 0, 480, 481, 486, 487, 483,
	484, 489, 490, 0, 0, 0, 509, 510, 0, 582,
	29, 0, 365, 392, 393, 394, 355, 177, 178, 0,
	182, 180, 0, 357, 85, 0, 168, 170, 0, 0,
	242, 0, 75, 76, 69, 563, 561, 491, 0, 0,
	0, 590, -2, 588, 179, 0, 173, 158, 241, 0,
	0, 72, 518, 0, 521, 0, 243, 0, 228, 519,
	0, 0, 0, 197, 0, 0, 198, 199, 0, 0,
	520, 200, 0, 0, 0, 0, 0, 201, 203, 204,
	0, 0, 202, 244, 245, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 268,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:346
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:352
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:404
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:416
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:438
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:458
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:462
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:466
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:471
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:475
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:523
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:527
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:562
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:584
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:594
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:599
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:645
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:664
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:670
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:894
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:898
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:903
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:907
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:919
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:933
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:942
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:965
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:977
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:989
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1077
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1081
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1101
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1167
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1179
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1190
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1202
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1208
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1285
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1297
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1302
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1375
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1391
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1395
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1411
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1419
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1427
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1432
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1535
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1540
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1558
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = "full "
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1652
		{
			yyVAL.showFilter = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = SessionStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = GlobalStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Commit{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Rollback{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1842
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1915
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1972
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2080
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2084
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2088
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2092
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2097
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2101
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2111
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = IsNullStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = IsNotNullStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = IsTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = IsNotTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = IsFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = IsNotFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = EqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = LessThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = GreaterThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.str = LessEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2241
		{
			yyVAL.str = GreaterEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.str = NotEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2249
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2284
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: nil}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = ""
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = BooleanModeStr
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = QueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = string("")
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2750
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2760
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2783
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &NullVal{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2841
		{
			yyVAL.exprs = nil
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2859
		{
			yyVAL.orderBy = nil
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2873
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2884
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.str = AscScr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = DescScr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2897
		{
			yyVAL.limit = nil
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2905
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2914
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			yyVAL.str = ForUpdateStr
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = ShareModeStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2948
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2952
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2956
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2975
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2980
		{
			yyVAL.updateExprs = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2984
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3036
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.bytes = []byte("charset")
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = &Default{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3095
		{
			yyVAL.byt = 0
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3097
		{
			yyVAL.byt = 1
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3105
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.str = IgnoreStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3132
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3149
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3152
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3429
		{
			decNesting(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3434
		{
			skipToEnd(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3439
		{
			skipToEnd(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			skipToEnd(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

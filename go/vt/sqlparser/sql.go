// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const SEQUENCE = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 301,
	160, 301,
	-2, 291,
	-1, 271,
	112, 641,
	-2, 637,
	-1, 272,
	112, 642,
	-2, 638,
	-1, 340,
	82, 817,
	-2, 63,
	-1, 341,
	82, 772,
	-2, 64,
	-1, 346,
	82, 751,
	-2, 603,
	-1, 348,
	82, 793,
	-2, 605,
	-1, 618,
	1, 353,
	5, 353,
	12, 353,
	13, 353,
	14, 353,
	15, 353,
	17, 353,
	19, 353,
	30, 353,
	31, 353,
	42, 353,
	43, 353,
	44, 353,
	45, 353,
	46, 353,
	48, 353,
	49, 353,
	52, 353,
	53, 353,
	55, 353,
	56, 353,
	270, 353,
	-2, 371,
	-1, 621,
	53, 44,
	55, 44,
	-2, 48,
	-1, 767,
	112, 644,
	-2, 640,
	-1, 995,
	5, 30,
	-2, 438,
	-1, 1025,
	5, 29,
	-2, 577,
	-1, 1269,
	5, 30,
	-2, 578,
	-1, 1322,
	5, 29,
	-2, 580,
	-1, 1400,
	5, 30,
	-2, 581,
}

const yyPrivate = 57344

const yyLast = 12951

var yyAct = [...]int{

	272, 1434, 1424, 1231, 825, 1119, 574, 1388, 276, 1028,
	1046, 1334, 880, 289, 909, 250, 1302, 1171, 573, 3,
	475, 57, 1172, 1205, 302, 1029, 1168, 853, 923, 960,
	851, 889, 81, 879, 1143, 1184, 211, 1073, 1178, 211,
	792, 987, 345, 876, 1289, 718, 1099, 1090, 799, 1052,
	893, 855, 614, 802, 732, 634, 840, 820, 769, 506,
	512, 303, 51, 919, 633, 446, 334, 211, 81, 801,
	249, 339, 211, 274, 211, 518, 526, 259, 833, 336,
	623, 331, 588, 56, 615, 1427, 1411, 1422, 1398, 589,
	1419, 1232, 241, 1410, 1397, 1160, 1261, 903, 451, 1363,
	539, 538, 548, 549, 541, 542, 543, 544, 545, 546,
	547, 540, 479, 51, 550, 1199, 1061, 263, 635, 1060,
	636, 255, 1062, 1200, 1201, 314, 870, 320, 321, 318,
	319, 317, 316, 315, 198, 61, 200, 242, 243, 244,
	245, 322, 323, 248, 206, 202, 203, 204, 871, 872,
	496, 247, 500, 246, 1081, 1144, 902, 1292, 497, 494,
	495, 63, 64, 65, 66, 67, 910, 1309, 1121, 1252,
	1250, 240, 489, 490, 707, 706, 1123, 704, 481, 1421,
	483, 1418, 1389, 1118, 834, 1438, 1381, 894, 464, 1442,
	1335, 1343, 1146, 1047, 1049, 465, 453, 200, 1124, 211,
	711, 1115, 211, 1337, 697, 896, 896, 1117, 211, 705,
	480, 482, 499, 708, 211, 896, 1194, 81, 1193, 81,
	81, 1122, 81, 81, 1192, 81, 1148, 81, 1152, 449,
	1147, 199, 1145, 877, 1074, 447, 81, 1150, 456, 484,
	485, 213, 486, 487, 201, 488, 1149, 491, 954, 1004,
	1370, 953, 1001, 1272, 504, 1217, 501, 1130, 461, 1151,
	1153, 562, 563, 1057, 1014, 981, 81, 205, 741, 629,
	1048, 1336, 530, 1364, 515, 514, 471, 550, 476, 540,
	476, 476, 550, 476, 476, 866, 476, 738, 476, 447,
	525, 1436, 1344, 1342, 1437, 1000, 1435, 476, 910, 1379,
	478, 895, 895, 1116, 1352, 1114, 1218, 892, 890, 1396,
	891, 895, 962, 278, 70, 888, 894, 51, 523, 1182,
	1106, 458, 445, 459, 637, 1162, 460, 776, 821, 211,
	211, 211, 559, 733, 525, 561, 524, 523, 81, 502,
	503, 774, 775, 773, 81, 524, 523, 1079, 699, 1104,
	71, 562, 563, 525, 562, 563, 821, 1258, 1011, 1384,
	613, 520, 525, 572, 54, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 772, 587, 590, 590, 590, 596,
	590, 590, 596, 590, 604, 605, 606, 607, 608, 609,
	961, 619, 516, 467, 468, 469, 1402, 1298, 591, 593,
	595, 597, 599, 601, 602, 592, 594, 1297, 598, 600,
	452, 603, 622, 627, 734, 1094, 1105, 631, 1093, 1082,
	899, 1110, 1107, 1100, 1108, 1103, 900, 1443, 477, 1101,
	1102, 539, 538, 548, 549, 541, 542, 543, 544, 545,
	546, 547, 540, 1109, 1404, 550, 211, 524, 523, 22,
	999, 81, 998, 793, 1164, 794, 211, 211, 81, 744,
	745, 740, 211, 269, 525, 211, 1444, 1380, 211, 524,
	523, 696, 211, 1316, 81, 81, 1295, 1127, 703, 81,
	81, 81, 211, 81, 81, 1091, 525, 454, 455, 197,
	81, 81, 1340, 1420, 721, 722, 342, 1377, 739, 723,
	724, 725, 1234, 727, 728, 1406, 505, 524, 523, 254,
	729, 730, 476, 1074, 720, 524, 523, 1069, 81, 476,
	747, 1063, 211, 1064, 525, 759, 761, 762, 81, 795,
	746, 760, 525, 1340, 1392, 476, 476, 978, 979, 980,
	476, 476, 476, 717, 476, 476, 712, 1340, 505, 1340,
	1371, 476, 476, 716, 328, 329, 1340, 1339, 770, 700,
	539, 538, 548, 549, 541, 542, 543, 544, 545, 546,
	547, 540, 81, 767, 550, 698, 765, 695, 803, 805,
	543, 544, 545, 546, 547, 540, 473, 560, 550, 466,
	811, 814, 1287, 1286, 748, 806, 822, 505, 292, 291,
	294, 295, 296, 297, 763, 81, 81, 293, 298, 1274,
	505, 1349, 211, 988, 1271, 505, 1224, 1223, 1220, 1221,
	211, 211, 24, 51, 211, 211, 1220, 1219, 211, 211,
	211, 81, 993, 505, 837, 505, 796, 797, 576, 804,
	505, 644, 643, 618, 81, 1348, 1023, 807, 808, 625,
	1024, 813, 816, 817, 861, 24, 830, 1214, 863, 897,
	818, 541, 542, 543, 544, 545, 546, 547, 540, 1133,
	54, 550, 720, 911, 912, 913, 829, 1053, 831, 832,
	625, 852, 1053, 1321, 1169, 619, 58, 1181, 860, 619,
	624, 626, 836, 628, 1181, 864, 804, 868, 211, 81,
	859, 81, 867, 54, 54, 81, 81, 211, 211, 211,
	884, 211, 211, 993, 1267, 211, 81, 837, 1351, 929,
	837, 931, 626, 925, 624, 1181, 993, 837, 1222, 1065,
	869, 1017, 211, 24, 211, 211, 958, 211, 1016, 993,
	624, 630, 742, 564, 565, 566, 567, 568, 569, 570,
	571, 905, 906, 907, 908, 921, 922, 710, 1412, 256,
	476, 1304, 476, 904, 1279, 924, 342, 916, 917, 918,
	1210, 1068, 842, 845, 846, 847, 843, 476, 844, 848,
	920, 54, 1185, 1186, 767, 1185, 1186, 969, 842, 845,
	846, 847, 843, 915, 844, 848, 914, 1120, 770, 1429,
	990, 1305, 927, 970, 991, 1416, 971, 54, 1425, 1212,
	1188, 995, 996, 997, 1169, 1095, 736, 714, 1003, 301,
	1040, 1006, 1007, 977, 1038, 1041, 754, 1013, 982, 1039,
	1191, 1015, 983, 1190, 1018, 1019, 1020, 1021, 211, 211,
	211, 211, 211, 1037, 1036, 1030, 1042, 771, 846, 847,
	211, 79, 1025, 211, 260, 261, 1045, 211, 1409, 1129,
	966, 211, 1414, 519, 976, 975, 1086, 507, 642, 474,
	992, 806, 1078, 1386, 1385, 1319, 1265, 1010, 517, 508,
	81, 1076, 1070, 1300, 930, 713, 850, 344, 1008, 519,
	1031, 1054, 1066, 1034, 251, 1026, 1027, 1357, 620, 619,
	619, 619, 619, 619, 974, 1043, 257, 258, 1051, 1356,
	252, 1055, 973, 1056, 852, 58, 1050, 1307, 1053, 498,
	1083, 1084, 619, 1032, 1033, 1058, 1035, 1005, 81, 81,
	1002, 1075, 731, 618, 208, 1431, 1430, 618, 521, 1431,
	1367, 618, 1071, 1072, 1293, 737, 60, 62, 55, 1097,
	1, 1423, 1233, 1085, 1301, 1087, 1088, 1089, 81, 766,
	936, 1387, 1333, 1092, 1204, 333, 887, 878, 69, 444,
	448, 68, 450, 211, 1378, 886, 885, 1341, 1125, 1291,
	898, 1111, 81, 1080, 901, 1211, 1077, 1383, 650, 648,
	476, 649, 647, 652, 651, 646, 768, 1141, 225, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 1126, 337, 849, 638, 926, 476,
	522, 72, 1113, 1112, 932, 1098, 1137, 81, 81, 492,
	1161, 1136, 1030, 1170, 493, 1155, 344, 227, 344, 344,
	1154, 344, 344, 558, 344, 1175, 344, 1142, 972, 1173,
	1059, 81, 343, 1176, 826, 344, 743, 767, 511, 342,
	969, 1355, 1306, 1009, 585, 819, 81, 277, 81, 81,
	1189, 758, 881, 290, 1196, 287, 288, 749, 1180, 1022,
	1203, 532, 275, 267, 617, 528, 1174, 771, 51, 1195,
	610, 841, 839, 838, 332, 1187, 211, 457, 1183, 1202,
	463, 1207, 616, 1132, 1198, 1260, 470, 1362, 753, 1208,
	1209, 26, 472, 211, 59, 262, 19, 18, 17, 81,
	20, 16, 81, 81, 81, 211, 265, 1215, 1216, 15,
	14, 81, 462, 30, 211, 21, 13, 12, 11, 10,
	9, 1242, 8, 7, 6, 5, 4, 253, 1244, 23,
	2, 618, 618, 618, 618, 618, 1239, 344, 0, 1253,
	1254, 0, 0, 639, 1241, 0, 618, 0, 0, 0,
	766, 0, 0, 0, 618, 0, 0, 1248, 0, 1268,
	1269, 1270, 1240, 1273, 0, 0, 0, 0, 0, 0,
	1030, 0, 1226, 0, 0, 619, 0, 1266, 0, 0,
	1284, 0, 1275, 81, 1227, 0, 1229, 1276, 0, 0,
	0, 81, 1285, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 0, 81, 612, 0, 621,
	0, 0, 0, 81, 1294, 0, 1296, 0, 984, 985,
	986, 0, 1245, 1246, 0, 1247, 1299, 0, 1249, 0,
	1251, 0, 0, 0, 1281, 1282, 1283, 0, 0, 0,
	0, 1308, 0, 0, 0, 1315, 0, 0, 0, 0,
	344, 0, 81, 81, 0, 81, 0, 344, 0, 0,
	81, 0, 81, 81, 81, 211, 0, 476, 81, 1322,
	1320, 1327, 1173, 344, 344, 0, 0, 0, 344, 344,
	344, 0, 344, 344, 1288, 81, 211, 1345, 881, 344,
	344, 1338, 1332, 0, 0, 1358, 1359, 1360, 1361, 0,
	0, 0, 1365, 1366, 1328, 0, 1329, 1330, 1331, 1174,
	0, 0, 1323, 0, 1372, 1373, 1374, 750, 1346, 1368,
	1347, 81, 1369, 1375, 645, 1376, 1173, 528, 0, 1353,
	344, 0, 81, 81, 701, 702, 0, 0, 0, 0,
	709, 0, 1350, 333, 1394, 1391, 715, 1395, 1390, 0,
	0, 81, 0, 0, 1400, 0, 1030, 1399, 509, 513,
	726, 0, 211, 1174, 0, 51, 0, 0, 0, 0,
	81, 798, 1405, 0, 0, 531, 0, 0, 1408, 0,
	0, 0, 0, 942, 0, 0, 0, 823, 0, 0,
	1135, 0, 1415, 81, 1413, 0, 0, 941, 0, 0,
	755, 0, 0, 0, 827, 828, 1428, 0, 0, 0,
	575, 0, 0, 1439, 0, 0, 0, 1440, 1441, 586,
	0, 0, 0, 1165, 0, 946, 0, 618, 0, 0,
	344, 0, 1139, 1140, 940, 0, 0, 1417, 0, 0,
	0, 0, 0, 344, 0, 1156, 1157, 0, 1158, 1159,
	548, 549, 541, 542, 543, 544, 545, 546, 547, 540,
	1166, 1167, 550, 1426, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 881, 0, 881, 0, 0, 0,
	0, 0, 0, 0, 937, 934, 935, 505, 933, 0,
	835, 0, 0, 235, 0, 0, 0, 0, 344, 0,
	344, 0, 0, 862, 948, 949, 0, 510, 0, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 944,
	947, 0, 1213, 0, 539, 538, 548, 549, 541, 542,
	543, 544, 545, 546, 547, 540, 0, 0, 550, 1135,
	0, 344, 0, 209, 214, 0, 239, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 939, 0, 0, 226,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 335, 0, 928, 0, 938, 209,
	0, 209, 1243, 0, 0, 950, 951, 952, 0, 955,
	956, 224, 0, 957, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 0, 0,
	959, 881, 0, 0, 0, 965, 0, 0, 0, 0,
	0, 0, 943, 0, 215, 0, 0, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 823, 945, 0, 0,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 218, 219, 0, 229, 230, 231, 233, 0,
	232, 238, 0, 0, 0, 220, 223, 0, 216, 237,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 0, 575, 0, 0, 809, 810, 0, 0,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 1310,
	1311, 1312, 1313, 1314, 0, 0, 209, 1317, 1318, 209,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 1096, 344, 539,
	538, 548, 549, 541, 542, 543, 544, 545, 546, 547,
	540, 0, 0, 550, 875, 24, 25, 52, 27, 28,
	0, 0, 0, 0, 0, 0, 1263, 344, 0, 0,
	1303, 881, 0, 0, 43, 0, 0, 0, 0, 29,
	48, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 54, 539, 538, 548, 549, 541, 542,
	543, 544, 545, 546, 547, 540, 0, 0, 550, 0,
	0, 0, 0, 0, 344, 0, 1257, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 1177, 1179, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 209, 0,
	0, 0, 0, 0, 0, 0, 967, 968, 0, 513,
	1179, 1131, 0, 0, 31, 32, 34, 33, 36, 1256,
	50, 0, 0, 0, 0, 344, 0, 344, 1206, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 44, 45, 0, 0, 46, 47, 35, 0,
	539, 538, 548, 549, 541, 542, 543, 544, 545, 546,
	547, 540, 39, 40, 550, 41, 42, 0, 0, 0,
	0, 994, 0, 0, 0, 0, 0, 0, 1230, 0,
	0, 1235, 1236, 1237, 0, 0, 0, 0, 1012, 0,
	344, 0, 0, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 0, 0, 550, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 209,
	0, 0, 209, 0, 1225, 209, 0, 0, 0, 719,
	0, 823, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 1228, 53, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 1238, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 344, 0, 550, 0, 209,
	0, 534, 344, 537, 0, 0, 0, 0, 719, 551,
	552, 553, 554, 555, 556, 557, 0, 535, 536, 533,
	539, 538, 548, 549, 541, 542, 543, 544, 545, 546,
	547, 540, 0, 0, 550, 0, 0, 0, 0, 1128,
	0, 1324, 1325, 0, 1326, 0, 0, 0, 0, 1290,
	266, 1290, 1290, 1290, 0, 266, 266, 1206, 0, 266,
	266, 266, 0, 0, 0, 824, 0, 1255, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 266, 266, 266, 1163, 209,
	0, 0, 0, 0, 0, 0, 0, 209, 857, 0,
	0, 209, 209, 0, 0, 209, 865, 719, 0, 0,
	1382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 344, 0, 0, 0, 0, 0, 0, 0,
	1197, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	1401, 539, 538, 548, 549, 541, 542, 543, 544, 545,
	546, 547, 540, 0, 1354, 550, 0, 0, 0, 1407,
	539, 538, 548, 549, 541, 542, 543, 544, 545, 546,
	547, 540, 0, 989, 550, 209, 0, 0, 0, 0,
	0, 0, 1290, 0, 209, 209, 209, 0, 209, 209,
	0, 0, 209, 539, 538, 548, 549, 541, 542, 543,
	544, 545, 546, 547, 540, 667, 0, 550, 0, 209,
	0, 963, 964, 0, 209, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1403, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 1278, 0, 0, 1280, 538, 548, 549, 541,
	542, 543, 544, 545, 546, 547, 540, 0, 266, 550,
	0, 0, 0, 655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 824, 209, 209, 209, 209, 209,
	668, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	209, 0, 0, 0, 857, 0, 0, 0, 209, 0,
	0, 0, 0, 681, 684, 685, 686, 687, 688, 689,
	0, 690, 691, 692, 693, 694, 669, 670, 671, 672,
	653, 654, 682, 0, 656, 0, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 673, 674, 675, 676,
	677, 678, 679, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1393, 575, 0, 0, 0, 0, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 139, 0, 0, 0, 0, 273, 0, 0,
	0, 103, 0, 270, 0, 0, 0, 120, 313, 122,
	0, 0, 161, 131, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 873, 0, 54, 0,
	0, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	96, 293, 298, 299, 300, 874, 0, 0, 268, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 326, 0, 284,
	209, 0, 279, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 109, 0, 0, 0, 212,
	0, 209, 324, 0, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 177, 0, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 824,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 162, 179, 196, 94,
	0, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 314, 325,
	320, 321, 318, 319, 317, 316, 315, 327, 306, 307,
	308, 309, 311, 0, 322, 323, 310, 82, 89, 121,
	193, 148, 106, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 0, 0,
	0, 80, 0, 882, 883, 824, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 209,
	354, 357, 442, 427, 376, 377, 1067, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 80, 0, 882, 883,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 54, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 0,
	354, 357, 442, 427, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 1134, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 0,
	354, 357, 442, 427, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 866, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 764, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 0,
	354, 357, 442, 427, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 0,
	354, 357, 442, 427, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 347, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 348, 346, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 432,
	421, 0, 392, 435, 370, 384, 443, 385, 386, 414,
	356, 400, 139, 382, 0, 373, 351, 379, 352, 371,
	394, 103, 397, 369, 423, 403, 434, 120, 441, 122,
	408, 0, 161, 131, 0, 0, 396, 425, 398, 419,
	391, 415, 361, 407, 436, 383, 412, 437, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 410, 431, 381, 411, 413, 350, 409, 0,
	354, 357, 442, 427, 376, 377, 0, 0, 0, 0,
	0, 0, 0, 395, 399, 416, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 0, 406, 0, 0,
	0, 358, 355, 0, 0, 393, 0, 0, 0, 360,
	0, 375, 417, 0, 349, 109, 420, 426, 390, 212,
	430, 388, 387, 433, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 424, 372, 380, 99,
	378, 153, 141, 177, 405, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 632,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 347, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 353, 0, 162, 179, 196, 94,
	368, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 348, 346, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 364, 367,
	362, 363, 401, 402, 438, 439, 440, 418, 359, 0,
	365, 366, 0, 422, 428, 429, 404, 82, 89, 121,
	193, 148, 106, 180, 432, 421, 0, 392, 435, 370,
	384, 443, 385, 386, 414, 356, 400, 139, 382, 0,
	373, 351, 379, 352, 371, 394, 103, 397, 369, 423,
	403, 434, 120, 441, 122, 408, 0, 161, 131, 0,
	0, 396, 425, 398, 419, 391, 415, 361, 407, 436,
	383, 412, 437, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 410, 431, 381,
	411, 413, 350, 409, 0, 354, 357, 442, 427, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 395, 399,
	416, 389, 0, 0, 0, 0, 0, 0, 0, 0,
	374, 0, 406, 0, 0, 0, 358, 355, 0, 0,
	393, 0, 0, 0, 360, 0, 375, 417, 0, 349,
	109, 420, 426, 390, 212, 430, 388, 387, 433, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 424, 372, 380, 99, 378, 153, 141, 177, 405,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 338, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 347, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 353,
	0, 162, 179, 196, 94, 368, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	348, 346, 341, 340, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 364, 367, 362, 363, 401, 402, 438,
	439, 440, 418, 359, 0, 365, 366, 0, 422, 428,
	429, 404, 82, 89, 121, 193, 148, 106, 180, 139,
	0, 0, 800, 0, 273, 0, 0, 0, 103, 0,
	270, 0, 0, 0, 120, 313, 122, 0, 0, 161,
	131, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 271, 292,
	291, 294, 295, 296, 297, 0, 0, 96, 293, 298,
	299, 300, 0, 0, 0, 268, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	264, 0, 0, 0, 326, 0, 284, 0, 0, 279,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 324,
	0, 146, 0, 164, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	177, 0, 142, 152, 123, 169, 147, 176, 184, 185,
	166, 183, 192, 158, 84, 165, 175, 97, 156, 86,
	173, 163, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 170, 171, 100, 195, 91, 182, 88, 92,
	181, 136, 168, 174, 130, 127, 87, 172, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 162, 179, 196, 94, 0, 157, 167,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 159, 117, 124, 149, 194,
	140, 154, 98, 178, 160, 314, 325, 320, 321, 318,
	319, 317, 316, 315, 327, 306, 307, 308, 309, 311,
	0, 322, 323, 310, 82, 89, 121, 193, 148, 106,
	180, 139, 0, 0, 0, 0, 273, 0, 0, 0,
	103, 0, 270, 0, 0, 0, 120, 313, 122, 0,
	0, 161, 131, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 505,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 96,
	293, 298, 299, 300, 0, 0, 0, 268, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 326, 0, 284, 0,
	0, 279, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 324, 0, 146, 0, 164, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 177, 0, 142, 152, 123, 169, 147, 176,
	184, 185, 166, 183, 192, 158, 84, 165, 175, 97,
	156, 86, 173, 163, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 170, 171, 100, 195, 91, 182,
	88, 92, 181, 136, 168, 174, 130, 127, 87, 172,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 162, 179, 196, 94, 0,
	157, 167, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 159, 117, 124,
	149, 194, 140, 154, 98, 178, 160, 314, 325, 320,
	321, 318, 319, 317, 316, 315, 327, 306, 307, 308,
	309, 311, 0, 322, 323, 310, 82, 89, 121, 193,
	148, 106, 180, 139, 0, 0, 0, 0, 273, 0,
	0, 0, 103, 0, 270, 0, 0, 0, 120, 313,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 271, 292, 291, 294, 295, 296, 297, 0,
	0, 96, 293, 298, 299, 300, 0, 0, 0, 268,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 264, 0, 0, 0, 326, 0,
	284, 0, 0, 279, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 324, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 314,
	325, 320, 321, 318, 319, 317, 316, 315, 327, 306,
	307, 308, 309, 311, 0, 322, 323, 310, 82, 89,
	121, 193, 148, 106, 180, 139, 0, 0, 0, 0,
	273, 0, 0, 0, 103, 0, 270, 0, 0, 0,
	120, 313, 122, 0, 0, 161, 131, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 271, 292, 815, 294, 295, 296,
	297, 0, 0, 96, 293, 298, 299, 300, 0, 0,
	0, 268, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 264, 0, 0, 0,
	326, 0, 284, 0, 0, 279, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 324, 0, 146, 0, 164,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 177, 0, 142, 152,
	123, 169, 147, 176, 184, 185, 166, 183, 192, 158,
	84, 165, 175, 97, 156, 86, 173, 163, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 170, 171,
	100, 195, 91, 182, 88, 92, 181, 136, 168, 174,
	130, 127, 87, 172, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 162,
	179, 196, 94, 0, 157, 167, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 159, 117, 124, 149, 194, 140, 154, 98, 178,
	160, 314, 325, 320, 321, 318, 319, 317, 316, 315,
	327, 306, 307, 308, 309, 311, 0, 322, 323, 310,
	82, 89, 121, 193, 148, 106, 180, 139, 0, 0,
	0, 0, 273, 0, 0, 0, 103, 0, 270, 0,
	0, 0, 120, 313, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 271, 292, 812, 294,
	295, 296, 297, 0, 0, 96, 293, 298, 299, 300,
	0, 0, 0, 268, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 264, 0,
	0, 0, 326, 0, 284, 0, 0, 279, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 324, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 314, 325, 320, 321, 318, 319, 317,
	316, 315, 327, 306, 307, 308, 309, 311, 24, 322,
	323, 310, 82, 89, 121, 193, 148, 106, 180, 0,
	139, 0, 0, 0, 0, 273, 0, 0, 0, 103,
	0, 270, 0, 0, 0, 120, 313, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 96, 293,
	298, 299, 300, 0, 0, 0, 268, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 326, 0, 284, 0, 0,
	279, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	324, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 314, 325, 320, 321,
	318, 319, 317, 316, 315, 327, 306, 307, 308, 309,
	311, 0, 322, 323, 310, 82, 89, 121, 193, 148,
	106, 180, 139, 0, 0, 0, 0, 273, 0, 0,
	0, 103, 0, 270, 0, 0, 0, 120, 313, 122,
	0, 0, 161, 131, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	96, 293, 298, 299, 300, 0, 0, 0, 268, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 326, 0, 284,
	0, 0, 279, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 324, 0, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 177, 0, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 162, 179, 196, 94,
	0, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 314, 325,
	320, 321, 318, 319, 317, 316, 315, 327, 306, 307,
	308, 309, 311, 0, 322, 323, 310, 82, 89, 121,
	193, 148, 106, 180, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	313, 122, 0, 0, 161, 131, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 271, 292, 291, 294, 295, 296, 297,
	0, 0, 96, 293, 298, 299, 300, 0, 0, 0,
	0, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 326,
	0, 284, 0, 0, 279, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 324, 0, 146, 0, 164, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 177, 1433, 142, 152, 123,
	169, 147, 176, 184, 185, 166, 183, 192, 158, 84,
	165, 175, 97, 156, 86, 173, 163, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 170, 171, 100,
	195, 91, 182, 88, 92, 181, 136, 168, 174, 130,
	127, 87, 172, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 162, 179,
	196, 94, 0, 157, 167, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	159, 117, 124, 149, 194, 140, 154, 98, 178, 160,
	314, 325, 320, 321, 318, 319, 317, 316, 315, 327,
	306, 307, 308, 309, 311, 0, 322, 323, 310, 82,
	89, 121, 193, 148, 106, 180, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 120, 313, 122, 0, 0, 161, 131, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 505, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 96, 293, 298, 299, 300, 0,
	0, 0, 0, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 326, 0, 284, 0, 0, 279, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 324, 0, 146, 0,
	164, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 177, 0, 142,
	152, 123, 169, 147, 176, 184, 185, 166, 183, 192,
	158, 84, 165, 175, 97, 156, 86, 173, 163, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 170,
	171, 100, 195, 91, 182, 88, 92, 181, 136, 168,
	174, 130, 127, 87, 172, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	162, 179, 196, 94, 0, 157, 167, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 159, 117, 124, 149, 194, 140, 154, 98,
	178, 160, 314, 325, 320, 321, 318, 319, 317, 316,
	315, 327, 306, 307, 308, 309, 311, 0, 322, 323,
	310, 82, 89, 121, 193, 148, 106, 180, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 313, 122, 0, 0, 161, 131,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 271, 292, 291,
	294, 295, 296, 297, 0, 0, 96, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 326, 0, 284, 0, 0, 279, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 324, 0,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 177,
	0, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 162, 179, 196, 94, 0, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 314, 325, 320, 321, 318, 319,
	317, 316, 315, 327, 306, 307, 308, 309, 311, 0,
	322, 323, 310, 82, 89, 121, 193, 148, 106, 180,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 538, 548, 549, 541,
	542, 543, 544, 545, 546, 547, 540, 0, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 89, 121, 193, 148,
	106, 180, 139, 0, 0, 0, 527, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 161, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 529, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 524, 523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 0, 0, 146, 0, 164, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 177, 0, 142, 152, 123, 169, 147,
	176, 184, 185, 166, 183, 192, 158, 84, 165, 175,
	97, 156, 86, 173, 163, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 170, 171, 100, 195, 91,
	182, 88, 92, 181, 136, 168, 174, 130, 127, 87,
	172, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 162, 179, 196, 94,
	0, 157, 167, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 159, 117,
	124, 149, 194, 140, 154, 98, 178, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	193, 148, 106, 180, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 161, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 76,
	77, 0, 73, 0, 0, 0, 78, 146, 0, 164,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 177, 0, 142, 152,
	123, 169, 147, 176, 184, 185, 166, 183, 192, 158,
	84, 165, 175, 97, 156, 86, 173, 163, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 170, 171,
	100, 195, 91, 182, 88, 92, 181, 136, 168, 174,
	130, 127, 87, 172, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 162,
	179, 196, 94, 0, 157, 167, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 159, 117, 124, 149, 194, 140, 154, 98, 178,
	160, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 89, 121, 193, 148, 106, 180, 139, 0, 0,
	0, 856, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 858, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 0, 0, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 180, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 180, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 193, 148, 106, 180, 139, 0, 0, 0, 856,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 161, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 858, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 0, 0, 146, 0, 164,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 177, 0, 854, 152,
	123, 169, 147, 176, 184, 185, 166, 183, 192, 158,
	84, 165, 175, 97, 156, 86, 173, 163, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 170, 171,
	100, 195, 91, 182, 88, 92, 181, 136, 168, 174,
	130, 127, 87, 172, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 162,
	179, 196, 94, 0, 157, 167, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 159, 117, 124, 149, 194, 140, 154, 98, 178,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 193, 148, 106, 180, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 161, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	751, 0, 0, 752, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 0, 0,
	146, 0, 164, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 177,
	0, 142, 152, 123, 169, 147, 176, 184, 185, 166,
	183, 192, 158, 84, 165, 175, 97, 156, 86, 173,
	163, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 170, 171, 100, 195, 91, 182, 88, 92, 181,
	136, 168, 174, 130, 127, 87, 172, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 162, 179, 196, 94, 0, 157, 167, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 159, 117, 124, 149, 194, 140,
	154, 98, 178, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 193, 148, 106, 180,
	103, 0, 641, 0, 0, 0, 120, 0, 122, 0,
	0, 161, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 640, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 0, 0, 146, 0, 164, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 177, 0, 142, 152, 123, 169, 147, 176,
	184, 185, 166, 183, 192, 158, 84, 165, 175, 97,
	156, 86, 173, 163, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 170, 171, 100, 195, 91, 182,
	88, 92, 181, 136, 168, 174, 130, 127, 87, 172,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 162, 179, 196, 94, 0,
	157, 167, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 159, 117, 124,
	149, 194, 140, 154, 98, 178, 160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 193,
	148, 106, 180, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 161, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 0, 0, 146, 0, 164, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 177, 0, 142, 152, 123,
	169, 147, 176, 184, 185, 166, 183, 192, 158, 84,
	165, 175, 97, 156, 86, 173, 163, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 170, 171, 100,
	195, 91, 182, 88, 92, 181, 136, 168, 174, 130,
	127, 87, 172, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 162, 179,
	196, 94, 0, 157, 167, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	159, 117, 124, 149, 194, 140, 154, 98, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 193, 148, 106, 180, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 858, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 180, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 529, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 82, 89, 121, 193, 148,
	106, 180, 611, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 161, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 0, 0, 146, 0, 164, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 177, 0, 142, 152, 123,
	169, 147, 176, 184, 185, 166, 183, 192, 158, 84,
	165, 175, 97, 156, 86, 173, 163, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 170, 171, 100,
	195, 91, 182, 88, 92, 181, 136, 168, 174, 130,
	127, 87, 172, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 162, 179,
	196, 94, 0, 157, 167, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	159, 117, 124, 149, 194, 140, 154, 98, 178, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 193, 148, 106, 180, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 161, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 164, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 177, 0,
	142, 152, 123, 169, 147, 176, 184, 185, 166, 183,
	192, 158, 84, 165, 175, 97, 156, 86, 173, 163,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	170, 171, 100, 195, 91, 182, 88, 92, 181, 136,
	168, 174, 130, 127, 87, 172, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 162, 179, 196, 94, 0, 157, 167, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 159, 117, 124, 149, 194, 140, 154,
	98, 178, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 180, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	161, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 207, 0, 212, 0, 0,
	0, 0, 146, 0, 164, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 177, 0, 142, 152, 123, 169, 147, 176, 184,
	185, 166, 183, 192, 158, 84, 165, 175, 97, 156,
	86, 173, 163, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 170, 171, 100, 195, 91, 182, 88,
	92, 181, 136, 168, 174, 130, 127, 87, 172, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 162, 179, 196, 94, 0, 157,
	167, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 159, 117, 124, 149,
	194, 140, 154, 98, 178, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 180, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 161, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 164, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 177, 0, 142, 152, 123, 169,
	147, 176, 184, 185, 166, 183, 192, 158, 84, 165,
	175, 97, 156, 86, 173, 163, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 170, 171, 100, 195,
	91, 182, 88, 92, 181, 136, 168, 174, 130, 127,
	87, 172, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 162, 179, 196,
	94, 0, 157, 167, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 159,
	117, 124, 149, 194, 140, 154, 98, 178, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 180, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 161, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	164, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 177, 0, 142,
	152, 123, 169, 147, 176, 184, 185, 166, 183, 192,
	158, 84, 165, 175, 97, 156, 86, 173, 163, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 170,
	171, 100, 195, 91, 182, 88, 92, 181, 136, 168,
	174, 130, 127, 87, 172, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	162, 179, 196, 94, 0, 157, 167, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 159, 117, 124, 149, 194, 140, 154, 98,
	178, 160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 180, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 161,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 164, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	177, 0, 142, 152, 123, 169, 147, 176, 184, 185,
	166, 183, 192, 158, 84, 165, 175, 97, 156, 86,
	173, 163, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 170, 171, 100, 195, 91, 182, 88, 92,
	181, 136, 168, 174, 130, 127, 87, 172, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 162, 179, 196, 94, 0, 157, 167,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 159, 117, 124, 149, 194,
	140, 154, 98, 178, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 89, 121, 193, 148, 106,
	180,
}
var yyPact = [...]int{

	1759, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 900, 941, -1000, -1000, -1000, -1000, -1000, -1000,
	260, 9017, 9, 121, 22, 11952, 118, 1456, 12438, -1000,
	6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -65, -67,
	-1000, 727, -1000, -1000, -1000, -1000, -1000, 877, 894, 753,
	886, 814, -1000, 6505, 70, 70, 11709, 5749, -1000, -1000,
	232, 12438, 105, 12438, -155, 68, 68, 68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 115, 12438, 206,
	-1000, 12438, 67, 532, 67, 67, 67, 12438, -1000, 164,
	-1000, -1000, -1000, 12438, 529, 839, 3364, 55, 3364, 3364,
	-1000, 3364, 3364, -1000, 3364, 13, 3364, -68, 907, -1000,
	-1000, -1000, -1000, -6, -1000, 3364, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 541,
	848, 7514, 7514, 900, -1000, 727, -1000, -1000, -1000, 842,
	-1000, -1000, 296, 927, -1000, 8774, 160, -1000, 7514, 1977,
	650, -1000, -1000, 650, -1000, -1000, 148, -1000, -1000, 8270,
	8270, 8270, 8270, 8270, 8270, 8270, 8270, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 650, -1000, 7262, 650, 650, 650, 650, 650, 650,
	650, 650, 7514, 650, 650, 650, 650, 650, 650, 650,
	650, 650, 650, 650, 650, 650, 650, 650, 11466, 10736,
	12438, 669, 638, -1000, -1000, 157, 686, 5484, -117, -1000,
	-1000, -1000, 242, 10493, -1000, -1000, -1000, 838, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 586, 12438, -1000, 2225, -1000, 520,
	3364, 79, 518, 274, 502, 12438, 12438, 3364, 20, 52,
	51, 12438, 702, 74, 12438, 862, 765, 12438, 496, 486,
	-1000, 5219, -1000, 3364, 3364, -1000, -1000, -1000, 3364, 3364,
	3364, 12438, 3364, 3364, -1000, -1000, -1000, -1000, -1000, 3364,
	3364, -1000, 921, 322, -1000, -1000, -1000, -1000, 7514, -1000,
	764, -1000, -1000, -1000, -1000, -1000, -1000, 936, 195, 443,
	156, 687, -1000, 435, 877, 541, 814, 10250, 783, -1000,
	-1000, 12438, -1000, 7514, 7514, 457, -1000, 11222, -1000, -1000,
	4159, 201, 8270, 310, 251, 8270, 8270, 8270, 8270, 8270,
	8270, 8270, 8270, 8270, 8270, 8270, 8270, 8270, 8270, 8270,
	396, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 472,
	-1000, 727, 540, 540, 170, 170, 170, 170, 170, 170,
	170, 8522, 6001, 541, 584, 264, 7262, 6505, 6505, 7514,
	7514, 7009, 6757, 6505, 868, 250, 264, 12681, -1000, -1000,
	8018, -1000, -1000, -1000, -1000, -1000, 541, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12195, 12195, 6505, 6505, 6505, 6505,
	33, 12438, -1000, 662, 746, -1000, -1000, -1000, 864, 9755,
	10007, 33, 635, 10736, 12438, -1000, -1000, 10736, 12438, 3894,
	4954, 686, -117, 675, -1000, -110, -90, 2534, 126, -1000,
	-1000, -1000, -1000, 3099, 178, 603, 352, -57, -1000, -1000,
	-1000, 709, -1000, 709, 709, 709, 709, -22, -22, -22,
	-22, -1000, -1000, -1000, -1000, -1000, 742, 739, -1000, 709,
	709, 709, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	726, 726, 726, 711, 711, 749, -1000, 12438, 3364, 861,
	3364, -1000, 1388, -1000, 12195, 12195, 12438, 12438, 12438, 131,
	12438, 12438, 685, -1000, 12438, 3364, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12438, 300, 12438, 12438, 264, 12438, -1000, 822, 7514,
	7514, 4689, 7514, -1000, -1000, -1000, 848, -1000, 868, 893,
	-1000, 831, 830, 6505, -1000, -1000, 201, 245, -1000, -1000,
	469, -1000, -1000, -1000, -1000, 153, 650, -1000, 2117, -1000,
	-1000, -1000, -1000, 310, 8270, 8270, 8270, 467, 2117, 2150,
	1375, 2222, 170, 481, 481, 175, 175, 175, 175, 175,
	564, 564, -1000, -1000, -1000, 541, -1000, -1000, -1000, 541,
	6505, 684, -1000, -1000, 7514, -1000, 541, 577, 577, 397,
	273, 241, 919, 577, 238, 916, 577, 577, 6505, 278,
	-1000, 7514, 541, -1000, 152, -1000, 1451, 683, 676, 577,
	541, 577, 577, 616, 650, -1000, 12681, 10736, 10736, 10736,
	10736, 10736, -1000, 802, 801, -1000, 782, 778, 804, 12438,
	-1000, 579, 9755, 143, 650, -1000, 10979, -1000, -1000, 906,
	10736, 665, -1000, 665, -1000, 151, -1000, -1000, 675, -117,
	-121, -1000, -1000, -1000, -1000, 264, -1000, 464, 674, 2834,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 717, 460, -1000,
	854, 187, 177, 456, 853, -1000, -1000, -1000, 843, -1000,
	279, -60, -1000, -1000, 359, -22, -22, -1000, -1000, 126,
	836, 126, 126, 126, 426, 426, -1000, -1000, -1000, -1000,
	358, -1000, -1000, -1000, 355, -1000, 763, 12195, 3364, -1000,
	-1000, -1000, -1000, 292, 292, 179, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 32, 744, -1000,
	-1000, -1000, -1000, 11, 19, 72, -1000, 3364, -1000, 322,
	-1000, 418, 7514, -1000, -1000, -1000, 820, 264, 264, 145,
	-1000, -1000, 12438, -1000, -1000, -1000, -1000, 658, -1000, -1000,
	-1000, 3629, 6505, -1000, 467, 2117, 1940, -1000, 8270, 8270,
	-1000, -1000, 577, 6505, 264, -1000, -1000, -1000, 47, 396,
	47, 8270, 8270, -1000, 8270, 8270, -1000, -168, 671, 244,
	-1000, 7514, 375, -1000, 4689, -1000, 8270, 8270, -1000, -1000,
	-1000, -1000, 762, 12681, 650, -1000, 9512, 12195, 670, -1000,
	237, 746, 733, 758, 730, -1000, -1000, -1000, -1000, 791,
	-1000, 788, -1000, -1000, -1000, -1000, -1000, 100, 94, 92,
	12195, -1000, 900, 7514, 665, -1000, -1000, 186, -1000, -1000,
	-122, -118, -1000, -1000, -1000, 3099, -1000, 3099, 12195, 49,
	-1000, 456, 456, -1000, -1000, -1000, 716, 757, 8270, -1000,
	-1000, -1000, 601, 126, 126, -1000, 198, -1000, -1000, -1000,
	571, -1000, 563, 673, 561, 12438, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12438, -1000, -1000, -1000, -1000, -1000, 12195, -175,
	445, 12195, 12195, 12195, 12438, -1000, 300, -1000, 264, -1000,
	4424, -1000, 906, 10736, -1000, -1000, 541, -1000, 8270, 2117,
	2117, -1000, -1000, 541, 709, 709, -1000, 709, 711, -1000,
	709, -3, 709, -4, 541, 541, 2098, 1860, 1817, 338,
	650, -163, -1000, 264, 7514, -1000, 1721, 1656, -1000, 849,
	632, 659, -1000, -1000, 6253, 541, 559, 141, 554, -1000,
	900, 12681, 7514, -1000, -1000, 7514, 710, -1000, 7514, -1000,
	-1000, -1000, 650, 650, 650, 554, 877, 264, -1000, -1000,
	-1000, -1000, 2834, -1000, 537, -1000, 709, -1000, -1000, -1000,
	12195, -53, 935, 2117, -1000, -1000, -1000, -1000, -1000, -22,
	417, -22, 347, -1000, 337, 3364, -1000, -1000, -1000, -1000,
	857, -1000, 4424, -1000, -1000, 707, 748, -1000, -1000, -1000,
	904, 672, -1000, 2117, -1000, -1000, 110, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8270, 8270, 8270, 8270, 8270,
	541, 414, 264, 8270, 8270, 847, -1000, 650, -1000, -1000,
	649, 12195, 12195, -1000, 12195, 877, -1000, 264, 264, 12195,
	264, 12195, 12195, 12195, 9269, -1000, 137, 12195, -1000, 501,
	-1000, 163, -1000, -119, 126, -1000, 126, 589, 555, -1000,
	650, 663, -1000, 222, 12195, 12438, 895, 881, -1000, -1000,
	1451, 1451, 1451, 1451, 7, -1000, -1000, 1451, 1451, 931,
	-1000, 650, -1000, 727, 138, -1000, -1000, -1000, 494, 492,
	492, 492, 143, 137, -1000, 440, 217, 408, -1000, 46,
	12195, 293, 846, -1000, 845, -1000, -1000, -1000, -1000, -1000,
	31, 4424, 3099, 478, -1000, -1000, 7514, 7514, -1000, -1000,
	-1000, -1000, 541, 45, -179, -1000, -1000, 12681, 659, 541,
	12195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 336, -1000,
	-1000, 12438, -1000, -1000, 385, -1000, -1000, 450, -1000, 12195,
	-1000, -1000, 744, 264, 641, -1000, 819, -172, -182, 639,
	-1000, -1000, -1000, 704, -1000, -1000, 31, 828, -175, -1000,
	766, -1000, 12195, -1000, 28, -1000, -176, 437, 25, -180,
	756, 650, -183, 747, -1000, 926, 7766, -1000, -1000, 930,
	155, 155, 1451, 541, -1000, -1000, -1000, 54, 398, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1150, 18, 449, 1149, 1147, 1146, 1145, 1144, 1143,
	1142, 1140, 1139, 1138, 1137, 1136, 1135, 1133, 1132, 1130,
	1129, 1121, 1120, 1118, 1117, 1116, 135, 1115, 1114, 1111,
	75, 1108, 77, 1107, 1105, 41, 69, 48, 53, 1126,
	1103, 30, 52, 84, 1102, 35, 1098, 1095, 81, 1094,
	1093, 56, 1092, 1091, 898, 1090, 66, 1084, 10, 49,
	1083, 1082, 1081, 1079, 73, 463, 1077, 1076, 13, 1075,
	1073, 89, 1071, 58, 6, 17, 24, 22, 1067, 313,
	8, 1065, 57, 1064, 1063, 1062, 1061, 21, 1058, 60,
	1056, 15, 59, 1053, 44, 78, 38, 26, 9, 79,
	64, 1052, 25, 71, 55, 1050, 1048, 489, 1043, 1037,
	54, 1034, 1029, 29, 188, 410, 1024, 1023, 1022, 1021,
	42, 0, 819, 428, 76, 1020, 1018, 1017, 1527, 45,
	51, 27, 1016, 92, 20, 40, 1015, 998, 34, 995,
	994, 993, 992, 991, 989, 988, 97, 987, 986, 985,
	14, 43, 984, 983, 63, 28, 980, 979, 977, 47,
	65, 976, 975, 50, 37, 974, 971, 969, 968, 967,
	33, 12, 966, 23, 964, 11, 962, 31, 961, 7,
	960, 16, 954, 3, 952, 5, 46, 1, 951, 2,
	950, 948, 61, 4, 80, 947, 82,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 194, 194, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 136, 136, 11, 11, 11, 11, 11,
	11, 11, 185, 185, 184, 183, 183, 182, 182, 181,
	17, 166, 168, 168, 167, 167, 167, 167, 160, 139,
	139, 139, 139, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 145,
	145, 145, 145, 145, 145, 145, 145, 159, 159, 146,
	146, 154, 154, 155, 155, 155, 152, 152, 153, 153,
	156, 156, 156, 148, 148, 149, 149, 157, 157, 150,
	150, 150, 151, 151, 151, 158, 158, 158, 158, 158,
	147, 147, 161, 161, 176, 176, 175, 175, 175, 165,
	165, 172, 172, 172, 172, 172, 163, 163, 164, 164,
	174, 174, 173, 162, 162, 177, 177, 177, 177, 188,
	189, 187, 187, 187, 187, 187, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 180, 178, 178, 179, 179, 13, 18, 18, 14,
	14, 14, 14, 14, 15, 15, 19, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 111,
	111, 109, 109, 112, 112, 110, 110, 110, 113, 113,
	113, 137, 137, 137, 21, 21, 23, 23, 24, 25,
	22, 22, 22, 22, 22, 22, 22, 16, 195, 26,
	27, 27, 28, 28, 28, 32, 32, 32, 30, 30,
	31, 31, 37, 37, 36, 36, 38, 38, 38, 38,
	125, 125, 125, 124, 124, 40, 40, 41, 41, 42,
	42, 43, 43, 43, 43, 57, 57, 94, 94, 96,
	96, 44, 44, 44, 44, 45, 45, 46, 46, 47,
	47, 132, 132, 131, 131, 131, 130, 130, 50, 50,
	50, 52, 51, 51, 51, 51, 53, 53, 55, 55,
	54, 54, 56, 58, 58, 58, 58, 59, 59, 39,
	39, 39, 39, 39, 39, 39, 108, 108, 61, 61,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	72, 72, 72, 72, 72, 72, 62, 62, 62, 62,
	62, 62, 62, 35, 35, 73, 73, 73, 79, 74,
	74, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 196, 196, 71, 70, 70,
	70, 70, 70, 70, 33, 33, 33, 33, 33, 135,
	135, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 83, 83, 34, 34, 81, 81,
	82, 84, 84, 80, 80, 80, 64, 64, 64, 64,
	64, 64, 64, 64, 66, 66, 66, 85, 85, 86,
	86, 87, 87, 88, 88, 89, 90, 90, 90, 91,
	91, 91, 91, 92, 92, 92, 63, 63, 63, 63,
	63, 63, 93, 93, 93, 93, 97, 97, 75, 75,
	77, 77, 76, 78, 98, 98, 102, 99, 99, 103,
	103, 103, 103, 101, 101, 101, 127, 127, 127, 106,
	106, 114, 114, 115, 115, 107, 107, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 117, 117, 117,
	118, 118, 119, 119, 119, 126, 126, 122, 122, 123,
	123, 128, 128, 129, 129, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 192, 193, 133, 134,
	134, 134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 5, 4, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	2, 2, 2, 2, 3, 3, 5, 2, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 163,
	164, 166, 167, 25, 143, 144, 147, 148, 31, 32,
	121, -192, 8, 253, 54, -191, 270, -87, 15, -28,
	5, -26, -195, -26, -26, -26, -26, -26, -166, -168,
	54, 90, -119, 125, 72, 245, 122, 123, 129, -122,
	57, -121, 263, 135, 163, 174, 168, 195, 187, 264,
	136, 185, 188, 232, 215, 227, 66, 166, 241, 145,
	183, 179, 177, 27, 229, 200, 268, 178, 228, 121,
	138, 133, 201, 205, 233, 172, 173, 235, 199, 134,
	33, 265, 35, 153, 236, 203, 198, 194, 197, 171,
	193, 39, 207, 206, 208, 231, 190, 139, 180, 18,
	239, 148, 151, 230, 202, 204, 130, 155, 267, 237,
	176, 140, 152, 147, 240, 141, 167, 217, 162, 234,
	243, 38, 212, 170, 132, 164, 159, 218, 191, 154,
	181, 182, 196, 169, 192, 165, 156, 149, 242, 213,
	269, 189, 186, 160, 157, 158, 219, 220, 221, 222,
	223, 224, 161, 266, 238, 184, 214, -107, 125, 222,
	127, 123, 123, 124, 125, 245, 122, 123, -54, -128,
	57, -121, 125, 123, 108, 188, 232, 115, 216, 217,
	229, 124, 33, 230, 155, -137, 123, -109, 215, 219,
	220, 221, 224, 222, 161, 57, 234, 233, 225, -128,
	165, -133, -133, -133, -133, -133, 218, 218, -133, -2,
	-91, 17, 16, -5, -3, -192, 6, 20, 21, -32,
	40, 41, -27, -38, 99, -39, -128, -60, 74, -65,
	29, 57, -121, 23, -64, -61, -80, -78, -79, 108,
	109, 110, 97, 98, 105, 75, 111, -69, -67, -68,
	-70, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -122, -76, -192, 44, 45, 254, 255, 256, 257,
	262, 258, 77, 34, 244, 252, 251, 250, 248, 249,
	246, 247, 260, 261, 128, 245, 103, 253, -107, -107,
	11, -48, -49, -54, -56, -128, -99, -136, 165, -103,
	234, 233, -123, -101, -122, -120, 232, 188, 231, 120,
	73, 22, 24, 210, 76, 108, 16, 77, 107, 254,
	115, 48, 246, 247, 244, 256, 257, 245, 216, 29,
	10, 25, 143, 21, 101, 117, 80, 81, 146, 23,
	144, 70, 19, 51, 11, 13, 14, 128, 127, 92,
	124, 46, 8, 111, 26, 89, 42, 28, 44, 90,
	17, 248, 249, 31, 262, 150, 103, 49, 36, 74,
	68, 71, 52, 72, 15, 47, 91, 118, 253, 45,
	122, 6, 259, 30, 142, 43, 123, 79, 260, 261,
	126, 69, 5, 129, 32, 9, 50, 53, 250, 251,
	252, 34, 78, 12, -167, 90, -160, 57, -54, 124,
	-54, 253, -115, 128, -115, -115, 123, -54, 115, 117,
	120, 52, -18, -54, -114, 128, 57, -114, -114, -114,
	-54, 112, -54, 57, 30, -134, -192, -123, 245, 57,
	155, 123, 156, 125, -134, -134, -134, -134, -134, 159,
	160, -134, -112, -111, 227, 228, 218, 226, 12, 218,
	158, -134, -133, -133, -193, 56, -92, 19, 31, -39,
	-128, -88, -89, -39, -87, -2, -26, 36, -30, 21,
	65, 11, -125, 73, 72, 89, -124, 22, -122, 59,
	112, -39, -62, 92, 74, 90, 91, 76, 94, 93,
	104, 97, 98, 99, 100, 101, 102, 103, 95, 96,
	107, 82, 83, 84, 85, 86, 87, 88, -108, -192,
	-79, -192, 113, 114, -65, -65, -65, -65, -65, -65,
	-65, -65, -192, -2, -74, -39, -192, -192, -192, -192,
	-192, -192, -192, -192, -192, -83, -39, -192, -196, -71,
	-192, -196, -71, -196, -71, -196, -192, -196, -71, -196,
	-71, -196, -196, -71, -192, -192, -192, -192, -192, -192,
	-55, 26, -54, -41, -42, -43, -44, -57, -79, -192,
	-54, -54, -48, -194, 55, 11, 53, -194, 55, 112,
	55, -99, 165, -100, -104, 235, 237, 82, -127, -122,
	59, 29, 30, 56, 55, -54, -139, -142, -144, -143,
	-145, -140, -141, 185, 186, 108, 189, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 30, 145, 181,
	182, 183, 184, 201, 202, 203, 204, 205, 206, 207,
	208, 168, 187, 264, 169, 170, 171, 172, 173, 174,
	176, 177, 178, 179, 180, 57, -134, 125, 57, 74,
	57, -54, -54, -134, 157, 157, 123, 123, 162, -54,
	55, 126, -48, 23, 52, -54, 57, 57, -129, -128,
	-120, -134, -134, -134, -134, -134, -54, -134, -134, -134,
	-134, 11, -110, 11, 92, -39, 52, 9, 92, 55,
	18, 112, 55, -90, 24, 25, -91, -193, -32, -66,
	-122, 60, 63, -31, 43, -54, -39, -39, -72, 68,
	74, 69, 70, -124, 99, -129, -123, -120, -65, -73,
	-76, -79, 64, 92, 90, 91, 76, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -135, 57, 59, 57, -64, -64, -122, -37,
	21, -36, -38, -193, 55, -193, -2, -36, -36, -39,
	-39, -80, 59, -36, -80, 59, -36, -36, -30, -81,
	-82, 78, -80, -122, -128, -193, -65, -122, -122, -36,
	-37, -36, -36, -95, 151, -54, 30, 55, -50, -52,
	-51, -53, 42, 46, 48, 43, 44, 45, 49, -132,
	22, -41, -192, -131, 151, -130, 22, -128, 59, -95,
	53, -41, -54, -41, -56, -128, 99, -103, -100, 55,
	236, 238, 239, 52, 71, -39, -151, 107, -169, -170,
	-171, -123, 59, 60, -160, -161, -162, -172, 137, -177,
	130, 132, 129, -163, 138, 124, 28, 56, -156, 68,
	74, -152, 213, -146, 54, -146, -146, -146, -146, -150,
	188, -150, -150, -150, 54, 54, -146, -146, -146, -154,
	54, -154, -154, -155, 54, -155, -126, 53, -54, -134,
	23, -134, -116, 120, 117, 118, -180, 116, 210, 188,
	66, 29, 15, 254, 151, 269, 57, 152, -122, -122,
	-54, -54, -54, 120, 117, -54, -54, -54, -134, -54,
	-113, 90, 12, -128, -128, -54, 38, -39, -39, -129,
	-89, -92, -106, 19, 11, 34, 34, -36, 68, 69,
	70, 112, -192, -73, -65, -65, -65, -35, 146, 73,
	-193, -193, -36, 55, -39, -193, -193, -193, 55, 53,
	22, 11, 11, -193, 11, 11, -193, -193, -36, -84,
	-82, 80, -39, -193, 112, -193, 55, 55, -193, -193,
	-193, -193, -63, 30, 34, -2, -192, -192, -98, -102,
	-80, -42, -43, -43, -42, -43, 42, 42, 42, 47,
	42, 47, 42, -51, -128, -193, -58, 50, 127, 51,
	-192, -130, -59, 12, -41, -59, -59, 112, -104, -105,
	240, 237, 243, 57, 59, 55, -171, 82, 54, 57,
	28, -163, -163, -164, 57, -164, 28, -148, 29, 68,
	-153, 214, 60, -150, -150, -151, 30, -151, -151, -151,
	-159, 59, -159, 60, 60, 52, -122, -134, -133, -186,
	131, 137, 138, 133, 57, 124, 28, 130, 132, 151,
	129, -186, -117, -118, 126, 22, 124, 28, 151, -185,
	53, 157, 210, 157, 126, -134, -110, 59, -39, 39,
	112, -54, -40, 11, 99, -123, -37, -35, 73, -65,
	-65, -193, -38, -138, 108, 185, 145, 183, 179, 199,
	190, 212, 181, 213, -135, -138, -65, -65, -65, -65,
	263, -87, 81, -39, 79, -123, -65, -65, -97, 52,
	-98, -75, -77, -76, -192, -2, -93, -122, -96, -122,
	-59, 55, 82, -46, -45, 52, 53, -47, 52, -45,
	42, 42, 124, 124, 124, -96, -87, -39, -59, 237,
	241, 242, -170, -171, -174, -173, -122, -177, -164, -164,
	54, -149, 52, -65, 56, -151, -151, 57, 108, 56,
	55, 56, 55, 56, 55, -54, -133, -133, -54, -133,
	-122, -183, 266, -184, 57, -122, -122, -122, -54, -113,
	-59, -41, -193, -65, -193, -146, -146, -146, -155, -146,
	173, -146, 173, -193, -193, 19, 19, 19, 19, -192,
	-34, 259, -39, 55, 55, 27, -97, 55, -193, -193,
	-193, 55, 112, -193, 55, -87, -102, -39, -39, 54,
	-39, -192, -192, -192, -193, -91, 56, 55, -146, -94,
	-122, -157, 210, 9, -150, 59, -150, 60, 60, -134,
	26, -182, -181, -123, 54, 53, -85, 13, -150, 57,
	-65, -65, -65, -65, -65, -193, 59, -65, -65, 28,
	-77, 34, -2, -192, -122, -122, -122, -91, -94, -94,
	-94, -94, -131, -176, -175, 53, 134, 66, -173, 56,
	55, -158, 130, 28, 129, -68, -151, -151, 56, 56,
	-192, 55, 82, -94, -54, -86, 14, 16, -193, -193,
	-193, -193, -33, 92, 266, -193, -193, 9, -75, -2,
	112, 56, -193, -193, -193, -58, -175, 57, -165, 82,
	59, 140, -122, -147, 66, 28, 28, -178, -179, 151,
	-181, -171, 56, -39, -74, -193, 264, 49, 267, -98,
	-193, -122, 60, -54, 59, -193, 55, -122, -185, 39,
	265, 268, 54, -179, 34, -183, 39, -94, 153, 266,
	56, 154, 267, -188, -189, 52, -192, 268, -189, 52,
	10, 9, -65, 150, -187, 141, 136, 139, 30, -187,
	-193, -193, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 561, 0, 318, 318, 318, 318, 318, 318,
	0, 632, 615, 0, 0, 0, 0, -2, 305, 306,
	0, 308, 309, 858, 858, 858, 858, 858, 0, 0,
	858, 0, 35, 36, 856, 1, 3, 569, 0, 0,
	322, 325, 320, 0, 615, 615, 0, 0, 65, 66,
	0, 0, 0, 842, 0, 613, 613, 613, 633, 634,
	637, 638, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 0, 0, 0,
	616, 0, 611, 0, 611, 611, 611, 0, 255, 390,
	641, 642, 842, 0, 0, 0, 859, 0, 859, 859,
	268, 859, 859, 271, 859, 0, 859, 0, 278, 280,
	281, 282, 283, 0, 287, 859, 302, 303, 292, 304,
	307, 310, 311, 312, 313, 314, 858, 858, 317, 29,
	573, 0, 0, 561, 31, 0, 318, 323, 324, 328,
	326, 327, 319, 0, 336, 340, 0, 399, 0, 404,
	406, -2, -2, 0, 441, 442, 443, 444, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 469, 470, 471,
	472, 546, 547, 548, 549, 550, 551, 552, 553, 408,
	409, 543, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 534, 0, 505, 505, 505, 505, 505, 505,
	505, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 46, 390, 50, 0, 833, 597,
	-2, -2, 0, 0, 639, 640, -2, 750, -2, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 0, 0, 84, 0, 82, 0,
	859, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 256, 859, 859, 259, 860, 861, 859, 859,
	859, 0, 859, 859, 266, 267, 269, 270, 272, 859,
	859, 274, 0, 295, 293, 294, 289, 290, 0, 284,
	285, 288, 315, 316, 30, 857, 24, 0, 0, 570,
	0, 562, 563, 566, 569, 29, 325, 0, 330, 329,
	321, 0, 337, 0, 0, 0, 341, 0, 343, 344,
	0, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 427, 428, 429, 430, 431, 432, 405, 0,
	419, 0, 0, 0, 461, 462, 463, 464, 465, 466,
	467, 0, 332, 29, 0, 439, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 0, 535, 0, 489, 497,
	0, 490, 498, 491, 499, 492, 0, 493, 500, 494,
	501, 495, 496, 502, 0, 0, 0, 332, 0, 0,
	48, 0, 389, 0, 347, 349, 350, 351, -2, 0,
	373, -2, 0, 0, 0, 42, 43, 0, 0, 0,
	0, 51, 833, 53, 54, 0, 0, 0, 162, 606,
	607, 608, 604, 206, 0, 0, 150, 146, 90, 91,
	92, 139, 94, 139, 139, 139, 139, 159, 159, 159,
	159, 122, 123, 124, 125, 126, 0, 0, 109, 139,
	139, 139, 113, 129, 130, 131, 132, 133, 134, 135,
	136, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	141, 141, 141, 143, 143, 635, 68, 0, 859, 0,
	859, 80, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 612, 0, 859, 252, 253, 391, 643,
	644, 257, 258, 260, 261, 262, 263, 264, 265, 273,
	277, 0, 298, 0, 0, 279, 0, 574, 0, 0,
	0, 0, 0, 565, 567, 568, 573, 32, 328, 0,
	554, 0, 0, 0, 331, 27, 400, 401, 403, 420,
	0, 422, 424, 342, 338, 0, 544, -2, 410, 411,
	435, 436, 437, 0, 0, 0, 0, 433, 415, 0,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	456, 457, 460, 519, 520, 0, 458, 459, 468, 0,
	0, 333, 334, 438, 0, 592, 29, 0, 0, 0,
	0, 443, 546, 0, 443, 546, 0, 0, 0, 541,
	538, 0, 0, 543, 0, 506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 388, 0, 0, 0, 0,
	0, 0, 378, 0, 0, 381, 0, 0, 0, 0,
	372, 0, 0, 393, 800, 374, 0, 376, 377, 397,
	0, 397, 45, 397, 47, 0, 392, 598, 52, 0,
	0, 57, 58, 599, 600, 601, 602, 0, 81, 207,
	209, 212, 213, 214, 85, 86, 87, 0, 0, 194,
	0, 0, 188, 188, 0, 186, 187, 83, 153, 151,
	0, 148, 147, 93, 0, 159, 159, 116, 117, 162,
	0, 162, 162, 162, 0, 0, 110, 111, 112, 104,
	0, 105, 106, 107, 0, 108, 0, 0, 859, 70,
	614, 71, 858, 0, 0, 627, 221, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 0, 72, 223,
	225, 224, 228, 0, 0, 0, 247, 859, 251, 295,
	276, 0, 0, 296, 297, 286, 0, 571, 572, 0,
	564, 25, 0, 609, 610, 555, 556, 345, 421, 423,
	425, 0, 332, 412, 433, 416, 0, 413, 0, 0,
	407, 473, 0, 0, 440, -2, 476, 477, 0, 0,
	0, 0, 0, 512, 0, 0, 513, 0, 561, 0,
	539, 0, 0, 488, 0, 507, 0, 0, 508, 509,
	510, 511, 586, 0, 0, -2, 0, 0, 397, 594,
	0, 348, 367, 369, 0, 364, 379, 380, 382, 0,
	384, 0, 386, 387, 352, 354, 355, 0, 0, 0,
	0, 375, 561, 0, 397, 40, 41, 0, 55, 56,
	0, 0, 62, 163, 164, 0, 210, 0, 0, 0,
	181, 188, 188, 184, 189, 185, 0, 155, 0, 152,
	89, 149, 0, 162, 162, 118, 0, 119, 120, 121,
	0, 137, 0, 0, 0, 0, 636, 69, 215, 858,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 858, 0, 858, 628, 629, 630, 631, 0, 75,
	0, 0, 0, 0, 0, 250, 298, 299, 300, 575,
	0, 26, 397, 0, 339, 545, 0, 414, 0, 434,
	417, 474, 335, 0, 139, 139, 524, 139, 143, 527,
	139, 529, 139, 532, 0, 0, 0, 0, 0, 0,
	0, 536, 487, 542, 0, 544, 0, 0, 33, 0,
	586, 576, 588, 590, 0, 29, 0, 582, 0, 359,
	561, 0, 0, 361, 368, 0, 0, 362, 0, 363,
	383, 385, 0, 0, 0, 0, 569, 398, 39, 59,
	60, 61, 208, 211, 0, 190, 139, 193, 182, 183,
	0, 157, 0, 154, 140, 114, 115, 160, 161, 159,
	0, 159, 0, 144, 0, 859, 216, 217, 218, 219,
	0, 222, 0, 73, 74, 0, 0, 227, 248, 275,
	557, 346, 475, 418, 478, 521, 159, 525, 526, 528,
	530, 531, 533, 480, 479, 0, 0, 0, 0, 0,
	0, 0, 540, 0, 0, 0, 34, 0, 591, -2,
	0, 0, 0, 49, 0, 569, 595, 596, 365, 0,
	370, 0, 0, 0, 373, 38, 173, 0, 192, 0,
	357, 165, 158, 0, 162, 138, 162, 0, 0, 67,
	0, 76, 77, 0, 0, 0, 559, 0, 522, 523,
	0, 0, 0, 0, 514, 486, 537, 0, 0, 0,
	589, 0, -2, 0, 584, 583, 360, 37, 0, 0,
	0, 0, 393, 172, 174, 0, 179, 0, 191, 0,
	0, 170, 0, 167, 169, 156, 127, 128, 142, 145,
	0, 0, 0, 0, 229, 28, 0, 0, 481, 483,
	482, 484, 0, 0, 0, 503, 504, 0, 579, 29,
	0, 366, 394, 395, 396, 356, 175, 176, 0, 180,
	178, 0, 358, 88, 0, 166, 168, 0, 242, 0,
	78, 79, 72, 560, 558, 485, 0, 0, 0, 587,
	-2, 585, 177, 0, 171, 241, 0, 0, 75, 515,
	0, 518, 0, 243, 0, 226, 516, 0, 0, 0,
	195, 0, 0, 196, 197, 0, 0, 517, 198, 0,
	0, 0, 0, 0, 199, 201, 202, 0, 0, 200,
	244, 245, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:441
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:488
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:579
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:616
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:681
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:914
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1038
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1047
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1064
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1068
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1074
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1187
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1191
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1195
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1199
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1205
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1238
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1282
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1286
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1290
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1294
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1299
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 244:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1403
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1407
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1431
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1439
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1444
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1535
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1551
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1556
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1634
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = "full "
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1668
		{
			yyVAL.showFilter = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.str = SessionStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.str = GlobalStr
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Commit{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.statement = &Rollback{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1740
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1744
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1762
		{
			setAllowComments(yylex, true)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1772
		{
			yyVAL.bytes2 = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = UnionStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.str = UnionAllStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1790
		{
			yyVAL.str = UnionDistinctStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.str = SQLCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1808
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = DistinctStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = StraightJoinHint
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1826
		{
			yyVAL.selectExprs = nil
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1836
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1850
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1858
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1863
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1931
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1964
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1984
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1994
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1999
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2012
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = JoinStr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = StraightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = LeftJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = RightJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = NaturalJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2102
		{
			yyVAL.indexHints = nil
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2106
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2110
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2114
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2159
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 418:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = IsNullStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = IsNotNullStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = IsTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = IsNotTrueStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.str = IsFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.str = IsNotFalseStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = EqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = LessThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = GreaterThanStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2259
		{
			yyVAL.str = LessEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2263
		{
			yyVAL.str = GreaterEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.str = NotEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = BooleanModeStr
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2656
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = QueryExpansionStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2744
		{
			yyVAL.str = string("")
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2764
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2787
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &NullVal{}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.exprs = nil
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2863
		{
			yyVAL.orderBy = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2888
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = AscScr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.str = DescScr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2901
		{
			yyVAL.limit = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2905
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2918
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = ForUpdateStr
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = ShareModeStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2952
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2956
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2960
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2979
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2984
		{
			yyVAL.updateExprs = nil
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2988
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3008
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3020
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3040
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3068
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.bytes = []byte("charset")
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = &Default{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3099
		{
			yyVAL.byt = 0
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.byt = 1
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.str = ""
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.str = IgnoreStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3136
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3149
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3153
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3156
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3427
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			decNesting(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3441
		{
			skipToEnd(yylex)
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3446
		{
			skipToEnd(yylex)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3450
		{
			skipToEnd(yylex)
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

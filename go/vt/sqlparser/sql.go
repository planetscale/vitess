// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
	tableAndLockTypes      []*TableAndLockType
	tableAndLockType       *TableAndLockType
	lockType               LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const CASCADED = 57523
const DEFINER = 57524
const OPTION = 57525
const SQL = 57526
const UNDEFINED = 57527
const SEQUENCE = 57528
const MERGE = 57529
const TEMPTABLE = 57530
const INVOKER = 57531
const SECURITY = 57532
const BEGIN = 57533
const START = 57534
const TRANSACTION = 57535
const COMMIT = 57536
const ROLLBACK = 57537
const SAVEPOINT = 57538
const RELEASE = 57539
const WORK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const MEDIUMINT = 57544
const INT = 57545
const INTEGER = 57546
const BIGINT = 57547
const INTNUM = 57548
const REAL = 57549
const DOUBLE = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const TIME = 57554
const TIMESTAMP = 57555
const DATETIME = 57556
const YEAR = 57557
const CHAR = 57558
const VARCHAR = 57559
const BOOL = 57560
const CHARACTER = 57561
const VARBINARY = 57562
const NCHAR = 57563
const TEXT = 57564
const TINYTEXT = 57565
const MEDIUMTEXT = 57566
const LONGTEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const NULLX = 57582
const AUTO_INCREMENT = 57583
const APPROXNUM = 57584
const SIGNED = 57585
const UNSIGNED = 57586
const ZEROFILL = 57587
const COLLATION = 57588
const DATABASES = 57589
const SCHEMAS = 57590
const TABLES = 57591
const VITESS_METADATA = 57592
const VSCHEMA = 57593
const FULL = 57594
const PROCESSLIST = 57595
const COLUMNS = 57596
const FIELDS = 57597
const ENGINES = 57598
const PLUGINS = 57599
const EXTENDED = 57600
const KEYSPACES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const NAMES = 57605
const CHARSET = 57606
const GLOBAL = 57607
const SESSION = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const CURRENT_TIMESTAMP = 57618
const DATABASE = 57619
const CURRENT_DATE = 57620
const CURRENT_TIME = 57621
const LOCALTIME = 57622
const LOCALTIMESTAMP = 57623
const CURRENT_USER = 57624
const UTC_DATE = 57625
const UTC_TIME = 57626
const UTC_TIMESTAMP = 57627
const REPLACE = 57628
const CONVERT = 57629
const CAST = 57630
const SUBSTR = 57631
const SUBSTRING = 57632
const GROUP_CONCAT = 57633
const SEPARATOR = 57634
const TIMESTAMPADD = 57635
const TIMESTAMPDIFF = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const QUERY = 57642
const EXPANSION = 57643
const UNUSED = 57644
const ARRAY = 57645
const CUME_DIST = 57646
const DESCRIPTION = 57647
const DENSE_RANK = 57648
const EMPTY = 57649
const EXCEPT = 57650
const FIRST_VALUE = 57651
const GROUPING = 57652
const GROUPS = 57653
const JSON_TABLE = 57654
const LAG = 57655
const LAST_VALUE = 57656
const LATERAL = 57657
const LEAD = 57658
const MEMBER = 57659
const NTH_VALUE = 57660
const NTILE = 57661
const OF = 57662
const OVER = 57663
const PERCENT_RANK = 57664
const RANK = 57665
const RECURSIVE = 57666
const ROW_NUMBER = 57667
const SYSTEM = 57668
const WINDOW = 57669
const ACTIVE = 57670
const ADMIN = 57671
const BUCKETS = 57672
const CLONE = 57673
const COMPONENT = 57674
const DEFINITION = 57675
const ENFORCED = 57676
const EXCLUDE = 57677
const FOLLOWING = 57678
const GEOMCOLLECTION = 57679
const GET_MASTER_PUBLIC_KEY = 57680
const HISTOGRAM = 57681
const HISTORY = 57682
const INACTIVE = 57683
const INVISIBLE = 57684
const LOCKED = 57685
const MASTER_COMPRESSION_ALGORITHMS = 57686
const MASTER_PUBLIC_KEY_PATH = 57687
const MASTER_TLS_CIPHERSUITES = 57688
const MASTER_ZSTD_COMPRESSION_LEVEL = 57689
const NESTED = 57690
const NETWORK_NAMESPACE = 57691
const NOWAIT = 57692
const NULLS = 57693
const OJ = 57694
const OLD = 57695
const OPTIONAL = 57696
const ORDINALITY = 57697
const ORGANIZATION = 57698
const OTHERS = 57699
const PATH = 57700
const PERSIST = 57701
const PERSIST_ONLY = 57702
const PRECEDING = 57703
const PRIVILEGE_CHECKS_USER = 57704
const PROCESS = 57705
const RANDOM = 57706
const REFERENCE = 57707
const REQUIRE_ROW_FORMAT = 57708
const RESOURCE = 57709
const RESPECT = 57710
const RESTART = 57711
const RETAIN = 57712
const REUSE = 57713
const ROLE = 57714
const SECONDARY = 57715
const SECONDARY_ENGINE = 57716
const SECONDARY_LOAD = 57717
const SECONDARY_UNLOAD = 57718
const SKIP = 57719
const SRID = 57720
const THREAD_PRIORITY = 57721
const TIES = 57722
const UNBOUNDED = 57723
const VCPU = 57724
const VISIBLE = 57725
const FORMAT = 57726
const TREE = 57727
const VITESS = 57728
const TRADITIONAL = 57729
const LOCAL = 57730
const LOW_PRIORITY = 57731

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	155, 800,
	-2, 87,
	-1, 43,
	136, 110,
	236, 110,
	-2, 104,
	-1, 50,
	34, 347,
	155, 347,
	167, 347,
	195, 361,
	196, 361,
	-2, 349,
	-1, 55,
	157, 371,
	-2, 369,
	-1, 79,
	55, 414,
	-2, 422,
	-1, 103,
	136, 110,
	236, 110,
	-2, 105,
	-1, 447,
	143, 811,
	-2, 807,
	-1, 448,
	143, 812,
	-2, 808,
	-1, 465,
	55, 415,
	-2, 427,
	-1, 466,
	55, 416,
	-2, 428,
	-1, 486,
	111, 1099,
	-2, 80,
	-1, 487,
	111, 999,
	-2, 81,
	-1, 492,
	111, 957,
	-2, 771,
	-1, 494,
	111, 1040,
	-2, 773,
	-1, 650,
	136, 110,
	236, 110,
	-2, 273,
	-1, 1040,
	143, 814,
	-2, 810,
	-1, 1132,
	73, 62,
	81, 62,
	-2, 66,
	-1, 1529,
	5, 668,
	18, 668,
	20, 668,
	32, 668,
	82, 668,
	-2, 453,
	-1, 1738,
	45, 742,
	-2, 740,
}

const yyPrivate = 57344

const yyLast = 19906

var yyAct = [...]int{
	447, 1821, 1832, 1575, 1738, 1637, 1788, 1712, 1446, 1353,
	1154, 1683, 1754, 1660, 1321, 391, 1509, 406, 420, 458,
	762, 1205, 1572, 1079, 813, 1510, 1340, 1354, 1506, 1421,
	1199, 1153, 664, 78, 3, 1521, 1422, 1163, 1398, 1129,
	961, 923, 1466, 1280, 629, 626, 114, 491, 1027, 126,
	1494, 360, 126, 980, 682, 1207, 76, 372, 1414, 126,
	1168, 1034, 850, 802, 915, 623, 379, 1111, 843, 1118,
	467, 1060, 834, 816, 806, 833, 811, 393, 1081, 452,
	836, 800, 1004, 382, 1208, 31, 941, 372, 1224, 1134,
	372, 126, 372, 1195, 847, 849, 823, 74, 840, 1094,
	622, 673, 389, 104, 105, 630, 975, 79, 990, 643,
	126, 73, 124, 775, 1150, 1076, 1077, 1780, 1319, 126,
	776, 656, 375, 1735, 126, 8, 7, 380, 381, 6,
	1562, 1685, 1647, 1825, 1785, 1819, 1762, 1812, 1576, 1784,
	1212, 75, 81, 82, 83, 84, 85, 86, 1761, 1483,
	1605, 637, 1536, 1537, 628, 473, 477, 851, 1184, 852,
	453, 1210, 935, 33, 34, 35, 67, 37, 38, 1320,
	1252, 1145, 1146, 642, 1251, 33, 934, 1535, 67, 37,
	38, 485, 653, 71, 1144, 690, 691, 659, 39, 64,
	65, 451, 62, 1384, 450, 112, 1383, 684, 63, 1385,
	1406, 1037, 101, 119, 120, 121, 96, 639, 638, 1178,
	1725, 724, 723, 733, 734, 726, 727, 728, 729, 730,
	731, 732, 725, 697, 1448, 735, 1640, 51, 1764, 115,
	116, 117, 1209, 1185, 1596, 1078, 641, 66, 1594, 432,
	933, 438, 439, 436, 437, 370, 435, 434, 433, 66,
	115, 116, 117, 115, 116, 117, 440, 441, 989, 101,
	93, 374, 368, 991, 992, 993, 97, 1442, 1248, 98,
	99, 692, 101, 109, 1443, 693, 690, 691, 950, 947,
	951, 952, 942, 1811, 488, 644, 685, 686, 695, 687,
	651, 1451, 1449, 930, 927, 928, 1260, 926, 696, 946,
	1450, 944, 1810, 42, 44, 47, 46, 49, 1798, 61,
	1713, 1112, 1246, 1744, 1203, 1836, 1203, 1838, 1799, 1542,
	625, 670, 1467, 672, 1781, 1203, 339, 655, 948, 479,
	937, 940, 50, 70, 69, 945, 640, 59, 60, 48,
	126, 662, 680, 100, 668, 1322, 1324, 634, 1452, 955,
	700, 1431, 372, 1247, 1172, 669, 671, 1493, 1492, 1491,
	1703, 372, 635, 1469, 648, 52, 53, 1243, 54, 55,
	56, 57, 1172, 1245, 118, 372, 372, 1259, 1561, 883,
	1258, 1299, 932, 1211, 1742, 1296, 1250, 111, 747, 748,
	1626, 1534, 698, 1760, 1345, 1309, 1288, 1140, 827, 760,
	100, 660, 1151, 661, 931, 1726, 1185, 735, 1380, 1090,
	706, 715, 1471, 100, 1475, 699, 1470, 654, 1468, 725,
	1765, 1011, 735, 1473, 674, 981, 115, 116, 117, 115,
	116, 117, 1472, 1323, 976, 1009, 1010, 1008, 645, 89,
	646, 712, 103, 647, 1717, 1474, 1476, 675, 676, 677,
	936, 126, 1755, 1834, 1065, 666, 1835, 715, 1833, 1485,
	68, 667, 924, 679, 1519, 938, 745, 943, 853, 710,
	1061, 649, 68, 919, 1404, 681, 372, 803, 90, 126,
	1171, 126, 126, 1553, 372, 871, 688, 1061, 804, 1306,
	372, 1704, 1702, 713, 714, 712, 1294, 1747, 1171, 1244,
	820, 1242, 709, 707, 1293, 1175, 708, 763, 999, 1001,
	1002, 715, 1176, 747, 748, 1000, 798, 747, 748, 1646,
	832, 1645, 1567, 713, 714, 712, 884, 110, 713, 714,
	712, 801, 1813, 461, 982, 1804, 1487, 633, 817, 657,
	658, 715, 831, 977, 1418, 842, 715, 778, 780, 782,
	784, 786, 788, 789, 779, 781, 650, 785, 787, 1814,
	790, 665, 1805, 805, 897, 900, 901, 902, 903, 904,
	905, 1496, 906, 907, 908, 909, 910, 885, 886, 887,
	888, 869, 870, 898, 1417, 872, 1839, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 889, 890, 891,
	892, 893, 894, 895, 896, 1419, 1215, 724, 723, 733,
	734, 726, 727, 728, 729, 730, 731, 732, 725, 1497,
	632, 735, 126, 713, 714, 712, 911, 728, 729, 730,
	731, 732, 725, 636, 126, 735, 920, 921, 1816, 1234,
	1815, 715, 1806, 939, 1273, 1274, 1275, 1796, 66, 126,
	714, 712, 1840, 1095, 1096, 126, 1775, 1673, 126, 960,
	1007, 126, 899, 372, 1281, 1643, 815, 715, 372, 372,
	372, 126, 372, 372, 115, 116, 117, 1614, 1029, 1498,
	1427, 488, 1415, 1295, 974, 861, 372, 372, 115, 116,
	117, 966, 1434, 1230, 1231, 1232, 965, 918, 733, 734,
	726, 727, 728, 729, 730, 731, 732, 725, 963, 1445,
	735, 848, 949, 115, 116, 117, 462, 964, 842, 478,
	1709, 959, 968, 969, 970, 75, 972, 973, 713, 714,
	712, 115, 116, 117, 971, 1387, 1028, 1005, 1092, 1708,
	978, 979, 917, 984, 33, 1030, 715, 409, 408, 411,
	412, 413, 414, 956, 639, 638, 410, 415, 1574, 372,
	713, 714, 712, 1700, 1817, 1233, 1700, 1758, 1752, 462,
	1238, 1235, 1226, 1236, 1229, 1430, 1225, 1341, 715, 1173,
	1227, 1228, 1700, 1743, 1049, 1052, 1700, 462, 1044, 1518,
	1062, 1690, 372, 372, 1237, 983, 1006, 986, 483, 77,
	1091, 1039, 462, 126, 480, 481, 448, 66, 1040, 115,
	116, 117, 1621, 1222, 711, 372, 1700, 1715, 66, 713,
	714, 712, 126, 1085, 1716, 372, 1700, 1699, 1374, 126,
	1136, 126, 763, 1097, 914, 1636, 1135, 715, 1557, 126,
	126, 1613, 462, 1624, 462, 1115, 372, 1559, 1558, 372,
	1031, 1032, 1555, 1556, 1341, 127, 1070, 1071, 127, 1041,
	372, 372, 1648, 373, 1103, 127, 1555, 1554, 1109, 1103,
	462, 1115, 1130, 1115, 462, 1040, 726, 727, 728, 729,
	730, 731, 732, 725, 1388, 1106, 735, 1143, 1105, 711,
	462, 1137, 1110, 373, 1113, 33, 373, 127, 373, 1139,
	914, 913, 1312, 1132, 1136, 1507, 1170, 860, 859, 1649,
	1650, 1651, 1114, 455, 1518, 372, 127, 1104, 1311, 1103,
	1135, 1107, 1518, 1093, 1221, 127, 1074, 954, 845, 1797,
	127, 1138, 1179, 1662, 1180, 1181, 1182, 1183, 1133, 1573,
	1141, 1201, 1142, 1632, 916, 126, 126, 126, 126, 126,
	1191, 1192, 1193, 1194, 1200, 126, 126, 1202, 1038, 126,
	372, 1158, 1115, 1546, 1220, 1137, 1045, 1046, 1444, 66,
	1051, 1054, 1055, 1135, 912, 1392, 126, 1196, 1190, 1189,
	91, 33, 126, 126, 126, 1652, 1103, 66, 126, 372,
	1424, 112, 1223, 1423, 1447, 1069, 1522, 1523, 1072, 1073,
	1663, 1197, 1198, 1212, 1216, 1219, 1348, 1827, 1253, 1254,
	1255, 1256, 1257, 1266, 1264, 1214, 1239, 1270, 1261, 1262,
	1213, 1822, 1263, 1548, 1525, 1038, 1507, 1005, 1349, 1653,
	1654, 1432, 987, 1186, 1187, 1188, 958, 1424, 1528, 1265,
	1365, 1527, 1362, 488, 1363, 1366, 488, 1269, 1361, 1364,
	1801, 1271, 462, 1783, 1499, 66, 1330, 1155, 814, 1120,
	1123, 1124, 1125, 1121, 1290, 1122, 1126, 1778, 1625, 1522,
	1523, 1339, 1338, 468, 1367, 126, 1124, 1125, 1120, 1123,
	1124, 1125, 1121, 126, 1122, 1126, 1006, 469, 1770, 1767,
	1803, 1276, 724, 723, 733, 734, 726, 727, 728, 729,
	730, 731, 732, 725, 1787, 126, 735, 1789, 1795, 1794,
	818, 819, 471, 1739, 470, 1328, 126, 126, 126, 126,
	126, 1289, 1737, 1329, 953, 449, 1428, 453, 126, 1057,
	1355, 1305, 126, 1423, 1410, 126, 126, 1346, 95, 126,
	126, 126, 922, 1058, 1343, 1350, 127, 807, 858, 663,
	1403, 107, 1386, 1749, 372, 801, 1318, 1748, 373, 808,
	1327, 1326, 1688, 1393, 1389, 1372, 1401, 373, 1399, 1399,
	1333, 1394, 1334, 468, 1375, 1619, 1344, 1342, 1377, 1571,
	1088, 373, 373, 108, 1095, 1096, 122, 469, 963, 1357,
	1358, 1356, 1360, 1217, 1359, 957, 1368, 1710, 1657, 1376,
	1373, 1128, 456, 457, 459, 1808, 1381, 1400, 1378, 1807,
	465, 466, 471, 372, 470, 1337, 1042, 1043, 1792, 1771,
	77, 1433, 1618, 1336, 1391, 1608, 1395, 1396, 1397, 460,
	1617, 1502, 1341, 694, 1829, 1828, 1829, 1285, 1286, 1300,
	1297, 126, 828, 821, 1740, 1641, 1089, 372, 126, 1416,
	455, 1426, 75, 80, 72, 1, 1075, 127, 1303, 1086,
	799, 359, 1425, 1820, 372, 113, 724, 723, 733, 734,
	726, 727, 728, 729, 730, 731, 732, 725, 386, 1577,
	735, 1659, 373, 929, 1711, 127, 1218, 127, 127, 372,
	373, 1435, 1420, 1206, 1161, 1028, 373, 1152, 88, 1409,
	620, 1411, 1412, 1413, 1437, 87, 1436, 678, 1438, 1160,
	1159, 1440, 1701, 1405, 1464, 1177, 1639, 1547, 1453, 1454,
	1402, 1456, 1746, 1455, 866, 864, 372, 865, 1484, 863,
	868, 867, 862, 352, 988, 369, 126, 1127, 1478, 1407,
	1408, 854, 822, 1477, 1241, 1240, 372, 925, 1560, 1462,
	1039, 1155, 372, 372, 1174, 349, 689, 1040, 1508, 354,
	743, 1335, 1382, 489, 1355, 1465, 1505, 482, 1511, 1513,
	94, 1793, 1768, 1766, 1736, 126, 1684, 1769, 1734, 1802,
	1517, 1786, 1087, 810, 1616, 1501, 1304, 772, 1059, 372,
	837, 372, 392, 372, 998, 1526, 1399, 1399, 1399, 1500,
	1530, 1539, 1532, 1516, 1533, 407, 404, 405, 1098, 1347,
	717, 1552, 390, 384, 1531, 829, 1119, 1117, 1116, 841,
	1538, 1524, 1520, 835, 421, 32, 1102, 1249, 127, 1568,
	1441, 1541, 126, 126, 1543, 1544, 1545, 1540, 464, 1170,
	127, 92, 1056, 1724, 1604, 463, 58, 36, 1578, 372,
	372, 372, 1564, 126, 376, 127, 1779, 32, 1563, 702,
	472, 127, 30, 29, 127, 1565, 1566, 127, 28, 373,
	23, 22, 21, 20, 373, 373, 373, 127, 373, 373,
	19, 25, 18, 17, 1587, 1283, 1463, 1583, 1584, 1284,
	16, 106, 373, 373, 102, 1569, 1570, 45, 43, 454,
	1291, 1292, 1592, 41, 40, 652, 1298, 1488, 27, 1301,
	1302, 26, 15, 14, 13, 12, 1582, 1308, 11, 10,
	9, 1310, 1550, 1551, 1313, 1314, 1315, 1316, 1317, 5,
	4, 705, 1589, 1590, 1355, 1591, 24, 1620, 1593, 372,
	1595, 761, 1628, 1463, 2, 0, 1629, 372, 0, 1389,
	0, 0, 0, 0, 0, 1634, 0, 0, 1635, 0,
	0, 0, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 0, 372, 0, 1658,
	0, 0, 0, 0, 1370, 1371, 1155, 0, 1155, 0,
	0, 1666, 1655, 0, 0, 0, 0, 0, 373, 373,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	372, 372, 372, 126, 372, 1676, 1678, 1679, 0, 0,
	0, 373, 0, 0, 1672, 372, 0, 372, 127, 0,
	0, 373, 0, 372, 0, 127, 1680, 127, 1696, 1687,
	1511, 0, 1693, 0, 1511, 127, 127, 1689, 1695, 0,
	0, 0, 373, 0, 1697, 373, 1615, 1691, 1698, 1705,
	0, 0, 1664, 372, 126, 0, 373, 373, 1718, 0,
	0, 0, 0, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 0, 0, 0, 0, 0, 0, 0,
	0, 1714, 0, 0, 0, 1733, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 0, 0, 1741, 0, 1511,
	0, 0, 0, 1642, 372, 1644, 0, 372, 372, 0,
	0, 373, 0, 0, 0, 0, 0, 1719, 1757, 0,
	1756, 0, 0, 0, 0, 0, 1155, 0, 0, 418,
	1460, 1461, 0, 372, 1750, 126, 1763, 0, 0, 1665,
	1772, 127, 127, 127, 127, 127, 1355, 1706, 0, 1707,
	1777, 127, 127, 1776, 0, 127, 373, 1782, 0, 0,
	0, 1791, 1790, 1682, 1661, 0, 683, 0, 0, 0,
	0, 0, 127, 0, 0, 683, 1800, 0, 127, 127,
	127, 0, 0, 0, 127, 373, 371, 0, 372, 0,
	0, 32, 0, 1809, 0, 0, 1514, 0, 1774, 0,
	0, 0, 744, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 1826, 0, 0, 0, 490, 1529, 0, 624,
	0, 631, 1837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 764, 765, 766,
	767, 768, 769, 770, 771, 0, 774, 777, 777, 777,
	783, 777, 777, 783, 777, 791, 792, 793, 794, 795,
	796, 797, 1457, 0, 0, 0, 0, 0, 0, 32,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 724, 723, 733, 734, 726, 727, 728, 729,
	730, 731, 732, 725, 0, 838, 735, 475, 0, 0,
	0, 127, 0, 0, 1661, 1155, 0, 1586, 0, 0,
	0, 1588, 127, 127, 127, 127, 127, 0, 0, 0,
	0, 0, 1597, 1598, 127, 0, 0, 0, 127, 0,
	0, 127, 127, 0, 0, 127, 127, 127, 0, 1612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 0, 0, 0, 719, 0, 722, 1622, 1623, 1602,
	383, 1627, 736, 737, 738, 739, 740, 741, 742, 1607,
	720, 721, 718, 724, 723, 733, 734, 726, 727, 728,
	729, 730, 731, 732, 725, 0, 1003, 735, 0, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 0, 1282, 0, 0, 0, 373,
	724, 723, 733, 734, 726, 727, 728, 729, 730, 731,
	732, 725, 0, 0, 735, 724, 723, 733, 734, 726,
	727, 728, 729, 730, 731, 732, 725, 127, 0, 735,
	115, 116, 117, 373, 127, 0, 1066, 0, 0, 0,
	0, 0, 0, 0, 1677, 0, 0, 0, 0, 0,
	373, 724, 723, 733, 734, 726, 727, 728, 729, 730,
	731, 732, 725, 0, 0, 735, 0, 683, 0, 0,
	0, 490, 683, 683, 683, 373, 683, 683, 0, 0,
	490, 0, 0, 0, 340, 0, 0, 0, 0, 0,
	683, 683, 0, 343, 701, 703, 0, 0, 0, 0,
	0, 353, 1720, 1721, 1722, 1723, 0, 1727, 0, 1728,
	1729, 1730, 373, 1731, 1732, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 0, 351, 0, 0, 373, 373,
	0, 0, 0, 0, 358, 0, 1751, 723, 733, 734,
	726, 727, 728, 729, 730, 731, 732, 725, 0, 1759,
	735, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1601, 0, 0, 373, 0, 373, 0, 373,
	0, 0, 0, 341, 0, 0, 0, 1600, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 490, 0, 0, 0, 0, 0, 855,
	355, 344, 345, 0, 356, 357, 364, 0, 127, 127,
	348, 350, 361, 346, 347, 366, 365, 0, 342, 363,
	362, 0, 0, 0, 0, 373, 373, 373, 0, 127,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 0, 0, 0, 1830, 1831,
	0, 0, 0, 0, 0, 0, 0, 0, 1277, 1278,
	1279, 0, 0, 716, 724, 723, 733, 734, 726, 727,
	728, 729, 730, 731, 732, 725, 0, 0, 735, 724,
	723, 733, 734, 726, 727, 728, 729, 730, 731, 732,
	725, 125, 0, 735, 367, 0, 0, 0, 0, 383,
	0, 125, 0, 0, 0, 0, 0, 0, 773, 1599,
	0, 0, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 373, 476, 476, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 809, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 0, 125, 373, 683, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 490, 0, 0, 0, 0, 490, 490, 490,
	0, 490, 490, 0, 0, 0, 373, 373, 373, 127,
	373, 0, 0, 0, 0, 490, 490, 0, 0, 0,
	0, 373, 0, 373, 0, 0, 0, 0, 0, 373,
	0, 724, 723, 733, 734, 726, 727, 728, 729, 730,
	731, 732, 725, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 454, 0, 0, 373,
	127, 724, 723, 733, 734, 726, 727, 728, 729, 730,
	731, 732, 725, 0, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1033, 0,
	490, 0, 0, 0, 0, 1325, 0, 373, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	373, 0, 0, 373, 373, 0, 0, 0, 0, 838,
	0, 1067, 1068, 0, 0, 0, 1351, 1352, 0, 0,
	838, 838, 838, 838, 838, 0, 0, 0, 0, 373,
	0, 127, 0, 0, 1099, 0, 1131, 0, 0, 838,
	1458, 1459, 0, 838, 825, 0, 0, 490, 0, 0,
	0, 0, 0, 0, 967, 1479, 1480, 0, 1481, 1482,
	0, 0, 0, 0, 0, 490, 0, 0, 490, 0,
	1489, 1490, 0, 0, 0, 0, 0, 0, 0, 490,
	624, 0, 985, 0, 373, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 0, 994,
	995, 996, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1047, 1048, 0, 0, 0, 0,
	0, 0, 1549, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 1585, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 125, 844, 0, 0, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1667, 1668,
	1669, 1670, 1671, 0, 0, 0, 1674, 1675, 0, 0,
	0, 0, 0, 490, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 1603, 0,
	0, 0, 0, 0, 0, 0, 1609, 1610, 1611, 0,
	0, 125, 0, 0, 0, 0, 0, 125, 0, 0,
	125, 0, 0, 962, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1656, 0, 0, 1331,
	1332, 812, 0, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 0,
	0, 0, 476, 962, 0, 0, 0, 476, 476, 0,
	0, 476, 476, 476, 0, 0, 1512, 1064, 32, 490,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 476, 476, 476, 476,
	476, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 490, 0, 0, 1063, 0,
	0, 1515, 1495, 0, 125, 0, 0, 1823, 0, 0,
	962, 125, 0, 125, 0, 0, 0, 0, 0, 0,
	0, 125, 125, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 0,
	490, 0, 631, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1579, 1580,
	1581, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 125, 125, 125,
	125, 125, 0, 0, 0, 0, 0, 125, 125, 0,
	0, 125, 0, 0, 0, 1818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 1503,
	0, 0, 0, 0, 1267, 1268, 125, 0, 1063, 0,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 0,
	0, 0, 0, 0, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 476, 476,
	0, 0, 0, 1638, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 1638,
	1638, 1638, 0, 1681, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 1692, 0, 1694, 0, 0, 0,
	0, 0, 1638, 0, 0, 0, 476, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 125, 125,
	125, 125, 125, 0, 0, 1606, 0, 0, 0, 0,
	1369, 0, 1638, 0, 125, 0, 0, 125, 125, 0,
	0, 125, 1379, 962, 0, 0, 0, 0, 0, 0,
	383, 0, 0, 0, 0, 0, 0, 1630, 0, 0,
	1631, 0, 0, 1633, 0, 0, 0, 0, 0, 0,
	1745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1753, 0, 0, 490, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 1773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 1686, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 592, 0, 0,
	545, 607, 518, 535, 616, 536, 539, 577, 502, 558,
	237, 533, 0, 522, 498, 529, 499, 520, 547, 166,
	551, 517, 594, 561, 606, 201, 125, 523, 249, 579,
	280, 156, 209, 207, 302, 171, 167, 165, 155, 188,
	214, 248, 298, 242, 613, 204, 568, 0, 289, 223,
	0, 0, 0, 549, 596, 556, 588, 544, 578, 507,
	567, 608, 534, 575, 609, 192, 154, 132, 234, 290,
	173, 0, 0, 0, 115, 116, 117, 0, 1156, 1157,
	0, 0, 0, 0, 0, 150, 0, 572, 603, 531,
	574, 576, 619, 497, 569, 0, 500, 503, 615, 599,
	526, 527, 1390, 1064, 0, 0, 0, 125, 0, 548,
	557, 585, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 524, 0, 566, 0, 0, 0, 504, 501, 0,
	0, 0, 0, 546, 0, 0, 0, 506, 0, 525,
	586, 0, 495, 178, 590, 598, 543, 326, 602, 541,
	540, 605, 260, 0, 294, 182, 200, 146, 197, 129,
	141, 0, 180, 233, 267, 271, 595, 521, 530, 157,
	528, 269, 246, 315, 565, 250, 268, 205, 304, 261,
	314, 327, 328, 163, 227, 321, 299, 324, 336, 142,
	160, 240, 295, 318, 286, 222, 301, 196, 285, 134,
	297, 312, 151, 279, 0, 0, 0, 136, 310, 293,
	220, 193, 194, 135, 0, 265, 164, 176, 159, 236,
	307, 308, 158, 337, 143, 323, 138, 144, 322, 229,
	303, 311, 221, 213, 137, 309, 219, 212, 199, 170,
	184, 258, 208, 259, 185, 225, 224, 226, 0, 133,
	0, 291, 319, 338, 148, 516, 591, 300, 332, 335,
	0, 262, 149, 177, 169, 257, 175, 202, 331, 333,
	334, 228, 145, 187, 287, 198, 206, 583, 618, 245,
	270, 152, 317, 288, 511, 515, 509, 510, 559, 560,
	512, 610, 611, 612, 587, 505, 0, 513, 514, 0,
	593, 600, 601, 564, 128, 139, 203, 614, 263, 174,
	320, 496, 508, 162, 519, 0, 0, 532, 537, 538,
	550, 552, 553, 554, 555, 563, 570, 571, 573, 580,
	581, 582, 584, 589, 597, 617, 130, 131, 140, 147,
	153, 161, 168, 172, 179, 183, 186, 189, 190, 191,
	195, 211, 215, 216, 217, 218, 230, 231, 232, 235,
	238, 239, 241, 243, 244, 247, 251, 252, 253, 254,
	255, 256, 264, 266, 272, 273, 274, 275, 276, 277,
	278, 281, 282, 283, 284, 292, 296, 305, 306, 316,
	325, 329, 181, 313, 330, 0, 210, 562, 604, 592,
	0, 0, 545, 607, 518, 535, 616, 536, 539, 577,
	502, 558, 237, 533, 0, 522, 498, 529, 499, 520,
	547, 166, 551, 517, 594, 561, 606, 201, 0, 523,
	249, 579, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 613, 204, 568, 0,
	289, 223, 0, 0, 0, 549, 596, 556, 588, 544,
	578, 507, 567, 608, 534, 575, 609, 192, 154, 132,
	234, 290, 173, 0, 0, 0, 115, 116, 117, 0,
	1156, 1157, 0, 0, 0, 0, 0, 150, 0, 572,
	603, 531, 574, 576, 619, 497, 569, 0, 500, 503,
	615, 599, 526, 527, 0, 0, 0, 0, 0, 0,
	0, 548, 557, 585, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 0, 566, 0, 0, 0, 504,
	501, 0, 0, 0, 0, 546, 0, 0, 0, 506,
	0, 525, 586, 0, 495, 178, 590, 598, 543, 326,
	602, 541, 540, 605, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 595, 521,
	530, 157, 528, 269, 246, 315, 565, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 516, 591, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 583,
	618, 245, 270, 152, 317, 288, 511, 515, 509, 510,
	559, 560, 512, 610, 611, 612, 587, 505, 0, 513,
	514, 0, 593, 600, 601, 564, 128, 139, 203, 614,
	263, 174, 320, 496, 508, 162, 519, 0, 0, 532,
	537, 538, 550, 552, 553, 554, 555, 563, 570, 571,
	573, 580, 581, 582, 584, 589, 597, 617, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 0, 210, 562,
	604, 592, 0, 0, 545, 607, 518, 535, 616, 536,
	539, 577, 502, 558, 237, 533, 0, 522, 498, 529,
	499, 520, 547, 166, 551, 517, 594, 561, 606, 201,
	0, 523, 249, 579, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 613, 204,
	568, 0, 289, 223, 0, 0, 0, 549, 596, 556,
	588, 544, 578, 507, 567, 608, 534, 575, 609, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 572, 603, 531, 574, 576, 619, 497, 569, 0,
	500, 503, 615, 599, 526, 527, 0, 0, 0, 0,
	0, 0, 0, 548, 557, 585, 542, 0, 0, 0,
	0, 0, 0, 1504, 0, 524, 0, 566, 0, 0,
	0, 504, 501, 0, 0, 0, 0, 546, 0, 0,
	0, 506, 0, 525, 586, 0, 495, 178, 590, 598,
	543, 326, 602, 541, 540, 605, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	595, 521, 530, 157, 528, 269, 246, 315, 565, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 144, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 516,
	591, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 228, 145, 187, 287, 198,
	206, 583, 618, 245, 270, 152, 317, 288, 511, 515,
	509, 510, 559, 560, 512, 610, 611, 612, 587, 505,
	0, 513, 514, 0, 593, 600, 601, 564, 128, 139,
	203, 614, 263, 174, 320, 496, 508, 162, 519, 0,
	0, 532, 537, 538, 550, 552, 553, 554, 555, 563,
	570, 571, 573, 580, 581, 582, 584, 589, 597, 617,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 0,
	210, 562, 604, 592, 0, 0, 545, 607, 518, 535,
	616, 536, 539, 577, 502, 558, 237, 533, 0, 522,
	498, 529, 499, 520, 547, 166, 551, 517, 594, 561,
	606, 201, 0, 523, 249, 579, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	613, 204, 568, 0, 289, 223, 0, 0, 0, 549,
	596, 556, 588, 544, 578, 507, 567, 608, 534, 575,
	609, 192, 154, 132, 234, 290, 173, 66, 0, 0,
	115, 116, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 572, 603, 531, 574, 576, 619, 497,
	569, 0, 500, 503, 615, 599, 526, 527, 0, 0,
	0, 0, 0, 0, 0, 548, 557, 585, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 524, 0, 566,
	0, 0, 0, 504, 501, 0, 0, 0, 0, 546,
	0, 0, 0, 506, 0, 525, 586, 0, 495, 178,
	590, 598, 543, 326, 602, 541, 540, 605, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 595, 521, 530, 157, 528, 269, 246, 315,
	565, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 312, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 144, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 516, 591, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 228, 145, 187,
	287, 198, 206, 583, 618, 245, 270, 152, 317, 288,
	511, 515, 509, 510, 559, 560, 512, 610, 611, 612,
	587, 505, 0, 513, 514, 0, 593, 600, 601, 564,
	128, 139, 203, 614, 263, 174, 320, 496, 508, 162,
	519, 0, 0, 532, 537, 538, 550, 552, 553, 554,
	555, 563, 570, 571, 573, 580, 581, 582, 584, 589,
	597, 617, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 0, 210, 562, 604, 592, 0, 0, 545, 607,
	518, 535, 616, 536, 539, 577, 502, 558, 237, 533,
	0, 522, 498, 529, 499, 520, 547, 166, 551, 517,
	594, 561, 606, 201, 0, 523, 249, 579, 280, 156,
	209, 207, 302, 171, 167, 165, 155, 188, 214, 248,
	298, 242, 613, 204, 568, 0, 289, 223, 0, 0,
	0, 549, 596, 556, 588, 544, 578, 507, 567, 608,
	534, 575, 609, 192, 154, 132, 234, 290, 173, 0,
	0, 0, 115, 116, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 572, 603, 531, 574, 576,
	619, 497, 569, 0, 500, 503, 615, 599, 526, 527,
	0, 0, 0, 0, 0, 0, 0, 548, 557, 585,
	542, 0, 0, 0, 0, 0, 0, 1380, 0, 524,
	0, 566, 0, 0, 0, 504, 501, 0, 0, 0,
	0, 546, 0, 0, 0, 506, 0, 525, 586, 0,
	495, 178, 590, 598, 543, 326, 602, 541, 540, 605,
	260, 0, 294, 182, 200, 146, 197, 129, 141, 0,
	180, 233, 267, 271, 595, 521, 530, 157, 528, 269,
	246, 315, 565, 250, 268, 205, 304, 261, 314, 327,
	328, 163, 227, 321, 299, 324, 336, 142, 160, 240,
	295, 318, 286, 222, 301, 196, 285, 134, 297, 312,
	151, 279, 0, 0, 0, 136, 310, 293, 220, 193,
	194, 135, 0, 265, 164, 176, 159, 236, 307, 308,
	158, 337, 143, 323, 138, 144, 322, 229, 303, 311,
	221, 213, 137, 309, 219, 212, 199, 170, 184, 258,
	208, 259, 185, 225, 224, 226, 0, 133, 0, 291,
	319, 338, 148, 516, 591, 300, 332, 335, 0, 262,
	149, 177, 169, 257, 175, 202, 331, 333, 334, 228,
	145, 187, 287, 198, 206, 583, 618, 245, 270, 152,
	317, 288, 511, 515, 509, 510, 559, 560, 512, 610,
	611, 612, 587, 505, 0, 513, 514, 0, 593, 600,
	601, 564, 128, 139, 203, 614, 263, 174, 320, 496,
	508, 162, 519, 0, 0, 532, 537, 538, 550, 552,
	553, 554, 555, 563, 570, 571, 573, 580, 581, 582,
	584, 589, 597, 617, 130, 131, 140, 147, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 256,
	264, 266, 272, 273, 274, 275, 276, 277, 278, 281,
	282, 283, 284, 292, 296, 305, 306, 316, 325, 329,
	181, 313, 330, 0, 210, 562, 604, 592, 0, 0,
	545, 607, 518, 535, 616, 536, 539, 577, 502, 558,
	237, 533, 0, 522, 498, 529, 499, 520, 547, 166,
	551, 517, 594, 561, 606, 201, 0, 523, 249, 579,
	280, 156, 209, 207, 302, 171, 167, 165, 155, 188,
	214, 248, 298, 242, 613, 204, 568, 0, 289, 223,
	0, 0, 0, 549, 596, 556, 588, 544, 578, 507,
	567, 608, 534, 575, 609, 192, 154, 132, 234, 290,
	173, 0, 0, 0, 115, 116, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 572, 603, 531,
	574, 576, 619, 497, 569, 0, 500, 503, 615, 599,
	526, 527, 0, 0, 0, 0, 0, 0, 0, 548,
	557, 585, 542, 0, 0, 0, 0, 0, 0, 1108,
	0, 524, 0, 566, 0, 0, 0, 504, 501, 0,
	0, 0, 0, 546, 0, 0, 0, 506, 0, 525,
	586, 0, 495, 178, 590, 598, 543, 326, 602, 541,
	540, 605, 260, 0, 294, 182, 200, 146, 197, 129,
	141, 0, 180, 233, 267, 271, 595, 521, 530, 157,
	528, 269, 246, 315, 565, 250, 268, 205, 304, 261,
	314, 327, 328, 163, 227, 321, 299, 324, 336, 142,
	160, 240, 295, 318, 286, 222, 301, 196, 285, 134,
	297, 312, 151, 279, 0, 0, 0, 136, 310, 293,
	220, 193, 194, 135, 0, 265, 164, 176, 159, 236,
	307, 308, 158, 337, 143, 323, 138, 144, 322, 229,
	303, 311, 221, 213, 137, 309, 219, 212, 199, 170,
	184, 258, 208, 259, 185, 225, 224, 226, 0, 133,
	0, 291, 319, 338, 148, 516, 591, 300, 332, 335,
	0, 262, 149, 177, 169, 257, 175, 202, 331, 333,
	334, 228, 145, 187, 287, 198, 206, 583, 618, 245,
	270, 152, 317, 288, 511, 515, 509, 510, 559, 560,
	512, 610, 611, 612, 587, 505, 0, 513, 514, 0,
	593, 600, 601, 564, 128, 139, 203, 614, 263, 174,
	320, 496, 508, 162, 519, 0, 0, 532, 537, 538,
	550, 552, 553, 554, 555, 563, 570, 571, 573, 580,
	581, 582, 584, 589, 597, 617, 130, 131, 140, 147,
	153, 161, 168, 172, 179, 183, 186, 189, 190, 191,
	195, 211, 215, 216, 217, 218, 230, 231, 232, 235,
	238, 239, 241, 243, 244, 247, 251, 252, 253, 254,
	255, 256, 264, 266, 272, 273, 274, 275, 276, 277,
	278, 281, 282, 283, 284, 292, 296, 305, 306, 316,
	325, 329, 181, 313, 330, 0, 210, 562, 604, 592,
	0, 0, 545, 607, 518, 535, 616, 536, 539, 577,
	502, 558, 237, 533, 0, 522, 498, 529, 499, 520,
	547, 166, 551, 517, 594, 561, 606, 201, 0, 523,
	249, 579, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 613, 204, 568, 0,
	289, 223, 0, 0, 0, 549, 596, 556, 588, 544,
	578, 507, 567, 608, 534, 575, 609, 192, 154, 132,
	234, 290, 173, 0, 0, 0, 115, 116, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 572,
	603, 531, 574, 576, 619, 497, 569, 0, 500, 503,
	615, 599, 526, 527, 0, 0, 0, 0, 0, 0,
	0, 548, 557, 585, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 524, 0, 566, 0, 0, 0, 504,
	501, 0, 0, 0, 0, 546, 0, 0, 0, 506,
	0, 525, 586, 0, 495, 178, 590, 598, 543, 326,
	602, 541, 540, 605, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 595, 521,
	530, 157, 528, 269, 246, 315, 565, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 516, 591, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 583,
	618, 245, 270, 152, 317, 288, 511, 515, 509, 510,
	559, 560, 512, 610, 611, 612, 587, 505, 0, 513,
	514, 0, 593, 600, 601, 564, 128, 139, 203, 614,
	263, 174, 320, 496, 508, 162, 519, 0, 0, 532,
	537, 538, 550, 552, 553, 554, 555, 563, 570, 571,
	573, 580, 581, 582, 584, 589, 597, 617, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 0, 210, 562,
	604, 592, 0, 0, 545, 607, 518, 535, 616, 536,
	539, 577, 502, 558, 237, 533, 0, 522, 498, 529,
	499, 520, 547, 166, 551, 517, 594, 561, 606, 201,
	0, 523, 249, 579, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 613, 204,
	568, 0, 289, 223, 0, 0, 0, 549, 596, 556,
	588, 544, 578, 507, 567, 608, 534, 575, 609, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 572, 603, 531, 574, 576, 619, 497, 569, 0,
	500, 503, 615, 599, 526, 527, 0, 0, 0, 0,
	0, 0, 0, 548, 557, 585, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 524, 0, 566, 0, 0,
	0, 504, 501, 0, 0, 0, 0, 546, 0, 0,
	0, 506, 0, 525, 586, 0, 495, 178, 590, 598,
	543, 326, 602, 541, 540, 605, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	595, 521, 530, 157, 528, 269, 246, 315, 565, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 493, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 516,
	591, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 494, 492, 487, 486, 198,
	206, 583, 618, 245, 270, 152, 317, 288, 511, 515,
	509, 510, 559, 560, 512, 610, 611, 612, 587, 505,
	0, 513, 514, 0, 593, 600, 601, 564, 128, 139,
	203, 614, 263, 174, 320, 496, 508, 162, 519, 0,
	0, 532, 537, 538, 550, 552, 553, 554, 555, 563,
	570, 571, 573, 580, 581, 582, 584, 589, 597, 617,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 0,
	210, 562, 604, 592, 0, 0, 545, 607, 518, 535,
	616, 536, 539, 577, 502, 558, 237, 533, 0, 522,
	498, 529, 499, 520, 547, 166, 551, 517, 594, 561,
	606, 201, 0, 523, 249, 579, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	613, 204, 568, 0, 289, 223, 0, 0, 0, 549,
	596, 556, 588, 544, 578, 507, 567, 608, 534, 575,
	609, 192, 154, 132, 234, 290, 173, 0, 0, 0,
	115, 116, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 572, 603, 531, 574, 576, 619, 497,
	569, 0, 500, 503, 615, 599, 526, 527, 0, 0,
	0, 0, 0, 0, 0, 548, 557, 585, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 524, 0, 566,
	0, 0, 0, 504, 501, 0, 0, 0, 0, 546,
	0, 0, 0, 506, 0, 525, 586, 0, 495, 178,
	590, 598, 543, 326, 602, 541, 540, 605, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 595, 521, 530, 157, 528, 269, 246, 315,
	565, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 846, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 493, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 516, 591, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 494, 492, 487,
	486, 198, 206, 583, 618, 245, 270, 152, 317, 288,
	511, 515, 509, 510, 559, 560, 512, 610, 611, 612,
	587, 505, 0, 513, 514, 0, 593, 600, 601, 564,
	128, 139, 203, 614, 263, 174, 320, 496, 508, 162,
	519, 0, 0, 532, 537, 538, 550, 552, 553, 554,
	555, 563, 570, 571, 573, 580, 581, 582, 584, 589,
	597, 617, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 0, 210, 562, 604, 592, 0, 0, 545, 607,
	518, 535, 616, 536, 539, 577, 502, 558, 237, 533,
	0, 522, 498, 529, 499, 520, 547, 166, 551, 517,
	594, 561, 606, 201, 0, 523, 249, 579, 280, 156,
	209, 207, 302, 171, 167, 165, 155, 188, 214, 248,
	298, 242, 613, 204, 568, 0, 289, 223, 0, 0,
	0, 549, 596, 556, 588, 544, 578, 507, 567, 608,
	534, 575, 609, 192, 154, 132, 234, 290, 173, 0,
	0, 0, 115, 116, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 572, 603, 531, 574, 576,
	619, 497, 569, 0, 500, 503, 615, 599, 526, 527,
	0, 0, 0, 0, 0, 0, 0, 548, 557, 585,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 524,
	0, 566, 0, 0, 0, 504, 501, 0, 0, 0,
	0, 546, 0, 0, 0, 506, 0, 525, 586, 0,
	495, 178, 590, 598, 543, 326, 602, 541, 540, 605,
	260, 0, 294, 182, 200, 146, 197, 129, 141, 0,
	180, 233, 267, 271, 595, 521, 530, 157, 528, 269,
	246, 315, 565, 250, 268, 205, 304, 261, 314, 327,
	328, 163, 227, 321, 299, 324, 336, 142, 160, 240,
	295, 318, 286, 222, 301, 196, 285, 134, 297, 484,
	151, 279, 0, 0, 0, 136, 310, 293, 220, 193,
	194, 135, 0, 265, 164, 176, 159, 236, 307, 308,
	158, 337, 143, 323, 138, 493, 322, 229, 303, 311,
	221, 213, 137, 309, 219, 212, 199, 170, 184, 258,
	208, 259, 185, 225, 224, 226, 0, 133, 0, 291,
	319, 338, 148, 516, 591, 300, 332, 335, 0, 262,
	149, 177, 169, 257, 175, 202, 331, 333, 334, 494,
	492, 487, 486, 198, 206, 583, 618, 245, 270, 152,
	317, 288, 511, 515, 509, 510, 559, 560, 512, 610,
	611, 612, 587, 505, 0, 513, 514, 0, 593, 600,
	601, 564, 128, 139, 203, 614, 263, 174, 320, 496,
	508, 162, 519, 0, 0, 532, 537, 538, 550, 552,
	553, 554, 555, 563, 570, 571, 573, 580, 581, 582,
	584, 589, 597, 617, 130, 131, 140, 147, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 256,
	264, 266, 272, 273, 274, 275, 276, 277, 278, 281,
	282, 283, 284, 292, 296, 305, 306, 316, 325, 329,
	181, 313, 330, 237, 210, 562, 1035, 0, 388, 0,
	0, 0, 166, 0, 387, 0, 0, 0, 201, 0,
	1036, 249, 0, 280, 156, 209, 207, 302, 171, 167,
	165, 155, 188, 214, 248, 298, 242, 431, 204, 0,
	0, 289, 223, 0, 0, 0, 0, 0, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	132, 234, 290, 173, 66, 0, 0, 115, 116, 117,
	409, 408, 411, 412, 413, 414, 0, 0, 150, 410,
	415, 416, 417, 0, 0, 0, 0, 385, 402, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 400, 474, 0, 0, 0, 445, 0, 401, 0,
	0, 394, 395, 397, 396, 398, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 444, 0, 0,
	326, 0, 0, 442, 0, 260, 0, 294, 182, 200,
	146, 197, 129, 141, 0, 180, 233, 267, 271, 0,
	0, 0, 157, 0, 269, 246, 315, 0, 250, 268,
	205, 304, 261, 314, 327, 328, 163, 227, 321, 299,
	324, 336, 142, 160, 240, 295, 318, 286, 222, 301,
	196, 285, 134, 297, 312, 151, 279, 0, 0, 0,
	136, 310, 293, 220, 193, 194, 135, 0, 265, 164,
	176, 159, 236, 307, 308, 158, 337, 143, 323, 138,
	144, 322, 229, 303, 311, 221, 213, 137, 309, 219,
	212, 199, 170, 184, 258, 208, 259, 185, 225, 224,
	226, 0, 133, 0, 291, 319, 338, 148, 0, 0,
	300, 332, 335, 0, 262, 149, 177, 169, 257, 175,
	202, 331, 333, 334, 228, 145, 187, 287, 198, 206,
	0, 0, 245, 270, 152, 317, 288, 432, 443, 438,
	439, 436, 437, 0, 435, 434, 433, 446, 424, 425,
	426, 427, 429, 0, 440, 441, 428, 128, 139, 203,
	0, 263, 174, 320, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	131, 140, 147, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 256, 264, 266, 272, 273, 274,
	275, 276, 277, 278, 281, 282, 283, 284, 292, 296,
	305, 306, 316, 325, 329, 181, 313, 330, 237, 210,
	0, 0, 0, 388, 0, 0, 0, 166, 0, 387,
	0, 0, 0, 201, 0, 0, 249, 0, 280, 156,
	209, 207, 302, 171, 167, 165, 155, 188, 214, 248,
	298, 242, 431, 204, 0, 0, 289, 223, 0, 0,
	0, 0, 0, 422, 423, 0, 0, 0, 0, 0,
	0, 1147, 0, 192, 154, 132, 234, 290, 173, 66,
	0, 0, 115, 116, 117, 409, 408, 411, 412, 413,
	414, 0, 0, 150, 410, 415, 416, 417, 1148, 0,
	0, 0, 385, 402, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 400, 0, 0, 0,
	0, 445, 0, 401, 0, 0, 394, 395, 397, 396,
	398, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 444, 0, 0, 326, 0, 0, 442, 0,
	260, 0, 294, 182, 200, 146, 197, 129, 141, 0,
	180, 233, 267, 271, 0, 0, 0, 157, 0, 269,
	246, 315, 0, 250, 268, 205, 304, 261, 314, 327,
	328, 163, 227, 321, 299, 324, 336, 142, 160, 240,
	295, 318, 286, 222, 301, 196, 285, 134, 297, 312,
	151, 279, 0, 0, 0, 136, 310, 293, 220, 193,
	194, 135, 0, 265, 164, 176, 159, 236, 307, 308,
	158, 337, 143, 323, 138, 144, 322, 229, 303, 311,
	221, 213, 137, 309, 219, 212, 199, 170, 184, 258,
	208, 259, 185, 225, 224, 226, 0, 133, 0, 291,
	319, 338, 148, 0, 0, 300, 332, 335, 0, 262,
	149, 177, 169, 257, 175, 202, 331, 333, 334, 228,
	145, 187, 287, 198, 206, 0, 0, 245, 270, 152,
	317, 288, 432, 443, 438, 439, 436, 437, 0, 435,
	434, 433, 446, 424, 425, 426, 427, 429, 0, 440,
	441, 428, 128, 139, 203, 0, 263, 174, 320, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 131, 140, 147, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 256,
	264, 266, 272, 273, 274, 275, 276, 277, 278, 281,
	282, 283, 284, 292, 296, 305, 306, 316, 325, 329,
	181, 313, 330, 237, 210, 0, 0, 0, 388, 0,
	0, 0, 166, 0, 387, 0, 0, 0, 201, 0,
	0, 249, 0, 280, 156, 209, 207, 302, 171, 167,
	165, 155, 188, 214, 248, 298, 242, 431, 204, 0,
	0, 289, 223, 0, 0, 0, 0, 0, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	132, 234, 290, 173, 66, 0, 462, 115, 116, 117,
	409, 408, 411, 412, 413, 414, 0, 0, 150, 410,
	415, 416, 417, 0, 0, 0, 0, 385, 402, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 400, 0, 0, 0, 0, 445, 0, 401, 0,
	0, 394, 395, 397, 396, 398, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 444, 0, 0,
	326, 0, 0, 442, 0, 260, 0, 294, 182, 200,
	146, 197, 129, 141, 0, 180, 233, 267, 271, 0,
	0, 0, 157, 0, 269, 246, 315, 0, 250, 268,
	205, 304, 261, 314, 327, 328, 163, 227, 321, 299,
	324, 336, 142, 160, 240, 295, 318, 286, 222, 301,
	196, 285, 134, 297, 312, 151, 279, 0, 0, 0,
	136, 310, 293, 220, 193, 194, 135, 0, 265, 164,
	176, 159, 236, 307, 308, 158, 337, 143, 323, 138,
	144, 322, 229, 303, 311, 221, 213, 137, 309, 219,
	212, 199, 170, 184, 258, 208, 259, 185, 225, 224,
	226, 0, 133, 0, 291, 319, 338, 148, 0, 0,
	300, 332, 335, 0, 262, 149, 177, 169, 257, 175,
	202, 331, 333, 334, 228, 145, 187, 287, 198, 206,
	0, 0, 245, 270, 152, 317, 288, 432, 443, 438,
	439, 436, 437, 0, 435, 434, 433, 446, 424, 425,
	426, 427, 429, 0, 440, 441, 428, 128, 139, 203,
	0, 263, 174, 320, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	131, 140, 147, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 256, 264, 266, 272, 273, 274,
	275, 276, 277, 278, 281, 282, 283, 284, 292, 296,
	305, 306, 316, 325, 329, 181, 313, 330, 237, 210,
	0, 0, 0, 388, 0, 0, 0, 166, 0, 387,
	0, 0, 0, 201, 0, 0, 249, 0, 280, 156,
	209, 207, 302, 171, 167, 165, 155, 188, 214, 248,
	298, 242, 431, 204, 0, 0, 289, 223, 0, 0,
	0, 0, 0, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 154, 132, 234, 290, 173, 66,
	0, 0, 115, 116, 117, 409, 408, 411, 412, 413,
	414, 0, 0, 150, 410, 415, 416, 417, 0, 0,
	0, 0, 385, 402, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 400, 474, 0, 0,
	0, 445, 0, 401, 0, 0, 394, 395, 397, 396,
	398, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 444, 0, 0, 326, 0, 0, 442, 0,
	260, 0, 294, 182, 200, 146, 197, 129, 141, 0,
	180, 233, 267, 271, 0, 0, 0, 157, 0, 269,
	246, 315, 0, 250, 268, 205, 304, 261, 314, 327,
	328, 163, 227, 321, 299, 324, 336, 142, 160, 240,
	295, 318, 286, 222, 301, 196, 285, 134, 297, 312,
	151, 279, 0, 0, 0, 136, 310, 293, 220, 193,
	194, 135, 0, 265, 164, 176, 159, 236, 307, 308,
	158, 337, 143, 323, 138, 144, 322, 229, 303, 311,
	221, 213, 137, 309, 219, 212, 199, 170, 184, 258,
	208, 259, 185, 225, 224, 226, 0, 133, 0, 291,
	319, 338, 148, 0, 0, 300, 332, 335, 0, 262,
	149, 177, 169, 257, 175, 202, 331, 333, 334, 228,
	145, 187, 287, 198, 206, 0, 0, 245, 270, 152,
	317, 288, 432, 443, 438, 439, 436, 437, 0, 435,
	434, 433, 446, 424, 425, 426, 427, 429, 0, 440,
	441, 428, 128, 139, 203, 0, 263, 174, 320, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 131, 140, 147, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 256,
	264, 266, 272, 273, 274, 275, 276, 277, 278, 281,
	282, 283, 284, 292, 296, 305, 306, 316, 325, 329,
	181, 313, 330, 237, 210, 0, 0, 0, 388, 0,
	0, 0, 166, 0, 387, 0, 0, 0, 201, 0,
	0, 249, 0, 280, 156, 209, 207, 302, 171, 167,
	165, 155, 188, 214, 248, 298, 242, 431, 204, 0,
	0, 289, 223, 0, 0, 0, 0, 0, 422, 423,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 154,
	132, 234, 290, 173, 66, 0, 0, 115, 116, 117,
	409, 1053, 411, 412, 413, 414, 0, 0, 150, 410,
	415, 416, 417, 0, 0, 0, 0, 385, 402, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	399, 400, 474, 0, 0, 0, 445, 0, 401, 0,
	0, 394, 395, 397, 396, 398, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 444, 0, 0,
	326, 0, 0, 442, 0, 260, 0, 294, 182, 200,
	146, 197, 129, 141, 0, 180, 233, 267, 271, 0,
	0, 0, 157, 0, 269, 246, 315, 0, 250, 268,
	205, 304, 261, 314, 327, 328, 163, 227, 321, 299,
	324, 336, 142, 160, 240, 295, 318, 286, 222, 301,
	196, 285, 134, 297, 312, 151, 279, 0, 0, 0,
	136, 310, 293, 220, 193, 194, 135, 0, 265, 164,
	176, 159, 236, 307, 308, 158, 337, 143, 323, 138,
	144, 322, 229, 303, 311, 221, 213, 137, 309, 219,
	212, 199, 170, 184, 258, 208, 259, 185, 225, 224,
	226, 0, 133, 0, 291, 319, 338, 148, 0, 0,
	300, 332, 335, 0, 262, 149, 177, 169, 257, 175,
	202, 331, 333, 334, 228, 145, 187, 287, 198, 206,
	0, 0, 245, 270, 152, 317, 288, 432, 443, 438,
	439, 436, 437, 0, 435, 434, 433, 446, 424, 425,
	426, 427, 429, 0, 440, 441, 428, 128, 139, 203,
	0, 263, 174, 320, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	131, 140, 147, 153, 161, 168, 172, 179, 183, 186,
	189, 190, 191, 195, 211, 215, 216, 217, 218, 230,
	231, 232, 235, 238, 239, 241, 243, 244, 247, 251,
	252, 253, 254, 255, 256, 264, 266, 272, 273, 274,
	275, 276, 277, 278, 281, 282, 283, 284, 292, 296,
	305, 306, 316, 325, 329, 181, 313, 330, 237, 210,
	0, 0, 0, 388, 0, 0, 0, 166, 0, 387,
	0, 0, 0, 201, 0, 0, 249, 0, 280, 156,
	209, 207, 302, 171, 167, 165, 155, 188, 214, 248,
	298, 242, 431, 204, 0, 0, 289, 223, 0, 0,
	0, 0, 0, 422, 423, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 154, 132, 234, 290, 173, 66,
	0, 0, 115, 116, 117, 409, 1050, 411, 412, 413,
	414, 0, 0, 150, 410, 415, 416, 417, 0, 0,
	0, 0, 385, 402, 0, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 400, 474, 0, 0,
	0, 445, 0, 401, 0, 0, 394, 395, 397, 396,
	398, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 444, 0, 0, 326, 0, 0, 442, 0,
	260, 0, 294, 182, 200, 146, 197, 129, 141, 0,
	180, 233, 267, 271, 0, 0, 0, 157, 0, 269,
	246, 315, 0, 250, 268, 205, 304, 261, 314, 327,
	328, 163, 227, 321, 299, 324, 336, 142, 160, 240,
	295, 318, 286, 222, 301, 196, 285, 134, 297, 312,
	151, 279, 0, 0, 0, 136, 310, 293, 220, 193,
	194, 135, 0, 265, 164, 176, 159, 236, 307, 308,
	158, 337, 143, 323, 138, 144, 322, 229, 303, 311,
	221, 213, 137, 309, 219, 212, 199, 170, 184, 258,
	208, 259, 185, 225, 224, 226, 0, 133, 0, 291,
	319, 338, 148, 0, 0, 300, 332, 335, 0, 262,
	149, 177, 169, 257, 175, 202, 331, 333, 334, 228,
	145, 187, 287, 198, 206, 0, 0, 245, 270, 152,
	317, 288, 432, 443, 438, 439, 436, 437, 0, 435,
	434, 433, 446, 424, 425, 426, 427, 429, 0, 440,
	441, 428, 128, 139, 203, 0, 263, 174, 320, 0,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 131, 140, 147, 153, 161,
	168, 172, 179, 183, 186, 189, 190, 191, 195, 211,
	215, 216, 217, 218, 230, 231, 232, 235, 238, 239,
	241, 243, 244, 247, 251, 252, 253, 254, 255, 256,
	264, 266, 272, 273, 274, 275, 276, 277, 278, 281,
	282, 283, 284, 292, 296, 305, 306, 316, 325, 329,
	181, 313, 330, 455, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 0, 0,
	0, 388, 0, 0, 0, 166, 0, 387, 0, 0,
	0, 201, 0, 0, 249, 0, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	431, 204, 0, 0, 289, 223, 0, 0, 0, 0,
	0, 422, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 132, 234, 290, 173, 66, 0, 0,
	115, 116, 117, 409, 408, 411, 412, 413, 414, 0,
	0, 150, 410, 415, 416, 417, 0, 0, 0, 0,
	385, 402, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 400, 0, 0, 0, 0, 445,
	0, 401, 0, 0, 394, 395, 397, 396, 398, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	444, 0, 0, 326, 0, 0, 442, 0, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 0, 0, 0, 157, 0, 269, 246, 315,
	0, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 312, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 144, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 0, 0, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 228, 145, 187,
	287, 198, 206, 0, 0, 245, 270, 152, 317, 288,
	432, 443, 438, 439, 436, 437, 0, 435, 434, 433,
	446, 424, 425, 426, 427, 429, 0, 440, 441, 428,
	128, 139, 203, 0, 263, 174, 320, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 237, 210, 0, 0, 0, 388, 0, 0, 0,
	166, 0, 387, 0, 0, 0, 201, 0, 0, 249,
	0, 280, 156, 209, 207, 302, 171, 167, 165, 155,
	188, 214, 248, 298, 242, 431, 204, 0, 0, 289,
	223, 0, 0, 0, 0, 0, 422, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 132, 234,
	290, 173, 66, 0, 0, 115, 116, 117, 409, 408,
	411, 412, 413, 414, 0, 0, 150, 410, 415, 416,
	417, 0, 0, 0, 0, 385, 402, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 400,
	0, 0, 0, 0, 445, 0, 401, 0, 0, 394,
	395, 397, 396, 398, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 444, 0, 0, 326, 0,
	0, 442, 0, 260, 0, 294, 182, 200, 146, 197,
	129, 141, 0, 180, 233, 267, 271, 0, 0, 0,
	157, 0, 269, 246, 315, 0, 250, 268, 205, 304,
	261, 314, 327, 328, 163, 227, 321, 299, 324, 336,
	142, 160, 240, 295, 318, 286, 222, 301, 196, 285,
	134, 297, 312, 151, 279, 0, 0, 0, 136, 310,
	293, 220, 193, 194, 135, 0, 265, 164, 176, 159,
	236, 307, 308, 158, 337, 143, 323, 138, 144, 322,
	229, 303, 311, 221, 213, 137, 309, 219, 212, 199,
	170, 184, 258, 208, 259, 185, 225, 224, 226, 0,
	133, 0, 291, 319, 338, 148, 0, 0, 300, 332,
	335, 0, 262, 149, 177, 169, 257, 175, 202, 331,
	333, 334, 228, 145, 187, 287, 198, 206, 0, 0,
	245, 270, 152, 317, 288, 432, 443, 438, 439, 436,
	437, 0, 435, 434, 433, 446, 424, 425, 426, 427,
	429, 0, 440, 441, 428, 128, 139, 203, 0, 263,
	174, 320, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 131, 140,
	147, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 256, 264, 266, 272, 273, 274, 275, 276,
	277, 278, 281, 282, 283, 284, 292, 296, 305, 306,
	316, 325, 329, 181, 313, 330, 237, 210, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 201, 0, 0, 249, 0, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	431, 204, 0, 0, 289, 223, 0, 0, 0, 0,
	0, 422, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 132, 234, 290, 173, 66, 0, 0,
	115, 116, 117, 409, 408, 411, 412, 413, 414, 0,
	0, 150, 410, 415, 416, 417, 0, 0, 0, 0,
	0, 402, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 400, 0, 0, 0, 0, 445,
	0, 401, 0, 0, 394, 395, 397, 396, 398, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	444, 0, 0, 326, 0, 0, 442, 0, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 0, 0, 0, 157, 0, 269, 246, 315,
	1824, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 312, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 144, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 0, 0, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 228, 145, 187,
	287, 198, 206, 0, 0, 245, 270, 152, 317, 288,
	432, 443, 438, 439, 436, 437, 0, 435, 434, 433,
	446, 424, 425, 426, 427, 429, 0, 440, 441, 428,
	128, 139, 203, 0, 263, 174, 320, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 237, 210, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 201, 0, 0, 249,
	0, 280, 156, 209, 207, 302, 171, 167, 165, 155,
	188, 214, 248, 298, 242, 431, 204, 0, 0, 289,
	223, 0, 0, 0, 0, 0, 422, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 132, 234,
	290, 173, 66, 0, 462, 115, 116, 117, 409, 408,
	411, 412, 413, 414, 0, 0, 150, 410, 415, 416,
	417, 0, 0, 0, 0, 0, 402, 0, 430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 400,
	0, 0, 0, 0, 445, 0, 401, 0, 0, 394,
	395, 397, 396, 398, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 444, 0, 0, 326, 0,
	0, 442, 0, 260, 0, 294, 182, 200, 146, 197,
	129, 141, 0, 180, 233, 267, 271, 0, 0, 0,
	157, 0, 269, 246, 315, 0, 250, 268, 205, 304,
	261, 314, 327, 328, 163, 227, 321, 299, 324, 336,
	142, 160, 240, 295, 318, 286, 222, 301, 196, 285,
	134, 297, 312, 151, 279, 0, 0, 0, 136, 310,
	293, 220, 193, 194, 135, 0, 265, 164, 176, 159,
	236, 307, 308, 158, 337, 143, 323, 138, 144, 322,
	229, 303, 311, 221, 213, 137, 309, 219, 212, 199,
	170, 184, 258, 208, 259, 185, 225, 224, 226, 0,
	133, 0, 291, 319, 338, 148, 0, 0, 300, 332,
	335, 0, 262, 149, 177, 169, 257, 175, 202, 331,
	333, 334, 228, 145, 187, 287, 198, 206, 0, 0,
	245, 270, 152, 317, 288, 432, 443, 438, 439, 436,
	437, 0, 435, 434, 433, 446, 424, 425, 426, 427,
	429, 0, 440, 441, 428, 128, 139, 203, 0, 263,
	174, 320, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 131, 140,
	147, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 256, 264, 266, 272, 273, 274, 275, 276,
	277, 278, 281, 282, 283, 284, 292, 296, 305, 306,
	316, 325, 329, 181, 313, 330, 237, 210, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 201, 0, 0, 249, 0, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	431, 204, 0, 0, 289, 223, 0, 0, 0, 0,
	0, 422, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 132, 234, 290, 173, 66, 0, 0,
	115, 116, 117, 409, 408, 411, 412, 413, 414, 0,
	0, 150, 410, 415, 416, 417, 0, 0, 0, 0,
	0, 402, 0, 430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 399, 400, 0, 0, 0, 0, 445,
	0, 401, 0, 0, 394, 395, 397, 396, 398, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	444, 0, 0, 326, 0, 0, 442, 0, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 0, 0, 0, 157, 0, 269, 246, 315,
	0, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 312, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 144, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 0, 0, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 228, 145, 187,
	287, 198, 206, 0, 0, 245, 270, 152, 317, 288,
	432, 443, 438, 439, 436, 437, 0, 435, 434, 433,
	446, 424, 425, 426, 427, 429, 0, 440, 441, 428,
	128, 139, 203, 0, 263, 174, 320, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 237, 210, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 201, 0, 0, 249,
	0, 280, 156, 209, 207, 302, 171, 167, 165, 155,
	188, 214, 248, 298, 242, 0, 204, 0, 0, 289,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 132, 234,
	290, 173, 0, 0, 0, 115, 116, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 723, 733, 734, 726, 727,
	728, 729, 730, 731, 732, 725, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 326, 0,
	0, 0, 0, 260, 0, 294, 182, 200, 146, 197,
	129, 141, 0, 180, 233, 267, 271, 0, 0, 0,
	157, 0, 269, 246, 315, 0, 250, 268, 205, 304,
	261, 314, 327, 328, 163, 227, 321, 299, 324, 336,
	142, 160, 240, 295, 318, 286, 222, 301, 196, 285,
	134, 297, 312, 151, 279, 0, 0, 0, 136, 310,
	293, 220, 193, 194, 135, 0, 265, 164, 176, 159,
	236, 307, 308, 158, 337, 143, 323, 138, 144, 322,
	229, 303, 311, 221, 213, 137, 309, 219, 212, 199,
	170, 184, 258, 208, 259, 185, 225, 224, 226, 0,
	133, 0, 291, 319, 338, 148, 0, 0, 300, 332,
	335, 0, 262, 149, 177, 169, 257, 175, 202, 331,
	333, 334, 228, 145, 187, 287, 198, 206, 0, 0,
	245, 270, 152, 317, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 139, 203, 0, 263,
	174, 320, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 131, 140,
	147, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 256, 264, 266, 272, 273, 274, 275, 276,
	277, 278, 281, 282, 283, 284, 292, 296, 305, 306,
	316, 325, 329, 181, 313, 330, 237, 210, 0, 0,
	824, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 201, 0, 0, 249, 0, 280, 156, 209, 207,
	302, 171, 167, 165, 155, 188, 214, 248, 298, 242,
	0, 204, 0, 0, 289, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 192, 154, 132, 234, 290, 173, 0, 0, 0,
	115, 116, 117, 0, 826, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 713, 714, 712,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 0, 326, 0, 0, 0, 0, 260, 0,
	294, 182, 200, 146, 197, 129, 141, 0, 180, 233,
	267, 271, 0, 0, 0, 157, 0, 269, 246, 315,
	0, 250, 268, 205, 304, 261, 314, 327, 328, 163,
	227, 321, 299, 324, 336, 142, 160, 240, 295, 318,
	286, 222, 301, 196, 285, 134, 297, 312, 151, 279,
	0, 0, 0, 136, 310, 293, 220, 193, 194, 135,
	0, 265, 164, 176, 159, 236, 307, 308, 158, 337,
	143, 323, 138, 144, 322, 229, 303, 311, 221, 213,
	137, 309, 219, 212, 199, 170, 184, 258, 208, 259,
	185, 225, 224, 226, 0, 133, 0, 291, 319, 338,
	148, 0, 0, 300, 332, 335, 0, 262, 149, 177,
	169, 257, 175, 202, 331, 333, 334, 228, 145, 187,
	287, 198, 206, 0, 0, 245, 270, 152, 317, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 139, 203, 0, 263, 174, 320, 0, 0, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 131, 140, 147, 153, 161, 168, 172,
	179, 183, 186, 189, 190, 191, 195, 211, 215, 216,
	217, 218, 230, 231, 232, 235, 238, 239, 241, 243,
	244, 247, 251, 252, 253, 254, 255, 256, 264, 266,
	272, 273, 274, 275, 276, 277, 278, 281, 282, 283,
	284, 292, 296, 305, 306, 316, 325, 329, 181, 313,
	330, 237, 210, 0, 0, 0, 0, 0, 0, 0,
	166, 1172, 0, 0, 0, 0, 201, 0, 0, 249,
	0, 280, 156, 209, 207, 302, 171, 167, 165, 155,
	188, 214, 248, 298, 242, 0, 204, 0, 0, 289,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 154, 132, 234,
	290, 173, 0, 0, 0, 115, 116, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 1171, 326, 0,
	0, 0, 1167, 1164, 0, 1165, 1166, 200, 627, 197,
	129, 141, 1162, 1169, 233, 267, 271, 0, 0, 0,
	157, 0, 269, 246, 315, 0, 250, 268, 205, 304,
	261, 314, 327, 328, 163, 227, 321, 299, 324, 336,
	142, 160, 240, 295, 318, 286, 222, 301, 196, 285,
	134, 297, 312, 151, 279, 0, 0, 0, 136, 310,
	293, 220, 193, 194, 135, 0, 265, 164, 176, 159,
	236, 307, 308, 158, 337, 143, 323, 138, 144, 322,
	229, 303, 311, 221, 213, 137, 309, 219, 212, 199,
	170, 184, 258, 208, 259, 185, 225, 224, 226, 0,
	133, 0, 291, 319, 338, 148, 0, 0, 300, 332,
	335, 0, 262, 149, 177, 169, 257, 175, 202, 331,
	333, 334, 228, 145, 187, 287, 198, 206, 0, 0,
	245, 270, 152, 317, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 139, 203, 0, 263,
	174, 320, 0, 0, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 131, 140,
	147, 153, 161, 168, 172, 179, 183, 186, 189, 190,
	191, 195, 211, 215, 216, 217, 218, 230, 231, 232,
	235, 238, 239, 241, 243, 244, 247, 251, 252, 253,
	254, 255, 256, 264, 266, 272, 273, 274, 275, 276,
	277, 278, 281, 282, 283, 284, 292, 296, 305, 306,
	316, 325, 329, 181, 313, 330, 33, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 280,
	156, 209, 207, 302, 171, 167, 165, 155, 188, 214,
	248, 298, 242, 0, 204, 0, 0, 289, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 132, 234, 290, 173,
	66, 0, 462, 115, 116, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 326, 0, 0, 0,
	0, 260, 0, 294, 182, 200, 146, 197, 129, 141,
	0, 180, 233, 267, 271, 0, 0, 0, 157, 0,
	269, 246, 315, 0, 250, 268, 205, 304, 261, 314,
	327, 328, 163, 227, 321, 299, 324, 336, 142, 160,
	240, 295, 318, 286, 222, 301, 196, 285, 134, 297,
	312, 151, 279, 0, 0, 0, 136, 310, 293, 220,
	193, 194, 135, 0, 265, 164, 176, 159, 236, 307,
	308, 158, 337, 143, 323, 138, 144, 322, 229, 303,
	311, 221, 213, 137, 309, 219, 212, 199, 170, 184,
	258, 208, 259, 185, 225, 224, 226, 0, 133, 0,
	291, 319, 338, 148, 0, 0, 300, 332, 335, 0,
	262, 149, 177, 169, 257, 175, 202, 331, 333, 334,
	228, 145, 187, 287, 198, 206, 0, 0, 245, 270,
	152, 317, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 139, 203, 0, 263, 174, 320,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 131, 140, 147, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	256, 264, 266, 272, 273, 274, 275, 276, 277, 278,
	281, 282, 283, 284, 292, 296, 305, 306, 316, 325,
	329, 181, 313, 330, 237, 210, 0, 0, 1082, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 0, 204,
	0, 0, 289, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 1084, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 326, 0, 0, 0, 0, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	0, 0, 0, 157, 0, 269, 246, 315, 0, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 144, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 0,
	0, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 228, 145, 187, 287, 198,
	206, 0, 0, 245, 270, 152, 317, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 139,
	203, 0, 263, 174, 320, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 33,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 0, 204, 0, 0,
	289, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 132,
	234, 290, 173, 66, 0, 0, 115, 116, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 326,
	0, 0, 0, 0, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 0, 0,
	0, 157, 0, 269, 246, 315, 0, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 0, 0, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 0,
	0, 245, 270, 152, 317, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 139, 203, 0,
	263, 174, 320, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 280, 156, 209,
	207, 302, 171, 167, 165, 155, 188, 214, 248, 298,
	242, 0, 204, 0, 0, 289, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 132, 234, 290, 173, 0, 0,
	0, 115, 116, 117, 0, 0, 1100, 0, 0, 1101,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 326, 0, 0, 0, 0, 260,
	0, 294, 182, 200, 146, 197, 129, 141, 0, 180,
	233, 267, 271, 0, 0, 0, 157, 0, 269, 246,
	315, 0, 250, 268, 205, 304, 261, 314, 327, 328,
	163, 227, 321, 299, 324, 336, 142, 160, 240, 295,
	318, 286, 222, 301, 196, 285, 134, 297, 312, 151,
	279, 0, 0, 0, 136, 310, 293, 220, 193, 194,
	135, 0, 265, 164, 176, 159, 236, 307, 308, 158,
	337, 143, 323, 138, 144, 322, 229, 303, 311, 221,
	213, 137, 309, 219, 212, 199, 170, 184, 258, 208,
	259, 185, 225, 224, 226, 0, 133, 0, 291, 319,
	338, 148, 0, 0, 300, 332, 335, 0, 262, 149,
	177, 169, 257, 175, 202, 331, 333, 334, 228, 145,
	187, 287, 198, 206, 0, 0, 245, 270, 152, 317,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 139, 203, 0, 263, 174, 320, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 131, 140, 147, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 256, 264,
	266, 272, 273, 274, 275, 276, 277, 278, 281, 282,
	283, 284, 292, 296, 305, 306, 316, 325, 329, 181,
	313, 330, 237, 210, 0, 0, 1082, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 0, 204, 0, 0,
	289, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 132,
	234, 290, 173, 0, 0, 0, 115, 116, 117, 0,
	1084, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 326,
	0, 0, 0, 0, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 0, 0,
	0, 157, 0, 269, 246, 315, 0, 1080, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 0, 0, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 0,
	0, 245, 270, 152, 317, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 139, 203, 0,
	263, 174, 320, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 857, 0,
	0, 0, 201, 0, 0, 249, 0, 280, 156, 209,
	207, 302, 171, 167, 165, 155, 188, 214, 248, 298,
	242, 0, 204, 0, 0, 289, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 132, 234, 290, 173, 0, 0,
	0, 115, 116, 117, 0, 856, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 326, 0, 0, 0, 0, 260,
	0, 294, 182, 200, 146, 197, 129, 141, 0, 180,
	233, 267, 271, 0, 0, 0, 157, 0, 269, 246,
	315, 0, 250, 268, 205, 304, 261, 314, 327, 328,
	163, 227, 321, 299, 324, 336, 142, 160, 240, 295,
	318, 286, 222, 301, 196, 285, 134, 297, 312, 151,
	279, 0, 0, 0, 136, 310, 293, 220, 193, 194,
	135, 0, 265, 164, 176, 159, 236, 307, 308, 158,
	337, 143, 323, 138, 144, 322, 229, 303, 311, 221,
	213, 137, 309, 219, 212, 199, 170, 184, 258, 208,
	259, 185, 225, 224, 226, 0, 133, 0, 291, 319,
	338, 148, 0, 0, 300, 332, 335, 0, 262, 149,
	177, 169, 257, 175, 202, 331, 333, 334, 228, 145,
	187, 287, 198, 206, 0, 0, 245, 270, 152, 317,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 139, 203, 0, 263, 174, 320, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 131, 140, 147, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 256, 264,
	266, 272, 273, 274, 275, 276, 277, 278, 281, 282,
	283, 284, 292, 296, 305, 306, 316, 325, 329, 181,
	313, 330, 237, 210, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 0, 204, 0, 0,
	289, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 132,
	234, 290, 173, 0, 0, 0, 115, 116, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 621, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 326,
	0, 0, 0, 0, 260, 0, 294, 182, 200, 627,
	197, 129, 141, 625, 180, 233, 267, 271, 0, 0,
	0, 157, 0, 269, 246, 315, 0, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 0, 0, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 0,
	0, 245, 270, 152, 317, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 139, 203, 0,
	263, 174, 320, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 280, 156, 209,
	207, 302, 171, 167, 165, 155, 188, 214, 248, 298,
	242, 0, 204, 0, 0, 289, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 132, 234, 290, 173, 0, 0,
	462, 115, 116, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 326, 0, 0, 0, 0, 260,
	0, 294, 182, 200, 146, 197, 129, 141, 0, 180,
	233, 267, 271, 0, 0, 0, 157, 0, 269, 246,
	315, 0, 250, 268, 205, 304, 261, 314, 327, 328,
	163, 227, 321, 299, 324, 336, 142, 160, 240, 295,
	318, 286, 222, 301, 196, 285, 134, 297, 312, 151,
	279, 0, 0, 0, 136, 310, 293, 220, 193, 194,
	135, 0, 265, 164, 176, 159, 236, 307, 308, 158,
	337, 143, 323, 138, 144, 322, 229, 303, 311, 221,
	213, 137, 309, 219, 212, 199, 170, 184, 258, 208,
	259, 185, 225, 224, 226, 0, 133, 0, 291, 319,
	338, 148, 0, 0, 300, 332, 335, 0, 262, 149,
	177, 169, 257, 175, 202, 331, 333, 334, 228, 145,
	187, 287, 198, 206, 0, 0, 245, 270, 152, 317,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 139, 203, 0, 263, 174, 320, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 131, 140, 147, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 256, 264,
	266, 272, 273, 274, 275, 276, 277, 278, 281, 282,
	283, 284, 292, 296, 305, 306, 316, 325, 329, 181,
	313, 330, 237, 210, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 0, 204, 0, 0,
	289, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 132,
	234, 290, 173, 66, 0, 0, 115, 116, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 326,
	0, 0, 0, 0, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 0, 0,
	0, 157, 0, 269, 246, 315, 0, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 0, 0, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 0,
	0, 245, 270, 152, 317, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 139, 203, 0,
	263, 174, 320, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 237, 210, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 201, 0, 0, 249, 0, 280, 156, 209,
	207, 302, 171, 167, 165, 155, 188, 214, 248, 298,
	242, 0, 204, 0, 0, 289, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 154, 132, 234, 290, 173, 0, 0,
	0, 115, 116, 117, 0, 1084, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 0, 0, 326, 0, 0, 0, 0, 260,
	0, 294, 182, 200, 146, 197, 129, 141, 0, 180,
	233, 267, 271, 0, 0, 0, 157, 0, 269, 246,
	315, 0, 250, 268, 205, 304, 261, 314, 327, 328,
	163, 227, 321, 299, 324, 336, 142, 160, 240, 295,
	318, 286, 222, 301, 196, 285, 134, 297, 312, 151,
	279, 0, 0, 0, 136, 310, 293, 220, 193, 194,
	135, 0, 265, 164, 176, 159, 236, 307, 308, 158,
	337, 143, 323, 138, 144, 322, 229, 303, 311, 221,
	213, 137, 309, 219, 212, 199, 170, 184, 258, 208,
	259, 185, 225, 224, 226, 0, 133, 0, 291, 319,
	338, 148, 0, 0, 300, 332, 335, 0, 262, 149,
	177, 169, 257, 175, 202, 331, 333, 334, 228, 145,
	187, 287, 198, 206, 0, 0, 245, 270, 152, 317,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 139, 203, 0, 263, 174, 320, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 131, 140, 147, 153, 161, 168,
	172, 179, 183, 186, 189, 190, 191, 195, 211, 215,
	216, 217, 218, 230, 231, 232, 235, 238, 239, 241,
	243, 244, 247, 251, 252, 253, 254, 255, 256, 264,
	266, 272, 273, 274, 275, 276, 277, 278, 281, 282,
	283, 284, 292, 296, 305, 306, 316, 325, 329, 181,
	313, 330, 237, 210, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 201, 0, 0,
	249, 0, 280, 156, 209, 207, 302, 171, 167, 165,
	155, 188, 214, 248, 298, 242, 0, 204, 0, 0,
	289, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 154, 132,
	234, 290, 173, 0, 0, 0, 115, 116, 117, 0,
	826, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 0, 0, 326,
	0, 0, 0, 0, 260, 0, 294, 182, 200, 146,
	197, 129, 141, 0, 180, 233, 267, 271, 0, 0,
	0, 157, 0, 269, 246, 315, 0, 250, 268, 205,
	304, 261, 314, 327, 328, 163, 227, 321, 299, 324,
	336, 142, 160, 240, 295, 318, 286, 222, 301, 196,
	285, 134, 297, 312, 151, 279, 0, 0, 0, 136,
	310, 293, 220, 193, 194, 135, 0, 265, 164, 176,
	159, 236, 307, 308, 158, 337, 143, 323, 138, 144,
	322, 229, 303, 311, 221, 213, 137, 309, 219, 212,
	199, 170, 184, 258, 208, 259, 185, 225, 224, 226,
	0, 133, 0, 291, 319, 338, 148, 0, 0, 300,
	332, 335, 0, 262, 149, 177, 169, 257, 175, 202,
	331, 333, 334, 228, 145, 187, 287, 198, 206, 0,
	0, 245, 270, 152, 317, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 139, 203, 0,
	263, 174, 320, 0, 0, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 131,
	140, 147, 153, 161, 168, 172, 179, 183, 186, 189,
	190, 191, 195, 211, 215, 216, 217, 218, 230, 231,
	232, 235, 238, 239, 241, 243, 244, 247, 251, 252,
	253, 254, 255, 256, 264, 266, 272, 273, 274, 275,
	276, 277, 278, 281, 282, 283, 284, 292, 296, 305,
	306, 316, 325, 329, 181, 313, 330, 839, 210, 0,
	0, 0, 0, 0, 237, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 0, 204,
	0, 0, 289, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 326, 0, 0, 0, 0, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	0, 0, 0, 157, 0, 269, 246, 315, 0, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 144, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 0,
	0, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 228, 145, 187, 287, 198,
	206, 0, 0, 245, 270, 152, 317, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 139,
	203, 0, 263, 174, 320, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 237,
	210, 0, 0, 0, 0, 0, 0, 830, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 280,
	156, 209, 207, 302, 171, 167, 165, 155, 188, 214,
	248, 298, 242, 0, 204, 0, 0, 289, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 132, 234, 290, 173,
	0, 0, 0, 115, 116, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 326, 0, 0, 0,
	0, 260, 0, 294, 182, 200, 146, 197, 129, 141,
	0, 180, 233, 267, 271, 0, 0, 0, 157, 0,
	269, 246, 315, 0, 250, 268, 205, 304, 261, 314,
	327, 328, 163, 227, 321, 299, 324, 336, 142, 160,
	240, 295, 318, 286, 222, 301, 196, 285, 134, 297,
	312, 151, 279, 0, 0, 0, 136, 310, 293, 220,
	193, 194, 135, 0, 265, 164, 176, 159, 236, 307,
	308, 158, 337, 143, 323, 138, 144, 322, 229, 303,
	311, 221, 213, 137, 309, 219, 212, 199, 170, 184,
	258, 208, 259, 185, 225, 224, 226, 0, 133, 0,
	291, 319, 338, 148, 0, 0, 300, 332, 335, 0,
	262, 149, 177, 169, 257, 175, 202, 331, 333, 334,
	228, 145, 187, 287, 198, 206, 0, 0, 245, 270,
	152, 317, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 139, 203, 0, 263, 174, 320,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 131, 140, 147, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	256, 264, 266, 272, 273, 274, 275, 276, 277, 278,
	281, 282, 283, 284, 292, 296, 305, 306, 316, 325,
	329, 181, 313, 330, 237, 210, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 0, 204,
	0, 0, 289, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 704, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 326, 0, 0, 0, 0, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	0, 0, 0, 157, 0, 269, 246, 315, 0, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 144, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 0,
	0, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 228, 145, 187, 287, 198,
	206, 0, 0, 245, 270, 152, 317, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 139,
	203, 0, 263, 174, 320, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 237,
	210, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 280,
	156, 209, 207, 302, 171, 167, 165, 155, 188, 214,
	248, 298, 242, 0, 204, 0, 0, 289, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 132, 234, 290, 173,
	0, 0, 0, 115, 116, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	378, 0, 178, 0, 0, 0, 326, 0, 0, 0,
	0, 260, 0, 294, 182, 200, 146, 197, 129, 141,
	0, 180, 233, 267, 271, 0, 0, 0, 157, 0,
	269, 246, 315, 0, 250, 268, 205, 304, 261, 314,
	327, 328, 163, 227, 321, 299, 324, 336, 142, 160,
	240, 295, 318, 286, 222, 301, 196, 285, 134, 297,
	312, 151, 279, 0, 0, 0, 136, 310, 293, 220,
	193, 194, 135, 0, 265, 164, 176, 159, 236, 307,
	308, 158, 337, 143, 323, 138, 144, 322, 229, 303,
	311, 221, 213, 137, 309, 219, 212, 199, 170, 184,
	258, 208, 259, 185, 225, 224, 226, 0, 133, 0,
	291, 319, 338, 148, 0, 0, 300, 332, 335, 0,
	262, 149, 177, 169, 257, 175, 202, 331, 333, 334,
	228, 145, 187, 287, 198, 206, 0, 0, 245, 270,
	152, 317, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 139, 203, 0, 263, 174, 320,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 131, 140, 147, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	256, 264, 266, 272, 273, 274, 275, 276, 277, 278,
	281, 282, 283, 284, 292, 296, 305, 306, 316, 325,
	329, 377, 313, 330, 237, 210, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 201,
	0, 0, 249, 0, 280, 156, 209, 207, 302, 171,
	167, 165, 155, 188, 214, 248, 298, 242, 0, 204,
	0, 0, 289, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	154, 132, 234, 290, 173, 0, 0, 0, 115, 116,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 123,
	0, 326, 0, 0, 0, 0, 260, 0, 294, 182,
	200, 146, 197, 129, 141, 0, 180, 233, 267, 271,
	0, 0, 0, 157, 0, 269, 246, 315, 0, 250,
	268, 205, 304, 261, 314, 327, 328, 163, 227, 321,
	299, 324, 336, 142, 160, 240, 295, 318, 286, 222,
	301, 196, 285, 134, 297, 312, 151, 279, 0, 0,
	0, 136, 310, 293, 220, 193, 194, 135, 0, 265,
	164, 176, 159, 236, 307, 308, 158, 337, 143, 323,
	138, 144, 322, 229, 303, 311, 221, 213, 137, 309,
	219, 212, 199, 170, 184, 258, 208, 259, 185, 225,
	224, 226, 0, 133, 0, 291, 319, 338, 148, 0,
	0, 300, 332, 335, 0, 262, 149, 177, 169, 257,
	175, 202, 331, 333, 334, 228, 145, 187, 287, 198,
	206, 0, 0, 245, 270, 152, 317, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 139,
	203, 0, 263, 174, 320, 0, 0, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 131, 140, 147, 153, 161, 168, 172, 179, 183,
	186, 189, 190, 191, 195, 211, 215, 216, 217, 218,
	230, 231, 232, 235, 238, 239, 241, 243, 244, 247,
	251, 252, 253, 254, 255, 256, 264, 266, 272, 273,
	274, 275, 276, 277, 278, 281, 282, 283, 284, 292,
	296, 305, 306, 316, 325, 329, 181, 313, 330, 237,
	210, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 201, 0, 0, 249, 0, 280,
	156, 209, 207, 302, 171, 167, 165, 155, 188, 214,
	248, 298, 242, 0, 204, 0, 0, 289, 223, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 154, 132, 234, 290, 173,
	0, 0, 0, 115, 116, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 0, 0, 326, 0, 0, 0,
	0, 260, 0, 294, 182, 200, 146, 197, 129, 141,
	0, 180, 233, 267, 271, 0, 0, 0, 157, 0,
	269, 246, 315, 0, 250, 268, 205, 304, 261, 314,
	327, 328, 163, 227, 321, 299, 324, 336, 142, 160,
	240, 295, 318, 286, 222, 301, 196, 285, 134, 297,
	312, 151, 279, 0, 0, 0, 136, 310, 293, 220,
	193, 194, 135, 0, 265, 164, 176, 159, 236, 307,
	308, 158, 337, 143, 323, 138, 144, 322, 229, 303,
	311, 221, 213, 137, 309, 219, 212, 199, 170, 184,
	258, 208, 259, 185, 225, 224, 226, 0, 133, 0,
	291, 319, 338, 148, 0, 0, 300, 332, 335, 0,
	262, 149, 177, 169, 257, 175, 202, 331, 333, 334,
	228, 145, 187, 287, 198, 206, 0, 0, 245, 270,
	152, 317, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 139, 203, 0, 263, 174, 320,
	0, 0, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 131, 140, 147, 153,
	161, 168, 172, 179, 183, 186, 189, 190, 191, 195,
	211, 215, 216, 217, 218, 230, 231, 232, 235, 238,
	239, 241, 243, 244, 247, 251, 252, 253, 254, 255,
	256, 264, 266, 272, 273, 274, 275, 276, 277, 278,
	281, 282, 283, 284, 292, 296, 305, 306, 316, 325,
	329, 181, 313, 330, 0, 210,
}

var yyPact = [...]int{
	157, -1000, -296, 1247, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1204, 889, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	359, 900, 106, 1121, 119, 630, 220, 49, 19115, 172,
	1967, 19500, -1000, 52, -1000, 30, 19500, 48, 18730, -1000,
	-1000, -1000, 10612, 1085, -72, -75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 907, 1181, 1186, 1212, 720, 1151,
	-1000, 9059, 9059, 171, 171, 171, 7519, -1000, -1000, 15643,
	19500, 19500, 915, 188, 207, 188, -152, -1000, -1000, -1000,
	-1000, -1000, -1000, 1121, -1000, -1000, 100, -1000, -1000, 19500,
	86, 292, 360, 1121, 96, -1000, -1000, -1000, 19500, 168,
	630, 168, 168, 19500, -1000, 258, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19500,
	630, 1118, 442, 167, 305, 305, 305, 305, -1000, 308,
	-1000, 5107, 91, 94, 5, 1220, 92, 32, -1000, 442,
	5107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 193,
	-1000, -1000, -1000, -1000, 19500, 18345, 169, 358, -1000, -1000,
	-1000, -1000, 733, 393, -1000, 10612, 1861, 727, 727, -1000,
	-1000, 244, -1000, -1000, 11767, 11767, 11767, 11767, 11767, 11767,
	11767, 11767, 11767, 11767, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 727, 256,
	-1000, 10227, 727, 727, 727, 727, 727, 727, 727, 727,
	10612, 727, 727, 727, 727, 727, 727, 727, 727, 727,
	727, 727, 727, 727, 727, 727, 727, -1000, -1000, -1000,
	19500, -1000, 1204, -1000, 889, -1000, -1000, -1000, 1127, 10612,
	10612, 1204, -1000, 1003, 9059, -1000, -1000, 1051, -1000, -1000,
	-1000, -1000, 407, 1231, -1000, 12537, 255, 1230, 17960, -1000,
	16413, 17575, 847, 7117, -127, -1000, -1000, -1000, 357, 15258,
	-1000, -1000, -1000, 1117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	826, 19500, -1000, -1000, 348, 630, -1000, 894, -1000, 819,
	-1000, 864, 86, 19500, 370, 630, 630, -1000, -1000, -1000,
	1111, 351, 146, 81, 356, 111, 145, 125, 19500, 76,
	1121, 1084, 846, 192, 19500, 1171, 964, 19500, 630, -1000,
	6313, -1000, 5107, 442, -1000, 604, 10612, 5107, 5107, 5107,
	19500, 5107, 5107, -1000, 597, -1000, -1000, -1000, 422, -1000,
	-1000, -1000, -1000, -1000, -1000, 5107, 5107, 413, 422, 413,
	-1000, -1000, -1000, -1000, 10612, 305, -1000, 960, -1000, -1000,
	45, -1000, -1000, -1000, -1000, -1000, 1247, -1000, -1000, -1000,
	-139, 10612, 10612, 10612, 10612, 412, 293, 11767, 568, 316,
	11767, 11767, 11767, 11767, 11767, 11767, 11767, 11767, 11767, 11767,
	11767, 11767, 11767, 11767, 11767, 591, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 630, -1000, 1244, 661, 661, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 12152, 7904,
	6313, 720, 808, 1204, 9059, 9059, 10612, 10612, 9829, 9444,
	9059, 1107, 363, 393, 19500, -1000, -1000, 11382, -1000, -1000,
	-1000, -1000, -1000, 634, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 19500, 19500, 9059, 9059, 9059, 9059, 9059, -1000, 845,
	-1000, -171, 14873, 1186, 720, 1051, 1153, 1236, 288, 719,
	842, -1000, 628, 1186, 14488, 905, -1000, 1051, -1000, -1000,
	-1000, 19500, -1000, -1000, 17183, -1000, -1000, 5911, 19500, 127,
	19500, -1000, 881, 1016, -1000, -1000, -1000, 1178, 14103, 19500,
	892, 818, -1000, -1000, 254, 6715, -127, -1000, 6715, 806,
	-1000, -101, -116, 8289, 266, -1000, -1000, -1000, -1000, 4303,
	12922, 697, 409, -52, -1000, -1000, -1000, 864, -1000, 864,
	864, 864, 864, -3, -3, -3, -3, -1000, -1000, -1000,
	-1000, -1000, 899, 898, -1000, 864, 864, 864, 864, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 897, 897, 897, 874,
	874, 159, 10612, 67, 19500, 1159, 518, 81, -1000, 1169,
	930, -1000, 351, 726, -1000, -1000, 610, 610, 344, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	128, 197, 61, 87, 19500, 19500, 19500, 19500, 19500, 229,
	-1000, -1000, -1000, 104, 19500, 19500, 839, -1000, 19500, 5107,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 393, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 19500, -1000, -1000, -1000, -1000,
	442, 19500, 19500, 19500, 442, 393, -1000, 19500, 19500, -1000,
	-1000, -1000, -1000, -1000, 393, 293, 549, 339, -1000, -1000,
	548, -1000, -1000, 2349, -1000, -1000, -1000, -1000, 568, 11767,
	11767, 11767, 485, 2349, 1913, 574, 2044, 271, 499, 499,
	286, 286, 286, 286, 286, 750, 750, -1000, -1000, -1000,
	634, -1000, -1000, -1000, 634, 9059, 9059, 838, 727, 253,
	-1000, 907, -1000, -1000, 1186, 788, 788, 423, 660, 373,
	1228, 788, 369, 1227, 788, 788, 9059, -1000, -1000, 380,
	-1000, 10612, 634, -1000, 252, -1000, 970, 837, 821, 788,
	634, 634, 788, 788, 19500, -1000, -287, -1000, -118, 275,
	727, -1000, 16798, -1000, -1000, 1127, -1000, -1000, 1077, -1000,
	999, 10612, 10612, 10612, -1000, -1000, -1000, 1127, 1203, -1000,
	1019, 1018, 1219, 9059, 16413, 1051, -1000, -1000, -1000, 251,
	1219, 975, 727, -1000, 19500, 16413, 16413, 16413, 16413, 16413,
	-1000, 986, 980, -1000, 982, 978, 1012, 19500, -1000, 792,
	720, 14103, 127, 755, 16413, 19500, -1000, -1000, 16413, 19500,
	5509, -1000, 806, -127, -93, -1000, -1000, -1000, -1000, 393,
	-1000, 648, 803, 3901, -1000, -1000, -1000, -1000, 150, -1000,
	-1000, 895, 630, -1000, 1142, 325, 325, 343, 630, 1137,
	-1000, -1000, -1000, -1000, 1120, -1000, 378, -62, -1000, -1000,
	-3, -3, -1000, -1000, 266, 1103, 266, 266, 266, 595,
	595, -1000, -1000, -1000, -1000, -1000, 496, -1000, -1000, -1000,
	456, -1000, -1000, 894, 523, 961, 67, -1000, -1000, 351,
	593, 1089, 19500, -1000, -1000, 693, 195, -1000, 959, -1000,
	605, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19500, -1000, -1000, -1000, -1000, -1000, 19500, 19500, 68, -1000,
	888, 625, -1000, 921, -1000, -1000, -1000, -1000, 34, 110,
	98, 191, -1000, 5107, -1000, 413, -1000, -1000, -1000, 413,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 485, 2349, 1770,
	-1000, 11767, 11767, -1000, -1000, 788, 788, 9059, 6313, 1204,
	1127, -1000, -1000, 185, 591, 185, 11767, 11767, -1000, 11767,
	11767, -1000, -164, 783, 349, -1000, 10612, 428, -1000, 6313,
	-1000, 11767, 11767, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 204, 203, 202, 19500, -1000, -1000, 532, 592,
	996, 393, 393, -1000, -1000, 19500, -1000, -1000, -1000, -1000,
	1217, 10612, -1000, 790, -1000, 4705, 1186, 954, 19500, 727,
	1247, 13320, 19500, 841, -1000, 353, 1016, 924, 952, 997,
	-1000, -1000, -1000, -1000, 979, -1000, 976, -1000, -1000, -1000,
	-1000, -1000, 720, 1219, 16413, 764, -1000, 764, -1000, 248,
	-1000, -1000, -1000, -109, -138, -1000, -1000, -1000, 4303, -1000,
	4303, -1000, 19500, 148, -1000, 630, 630, 630, -1000, -1000,
	-1000, 883, 951, 11767, -1000, -1000, -1000, 266, 266, -1000,
	346, -1000, -1000, -1000, 785, -1000, 771, 757, 766, 27,
	-1000, 914, 1101, 351, 351, -1000, 434, -1000, 630, -1000,
	-1000, 19500, 19500, -1000, -1000, -1000, -1000, -1000, -1000, 1152,
	859, -1000, -1000, -1000, 676, -1000, -178, 630, 19500, 19500,
	19500, -1000, 19500, -1000, 442, 442, -1000, 11767, 2349, 2349,
	-1000, -1000, 634, -1000, 1186, -1000, 634, 864, 864, -1000,
	864, 874, -1000, 864, 17, 864, 13, 634, 634, 2319,
	2187, 2172, 1949, 727, -159, -1000, 393, 10612, -1000, 1898,
	1144, 727, 727, 727, 760, -1000, 590, -3, -1000, -1000,
	-1000, 1215, 1205, 393, -1000, -1000, -1000, 1147, 833, 731,
	-1000, -1000, 8674, 762, 1015, 247, 760, 1204, 19500, 10612,
	-1000, -1000, 10612, 863, -1000, 10612, -1000, -1000, -1000, 1204,
	1204, 764, -1000, -1000, 280, -1000, -1000, -1000, 3901, -1000,
	753, -1000, 1137, -1000, -1000, -1000, 19500, -32, 1235, 2349,
	-1000, -1000, -1000, -1000, -3, 578, -3, 433, -1000, 431,
	-1000, -1000, -219, -1000, -1000, 832, 955, -1000, -1000, 859,
	-1000, 727, 1175, 19500, -1000, -1000, 6313, -1000, -1000, 853,
	927, -1000, -1000, -1000, -1000, 2349, -1000, 1127, -1000, -1000,
	170, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11767,
	11767, 11767, 11767, 11767, 1186, 570, 393, 11767, 11767, 16028,
	19500, 19500, 13705, 19500, -3, -86, -1000, 10612, 10612, 1133,
	-1000, 727, -1000, 738, 19500, 727, 19500, -1000, 1186, -1000,
	393, 393, 19500, 393, 1186, -1000, 67, 745, -1000, 331,
	-1000, -54, 266, -1000, 266, 657, 638, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1174, 126, 889, 735, 743,
	-1000, 333, 19500, 19500, -1000, -1000, -1000, 970, 970, 970,
	970, 89, 634, -1000, 970, 970, 705, -1000, 705, 705,
	275, -1000, -278, -1000, 1080, 1070, 393, 733, 1234, -1000,
	727, 1247, 241, 731, -1000, -1000, 701, -1000, -1000, 140,
	19500, 403, 1128, -1000, 1124, -1000, -1000, -1000, -1000, -1000,
	889, 687, -1000, 19500, 136, -1000, 6313, 4303, 685, -1000,
	-1000, -1000, -1000, -1000, 634, 79, -181, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -86, 181, -1000, 1038, 1036, 1202,
	19500, 731, 19500, -1000, 19500, -1000, -1000, 569, -1000, -1000,
	136, -1000, 126, 1014, -1000, -81, -1000, -1000, 921, -1000,
	995, -176, -184, 1055, 1059, 1059, 1070, 1201, 1065, 1063,
	-1000, 560, 708, -1000, 849, -1000, -1000, -1000, 122, 152,
	-1000, -1000, -178, -1000, 992, -1000, 1040, 463, -1000, -1000,
	-1000, -1000, 555, -1000, 1192, 1188, -1000, 19500, 115, 83,
	-1000, -179, -1000, 460, -1000, -1000, -1000, 553, 551, 682,
	727, -1000, -182, -1000, -1000, -1000, -1000, 949, 10997, -185,
	935, -1000, 1224, 970, 634, -1000, -1000, 1226, 284, 284,
	-1000, -1000, -1000, -1000, -1000, 149, 556, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1544, 1541, 33, 85, 79, 1536, 1531, 1530, 1529,
	129, 126, 125, 1520, 1519, 1518, 1515, 1514, 1513, 1512,
	1511, 1508, 1505, 1504, 1503, 1498, 1497, 104, 103, 442,
	1494, 1491, 1490, 1483, 1482, 1481, 1480, 1473, 1472, 1471,
	1470, 1468, 1463, 1462, 107, 1460, 1459, 12, 1456, 1454,
	1447, 1446, 1445, 1444, 1443, 1442, 97, 1441, 43, 201,
	61, 73, 1438, 70, 527, 1430, 86, 109, 1427, 1907,
	1426, 39, 75, 72, 1423, 35, 1422, 1421, 98, 1419,
	1418, 69, 1417, 1416, 63, 1415, 68, 80, 14, 26,
	1413, 1412, 1410, 1409, 102, 1278, 1408, 1407, 17, 1406,
	1405, 120, 1394, 82, 20, 16, 18, 25, 1392, 77,
	1390, 15, 1388, 71, 1387, 1386, 1385, 1384, 24, 1383,
	76, 99, 19, 1382, 6, 11, 1381, 1379, 1378, 1377,
	1376, 1374, 4, 1373, 1372, 1371, 1370, 74, 1369, 5,
	22, 67, 50, 28, 9, 1367, 1363, 27, 94, 62,
	95, 1362, 1361, 1360, 719, 1359, 53, 1356, 131, 1355,
	32, 101, 417, 537, 1354, 1348, 1347, 1345, 1344, 47,
	806, 1739, 197, 96, 1342, 1341, 2272, 40, 78, 23,
	1337, 1335, 1334, 66, 54, 48, 711, 1333, 42, 1332,
	1331, 1330, 1329, 1327, 1325, 1324, 64, 1322, 1320, 1317,
	158, 114, 93, 30, 1316, 1315, 1313, 1312, 58, 100,
	1310, 1309, 65, 60, 1307, 106, 38, 41, 1305, 1300,
	1298, 1297, 31, 10, 1294, 105, 44, 55, 29, 36,
	84, 1293, 21, 1292, 1286, 37, 45, 1284, 7, 1283,
	13, 1281, 3, 0, 1279, 8, 1265, 88, 1138, 2,
	1263, 1, 1261, 1260, 81, 1256, 1255, 1254, 1424, 454,
	89, 1253, 113,
}

var yyR1 = [...]int{
	0, 256, 257, 257, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 243, 243, 243, 246, 246, 21, 41,
	3, 3, 3, 3, 2, 2, 8, 9, 4, 5,
	5, 10, 10, 50, 50, 11, 12, 12, 12, 12,
	260, 260, 78, 78, 79, 79, 141, 141, 13, 14,
	14, 150, 150, 149, 149, 149, 151, 151, 151, 151,
	186, 186, 15, 15, 15, 15, 15, 57, 57, 245,
	245, 244, 242, 242, 241, 241, 240, 23, 24, 25,
	26, 248, 248, 218, 30, 30, 29, 29, 29, 29,
	31, 31, 28, 28, 27, 27, 220, 220, 219, 219,
	219, 219, 219, 219, 209, 189, 189, 189, 189, 192,
	192, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	191, 191, 191, 191, 191, 193, 193, 193, 193, 193,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 195, 195, 195, 195, 195,
	195, 195, 195, 208, 208, 196, 196, 202, 202, 203,
	203, 203, 205, 205, 206, 206, 164, 164, 164, 198,
	198, 199, 199, 204, 204, 200, 200, 200, 201, 201,
	201, 207, 207, 207, 207, 207, 197, 197, 210, 232,
	232, 231, 231, 227, 227, 227, 227, 217, 217, 224,
	224, 224, 224, 224, 224, 214, 214, 214, 215, 215,
	213, 213, 216, 216, 226, 226, 225, 211, 211, 212,
	212, 235, 235, 235, 235, 235, 236, 250, 251, 249,
	249, 249, 249, 249, 165, 165, 165, 221, 221, 221,
	222, 222, 222, 223, 223, 223, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 239, 237, 237,
	238, 238, 17, 22, 22, 18, 18, 18, 18, 19,
	19, 32, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 157, 157, 252, 252, 159, 159, 155,
	155, 158, 158, 156, 156, 156, 160, 160, 160, 161,
	161, 187, 187, 187, 34, 34, 36, 36, 37, 38,
	38, 181, 181, 182, 182, 39, 40, 49, 49, 49,
	49, 49, 49, 51, 51, 51, 7, 7, 7, 7,
	46, 46, 46, 6, 6, 35, 35, 42, 253, 253,
	254, 255, 255, 255, 255, 43, 20, 261, 44, 45,
	45, 56, 56, 56, 52, 52, 52, 55, 55, 55,
	60, 60, 62, 62, 62, 62, 62, 63, 63, 63,
	63, 63, 63, 59, 59, 61, 61, 61, 61, 174,
	174, 174, 173, 173, 70, 70, 71, 71, 72, 72,
	73, 73, 73, 110, 87, 87, 140, 140, 139, 139,
	142, 142, 74, 74, 74, 74, 75, 75, 76, 76,
	77, 77, 180, 180, 179, 179, 179, 178, 178, 80,
	80, 80, 82, 81, 81, 81, 81, 83, 83, 85,
	85, 84, 84, 86, 88, 88, 88, 88, 88, 89,
	89, 69, 69, 69, 69, 69, 69, 69, 69, 153,
	153, 91, 91, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 102, 102, 102, 102, 102, 102, 92,
	92, 92, 92, 92, 92, 92, 58, 58, 103, 103,
	103, 109, 104, 104, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 99, 99,
	99, 99, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 262, 262, 101, 100, 100, 100, 100, 100, 100,
	100, 54, 54, 54, 54, 54, 185, 185, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 114, 114, 53, 53, 112, 112, 113, 115, 115,
	111, 111, 111, 94, 94, 94, 94, 94, 94, 94,
	94, 96, 96, 96, 116, 116, 117, 117, 118, 118,
	119, 119, 120, 121, 121, 121, 122, 122, 122, 122,
	233, 233, 233, 233, 233, 228, 228, 228, 228, 229,
	229, 229, 64, 64, 64, 64, 66, 66, 65, 65,
	47, 47, 48, 48, 48, 67, 67, 68, 68, 68,
	68, 137, 137, 137, 123, 123, 123, 123, 128, 128,
	128, 124, 124, 126, 126, 126, 127, 127, 127, 125,
	131, 131, 133, 133, 132, 132, 130, 130, 135, 135,
	134, 134, 129, 129, 93, 93, 93, 93, 93, 138,
	138, 138, 138, 143, 143, 105, 105, 107, 107, 106,
	108, 144, 144, 147, 145, 145, 148, 148, 148, 148,
	148, 146, 146, 146, 175, 175, 175, 152, 152, 162,
	162, 163, 163, 154, 154, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 167, 167, 167, 168, 168,
	136, 136, 136, 136, 234, 234, 230, 171, 171, 172,
	172, 176, 176, 177, 177, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 258, 259, 183, 184, 184, 184,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 2, 3,
	5, 6, 6, 7, 4, 6, 5, 7, 8, 1,
	3, 7, 8, 1, 1, 9, 9, 8, 7, 7,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 6, 11, 2, 0, 2, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 7, 4,
	2, 1, 1, 4, 0, 1, 1, 1, 2, 2,
	0, 1, 5, 5, 4, 4, 2, 4, 1, 1,
	3, 4, 3, 3, 8, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 0,
	1, 1, 2, 1, 3, 2, 3, 0, 1, 2,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 3, 1, 3,
	1, 10, 11, 11, 12, 1, 5, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 5, 6, 6, 6,
	6, 10, 4, 3, 6, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 2, 7, 2, 3, 4,
	5, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 3, 3, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 7, 0, 3, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 4, 5, 5, 0,
	2, 1, 3, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 8, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 2, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 3, 3, 3, 0, 3, 1, 1,
	0, 4, 0, 1, 1, 0, 3, 1, 3, 2,
	1, 0, 2, 4, 0, 9, 3, 5, 0, 3,
	3, 0, 1, 0, 2, 2, 0, 2, 2, 2,
	0, 3, 0, 3, 0, 3, 0, 4, 0, 3,
	0, 4, 0, 1, 2, 1, 5, 4, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -256, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -42,
	-43, -4, -258, 6, 7, 8, -50, 10, 11, 31,
	-23, -24, 146, -25, 147, -26, 149, 148, 182, 150,
	175, 70, 208, 209, 211, 212, 213, 214, -51, 180,
	181, 152, 35, 41, 32, 33, 80, 9, 303, 177,
	176, 26, -257, 407, -56, 5, -118, 16, -3, -44,
	-261, -44, -44, -44, -44, -44, -44, -218, -220, 80,
	119, 80, -57, 154, -136, -248, 100, 160, 163, 164,
	294, 153, -30, -29, -28, -27, -31, 30, -248, 154,
	-64, 268, 76, -246, -243, 83, 84, 85, 154, 154,
	155, 156, -248, 154, -84, -176, -243, -170, 313, 168,
	345, 346, 76, 258, 208, 222, 216, 243, 235, 314,
	347, 169, 198, 233, 236, 281, 166, 348, 263, 271,
	94, 211, 290, 349, 75, 47, 40, 178, 231, 227,
	199, 350, 322, 192, 225, 46, 28, 45, 351, 273,
	248, 44, 352, 79, 318, 275, 226, 272, 152, 353,
	171, 401, 164, 354, 249, 253, 355, 282, 48, 356,
	357, 358, 74, 220, 221, 359, 206, 167, 284, 247,
	165, 34, 276, 315, 54, 186, 285, 42, 251, 41,
	405, 360, 246, 242, 49, 361, 362, 363, 364, 245,
	219, 241, 204, 58, 255, 254, 256, 193, 280, 238,
	365, 366, 367, 172, 77, 368, 228, 19, 369, 370,
	200, 371, 52, 372, 373, 288, 181, 374, 50, 37,
	184, 375, 376, 377, 378, 379, 380, 274, 250, 252,
	161, 188, 270, 317, 381, 224, 382, 173, 185, 180,
	289, 174, 383, 384, 385, 386, 387, 388, 389, 212,
	39, 390, 391, 392, 393, 207, 203, 283, 292, 57,
	78, 260, 394, 218, 163, 201, 395, 209, 51, 195,
	266, 205, 43, 239, 187, 396, 397, 229, 230, 244,
	217, 240, 210, 402, 189, 182, 398, 291, 202, 261,
	319, 194, 237, 234, 196, 399, 156, 190, 191, 400,
	403, 277, 267, 278, 279, 268, 197, 232, 262, 154,
	137, 236, 281, 146, 264, 265, 276, 277, 273, -159,
	274, 188, -187, 154, -155, 263, 267, 268, 197, -252,
	-243, 275, 283, 282, 269, 279, 278, -176, 210, -181,
	215, -171, -243, -170, 213, -84, -49, 401, 150, -183,
	-183, -183, -104, -69, -90, 103, -95, 30, 24, -94,
	-91, -111, -108, -109, 137, 138, 140, 139, 141, 126,
	127, 134, 104, 142, -99, -97, -98, -100, 87, 86,
	95, 88, 89, 90, 91, 96, 97, 98, -171, -176,
	-106, -258, 64, 65, 304, 305, 306, 307, 312, 308,
	106, 53, 293, 302, 301, 300, 297, 298, 295, 296,
	310, 311, 159, 294, 153, 132, 303, -243, -170, 40,
	266, 266, -5, -4, -258, 6, 21, 22, -122, 18,
	17, -259, 82, -52, -62, 59, 60, -63, 22, 36,
	63, 61, -45, -61, 128, -69, -176, -61, -154, 158,
	-154, -154, -145, -186, 210, -148, 283, 282, -172, -146,
	-171, -169, 281, 236, 280, 151, 320, 102, 23, 25,
	105, 137, 17, 106, 136, 304, 146, 68, 321, 295,
	296, 293, 299, 306, 307, 294, 264, 30, 11, 323,
	26, 176, 22, 36, 130, 148, 109, 110, 179, 24,
	177, 98, 326, 20, 71, 12, 14, 327, 328, 15,
	159, 158, 121, 155, 66, 9, 142, 27, 118, 62,
	329, 29, 330, 331, 332, 333, 64, 119, 18, 297,
	298, 32, 406, 334, 312, 183, 132, 69, 55, 103,
	335, 336, 96, 337, 99, 72, 100, 16, 67, 38,
	338, 339, 340, 286, 341, 120, 149, 303, 65, 342,
	153, 265, 6, 309, 31, 175, 63, 343, 154, 108,
	310, 311, 157, 97, 5, 160, 33, 10, 70, 73,
	300, 301, 302, 53, 316, 107, 13, 344, 287, 101,
	-219, 119, -209, -212, -171, 170, -236, 166, -84, -226,
	-225, -171, -64, -163, 159, 155, -163, 303, -27, -28,
	236, 136, -84, -67, 199, 146, 148, 151, 72, 111,
	-29, 194, -22, -84, -162, 159, -243, -162, -162, -84,
	143, -84, -243, 31, -160, 119, 13, 294, -243, 188,
	154, 189, 156, -161, 119, -161, -161, -161, -214, 155,
	34, 167, -184, -258, -172, 195, 196, 195, -158, -157,
	271, 272, 266, 270, 13, 196, 266, 191, -160, -184,
	157, -171, -46, -171, 87, -7, -3, -11, -10, -12,
	111, 81, 102, 100, 101, 118, -69, -92, 121, 103,
	119, 120, 105, 123, 122, 133, 126, 127, 128, 129,
	130, 131, 132, 124, 125, 136, 111, 112, 113, 114,
	115, 116, 117, -153, -258, -109, -258, 144, 145, -95,
	-95, -95, -95, -95, -95, -95, -95, -95, -95, -258,
	143, -2, -104, -4, -258, -258, -258, -258, -258, -258,
	-258, -258, -114, -69, -258, -262, -101, -258, -262, -101,
	-262, -101, -262, -258, -262, -101, -262, -101, -262, -262,
	-101, -258, -258, -258, -258, -258, -258, -258, -183, -253,
	-254, -87, -84, -118, -3, -44, -137, 20, 32, -69,
	-119, -120, -69, -118, 55, -59, -61, -63, 59, 60,
	93, 12, -174, -173, 23, -171, 87, 143, 12, -85,
	27, -84, -71, -72, -73, -74, -87, -110, -258, 12,
	-78, -79, -84, -86, -176, 81, 210, -148, -186, -150,
	-149, 284, 286, 111, -175, -171, 87, 30, 31, 82,
	81, -84, -189, -192, -194, -193, -195, -190, -191, 233,
	234, 137, 237, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 31, 178, 229, 230, 231, 232, 249,
	250, 251, 252, 253, 254, 255, 256, 216, 235, 314,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	228, -243, 80, 82, 81, -196, 80, -67, -84, 103,
	-243, -243, 31, -217, 111, -166, 151, 148, 149, -239,
	147, 258, 236, 94, 30, 16, 304, 184, 319, -243,
	185, -66, 201, 111, 190, 190, 154, 154, 203, -84,
	202, 204, 205, 40, 81, 157, -78, 24, 72, -84,
	-243, -177, -176, -169, -184, -160, 87, -69, -184, -184,
	-184, -84, -184, -184, 87, -215, 12, 121, -184, -184,
	-156, 12, 121, -215, -156, -69, -161, 72, -182, 213,
	247, 402, 403, 404, -69, -69, -69, -69, -102, 96,
	103, 97, 98, -95, -103, -106, -109, 92, 121, 119,
	120, 105, -95, -95, -95, -95, -95, -95, -95, -95,
	-95, -95, -95, -95, -95, -95, -95, -185, -243, 87,
	-243, -94, -94, -171, -60, 22, 36, -59, -172, -177,
	-169, -56, -259, -259, -118, -59, -59, -69, -69, -111,
	87, -59, -111, 87, -59, -59, -55, 22, 36, -112,
	-113, 107, -111, -171, -176, -259, -95, -171, -171, -59,
	-60, -60, -59, -59, 81, -255, 286, 287, 406, -179,
	184, -178, 23, -176, 87, -122, -259, -123, 27, 10,
	121, 81, 19, 81, -121, 25, 26, -122, -96, -171,
	88, 91, -70, 81, 12, -63, -84, -173, 128, -177,
	-84, -141, 184, -84, 31, 81, -80, -82, -81, -83,
	62, 66, 68, 63, 64, 65, 69, -180, 23, -71,
	-3, -258, -84, -78, -260, 81, 12, 73, -260, 81,
	143, -148, -150, 81, 285, 287, 288, 72, 99, -69,
	-201, 136, -221, -222, -223, -172, 87, 88, -209, -210,
	-211, -224, 170, -235, 161, 163, 164, 160, -213, 171,
	-236, 155, 29, 82, -164, 96, 103, -205, 261, -196,
	-196, -196, -196, -196, -200, 236, -200, -200, -200, 80,
	80, -196, -196, -196, -196, -202, 80, -202, -202, -203,
	80, -203, -236, 166, -69, -232, -231, -227, -230, 165,
	94, 316, 73, -225, -121, 88, -66, 24, -234, -230,
	-217, -243, 87, -183, -247, 166, 162, 170, 171, 164,
	83, 84, 85, 155, 29, 161, 163, 184, 160, -247,
	-167, -168, 157, 23, 155, 29, 184, 156, 207, -68,
	299, 87, 83, -84, -84, -84, -84, -84, 151, 148,
	192, -84, -84, -84, -184, -84, -160, -176, -176, -84,
	-160, -84, -171, 96, 97, 98, -103, -95, -95, -95,
	-58, 179, 102, -259, -259, -59, -59, -258, 143, -5,
	-122, -259, -259, 81, 73, 23, 12, 12, -259, 12,
	12, -259, -259, -59, -115, -113, 109, -69, -259, 143,
	-259, 81, 81, -259, -259, -259, -259, -259, -254, 405,
	287, -88, 70, 158, 71, -258, -178, -137, 38, 46,
	57, -69, -69, -120, -137, -152, 20, 12, 53, 53,
	-89, 13, -61, -71, -63, 143, -89, -93, 31, 53,
	-3, -258, -258, -144, -147, -111, -72, -73, -73, -72,
	-73, 62, 62, 62, 67, 62, 67, 62, -81, -176,
	-259, -259, -3, -141, 73, -71, -84, -71, -86, -176,
	128, -149, -151, 289, 286, 292, -243, 87, 81, -223,
	111, -212, 80, -243, 29, -213, -213, -213, -216, -243,
	-216, 29, -198, 30, 96, -206, 262, -200, -200, -201,
	31, -201, -201, -201, -208, 87, -208, 88, 88, 82,
	-233, -228, -229, 32, 76, -227, -217, 87, 37, -171,
	82, 156, 72, -243, 87, -183, -183, -84, -183, -171,
	-84, -65, 199, 206, 80, 84, -245, 73, 190, 258,
	190, 193, 157, -184, -156, -156, -58, 102, -95, -95,
	-259, -259, -60, -172, -118, -137, -188, 137, 233, 178,
	231, 227, 247, 238, 260, 229, 261, -185, -188, -95,
	-95, -95, -95, 313, -118, 110, -69, 108, -172, -95,
	-95, 155, 155, 155, -142, -171, 39, 87, 87, 58,
	-84, -116, 14, -69, 128, -122, -143, 72, -144, -105,
	-107, -106, -258, -138, -259, -171, -142, -89, 81, 111,
	-76, -75, 72, 73, -77, 72, -75, 62, 62, -259,
	-89, -71, -89, -89, 143, 286, 290, 291, -222, -223,
	-226, -235, 171, -216, -216, -216, 80, -199, 72, -95,
	-201, -201, -243, 137, 82, 81, 82, 81, 82, 81,
	-165, 351, 103, -229, -228, -217, -217, 88, -243, -84,
	-84, 27, -140, 80, 82, -242, 316, -244, -243, -171,
	-171, -171, -84, -160, -160, -95, -259, -122, -259, -196,
	-196, -196, -203, -196, 221, -196, 221, -259, -259, 20,
	20, 20, 20, -258, -53, 309, -69, 81, 81, -258,
	-258, -258, -259, 81, 87, -200, -117, 15, 17, 28,
	-143, 81, -259, -259, 81, 53, 143, -259, -118, -147,
	-69, -69, 80, -69, -118, -89, 82, -139, -171, -204,
	258, 10, -200, 87, -200, 88, 88, 351, 30, 77,
	78, 79, 30, 74, 75, -140, -258, 23, -139, -241,
	-240, -172, 80, 73, -137, -200, -243, -95, -95, -95,
	-95, -95, -122, 87, -95, -95, -139, -259, -139, -139,
	-179, -171, -200, -125, -130, -158, -69, -104, 29, -107,
	53, -3, -171, -105, -171, -122, -139, -122, -232, 82,
	81, -207, 161, 29, 160, -98, -201, -201, 82, 82,
	23, -237, -238, 184, -3, 82, 81, 111, -139, -84,
	-259, -259, -259, -259, -54, 121, 316, -259, -259, -259,
	-259, -259, -259, -88, -128, 401, -131, 42, -132, 43,
	10, -105, 143, 82, 173, -171, -197, 94, 29, 29,
	-3, -259, 81, -171, -47, 316, -240, -223, 82, -259,
	314, 69, 317, -125, 47, 239, -133, 51, -134, -129,
	52, 17, -144, -171, -84, 87, -47, -238, 53, -48,
	198, 405, -245, 58, 315, 318, -126, 49, -124, 48,
	-124, -132, 17, -135, 44, 45, 87, 80, 186, 166,
	-242, 58, -127, 50, 72, 99, 87, 17, 17, -139,
	187, 200, 316, 72, 99, 87, 87, 82, -258, 317,
	-250, -251, 72, -95, 183, 318, -251, 72, 11, 10,
	-259, -259, -249, 174, 169, 172, 31, -249, 168, 30,
	96,
}

var yyDef = [...]int{
	32, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 668, 0, 407, 407, 407, 407, 407, 407, 407,
	0, 0, -2, -2, 692, 36, 0, 0, 0, 0,
	-2, 365, 366, 0, 368, -2, 0, 0, 377, 1153,
	1153, 1153, 0, 0, 0, 0, 1151, 53, 54, 383,
	384, 385, 1, 3, 0, 411, 676, 0, 0, -2,
	409, 0, 0, 783, 783, 783, 0, 82, 83, 0,
	0, 0, 692, 781, 0, 781, 0, 801, 802, 803,
	101, 102, 86, -2, 106, 107, 0, 111, 100, 0,
	705, 0, 0, 110, 37, 33, 34, 35, 0, 779,
	0, 779, 779, 0, 310, 491, 811, 812, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 0,
	0, 0, 356, 0, 359, 359, 359, 359, 325, 0,
	327, 1154, 0, 0, 0, 334, 0, 0, 340, 356,
	1154, 348, 362, 363, 350, 345, 346, 364, 367, 0,
	372, 375, 807, 808, 0, 390, 0, 993, 382, 395,
	396, 406, 38, 542, 501, 0, 507, 509, 0, 544,
	545, 546, 547, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 575, 576, 577, 653, 654,
	655, 656, 657, 658, 659, 660, 511, 512, 650, 0,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 0, 611, 611, 611, 611, 611, 611, 611, 611,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 1153,
	0, 405, 668, 49, 0, 407, 412, 413, 711, 0,
	0, 668, 1152, 0, 0, -2, -2, 423, 429, 430,
	431, 432, 408, 0, 435, 439, 0, 0, 0, 784,
	0, 0, 68, 0, 1124, 764, -2, -2, 0, 0,
	809, 810, -2, 956, -2, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	0, 0, 118, 119, 0, 0, 240, 958, 116, 0,
	234, 175, 705, 0, 0, 0, 0, 88, 108, 109,
	0, 217, 0, 696, 0, 0, 0, 0, 0, 0,
	-2, 0, 302, 0, 0, 0, 0, 0, 0, 309,
	0, 311, 1154, 356, 314, 0, 0, 1154, 1154, 1154,
	0, 1154, 1154, 321, 0, 322, 323, 324, 0, 225,
	226, 227, 328, 1155, 1156, 1154, 1154, 353, 0, 353,
	351, 352, 343, 344, 0, 359, 337, 338, 341, 342,
	373, 376, 393, 391, 392, 394, 386, 387, 388, 389,
	0, 0, 0, 0, 0, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 529, 530, 531, 532,
	533, 534, 535, 508, 0, 522, 0, 0, 0, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 0, 420,
	0, 0, 0, 668, 0, 0, 0, 0, 0, 0,
	0, 417, 0, 642, 0, 595, 603, 0, 596, 604,
	597, 605, 598, 0, 599, 606, 600, 607, 601, 602,
	608, 0, 0, 0, 420, 420, 0, 0, 39, 397,
	398, 0, 474, 676, 0, 422, 714, 0, 0, 677,
	669, 670, 673, 676, 0, 444, 433, 424, 427, 428,
	410, 0, 436, 440, 0, 442, 443, 0, 0, 66,
	0, 490, 0, 446, 448, 449, 450, 472, 0, 0,
	0, 0, 62, 64, 491, 0, 1124, 770, 0, 70,
	71, 0, 0, 0, 198, 774, 775, 776, 772, 257,
	0, 0, 186, 182, 126, 127, 128, 175, 130, 175,
	175, 175, 175, 195, 195, 195, 195, 158, 159, 160,
	161, 162, 0, 0, 145, 175, 175, 175, 175, 165,
	166, 167, 168, 169, 170, 171, 172, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 177, 177, 177, 179,
	179, 0, 0, 209, 0, 673, 0, 696, 97, 0,
	804, 99, 217, 0, 218, 1153, 0, 0, 795, 272,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	693, 694, 695, 0, 0, 0, 305, 780, 0, 1154,
	308, 492, 813, 814, 312, 313, 357, 358, 315, 316,
	317, 318, 319, 320, 360, 0, 228, 229, 329, 333,
	356, 0, 0, 0, 356, 335, 336, 0, 0, 374,
	378, 379, 380, 381, 543, 502, 503, 504, 506, 523,
	0, 525, 527, 513, 514, 538, 539, 540, 0, 0,
	0, 0, 536, 518, 0, 549, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 563, 626, 627,
	0, 561, 562, 573, 0, 0, 0, 421, 651, 0,
	-2, 0, 541, 759, 676, 0, 0, 0, 0, 546,
	653, 0, 546, 653, 0, 0, 0, 418, 419, 648,
	645, 0, 0, 650, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 400, 401, 403, 0, 494,
	1062, 475, 0, 477, 478, 711, 50, 40, 0, 712,
	0, 0, 0, 0, 672, 674, 675, 711, 0, 661,
	0, 0, 499, 0, 0, 425, 46, 441, 437, 0,
	499, 0, 0, 489, 0, 0, 0, 0, 0, 0,
	479, 0, 0, 482, 0, 0, 0, 0, 473, 0,
	0, 0, -2, 0, 0, 0, 60, 61, 0, 0,
	0, 765, 69, 0, 0, 74, 75, 766, 767, 768,
	769, 0, 103, 258, 260, 263, 264, 265, 120, 122,
	123, 0, 0, 238, 1072, 1106, 994, 232, 232, 992,
	245, 230, 231, 117, 189, 187, 0, 184, 183, 129,
	195, 195, 152, 153, 198, 0, 198, 198, 198, 0,
	0, 146, 147, 148, 149, 140, 0, 141, 142, 143,
	0, 144, 239, 0, 0, 680, 210, 211, 213, 217,
	0, 0, 0, 235, 236, 0, 0, 782, 0, 805,
	0, 114, 115, 266, 1153, 283, 284, 285, 286, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 1153,
	0, 1153, 796, 797, 798, 799, 0, 0, 0, 706,
	707, 0, 710, 89, 276, 278, 277, 281, 0, 0,
	0, 0, 303, 1154, 307, 353, 330, 354, 355, 353,
	332, 339, 370, 524, 526, 528, 515, 536, 519, 0,
	516, 0, 0, 510, 578, 0, 0, 420, 0, 668,
	711, 582, 583, 0, 0, 0, 0, 0, 619, 0,
	0, 620, 0, 668, 0, 646, 0, 0, 594, 0,
	613, 0, 0, 614, 615, 616, 617, 618, 399, 402,
	404, 454, 0, 0, 0, 0, 476, 42, 0, 0,
	0, 678, 679, 671, 41, 0, 777, 778, 662, 663,
	664, 0, 434, 445, 426, 0, 676, 753, 0, 0,
	745, 0, 0, 499, 761, 0, 447, 468, 470, 0,
	465, 480, 481, 483, 0, 485, 0, 487, 488, 451,
	452, 453, 0, 499, 0, 499, 63, 499, 65, 0,
	493, 72, 73, 0, 0, 79, 199, 200, 0, 261,
	0, 121, 0, 0, 219, 232, 232, 232, 223, 233,
	224, 0, 191, 0, 188, 125, 185, 198, 198, 154,
	0, 155, 156, 157, 0, 173, 0, 0, 0, 254,
	84, 684, 683, 217, 217, 212, 0, 215, 0, 806,
	176, 0, 0, 112, 113, 267, 268, 269, 270, 0,
	456, 697, 698, 699, 0, 709, 92, 0, 0, 0,
	0, 274, 0, 306, 356, 356, 517, 0, 537, 520,
	579, 580, 0, 652, 676, 44, 0, 175, 175, 631,
	175, 179, 634, 175, 636, 175, 639, 0, 0, 0,
	0, 0, 0, 0, 643, 593, 649, 0, 651, 0,
	0, 0, 0, 0, 0, 460, 0, 195, 716, 713,
	43, 666, 0, 500, 438, 47, 51, 0, 753, 744,
	755, 757, 0, 0, 0, 749, 0, 668, 0, 0,
	462, 469, 0, 0, 463, 0, 464, 484, 486, -2,
	668, 499, 58, 59, 0, 76, 77, 78, 259, 262,
	0, 237, 0, 220, 221, 222, 0, 193, 0, 190,
	150, 151, 196, 197, 195, 0, 195, 0, 180, 0,
	246, 255, 0, 681, 682, 0, 0, 214, 216, 456,
	98, 0, 0, 0, 708, 275, 0, 90, 91, 0,
	0, 280, 304, 326, 331, 521, 581, 711, 584, 628,
	195, 632, 633, 635, 637, 638, 640, 586, 585, 0,
	0, 0, 0, 0, 676, 0, 647, 0, 0, 0,
	0, 0, 474, 0, 195, 736, 48, 0, 0, 0,
	52, 0, 758, 0, 0, 0, 0, 67, 676, 762,
	763, 466, 0, 471, 676, 57, 209, 0, 458, 201,
	194, 0, 198, 174, 198, 0, 0, 256, 685, 686,
	687, 688, 689, 690, 691, 0, 0, 0, 0, 93,
	94, 0, 0, 0, 45, 629, 630, 0, 0, 0,
	0, 621, 0, 644, 0, 0, 0, 496, 0, 0,
	494, 461, 718, 717, 730, 734, 667, 665, 0, 756,
	0, 748, 751, 747, 750, 55, 0, 56, 208, 0,
	0, 206, 0, 203, 205, 192, 163, 164, 178, 181,
	0, 0, 298, 0, 700, 457, 0, 0, 0, 282,
	587, 589, 588, 590, 0, 0, 0, 592, 609, 610,
	495, 497, 498, 455, 736, 0, 729, 732, -2, 0,
	0, 746, 0, 467, 0, 459, 124, 0, 202, 204,
	700, 297, 0, 0, 271, 702, 95, 96, 89, 591,
	0, 0, 0, 723, 721, 721, 734, 0, 738, 0,
	743, 0, 754, 752, 0, 207, 85, 299, 0, 0,
	703, 704, 92, 622, 0, 625, 726, 0, 719, 722,
	720, 731, 0, 737, 0, 0, 735, 0, 0, 0,
	279, 623, 715, 0, 724, 725, 733, 0, 0, 0,
	0, 701, 0, 727, 728, 739, 741, 241, 0, 0,
	242, 243, 0, 0, 0, 624, 244, 0, 0, 0,
	300, 301, 247, 249, 250, 0, 0, 248, 251, 252,
	253,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 407,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:388
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:393
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:429
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:448
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Load{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:470
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:479
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:483
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:487
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:518
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:538
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:555
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:567
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.insertAction = InsertAct
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:621
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:636
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:640
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:652
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyVAL.characteristic = ReadWrite
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.characteristic = ReadOnly
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:690
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:694
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.isolationLevel = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.scope = SessionScope
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.scope = GlobalScope
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:727
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[5].indexOptions...)
			yyDollar[1].createIndex.Options = append(yyDollar[1].createIndex.Options, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:735
		{
			yyVAL.statement = &CreateView{ViewName: yyDollar[7].tableName.ToViewName(), IsReplace: yyDollar[2].boolean, Algorithm: yyDollar[3].str, Definer: yyDollar[4].str, Security: yyDollar[5].str, Columns: yyDollar[8].columns, Select: yyDollar[10].selStmt, CheckOption: yyDollar[11].str}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:746
		{
			yyVAL.boolean = false
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.boolean = true
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:755
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:770
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:792
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:805
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, Options: yyDollar[5].indexOptions, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:812
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:830
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:836
		{
			yyVAL.collateAndCharsets = nil
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:854
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:863
		{
			yyVAL.boolean = false
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.boolean = true
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:873
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:877
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:883
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:887
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:898
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:914
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:918
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:933
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1137
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1160
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.literal = nil
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1174
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1178
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1186
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1190
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1196
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1204
		{
			yyVAL.boolean = false
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.boolean = true
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1213
		{
			yyVAL.boolean = false
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.boolean = true
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1223
		{
			yyVAL.boolean = false
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.boolean = false
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.boolean = true
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1236
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1245
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1249
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1254
		{
			yyVAL.boolean = false
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.boolean = true
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = ""
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1289
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.colKeyOpt = colKey
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1305
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1310
		{
			yyVAL.literal = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1314
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1320
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1325
		{
			yyVAL.indexOptions = nil
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1335
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1349
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), String: yyDollar[3].colIdent.String()}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1378
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1382
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1390
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1394
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1434
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1448
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1460
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1474
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1480
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1484
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1488
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1492
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1502
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1528
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.boolean = true
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.boolean = true
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.boolean = false
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1554
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = yyDollar[1].str
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1588
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1610
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1615
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &AlterView{ViewName: yyDollar[6].tableName.ToViewName(), Algorithm: yyDollar[2].str, Definer: yyDollar[3].str, Security: yyDollar[4].str, Columns: yyDollar[7].columns, Select: yyDollar[9].selStmt, CheckOption: yyDollar[10].str}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1628
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1635
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1728
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1744
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1748
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1764
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 306:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1776
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1811
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1816
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1834
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1856
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1861
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1870
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1895
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1905
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1917
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1939
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = "extended "
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.str = "full "
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.showFilter = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2031
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2037
		{
			yyVAL.showFilter = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2047
		{
			yyVAL.scope = ImplicitScope
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2051
		{
			yyVAL.scope = SessionScope
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.scope = GlobalScope
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.statement = &Begin{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.statement = &Begin{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = &Commit{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &Rollback{}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2091
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2101
		{
			yyVAL.empty = struct{}{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.explainType = EmptyType
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.explainType = JSONType
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2127
		{
			yyVAL.explainType = TreeType
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2131
		{
			yyVAL.explainType = VitessType
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.explainType = TraditionalType
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.explainType = AnalyzeType
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2159
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.statement = &OtherRead{}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2200
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: yyDollar[1].aliasedTableName, Lock: yyDollar[2].lockType}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.lockType = Read
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.lockType = ReadLocal
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.lockType = Write
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			yyVAL.lockType = LowPriorityWrite
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2256
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			setAllowComments(yylex, true)
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2270
		{
			yyVAL.bytes2 = nil
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2274
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.boolean = true
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.boolean = false
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.boolean = true
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2293
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = SQLCacheStr
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2306
		{
			yyVAL.boolean = false
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.boolean = true
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.boolean = true
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2319
		{
			yyVAL.selectExprs = nil
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2328
		{
			yyVAL.strs = nil
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2332
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2344
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = SQLCacheStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = DistinctStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = DistinctStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = StraightJoinHint
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2380
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2390
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2398
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2403
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2418
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2423
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2447
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2471
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2476
		{
			yyVAL.columns = nil
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2486
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2490
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2500
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2513
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2517
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2521
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2533
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2537
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2548
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2553
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.joinType = NormalJoinType
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.joinType = NormalJoinType
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.joinType = NormalJoinType
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.joinType = StraightJoinType
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.joinType = LeftJoinType
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2598
		{
			yyVAL.joinType = LeftJoinType
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.joinType = RightJoinType
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.joinType = RightJoinType
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2640
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2651
		{
			yyVAL.indexHints = nil
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2655
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2663
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2667
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2794
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2828
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2973
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 587:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 589:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 590:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 591:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3083
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3087
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3091
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3153
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3167
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3221
		{
			yyVAL.matchExprOption = NoOption
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3225
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3229
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 624:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3233
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3237
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3269
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3273
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3303
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = nil
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3317
		{
			yyVAL.str = string("")
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3321
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3337
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = nil
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3356
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3360
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.expr = &NullVal{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3409
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3418
		{
			yyVAL.exprs = nil
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3422
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3427
		{
			yyVAL.expr = nil
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3436
		{
			yyVAL.orderBy = nil
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3440
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3446
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3450
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3456
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3461
		{
			yyVAL.orderDirection = AscOrder
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.orderDirection = AscOrder
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.orderDirection = DescOrder
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3474
		{
			yyVAL.limit = nil
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3478
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3482
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3486
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3491
		{
			yyVAL.indexOptions = nil
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3495
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3499
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3514
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3518
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3522
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3526
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3532
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3536
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3540
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3545
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3549
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3553
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3557
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3562
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3566
		{
			yyVAL.str = yyDollar[3].str
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3572
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3581
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3585
		{
			yyVAL.str = yyDollar[2].str
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3590
		{
			yyVAL.str = "cascaded"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3603
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3607
		{
			yyVAL.str = yyDollar[3].str
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3613
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3621
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'@" + string(yyDollar[2].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3630
		{
			yyVAL.lock = NoLock
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3634
		{
			yyVAL.lock = ForUpdateLock
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3638
		{
			yyVAL.lock = ShareModeLock
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3643
		{
			yyVAL.selectInto = nil
		}
	case 715:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3647
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3651
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3655
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3660
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3664
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3668
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3673
		{
			yyVAL.str = ""
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.str = " header"
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = " manifest on"
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = " manifest off"
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = ""
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3699
		{
			yyVAL.str = " overwrite on"
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3703
		{
			yyVAL.str = " overwrite off"
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3709
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3714
		{
			yyVAL.str = ""
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3718
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3723
		{
			yyVAL.str = ""
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3727
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3732
		{
			yyVAL.str = ""
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3736
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3741
		{
			yyVAL.str = ""
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3745
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3750
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3754
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3759
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3763
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3768
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3772
		{
			yyVAL.str = " optionally"
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3785
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3789
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3793
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3797
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3801
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3807
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3811
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3815
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3819
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3824
		{
			yyVAL.updateExprs = nil
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3828
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3838
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3848
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3854
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3860
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3870
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3874
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3880
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3886
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3890
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3900
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3904
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3908
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3912
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3920
		{
			yyVAL.bytes = []byte("charset")
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3931
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3935
		{
			yyVAL.expr = &Default{}
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3944
		{
			yyVAL.boolean = false
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3946
		{
			yyVAL.boolean = true
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3949
		{
			yyVAL.boolean = false
		}
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3951
		{
			yyVAL.boolean = true
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3954
		{
			yyVAL.ignore = false
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			yyVAL.ignore = true
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3964
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3968
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3970
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3976
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3995
		{
			yyVAL.str = ""
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3997
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3999
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4001
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4004
		{
			yyVAL.indexOptions = nil
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4006
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4010
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4016
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4020
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4027
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4033
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4037
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4044
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4405
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4414
		{
			decNesting(yylex)
		}
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4419
		{
			skipToEnd(yylex)
		}
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4424
		{
			skipToEnd(yylex)
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4428
		{
			skipToEnd(yylex)
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4432
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

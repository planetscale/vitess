// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const REFERENCES = 57459
const KEY_BLOCK_SIZE = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const BIT = 57485
const TINYINT = 57486
const SMALLINT = 57487
const MEDIUMINT = 57488
const INT = 57489
const INTEGER = 57490
const BIGINT = 57491
const INTNUM = 57492
const REAL = 57493
const DOUBLE = 57494
const FLOAT_TYPE = 57495
const DECIMAL = 57496
const NUMERIC = 57497
const TIME = 57498
const TIMESTAMP = 57499
const DATETIME = 57500
const YEAR = 57501
const CHAR = 57502
const VARCHAR = 57503
const BOOL = 57504
const CHARACTER = 57505
const VARBINARY = 57506
const NCHAR = 57507
const TEXT = 57508
const TINYTEXT = 57509
const MEDIUMTEXT = 57510
const LONGTEXT = 57511
const BLOB = 57512
const TINYBLOB = 57513
const MEDIUMBLOB = 57514
const LONGBLOB = 57515
const JSON = 57516
const ENUM = 57517
const GEOMETRY = 57518
const POINT = 57519
const LINESTRING = 57520
const POLYGON = 57521
const GEOMETRYCOLLECTION = 57522
const MULTIPOINT = 57523
const MULTILINESTRING = 57524
const MULTIPOLYGON = 57525
const NULLX = 57526
const AUTO_INCREMENT = 57527
const APPROXNUM = 57528
const SIGNED = 57529
const UNSIGNED = 57530
const ZEROFILL = 57531
const COLLATION = 57532
const DATABASES = 57533
const TABLES = 57534
const VITESS_KEYSPACES = 57535
const VITESS_SHARDS = 57536
const VITESS_TABLETS = 57537
const VSCHEMA_TABLES = 57538
const FULL = 57539
const PROCESSLIST = 57540
const COLUMNS = 57541
const NAMES = 57542
const CHARSET = 57543
const GLOBAL = 57544
const SESSION = 57545
const ISOLATION = 57546
const LEVEL = 57547
const READ = 57548
const WRITE = 57549
const ONLY = 57550
const REPEATABLE = 57551
const COMMITTED = 57552
const UNCOMMITTED = 57553
const SERIALIZABLE = 57554
const CURRENT_TIMESTAMP = 57555
const DATABASE = 57556
const CURRENT_DATE = 57557
const CURRENT_TIME = 57558
const LOCALTIME = 57559
const LOCALTIMESTAMP = 57560
const UTC_DATE = 57561
const UTC_TIME = 57562
const UTC_TIMESTAMP = 57563
const REPLACE = 57564
const CONVERT = 57565
const CAST = 57566
const SUBSTR = 57567
const SUBSTRING = 57568
const GROUP_CONCAT = 57569
const SEPARATOR = 57570
const MATCH = 57571
const AGAINST = 57572
const BOOLEAN = 57573
const LANGUAGE = 57574
const WITH = 57575
const QUERY = 57576
const EXPANSION = 57577
const UNUSED = 57578

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	153, 272,
	154, 272,
	-2, 264,
	-1, 248,
	111, 599,
	-2, 595,
	-1, 249,
	111, 600,
	-2, 596,
	-1, 319,
	81, 762,
	-2, 59,
	-1, 320,
	81, 722,
	-2, 60,
	-1, 325,
	81, 704,
	-2, 561,
	-1, 327,
	81, 743,
	-2, 563,
	-1, 595,
	53, 42,
	55, 42,
	-2, 44,
	-1, 731,
	111, 602,
	-2, 598,
	-1, 943,
	5, 29,
	-2, 406,
	-1, 968,
	5, 28,
	-2, 536,
	-1, 1193,
	5, 29,
	-2, 537,
	-1, 1238,
	5, 28,
	-2, 539,
	-1, 1302,
	5, 29,
	-2, 540,
}

const yyPrivate = 57344

const yyLast = 11010

var yyAct = [...]int{

	249, 1293, 882, 542, 667, 1249, 793, 1100, 1128, 1097,
	1101, 1031, 587, 1199, 811, 833, 227, 589, 876, 971,
	794, 909, 935, 279, 987, 766, 842, 696, 763, 1022,
	1034, 80, 862, 832, 846, 193, 605, 480, 193, 219,
	253, 976, 324, 829, 756, 782, 733, 1074, 474, 872,
	423, 604, 318, 306, 790, 591, 486, 917, 305, 494,
	541, 3, 576, 236, 193, 193, 80, 280, 49, 251,
	193, 315, 193, 313, 80, 54, 304, 1326, 556, 1313,
	1324, 1300, 1321, 220, 221, 222, 223, 240, 883, 1312,
	1299, 55, 1092, 1274, 507, 506, 516, 517, 509, 510,
	511, 512, 513, 514, 515, 508, 1187, 899, 518, 428,
	226, 1259, 995, 59, 606, 994, 607, 49, 996, 1123,
	1124, 898, 1122, 449, 824, 232, 225, 1136, 1137, 1138,
	224, 310, 825, 826, 1013, 1141, 1139, 855, 61, 62,
	63, 64, 65, 188, 184, 185, 186, 465, 1212, 903,
	437, 1227, 863, 466, 463, 1176, 1174, 218, 897, 1323,
	1075, 460, 461, 1320, 507, 506, 516, 517, 509, 510,
	511, 512, 513, 514, 515, 508, 1294, 1055, 518, 791,
	1250, 1286, 193, 847, 193, 1257, 438, 451, 431, 453,
	193, 675, 1077, 1252, 456, 182, 181, 193, 182, 1052,
	666, 80, 80, 80, 80, 1054, 80, 894, 891, 892,
	986, 890, 936, 849, 80, 450, 452, 812, 814, 985,
	849, 984, 426, 434, 1079, 196, 1083, 183, 1078, 1279,
	1076, 530, 531, 765, 1196, 1081, 1061, 901, 904, 951,
	929, 705, 1006, 80, 1080, 511, 512, 513, 514, 515,
	508, 498, 1275, 518, 187, 444, 830, 1082, 1084, 1145,
	321, 518, 1251, 508, 470, 471, 518, 702, 455, 455,
	455, 455, 896, 455, 863, 68, 424, 856, 493, 492,
	491, 455, 1284, 1094, 1258, 1256, 1096, 1155, 974, 1298,
	1042, 948, 813, 483, 895, 608, 493, 448, 1140, 1053,
	49, 1051, 783, 697, 193, 491, 849, 848, 422, 1146,
	69, 193, 193, 193, 848, 527, 670, 80, 529, 1040,
	1011, 493, 482, 80, 509, 510, 511, 512, 513, 514,
	515, 508, 900, 911, 518, 424, 1288, 440, 441, 442,
	492, 491, 783, 1304, 958, 902, 540, 484, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 493, 555, 557,
	557, 557, 557, 557, 557, 557, 557, 565, 566, 567,
	568, 558, 559, 560, 561, 562, 563, 564, 588, 708,
	709, 430, 740, 698, 1041, 947, 596, 946, 602, 1046,
	1043, 1036, 1037, 1044, 1039, 1038, 738, 739, 737, 488,
	848, 1184, 704, 492, 491, 845, 843, 1045, 841, 844,
	910, 847, 1218, 1048, 492, 491, 454, 723, 725, 726,
	493, 1217, 724, 193, 852, 1026, 492, 491, 80, 853,
	52, 493, 1025, 1014, 193, 193, 80, 180, 193, 703,
	736, 193, 757, 493, 758, 193, 1306, 80, 80, 80,
	80, 80, 80, 80, 80, 492, 491, 432, 433, 1285,
	1234, 80, 80, 1215, 1058, 1042, 255, 1023, 193, 21,
	1282, 246, 493, 1132, 507, 506, 516, 517, 509, 510,
	511, 512, 513, 514, 515, 508, 80, 684, 518, 1131,
	193, 926, 927, 928, 1040, 455, 80, 1242, 1322, 710,
	303, 1007, 682, 455, 1309, 473, 1242, 1291, 1242, 1254,
	473, 321, 1242, 473, 455, 455, 455, 455, 455, 455,
	455, 455, 311, 1242, 1243, 734, 1002, 231, 455, 455,
	309, 1208, 1207, 269, 268, 271, 272, 273, 274, 997,
	80, 731, 270, 275, 1119, 473, 1195, 473, 712, 1152,
	1151, 1148, 1149, 1148, 1147, 727, 729, 190, 885, 1041,
	941, 473, 573, 473, 1046, 1043, 1036, 1037, 1044, 1039,
	1038, 193, 278, 759, 193, 193, 193, 193, 193, 768,
	473, 599, 1045, 681, 680, 671, 193, 314, 1035, 193,
	775, 778, 425, 193, 427, 787, 784, 49, 193, 193,
	760, 761, 80, 78, 669, 770, 664, 615, 614, 780,
	819, 446, 544, 795, 439, 80, 1263, 1262, 457, 458,
	459, 1098, 462, 600, 972, 598, 472, 1142, 797, 798,
	469, 800, 796, 23, 973, 799, 850, 818, 323, 598,
	972, 310, 310, 310, 310, 310, 429, 808, 816, 770,
	817, 973, 768, 1064, 821, 822, 588, 966, 815, 953,
	56, 967, 864, 865, 866, 310, 837, 193, 1191, 950,
	80, 573, 80, 23, 23, 1154, 193, 573, 1150, 193,
	80, 52, 878, 516, 517, 509, 510, 511, 512, 513,
	514, 515, 508, 730, 972, 518, 193, 941, 193, 193,
	941, 1237, 572, 952, 435, 998, 436, 823, 941, 601,
	874, 875, 443, 949, 706, 233, 52, 528, 1314, 445,
	1222, 52, 52, 857, 877, 1133, 668, 573, 532, 533,
	534, 535, 536, 537, 538, 539, 1113, 455, 1001, 455,
	977, 978, 1135, 873, 918, 868, 867, 455, 731, 578,
	581, 582, 583, 579, 880, 580, 584, 1098, 1027, 919,
	980, 734, 678, 52, 467, 805, 803, 1318, 718, 983,
	806, 804, 982, 323, 323, 323, 323, 309, 323, 771,
	772, 802, 801, 1311, 931, 779, 323, 807, 1060, 582,
	583, 237, 238, 914, 1317, 487, 321, 924, 930, 786,
	923, 788, 789, 1018, 1010, 475, 613, 447, 1290, 834,
	485, 1289, 1235, 1008, 1189, 496, 80, 476, 1003, 193,
	1223, 887, 677, 586, 234, 235, 571, 957, 487, 228,
	922, 990, 1268, 80, 229, 595, 56, 989, 921, 991,
	1267, 981, 1225, 973, 665, 468, 695, 489, 999, 1276,
	1213, 968, 674, 701, 58, 60, 597, 53, 969, 970,
	992, 1, 884, 685, 686, 687, 688, 689, 690, 691,
	692, 1030, 893, 1292, 1248, 1127, 840, 693, 694, 1004,
	1005, 80, 80, 831, 80, 67, 310, 421, 66, 323,
	1283, 1015, 1016, 839, 838, 610, 1255, 1211, 1024, 851,
	730, 1012, 858, 859, 860, 861, 1017, 80, 1019, 1020,
	1021, 854, 1134, 1287, 1009, 621, 619, 620, 869, 870,
	871, 193, 1047, 618, 623, 622, 617, 204, 316, 1033,
	80, 585, 609, 879, 490, 242, 1057, 578, 581, 582,
	583, 579, 70, 580, 584, 616, 1050, 977, 978, 455,
	1049, 925, 889, 464, 206, 1068, 672, 673, 526, 1067,
	676, 920, 993, 679, 322, 1105, 707, 1073, 735, 479,
	80, 80, 732, 1099, 455, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	699, 1102, 1085, 1109, 731, 1107, 1086, 1266, 940, 80,
	323, 80, 80, 1224, 956, 553, 781, 795, 323, 254,
	1121, 722, 719, 795, 955, 267, 1126, 264, 266, 323,
	323, 323, 323, 323, 323, 323, 323, 834, 193, 1130,
	1104, 265, 1125, 323, 323, 1103, 80, 49, 713, 965,
	309, 309, 309, 309, 309, 500, 252, 1093, 244, 80,
	193, 308, 1115, 1116, 1117, 309, 80, 569, 714, 1143,
	1144, 577, 80, 1108, 309, 193, 575, 574, 496, 979,
	975, 323, 307, 1063, 1156, 1186, 1273, 1165, 1032, 1163,
	717, 1120, 25, 1164, 57, 239, 886, 1158, 888, 19,
	1161, 18, 17, 792, 20, 16, 907, 15, 1172, 14,
	29, 13, 12, 11, 10, 9, 8, 7, 6, 1190,
	711, 5, 762, 4, 80, 230, 80, 80, 80, 193,
	80, 820, 776, 776, 1066, 1198, 80, 22, 776, 1201,
	1202, 1203, 310, 2, 80, 0, 1204, 1206, 0, 0,
	0, 999, 0, 0, 0, 776, 1089, 1210, 0, 0,
	0, 0, 202, 0, 80, 80, 80, 0, 0, 0,
	1185, 0, 0, 0, 477, 481, 1220, 0, 767, 769,
	0, 1221, 0, 0, 323, 0, 213, 0, 0, 0,
	1214, 499, 1216, 0, 785, 0, 0, 323, 0, 881,
	0, 0, 0, 834, 0, 834, 80, 80, 905, 0,
	0, 906, 1236, 1226, 735, 0, 0, 0, 0, 80,
	932, 933, 934, 0, 810, 1102, 543, 1253, 908, 1247,
	0, 455, 0, 80, 0, 554, 197, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1264, 0, 0, 0,
	205, 201, 323, 80, 323, 1277, 0, 0, 0, 0,
	0, 0, 323, 0, 1281, 1238, 1066, 0, 1260, 1103,
	1261, 1102, 1239, 0, 0, 0, 0, 0, 203, 0,
	0, 207, 1296, 0, 0, 0, 0, 0, 323, 0,
	80, 0, 0, 1301, 0, 309, 0, 193, 0, 0,
	0, 1265, 0, 0, 0, 80, 1307, 0, 1029, 198,
	1278, 0, 0, 0, 0, 1103, 0, 49, 0, 0,
	1315, 1316, 0, 0, 0, 80, 0, 795, 0, 0,
	834, 0, 0, 1056, 0, 0, 208, 200, 1319, 209,
	210, 211, 212, 216, 1183, 473, 0, 0, 215, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1032,
	834, 0, 0, 1169, 1170, 0, 1171, 0, 0, 1173,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 507, 506, 516, 517, 509, 510, 511, 512, 513,
	514, 515, 508, 0, 0, 518, 938, 0, 988, 0,
	939, 1325, 0, 0, 0, 0, 0, 943, 944, 945,
	0, 0, 0, 0, 700, 323, 954, 1209, 1070, 1071,
	0, 960, 0, 961, 962, 963, 964, 0, 0, 0,
	0, 1087, 1088, 473, 1090, 1091, 0, 720, 721, 0,
	0, 0, 0, 0, 0, 0, 478, 0, 1181, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 1180, 473,
	0, 0, 0, 1028, 323, 0, 323, 0, 0, 507,
	506, 516, 517, 509, 510, 511, 512, 513, 514, 515,
	508, 191, 0, 518, 217, 0, 0, 0, 0, 323,
	543, 0, 0, 773, 774, 507, 506, 516, 517, 509,
	510, 511, 512, 513, 514, 515, 508, 0, 243, 518,
	191, 191, 323, 0, 0, 0, 191, 0, 191, 0,
	0, 507, 506, 516, 517, 509, 510, 511, 512, 513,
	514, 515, 508, 0, 323, 518, 0, 0, 0, 0,
	0, 309, 1069, 0, 0, 0, 0, 0, 0, 776,
	0, 1167, 1106, 988, 828, 776, 0, 0, 0, 0,
	1153, 0, 507, 506, 516, 517, 509, 510, 511, 512,
	513, 514, 515, 508, 0, 0, 518, 1072, 0, 0,
	1219, 323, 1160, 323, 1129, 0, 502, 0, 505, 0,
	0, 0, 0, 0, 519, 520, 521, 522, 523, 524,
	525, 0, 503, 504, 501, 507, 506, 516, 517, 509,
	510, 511, 512, 513, 514, 515, 508, 0, 1157, 518,
	0, 0, 0, 0, 1118, 0, 0, 0, 191, 0,
	191, 1159, 0, 0, 0, 0, 191, 0, 1162, 0,
	0, 0, 0, 191, 323, 0, 0, 0, 937, 915,
	916, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1228, 1229, 0, 1230, 1231, 1232, 507, 506,
	516, 517, 509, 510, 511, 512, 513, 514, 515, 508,
	0, 0, 518, 507, 506, 516, 517, 509, 510, 511,
	512, 513, 514, 515, 508, 0, 1200, 518, 1200, 1200,
	1200, 0, 1205, 0, 1166, 0, 0, 0, 323, 0,
	0, 1168, 0, 0, 942, 0, 1200, 0, 0, 0,
	0, 0, 1177, 1178, 1179, 0, 0, 1182, 0, 959,
	0, 0, 0, 0, 0, 0, 323, 323, 323, 0,
	1192, 1193, 1194, 0, 1197, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 0, 191, 593, 191,
	506, 516, 517, 509, 510, 511, 512, 513, 514, 515,
	508, 0, 0, 518, 0, 0, 0, 0, 1240, 1241,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 1233, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1244, 1245,
	1246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 776,
	0, 0, 1303, 0, 0, 1269, 1270, 1271, 1272, 191,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	191, 191, 0, 0, 191, 0, 0, 191, 0, 0,
	0, 683, 0, 0, 0, 0, 0, 1200, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 191, 1302, 0, 0, 0, 1110,
	1111, 0, 0, 1112, 0, 0, 1114, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 23, 24, 50, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 1330, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 28, 47, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 243, 243, 0, 37, 777, 777, 243, 52,
	0, 0, 777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 243, 243, 243, 0, 191, 0, 777,
	191, 191, 191, 191, 191, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 0, 191, 0, 0, 0, 593,
	0, 0, 1188, 0, 191, 191, 0, 0, 0, 543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 30,
	31, 33, 32, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 191, 495, 912, 913, 0, 0, 99, 0,
	0, 0, 683, 0, 113, 0, 115, 0, 0, 149,
	124, 0, 0, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	497, 0, 0, 0, 51, 0, 0, 92, 0, 0,
	0, 0, 492, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 243, 0, 1295, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 191, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 638, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 81, 0,
	114, 176, 139, 101, 167, 0, 0, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 777, 0, 0, 0, 0, 0, 777,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 654, 655, 656, 657, 658, 0,
	659, 660, 661, 662, 663, 640, 641, 642, 643, 624,
	625, 0, 0, 627, 191, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 644, 645, 646, 647, 648,
	649, 650, 651, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	409, 399, 0, 371, 412, 349, 363, 420, 364, 365,
	392, 335, 379, 131, 361, 0, 352, 330, 358, 331,
	350, 373, 99, 376, 348, 401, 382, 411, 113, 418,
	115, 387, 0, 149, 124, 0, 0, 375, 403, 377,
	397, 370, 393, 340, 386, 413, 362, 390, 414, 0,
	0, 0, 79, 0, 835, 836, 0, 0, 0, 0,
	0, 92, 0, 389, 408, 360, 391, 329, 388, 0,
	333, 336, 419, 406, 355, 356, 1000, 0, 0, 0,
	0, 0, 0, 374, 378, 394, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 385, 0, 0,
	0, 337, 334, 777, 0, 372, 0, 0, 0, 339,
	0, 354, 395, 191, 328, 398, 404, 369, 194, 407,
	367, 366, 410, 137, 0, 0, 152, 104, 103, 142,
	112, 402, 351, 359, 95, 357, 144, 133, 164, 384,
	134, 143, 116, 156, 138, 163, 195, 171, 154, 170,
	82, 153, 162, 93, 146, 84, 160, 151, 122, 108,
	109, 83, 0, 141, 98, 102, 97, 130, 157, 158,
	96, 178, 87, 169, 86, 88, 168, 129, 155, 161,
	123, 120, 85, 159, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 332, 0, 150,
	166, 179, 90, 347, 405, 172, 173, 174, 175, 0,
	0, 91, 128, 89, 107, 147, 110, 117, 140, 177,
	132, 145, 94, 165, 148, 343, 346, 341, 342, 380,
	381, 415, 416, 417, 396, 338, 0, 344, 345, 0,
	400, 383, 81, 0, 114, 176, 139, 101, 167, 409,
	399, 0, 371, 412, 349, 363, 420, 364, 365, 392,
	335, 379, 131, 361, 0, 352, 330, 358, 331, 350,
	373, 99, 376, 348, 401, 382, 411, 113, 418, 115,
	387, 0, 149, 124, 0, 0, 375, 403, 377, 397,
	370, 393, 340, 386, 413, 362, 390, 414, 0, 0,
	0, 79, 0, 835, 836, 0, 0, 0, 0, 0,
	92, 0, 389, 408, 360, 391, 329, 388, 0, 333,
	336, 419, 406, 355, 356, 0, 0, 0, 0, 0,
	0, 0, 374, 378, 394, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 385, 0, 0, 0,
	337, 334, 0, 0, 372, 0, 0, 0, 339, 0,
	354, 395, 0, 328, 398, 404, 369, 194, 407, 367,
	366, 410, 137, 0, 0, 152, 104, 103, 142, 112,
	402, 351, 359, 95, 357, 144, 133, 164, 384, 134,
	143, 116, 156, 138, 163, 195, 171, 154, 170, 82,
	153, 162, 93, 146, 84, 160, 151, 122, 108, 109,
	83, 0, 141, 98, 102, 97, 130, 157, 158, 96,
	178, 87, 169, 86, 88, 168, 129, 155, 161, 123,
	120, 85, 159, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 332, 0, 150, 166,
	179, 90, 347, 405, 172, 173, 174, 175, 0, 0,
	91, 128, 89, 107, 147, 110, 117, 140, 177, 132,
	145, 94, 165, 148, 343, 346, 341, 342, 380, 381,
	415, 416, 417, 396, 338, 0, 344, 345, 0, 400,
	383, 81, 0, 114, 176, 139, 101, 167, 409, 399,
	0, 371, 412, 349, 363, 420, 364, 365, 392, 335,
	379, 131, 361, 0, 352, 330, 358, 331, 350, 373,
	99, 376, 348, 401, 382, 411, 113, 418, 115, 387,
	0, 149, 124, 0, 0, 375, 403, 377, 397, 370,
	393, 340, 386, 413, 362, 390, 414, 52, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 389, 408, 360, 391, 329, 388, 0, 333, 336,
	419, 406, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 374, 378, 394, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 0, 385, 0, 0, 0, 337,
	334, 0, 0, 372, 0, 0, 0, 339, 0, 354,
	395, 0, 328, 398, 404, 369, 194, 407, 367, 366,
	410, 137, 0, 0, 152, 104, 103, 142, 112, 402,
	351, 359, 95, 357, 144, 133, 164, 384, 134, 143,
	116, 156, 138, 163, 195, 171, 154, 170, 82, 153,
	162, 93, 146, 84, 160, 151, 122, 108, 109, 83,
	0, 141, 98, 102, 97, 130, 157, 158, 96, 178,
	87, 169, 86, 88, 168, 129, 155, 161, 123, 120,
	85, 159, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 332, 0, 150, 166, 179,
	90, 347, 405, 172, 173, 174, 175, 0, 0, 91,
	128, 89, 107, 147, 110, 117, 140, 177, 132, 145,
	94, 165, 148, 343, 346, 341, 342, 380, 381, 415,
	416, 417, 396, 338, 0, 344, 345, 0, 400, 383,
	81, 0, 114, 176, 139, 101, 167, 409, 399, 0,
	371, 412, 349, 363, 420, 364, 365, 392, 335, 379,
	131, 361, 0, 352, 330, 358, 331, 350, 373, 99,
	376, 348, 401, 382, 411, 113, 418, 115, 387, 0,
	149, 124, 0, 0, 375, 403, 377, 397, 370, 393,
	340, 386, 413, 362, 390, 414, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	389, 408, 360, 391, 329, 388, 0, 333, 336, 419,
	406, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	374, 378, 394, 368, 0, 0, 0, 0, 0, 0,
	1065, 0, 353, 0, 385, 0, 0, 0, 337, 334,
	0, 0, 372, 0, 0, 0, 339, 0, 354, 395,
	0, 328, 398, 404, 369, 194, 407, 367, 366, 410,
	137, 0, 0, 152, 104, 103, 142, 112, 402, 351,
	359, 95, 357, 144, 133, 164, 384, 134, 143, 116,
	156, 138, 163, 195, 171, 154, 170, 82, 153, 162,
	93, 146, 84, 160, 151, 122, 108, 109, 83, 0,
	141, 98, 102, 97, 130, 157, 158, 96, 178, 87,
	169, 86, 88, 168, 129, 155, 161, 123, 120, 85,
	159, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 332, 0, 150, 166, 179, 90,
	347, 405, 172, 173, 174, 175, 0, 0, 91, 128,
	89, 107, 147, 110, 117, 140, 177, 132, 145, 94,
	165, 148, 343, 346, 341, 342, 380, 381, 415, 416,
	417, 396, 338, 0, 344, 345, 0, 400, 383, 81,
	0, 114, 176, 139, 101, 167, 409, 399, 0, 371,
	412, 349, 363, 420, 364, 365, 392, 335, 379, 131,
	361, 0, 352, 330, 358, 331, 350, 373, 99, 376,
	348, 401, 382, 411, 113, 418, 115, 387, 0, 149,
	124, 0, 0, 375, 403, 377, 397, 370, 393, 340,
	386, 413, 362, 390, 414, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 389,
	408, 360, 391, 329, 388, 0, 333, 336, 419, 406,
	355, 356, 0, 0, 0, 0, 0, 0, 0, 374,
	378, 394, 368, 0, 0, 0, 0, 0, 0, 728,
	0, 353, 0, 385, 0, 0, 0, 337, 334, 0,
	0, 372, 0, 0, 0, 339, 0, 354, 395, 0,
	328, 398, 404, 369, 194, 407, 367, 366, 410, 137,
	0, 0, 152, 104, 103, 142, 112, 402, 351, 359,
	95, 357, 144, 133, 164, 384, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 332, 0, 150, 166, 179, 90, 347,
	405, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 343, 346, 341, 342, 380, 381, 415, 416, 417,
	396, 338, 0, 344, 345, 0, 400, 383, 81, 0,
	114, 176, 139, 101, 167, 409, 399, 0, 371, 412,
	349, 363, 420, 364, 365, 392, 335, 379, 131, 361,
	0, 352, 330, 358, 331, 350, 373, 99, 376, 348,
	401, 382, 411, 113, 418, 115, 387, 0, 149, 124,
	0, 0, 375, 403, 377, 397, 370, 393, 340, 386,
	413, 362, 390, 414, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 389, 408,
	360, 391, 329, 388, 0, 333, 336, 419, 406, 355,
	356, 0, 0, 0, 0, 0, 0, 0, 374, 378,
	394, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 385, 0, 0, 0, 337, 334, 0, 0,
	372, 0, 0, 0, 339, 0, 354, 395, 0, 328,
	398, 404, 369, 194, 407, 367, 366, 410, 137, 0,
	0, 152, 104, 103, 142, 112, 402, 351, 359, 95,
	357, 144, 133, 164, 384, 134, 143, 116, 156, 138,
	163, 195, 171, 154, 170, 82, 153, 162, 93, 146,
	84, 160, 151, 122, 108, 109, 83, 0, 141, 98,
	102, 97, 130, 157, 158, 96, 178, 87, 169, 86,
	88, 168, 129, 155, 161, 123, 120, 85, 159, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 332, 0, 150, 166, 179, 90, 347, 405,
	172, 173, 174, 175, 0, 0, 91, 128, 89, 107,
	147, 110, 117, 140, 177, 132, 145, 94, 165, 148,
	343, 346, 341, 342, 380, 381, 415, 416, 417, 396,
	338, 0, 344, 345, 0, 400, 383, 81, 0, 114,
	176, 139, 101, 167, 409, 399, 0, 371, 412, 349,
	363, 420, 364, 365, 392, 335, 379, 131, 361, 0,
	352, 330, 358, 331, 350, 373, 99, 376, 348, 401,
	382, 411, 113, 418, 115, 387, 0, 149, 124, 0,
	0, 375, 403, 377, 397, 370, 393, 340, 386, 413,
	362, 390, 414, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 0, 389, 408, 360,
	391, 329, 388, 0, 333, 336, 419, 406, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 374, 378, 394,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	0, 385, 0, 0, 0, 337, 334, 0, 0, 372,
	0, 0, 0, 339, 0, 354, 395, 0, 328, 398,
	404, 369, 194, 407, 367, 366, 410, 137, 0, 0,
	152, 104, 103, 142, 112, 402, 351, 359, 95, 357,
	144, 133, 164, 384, 134, 143, 116, 156, 138, 163,
	195, 171, 154, 170, 82, 153, 162, 93, 146, 84,
	160, 151, 122, 108, 109, 83, 0, 141, 98, 102,
	97, 130, 157, 158, 96, 178, 87, 169, 86, 88,
	168, 129, 155, 161, 123, 120, 85, 159, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 332, 0, 150, 166, 179, 90, 347, 405, 172,
	173, 174, 175, 0, 0, 91, 128, 89, 107, 147,
	110, 117, 140, 177, 132, 145, 94, 165, 148, 343,
	346, 341, 342, 380, 381, 415, 416, 417, 396, 338,
	0, 344, 345, 0, 400, 383, 81, 0, 114, 176,
	139, 101, 167, 409, 399, 0, 371, 412, 349, 363,
	420, 364, 365, 392, 335, 379, 131, 361, 0, 352,
	330, 358, 331, 350, 373, 99, 376, 348, 401, 382,
	411, 113, 418, 115, 387, 0, 149, 124, 0, 0,
	375, 403, 377, 397, 370, 393, 340, 386, 413, 362,
	390, 414, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 389, 408, 360, 391,
	329, 388, 0, 333, 336, 419, 406, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 374, 378, 394, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	385, 0, 0, 0, 337, 334, 0, 0, 372, 0,
	0, 0, 339, 0, 354, 395, 0, 328, 398, 404,
	369, 194, 407, 367, 366, 410, 137, 0, 0, 152,
	104, 103, 142, 112, 402, 351, 359, 95, 357, 144,
	133, 164, 384, 134, 143, 116, 156, 138, 163, 195,
	171, 154, 170, 82, 153, 162, 93, 146, 84, 160,
	151, 122, 108, 109, 83, 0, 141, 98, 102, 97,
	130, 157, 158, 96, 178, 87, 169, 86, 326, 168,
	129, 155, 161, 123, 120, 85, 159, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	332, 0, 150, 166, 179, 90, 347, 405, 172, 173,
	174, 175, 0, 0, 91, 327, 325, 107, 147, 110,
	117, 140, 177, 132, 145, 94, 165, 148, 343, 346,
	341, 342, 380, 381, 415, 416, 417, 396, 338, 0,
	344, 345, 0, 400, 383, 81, 0, 114, 176, 139,
	101, 167, 409, 399, 0, 371, 412, 349, 363, 420,
	364, 365, 392, 335, 379, 131, 361, 0, 352, 330,
	358, 331, 350, 373, 99, 376, 348, 401, 382, 411,
	113, 418, 115, 387, 0, 149, 124, 0, 0, 375,
	403, 377, 397, 370, 393, 340, 386, 413, 362, 390,
	414, 0, 0, 0, 192, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 389, 408, 360, 391, 329,
	388, 0, 333, 336, 419, 406, 355, 356, 0, 0,
	0, 0, 0, 0, 0, 374, 378, 394, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 0, 385,
	0, 0, 0, 337, 334, 0, 0, 372, 0, 0,
	0, 339, 0, 354, 395, 0, 328, 398, 404, 369,
	194, 407, 367, 366, 410, 137, 0, 0, 152, 104,
	103, 142, 112, 402, 351, 359, 95, 357, 144, 133,
	164, 384, 134, 143, 116, 156, 138, 163, 195, 171,
	154, 170, 82, 153, 162, 93, 146, 84, 160, 151,
	122, 108, 109, 83, 0, 141, 98, 102, 97, 130,
	157, 158, 96, 178, 87, 169, 86, 88, 168, 129,
	155, 161, 123, 120, 85, 159, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 332,
	0, 150, 166, 179, 90, 347, 405, 172, 173, 174,
	175, 0, 0, 91, 128, 89, 107, 147, 110, 117,
	140, 177, 132, 145, 94, 165, 148, 343, 346, 341,
	342, 380, 381, 415, 416, 417, 396, 338, 0, 344,
	345, 0, 400, 383, 81, 0, 114, 176, 139, 101,
	167, 409, 399, 0, 371, 412, 349, 363, 420, 364,
	365, 392, 335, 379, 131, 361, 0, 352, 330, 358,
	331, 350, 373, 99, 376, 348, 401, 382, 411, 113,
	418, 115, 387, 0, 149, 124, 0, 0, 375, 403,
	377, 397, 370, 393, 340, 386, 413, 362, 390, 414,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 389, 408, 360, 391, 329, 388,
	0, 333, 336, 419, 406, 355, 356, 0, 0, 0,
	0, 0, 0, 0, 374, 378, 394, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 385, 0,
	0, 0, 337, 334, 0, 0, 372, 0, 0, 0,
	339, 0, 354, 395, 0, 328, 398, 404, 369, 194,
	407, 367, 366, 410, 137, 0, 0, 152, 104, 103,
	142, 112, 402, 351, 359, 95, 357, 144, 133, 164,
	384, 134, 143, 116, 156, 138, 163, 195, 171, 154,
	170, 82, 153, 603, 93, 146, 84, 160, 151, 122,
	108, 109, 83, 0, 141, 98, 102, 97, 130, 157,
	158, 96, 178, 87, 169, 86, 326, 168, 129, 155,
	161, 123, 120, 85, 159, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 332, 0,
	150, 166, 179, 90, 347, 405, 172, 173, 174, 175,
	0, 0, 91, 327, 325, 107, 147, 110, 117, 140,
	177, 132, 145, 94, 165, 148, 343, 346, 341, 342,
	380, 381, 415, 416, 417, 396, 338, 0, 344, 345,
	0, 400, 383, 81, 0, 114, 176, 139, 101, 167,
	409, 399, 0, 371, 412, 349, 363, 420, 364, 365,
	392, 335, 379, 131, 361, 0, 352, 330, 358, 331,
	350, 373, 99, 376, 348, 401, 382, 411, 113, 418,
	115, 387, 0, 149, 124, 0, 0, 375, 403, 377,
	397, 370, 393, 340, 386, 413, 362, 390, 414, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 389, 408, 360, 391, 329, 388, 0,
	333, 336, 419, 406, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 374, 378, 394, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 385, 0, 0,
	0, 337, 334, 0, 0, 372, 0, 0, 0, 339,
	0, 354, 395, 0, 328, 398, 404, 369, 194, 407,
	367, 366, 410, 137, 0, 0, 152, 104, 103, 142,
	112, 402, 351, 359, 95, 357, 144, 133, 164, 384,
	134, 143, 116, 156, 138, 163, 195, 171, 154, 170,
	82, 153, 317, 93, 146, 84, 160, 151, 122, 108,
	109, 83, 0, 141, 98, 102, 97, 130, 157, 158,
	96, 178, 87, 169, 86, 326, 168, 129, 155, 161,
	123, 120, 85, 159, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 332, 0, 150,
	166, 179, 90, 347, 405, 172, 173, 174, 175, 0,
	0, 91, 327, 325, 320, 319, 110, 117, 140, 177,
	132, 145, 94, 165, 148, 343, 346, 341, 342, 380,
	381, 415, 416, 417, 396, 338, 0, 344, 345, 0,
	400, 383, 81, 0, 114, 176, 139, 101, 167, 131,
	0, 0, 764, 0, 250, 0, 0, 0, 99, 0,
	247, 0, 0, 0, 113, 290, 115, 0, 0, 149,
	124, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 248, 269,
	268, 271, 272, 273, 274, 0, 0, 92, 270, 275,
	276, 277, 0, 0, 245, 262, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 241,
	0, 0, 0, 301, 0, 261, 0, 0, 256, 257,
	258, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 299, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 0, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 291, 300, 297, 298, 295, 296, 294, 293, 292,
	302, 283, 284, 285, 286, 288, 0, 287, 81, 0,
	114, 176, 139, 101, 167, 131, 0, 0, 0, 0,
	250, 0, 0, 0, 99, 0, 247, 0, 0, 0,
	113, 290, 115, 0, 0, 149, 124, 0, 0, 0,
	0, 281, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 473, 248, 269, 268, 271, 272, 273,
	274, 0, 0, 92, 270, 275, 276, 277, 0, 0,
	245, 262, 0, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 0, 0, 0, 0, 301,
	0, 261, 0, 0, 256, 257, 258, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 299, 0, 137, 0, 0, 152, 104,
	103, 142, 112, 0, 0, 0, 95, 0, 144, 133,
	164, 0, 134, 143, 116, 156, 138, 163, 195, 171,
	154, 170, 82, 153, 162, 93, 146, 84, 160, 151,
	122, 108, 109, 83, 0, 141, 98, 102, 97, 130,
	157, 158, 96, 178, 87, 169, 86, 88, 168, 129,
	155, 161, 123, 120, 85, 159, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 150, 166, 179, 90, 0, 0, 172, 173, 174,
	175, 0, 0, 91, 128, 89, 107, 147, 110, 117,
	140, 177, 132, 145, 94, 165, 148, 291, 300, 297,
	298, 295, 296, 294, 293, 292, 302, 283, 284, 285,
	286, 288, 0, 287, 81, 0, 114, 176, 139, 101,
	167, 131, 0, 0, 0, 0, 250, 0, 0, 0,
	99, 0, 247, 0, 0, 0, 113, 290, 115, 0,
	0, 149, 124, 0, 0, 0, 0, 281, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	248, 269, 268, 271, 272, 273, 274, 0, 0, 92,
	270, 275, 276, 277, 0, 0, 245, 262, 0, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 241, 0, 0, 0, 301, 0, 261, 0, 0,
	256, 257, 258, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 299,
	0, 137, 0, 0, 152, 104, 103, 142, 112, 0,
	0, 0, 95, 0, 144, 133, 164, 0, 134, 143,
	116, 156, 138, 163, 195, 171, 154, 170, 82, 153,
	162, 93, 146, 84, 160, 151, 122, 108, 109, 83,
	0, 141, 98, 102, 97, 130, 157, 158, 96, 178,
	87, 169, 86, 88, 168, 129, 155, 161, 123, 120,
	85, 159, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 150, 166, 179,
	90, 0, 0, 172, 173, 174, 175, 0, 0, 91,
	128, 89, 107, 147, 110, 117, 140, 177, 132, 145,
	94, 165, 148, 291, 300, 297, 298, 295, 296, 294,
	293, 292, 302, 283, 284, 285, 286, 288, 0, 287,
	81, 0, 114, 176, 139, 101, 167, 131, 0, 0,
	0, 0, 250, 0, 0, 0, 99, 0, 247, 0,
	0, 0, 113, 290, 115, 0, 0, 149, 124, 0,
	0, 0, 0, 281, 282, 0, 0, 0, 0, 0,
	0, 827, 0, 52, 0, 0, 248, 269, 268, 271,
	272, 273, 274, 0, 0, 92, 270, 275, 276, 277,
	0, 0, 245, 262, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 0, 0, 0,
	0, 301, 0, 261, 0, 0, 256, 257, 258, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 299, 0, 137, 0, 0,
	152, 104, 103, 142, 112, 0, 0, 0, 95, 0,
	144, 133, 164, 0, 134, 143, 116, 156, 138, 163,
	195, 171, 154, 170, 82, 153, 162, 93, 146, 84,
	160, 151, 122, 108, 109, 83, 0, 141, 98, 102,
	97, 130, 157, 158, 96, 178, 87, 169, 86, 88,
	168, 129, 155, 161, 123, 120, 85, 159, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 150, 166, 179, 90, 0, 0, 172,
	173, 174, 175, 0, 0, 91, 128, 89, 107, 147,
	110, 117, 140, 177, 132, 145, 94, 165, 148, 291,
	300, 297, 298, 295, 296, 294, 293, 292, 302, 283,
	284, 285, 286, 288, 23, 287, 81, 0, 114, 176,
	139, 101, 167, 0, 0, 0, 131, 0, 0, 0,
	0, 250, 0, 0, 0, 99, 0, 247, 0, 0,
	0, 113, 290, 115, 0, 0, 149, 124, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 248, 269, 268, 271, 272,
	273, 274, 0, 0, 92, 270, 275, 276, 277, 0,
	0, 245, 262, 0, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 0, 0, 0, 0,
	301, 0, 261, 0, 0, 256, 257, 258, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 0, 0, 299, 0, 137, 0, 0, 152,
	104, 103, 142, 112, 0, 0, 0, 95, 0, 144,
	133, 164, 0, 134, 143, 116, 156, 138, 163, 195,
	171, 154, 170, 82, 153, 162, 93, 146, 84, 160,
	151, 122, 108, 109, 83, 0, 141, 98, 102, 97,
	130, 157, 158, 96, 178, 87, 169, 86, 88, 168,
	129, 155, 161, 123, 120, 85, 159, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 150, 166, 179, 90, 0, 0, 172, 173,
	174, 175, 0, 0, 91, 128, 89, 107, 147, 110,
	117, 140, 177, 132, 145, 94, 165, 148, 291, 300,
	297, 298, 295, 296, 294, 293, 292, 302, 283, 284,
	285, 286, 288, 0, 287, 81, 0, 114, 176, 139,
	101, 167, 131, 0, 0, 0, 0, 250, 0, 0,
	0, 99, 0, 247, 0, 0, 0, 113, 290, 115,
	0, 0, 149, 124, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 248, 269, 268, 271, 272, 273, 274, 0, 0,
	92, 270, 275, 276, 277, 0, 0, 245, 262, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 0, 0, 0, 0, 301, 0, 261, 0,
	0, 256, 257, 258, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	299, 0, 137, 0, 0, 152, 104, 103, 142, 112,
	0, 0, 0, 95, 0, 144, 133, 164, 0, 134,
	143, 116, 156, 138, 163, 195, 171, 154, 170, 82,
	153, 162, 93, 146, 84, 160, 151, 122, 108, 109,
	83, 0, 141, 98, 102, 97, 130, 157, 158, 96,
	178, 87, 169, 86, 88, 168, 129, 155, 161, 123,
	120, 85, 159, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 150, 166,
	179, 90, 0, 0, 172, 173, 174, 175, 0, 0,
	91, 128, 89, 107, 147, 110, 117, 140, 177, 132,
	145, 94, 165, 148, 291, 300, 297, 298, 295, 296,
	294, 293, 292, 302, 283, 284, 285, 286, 288, 131,
	287, 81, 0, 114, 176, 139, 101, 167, 99, 0,
	0, 0, 0, 0, 113, 290, 115, 0, 0, 149,
	124, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 248, 269,
	268, 271, 272, 273, 274, 0, 0, 92, 270, 275,
	276, 277, 0, 0, 0, 262, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 0,
	0, 0, 0, 301, 0, 261, 0, 0, 256, 257,
	258, 263, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 299, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 1328, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 291, 300, 297, 298, 295, 296, 294, 293, 292,
	302, 283, 284, 285, 286, 288, 131, 287, 81, 0,
	114, 176, 139, 101, 167, 99, 0, 0, 0, 0,
	0, 113, 290, 115, 0, 0, 149, 124, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 248, 269, 268, 271, 272,
	273, 274, 0, 0, 92, 270, 275, 276, 277, 0,
	0, 0, 262, 0, 289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 0, 0, 0, 0,
	301, 0, 261, 0, 0, 256, 257, 258, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 0, 0, 299, 0, 137, 0, 0, 152,
	104, 103, 142, 112, 0, 0, 0, 95, 0, 144,
	133, 164, 0, 134, 143, 116, 156, 138, 163, 195,
	171, 154, 170, 82, 153, 162, 93, 146, 84, 160,
	151, 122, 108, 109, 83, 0, 141, 98, 102, 97,
	130, 157, 158, 96, 178, 87, 169, 86, 88, 168,
	129, 155, 161, 123, 120, 85, 159, 121, 119, 111,
	100, 105, 135, 118, 136, 106, 126, 125, 127, 0,
	0, 0, 150, 166, 179, 90, 0, 0, 172, 173,
	174, 175, 0, 0, 91, 128, 89, 107, 147, 110,
	117, 140, 177, 132, 145, 94, 165, 148, 291, 300,
	297, 298, 295, 296, 294, 293, 292, 302, 283, 284,
	285, 286, 288, 131, 287, 81, 0, 114, 176, 139,
	101, 167, 99, 0, 0, 0, 0, 0, 113, 0,
	115, 0, 0, 149, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 507, 506, 516,
	517, 509, 510, 511, 512, 513, 514, 515, 508, 0,
	0, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 0, 0, 137, 0, 0, 152, 104, 103, 142,
	112, 0, 0, 0, 95, 0, 144, 133, 164, 0,
	134, 143, 116, 156, 138, 163, 195, 171, 154, 170,
	82, 153, 162, 93, 146, 84, 160, 151, 122, 108,
	109, 83, 0, 141, 98, 102, 97, 130, 157, 158,
	96, 178, 87, 169, 86, 88, 168, 129, 155, 161,
	123, 120, 85, 159, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 150,
	166, 179, 90, 0, 0, 172, 173, 174, 175, 0,
	0, 91, 128, 89, 107, 147, 110, 117, 140, 177,
	132, 145, 94, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 81, 99, 114, 176, 139, 101, 167, 113,
	0, 115, 0, 0, 149, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 76, 0, 71,
	0, 0, 0, 77, 137, 0, 0, 152, 104, 103,
	142, 112, 0, 0, 0, 95, 0, 144, 133, 164,
	0, 134, 143, 116, 156, 138, 163, 73, 171, 154,
	170, 82, 153, 162, 93, 146, 84, 160, 151, 122,
	108, 109, 83, 0, 141, 98, 102, 97, 130, 157,
	158, 96, 178, 87, 169, 86, 88, 168, 129, 155,
	161, 123, 120, 85, 159, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	150, 166, 179, 90, 0, 0, 172, 173, 174, 175,
	0, 0, 91, 128, 89, 107, 147, 110, 117, 140,
	177, 132, 145, 94, 165, 148, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 592,
	0, 0, 0, 81, 99, 114, 176, 139, 101, 167,
	113, 0, 115, 0, 0, 149, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 0, 594, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	194, 0, 0, 0, 0, 137, 0, 0, 152, 104,
	103, 142, 112, 0, 0, 0, 95, 0, 144, 133,
	164, 0, 134, 143, 116, 156, 138, 163, 195, 171,
	154, 170, 82, 153, 162, 93, 146, 84, 160, 151,
	122, 108, 109, 83, 0, 141, 98, 102, 97, 130,
	157, 158, 96, 178, 87, 169, 86, 88, 168, 129,
	155, 161, 123, 120, 85, 159, 121, 119, 111, 100,
	105, 135, 118, 136, 106, 126, 125, 127, 0, 0,
	0, 150, 166, 179, 90, 0, 0, 172, 173, 174,
	175, 0, 0, 91, 128, 89, 107, 147, 110, 117,
	140, 177, 132, 145, 94, 165, 148, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 81, 0, 114, 176, 139, 101,
	167, 99, 0, 0, 0, 0, 0, 113, 0, 115,
	0, 0, 149, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 137, 0, 0, 152, 104, 103, 142, 112,
	0, 0, 0, 95, 0, 144, 133, 164, 0, 134,
	143, 116, 156, 138, 163, 195, 171, 154, 170, 82,
	153, 162, 93, 146, 84, 160, 151, 122, 108, 109,
	83, 0, 141, 98, 102, 97, 130, 157, 158, 96,
	178, 87, 169, 86, 88, 168, 129, 155, 161, 123,
	120, 85, 159, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 150, 166,
	179, 90, 0, 0, 172, 173, 174, 175, 0, 0,
	91, 128, 89, 107, 147, 110, 117, 140, 177, 132,
	145, 94, 165, 148, 0, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 81, 0, 114, 176, 139, 101, 167, 99, 0,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 0, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 81, 99,
	114, 176, 139, 101, 167, 113, 0, 115, 0, 0,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 715, 0, 0, 716, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 0, 0, 0, 0,
	137, 0, 0, 152, 104, 103, 142, 112, 0, 0,
	0, 95, 0, 144, 133, 164, 0, 134, 143, 116,
	156, 138, 163, 195, 171, 154, 170, 82, 153, 162,
	93, 146, 84, 160, 151, 122, 108, 109, 83, 0,
	141, 98, 102, 97, 130, 157, 158, 96, 178, 87,
	169, 86, 88, 168, 129, 155, 161, 123, 120, 85,
	159, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 150, 166, 179, 90,
	0, 0, 172, 173, 174, 175, 0, 0, 91, 128,
	89, 107, 147, 110, 117, 140, 177, 132, 145, 94,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 81,
	0, 114, 176, 139, 101, 167, 99, 0, 612, 0,
	0, 0, 113, 0, 115, 0, 0, 149, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 611, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 0, 0, 0, 0, 137, 0, 0,
	152, 104, 103, 142, 112, 0, 0, 0, 95, 0,
	144, 133, 164, 0, 134, 143, 116, 156, 138, 163,
	195, 171, 154, 170, 82, 153, 162, 93, 146, 84,
	160, 151, 122, 108, 109, 83, 0, 141, 98, 102,
	97, 130, 157, 158, 96, 178, 87, 169, 86, 88,
	168, 129, 155, 161, 123, 120, 85, 159, 121, 119,
	111, 100, 105, 135, 118, 136, 106, 126, 125, 127,
	0, 0, 0, 150, 166, 179, 90, 0, 0, 172,
	173, 174, 175, 0, 0, 91, 128, 89, 107, 147,
	110, 117, 140, 177, 132, 145, 94, 165, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 592, 0, 0, 0, 81, 99, 114, 176,
	139, 101, 167, 113, 0, 115, 0, 0, 149, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 0, 594,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 0, 137, 0,
	0, 152, 104, 103, 142, 112, 0, 0, 0, 95,
	0, 144, 133, 164, 0, 590, 143, 116, 156, 138,
	163, 195, 171, 154, 170, 82, 153, 162, 93, 146,
	84, 160, 151, 122, 108, 109, 83, 0, 141, 98,
	102, 97, 130, 157, 158, 96, 178, 87, 169, 86,
	88, 168, 129, 155, 161, 123, 120, 85, 159, 121,
	119, 111, 100, 105, 135, 118, 136, 106, 126, 125,
	127, 0, 0, 0, 150, 166, 179, 90, 0, 0,
	172, 173, 174, 175, 0, 0, 91, 128, 89, 107,
	147, 110, 117, 140, 177, 132, 145, 94, 165, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 81, 99, 114,
	176, 139, 101, 167, 113, 0, 115, 0, 0, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 0, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 81, 99,
	114, 176, 139, 101, 167, 113, 0, 115, 0, 0,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 594, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 0, 0, 0, 0,
	137, 0, 0, 152, 104, 103, 142, 112, 0, 0,
	0, 95, 0, 144, 133, 164, 0, 134, 143, 116,
	156, 138, 163, 195, 171, 154, 170, 82, 153, 162,
	93, 146, 84, 160, 151, 122, 108, 109, 83, 0,
	141, 98, 102, 97, 130, 157, 158, 96, 178, 87,
	169, 86, 88, 168, 129, 155, 161, 123, 120, 85,
	159, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 150, 166, 179, 90,
	0, 0, 172, 173, 174, 175, 0, 0, 91, 128,
	89, 107, 147, 110, 117, 140, 177, 132, 145, 94,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 81,
	99, 114, 176, 139, 101, 167, 113, 0, 115, 0,
	0, 149, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 497, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 0,
	0, 137, 0, 0, 152, 104, 103, 142, 112, 0,
	0, 0, 95, 0, 144, 133, 164, 0, 134, 143,
	116, 156, 138, 163, 195, 171, 154, 170, 82, 153,
	162, 93, 146, 84, 160, 151, 122, 108, 109, 83,
	0, 141, 98, 102, 97, 130, 157, 158, 96, 178,
	87, 169, 86, 88, 168, 129, 155, 161, 123, 120,
	85, 159, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 150, 166, 179,
	90, 0, 0, 172, 173, 174, 175, 0, 0, 91,
	128, 89, 107, 147, 110, 117, 140, 177, 132, 145,
	94, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	81, 0, 114, 176, 139, 101, 167, 570, 99, 0,
	0, 0, 0, 0, 113, 0, 115, 0, 0, 149,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 194, 0, 0, 0, 0, 137,
	0, 0, 152, 104, 103, 142, 112, 0, 0, 0,
	95, 0, 144, 133, 164, 0, 134, 143, 116, 156,
	138, 163, 195, 171, 154, 170, 82, 153, 162, 93,
	146, 84, 160, 151, 122, 108, 109, 83, 0, 141,
	98, 102, 97, 130, 157, 158, 96, 178, 87, 169,
	86, 88, 168, 129, 155, 161, 123, 120, 85, 159,
	121, 119, 111, 100, 105, 135, 118, 136, 106, 126,
	125, 127, 0, 0, 0, 150, 166, 179, 90, 0,
	0, 172, 173, 174, 175, 0, 0, 91, 128, 89,
	107, 147, 110, 117, 140, 177, 132, 145, 94, 165,
	148, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 81, 99,
	114, 176, 139, 101, 167, 113, 0, 115, 0, 0,
	149, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 194, 0, 0, 0, 0,
	137, 0, 0, 152, 104, 103, 142, 112, 0, 0,
	0, 95, 0, 144, 133, 164, 0, 134, 143, 116,
	156, 138, 163, 195, 171, 154, 170, 82, 153, 162,
	93, 146, 84, 160, 151, 122, 108, 109, 83, 0,
	141, 98, 102, 97, 130, 157, 158, 96, 178, 87,
	169, 86, 88, 168, 129, 155, 161, 123, 120, 85,
	159, 121, 119, 111, 100, 105, 135, 118, 136, 106,
	126, 125, 127, 0, 0, 0, 150, 166, 179, 90,
	0, 0, 172, 173, 174, 175, 0, 0, 91, 128,
	89, 107, 147, 110, 117, 140, 177, 132, 145, 94,
	165, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 81,
	99, 114, 176, 139, 101, 167, 113, 0, 115, 0,
	0, 149, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 194, 0, 0, 0,
	0, 137, 0, 0, 152, 104, 103, 142, 112, 0,
	0, 0, 95, 0, 144, 133, 164, 0, 134, 143,
	116, 156, 138, 163, 195, 171, 154, 170, 82, 153,
	162, 93, 146, 84, 160, 151, 122, 108, 109, 83,
	0, 141, 98, 102, 97, 130, 157, 158, 96, 178,
	87, 169, 86, 88, 168, 129, 155, 161, 123, 120,
	85, 159, 121, 119, 111, 100, 105, 135, 118, 136,
	106, 126, 125, 127, 0, 0, 0, 150, 166, 179,
	90, 0, 0, 172, 173, 174, 175, 0, 0, 91,
	128, 89, 107, 147, 110, 117, 140, 177, 132, 145,
	94, 165, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	81, 99, 114, 176, 139, 101, 167, 113, 0, 115,
	0, 0, 149, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 137, 0, 0, 152, 104, 103, 142, 112,
	0, 0, 0, 95, 0, 144, 133, 164, 0, 134,
	143, 116, 156, 138, 163, 195, 171, 154, 170, 82,
	153, 162, 93, 146, 84, 160, 151, 122, 108, 109,
	83, 0, 141, 98, 102, 97, 130, 157, 158, 96,
	178, 87, 169, 86, 88, 168, 129, 155, 161, 123,
	120, 85, 159, 121, 119, 111, 100, 105, 135, 118,
	136, 106, 126, 125, 127, 0, 0, 0, 150, 166,
	179, 90, 0, 0, 172, 173, 174, 175, 0, 0,
	91, 128, 89, 107, 147, 110, 117, 140, 177, 132,
	145, 94, 165, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 81, 99, 114, 176, 139, 101, 167, 113, 0,
	115, 0, 0, 149, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 0, 0, 137, 0, 0, 152, 104, 103, 142,
	112, 0, 0, 0, 95, 0, 144, 133, 164, 0,
	134, 143, 116, 156, 138, 163, 195, 171, 154, 170,
	82, 153, 162, 93, 146, 84, 160, 151, 122, 108,
	109, 83, 0, 141, 98, 102, 97, 130, 157, 158,
	96, 178, 87, 169, 86, 88, 168, 129, 155, 161,
	123, 120, 85, 159, 121, 119, 111, 100, 105, 135,
	118, 136, 106, 126, 125, 127, 0, 0, 0, 150,
	166, 179, 90, 0, 0, 172, 173, 174, 175, 0,
	0, 91, 128, 89, 107, 147, 110, 117, 140, 177,
	132, 145, 94, 165, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 81, 99, 114, 176, 139, 101, 167, 113,
	0, 115, 0, 0, 149, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 194,
	0, 0, 0, 0, 137, 0, 0, 152, 104, 103,
	142, 112, 0, 0, 0, 95, 0, 144, 133, 164,
	0, 134, 143, 116, 156, 138, 163, 195, 171, 154,
	170, 82, 153, 162, 93, 146, 84, 160, 151, 122,
	108, 109, 83, 0, 141, 98, 102, 97, 130, 157,
	158, 96, 178, 87, 169, 86, 88, 168, 129, 155,
	161, 123, 120, 85, 159, 121, 119, 111, 100, 105,
	135, 118, 136, 106, 126, 125, 127, 0, 0, 0,
	150, 166, 179, 90, 0, 0, 172, 173, 174, 175,
	0, 0, 91, 128, 89, 107, 147, 110, 117, 140,
	177, 132, 145, 94, 165, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 114, 176, 139, 101, 167,
}
var yyPact = [...]int{

	1935, -1000, -179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 821, 849, -1000, -1000, -1000, -1000, -1000, -1000, 221,
	7416, 73, 106, 23, 10093, 104, 1119, 10535, -1000, 0,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -79, -83, 668,
	-1000, -1000, -1000, -1000, -1000, 812, 818, 709, 804, 751,
	-1000, 5803, 70, 8981, 9872, 5095, -1000, -1000, 219, 10535,
	100, 10535, -130, 10314, 62, 62, 62, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	102, 10535, -1000, 10535, 60, 557, 60, 60, 60, 10535,
	-1000, 144, -1000, -1000, -1000, -1000, 10535, 554, 777, 66,
	3103, 3103, 3103, 3103, 8, 3103, -62, 712, 833, -1000,
	-1000, -1000, -1000, 3103, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 454, 786, 6514, 6514,
	821, -1000, 668, -1000, -1000, -1000, 774, -1000, -1000, 334,
	836, -1000, 2111, 140, -1000, 6514, 1503, 662, -1000, -1000,
	662, -1000, -1000, 119, -1000, -1000, 6968, 6968, 6968, 6968,
	6968, 6968, 6968, 6968, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 662, -1000,
	6278, 662, 662, 662, 662, 662, 662, 662, 662, 6514,
	662, 662, 662, 662, 662, 662, 662, 662, 662, 662,
	662, 662, 662, 9651, 672, 707, -1000, -1000, -1000, 801,
	8091, 8760, 10535, 570, -1000, 654, 4846, -107, -1000, -1000,
	-1000, 214, 8539, -1000, -1000, -1000, 776, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 552, 10535, -1000, 2282, -1000, 549, 3103, 77, 673,
	547, 243, 528, 10535, 10535, 3103, 67, 10535, 799, 710,
	10535, 527, 526, -1000, 4597, -1000, 3103, 3103, 3103, 3103,
	3103, 3103, 3103, 3103, -1000, -1000, -1000, -1000, -1000, -1000,
	3103, 3103, -1000, 835, 292, -1000, -1000, 10535, 6514, -1000,
	-1000, -1000, -1000, -1000, -1000, 844, 176, 384, 130, 659,
	-1000, 355, 812, 454, 751, 8312, 725, -1000, -1000, 10535,
	-1000, 6514, 6514, 349, -1000, 9423, -1000, -1000, 3601, 190,
	6968, 376, 307, 6968, 6968, 6968, 6968, 6968, 6968, 6968,
	6968, 6968, 6968, 6968, 6968, 6968, 6968, 6968, 385, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 516, -1000, 668,
	475, 475, 155, 155, 155, 155, 155, 155, 155, 7195,
	5331, 454, 524, 343, 6278, 5803, 5803, 6514, 6514, 10756,
	10756, 5803, 807, 225, 343, 10756, -1000, 454, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5803, 5803, 5803, 5803, 34,
	10535, -1000, 10756, 8981, 8981, 8981, 8981, 8981, -1000, 740,
	739, -1000, 724, 723, 745, 10535, -1000, 507, 8091, 167,
	662, -1000, 9202, -1000, -1000, 34, 584, 8981, 10535, -1000,
	-1000, 4348, 654, -107, 652, -1000, -98, -92, 6039, 150,
	-1000, -1000, -1000, -1000, 2854, 278, 580, 356, -68, -1000,
	-1000, -1000, 669, -1000, 669, 669, 669, 669, -28, -28,
	-28, -28, -1000, -1000, -1000, -1000, -1000, 692, 691, -1000,
	669, 669, 669, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 689,
	689, 689, 670, 670, 701, -1000, 10535, -162, 501, 3103,
	798, 3103, -1000, 92, -1000, 10535, -1000, -1000, 10535, 3103,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10535, 321, 10535, 10535, -1000,
	343, -1000, 755, 6514, 6514, 4099, 6514, -1000, -1000, -1000,
	786, -1000, 807, 819, -1000, 766, 763, 5803, -1000, -1000,
	190, 233, -1000, -1000, 423, -1000, -1000, -1000, -1000, 129,
	662, -1000, 1581, -1000, -1000, -1000, -1000, 376, 6968, 6968,
	6968, 72, 1581, 1566, 589, 1657, 155, 147, 147, 160,
	160, 160, 160, 160, 228, 228, -1000, -1000, -1000, 454,
	-1000, -1000, -1000, 454, 5803, 653, -1000, -1000, 6514, -1000,
	454, 505, 505, 332, 269, 658, -1000, 128, 648, 505,
	5803, 265, -1000, 6514, 454, -1000, 505, 454, 505, 505,
	627, 662, -1000, 639, -1000, 207, 707, 688, 708, 895,
	-1000, -1000, -1000, -1000, 730, -1000, 727, -1000, -1000, -1000,
	-1000, -1000, 99, 97, 88, 10314, -1000, 831, 8981, 622,
	-1000, -1000, 652, -107, -111, -1000, -1000, -1000, 343, -1000,
	482, 650, 2605, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	684, 469, -1000, 790, 192, 185, 444, 785, -1000, -1000,
	-1000, 775, -1000, 252, -72, -1000, -1000, 373, -28, -28,
	-1000, -1000, 150, 773, 150, 150, 150, 408, 408, -1000,
	-1000, -1000, -1000, 372, -1000, -1000, -1000, 365, -1000, 706,
	10314, 3103, -1000, 3850, -1000, -1000, -1000, -1000, -1000, -1000,
	437, 262, 177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32, -1000, 3103, -1000, 292, -1000,
	405, 6514, -1000, -1000, 749, 343, 343, 125, -1000, -1000,
	10535, -1000, -1000, -1000, -1000, 642, -1000, -1000, -1000, 3352,
	5803, -1000, 72, 1581, 1460, -1000, 6968, 6968, -1000, -1000,
	505, 5803, 343, -1000, -1000, -1000, 53, 385, 53, 6968,
	6968, 4099, 6968, 6968, -155, 645, 203, -1000, 6514, 208,
	-1000, -1000, -1000, -1000, -1000, 705, 10756, 662, -1000, 7864,
	10314, 821, 10756, 6514, 6514, -1000, -1000, 6514, 682, -1000,
	6514, -1000, -1000, -1000, 662, 662, 662, 489, -1000, 821,
	622, -1000, -1000, -1000, -101, -108, -1000, -1000, 2854, -1000,
	2854, 10314, 50, -1000, 432, 416, -1000, -1000, 671, 690,
	68, -1000, -1000, -1000, 571, 150, 150, -1000, 202, -1000,
	-1000, -1000, 498, -1000, 496, 623, 494, 10535, -1000, -1000,
	620, -1000, 206, -1000, -1000, 10314, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10314, 10535,
	-1000, -1000, -1000, -1000, -1000, 10314, -1000, 321, -1000, 343,
	-1000, 3850, -1000, 831, 8981, -1000, -1000, 454, -1000, 6968,
	1581, 1581, -1000, -1000, 454, 669, 669, -1000, 669, 670,
	-1000, 669, -9, 669, -10, 454, 454, 1393, 1419, -1000,
	1279, 382, 662, -139, -1000, 343, 6514, -1000, 787, 569,
	613, -1000, -1000, 5567, 454, 491, 123, 489, 812, -1000,
	343, 343, 343, 10314, 343, 10314, 10314, 10314, 7637, 10314,
	812, -1000, -1000, -1000, -1000, 2605, -1000, 476, -1000, 669,
	-1000, -1000, -1000, 10314, -54, 841, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -28, 404, -28,
	361, -1000, 352, 3103, 3850, 2854, -1000, 666, -1000, -1000,
	-1000, -1000, 794, -1000, 829, 616, -1000, 1581, -1000, -1000,
	94, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6968, 6968, -1000, 6968, 6968, 6968, 454, 401, 343, 784,
	-1000, 662, -1000, -1000, 667, 10314, 10314, -1000, -1000, 468,
	-1000, 457, 457, 457, 167, -1000, -1000, 127, 10314, -1000,
	453, 157, -1000, -119, 150, -1000, 150, 561, 560, -1000,
	-1000, -1000, 10314, 662, 826, 816, -1000, -1000, 1367, 1367,
	1367, 1367, 2, -1000, -1000, 840, -1000, 662, -1000, 668,
	118, -1000, 10314, -1000, -1000, -1000, -1000, -1000, 127, -1000,
	413, 201, 400, -1000, 47, 270, 783, -1000, 780, -1000,
	-1000, -1000, -1000, -1000, 451, 31, -1000, 6514, 6514, -1000,
	-1000, -1000, -1000, 454, 41, -170, 10756, 613, 454, 10314,
	-1000, -1000, -1000, 283, -1000, -1000, 10535, -1000, 387, -1000,
	-1000, 673, 449, -1000, 10314, 343, 597, -1000, 744, -160,
	-173, 585, -1000, -1000, -1000, 664, -1000, -162, -1000, 31,
	760, -1000, 728, -1000, 10314, -1000, -1000, 16, -168, 442,
	11, -171, -1000, 662, -175, 6741, -1000, 1367, 454, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1133, 60, 469, 1127, 1115, 1113, 1111, 1108, 1107,
	1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1097, 1095,
	1094, 1092, 1091, 1089, 113, 1085, 1084, 1082, 56, 1080,
	63, 1076, 1075, 22, 233, 28, 25, 935, 1073, 12,
	58, 53, 1072, 41, 1070, 1069, 73, 1067, 62, 1066,
	1061, 522, 1057, 1051, 14, 19, 1048, 1046, 1045, 1039,
	69, 471, 1038, 1031, 1018, 1017, 1015, 1011, 46, 3,
	7, 23, 10, 1009, 466, 40, 1006, 45, 1005, 1004,
	1003, 997, 91, 969, 37, 966, 16, 48, 965, 13,
	54, 24, 9, 6, 71, 51, 964, 20, 52, 36,
	962, 961, 437, 958, 954, 27, 953, 21, 150, 381,
	952, 950, 946, 942, 42, 0, 572, 194, 59, 934,
	933, 932, 1436, 57, 55, 17, 931, 39, 416, 44,
	928, 927, 47, 926, 925, 924, 923, 917, 916, 915,
	277, 914, 913, 912, 32, 43, 911, 901, 49, 18,
	899, 897, 896, 29, 50, 894, 893, 34, 890, 888,
	887, 885, 883, 33, 15, 876, 8, 875, 5, 874,
	26, 873, 1, 872, 11, 871, 2, 862, 4, 30,
	861, 857, 67, 626, 856, 855, 78,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	184, 184, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 130,
	130, 11, 11, 11, 11, 11, 11, 11, 11, 178,
	178, 177, 176, 176, 175, 175, 174, 16, 159, 161,
	161, 160, 160, 160, 160, 154, 133, 133, 133, 133,
	136, 136, 134, 134, 134, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 153, 153, 140, 140, 148, 148, 149, 149,
	149, 146, 146, 147, 147, 150, 150, 150, 141, 141,
	141, 141, 141, 141, 141, 143, 143, 151, 151, 144,
	144, 144, 145, 145, 152, 152, 152, 152, 152, 142,
	142, 155, 155, 169, 169, 168, 168, 168, 158, 158,
	165, 165, 165, 165, 165, 157, 157, 167, 167, 166,
	156, 156, 170, 162, 162, 162, 163, 163, 163, 164,
	164, 164, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 173, 171, 171, 172, 172, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 106, 106, 104, 104, 105, 105, 105, 107,
	107, 107, 131, 131, 131, 19, 19, 21, 21, 22,
	23, 20, 20, 20, 20, 20, 20, 20, 185, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 64, 186, 186, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 129, 129,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 96, 96, 96, 121, 121, 121, 101, 101, 108,
	108, 109, 109, 102, 102, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 112, 112,
	113, 113, 113, 120, 120, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 182, 183, 127,
	128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	3, 1, 10, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	7, 5, 4, 2, 2, 4, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 3, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 143, 118, 136, 50, 155, 156,
	158, 159, 25, 137, 138, 141, 142, 31, 32, -182,
	8, 239, 54, -181, 254, -82, 15, -26, 5, -24,
	-185, -24, -24, -24, -24, -24, -159, -161, 54, 89,
	-113, 123, 71, 151, 231, 120, 121, 127, -116, 57,
	-115, 247, 155, 166, 160, 187, 179, 177, 180, 218,
	207, 216, 66, 158, 227, 139, 175, 171, 169, 27,
	192, 252, 170, 133, 132, 193, 197, 219, 164, 165,
	221, 191, 135, 33, 249, 35, 147, 222, 195, 190,
	186, 189, 163, 185, 39, 199, 198, 200, 217, 182,
	172, 18, 225, 142, 145, 194, 196, 128, 149, 251,
	223, 168, 134, 146, 141, 226, 159, 220, 229, 38,
	204, 162, 131, 156, 153, 183, 148, 173, 174, 188,
	161, 184, 157, 150, 143, 228, 205, 253, 181, 178,
	154, 152, 210, 211, 212, 213, 250, 224, 176, 206,
	-102, 123, 125, 121, 121, 122, 123, 231, 120, 121,
	-51, -122, 57, -115, 123, 151, 121, 107, 180, 114,
	208, 122, 33, 149, -131, 121, -104, 152, 207, 210,
	211, 212, 213, 57, 220, 219, 214, -122, 157, -127,
	-127, -127, -127, -127, 209, 209, -2, -86, 17, 16,
	-5, -3, -182, 6, 20, 21, -30, 40, 41, -25,
	-36, 98, -37, -122, -56, 73, -61, 29, 57, -115,
	23, -60, -57, -75, -73, -74, 107, 108, 109, 96,
	97, 104, 74, 110, -65, -63, -64, -66, 59, 58,
	67, 60, 61, 62, 63, 68, 69, 70, -116, -71,
	-182, 44, 45, 240, 241, 242, 243, 246, 244, 76,
	34, 230, 238, 237, 236, 234, 235, 232, 233, 126,
	231, 102, 239, -102, -39, -40, -41, -42, -53, -74,
	-182, -51, 11, -46, -51, -94, -130, 157, -98, 220,
	219, -117, -96, -116, -114, 218, 180, 217, 119, 72,
	22, 24, 202, 75, 107, 16, 76, 106, 240, 114,
	48, 232, 233, 230, 242, 243, 231, 208, 29, 10,
	25, 137, 21, 100, 116, 79, 80, 140, 23, 138,
	70, 19, 51, 11, 13, 14, 126, 125, 91, 122,
	46, 8, 110, 26, 88, 42, 28, 44, 89, 17,
	234, 235, 31, 246, 144, 102, 49, 36, 73, 68,
	52, 71, 15, 47, 90, 117, 239, 45, 120, 6,
	245, 30, 136, 43, 121, 209, 78, 124, 69, 5,
	127, 32, 9, 50, 53, 236, 237, 238, 34, 77,
	12, -160, 89, -154, 57, -51, 122, -51, 239, -116,
	-109, 126, -109, -109, 121, -51, -51, -108, 126, 57,
	-108, -108, -108, -51, 111, -51, 57, 30, 231, 57,
	149, 121, 150, 123, -128, -182, -117, -128, -128, -128,
	153, 154, -128, 216, -106, 209, 215, 52, 12, -128,
	-127, -127, -183, 56, -87, 19, 31, -37, -122, -83,
	-84, -37, -82, -2, -24, 36, -28, 21, 65, 11,
	-119, 72, 71, 88, -118, 22, -116, 59, 111, -37,
	-58, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 81,
	82, 83, 84, 85, 86, 87, -103, -182, -74, -182,
	112, 113, -61, -61, -61, -61, -61, -61, -61, -61,
	-182, -2, -69, -37, -182, -182, -182, -182, -182, -182,
	-182, -182, -182, -78, -37, -182, -186, -182, -186, -186,
	-186, -186, -186, -186, -186, -182, -182, -182, -182, -52,
	26, -51, 30, 55, -47, -49, -48, -50, 42, 46,
	48, 43, 44, 45, 49, -126, 22, -39, -182, -125,
	145, -124, 22, -122, 59, -51, -46, -184, 55, 11,
	53, 55, -94, 157, -95, -99, 221, 223, 81, -121,
	-116, 59, 29, 30, 56, 55, -51, -133, -136, -138,
	-137, -139, -134, -135, 177, 178, 107, 181, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 30, 139,
	173, 174, 175, 176, 193, 194, 195, 196, 197, 198,
	199, 200, 160, 161, 162, 163, 164, 165, 166, 168,
	169, 170, 171, 172, 57, -128, 123, -178, 53, 57,
	73, 57, -51, -51, -128, 124, -51, 23, 52, -51,
	57, 57, -123, -122, -114, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, 11, -105, 11, 91, -51,
	-37, 9, 91, 55, 18, 111, 55, -85, 24, 25,
	-86, -183, -30, -62, -116, 60, 63, -29, 43, -51,
	-37, -37, -67, 68, 73, 69, 70, -118, 98, -123,
	-117, -114, -61, -68, -71, -74, 64, 91, 89, 90,
	75, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -129, 57, 59, 57,
	-60, -60, -116, -35, 21, -34, -36, -183, 55, -183,
	-2, -34, -34, -37, -37, -75, -116, -122, -75, -34,
	-28, -76, -77, 77, -75, -183, -34, -35, -34, -34,
	-90, 145, -51, -93, -97, -75, -40, -41, -41, -40,
	-41, 42, 42, 42, 47, 42, 47, 42, -48, -122,
	-183, -54, 50, 125, 51, -182, -124, -90, 53, -39,
	-51, -98, -95, 55, 222, 224, 225, 52, -37, -145,
	106, -162, -163, -164, -117, 59, 60, -154, -155, -156,
	-165, 130, -170, 128, 131, 127, -157, 133, 122, 28,
	56, -150, 68, 73, -146, 205, -140, 54, -140, -140,
	-140, -140, -144, 180, -144, -144, -144, 54, 54, -140,
	-140, -140, -148, 54, -148, -148, -149, 54, -149, -120,
	53, -51, -176, 250, -177, 57, -128, 23, -128, -110,
	119, 116, 117, -173, 115, 202, 180, 66, 29, 15,
	240, 145, 253, 57, 146, -51, -51, -128, -51, -107,
	89, 12, -122, -122, 38, -37, -37, -123, -84, -87,
	-101, 19, 11, 34, 34, -34, 68, 69, 70, 111,
	-182, -68, -61, -61, -61, -33, 140, 72, -183, -183,
	-34, 55, -37, -183, -183, -183, 55, 53, 22, 55,
	11, 111, 55, 11, -183, -34, -79, -77, 79, -37,
	-183, -183, -183, -183, -183, -59, 30, 34, -2, -182,
	-182, -55, 55, 12, 81, -44, -43, 52, 53, -45,
	52, -43, 42, 42, 122, 122, 122, -91, -116, -55,
	-39, -55, -99, -100, 226, 223, 229, 57, 55, -164,
	81, 54, 57, 28, -157, -157, 57, 57, 28, -141,
	29, 68, -147, 206, 60, -144, -144, -145, 30, -145,
	-145, -145, -153, 59, -153, 60, 60, 52, -116, -128,
	-175, -174, -117, -127, -179, 151, 129, 130, 133, 132,
	57, 122, 28, 128, 131, 145, 127, -179, 151, -111,
	-112, 124, 22, 122, 28, 145, -128, -105, 59, -37,
	39, 111, -51, -38, 11, 98, -117, -35, -33, 72,
	-61, -61, -183, -36, -132, 107, 177, 139, 175, 171,
	191, 182, 204, 173, 205, -129, -132, -61, -61, -117,
	-61, -61, 247, -82, 80, -37, 78, -92, 52, -93,
	-70, -72, -71, -182, -2, -88, -116, -91, -82, -97,
	-37, -37, -37, 54, -37, -182, -182, -182, -183, 55,
	-82, -55, 223, 227, 228, -163, -164, -167, -166, -116,
	-170, 57, 57, 54, -143, 52, 59, 60, 61, 68,
	230, 67, 56, -145, -145, 57, 107, 56, 55, 56,
	55, 56, 55, -51, 55, 81, -127, -116, -127, -116,
	-51, -127, -116, -107, -55, -39, -183, -61, -183, -140,
	-140, -140, -149, -140, 165, -140, 165, -183, -183, -183,
	55, 19, -183, 55, 19, -182, -32, 245, -37, 27,
	-92, 55, -183, -183, -183, 55, 111, -183, -86, -89,
	-116, -89, -89, -89, -125, -116, -86, 56, 55, -140,
	-89, -151, 202, 9, -144, 59, -144, 60, 60, -128,
	-174, -164, 54, 26, -80, 13, -144, 57, -61, -61,
	-61, -61, -61, -183, 59, 28, -72, 34, -2, -182,
	-116, -116, 55, 56, -183, -183, -183, -54, -169, -168,
	53, 135, 66, -166, 56, -152, 128, 28, 127, 230,
	-145, -145, 56, 56, -89, -182, -81, 14, 16, -183,
	-183, -183, -183, -31, 91, 250, 9, -70, -2, 111,
	-116, -168, 57, -158, 81, 59, 134, -142, 66, 28,
	28, 56, -171, -172, 145, -37, -69, -183, 248, 49,
	251, -93, -183, -116, 60, -51, 59, -178, -183, 55,
	-116, 39, 249, 252, 54, -176, -172, 34, 39, -89,
	147, 250, 56, 148, 251, -182, 252, -61, 144, -183,
	-183,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 520, 0, 288, 288, 288, 288, 288, 288, 0,
	590, 573, 0, 0, 0, 0, -2, 276, 277, 0,
	279, 280, 799, 799, 799, 799, 799, 0, 0, 0,
	34, 35, 797, 1, 3, 528, 0, 0, 292, 295,
	290, 0, 573, 0, 0, 0, 61, 62, 0, 0,
	0, 786, 0, 787, 571, 571, 571, 591, 592, 595,
	596, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	0, 0, 574, 0, 569, 0, 569, 569, 569, 0,
	234, 359, 599, 600, 786, 787, 0, 0, 0, 0,
	800, 800, 800, 800, 0, 800, 0, 253, 254, 257,
	258, 259, 260, 800, 273, 274, 265, 275, 278, 281,
	282, 283, 284, 285, 799, 799, 28, 532, 0, 0,
	520, 30, 0, 288, 293, 294, 298, 296, 297, 289,
	0, 306, 310, 0, 367, 0, 372, 374, -2, -2,
	0, 409, 410, 411, 412, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 437, 438, 439, 440, 505, 506,
	507, 508, 509, 510, 511, 512, 376, 377, 502, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 467, 467, 467, 467, 467, 467, 467, 467, 0,
	0, 0, 0, 0, 0, 317, 319, 320, 321, 340,
	0, 342, 0, 0, 42, 46, 0, 777, 556, -2,
	-2, 0, 0, 597, 598, -2, 703, -2, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 0, 0, 81, 0, 79, 0, 800, 0, 69,
	0, 0, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 235, 800, 800, 800, 800,
	800, 800, 800, 800, 244, 801, 802, 245, 246, 247,
	800, 800, 249, 0, 266, 262, 263, 0, 0, 261,
	286, 287, 29, 798, 23, 0, 0, 529, 0, 521,
	522, 525, 528, 28, 295, 0, 300, 299, 291, 0,
	307, 0, 0, 0, 311, 0, 313, 314, 0, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	395, 396, 397, 398, 399, 400, 373, 0, 387, 0,
	0, 0, 429, 430, 431, 432, 433, 434, 435, 0,
	302, 28, 0, 407, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 494, 0, 459, 0, 460, 461,
	462, 463, 464, 465, 466, 0, 302, 0, 0, 44,
	0, 358, 0, 0, 0, 0, 0, 0, 347, 0,
	0, 350, 0, 0, 0, 0, 341, 0, 0, 361,
	749, 343, 0, 345, 346, -2, 0, 0, 0, 40,
	41, 0, 47, 777, 49, 50, 0, 0, 0, 162,
	564, 565, 566, 562, 193, 0, 0, 145, 141, 87,
	88, 89, 134, 91, 134, 134, 134, 134, 159, 159,
	159, 159, 117, 118, 119, 120, 121, 0, 0, 104,
	134, 134, 134, 108, 124, 125, 126, 127, 128, 129,
	130, 131, 92, 93, 94, 95, 96, 97, 98, 136,
	136, 136, 138, 138, 593, 64, 0, 72, 0, 800,
	0, 800, 77, 0, 209, 0, 228, 570, 0, 800,
	231, 232, 360, 601, 602, 236, 237, 238, 239, 240,
	241, 242, 243, 248, 252, 0, 269, 0, 0, 256,
	255, 533, 0, 0, 0, 0, 0, 524, 526, 527,
	532, 31, 298, 0, 513, 0, 0, 0, 301, 26,
	368, 369, 371, 388, 0, 390, 392, 312, 308, 0,
	503, -2, 378, 379, 403, 404, 405, 0, 0, 0,
	0, 401, 383, 0, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 428, 478, 479, 0,
	426, 427, 436, 0, 0, 303, 304, 406, 0, 551,
	28, 0, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 500, 497, 0, 0, 468, 0, 0, 0, 0,
	0, 0, 357, 365, 553, 0, 318, 336, 338, 0,
	333, 348, 349, 351, 0, 353, 0, 355, 356, 322,
	323, 324, 0, 0, 0, 0, 344, 365, 0, 365,
	43, 557, 48, 0, 0, 53, 54, 558, 559, 560,
	0, 78, 194, 196, 199, 200, 201, 82, 83, 84,
	0, 0, 191, 0, 0, 0, 0, 0, 185, 186,
	80, 148, 146, 0, 143, 142, 90, 0, 159, 159,
	111, 112, 162, 0, 162, 162, 162, 0, 0, 105,
	106, 107, 99, 0, 100, 101, 102, 0, 103, 0,
	0, 800, 66, 0, 70, 71, 67, 572, 68, 799,
	0, 0, 585, 210, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 0, 227, 800, 230, 266, 251,
	0, 0, 267, 268, 0, 530, 531, 0, 523, 24,
	0, 567, 568, 514, 515, 315, 389, 391, 393, 0,
	302, 380, 401, 384, 0, 381, 0, 0, 375, 441,
	0, 0, 408, -2, 444, 445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 520, 0, 498, 0, 0,
	458, 469, 470, 471, 472, 545, 0, 0, -2, 0,
	0, 520, 0, 0, 0, 330, 337, 0, 0, 331,
	0, 332, 352, 354, 0, 0, 0, 0, 328, 520,
	365, 39, 51, 52, 0, 0, 58, 163, 0, 197,
	0, 0, 0, 180, 0, 0, 183, 184, 0, 155,
	0, 147, 86, 144, 0, 162, 162, 113, 0, 114,
	115, 116, 0, 132, 0, 0, 0, 0, 594, 65,
	73, 74, 0, 202, 799, 0, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 799, 0, 0,
	799, 586, 587, 588, 589, 0, 229, 269, 270, 271,
	534, 0, 25, 365, 0, 309, 504, 0, 382, 0,
	402, 385, 442, 305, 0, 134, 134, 483, 134, 138,
	486, 134, 488, 134, 491, 0, 0, 0, 0, 503,
	0, 0, 0, 495, 457, 501, 0, 32, 0, 545,
	535, 547, 549, 0, 28, 0, 541, 0, 528, 554,
	366, 555, 334, 0, 339, 0, 0, 0, 342, 0,
	528, 38, 55, 56, 57, 195, 198, 0, 187, 134,
	190, 181, 182, 0, 157, 0, 149, 150, 151, 152,
	153, 154, 135, 109, 110, 160, 161, 159, 0, 159,
	0, 139, 0, 800, 0, 0, 203, 0, 204, 206,
	207, 208, 0, 250, 516, 316, 443, 386, 446, 480,
	159, 484, 485, 487, 489, 490, 492, 448, 447, 449,
	0, 0, 452, 0, 0, 0, 0, 0, 499, 0,
	33, 0, 550, -2, 0, 0, 0, 45, 36, 0,
	326, 0, 0, 0, 361, 329, 37, 172, 0, 189,
	0, 164, 158, 0, 162, 133, 162, 0, 0, 63,
	75, 76, 0, 0, 518, 0, 481, 482, 0, 0,
	0, 0, 473, 456, 496, 0, 548, 0, -2, 0,
	543, 542, 0, 335, 362, 363, 364, 325, 171, 173,
	0, 178, 0, 188, 0, 169, 0, 166, 168, 156,
	122, 123, 137, 140, 0, 0, 27, 0, 0, 450,
	451, 453, 454, 0, 0, 0, 0, 538, 28, 0,
	327, 174, 175, 0, 179, 177, 0, 85, 0, 165,
	167, 69, 0, 223, 0, 519, 517, 455, 0, 0,
	0, 546, -2, 544, 176, 0, 170, 72, 222, 0,
	0, 474, 0, 477, 0, 205, 224, 0, 475, 0,
	0, 0, 192, 0, 0, 0, 476, 0, 0, 225,
	226,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 254,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:308
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:313
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:314
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:318
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:339
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:345
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:353
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:363
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:397
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:409
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:425
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:437
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:450
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:459
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:464
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:474
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:492
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:502
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:544
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:555
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:564
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:568
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:576
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:580
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:585
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:600
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:611
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:616
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:628
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:635
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:646
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:661
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:671
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:890
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:895
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:899
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:904
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:920
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:934
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:966
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:970
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:974
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:978
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:982
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:986
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:990
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:995
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKey
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.optVal = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1090
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 192:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = yyDollar[1].str
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1254
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1259
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1319
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1327
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1332
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1422
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1427
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = "full "
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.showFilter = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = SessionStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = GlobalStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &Begin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &Begin{}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.statement = &Commit{}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &Rollback{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1608
		{
			setAllowComments(yylex, true)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.bytes2 = nil
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.str = UnionStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = UnionAllStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = UnionDistinctStr
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = SQLCacheStr
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.str = DistinctStr
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.str = StraightJoinHint
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.selectExprs = nil
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.empty = struct{}{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.empty = struct{}{}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = JoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.str = JoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.str = JoinStr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = StraightJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.str = LeftJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.str = LeftJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.str = RightJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.str = RightJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.str = NaturalJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1907
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.indexHints = nil
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.str = IsNullStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.str = IsNotNullStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = IsTrueStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = IsNotTrueStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = IsFalseStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.str = IsNotFalseStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.str = EqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.str = LessThanStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.str = GreaterThanStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.str = LessEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.str = GreaterEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.str = NotEqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2242
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2272
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.str = BooleanModeStr
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.str = QueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.str = string("")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.expr = &NullVal{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2617
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.exprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.orderBy = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.str = DescScr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.limit = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.str = ForUpdateStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.str = ShareModeStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2737
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2750
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.updateExprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2810
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2861
		{
			yyVAL.bytes = []byte("charset")
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.expr = &Default{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.byt = 0
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.byt = 1
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.str = ""
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.str = IgnoreStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2952
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3196
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			decNesting(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3210
		{
			forceEOF(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3215
		{
			forceEOF(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3219
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
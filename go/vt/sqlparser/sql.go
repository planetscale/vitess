//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const BIT_LITERAL = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const LE = 57415
const GE = 57416
const NE = 57417
const NULL_SAFE_EQUAL = 57418
const IS = 57419
const LIKE = 57420
const REGEXP = 57421
const IN = 57422
const SHIFT_LEFT = 57423
const SHIFT_RIGHT = 57424
const DIV = 57425
const MOD = 57426
const UNARY = 57427
const COLLATE = 57428
const BINARY = 57429
const UNDERSCORE_BINARY = 57430
const INTERVAL = 57431
const JSON_EXTRACT_OP = 57432
const JSON_UNQUOTE_EXTRACT_OP = 57433
const CREATE = 57434
const ALTER = 57435
const DROP = 57436
const RENAME = 57437
const ANALYZE = 57438
const TABLE = 57439
const INDEX = 57440
const VIEW = 57441
const TO = 57442
const IGNORE = 57443
const IF = 57444
const UNIQUE = 57445
const USING = 57446
const PRIMARY = 57447
const SHOW = 57448
const DESCRIBE = 57449
const EXPLAIN = 57450
const DATE = 57451
const ESCAPE = 57452
const REPAIR = 57453
const OPTIMIZE = 57454
const TRUNCATE = 57455
const MAXVALUE = 57456
const PARTITION = 57457
const REORGANIZE = 57458
const LESS = 57459
const THAN = 57460
const BIT = 57461
const TINYINT = 57462
const SMALLINT = 57463
const MEDIUMINT = 57464
const INT = 57465
const INTEGER = 57466
const BIGINT = 57467
const INTNUM = 57468
const REAL = 57469
const DOUBLE = 57470
const FLOAT_TYPE = 57471
const DECIMAL = 57472
const NUMERIC = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const NAMES = 57505
const CHARSET = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 263,
	77, 557,
	106, 557,
	-2, 38,
	-1, 265,
	77, 579,
	106, 579,
	-2, 40,
	-1, 270,
	106, 458,
	-2, 454,
	-1, 271,
	106, 459,
	-2, 455,
	-1, 543,
	5, 21,
	-2, 405,
	-1, 580,
	106, 461,
	-2, 457,
	-1, 733,
	5, 22,
	-2, 282,
	-1, 825,
	5, 22,
	-2, 406,
	-1, 898,
	5, 21,
	-2, 408,
	-1, 965,
	5, 22,
	-2, 409,
}

const yyPrivate = 57344

const yyLast = 7291

var yyAct = [...]int{

	329, 37, 973, 502, 289, 302, 840, 262, 903, 235,
	440, 328, 722, 875, 721, 619, 606, 678, 579, 377,
	795, 583, 688, 787, 582, 571, 702, 757, 43, 378,
	3, 718, 271, 351, 655, 300, 600, 592, 37, 291,
	685, 615, 228, 266, 357, 251, 240, 273, 42, 250,
	442, 255, 1001, 381, 992, 395, 998, 62, 267, 987,
	996, 244, 135, 227, 366, 991, 986, 234, 888, 934,
	249, 277, 635, 47, 951, 229, 230, 231, 232, 233,
	753, 599, 911, 227, 227, 134, 633, 607, 929, 227,
	845, 846, 847, 49, 50, 51, 52, 927, 957, 848,
	687, 995, 993, 974, 777, 623, 564, 566, 284, 279,
	774, 639, 949, 283, 389, 126, 776, 297, 448, 125,
	632, 126, 443, 736, 514, 128, 129, 130, 594, 735,
	876, 734, 275, 804, 941, 304, 976, 468, 467, 477,
	478, 470, 471, 472, 473, 474, 475, 476, 469, 456,
	455, 479, 280, 878, 274, 388, 131, 594, 227, 919,
	227, 127, 491, 492, 227, 854, 457, 828, 629, 634,
	627, 799, 740, 501, 880, 288, 884, 565, 879, 399,
	877, 385, 758, 747, 454, 882, 254, 457, 479, 469,
	637, 640, 479, 398, 881, 662, 456, 455, 890, 883,
	885, 607, 445, 805, 775, 950, 773, 948, 455, 660,
	661, 659, 703, 457, 631, 855, 593, 849, 985, 529,
	530, 591, 596, 590, 457, 390, 751, 597, 630, 468,
	467, 477, 478, 470, 471, 472, 473, 474, 475, 476,
	469, 37, 969, 479, 286, 593, 703, 40, 811, 977,
	636, 459, 456, 455, 359, 915, 379, 658, 914, 892,
	806, 638, 766, 456, 455, 765, 754, 353, 788, 457,
	354, 472, 473, 474, 475, 476, 469, 441, 980, 479,
	457, 227, 441, 960, 913, 458, 853, 764, 227, 227,
	842, 227, 447, 748, 62, 780, 781, 782, 681, 488,
	490, 456, 455, 679, 690, 680, 456, 455, 439, 62,
	285, 227, 392, 227, 62, 355, 227, 274, 457, 227,
	648, 650, 651, 457, 290, 649, 953, 500, 982, 290,
	504, 505, 506, 507, 508, 509, 510, 18, 513, 515,
	515, 515, 515, 515, 515, 515, 515, 523, 524, 525,
	526, 943, 290, 908, 907, 793, 290, 860, 859, 532,
	541, 544, 542, 531, 952, 255, 255, 255, 255, 267,
	850, 546, 857, 856, 827, 290, 693, 290, 364, 290,
	379, 40, 560, 561, 363, 326, 401, 400, 255, 62,
	543, 254, 693, 719, 227, 396, 820, 227, 227, 227,
	227, 396, 267, 572, 568, 44, 364, 573, 227, 562,
	60, 548, 227, 550, 547, 227, 549, 533, 227, 572,
	227, 227, 823, 493, 494, 495, 496, 497, 498, 499,
	608, 609, 610, 62, 575, 489, 567, 793, 268, 558,
	576, 570, 793, 364, 364, 602, 603, 604, 605, 587,
	578, 584, 858, 441, 621, 580, 793, 741, 527, 396,
	612, 613, 614, 643, 516, 517, 518, 519, 520, 521,
	522, 40, 18, 601, 656, 18, 227, 617, 618, 620,
	241, 227, 744, 616, 227, 62, 368, 371, 372, 373,
	369, 37, 370, 374, 611, 54, 730, 897, 124, 844,
	254, 254, 254, 254, 767, 504, 729, 694, 317, 316,
	319, 320, 321, 322, 719, 254, 40, 318, 323, 40,
	705, 451, 16, 254, 40, 555, 553, 682, 683, 539,
	556, 554, 62, 557, 562, 372, 373, 732, 731, 552,
	551, 294, 352, 724, 994, 37, 62, 267, 248, 720,
	245, 246, 692, 990, 723, 700, 779, 580, 644, 989,
	358, 710, 716, 715, 292, 707, 759, 733, 239, 971,
	397, 711, 728, 356, 725, 750, 293, 62, 970, 654,
	895, 745, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 821, 657, 739,
	737, 460, 917, 625, 742, 450, 695, 696, 376, 358,
	699, 242, 243, 714, 236, 62, 963, 237, 44, 755,
	756, 713, 572, 962, 706, 441, 708, 709, 937, 746,
	938, 46, 912, 584, 503, 769, 760, 761, 762, 717,
	453, 512, 48, 441, 387, 41, 1, 394, 368, 371,
	372, 373, 369, 778, 370, 374, 62, 62, 628, 972,
	839, 589, 394, 581, 272, 53, 588, 394, 763, 770,
	947, 656, 910, 595, 752, 62, 477, 478, 470, 471,
	472, 473, 474, 475, 476, 469, 790, 598, 479, 843,
	791, 968, 749, 800, 783, 404, 405, 403, 407, 406,
	802, 803, 327, 577, 807, 402, 132, 375, 380, 813,
	391, 814, 815, 816, 817, 470, 471, 472, 473, 474,
	475, 476, 469, 62, 794, 479, 622, 55, 810, 824,
	825, 826, 772, 225, 771, 832, 833, 834, 626, 278,
	487, 712, 535, 261, 726, 227, 528, 835, 350, 268,
	961, 936, 822, 257, 257, 269, 809, 829, 511, 257,
	645, 646, 701, 652, 653, 838, 837, 303, 647, 315,
	312, 314, 313, 62, 62, 534, 62, 62, 784, 785,
	786, 540, 268, 851, 852, 394, 394, 792, 461, 301,
	295, 836, 584, 563, 584, 657, 253, 869, 360, 367,
	227, 808, 365, 259, 227, 252, 819, 933, 865, 503,
	62, 975, 697, 698, 538, 863, 870, 871, 873, 19,
	887, 255, 45, 886, 724, 247, 15, 899, 257, 62,
	257, 14, 352, 13, 257, 723, 896, 889, 394, 902,
	894, 874, 905, 906, 12, 893, 23, 11, 10, 9,
	692, 8, 7, 227, 6, 580, 898, 5, 4, 742,
	62, 62, 441, 238, 17, 62, 62, 62, 2, 0,
	62, 0, 916, 0, 256, 0, 0, 738, 909, 920,
	921, 0, 0, 0, 0, 684, 0, 394, 584, 932,
	0, 930, 931, 0, 62, 0, 925, 0, 724, 704,
	37, 0, 0, 0, 0, 0, 867, 868, 942, 723,
	944, 945, 939, 922, 923, 946, 924, 0, 954, 926,
	0, 928, 0, 0, 0, 0, 260, 268, 0, 940,
	727, 276, 0, 0, 0, 0, 0, 0, 959, 0,
	956, 62, 0, 0, 267, 965, 964, 0, 0, 0,
	0, 257, 62, 0, 0, 0, 254, 0, 257, 383,
	0, 257, 0, 0, 0, 0, 0, 979, 394, 0,
	836, 0, 0, 0, 62, 290, 62, 981, 0, 0,
	984, 257, 0, 257, 918, 988, 257, 0, 0, 257,
	0, 0, 0, 0, 0, 0, 997, 0, 801, 0,
	281, 0, 282, 0, 1002, 1003, 287, 62, 812, 768,
	394, 468, 467, 477, 478, 470, 471, 472, 473, 474,
	475, 476, 469, 0, 0, 479, 0, 0, 394, 503,
	0, 866, 0, 0, 830, 831, 467, 477, 478, 470,
	471, 472, 473, 474, 475, 476, 469, 0, 0, 479,
	958, 468, 467, 477, 478, 470, 471, 472, 473, 474,
	475, 476, 469, 0, 257, 479, 269, 257, 257, 257,
	257, 0, 0, 0, 0, 0, 797, 0, 559, 0,
	0, 0, 257, 789, 0, 383, 0, 0, 569, 0,
	257, 257, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 569, 468, 467, 477, 478, 470, 471, 472,
	473, 474, 475, 476, 469, 999, 891, 479, 0, 0,
	0, 0, 0, 362, 0, 0, 394, 394, 0, 394,
	841, 0, 0, 386, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 18, 38, 20,
	21, 257, 0, 444, 257, 446, 0, 0, 449, 0,
	0, 452, 0, 864, 0, 31, 0, 0, 0, 0,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 797, 0, 0, 394, 0, 0, 30, 0,
	0, 40, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 691, 569, 0, 0, 0, 691, 691,
	0, 0, 691, 900, 901, 0, 0, 0, 904, 904,
	904, 0, 0, 394, 0, 0, 691, 691, 691, 691,
	0, 0, 0, 0, 0, 0, 545, 0, 0, 0,
	0, 691, 0, 0, 269, 0, 0, 394, 0, 0,
	24, 25, 27, 26, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 29, 32, 33, 978, 503, 34,
	35, 36, 468, 467, 477, 478, 470, 471, 472, 473,
	474, 475, 476, 469, 0, 0, 479, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 394, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 624, 103,
	91, 0, 0, 641, 268, 0, 642, 966, 0, 967,
	0, 0, 39, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 468, 467, 477, 478, 470, 471, 472, 473,
	474, 475, 476, 469, 0, 0, 479, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 691, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 257, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 0, 0, 0, 0,
	257, 410, 0, 0, 257, 0, 0, 0, 0, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 0, 0, 422, 0, 691, 0, 0, 0,
	0, 0, 569, 691, 427, 428, 429, 430, 431, 432,
	433, 0, 434, 435, 436, 437, 438, 423, 424, 425,
	426, 408, 409, 257, 0, 411, 0, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 203, 176, 215, 154, 168,
	223, 169, 170, 197, 142, 184, 95, 166, 0, 157,
	137, 163, 138, 155, 178, 76, 181, 153, 205, 187,
	221, 84, 192, 0, 103, 91, 0, 818, 180, 207,
	182, 202, 175, 198, 147, 191, 216, 167, 195, 0,
	0, 0, 61, 0, 585, 586, 0, 0, 0, 0,
	0, 71, 0, 194, 212, 165, 196, 136, 193, 0,
	140, 143, 222, 210, 160, 161, 743, 0, 0, 0,
	0, 0, 0, 179, 183, 199, 173, 0, 0, 0,
	0, 269, 861, 0, 0, 158, 862, 190, 0, 0,
	0, 144, 141, 0, 177, 0, 0, 0, 146, 0,
	159, 200, 0, 208, 174, 224, 211, 172, 171, 214,
	217, 98, 206, 156, 164, 72, 162, 102, 96, 113,
	189, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 139,
	0, 104, 114, 123, 152, 209, 118, 119, 120, 92,
	70, 150, 151, 148, 149, 185, 186, 218, 219, 220,
	201, 145, 0, 0, 204, 188, 63, 0, 83, 121,
	99, 78, 115, 213, 203, 176, 215, 154, 168, 223,
	169, 170, 197, 142, 184, 95, 166, 0, 157, 137,
	163, 138, 155, 178, 76, 181, 153, 205, 187, 221,
	84, 192, 0, 103, 91, 0, 0, 180, 207, 182,
	202, 175, 198, 147, 191, 216, 167, 195, 0, 0,
	0, 61, 0, 585, 586, 0, 0, 0, 0, 0,
	71, 0, 194, 212, 165, 196, 136, 193, 0, 140,
	143, 222, 210, 160, 161, 0, 0, 0, 0, 0,
	0, 0, 179, 183, 199, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 0, 190, 0, 0, 0,
	144, 141, 0, 177, 0, 0, 0, 146, 0, 159,
	200, 0, 208, 174, 224, 211, 172, 171, 214, 217,
	98, 206, 156, 164, 72, 162, 102, 96, 113, 189,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 139, 0,
	104, 114, 123, 152, 209, 118, 119, 120, 92, 70,
	150, 151, 148, 149, 185, 186, 218, 219, 220, 201,
	145, 0, 0, 204, 188, 63, 0, 83, 121, 99,
	78, 115, 213, 203, 176, 215, 154, 168, 223, 169,
	170, 197, 142, 184, 95, 166, 0, 157, 137, 163,
	138, 155, 178, 76, 181, 153, 205, 187, 221, 84,
	192, 0, 103, 91, 0, 0, 180, 207, 182, 202,
	175, 198, 147, 191, 216, 167, 195, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 194, 212, 165, 196, 136, 193, 0, 140, 143,
	222, 210, 160, 161, 0, 0, 0, 0, 0, 0,
	0, 179, 183, 199, 173, 0, 0, 0, 0, 0,
	0, 955, 0, 158, 0, 190, 0, 0, 0, 144,
	141, 0, 177, 0, 0, 0, 146, 0, 159, 200,
	0, 208, 174, 224, 211, 172, 171, 214, 217, 98,
	206, 156, 164, 72, 162, 102, 96, 113, 189, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 139, 0, 104,
	114, 123, 152, 209, 118, 119, 120, 92, 70, 150,
	151, 148, 149, 185, 186, 218, 219, 220, 201, 145,
	0, 0, 204, 188, 63, 0, 83, 121, 99, 78,
	115, 213, 203, 176, 215, 154, 168, 223, 169, 170,
	197, 142, 184, 95, 166, 0, 157, 137, 163, 138,
	155, 178, 76, 181, 153, 205, 187, 221, 84, 192,
	0, 103, 91, 0, 0, 180, 207, 182, 202, 175,
	198, 147, 191, 216, 167, 195, 40, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	194, 212, 165, 196, 136, 193, 0, 140, 143, 222,
	210, 160, 161, 0, 0, 0, 0, 0, 0, 0,
	179, 183, 199, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 158, 0, 190, 0, 0, 0, 144, 141,
	0, 177, 0, 0, 0, 146, 0, 159, 200, 0,
	208, 174, 224, 211, 172, 171, 214, 217, 98, 206,
	156, 164, 72, 162, 102, 96, 113, 189, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 139, 0, 104, 114,
	123, 152, 209, 118, 119, 120, 92, 70, 150, 151,
	148, 149, 185, 186, 218, 219, 220, 201, 145, 0,
	0, 204, 188, 63, 0, 83, 121, 99, 78, 115,
	213, 203, 176, 215, 154, 168, 223, 169, 170, 197,
	142, 184, 95, 166, 0, 157, 137, 163, 138, 155,
	178, 76, 181, 153, 205, 187, 221, 84, 192, 0,
	103, 91, 0, 0, 180, 207, 182, 202, 175, 198,
	147, 191, 216, 167, 195, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 194,
	212, 165, 196, 136, 193, 0, 140, 143, 222, 210,
	160, 161, 0, 0, 0, 0, 0, 0, 0, 179,
	183, 199, 173, 0, 0, 0, 0, 0, 0, 872,
	0, 158, 0, 190, 0, 0, 0, 144, 141, 0,
	177, 0, 0, 0, 146, 0, 159, 200, 0, 208,
	174, 224, 211, 172, 171, 214, 217, 98, 206, 156,
	164, 72, 162, 102, 96, 113, 189, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 139, 0, 104, 114, 123,
	152, 209, 118, 119, 120, 92, 70, 150, 151, 148,
	149, 185, 186, 218, 219, 220, 201, 145, 0, 0,
	204, 188, 63, 0, 83, 121, 99, 78, 115, 213,
	203, 176, 215, 154, 168, 223, 169, 170, 197, 142,
	184, 95, 166, 0, 157, 137, 163, 138, 155, 178,
	76, 181, 153, 205, 187, 221, 84, 192, 0, 103,
	91, 0, 0, 180, 207, 182, 202, 175, 198, 147,
	191, 216, 167, 195, 0, 0, 0, 61, 0, 393,
	0, 0, 0, 0, 0, 0, 71, 0, 194, 212,
	165, 196, 136, 193, 0, 140, 143, 222, 210, 160,
	161, 0, 0, 0, 0, 0, 0, 0, 179, 183,
	199, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 190, 0, 0, 0, 144, 141, 0, 177,
	0, 0, 0, 146, 0, 159, 200, 0, 208, 174,
	224, 211, 172, 171, 214, 217, 98, 206, 156, 164,
	72, 162, 102, 96, 113, 189, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 139, 0, 104, 114, 123, 152,
	209, 118, 119, 120, 92, 70, 150, 151, 148, 149,
	185, 186, 218, 219, 220, 201, 145, 0, 0, 204,
	188, 63, 0, 83, 121, 99, 78, 115, 213, 203,
	176, 215, 154, 168, 223, 169, 170, 197, 142, 184,
	95, 166, 0, 157, 137, 163, 138, 155, 178, 76,
	181, 153, 205, 187, 221, 84, 192, 0, 103, 91,
	0, 0, 180, 207, 182, 202, 175, 198, 147, 191,
	216, 167, 195, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 194, 212, 165,
	196, 136, 193, 0, 140, 143, 222, 210, 160, 161,
	0, 0, 0, 0, 0, 0, 0, 179, 183, 199,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 190, 0, 0, 0, 144, 141, 0, 177, 0,
	0, 0, 146, 0, 159, 200, 0, 208, 174, 224,
	211, 172, 171, 214, 217, 98, 206, 156, 164, 72,
	162, 102, 96, 113, 189, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 139, 0, 104, 114, 123, 152, 209,
	118, 119, 120, 92, 70, 150, 151, 148, 149, 185,
	186, 218, 219, 220, 201, 145, 0, 0, 204, 188,
	63, 0, 83, 121, 99, 78, 115, 213, 203, 176,
	215, 154, 168, 223, 169, 170, 197, 142, 184, 95,
	166, 0, 157, 137, 163, 138, 155, 178, 76, 181,
	153, 205, 187, 221, 84, 192, 0, 103, 91, 0,
	0, 180, 207, 182, 202, 175, 198, 147, 191, 216,
	167, 195, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 194, 212, 165, 196,
	136, 193, 0, 140, 143, 222, 210, 160, 161, 0,
	0, 0, 0, 0, 0, 0, 179, 183, 199, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 0,
	190, 0, 0, 0, 144, 141, 0, 177, 0, 0,
	0, 146, 0, 159, 200, 0, 208, 174, 224, 211,
	172, 171, 214, 217, 98, 206, 156, 164, 72, 162,
	102, 96, 113, 189, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 139, 0, 104, 114, 123, 152, 209, 118,
	119, 120, 92, 70, 150, 151, 148, 149, 185, 186,
	218, 219, 220, 201, 145, 0, 0, 204, 188, 63,
	0, 83, 121, 99, 78, 115, 213, 203, 176, 215,
	154, 168, 223, 169, 170, 197, 142, 184, 95, 166,
	0, 157, 137, 163, 138, 155, 178, 76, 181, 153,
	205, 187, 221, 84, 192, 0, 103, 91, 0, 0,
	180, 207, 182, 202, 175, 198, 147, 191, 216, 167,
	195, 0, 0, 0, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 194, 212, 165, 196, 136,
	193, 0, 140, 143, 222, 210, 160, 161, 0, 0,
	0, 0, 0, 0, 0, 179, 183, 199, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 190,
	0, 0, 0, 144, 141, 0, 177, 0, 0, 0,
	146, 0, 159, 200, 0, 208, 174, 224, 211, 172,
	171, 214, 217, 98, 206, 156, 164, 72, 162, 102,
	96, 113, 189, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 139, 0, 104, 114, 123, 152, 209, 118, 119,
	120, 92, 70, 150, 151, 148, 149, 185, 186, 218,
	219, 220, 201, 145, 0, 0, 204, 188, 63, 0,
	83, 121, 99, 78, 115, 213, 203, 176, 215, 154,
	168, 223, 169, 170, 197, 142, 184, 95, 166, 0,
	157, 137, 163, 138, 155, 178, 76, 181, 153, 205,
	187, 221, 84, 192, 0, 103, 91, 0, 0, 180,
	207, 182, 202, 175, 198, 147, 191, 216, 167, 195,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 194, 212, 165, 196, 136, 193,
	0, 140, 143, 222, 210, 160, 161, 0, 0, 0,
	0, 0, 0, 0, 179, 183, 199, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 190, 0,
	0, 0, 144, 141, 0, 177, 0, 0, 0, 146,
	0, 159, 200, 0, 208, 174, 224, 211, 172, 171,
	214, 217, 98, 206, 156, 164, 72, 162, 102, 96,
	113, 189, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	139, 0, 104, 114, 123, 152, 209, 118, 119, 120,
	92, 70, 150, 151, 148, 149, 185, 186, 218, 219,
	220, 201, 145, 0, 0, 204, 188, 63, 0, 83,
	121, 99, 78, 115, 95, 0, 0, 686, 0, 299,
	0, 0, 0, 76, 0, 298, 0, 0, 337, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	270, 317, 316, 319, 320, 321, 322, 0, 0, 71,
	318, 323, 324, 325, 0, 0, 296, 310, 0, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	308, 689, 0, 0, 0, 348, 0, 309, 0, 0,
	305, 306, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 346, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 0, 0, 118, 119, 120, 92, 70, 338,
	347, 344, 345, 342, 343, 341, 340, 339, 349, 332,
	333, 335, 0, 334, 63, 0, 83, 121, 99, 78,
	115, 95, 0, 0, 0, 0, 299, 0, 0, 0,
	76, 0, 298, 0, 0, 337, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 270, 317, 316,
	319, 320, 321, 322, 0, 0, 71, 318, 323, 324,
	325, 0, 0, 296, 310, 0, 336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 308, 689, 0,
	0, 0, 348, 0, 309, 0, 0, 305, 306, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 346, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 0,
	0, 118, 119, 120, 92, 70, 338, 347, 344, 345,
	342, 343, 341, 340, 339, 349, 332, 333, 335, 0,
	334, 63, 0, 83, 121, 99, 78, 115, 95, 0,
	0, 0, 0, 299, 0, 0, 0, 76, 0, 298,
	0, 0, 337, 84, 0, 0, 103, 91, 0, 0,
	0, 0, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 290, 270, 317, 316, 319, 320, 321,
	322, 0, 0, 71, 318, 323, 324, 325, 0, 0,
	296, 310, 0, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 308, 0, 0, 0, 0, 348,
	0, 309, 0, 0, 305, 306, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	346, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 0, 0, 118, 119,
	120, 92, 70, 338, 347, 344, 345, 342, 343, 341,
	340, 339, 349, 332, 333, 335, 18, 334, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 95, 0, 0,
	0, 0, 299, 0, 0, 0, 76, 0, 298, 0,
	0, 337, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 270, 317, 316, 319, 320, 321, 322,
	0, 0, 71, 318, 323, 324, 325, 0, 0, 296,
	310, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 308, 0, 0, 0, 0, 348, 0,
	309, 0, 0, 305, 306, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 346,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 0, 0, 118, 119, 120,
	92, 70, 338, 347, 344, 345, 342, 343, 341, 340,
	339, 349, 332, 333, 335, 0, 334, 63, 0, 83,
	121, 99, 78, 115, 95, 0, 0, 0, 0, 299,
	0, 0, 0, 76, 0, 298, 0, 0, 337, 84,
	0, 0, 103, 91, 0, 0, 0, 0, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	270, 317, 316, 319, 320, 321, 322, 0, 0, 71,
	318, 323, 324, 325, 0, 0, 296, 310, 0, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	308, 0, 0, 0, 0, 348, 0, 309, 0, 0,
	305, 306, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 346, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 69, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 0, 0, 118, 119, 120, 92, 70, 338,
	347, 344, 345, 342, 343, 341, 340, 339, 349, 332,
	333, 335, 95, 334, 63, 0, 83, 121, 99, 78,
	115, 76, 0, 0, 0, 0, 337, 84, 0, 0,
	103, 91, 0, 0, 0, 0, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 270, 317,
	316, 319, 320, 321, 322, 0, 0, 71, 318, 323,
	324, 325, 0, 0, 0, 310, 0, 336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 308, 0,
	0, 0, 0, 348, 0, 309, 0, 0, 305, 306,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 346, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 1000, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	0, 0, 118, 119, 120, 92, 70, 338, 347, 344,
	345, 342, 343, 341, 340, 339, 349, 332, 333, 335,
	95, 334, 63, 0, 83, 121, 99, 78, 115, 76,
	0, 0, 0, 0, 337, 84, 0, 0, 103, 91,
	0, 0, 0, 0, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 270, 317, 316, 319,
	320, 321, 322, 0, 0, 71, 318, 323, 324, 325,
	0, 0, 0, 310, 0, 336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 308, 0, 0, 0,
	0, 348, 0, 309, 0, 0, 305, 306, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 346, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 0, 0,
	118, 119, 120, 92, 70, 338, 347, 344, 345, 342,
	343, 341, 340, 339, 349, 332, 333, 335, 0, 334,
	63, 0, 83, 121, 99, 78, 115, 95, 0, 0,
	0, 796, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 798, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 456, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 0, 466,
	0, 0, 0, 0, 457, 480, 481, 482, 483, 484,
	485, 486, 0, 464, 465, 462, 468, 467, 477, 478,
	470, 471, 472, 473, 474, 475, 476, 469, 0, 0,
	479, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 95, 0, 118, 119, 120,
	92, 70, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 103, 91, 0, 0, 63, 0, 83,
	121, 99, 78, 115, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 56, 0, 0, 0, 59, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 0, 0, 118, 119, 120, 92, 70,
	0, 0, 18, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 63, 0, 83, 121, 99,
	78, 115, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 0, 0, 0, 104, 114,
	123, 0, 0, 118, 119, 120, 92, 70, 0, 0,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 63, 0, 83, 121, 99, 78, 115,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 536, 0,
	0, 537, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 0, 0, 118,
	119, 120, 92, 70, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 382, 0, 0, 0, 63,
	76, 83, 121, 99, 78, 115, 84, 0, 0, 103,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 0, 384,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	72, 0, 102, 96, 113, 0, 97, 101, 85, 107,
	65, 111, 105, 89, 80, 81, 64, 0, 100, 75,
	79, 74, 94, 108, 109, 73, 122, 68, 117, 67,
	69, 116, 93, 106, 112, 90, 87, 66, 110, 88,
	86, 82, 77, 0, 0, 0, 104, 114, 123, 95,
	0, 118, 119, 120, 92, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 103, 91, 0,
	0, 63, 0, 83, 121, 99, 78, 115, 0, 0,
	0, 0, 40, 0, 0, 226, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 72, 0,
	102, 96, 113, 0, 97, 101, 85, 107, 65, 111,
	105, 89, 80, 81, 64, 0, 100, 75, 79, 74,
	94, 108, 109, 73, 122, 68, 117, 67, 69, 116,
	93, 106, 112, 90, 87, 66, 110, 88, 86, 82,
	77, 0, 0, 0, 104, 114, 123, 95, 0, 118,
	119, 120, 92, 70, 0, 0, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 103, 91, 0, 0, 63,
	0, 83, 121, 99, 78, 115, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 798, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 72, 0, 102, 96,
	113, 0, 97, 101, 85, 107, 65, 111, 105, 89,
	80, 81, 64, 0, 100, 75, 79, 74, 94, 108,
	109, 73, 122, 68, 117, 67, 69, 116, 93, 106,
	112, 90, 87, 66, 110, 88, 86, 82, 77, 0,
	0, 0, 104, 114, 123, 95, 0, 118, 119, 120,
	92, 70, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 103, 91, 0, 0, 63, 0, 83,
	121, 99, 78, 115, 0, 0, 0, 0, 0, 0,
	0, 226, 0, 384, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 72, 0, 102, 96, 113, 0,
	97, 101, 85, 107, 65, 111, 105, 89, 80, 81,
	64, 0, 100, 75, 79, 74, 94, 108, 109, 73,
	122, 68, 117, 67, 69, 116, 93, 106, 112, 90,
	87, 66, 110, 88, 86, 82, 77, 0, 0, 0,
	104, 114, 123, 95, 0, 118, 119, 120, 92, 70,
	0, 361, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 103, 91, 0, 0, 63, 0, 83, 121, 99,
	78, 115, 0, 0, 0, 0, 0, 0, 0, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 72, 0, 102, 96, 113, 0, 97, 101,
	85, 107, 65, 111, 105, 89, 80, 81, 64, 0,
	100, 75, 79, 74, 94, 108, 109, 73, 122, 68,
	117, 67, 69, 116, 93, 106, 112, 90, 87, 66,
	110, 88, 86, 82, 77, 258, 0, 0, 104, 114,
	123, 0, 95, 118, 119, 120, 92, 70, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	103, 91, 0, 63, 0, 83, 121, 99, 78, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 72, 0, 102, 96, 113, 0, 97, 101, 85,
	107, 65, 111, 105, 89, 80, 81, 64, 0, 100,
	75, 79, 74, 94, 108, 109, 73, 122, 68, 117,
	67, 69, 116, 93, 106, 112, 90, 87, 66, 110,
	88, 86, 82, 77, 0, 0, 0, 104, 114, 123,
	95, 0, 118, 119, 120, 92, 70, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 103, 91,
	0, 0, 63, 0, 83, 121, 99, 78, 115, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 72,
	0, 102, 96, 113, 0, 97, 101, 85, 107, 65,
	111, 105, 89, 80, 81, 64, 0, 100, 75, 79,
	74, 94, 108, 109, 73, 122, 68, 117, 67, 69,
	116, 93, 106, 112, 90, 87, 66, 110, 88, 86,
	82, 77, 0, 0, 0, 104, 114, 123, 95, 0,
	118, 119, 120, 92, 70, 0, 0, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 103, 91, 0, 0,
	63, 0, 83, 121, 99, 78, 115, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 72, 0, 102,
	96, 113, 0, 97, 101, 85, 107, 65, 111, 105,
	89, 80, 81, 64, 0, 100, 75, 79, 74, 94,
	108, 109, 73, 122, 68, 117, 67, 69, 116, 93,
	106, 112, 90, 87, 66, 110, 88, 86, 82, 77,
	0, 0, 0, 104, 114, 123, 95, 0, 118, 119,
	120, 92, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 103, 91, 0, 0, 63, 0,
	83, 121, 99, 78, 115, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 72, 0, 102, 96, 113,
	0, 97, 101, 85, 107, 65, 111, 105, 89, 80,
	81, 64, 0, 100, 75, 79, 74, 94, 108, 109,
	73, 122, 68, 117, 67, 69, 116, 93, 106, 112,
	90, 87, 66, 110, 88, 86, 82, 77, 0, 0,
	0, 104, 114, 123, 95, 0, 118, 119, 120, 92,
	70, 0, 0, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 103, 91, 0, 0, 63, 0, 83, 121,
	99, 78, 115, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 72, 0, 102, 96, 113, 0, 97,
	101, 85, 107, 65, 111, 105, 89, 80, 81, 64,
	0, 100, 75, 79, 74, 94, 108, 109, 73, 122,
	68, 117, 67, 264, 116, 93, 106, 112, 90, 87,
	66, 110, 88, 86, 82, 77, 0, 0, 0, 104,
	114, 123, 0, 0, 118, 119, 120, 265, 263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 83, 121, 99, 78,
	115,
}
var yyPact = [...]int{

	1141, -1000, -156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 604, 626, -1000, -1000,
	-1000, -1000, -1000, 445, 4978, 3, 47, 11, 42, 3340,
	6929, -1000, -1000, -1000, -1000, -1000, -1000, 469, -1000, -1000,
	-1000, -1000, -1000, 598, 602, 474, 592, 513, -1000, -3,
	5822, 6455, 7087, -1000, 264, 17, 6929, -120, -10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 38, 6929, -1000, 6929, -11, 257,
	-11, 6929, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 272, 546, 4277, 4277, 604, -1000,
	469, -1000, -1000, -1000, 540, -1000, -1000, 193, 6296, 355,
	609, -1000, -1000, -1000, 587, 5334, 5664, 75, 6929, 104,
	-1000, 2544, 350, -1000, 541, -1000, -1000, 116, -1000, 73,
	-1000, -1000, 335, -1000, 1368, 255, 2146, 6, 6929, 133,
	6929, 2146, 1, 6929, 583, 472, 6929, -1000, -1000, -1000,
	-1000, -1000, 632, 97, 234, -1000, 4277, 4828, 421, 421,
	-1000, -1000, 55, -1000, -1000, 4633, 4633, 4633, 4633, 4633,
	4633, 4633, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 421, 67, -1000, 4090,
	421, 421, 421, 421, 421, 421, 4277, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 421, 421,
	407, -1000, 196, 598, 272, 513, 5492, 489, -1000, -1000,
	331, 6929, -1000, 6771, 5822, 5822, 5822, 5822, -1000, 501,
	500, -1000, 487, 486, 494, 6929, -1000, 327, 272, 5334,
	59, -1000, 6138, -1000, -1000, 3141, 611, 5822, 6929, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6771, -1000, 4277, 2942,
	1748, 101, 158, -92, -1000, -1000, 423, -1000, 423, 423,
	423, 423, -69, -69, -69, -69, -1000, -1000, -1000, -1000,
	-1000, 444, -1000, 423, 423, 423, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 433, 433, 433, 429, 429, -16,
	-1000, -1000, -1000, 6929, -1000, 581, 58, -1000, 6929, -1000,
	-1000, 6929, 2146, -1000, 523, 4277, 4277, 256, 4277, 4277,
	103, 4633, 197, 124, 4633, 4633, 4633, 4633, 4633, 4633,
	4633, 4633, 4633, 4633, 4633, 4633, 4633, 4633, 4633, 250,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, -1000,
	469, 454, 454, 86, 86, 86, 86, 86, 86, 1284,
	3527, 2942, 325, 129, 4090, 3714, 3714, 4277, 4277, 3714,
	589, 139, 129, 6613, -1000, 272, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3714, 3714, 3714, 3714, 4277, -1000, -1000,
	-1000, 546, -1000, 589, 603, -1000, 532, 531, 3714, -1000,
	465, 6771, 421, -1000, 5156, -1000, 408, 609, 457, 447,
	-1000, -1000, -1000, -1000, 499, -1000, 498, -1000, -1000, -1000,
	-1000, -1000, 272, -1000, 16, 14, 8, -1000, -1000, -1000,
	-1000, 604, 4277, 392, -1000, -1000, -1000, 129, -1000, 66,
	-1000, 406, 1549, -1000, -1000, -1000, -1000, -1000, -1000, 432,
	554, 130, 240, -1000, -1000, 547, -1000, 162, -94, -1000,
	-1000, 210, -69, -69, -1000, -1000, 80, 537, 80, 80,
	80, 232, -1000, -1000, -1000, -1000, 209, -1000, -1000, -1000,
	206, -1000, 455, 6613, 2146, -1000, -1000, 89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-28, -1000, 2146, -1000, 520, 103, 140, -1000, -1000, 231,
	-1000, -1000, 129, 129, 1184, -1000, -1000, -1000, -1000, 197,
	4633, 4633, 4633, 141, 1184, 1015, 586, 947, 86, 177,
	177, 90, 90, 90, 90, 90, 623, 623, -1000, -1000,
	-1000, 272, -1000, -1000, -1000, 272, 3714, 405, -1000, -1000,
	4820, 65, 421, 4277, -1000, 304, 304, 82, 239, 304,
	3714, 173, -1000, 4277, 272, -1000, 304, 272, 304, 304,
	-1000, -1000, 6929, -1000, -1000, -1000, -1000, 386, -1000, 571,
	344, 371, -1000, -1000, 3901, 272, 323, 61, 604, 4277,
	4277, -1000, -1000, -1000, 421, 421, 421, 598, 129, -1000,
	2743, 1748, -1000, 1748, 6613, -1000, 237, -1000, -1000, 450,
	35, -1000, -1000, -1000, 318, 80, 80, -1000, 233, 112,
	-1000, -1000, -1000, 321, -1000, 401, 306, 6929, -1000, -1000,
	-1000, 6929, -1000, -1000, -1000, -1000, -1000, 6613, -1000, -1000,
	-1000, -1000, -1000, -1000, 141, 1184, 963, -1000, 4633, 4633,
	-1000, -1000, 304, 3714, -1000, -1000, 5980, -1000, -1000, 2345,
	3714, 129, -1000, -1000, 27, 250, 27, -129, 391, 122,
	-1000, 4277, 185, -1000, -1000, -1000, -1000, -1000, -1000, 611,
	5822, 553, -1000, 421, -1000, -1000, 466, 6613, 6613, 598,
	129, 129, 6613, 6613, 6613, -1000, -1000, 1549, -1000, 302,
	-1000, 423, -1000, -88, 624, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 229, 202, -1000,
	199, 2146, -1000, -1000, 577, -1000, 4633, 1184, 1184, -1000,
	-1000, -1000, -1000, 53, 272, 272, 423, 423, -1000, 423,
	429, -1000, 423, -44, 423, -53, 272, 272, 421, -126,
	-1000, 129, 4277, 616, 393, 622, -1000, 421, -1000, 469,
	28, -1000, -1000, 300, -1000, 300, 300, -1000, 6613, -1000,
	85, -1000, -108, -1000, 312, 274, -1000, 421, 1184, 1947,
	-1000, -1000, -1000, 45, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4633, 272, 228, 129, 610, 601, 6771, 371,
	272, 6613, -1000, 6613, -1000, -1000, -1000, 180, 551, -1000,
	542, -1000, -1000, -1000, -29, -1000, -1000, -1000, 49, -1000,
	-1000, -1000, 4277, 4277, 350, -1000, -1000, -1000, -1000, 223,
	-1000, -1000, 277, -1000, 6613, 272, 20, -142, 129, 341,
	-1000, -1000, -29, 528, -1000, 517, -134, -148, -1000, -32,
	-1000, 508, -1000, -34, -140, 421, -145, 4455, -150, 923,
	272, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 868, 29, 522, 864, 863, 858, 857, 854, 852,
	851, 849, 848, 847, 846, 844, 833, 831, 826, 73,
	825, 822, 819, 44, 814, 61, 811, 807, 23, 100,
	40, 22, 304, 806, 19, 49, 45, 805, 803, 802,
	64, 799, 874, 798, 796, 793, 8, 25, 790, 789,
	788, 781, 35, 117, 775, 772, 771, 770, 769, 768,
	34, 3, 14, 11, 12, 767, 135, 5, 762, 26,
	758, 756, 751, 750, 28, 748, 33, 746, 9, 39,
	744, 31, 7, 743, 43, 741, 498, 740, 113, 739,
	738, 734, 732, 727, 726, 55, 32, 385, 50, 20,
	724, 710, 702, 18, 53, 708, 707, 42, 10, 17,
	13, 706, 705, 699, 698, 697, 696, 695, 36, 692,
	691, 689, 16, 27, 687, 674, 41, 15, 673, 672,
	670, 668, 47, 666, 37, 665, 664, 663, 24, 21,
	661, 6, 660, 659, 2, 658, 646, 645, 0, 4,
	644, 642, 124,
}
var yyR1 = [...]int{

	0, 146, 147, 147, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 150, 150, 38, 38, 9, 9, 83, 83,
	83, 101, 101, 10, 10, 10, 10, 14, 135, 136,
	136, 136, 132, 112, 112, 112, 115, 115, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 114, 114, 114,
	116, 116, 116, 116, 116, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 131,
	131, 118, 118, 126, 126, 127, 127, 127, 124, 124,
	125, 125, 128, 128, 128, 119, 119, 119, 119, 119,
	119, 121, 121, 129, 129, 122, 122, 122, 123, 123,
	130, 130, 130, 130, 130, 120, 120, 133, 140, 140,
	140, 140, 134, 134, 142, 142, 141, 137, 137, 137,
	138, 138, 138, 139, 139, 139, 11, 11, 11, 11,
	11, 145, 143, 143, 144, 144, 12, 13, 13, 13,
	15, 111, 111, 111, 16, 17, 17, 18, 18, 18,
	18, 18, 18, 151, 19, 20, 20, 21, 21, 21,
	25, 25, 25, 23, 23, 24, 24, 30, 30, 29,
	29, 31, 31, 31, 31, 100, 100, 100, 99, 99,
	33, 33, 34, 34, 35, 35, 36, 36, 36, 44,
	37, 37, 37, 37, 106, 106, 105, 105, 105, 104,
	104, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 43, 43, 42, 42, 45, 45, 45, 45, 46,
	46, 47, 47, 32, 32, 32, 32, 32, 32, 32,
	87, 87, 49, 49, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 59, 59, 59, 59, 59, 59,
	50, 50, 50, 50, 50, 50, 50, 28, 28, 60,
	60, 60, 66, 61, 61, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 57, 57, 57, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 56, 56,
	56, 56, 56, 56, 56, 56, 152, 152, 58, 58,
	58, 58, 26, 26, 26, 26, 26, 109, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 70, 70, 27, 27, 68, 68, 69, 71,
	71, 67, 67, 67, 52, 52, 52, 52, 52, 52,
	52, 52, 54, 54, 54, 72, 72, 73, 73, 74,
	74, 75, 75, 76, 77, 77, 77, 78, 78, 78,
	78, 79, 79, 79, 51, 51, 51, 51, 51, 51,
	80, 80, 80, 80, 81, 81, 62, 62, 64, 64,
	63, 65, 82, 82, 84, 85, 85, 88, 88, 89,
	89, 86, 86, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 91, 91, 91, 92, 92, 93,
	93, 93, 94, 94, 97, 97, 98, 98, 102, 102,
	103, 103, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 148, 149, 107, 108, 108, 108,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 1, 1, 2, 8, 4, 6, 4, 4, 1,
	3, 3, 8, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 4, 2, 3,
	2, 2, 1, 1, 1, 3, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 4,
	5, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	3, 1, 1, 1, 3, 2, 1, 2, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -146, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 109, 110, 112, 111, 113, 123,
	47, 24, 124, 125, 128, 129, 130, -148, 7, 191,
	50, -147, 204, -74, 14, -21, 5, -19, -151, -19,
	-19, -19, -19, -135, 50, -93, 116, 67, 114, 120,
	-97, 53, -96, 197, 142, 136, 163, 155, 153, 156,
	181, 62, 126, 151, 147, 145, 26, 168, 202, 146,
	140, 141, 167, 199, 32, 134, 166, 162, 165, 139,
	161, 36, 180, 158, 148, 17, 129, 132, 122, 201,
	144, 133, 128, 35, 172, 138, 159, 135, 149, 150,
	164, 137, 160, 130, 173, 203, 157, 154, 177, 178,
	179, 200, 152, 174, -86, 116, 118, 114, 114, 115,
	116, 114, -111, 53, -95, -96, 68, 21, 23, 170,
	71, 103, 15, 72, 102, 192, 109, 45, 184, 185,
	182, 183, 175, 28, 9, 24, 124, 20, 96, 111,
	75, 76, 127, 22, 125, 66, 18, 48, 10, 12,
	13, 119, 118, 87, 115, 43, 7, 105, 25, 84,
	39, 27, 41, 85, 16, 186, 187, 30, 196, 131,
	98, 46, 33, 69, 64, 49, 67, 14, 44, 86,
	112, 191, 42, 6, 195, 29, 123, 40, 114, 176,
	74, 117, 65, 5, 120, 8, 47, 121, 188, 189,
	190, 31, 73, 11, 116, -102, 53, -96, -107, -107,
	-107, -107, -107, -107, -2, -78, 16, 15, -5, -3,
	-148, 6, 19, 20, -25, 37, 38, -20, -86, -34,
	-35, -36, -37, -44, -66, -148, -42, -102, 10, -38,
	-42, -83, -82, 181, 156, 180, -84, -67, -97, -102,
	53, -96, -136, -132, 53, 115, -42, 191, -89, 119,
	114, -42, -42, -88, 119, 53, -88, -42, -107, -149,
	52, -79, 18, 30, -32, -48, 69, -53, 28, 22,
	-52, -49, -67, -65, -66, 103, 104, 92, 93, 100,
	70, 105, -57, -55, -56, -58, 55, 54, 63, 56,
	57, 58, 59, 64, 65, 66, -97, -102, -63, -148,
	41, 42, 192, 193, 196, 194, 72, 31, 182, 190,
	189, 188, 186, 187, 184, 185, 119, 183, 98, 191,
	-75, -76, -32, -74, -2, -19, 33, -23, 20, 61,
	-43, 25, -42, 29, 51, -39, -40, -41, 39, 43,
	45, 40, 41, 42, 46, -106, 21, -34, -2, -148,
	-105, -104, 21, -102, 55, 106, -42, -150, 51, 10,
	121, -101, -98, 55, -97, -95, 51, 29, 77, 106,
	52, 51, -112, -115, -117, -116, -113, -114, 153, 154,
	103, 157, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 126, 149, 150, 151, 152, 136, 137, 138,
	139, 140, 141, 142, 144, 145, 146, 147, 148, 53,
	-108, -148, -98, 116, -42, 69, -42, -108, 117, -42,
	22, 49, -42, 8, 87, 68, 67, 84, 51, 17,
	-32, -50, 87, 69, 85, 86, 71, 89, 88, 99,
	92, 93, 94, 95, 96, 97, 98, 90, 91, 102,
	77, 78, 79, 80, 81, 82, 83, -87, -148, -66,
	-148, 107, 108, -53, -53, -53, -53, -53, -53, -53,
	-148, 106, -61, -32, -148, -148, -148, -148, -148, -148,
	-148, -70, -32, -148, -152, -148, -152, -152, -152, -152,
	-152, -152, -152, -148, -148, -148, -148, 51, -77, 23,
	24, -78, -149, -25, -54, -97, 56, 59, -24, 40,
	-51, 29, 31, -2, -148, -42, -82, -35, -36, -35,
	-36, 39, 39, 39, 44, 39, 44, 39, -40, -102,
	-149, -149, -2, -45, 47, 118, 48, -104, -103, -102,
	-95, -47, 11, -34, -42, -107, -84, -32, -98, -103,
	-95, -137, -138, -139, -98, 55, 56, -132, -133, -140,
	122, 120, -134, 115, 27, -128, 64, 69, -124, 173,
	-118, 50, -118, -118, -118, -118, -122, 156, -122, -122,
	-122, 50, -118, -118, -118, -126, 50, -126, -126, -127,
	50, -127, -94, 121, -42, 22, -90, 112, -145, 110,
	170, 156, 62, 28, 111, 14, 192, 132, 203, 53,
	133, -42, -42, -108, 35, -32, -32, -59, 64, 69,
	65, 66, -32, -32, -53, -60, -63, -66, 60, 87,
	85, 86, 71, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -53, -53, -53, -109, 53,
	55, 53, -52, -52, -97, -30, 20, -29, -31, 94,
	-32, -102, -98, 51, -149, -29, -29, -32, -32, -29,
	-23, -68, -69, 73, -97, -149, -29, -30, -29, -29,
	-76, -79, -85, 18, 10, 31, 31, -29, -81, 49,
	-82, -62, -64, -63, -148, -2, -80, -97, -47, 49,
	49, 39, 39, -149, 115, 115, 115, -74, -32, -47,
	106, 51, -139, 77, 50, 27, -134, 53, 53, -119,
	28, 64, -125, 174, 56, -122, -122, -123, 102, 29,
	-123, -123, -123, -131, 55, 56, 56, 49, -97, -108,
	-107, -91, -92, 117, 21, 115, 27, 132, -108, 36,
	64, 65, 66, -60, -53, -53, -53, -28, 127, 68,
	-149, -149, -29, 51, -100, -99, 21, -97, 55, 106,
	-148, -32, -149, -149, 51, 121, 21, -149, -29, -71,
	-69, 75, -32, -149, -149, -149, -149, -149, -42, -33,
	10, 26, -81, 51, -149, -149, -149, 51, 106, -74,
	-32, -32, -148, -148, -148, -78, -98, -138, -139, -142,
	-141, -97, 53, -121, 49, 55, 56, 57, 64, 182,
	52, -123, -123, 53, 53, 103, 52, 51, 51, 52,
	51, -42, -42, -107, -97, -28, 68, -53, -53, -149,
	-31, -99, 94, -103, -30, -110, 103, 153, 126, 151,
	147, 167, 158, 172, 149, 173, -109, -110, 197, -74,
	76, -32, 74, -47, -34, 27, -64, 31, -2, -148,
	-97, -97, -78, -46, -97, -46, -46, 52, 51, -118,
	-129, 170, 8, 55, 56, 56, -108, 25, -53, 106,
	-149, -149, -118, -118, -118, -127, -118, 141, -118, 141,
	-149, -149, -148, -27, 195, -32, -72, 12, 8, -62,
	-2, 106, -149, 51, -149, -149, -141, -130, 122, 27,
	120, 182, 52, 52, -148, 94, -122, 53, -53, -149,
	55, -73, 13, 15, -82, -149, -97, -97, -120, 62,
	27, 27, -143, -144, 132, -26, 87, 200, -32, -61,
	55, -149, 51, -97, -149, 198, 46, 201, -144, 31,
	36, 199, 202, 134, 36, 135, 200, -148, 201, -53,
	131, 202, -149, -149,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 389, 0, 173, 173,
	173, 173, 173, 0, 449, 431, 0, 0, 0, 0,
	166, 614, 614, 614, 614, 614, 614, 0, 27, 28,
	612, 1, 3, 397, 0, 0, 177, 180, 175, 431,
	0, 0, 0, 43, 0, 0, 605, 0, 429, 450,
	451, 454, 455, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	597, 598, 599, 600, 601, 602, 603, 604, 606, 607,
	608, 609, 610, 611, 0, 0, 432, 0, 427, 0,
	427, 0, 614, 161, 162, 163, 462, 463, 464, 465,
	466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	546, 547, 548, 549, 605, 165, 458, 459, 167, 168,
	169, 170, 171, 172, 21, 401, 0, 0, 389, 23,
	0, 173, 178, 179, 183, 181, 182, 174, 0, 0,
	202, 204, 205, 206, 214, 0, 216, 233, 0, 0,
	34, 0, 37, -2, 556, -2, 422, 0, 371, 0,
	-2, -2, 0, 49, 0, 0, 615, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 0, 160, 164, 22,
	613, 17, 0, 0, 398, 243, 0, 248, 250, 0,
	285, 286, 287, 288, 289, 0, 0, 0, 0, 0,
	0, 0, 312, 313, 314, 315, 374, 375, 376, 377,
	378, 379, 380, 381, 252, 253, 371, 0, 421, 0,
	0, 0, 0, 0, 0, 0, 362, 0, 336, 336,
	336, 336, 336, 336, 336, 336, 0, 0, 0, 0,
	390, 391, 394, 397, 21, 180, 0, 185, 184, 176,
	0, 0, 232, 0, 0, 0, 0, 0, 221, 0,
	0, 224, 0, 0, 0, 0, 215, 0, 21, 0,
	235, 217, 0, 219, 220, 0, 241, 0, 0, 32,
	33, 614, 41, 42, 456, 457, 0, 39, 0, 0,
	137, 0, 102, 98, 54, 55, 91, 57, 91, 91,
	91, 91, 115, 115, 115, 115, 83, 84, 85, 86,
	87, 0, 70, 91, 91, 91, 74, 58, 59, 60,
	61, 62, 63, 64, 93, 93, 93, 95, 95, 452,
	45, 616, 617, 0, 47, 0, 0, 149, 0, 157,
	428, 0, 615, 402, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 271, 272, 273, 274, 275, 276, 249, 0, 263,
	0, 0, 0, 305, 306, 307, 308, 309, 310, 0,
	187, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	183, 0, 363, 0, 328, 0, 329, 330, 331, 332,
	333, 334, 335, 0, 187, 0, 0, 0, 393, 395,
	396, 401, 24, 183, 0, 382, 0, 0, 0, 186,
	414, 0, 0, -2, 0, 231, 241, 203, 210, 0,
	213, 222, 223, 225, 0, 227, 0, 229, 230, 207,
	208, 282, 21, 209, 0, 0, 0, 218, 234, 460,
	461, 389, 0, 241, 35, 36, 423, 424, 372, 0,
	-2, 48, 138, 140, 143, 144, 145, 50, 51, 0,
	0, 0, 0, 132, 133, 105, 103, 0, 100, 99,
	56, 0, 115, 115, 77, 78, 118, 0, 118, 118,
	118, 0, 71, 72, 73, 65, 0, 66, 67, 68,
	0, 69, 0, 0, 615, 430, 614, 444, 150, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	0, 156, 615, 159, 0, 244, 245, 247, 264, 0,
	266, 268, 399, 400, 254, 255, 279, 280, 281, 0,
	0, 0, 0, 277, 259, 0, 290, 291, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 301, 304, 347,
	348, 0, 302, 303, 311, 0, 0, 188, 189, 191,
	195, 0, 372, 0, 420, 0, 0, 0, 0, 0,
	0, 369, 366, 0, 0, 337, 0, 0, 0, 0,
	392, 18, 0, 425, 426, 383, 384, 200, 25, 0,
	414, 404, 416, 418, 0, 21, 0, 410, 389, 0,
	0, 226, 228, -2, 0, 0, 0, 397, 242, 31,
	0, 0, 141, 0, 0, 128, 0, 130, 131, 111,
	0, 104, 53, 101, 0, 118, 118, 79, 0, 0,
	80, 81, 82, 0, 89, 0, 0, 0, 453, 46,
	146, 0, 614, 445, 446, 447, 448, 0, 158, 403,
	265, 267, 269, 256, 277, 260, 0, 257, 0, 0,
	251, 316, 0, 0, 192, 196, 0, 198, 199, 0,
	187, 284, 319, 320, 0, 0, 0, 0, 389, 0,
	367, 0, 0, 327, 338, 339, 340, 341, 19, 241,
	0, 0, 26, 0, 419, -2, 0, 0, 0, 397,
	211, 212, 0, 0, 0, 30, 373, 139, 142, 0,
	134, 91, 129, 113, 0, 106, 107, 108, 109, 110,
	92, 75, 76, 119, 116, 117, 88, 0, 0, 96,
	0, 615, 147, 148, 0, 258, 0, 278, 261, 317,
	190, 197, 193, 0, 0, 0, 91, 91, 352, 91,
	95, 355, 91, 357, 91, 360, 0, 0, 0, 364,
	326, 370, 0, 385, 201, 0, 417, 0, -2, 0,
	412, 411, 29, 0, 239, 0, 0, 127, 0, 136,
	120, 114, 0, 90, 0, 0, 44, 0, 262, 0,
	318, 321, 349, 115, 353, 354, 356, 358, 359, 361,
	323, 322, 0, 0, 0, 368, 387, 0, 0, 407,
	21, 0, 236, 0, 237, 238, 135, 125, 0, 122,
	124, 112, 94, 97, 0, 194, 350, 351, 342, 325,
	365, 20, 0, 0, 415, -2, 413, 240, 52, 0,
	121, 123, 0, 152, 0, 0, 0, 0, 388, 386,
	126, 151, 0, 0, 324, 0, 0, 0, 153, 0,
	343, 0, 346, 0, 344, 0, 0, 0, 0, 0,
	0, 345, 154, 155,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 3, 97, 89, 3,
	50, 52, 94, 92, 51, 93, 106, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 204,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 88, 3, 100,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 71, 72, 73, 74, 75,
	76, 80, 81, 82, 83, 84, 85, 86, 87, 90,
	91, 96, 98, 101, 102, 103, 104, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:273
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:278
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:279
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:283
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:301
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:309
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:313
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:320
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:326
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:336
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:340
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:347
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:358
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:370
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:374
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:395
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:400
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:404
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:410
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:414
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:425
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:429
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:435
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:440
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:445
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:449
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:462
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:469
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:474
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:478
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:484
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:495
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:505
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:510
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:668
		{
			yyVAL.optVal = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:672
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:677
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:681
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:689
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:693
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:699
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:711
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:716
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:720
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:726
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:739
		{
			yyVAL.optVal = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:743
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:747
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:755
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:764
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:768
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:773
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:777
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:782
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:790
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:795
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:799
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:804
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.colKeyOpt = colKey
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:816
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.optVal = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:829
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:835
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:845
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:863
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:873
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:884
		{
			yyVAL.str = ""
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:892
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:900
		{
			yyVAL.str = yyDollar[1].str
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:904
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:908
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:914
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:918
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:922
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:928
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:932
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:937
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:942
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:946
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:952
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:962
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 154:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:968
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:972
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:978
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:984
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:992
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:997
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1026
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.statement = &OtherRead{}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &OtherRead{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &OtherRead{}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1078
		{
			setAllowComments(yylex, true)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.bytes2 = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = UnionStr
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.str = UnionAllStr
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = UnionDistinctStr
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = SQLCacheStr
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.str = DistinctStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = StraightJoinHint
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.selectExprs = nil
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.empty = struct{}{}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.empty = struct{}{}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.str = JoinStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.str = JoinStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.str = JoinStr
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.str = StraightJoinStr
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.str = LeftJoinStr
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = LeftJoinStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = RightJoinStr
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = RightJoinStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = NaturalJoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1333
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.indexHints = nil
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.expr = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.str = IsNullStr
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.str = IsNotNullStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = IsTrueStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = IsNotTrueStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = IsFalseStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = IsNotFalseStr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = EqualStr
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = LessThanStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.str = GreaterThanStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = LessEqualStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = GreaterEqualStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = NotEqualStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.expr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1682
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.str = BooleanModeStr
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.str = QueryExpansionStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = string("")
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &NullVal{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.exprs = nil
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.orderBy = nil
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.str = AscScr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = AscScr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.str = DescScr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.limit = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.str = ForUpdateStr
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.str = ShareModeStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2145
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2158
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.updateExprs = nil
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.byt = 0
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.byt = 1
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.str = IgnoreStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2525
		{
			decNesting(yylex)
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2530
		{
			forceEOF(yylex)
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2535
		{
			forceEOF(yylex)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			forceEOF(yylex)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

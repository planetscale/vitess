//line ./go/vt/sqlparser/sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line ./go/vt/sqlparser/sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line ./go/vt/sqlparser/sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const COMMENT_KEYWORD = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const LE = 57414
const GE = 57415
const NE = 57416
const NULL_SAFE_EQUAL = 57417
const IS = 57418
const LIKE = 57419
const REGEXP = 57420
const IN = 57421
const SHIFT_LEFT = 57422
const SHIFT_RIGHT = 57423
const DIV = 57424
const MOD = 57425
const UNARY = 57426
const COLLATE = 57427
const BINARY = 57428
const INTERVAL = 57429
const JSON_EXTRACT_OP = 57430
const JSON_UNQUOTE_EXTRACT_OP = 57431
const CREATE = 57432
const ALTER = 57433
const DROP = 57434
const RENAME = 57435
const ANALYZE = 57436
const TABLE = 57437
const INDEX = 57438
const VIEW = 57439
const TO = 57440
const IGNORE = 57441
const IF = 57442
const UNIQUE = 57443
const USING = 57444
const PRIMARY = 57445
const SHOW = 57446
const DESCRIBE = 57447
const EXPLAIN = 57448
const DATE = 57449
const ESCAPE = 57450
const REPAIR = 57451
const OPTIMIZE = 57452
const TRUNCATE = 57453
const BIT = 57454
const TINYINT = 57455
const SMALLINT = 57456
const MEDIUMINT = 57457
const INT = 57458
const INTEGER = 57459
const BIGINT = 57460
const INTNUM = 57461
const REAL = 57462
const DOUBLE = 57463
const FLOAT_TYPE = 57464
const DECIMAL = 57465
const NUMERIC = 57466
const TIME = 57467
const TIMESTAMP = 57468
const DATETIME = 57469
const YEAR = 57470
const CHAR = 57471
const VARCHAR = 57472
const BOOL = 57473
const CHARACTER = 57474
const VARBINARY = 57475
const NCHAR = 57476
const TEXT = 57477
const TINYTEXT = 57478
const MEDIUMTEXT = 57479
const LONGTEXT = 57480
const BLOB = 57481
const TINYBLOB = 57482
const MEDIUMBLOB = 57483
const LONGBLOB = 57484
const JSON = 57485
const ENUM = 57486
const NULLX = 57487
const AUTO_INCREMENT = 57488
const APPROXNUM = 57489
const SIGNED = 57490
const UNSIGNED = 57491
const ZEROFILL = 57492
const DATABASES = 57493
const TABLES = 57494
const VITESS_KEYSPACES = 57495
const VITESS_SHARDS = 57496
const VSCHEMA_TABLES = 57497
const NAMES = 57498
const CHARSET = 57499
const CURRENT_TIMESTAMP = 57500
const DATABASE = 57501
const CURRENT_DATE = 57502
const CURRENT_TIME = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const UTC_DATE = 57506
const UTC_TIME = 57507
const UTC_TIMESTAMP = 57508
const REPLACE = 57509
const CONVERT = 57510
const CAST = 57511
const GROUP_CONCAT = 57512
const SEPARATOR = 57513
const MATCH = 57514
const AGAINST = 57515
const BOOLEAN = 57516
const LANGUAGE = 57517
const WITH = 57518
const QUERY = 57519
const EXPANSION = 57520
const UNUSED = 57521

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 21,
	-2, 4,
	-1, 258,
	76, 541,
	104, 541,
	-2, 38,
	-1, 260,
	76, 562,
	104, 562,
	-2, 40,
	-1, 265,
	104, 443,
	-2, 439,
	-1, 266,
	104, 444,
	-2, 440,
	-1, 533,
	5, 21,
	-2, 391,
	-1, 570,
	104, 446,
	-2, 442,
	-1, 720,
	5, 22,
	-2, 270,
	-1, 810,
	5, 22,
	-2, 392,
	-1, 881,
	5, 21,
	-2, 394,
	-1, 946,
	5, 22,
	-2, 395,
}

const yyPrivate = 57344

const yyLast = 6824

var yyAct = [...]int{

	266, 492, 596, 825, 708, 886, 292, 257, 709, 297,
	561, 609, 858, 431, 573, 230, 665, 569, 780, 675,
	370, 572, 672, 284, 321, 62, 772, 43, 642, 299,
	131, 222, 371, 3, 689, 582, 705, 295, 268, 350,
	744, 286, 261, 374, 344, 359, 433, 42, 965, 223,
	239, 222, 222, 246, 47, 961, 964, 222, 605, 958,
	245, 677, 262, 963, 960, 957, 871, 917, 272, 740,
	229, 244, 589, 829, 49, 50, 51, 52, 938, 597,
	249, 912, 224, 225, 226, 227, 228, 624, 951, 459,
	458, 468, 469, 461, 462, 463, 464, 465, 466, 467,
	460, 622, 386, 470, 910, 278, 613, 859, 584, 895,
	279, 382, 274, 761, 122, 554, 556, 584, 121, 763,
	122, 789, 222, 439, 222, 434, 627, 723, 222, 861,
	722, 721, 130, 270, 269, 621, 447, 446, 124, 125,
	126, 275, 127, 734, 123, 863, 924, 867, 902, 862,
	813, 860, 381, 448, 482, 483, 865, 784, 727, 491,
	390, 504, 378, 838, 460, 864, 745, 470, 590, 445,
	866, 868, 470, 320, 597, 389, 649, 448, 283, 447,
	446, 618, 623, 617, 555, 436, 875, 873, 690, 790,
	647, 648, 646, 446, 583, 952, 448, 447, 446, 581,
	896, 580, 894, 583, 220, 762, 690, 760, 796, 448,
	956, 738, 839, 931, 448, 18, 38, 20, 21, 791,
	383, 40, 620, 352, 252, 252, 264, 519, 520, 586,
	252, 645, 281, 31, 587, 899, 619, 898, 22, 450,
	765, 766, 767, 753, 222, 463, 464, 465, 466, 467,
	460, 222, 222, 470, 222, 752, 30, 62, 625, 40,
	666, 346, 667, 949, 447, 446, 741, 941, 347, 626,
	447, 446, 62, 449, 222, 897, 222, 62, 751, 222,
	249, 448, 222, 837, 830, 831, 832, 448, 447, 446,
	438, 348, 833, 289, 345, 252, 827, 252, 926, 285,
	285, 252, 735, 384, 935, 448, 668, 484, 485, 486,
	487, 488, 489, 891, 890, 934, 24, 25, 27, 26,
	28, 635, 637, 638, 480, 430, 636, 778, 285, 834,
	29, 32, 33, 844, 843, 34, 35, 36, 459, 458,
	468, 469, 461, 462, 463, 464, 465, 466, 467, 460,
	62, 280, 470, 451, 269, 222, 841, 840, 222, 222,
	222, 222, 521, 44, 536, 805, 262, 812, 285, 222,
	706, 522, 387, 222, 680, 285, 222, 357, 285, 222,
	680, 222, 222, 387, 493, 808, 533, 249, 249, 249,
	249, 502, 62, 39, 550, 551, 558, 262, 18, 523,
	778, 563, 249, 357, 674, 552, 778, 598, 599, 600,
	249, 842, 538, 548, 540, 392, 391, 252, 537, 557,
	539, 531, 778, 532, 252, 376, 728, 252, 356, 517,
	566, 577, 40, 18, 565, 222, 18, 568, 574, 562,
	222, 611, 40, 222, 62, 236, 591, 252, 562, 252,
	357, 567, 252, 610, 731, 252, 606, 630, 880, 641,
	601, 54, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 40, 643, 357,
	40, 560, 754, 644, 716, 607, 608, 706, 387, 40,
	62, 442, 319, 570, 506, 507, 508, 509, 510, 511,
	512, 120, 16, 529, 62, 545, 719, 718, 632, 633,
	546, 639, 640, 543, 542, 541, 681, 60, 544, 631,
	669, 670, 547, 962, 365, 366, 959, 552, 252, 692,
	264, 252, 252, 252, 252, 62, 764, 694, 679, 707,
	687, 262, 549, 240, 241, 263, 252, 715, 234, 376,
	703, 243, 559, 351, 252, 252, 493, 710, 702, 684,
	685, 264, 697, 698, 559, 287, 349, 712, 592, 593,
	594, 595, 746, 62, 726, 388, 720, 288, 737, 345,
	933, 932, 878, 602, 603, 604, 732, 729, 806, 724,
	615, 441, 369, 351, 570, 742, 743, 458, 468, 469,
	461, 462, 463, 464, 465, 466, 467, 460, 252, 231,
	470, 237, 238, 252, 62, 62, 252, 733, 701, 574,
	944, 232, 920, 44, 725, 943, 700, 562, 756, 311,
	310, 312, 313, 314, 315, 921, 444, 46, 316, 747,
	748, 749, 461, 462, 463, 464, 465, 466, 467, 460,
	48, 380, 470, 41, 769, 770, 771, 1, 824, 579,
	571, 267, 53, 578, 678, 559, 757, 750, 893, 678,
	678, 643, 828, 678, 585, 768, 644, 739, 62, 361,
	364, 365, 366, 362, 588, 363, 367, 678, 678, 678,
	678, 930, 775, 736, 395, 396, 776, 394, 398, 397,
	222, 393, 678, 128, 368, 264, 787, 788, 373, 779,
	792, 612, 55, 759, 758, 798, 616, 799, 800, 801,
	802, 273, 478, 795, 699, 256, 713, 518, 62, 62,
	343, 62, 62, 942, 919, 809, 810, 811, 794, 501,
	820, 688, 786, 814, 807, 823, 298, 634, 309, 385,
	822, 306, 797, 308, 307, 222, 524, 530, 452, 222,
	296, 290, 553, 248, 385, 353, 360, 358, 254, 385,
	247, 804, 916, 493, 821, 574, 950, 574, 815, 816,
	850, 851, 62, 835, 836, 528, 19, 45, 242, 15,
	322, 37, 14, 13, 12, 23, 848, 11, 853, 10,
	854, 852, 856, 9, 870, 8, 222, 869, 857, 847,
	7, 6, 5, 62, 62, 876, 4, 879, 62, 62,
	62, 872, 233, 62, 888, 889, 877, 17, 37, 2,
	885, 679, 0, 710, 0, 249, 235, 729, 0, 0,
	0, 250, 525, 0, 881, 0, 62, 678, 0, 263,
	0, 0, 0, 0, 0, 0, 901, 0, 874, 900,
	0, 678, 0, 0, 361, 364, 365, 366, 362, 574,
	363, 367, 0, 252, 717, 908, 0, 0, 0, 0,
	263, 903, 904, 385, 385, 922, 0, 570, 0, 0,
	0, 0, 62, 913, 914, 929, 0, 0, 0, 0,
	682, 683, 0, 62, 686, 710, 0, 0, 0, 937,
	925, 251, 927, 928, 0, 923, 0, 0, 693, 0,
	695, 696, 939, 0, 0, 62, 0, 62, 252, 945,
	0, 262, 252, 704, 0, 0, 385, 918, 0, 0,
	940, 0, 0, 0, 0, 0, 954, 946, 0, 821,
	0, 0, 678, 0, 0, 0, 0, 0, 559, 678,
	0, 0, 0, 255, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 252,
	0, 0, 671, 0, 385, 468, 469, 461, 462, 463,
	464, 465, 466, 467, 460, 892, 691, 470, 0, 0,
	0, 0, 0, 0, 0, 953, 493, 459, 458, 468,
	469, 461, 462, 463, 464, 465, 466, 467, 460, 0,
	0, 470, 0, 0, 263, 0, 37, 714, 905, 906,
	849, 907, 0, 276, 909, 277, 911, 0, 0, 282,
	0, 372, 0, 0, 0, 773, 0, 0, 0, 0,
	459, 458, 468, 469, 461, 462, 463, 464, 465, 466,
	467, 460, 432, 0, 470, 385, 0, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 777, 0,
	0, 0, 0, 0, 479, 481, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 385, 0, 0,
	490, 0, 0, 494, 495, 496, 497, 498, 499, 500,
	0, 503, 505, 505, 505, 505, 505, 505, 505, 505,
	513, 514, 515, 516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 534, 0, 0, 0, 250, 250,
	250, 250, 774, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 379, 0, 0, 0, 0,
	782, 250, 459, 458, 468, 469, 461, 462, 463, 464,
	465, 466, 467, 460, 0, 435, 470, 437, 0, 0,
	440, 0, 0, 443, 0, 0, 0, 0, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 385, 413, 385, 826, 0, 0, 418, 419, 420,
	421, 422, 423, 424, 432, 425, 426, 427, 428, 429,
	414, 415, 416, 417, 399, 400, 0, 0, 402, 0,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	0, 0, 0, 0, 0, 0, 535, 0, 0, 0,
	0, 0, 37, 0, 782, 0, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 884, 0, 0, 0,
	887, 887, 887, 0, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 0,
	0, 0, 0, 0, 0, 0, 614, 454, 0, 457,
	0, 628, 0, 0, 629, 471, 472, 473, 474, 475,
	476, 477, 0, 455, 456, 453, 459, 458, 468, 469,
	461, 462, 463, 464, 465, 466, 467, 460, 0, 0,
	470, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 0, 0, 0, 0,
	0, 0, 94, 0, 263, 0, 0, 947, 0, 948,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	100, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 459, 458, 468, 469, 461, 462, 463, 464,
	465, 466, 467, 460, 0, 0, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 817, 818, 819, 96, 0, 0, 0, 72,
	0, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 0, 0,
	101, 110, 119, 0, 0, 114, 115, 116, 91, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 83, 117, 97,
	78, 111, 0, 0, 0, 0, 250, 0, 0, 711,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 0, 0, 845, 0, 0, 0,
	846, 711, 0, 37, 208, 198, 172, 210, 150, 164,
	218, 165, 166, 192, 138, 180, 94, 162, 0, 153,
	133, 159, 134, 151, 174, 76, 177, 149, 200, 183,
	216, 84, 187, 0, 100, 90, 0, 0, 176, 202,
	178, 197, 171, 193, 143, 186, 211, 163, 190, 0,
	0, 0, 61, 0, 575, 576, 0, 0, 0, 0,
	0, 71, 189, 207, 161, 191, 132, 188, 0, 136,
	139, 217, 205, 156, 157, 730, 0, 0, 0, 0,
	0, 0, 175, 179, 194, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 185, 0, 0, 0,
	140, 137, 173, 0, 0, 0, 142, 0, 155, 195,
	0, 203, 170, 219, 206, 168, 167, 209, 212, 96,
	201, 152, 160, 72, 158, 99, 95, 109, 65, 107,
	102, 88, 80, 81, 64, 0, 98, 75, 79, 74,
	93, 104, 105, 73, 118, 68, 113, 67, 69, 112,
	92, 103, 108, 89, 86, 66, 106, 87, 85, 82,
	77, 0, 135, 0, 101, 110, 119, 148, 204, 114,
	115, 116, 91, 70, 146, 147, 144, 145, 181, 182,
	213, 214, 215, 196, 141, 0, 0, 199, 184, 63,
	0, 83, 117, 97, 78, 111, 208, 198, 172, 210,
	150, 164, 218, 165, 166, 192, 138, 180, 94, 162,
	0, 153, 133, 159, 134, 151, 174, 76, 177, 149,
	200, 183, 216, 84, 187, 0, 100, 90, 0, 0,
	176, 202, 178, 197, 171, 193, 143, 186, 211, 163,
	190, 0, 0, 0, 61, 0, 575, 576, 0, 0,
	0, 0, 0, 71, 189, 207, 161, 191, 132, 188,
	0, 136, 139, 217, 205, 156, 157, 0, 0, 0,
	0, 0, 0, 0, 175, 179, 194, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 185, 0,
	0, 0, 140, 137, 173, 0, 0, 0, 142, 0,
	155, 195, 0, 203, 170, 219, 206, 168, 167, 209,
	212, 96, 201, 152, 160, 72, 158, 99, 95, 109,
	65, 107, 102, 88, 80, 81, 64, 0, 98, 75,
	79, 74, 93, 104, 105, 73, 118, 68, 113, 67,
	69, 112, 92, 103, 108, 89, 86, 66, 106, 87,
	85, 82, 77, 0, 135, 0, 101, 110, 119, 148,
	204, 114, 115, 116, 91, 70, 146, 147, 144, 145,
	181, 182, 213, 214, 215, 196, 141, 0, 0, 199,
	184, 63, 0, 83, 117, 97, 78, 111, 208, 198,
	172, 210, 150, 164, 218, 165, 166, 192, 138, 180,
	94, 162, 0, 153, 133, 159, 134, 151, 174, 76,
	177, 149, 200, 183, 216, 84, 187, 0, 100, 90,
	0, 0, 176, 202, 178, 197, 171, 193, 143, 186,
	211, 163, 190, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 189, 207, 161, 191,
	132, 188, 0, 136, 139, 217, 205, 156, 157, 0,
	0, 0, 0, 0, 0, 0, 175, 179, 194, 169,
	0, 0, 0, 0, 0, 0, 936, 0, 154, 0,
	185, 0, 0, 0, 140, 137, 173, 0, 0, 0,
	142, 0, 155, 195, 0, 203, 170, 219, 206, 168,
	167, 209, 212, 96, 201, 152, 160, 72, 158, 99,
	95, 109, 65, 107, 102, 88, 80, 81, 64, 0,
	98, 75, 79, 74, 93, 104, 105, 73, 118, 68,
	113, 67, 69, 112, 92, 103, 108, 89, 86, 66,
	106, 87, 85, 82, 77, 0, 135, 0, 101, 110,
	119, 148, 204, 114, 115, 116, 91, 70, 146, 147,
	144, 145, 181, 182, 213, 214, 215, 196, 141, 0,
	0, 199, 184, 63, 0, 83, 117, 97, 78, 111,
	208, 198, 172, 210, 150, 164, 218, 165, 166, 192,
	138, 180, 94, 162, 0, 153, 133, 159, 134, 151,
	174, 76, 177, 149, 200, 183, 216, 84, 187, 0,
	100, 90, 0, 0, 176, 202, 178, 197, 171, 193,
	143, 186, 211, 163, 190, 40, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 189, 207,
	161, 191, 132, 188, 0, 136, 139, 217, 205, 156,
	157, 0, 0, 0, 0, 0, 0, 0, 175, 179,
	194, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 185, 0, 0, 0, 140, 137, 173, 0,
	0, 0, 142, 0, 155, 195, 0, 203, 170, 219,
	206, 168, 167, 209, 212, 96, 201, 152, 160, 72,
	158, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 135, 0,
	101, 110, 119, 148, 204, 114, 115, 116, 91, 70,
	146, 147, 144, 145, 181, 182, 213, 214, 215, 196,
	141, 0, 0, 199, 184, 63, 0, 83, 117, 97,
	78, 111, 208, 198, 172, 210, 150, 164, 218, 165,
	166, 192, 138, 180, 94, 162, 0, 153, 133, 159,
	134, 151, 174, 76, 177, 149, 200, 183, 216, 84,
	187, 0, 100, 90, 0, 0, 176, 202, 178, 197,
	171, 193, 143, 186, 211, 163, 190, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	189, 207, 161, 191, 132, 188, 0, 136, 139, 217,
	205, 156, 157, 0, 0, 0, 0, 0, 0, 0,
	175, 179, 194, 169, 0, 0, 0, 0, 0, 0,
	855, 0, 154, 0, 185, 0, 0, 0, 140, 137,
	173, 0, 0, 0, 142, 0, 155, 195, 0, 203,
	170, 219, 206, 168, 167, 209, 212, 96, 201, 152,
	160, 72, 158, 99, 95, 109, 65, 107, 102, 88,
	80, 81, 64, 0, 98, 75, 79, 74, 93, 104,
	105, 73, 118, 68, 113, 67, 69, 112, 92, 103,
	108, 89, 86, 66, 106, 87, 85, 82, 77, 0,
	135, 0, 101, 110, 119, 148, 204, 114, 115, 116,
	91, 70, 146, 147, 144, 145, 181, 182, 213, 214,
	215, 196, 141, 0, 0, 199, 184, 63, 0, 83,
	117, 97, 78, 111, 208, 198, 172, 210, 150, 164,
	218, 165, 166, 192, 138, 180, 94, 162, 0, 153,
	133, 159, 134, 151, 174, 76, 177, 149, 200, 183,
	216, 84, 187, 0, 100, 90, 0, 0, 176, 202,
	178, 197, 171, 193, 143, 186, 211, 163, 190, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 189, 207, 161, 191, 132, 188, 0, 136,
	139, 217, 205, 156, 157, 0, 0, 0, 0, 0,
	0, 0, 175, 179, 194, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 185, 0, 0, 0,
	140, 137, 173, 0, 0, 0, 142, 0, 155, 195,
	0, 203, 170, 219, 206, 168, 167, 209, 212, 96,
	201, 152, 160, 72, 158, 99, 95, 109, 65, 107,
	102, 88, 80, 81, 64, 0, 98, 75, 79, 74,
	93, 104, 105, 73, 118, 68, 113, 67, 69, 112,
	92, 103, 108, 89, 86, 66, 106, 87, 85, 82,
	77, 0, 135, 0, 101, 110, 119, 148, 204, 114,
	115, 116, 91, 70, 146, 147, 144, 145, 181, 182,
	213, 214, 215, 196, 141, 0, 0, 199, 184, 63,
	0, 83, 117, 97, 78, 111, 208, 198, 172, 210,
	150, 164, 218, 165, 166, 192, 138, 180, 94, 162,
	0, 153, 133, 159, 134, 151, 174, 76, 177, 149,
	200, 183, 216, 84, 187, 0, 100, 90, 0, 0,
	176, 202, 178, 197, 171, 193, 143, 186, 211, 163,
	190, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 189, 207, 161, 191, 132, 188,
	0, 136, 139, 217, 205, 156, 157, 0, 0, 0,
	0, 0, 0, 0, 175, 179, 194, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 185, 0,
	0, 0, 140, 137, 173, 0, 0, 0, 142, 0,
	155, 195, 0, 203, 170, 219, 206, 168, 167, 209,
	212, 96, 201, 152, 160, 72, 158, 99, 95, 109,
	65, 107, 102, 88, 80, 81, 64, 0, 98, 75,
	79, 74, 93, 104, 105, 73, 118, 68, 113, 67,
	69, 112, 92, 103, 108, 89, 86, 66, 106, 87,
	85, 82, 77, 0, 135, 0, 101, 110, 119, 148,
	204, 114, 115, 116, 91, 70, 146, 147, 144, 145,
	181, 182, 213, 214, 215, 196, 141, 0, 0, 199,
	184, 63, 0, 83, 117, 97, 78, 111, 208, 198,
	172, 210, 150, 164, 218, 165, 166, 192, 138, 180,
	94, 162, 0, 153, 133, 159, 134, 151, 174, 76,
	177, 149, 200, 183, 216, 84, 187, 0, 100, 90,
	0, 0, 176, 202, 178, 197, 171, 193, 143, 186,
	211, 163, 190, 0, 0, 0, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 189, 207, 161, 191,
	132, 188, 0, 136, 139, 217, 205, 156, 157, 0,
	0, 0, 0, 0, 0, 0, 175, 179, 194, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	185, 0, 0, 0, 140, 137, 173, 0, 0, 0,
	142, 0, 155, 195, 0, 203, 170, 219, 206, 168,
	167, 209, 212, 96, 201, 152, 160, 72, 158, 99,
	95, 109, 65, 107, 102, 88, 80, 81, 64, 0,
	98, 75, 79, 74, 93, 104, 105, 73, 118, 68,
	113, 67, 69, 112, 92, 103, 108, 89, 86, 66,
	106, 87, 85, 82, 77, 0, 135, 0, 101, 110,
	119, 148, 204, 114, 115, 116, 91, 70, 146, 147,
	144, 145, 181, 182, 213, 214, 215, 196, 141, 0,
	0, 199, 184, 63, 0, 83, 117, 97, 78, 111,
	208, 198, 172, 210, 150, 164, 218, 165, 166, 192,
	138, 180, 94, 162, 0, 153, 133, 159, 134, 151,
	174, 76, 177, 149, 200, 183, 216, 84, 187, 0,
	100, 90, 0, 0, 176, 202, 178, 197, 171, 193,
	143, 186, 211, 163, 190, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 189, 207,
	161, 191, 132, 188, 0, 136, 139, 217, 205, 156,
	157, 0, 0, 0, 0, 0, 0, 0, 175, 179,
	194, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 185, 0, 0, 0, 140, 137, 173, 0,
	0, 0, 142, 0, 155, 195, 0, 203, 170, 219,
	206, 168, 167, 209, 212, 96, 201, 152, 160, 72,
	158, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 135, 0,
	101, 110, 119, 148, 204, 114, 115, 116, 91, 70,
	146, 147, 144, 145, 181, 182, 213, 214, 215, 196,
	141, 0, 0, 199, 184, 63, 0, 83, 117, 97,
	78, 111, 94, 0, 0, 673, 0, 294, 0, 0,
	0, 76, 0, 293, 0, 0, 330, 84, 0, 0,
	100, 90, 0, 0, 0, 0, 323, 324, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 265, 311,
	310, 312, 313, 314, 315, 0, 0, 71, 316, 317,
	318, 0, 0, 291, 304, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 676, 0,
	0, 0, 341, 0, 303, 0, 0, 300, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 339, 0, 0, 96, 0, 0, 0, 72,
	0, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 0, 0,
	101, 110, 119, 0, 0, 114, 115, 116, 91, 70,
	331, 340, 337, 338, 335, 336, 334, 333, 332, 342,
	325, 326, 328, 0, 327, 63, 0, 83, 117, 97,
	78, 111, 94, 0, 0, 0, 0, 294, 0, 0,
	0, 76, 0, 293, 0, 0, 330, 84, 0, 0,
	100, 90, 0, 0, 0, 0, 323, 324, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 265, 311,
	310, 312, 313, 314, 315, 0, 0, 71, 316, 317,
	318, 0, 0, 291, 304, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 676, 0,
	0, 0, 341, 0, 303, 0, 0, 300, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 339, 0, 0, 96, 0, 0, 0, 72,
	0, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 0, 0,
	101, 110, 119, 0, 0, 114, 115, 116, 91, 70,
	331, 340, 337, 338, 335, 336, 334, 333, 332, 342,
	325, 326, 328, 0, 327, 63, 0, 83, 117, 97,
	78, 111, 94, 0, 0, 0, 0, 294, 0, 0,
	0, 76, 0, 293, 0, 0, 330, 84, 0, 0,
	100, 90, 0, 0, 0, 0, 323, 324, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 285, 265, 311,
	310, 312, 313, 314, 315, 0, 0, 71, 316, 317,
	318, 0, 0, 291, 304, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 0, 0,
	0, 0, 341, 0, 303, 0, 0, 300, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 339, 0, 0, 96, 0, 0, 0, 72,
	0, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 0, 0,
	101, 110, 119, 0, 0, 114, 115, 116, 91, 70,
	331, 340, 337, 338, 335, 336, 334, 333, 332, 342,
	325, 326, 328, 18, 327, 63, 0, 83, 117, 97,
	78, 111, 0, 0, 94, 0, 0, 0, 0, 294,
	0, 0, 0, 76, 0, 293, 0, 0, 330, 84,
	0, 0, 100, 90, 0, 0, 0, 0, 323, 324,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	265, 311, 310, 312, 313, 314, 315, 0, 0, 71,
	316, 317, 318, 0, 0, 291, 304, 0, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 341, 0, 303, 0, 0, 300,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 339, 0, 0, 96, 0, 0,
	0, 72, 0, 99, 95, 109, 65, 107, 102, 88,
	80, 81, 64, 0, 98, 75, 79, 74, 93, 104,
	105, 73, 118, 68, 113, 67, 69, 112, 92, 103,
	108, 89, 86, 66, 106, 87, 85, 82, 77, 0,
	0, 0, 101, 110, 119, 0, 0, 114, 115, 116,
	91, 70, 331, 340, 337, 338, 335, 336, 334, 333,
	332, 342, 325, 326, 328, 0, 327, 63, 0, 83,
	117, 97, 78, 111, 94, 0, 0, 0, 0, 294,
	0, 0, 0, 76, 0, 293, 0, 0, 330, 84,
	0, 0, 100, 90, 0, 0, 0, 0, 323, 324,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	265, 311, 310, 312, 313, 314, 315, 0, 0, 71,
	316, 317, 318, 0, 0, 291, 304, 0, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 341, 0, 303, 0, 0, 300,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 339, 0, 0, 96, 0, 0,
	0, 72, 0, 99, 95, 109, 65, 107, 102, 88,
	80, 81, 64, 0, 98, 75, 79, 74, 93, 104,
	105, 73, 118, 68, 113, 67, 69, 112, 92, 103,
	108, 89, 86, 66, 106, 87, 85, 82, 77, 0,
	0, 0, 101, 110, 119, 0, 0, 114, 115, 116,
	91, 70, 331, 340, 337, 338, 335, 336, 334, 333,
	332, 342, 325, 326, 328, 94, 327, 63, 0, 83,
	117, 97, 78, 111, 76, 0, 0, 0, 0, 330,
	84, 0, 0, 100, 90, 0, 0, 0, 0, 323,
	324, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 265, 311, 310, 312, 313, 314, 315, 0, 0,
	71, 316, 317, 318, 0, 0, 0, 304, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	302, 0, 0, 0, 0, 341, 0, 303, 0, 0,
	300, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 339, 0, 0, 96, 0,
	0, 0, 72, 0, 99, 95, 109, 65, 107, 102,
	88, 80, 81, 64, 0, 98, 75, 79, 74, 93,
	104, 105, 73, 118, 68, 113, 67, 69, 112, 92,
	103, 108, 89, 86, 66, 106, 87, 85, 82, 77,
	0, 0, 0, 101, 110, 119, 0, 0, 114, 115,
	116, 91, 70, 331, 340, 337, 338, 335, 336, 334,
	333, 332, 342, 325, 326, 328, 0, 327, 63, 0,
	83, 117, 97, 78, 111, 94, 0, 0, 0, 781,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 100, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 783, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 447, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 72, 0, 99, 95, 109, 65, 107, 102,
	88, 80, 81, 64, 0, 98, 75, 79, 74, 93,
	104, 105, 73, 118, 68, 113, 67, 69, 112, 92,
	103, 108, 89, 86, 66, 106, 87, 85, 82, 77,
	0, 0, 0, 101, 110, 119, 94, 0, 114, 115,
	116, 91, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 100, 90, 0, 0, 63, 0,
	83, 117, 97, 78, 111, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 56, 0, 0, 0, 59, 0, 96,
	0, 0, 0, 72, 0, 99, 95, 109, 65, 107,
	102, 88, 80, 81, 64, 0, 98, 75, 79, 74,
	93, 104, 105, 73, 118, 68, 113, 67, 69, 112,
	92, 103, 108, 89, 86, 66, 106, 87, 85, 82,
	77, 0, 0, 0, 101, 110, 119, 0, 0, 114,
	115, 116, 91, 70, 0, 0, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 63,
	0, 83, 117, 97, 78, 111, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 100, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 72, 0, 99, 95, 109, 65,
	107, 102, 88, 80, 81, 64, 0, 98, 75, 79,
	74, 93, 104, 105, 73, 118, 68, 113, 67, 69,
	112, 92, 103, 108, 89, 86, 66, 106, 87, 85,
	82, 77, 0, 0, 0, 101, 110, 119, 0, 0,
	114, 115, 116, 91, 70, 0, 0, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	63, 0, 83, 117, 97, 78, 111, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 100, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 72, 0, 99, 95, 109,
	65, 107, 102, 88, 80, 81, 64, 0, 98, 75,
	79, 74, 93, 104, 105, 73, 118, 68, 113, 67,
	69, 112, 92, 103, 108, 89, 86, 66, 106, 87,
	85, 82, 77, 0, 0, 0, 101, 110, 119, 94,
	0, 114, 115, 116, 91, 70, 0, 0, 76, 0,
	0, 0, 0, 0, 84, 0, 0, 100, 90, 0,
	0, 63, 0, 83, 117, 97, 78, 111, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 526, 0,
	0, 527, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 72, 0, 99, 95,
	109, 65, 107, 102, 88, 80, 81, 64, 0, 98,
	75, 79, 74, 93, 104, 105, 73, 118, 68, 113,
	67, 69, 112, 92, 103, 108, 89, 86, 66, 106,
	87, 85, 82, 77, 0, 0, 0, 101, 110, 119,
	0, 0, 114, 115, 116, 91, 70, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 375, 0,
	0, 0, 63, 76, 83, 117, 97, 78, 111, 84,
	0, 0, 100, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 0, 377, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 72, 0, 99, 95, 109, 65, 107, 102, 88,
	80, 81, 64, 0, 98, 75, 79, 74, 93, 104,
	105, 73, 118, 68, 113, 67, 69, 112, 92, 103,
	108, 89, 86, 66, 106, 87, 85, 82, 77, 0,
	0, 0, 101, 110, 119, 94, 0, 114, 115, 116,
	91, 70, 0, 0, 76, 0, 0, 0, 0, 0,
	84, 0, 0, 100, 90, 0, 0, 63, 0, 83,
	117, 97, 78, 111, 0, 0, 0, 0, 40, 0,
	0, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 72, 0, 99, 95, 109, 65, 107, 102,
	88, 80, 81, 64, 0, 98, 75, 79, 74, 93,
	104, 105, 73, 118, 68, 113, 67, 69, 112, 92,
	103, 108, 89, 86, 66, 106, 87, 85, 82, 77,
	0, 0, 0, 101, 110, 119, 94, 0, 114, 115,
	116, 91, 70, 0, 0, 76, 0, 0, 0, 0,
	0, 84, 0, 0, 100, 90, 0, 0, 63, 0,
	83, 117, 97, 78, 111, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 783, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 72, 0, 99, 95, 109, 65, 107,
	102, 88, 80, 81, 64, 0, 98, 75, 79, 74,
	93, 104, 105, 73, 118, 68, 113, 67, 69, 112,
	92, 103, 108, 89, 86, 66, 106, 87, 85, 82,
	77, 0, 0, 0, 101, 110, 119, 94, 0, 114,
	115, 116, 91, 70, 0, 0, 76, 0, 0, 0,
	0, 0, 84, 0, 0, 100, 90, 0, 0, 63,
	0, 83, 117, 97, 78, 111, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 377, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 72, 0, 99, 95, 109, 65,
	107, 102, 88, 80, 81, 64, 0, 98, 75, 79,
	74, 93, 104, 105, 73, 118, 68, 113, 67, 69,
	112, 92, 103, 108, 89, 86, 66, 106, 87, 85,
	82, 77, 0, 0, 0, 101, 110, 119, 94, 0,
	114, 115, 116, 91, 70, 0, 354, 76, 0, 0,
	0, 0, 0, 84, 0, 0, 100, 90, 0, 0,
	63, 0, 83, 117, 97, 78, 111, 0, 0, 0,
	0, 0, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 72, 0, 99, 95, 109,
	65, 107, 102, 88, 80, 81, 64, 0, 98, 75,
	79, 74, 93, 104, 105, 73, 118, 68, 113, 67,
	69, 112, 92, 103, 108, 89, 86, 66, 106, 87,
	85, 82, 77, 253, 0, 0, 101, 110, 119, 0,
	94, 114, 115, 116, 91, 70, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 84, 0, 0, 100, 90,
	0, 63, 0, 83, 117, 97, 78, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 72, 0, 99,
	95, 109, 65, 107, 102, 88, 80, 81, 64, 0,
	98, 75, 79, 74, 93, 104, 105, 73, 118, 68,
	113, 67, 69, 112, 92, 103, 108, 89, 86, 66,
	106, 87, 85, 82, 77, 0, 0, 0, 101, 110,
	119, 94, 0, 114, 115, 116, 91, 70, 0, 0,
	76, 0, 0, 0, 0, 0, 84, 0, 0, 100,
	90, 0, 0, 63, 0, 83, 117, 97, 78, 111,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 72, 0,
	99, 95, 109, 65, 107, 102, 88, 80, 81, 64,
	0, 98, 75, 79, 74, 93, 104, 105, 73, 118,
	68, 113, 67, 69, 112, 92, 103, 108, 89, 86,
	66, 106, 87, 85, 82, 77, 0, 0, 0, 101,
	110, 119, 94, 0, 114, 115, 116, 91, 70, 0,
	0, 76, 0, 0, 0, 0, 0, 84, 0, 0,
	100, 90, 0, 0, 63, 0, 83, 117, 97, 78,
	111, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 72,
	0, 99, 95, 109, 65, 107, 102, 88, 80, 81,
	64, 0, 98, 75, 79, 74, 93, 104, 105, 73,
	118, 68, 113, 67, 69, 112, 92, 103, 108, 89,
	86, 66, 106, 87, 85, 82, 77, 0, 0, 0,
	101, 110, 119, 94, 0, 114, 115, 116, 91, 70,
	0, 0, 76, 0, 0, 0, 0, 0, 84, 0,
	0, 100, 90, 0, 0, 63, 0, 83, 117, 97,
	78, 111, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	72, 0, 99, 95, 109, 65, 107, 102, 88, 80,
	81, 64, 0, 98, 75, 79, 74, 93, 104, 105,
	73, 118, 68, 113, 67, 69, 112, 92, 103, 108,
	89, 86, 66, 106, 87, 85, 82, 77, 0, 0,
	0, 101, 110, 119, 94, 0, 114, 115, 116, 91,
	70, 0, 0, 76, 0, 0, 0, 0, 0, 84,
	0, 0, 100, 90, 0, 0, 63, 0, 83, 117,
	97, 78, 111, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 72, 0, 99, 95, 109, 65, 107, 102, 88,
	80, 81, 64, 0, 98, 75, 79, 74, 93, 104,
	105, 73, 118, 68, 113, 67, 259, 112, 92, 103,
	108, 89, 86, 66, 106, 87, 85, 82, 77, 0,
	0, 0, 101, 110, 119, 0, 0, 114, 115, 116,
	260, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 83,
	117, 97, 78, 111,
}
var yyPact = [...]int{

	209, -1000, -150, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 609, 632, -1000, -1000,
	-1000, -1000, -1000, 411, 4609, 4, 32, 26, 30, 3205,
	6476, -1000, -1000, -1000, -1000, -1000, -1000, 430, -1000, -1000,
	-1000, -1000, -1000, 593, 606, 439, 592, 506, -1000, -2,
	5418, 6023, 6627, -1000, 301, 20, 6476, -116, -5, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29, 6476, -1000, 6476, -7, 298, -7, 6476, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248,
	547, 4107, 4107, 609, -1000, 430, -1000, -1000, -1000, 533,
	-1000, -1000, 162, 5871, 399, 640, -1000, -1000, -1000, 571,
	4951, 5267, 58, 6476, 101, -1000, 2629, 332, -1000, 546,
	-1000, -1000, 99, -1000, 56, -1000, -1000, 364, -1000, 1098,
	272, 2245, 11, 6476, 117, 6476, 2245, 8, 6476, 569,
	442, 6476, -1000, -1000, -1000, -1000, -1000, 628, 83, 222,
	-1000, 4107, 1279, 382, 382, -1000, -1000, 49, -1000, -1000,
	4278, 4278, 4278, 4278, 4278, 4278, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 382,
	55, -1000, 3927, 382, 382, 382, 382, 382, 382, 4107,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 378, -1000, 204, 593, 248, 506, 5102,
	463, -1000, -1000, 392, 6476, -1000, 6325, 5418, 5418, 5418,
	5418, -1000, 476, 475, -1000, 474, 466, 483, 6476, -1000,
	326, 248, 4951, 68, -1000, 5720, -1000, -1000, 3013, 616,
	5418, 6476, -1000, -1000, -1000, -1000, -1000, 6325, -1000, 4107,
	2821, 1861, 81, 166, -94, -1000, -1000, 396, -1000, 396,
	396, 396, 396, -70, -70, -70, -70, -1000, -1000, -1000,
	-1000, -1000, 410, -1000, 396, 396, 396, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 406, 406, 406, 403, 403,
	-13, -1000, -1000, -1000, 6476, -1000, 568, 73, -1000, 6476,
	-1000, -1000, 6476, 2245, -1000, 484, 4107, 4107, 258, 4107,
	4107, 94, 4278, 171, 106, 4278, 4278, 4278, 4278, 4278,
	4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278,
	207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253,
	-1000, 430, 575, 575, 71, 71, 71, 71, 71, 1395,
	3385, 2821, 323, 131, 3927, 3565, 3565, 4107, 4107, 3565,
	573, 116, 131, 6174, -1000, 248, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3565, 3565, 3565, 3565, 4107, -1000, -1000,
	-1000, 547, -1000, 573, 608, -1000, 527, 519, 3565, -1000,
	438, 6325, 382, -1000, 4780, -1000, 437, 640, 435, 825,
	-1000, -1000, -1000, -1000, 468, -1000, 467, -1000, -1000, -1000,
	-1000, -1000, 248, -1000, 18, 17, 14, -1000, -1000, -1000,
	-1000, 609, 4107, 428, -1000, -1000, -1000, 131, -1000, 54,
	-1000, 375, 1669, -1000, -1000, -1000, -1000, -1000, -1000, 404,
	559, 90, 249, -1000, -1000, 550, -1000, 148, -98, -1000,
	-1000, 210, -70, -70, -1000, -1000, 65, 543, 65, 65,
	65, 223, -1000, -1000, -1000, -1000, 199, -1000, -1000, -1000,
	187, -1000, 433, 6174, 2245, -1000, -1000, 92, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 500, 94, 126, -1000, -1000, 177, -1000, -1000, 131,
	131, 251, -1000, -1000, -1000, -1000, 171, 4278, 4278, 4278,
	920, 251, 1085, 896, 509, 71, 152, 152, 66, 66,
	66, 66, 66, 551, 551, -1000, -1000, -1000, 248, -1000,
	-1000, -1000, 248, 3565, 371, -1000, -1000, 4458, 53, 382,
	4107, -1000, 276, 276, 70, 198, 276, 3565, 134, -1000,
	4107, 248, -1000, 276, 248, 276, 276, -1000, -1000, 6476,
	-1000, -1000, -1000, -1000, 355, -1000, 562, 321, 334, -1000,
	-1000, 3745, 248, 316, 46, 609, 4107, 4107, -1000, -1000,
	-1000, 382, 382, 382, 593, 131, -1000, 2629, 1861, -1000,
	1861, 6174, -1000, 243, -1000, -1000, -90, 229, -1000, -1000,
	-1000, 277, 65, 65, -1000, 230, 110, -1000, -1000, -1000,
	305, -1000, 360, 282, 6476, -1000, -1000, -1000, 6476, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 920,
	251, 963, -1000, 4278, 4278, -1000, -1000, 276, 3565, -1000,
	-1000, 5569, -1000, -1000, 2437, 3565, 131, -1000, -1000, 5,
	207, 5, -124, 349, 112, -1000, 4107, 113, -1000, -1000,
	-1000, -1000, -1000, -1000, 616, 5418, 555, -1000, 382, -1000,
	-1000, 427, 6174, 6174, 593, 131, 131, 6174, 6174, 6174,
	-1000, -1000, 1669, -1000, 262, -1000, 396, -1000, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 220, 181, -1000, 179, 2245, -1000, -1000, -1000, 4278,
	251, 251, -1000, -1000, -1000, -1000, 44, 248, 248, 396,
	396, -1000, 396, 403, -1000, 396, -30, 396, -53, 248,
	248, 382, -121, -1000, 131, 4107, 610, 352, 627, -1000,
	382, -1000, 430, 42, -1000, -1000, 247, -1000, 247, 247,
	-1000, 6174, -1000, 151, 554, -1000, 553, -1000, 263, 252,
	-1000, 251, 2053, -1000, -1000, -1000, 25, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4278, 248, 212, 131, 612,
	605, 6325, 334, 248, 6174, -1000, 6174, -1000, -1000, -1000,
	-1000, 208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2,
	-1000, -1000, -1000, 4107, 4107, 332, -1000, -1000, -1000, -1000,
	248, 19, -135, 131, 329, -1000, 490, -128, -140, -1000,
	487, -1000, -130, -138, -147, -1000,
}
var yyPgo = [...]int{

	0, 829, 32, 502, 827, 822, 816, 812, 811, 810,
	805, 803, 799, 797, 795, 794, 793, 792, 789, 54,
	788, 787, 786, 39, 785, 50, 776, 772, 26, 404,
	22, 19, 61, 771, 20, 60, 53, 770, 768, 767,
	45, 766, 911, 765, 763, 762, 5, 10, 761, 760,
	758, 757, 37, 6, 756, 754, 753, 751, 748, 747,
	28, 1, 4, 24, 8, 746, 29, 9, 741, 34,
	739, 738, 734, 733, 27, 730, 44, 727, 15, 41,
	726, 36, 7, 725, 42, 724, 501, 722, 105, 721,
	716, 714, 713, 712, 711, 102, 0, 492, 46, 18,
	709, 173, 17, 43, 708, 704, 49, 13, 16, 12,
	703, 701, 699, 698, 697, 695, 694, 168, 693, 691,
	2, 40, 684, 677, 58, 11, 674, 672, 668, 667,
	38, 663, 35, 662, 661, 660, 21, 14, 659, 3,
	658, 657, 653, 790, 23, 651, 650, 161,
}
var yyR1 = [...]int{

	0, 141, 142, 142, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	3, 4, 4, 5, 5, 6, 6, 22, 22, 7,
	8, 8, 145, 145, 38, 38, 9, 9, 83, 83,
	83, 10, 10, 10, 10, 14, 133, 134, 134, 134,
	130, 111, 111, 111, 114, 114, 112, 112, 112, 112,
	112, 112, 112, 113, 113, 113, 113, 113, 115, 115,
	115, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 129, 129, 117,
	117, 124, 124, 125, 125, 125, 122, 122, 123, 123,
	126, 126, 126, 118, 118, 118, 118, 118, 127, 127,
	120, 120, 120, 121, 121, 128, 128, 128, 128, 128,
	119, 119, 131, 138, 138, 138, 138, 132, 132, 140,
	140, 139, 135, 135, 135, 136, 136, 136, 137, 137,
	137, 11, 11, 11, 11, 12, 13, 13, 13, 15,
	110, 110, 110, 16, 17, 18, 18, 18, 18, 18,
	18, 146, 19, 20, 20, 21, 21, 21, 25, 25,
	25, 23, 23, 24, 24, 30, 30, 29, 29, 31,
	31, 31, 31, 100, 100, 100, 99, 99, 33, 33,
	34, 34, 35, 35, 36, 36, 36, 44, 37, 37,
	37, 37, 105, 105, 104, 104, 104, 103, 103, 39,
	39, 39, 39, 40, 40, 40, 40, 41, 41, 43,
	43, 42, 42, 45, 45, 45, 45, 46, 46, 47,
	47, 32, 32, 32, 32, 32, 32, 32, 87, 87,
	49, 49, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 59, 59, 59, 59, 59, 59, 50, 50,
	50, 50, 50, 50, 50, 28, 28, 60, 60, 60,
	66, 61, 61, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 57, 57, 57, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 56, 56, 56, 56, 56,
	56, 56, 56, 147, 147, 58, 58, 58, 58, 26,
	26, 26, 26, 26, 108, 108, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 70,
	70, 27, 27, 68, 68, 69, 71, 71, 67, 67,
	67, 52, 52, 52, 52, 52, 52, 52, 54, 54,
	54, 72, 72, 73, 73, 74, 74, 75, 75, 76,
	77, 77, 77, 78, 78, 78, 78, 79, 79, 79,
	51, 51, 51, 51, 51, 51, 80, 80, 80, 80,
	81, 81, 62, 62, 64, 64, 63, 65, 82, 82,
	84, 85, 85, 88, 88, 89, 89, 86, 86, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 91,
	91, 91, 92, 92, 93, 93, 93, 94, 94, 97,
	97, 98, 98, 101, 101, 102, 102, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 143, 144, 106, 107, 107, 107,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 6, 7, 1, 1, 8,
	7, 6, 1, 1, 1, 3, 5, 3, 1, 2,
	1, 2, 8, 4, 6, 4, 4, 1, 3, 3,
	7, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 0, 1,
	0, 3, 3, 0, 2, 0, 2, 1, 2, 1,
	0, 2, 4, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 4, 5, 4, 5, 5, 3,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -141, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -15, -16, -17, -18, -3, -4, 6, -22,
	8, 9, 29, -14, 107, 108, 110, 109, 111, 121,
	47, 24, 122, 123, 126, 127, 128, -143, 7, 184,
	50, -142, 197, -74, 14, -21, 5, -19, -146, -19,
	-19, -19, -19, -133, 50, -93, 114, 66, 112, 118,
	-97, 53, -96, 190, 135, 129, 156, 148, 146, 149,
	174, 62, 124, 144, 140, 138, 26, 161, 195, 139,
	133, 134, 160, 192, 32, 159, 155, 158, 132, 154,
	36, 173, 151, 141, 17, 127, 120, 194, 137, 126,
	35, 165, 131, 152, 142, 143, 157, 130, 153, 128,
	166, 196, 150, 147, 170, 171, 172, 193, 145, 167,
	-86, 114, 116, 112, 112, 113, 114, 112, -110, 53,
	-95, -96, 67, 21, 23, 163, 70, 102, 15, 71,
	101, 185, 107, 45, 177, 178, 175, 176, 168, 28,
	9, 24, 122, 20, 95, 109, 74, 75, 125, 22,
	123, 65, 18, 48, 10, 12, 13, 117, 116, 86,
	113, 43, 7, 103, 25, 83, 39, 27, 41, 84,
	16, 179, 180, 30, 189, 97, 46, 33, 68, 63,
	49, 66, 14, 44, 85, 110, 184, 42, 6, 188,
	29, 121, 40, 112, 169, 73, 115, 64, 5, 118,
	8, 47, 119, 181, 182, 183, 31, 72, 11, 114,
	-101, 53, -96, -106, -106, -106, -106, -106, -106, -2,
	-78, 16, 15, -5, -3, -143, 6, 19, 20, -25,
	37, 38, -20, -86, -34, -35, -36, -37, -44, -66,
	-143, -42, -101, 10, -38, -42, -83, -82, 174, 149,
	173, -84, -67, -97, -101, 53, -96, -134, -130, 53,
	113, -42, 184, -89, 117, 112, -42, -42, -88, 117,
	53, -88, -42, -106, -144, 52, -79, 18, 30, -32,
	-48, 68, -53, 28, 22, -52, -49, -67, -65, -66,
	102, 91, 92, 99, 69, 103, -57, -55, -56, -58,
	55, 54, 56, 57, 58, 59, 63, 64, 65, -97,
	-101, -63, -143, 41, 42, 185, 186, 189, 187, 71,
	31, 175, 183, 182, 181, 179, 180, 177, 178, 117,
	176, 97, 184, -75, -76, -32, -74, -2, -19, 33,
	-23, 20, 61, -43, 25, -42, 29, 51, -39, -40,
	-41, 39, 43, 45, 40, 41, 42, 46, -105, 21,
	-34, -2, -143, -104, -103, 21, -101, 55, 104, -42,
	-145, 51, 10, 119, -98, -97, -95, 51, 29, 76,
	104, 52, 51, -111, -114, -116, -115, -112, -113, 146,
	147, 102, 150, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 124, 142, 143, 144, 145, 129, 130,
	131, 132, 133, 134, 135, 137, 138, 139, 140, 141,
	53, -107, -143, -98, 114, -42, 68, -42, -107, 115,
	-42, 22, 49, -42, 8, 86, 67, 66, 83, 51,
	17, -32, -50, 86, 68, 84, 85, 70, 88, 87,
	98, 91, 92, 93, 94, 95, 96, 97, 89, 90,
	101, 76, 77, 78, 79, 80, 81, 82, -87, -143,
	-66, -143, 105, 106, -53, -53, -53, -53, -53, -53,
	-143, 104, -61, -32, -143, -143, -143, -143, -143, -143,
	-143, -70, -32, -143, -147, -143, -147, -147, -147, -147,
	-147, -147, -147, -143, -143, -143, -143, 51, -77, 23,
	24, -78, -144, -25, -54, -97, 56, 59, -24, 40,
	-51, 29, 31, -2, -143, -42, -82, -35, -36, -35,
	-36, 39, 39, 39, 44, 39, 44, 39, -40, -101,
	-144, -144, -2, -45, 47, 116, 48, -103, -102, -101,
	-95, -47, 11, -34, -42, -106, -84, -32, -98, -102,
	-95, -135, -136, -137, -98, 55, 56, -130, -131, -138,
	120, 118, -132, 113, 27, -126, 63, 68, -122, 166,
	-117, 50, -117, -117, -117, -117, -120, 149, -120, -120,
	-120, 50, -117, -117, -117, -124, 50, -124, -124, -125,
	50, -125, -94, 119, -42, 22, -90, 110, 108, 163,
	149, 62, 28, 109, 14, 185, 196, 53, -42, -42,
	-107, 35, -32, -32, -59, 63, 68, 64, 65, -32,
	-32, -53, -60, -63, -66, 60, 86, 84, 85, 70,
	-53, -53, -53, -53, -53, -53, -53, -53, -53, -53,
	-53, -53, -53, -53, -53, -108, 53, 55, 53, -52,
	-52, -97, -30, 20, -29, -31, 93, -32, -101, -98,
	51, -144, -29, -29, -32, -32, -29, -23, -68, -69,
	72, -97, -144, -29, -30, -29, -29, -76, -79, -85,
	18, 10, 31, 31, -29, -81, 49, -82, -62, -64,
	-63, -143, -2, -80, -97, -47, 49, 49, 39, 39,
	-144, 113, 113, 113, -74, -32, -47, 104, 51, -137,
	76, 50, 27, -132, 53, 53, -118, 28, 63, -123,
	167, 56, -120, -120, -121, 101, 29, -121, -121, -121,
	-129, 55, 56, 56, 49, -97, -107, -106, -91, -92,
	115, 21, 113, 27, 36, 63, 64, 65, -60, -53,
	-53, -53, -28, 125, 67, -144, -144, -29, 51, -100,
	-99, 21, -97, 55, 104, -143, -32, -144, -144, 51,
	119, 21, -144, -29, -71, -69, 74, -32, -144, -144,
	-144, -144, -144, -42, -33, 10, 26, -81, 51, -144,
	-144, -144, 51, 104, -74, -32, -32, -143, -143, -143,
	-78, -98, -136, -137, -140, -139, -97, 53, -127, 163,
	55, 56, 57, 63, 52, -121, -121, 53, 53, 102,
	52, 51, 51, 52, 51, -42, -42, -106, -28, 67,
	-53, -53, -144, -31, -99, 93, -102, -30, -109, 102,
	146, 124, 144, 140, 160, 151, 165, 142, 166, -108,
	-109, 190, -74, 75, -32, 73, -47, -34, 27, -64,
	31, -2, -143, -97, -97, -78, -46, -97, -46, -46,
	52, 51, -117, -128, 120, 27, 118, 55, 56, 56,
	-107, -53, 104, -144, -144, -117, -117, -117, -125, -117,
	134, -117, 134, -144, -144, -143, -27, 188, -32, -72,
	12, 8, -62, -2, 104, -144, 51, -144, -144, -139,
	-119, 62, 27, 27, 52, 52, 93, -120, 53, -53,
	-144, 55, -73, 13, 15, -82, -144, -97, -97, 55,
	-26, 86, 193, -32, -61, -144, 191, 46, 194, 36,
	192, 195, 36, 193, 194, 195,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 375, 0, 161, 161,
	161, 161, 161, 0, 434, 417, 0, 0, 0, 0,
	0, 594, 594, 594, 594, 594, 594, 0, 27, 28,
	592, 1, 3, 383, 0, 0, 165, 168, 163, 417,
	0, 0, 0, 41, 0, 0, 585, 0, 415, 435,
	436, 439, 440, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 586, 587, 588, 589, 590, 591,
	0, 0, 418, 0, 413, 0, 413, 0, 594, 150,
	151, 152, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 585,
	154, 443, 444, 155, 156, 157, 158, 159, 160, 21,
	387, 0, 0, 375, 23, 0, 161, 166, 167, 171,
	169, 170, 162, 0, 0, 190, 192, 193, 194, 202,
	0, 204, 221, 0, 0, 34, 0, 37, -2, 540,
	-2, 408, 0, 358, 0, -2, -2, 0, 47, 0,
	0, 595, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 149, 153, 22, 593, 17, 0, 0, 384,
	231, 0, 236, 238, 0, 273, 274, 275, 276, 277,
	0, 0, 0, 0, 0, 0, 299, 300, 301, 302,
	361, 362, 363, 364, 365, 366, 367, 240, 241, 358,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 323, 323, 323, 323, 323, 323, 323, 323, 0,
	0, 0, 0, 376, 377, 380, 383, 21, 168, 0,
	173, 172, 164, 0, 0, 220, 0, 0, 0, 0,
	0, 209, 0, 0, 212, 0, 0, 0, 0, 203,
	0, 21, 0, 223, 205, 0, 207, 208, 0, 229,
	0, 0, 32, 33, 594, 441, 442, 0, 39, 0,
	0, 132, 0, 100, 96, 52, 53, 89, 55, 89,
	89, 89, 89, 110, 110, 110, 110, 81, 82, 83,
	84, 85, 0, 68, 89, 89, 89, 72, 56, 57,
	58, 59, 60, 61, 62, 91, 91, 91, 93, 93,
	437, 43, 596, 597, 0, 45, 0, 0, 144, 0,
	146, 414, 0, 595, 388, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 262, 263, 264, 237, 0,
	251, 0, 0, 0, 293, 294, 295, 296, 297, 0,
	175, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	171, 0, 350, 0, 315, 0, 316, 317, 318, 319,
	320, 321, 322, 0, 175, 0, 0, 0, 379, 381,
	382, 387, 24, 171, 0, 368, 0, 0, 0, 174,
	400, 0, 0, -2, 0, 219, 229, 191, 198, 0,
	201, 210, 211, 213, 0, 215, 0, 217, 218, 195,
	196, 270, 21, 197, 0, 0, 0, 206, 222, 445,
	446, 375, 0, 229, 35, 36, 409, 410, 359, 0,
	-2, 46, 133, 135, 138, 139, 140, 48, 49, 0,
	0, 0, 0, 127, 128, 103, 101, 0, 98, 97,
	54, 0, 110, 110, 75, 76, 113, 0, 113, 113,
	113, 0, 69, 70, 71, 63, 0, 64, 65, 66,
	0, 67, 0, 0, 595, 416, 594, 429, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 145, 147,
	148, 0, 232, 233, 235, 252, 0, 254, 256, 385,
	386, 242, 243, 267, 268, 269, 0, 0, 0, 0,
	265, 247, 0, 278, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 292, 334, 335, 0, 290,
	291, 298, 0, 0, 176, 177, 179, 183, 0, 359,
	0, 406, 0, 0, 0, 0, 0, 0, 356, 353,
	0, 0, 324, 0, 0, 0, 0, 378, 18, 0,
	411, 412, 369, 370, 188, 25, 0, 400, 390, 402,
	404, 0, 21, 0, 396, 375, 0, 0, 214, 216,
	-2, 0, 0, 0, 383, 230, 31, 0, 0, 136,
	0, 0, 123, 0, 125, 126, 108, 0, 102, 51,
	99, 0, 113, 113, 77, 0, 0, 78, 79, 80,
	0, 87, 0, 0, 0, 438, 44, 141, 0, 594,
	430, 431, 432, 433, 389, 253, 255, 257, 244, 265,
	248, 0, 245, 0, 0, 239, 303, 0, 0, 180,
	184, 0, 186, 187, 0, 175, 272, 306, 307, 0,
	0, 0, 0, 375, 0, 354, 0, 0, 314, 325,
	326, 327, 328, 19, 229, 0, 0, 26, 0, 405,
	-2, 0, 0, 0, 383, 199, 200, 0, 0, 0,
	30, 360, 134, 137, 0, 129, 89, 124, 115, 109,
	104, 105, 106, 107, 90, 73, 74, 114, 111, 112,
	86, 0, 0, 94, 0, 595, 142, 143, 246, 0,
	266, 249, 304, 178, 185, 181, 0, 0, 0, 89,
	89, 339, 89, 93, 342, 89, 344, 89, 347, 0,
	0, 0, 351, 313, 357, 0, 371, 189, 0, 403,
	0, -2, 0, 398, 397, 29, 0, 227, 0, 0,
	122, 0, 131, 120, 0, 117, 119, 88, 0, 0,
	42, 250, 0, 305, 308, 336, 110, 340, 341, 343,
	345, 346, 348, 310, 309, 0, 0, 0, 355, 373,
	0, 0, 393, 21, 0, 224, 0, 225, 226, 130,
	50, 0, 116, 118, 92, 95, 182, 337, 338, 329,
	312, 352, 20, 0, 0, 401, -2, 399, 228, 121,
	0, 0, 0, 374, 372, 311, 0, 0, 0, 330,
	0, 333, 331, 0, 0, 332,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 3, 3, 3, 96, 88, 3,
	50, 52, 93, 91, 51, 92, 104, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 197,
	77, 76, 78, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 87, 3, 99,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 70, 71, 72, 73, 74, 75,
	79, 80, 81, 82, 83, 84, 85, 86, 89, 90,
	95, 97, 100, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:263
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:268
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:269
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:291
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:299
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 19:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:303
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 20:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:310
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:316
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:320
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:326
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:330
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:337
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:348
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:360
		{
			yyVAL.str = InsertStr
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:364
		{
			yyVAL.str = ReplaceStr
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:370
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:376
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:380
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:385
		{
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:386
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:390
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:394
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:400
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:404
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:416
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:421
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:426
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:430
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:436
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:443
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:450
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:455
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:459
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:465
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:475
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:485
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:490
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:638
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:643
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:648
		{
			yyVAL.optVal = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:652
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:657
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:661
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:669
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:673
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:679
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:687
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:691
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:696
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:700
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:719
		{
			yyVAL.optVal = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:723
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:727
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:731
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:735
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:740
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:744
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:749
		{
			yyVAL.str = ""
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:753
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:757
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:762
		{
			yyVAL.str = ""
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:766
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:771
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:775
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:779
		{
			yyVAL.colKeyOpt = colKey
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:783
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:787
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:792
		{
			yyVAL.optVal = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:796
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:802
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:808
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:812
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:816
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:820
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:826
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:830
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:836
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:840
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:846
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:851
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:855
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:859
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:867
		{
			yyVAL.str = yyDollar[1].str
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:871
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:875
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:881
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:885
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:895
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:899
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:904
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:909
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:915
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:921
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:929
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:934
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:944
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:950
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:954
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:963
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:974
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:980
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:986
		{
			yyVAL.statement = &OtherRead{}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:990
		{
			yyVAL.statement = &OtherRead{}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:994
		{
			yyVAL.statement = &OtherRead{}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:998
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1002
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1006
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1011
		{
			setAllowComments(yylex, true)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1015
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1021
		{
			yyVAL.bytes2 = nil
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1025
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1031
		{
			yyVAL.str = UnionStr
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1035
		{
			yyVAL.str = UnionAllStr
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1039
		{
			yyVAL.str = UnionDistinctStr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1044
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1048
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1052
		{
			yyVAL.str = SQLCacheStr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1057
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1061
		{
			yyVAL.str = DistinctStr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1066
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1070
		{
			yyVAL.str = StraightJoinHint
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1075
		{
			yyVAL.selectExprs = nil
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1079
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1085
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1089
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1095
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1099
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1103
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1107
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1112
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1116
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1120
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1127
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1132
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1136
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1142
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1146
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1156
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1160
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1164
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1170
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1183
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1187
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1191
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1195
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1200
		{
			yyVAL.empty = struct{}{}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1202
		{
			yyVAL.empty = struct{}{}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1205
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1209
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1213
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1220
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1226
		{
			yyVAL.str = JoinStr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1230
		{
			yyVAL.str = JoinStr
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1234
		{
			yyVAL.str = JoinStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1238
		{
			yyVAL.str = StraightJoinStr
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1244
		{
			yyVAL.str = LeftJoinStr
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1248
		{
			yyVAL.str = LeftJoinStr
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1252
		{
			yyVAL.str = RightJoinStr
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1256
		{
			yyVAL.str = RightJoinStr
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1262
		{
			yyVAL.str = NaturalJoinStr
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1266
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1276
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1280
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1286
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1290
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1295
		{
			yyVAL.indexHints = nil
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1299
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1303
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1307
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1313
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1317
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1322
		{
			yyVAL.expr = nil
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1326
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1336
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1340
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1344
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1348
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1352
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1356
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1362
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1366
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1372
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1376
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1398
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1402
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1406
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1410
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1414
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1418
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1424
		{
			yyVAL.str = IsNullStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1428
		{
			yyVAL.str = IsNotNullStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1432
		{
			yyVAL.str = IsTrueStr
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1436
		{
			yyVAL.str = IsNotTrueStr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1440
		{
			yyVAL.str = IsFalseStr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1444
		{
			yyVAL.str = IsNotFalseStr
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1450
		{
			yyVAL.str = EqualStr
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1454
		{
			yyVAL.str = LessThanStr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1458
		{
			yyVAL.str = GreaterThanStr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1462
		{
			yyVAL.str = LessEqualStr
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1466
		{
			yyVAL.str = GreaterEqualStr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1470
		{
			yyVAL.str = NotEqualStr
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1474
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1479
		{
			yyVAL.expr = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1483
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1489
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1493
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1497
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1503
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1509
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1513
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1523
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1527
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1531
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1535
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1587
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1591
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1595
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1599
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1603
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1611
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1625
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1629
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1633
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1651
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1655
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1659
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1677
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 309:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1681
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1685
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 311:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1689
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 312:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1693
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1697
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1701
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1738
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1775
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1779
		{
			yyVAL.str = BooleanModeStr
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1783
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 332:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1787
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1791
		{
			yyVAL.str = QueryExpansionStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1862
		{
			yyVAL.expr = nil
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1866
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1871
		{
			yyVAL.str = string("")
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1875
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1881
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1885
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1891
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1896
		{
			yyVAL.expr = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1900
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1906
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1910
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1914
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1920
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1924
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1928
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1932
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1936
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1940
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1944
		{
			yyVAL.expr = &NullVal{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1950
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1959
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1963
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1968
		{
			yyVAL.exprs = nil
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1972
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1977
		{
			yyVAL.expr = nil
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1981
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1986
		{
			yyVAL.orderBy = nil
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1990
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:1996
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2000
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2006
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2011
		{
			yyVAL.str = AscScr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2015
		{
			yyVAL.str = AscScr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2019
		{
			yyVAL.str = DescScr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2024
		{
			yyVAL.limit = nil
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2028
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2032
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2036
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2041
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2045
		{
			yyVAL.str = ForUpdateStr
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2049
		{
			yyVAL.str = ShareModeStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2062
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2066
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2070
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2075
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2079
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2083
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2090
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2094
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2098
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2102
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2107
		{
			yyVAL.updateExprs = nil
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2111
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2117
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2121
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2127
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2131
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2137
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2143
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2153
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2157
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2163
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2172
		{
			yyVAL.byt = 0
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2174
		{
			yyVAL.byt = 1
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2177
		{
			yyVAL.empty = struct{}{}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2179
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2182
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2184
		{
			yyVAL.str = IgnoreStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2188
		{
			yyVAL.empty = struct{}{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2190
		{
			yyVAL.empty = struct{}{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2192
		{
			yyVAL.empty = struct{}{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2194
		{
			yyVAL.empty = struct{}{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2196
		{
			yyVAL.empty = struct{}{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2198
		{
			yyVAL.empty = struct{}{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2200
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2202
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2204
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2206
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2209
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2211
		{
			yyVAL.empty = struct{}{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2213
		{
			yyVAL.empty = struct{}{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2217
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2219
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2222
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2224
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2226
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2229
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2231
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2235
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2239
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2246
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2252
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2256
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2263
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2434
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2443
		{
			decNesting(yylex)
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2448
		{
			forceEOF(yylex)
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2453
		{
			forceEOF(yylex)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2457
		{
			forceEOF(yylex)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line ./go/vt/sqlparser/sql.y:2461
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const SQL_CALC_FOUND_ROWS = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const UNDERSCORE_UTF8 = 57441
const UNDERSCORE_LATIN1 = 57442
const INTERVAL = 57443
const JSON_EXTRACT_OP = 57444
const JSON_UNQUOTE_EXTRACT_OP = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const FLUSH = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const UNIQUE = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const CHECK = 57466
const INDEXES = 57467
const ACTION = 57468
const CASCADE = 57469
const CONSTRAINT = 57470
const FOREIGN = 57471
const NO = 57472
const REFERENCES = 57473
const RESTRICT = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const NULLX = 57542
const AUTO_INCREMENT = 57543
const APPROXNUM = 57544
const SIGNED = 57545
const UNSIGNED = 57546
const ZEROFILL = 57547
const COLLATION = 57548
const DATABASES = 57549
const TABLES = 57550
const VITESS_METADATA = 57551
const VSCHEMA = 57552
const FULL = 57553
const PROCESSLIST = 57554
const COLUMNS = 57555
const FIELDS = 57556
const ENGINES = 57557
const PLUGINS = 57558
const EXTENDED = 57559
const NAMES = 57560
const CHARSET = 57561
const GLOBAL = 57562
const SESSION = 57563
const ISOLATION = 57564
const LEVEL = 57565
const READ = 57566
const WRITE = 57567
const ONLY = 57568
const REPEATABLE = 57569
const COMMITTED = 57570
const UNCOMMITTED = 57571
const SERIALIZABLE = 57572
const CURRENT_TIMESTAMP = 57573
const DATABASE = 57574
const CURRENT_DATE = 57575
const CURRENT_TIME = 57576
const LOCALTIME = 57577
const LOCALTIMESTAMP = 57578
const UTC_DATE = 57579
const UTC_TIME = 57580
const UTC_TIMESTAMP = 57581
const REPLACE = 57582
const CONVERT = 57583
const CAST = 57584
const SUBSTR = 57585
const SUBSTRING = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const TIMESTAMPADD = 57589
const TIMESTAMPDIFF = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const QUERY = 57596
const EXPANSION = 57597
const UNUSED = 57598
const ARRAY = 57599
const CUME_DIST = 57600
const DESCRIPTION = 57601
const DENSE_RANK = 57602
const EMPTY = 57603
const EXCEPT = 57604
const FIRST_VALUE = 57605
const GROUPING = 57606
const GROUPS = 57607
const JSON_TABLE = 57608
const LAG = 57609
const LAST_VALUE = 57610
const LATERAL = 57611
const LEAD = 57612
const MEMBER = 57613
const NTH_VALUE = 57614
const NTILE = 57615
const OF = 57616
const OVER = 57617
const PERCENT_RANK = 57618
const RANK = 57619
const RECURSIVE = 57620
const ROW_NUMBER = 57621
const SYSTEM = 57622
const WINDOW = 57623
const ACTIVE = 57624
const ADMIN = 57625
const BUCKETS = 57626
const CLONE = 57627
const COMPONENT = 57628
const DEFINITION = 57629
const ENFORCED = 57630
const EXCLUDE = 57631
const FOLLOWING = 57632
const GEOMCOLLECTION = 57633
const GET_MASTER_PUBLIC_KEY = 57634
const HISTOGRAM = 57635
const HISTORY = 57636
const INACTIVE = 57637
const INVISIBLE = 57638
const LOCKED = 57639
const MASTER_COMPRESSION_ALGORITHMS = 57640
const MASTER_PUBLIC_KEY_PATH = 57641
const MASTER_TLS_CIPHERSUITES = 57642
const MASTER_ZSTD_COMPRESSION_LEVEL = 57643
const NESTED = 57644
const NETWORK_NAMESPACE = 57645
const NOWAIT = 57646
const NULLS = 57647
const OJ = 57648
const OLD = 57649
const OPTIONAL = 57650
const ORDINALITY = 57651
const ORGANIZATION = 57652
const OTHERS = 57653
const PATH = 57654
const PERSIST = 57655
const PERSIST_ONLY = 57656
const PRECEDING = 57657
const PRIVILEGE_CHECKS_USER = 57658
const PROCESS = 57659
const RANDOM = 57660
const REFERENCE = 57661
const REQUIRE_ROW_FORMAT = 57662
const RESOURCE = 57663
const RESPECT = 57664
const RESTART = 57665
const RETAIN = 57666
const REUSE = 57667
const ROLE = 57668
const SECONDARY = 57669
const SECONDARY_ENGINE = 57670
const SECONDARY_LOAD = 57671
const SECONDARY_UNLOAD = 57672
const SKIP = 57673
const SRID = 57674
const THREAD_PRIORITY = 57675
const TIES = 57676
const UNBOUNDED = 57677
const VCPU = 57678
const VISIBLE = 57679

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 38,
	33, 299,
	130, 299,
	142, 299,
	167, 313,
	168, 313,
	-2, 301,
	-1, 62,
	37, 337,
	-2, 345,
	-1, 318,
	37, 338,
	-2, 350,
	-1, 319,
	37, 339,
	-2, 351,
	-1, 334,
	118, 669,
	-2, 665,
	-1, 335,
	118, 670,
	-2, 666,
	-1, 406,
	86, 920,
	-2, 66,
	-1, 407,
	86, 837,
	-2, 67,
	-1, 412,
	86, 805,
	-2, 631,
	-1, 414,
	86, 868,
	-2, 633,
	-1, 719,
	1, 375,
	5, 375,
	12, 375,
	13, 375,
	14, 375,
	15, 375,
	17, 375,
	19, 375,
	30, 375,
	31, 375,
	44, 375,
	45, 375,
	46, 375,
	47, 375,
	48, 375,
	50, 375,
	51, 375,
	54, 375,
	55, 375,
	57, 375,
	58, 375,
	355, 375,
	-2, 393,
	-1, 722,
	55, 48,
	57, 48,
	-2, 52,
	-1, 878,
	118, 672,
	-2, 668,
	-1, 1113,
	5, 34,
	-2, 461,
	-1, 1144,
	5, 33,
	-2, 604,
	-1, 1391,
	5, 34,
	-2, 605,
	-1, 1444,
	5, 33,
	-2, 607,
	-1, 1519,
	5, 34,
	-2, 608,
}

const yyPrivate = 57344

const yyLast = 16612

var yyAct = [...]int{

	334, 1553, 1351, 1543, 1424, 1509, 339, 1147, 1457, 1240,
	1411, 994, 1165, 1325, 354, 1148, 1292, 674, 967, 1293,
	1289, 1037, 577, 990, 58, 1191, 993, 367, 1091, 1003,
	566, 673, 3, 81, 1023, 1305, 903, 271, 1105, 291,
	271, 1299, 1264, 910, 1217, 840, 821, 298, 1208, 969,
	1007, 735, 307, 933, 954, 880, 716, 320, 614, 601,
	535, 1033, 607, 715, 965, 734, 1017, 400, 271, 81,
	624, 405, 536, 271, 337, 271, 57, 689, 947, 721,
	397, 724, 1546, 1530, 306, 411, 688, 1541, 1517, 1538,
	1352, 408, 1529, 299, 300, 301, 302, 555, 1516, 305,
	1056, 379, 62, 385, 386, 383, 384, 382, 381, 380,
	1281, 1383, 540, 736, 1055, 737, 269, 387, 388, 1319,
	83, 84, 85, 326, 1320, 1321, 985, 986, 341, 64,
	65, 66, 67, 68, 984, 267, 263, 264, 265, 595,
	332, 1265, 304, 303, 83, 84, 85, 399, 1199, 1016,
	1414, 1024, 537, 1242, 539, 1054, 1483, 637, 636, 646,
	647, 639, 640, 641, 642, 643, 644, 645, 638, 259,
	1179, 648, 257, 1178, 261, 590, 1180, 1374, 1372, 591,
	588, 589, 1267, 83, 84, 85, 297, 810, 583, 584,
	572, 593, 574, 809, 1540, 1244, 807, 1537, 594, 1510,
	1502, 1239, 83, 84, 85, 948, 1243, 1051, 1048, 1049,
	580, 1047, 1008, 1561, 556, 1227, 1269, 1458, 1273, 261,
	1268, 542, 1266, 1245, 571, 573, 814, 1271, 811, 808,
	798, 1315, 1460, 1466, 1010, 1314, 1270, 1166, 1168, 1313,
	538, 545, 1557, 274, 1058, 1061, 1223, 1224, 1225, 1272,
	1274, 262, 660, 661, 1068, 275, 266, 1067, 271, 547,
	548, 991, 1491, 271, 278, 557, 1010, 1394, 260, 271,
	1250, 1175, 285, 1132, 1122, 271, 564, 1236, 552, 570,
	81, 1053, 1099, 1238, 81, 1119, 81, 851, 730, 628,
	258, 562, 81, 648, 980, 848, 845, 83, 84, 85,
	71, 638, 1459, 1052, 648, 621, 283, 579, 623, 1500,
	569, 575, 290, 1475, 1283, 1515, 1303, 1226, 1167, 581,
	1024, 623, 1231, 1228, 1219, 1229, 1222, 841, 1218, 81,
	1484, 738, 1220, 1221, 835, 609, 1009, 546, 72, 276,
	1467, 1465, 554, 1057, 610, 549, 1230, 550, 561, 568,
	551, 597, 598, 934, 563, 1129, 1555, 934, 1059, 1556,
	800, 1554, 1197, 558, 559, 560, 287, 279, 1009, 288,
	289, 295, 1505, 618, 887, 280, 282, 292, 615, 277,
	294, 293, 660, 661, 1521, 1237, 1420, 1235, 885, 886,
	884, 913, 1010, 660, 661, 271, 271, 271, 641, 642,
	643, 644, 645, 638, 81, 1013, 648, 1096, 1097, 1098,
	81, 1014, 842, 83, 84, 85, 611, 622, 621, 836,
	83, 84, 85, 83, 84, 85, 408, 541, 1523, 854,
	855, 567, 1419, 1380, 623, 1562, 637, 636, 646, 647,
	639, 640, 641, 642, 643, 644, 645, 638, 1212, 1211,
	648, 870, 872, 873, 1200, 534, 1501, 871, 692, 694,
	714, 698, 700, 1438, 703, 658, 1338, 691, 693, 695,
	697, 699, 701, 702, 713, 733, 722, 723, 1563, 1417,
	728, 622, 621, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 1106, 1009, 55, 1209, 1078, 623, 1006,
	1004, 826, 1005, 1463, 1539, 543, 544, 883, 23, 1002,
	1008, 637, 636, 646, 647, 639, 640, 641, 642, 643,
	644, 645, 638, 850, 719, 648, 639, 640, 641, 642,
	643, 644, 645, 638, 1118, 271, 648, 1525, 600, 796,
	81, 600, 799, 1472, 801, 271, 271, 81, 81, 81,
	1471, 622, 621, 271, 1334, 1117, 271, 1116, 1285, 271,
	819, 820, 849, 271, 256, 81, 1463, 1513, 623, 311,
	81, 81, 81, 271, 81, 81, 622, 621, 83, 84,
	85, 622, 621, 1011, 81, 81, 1463, 600, 622, 621,
	83, 84, 85, 623, 905, 582, 825, 585, 623, 1302,
	83, 84, 85, 596, 1182, 623, 357, 356, 359, 360,
	361, 362, 1092, 81, 746, 358, 363, 1463, 1492, 1389,
	271, 1463, 1462, 726, 802, 803, 81, 1409, 1408, 915,
	394, 395, 812, 1396, 600, 399, 815, 600, 818, 1393,
	600, 1344, 1343, 1340, 1341, 1340, 1339, 726, 823, 904,
	1474, 877, 831, 863, 600, 951, 600, 951, 906, 881,
	915, 600, 856, 745, 744, 1092, 25, 727, 25, 729,
	59, 1290, 81, 865, 1302, 876, 637, 636, 646, 647,
	639, 640, 641, 642, 643, 644, 645, 638, 922, 925,
	648, 727, 1142, 725, 935, 1443, 874, 1143, 974, 866,
	725, 950, 1342, 864, 938, 81, 81, 25, 917, 613,
	1302, 951, 863, 271, 878, 1183, 55, 55, 55, 1241,
	983, 271, 271, 1135, 1134, 271, 271, 863, 951, 271,
	271, 271, 81, 725, 852, 907, 908, 956, 959, 960,
	961, 957, 813, 958, 962, 81, 536, 1306, 1307, 863,
	1531, 943, 944, 731, 408, 1426, 1018, 55, 1401, 1038,
	882, 1330, 956, 959, 960, 961, 957, 995, 958, 962,
	313, 879, 1186, 1034, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 975,
	1306, 1307, 949, 977, 1025, 1026, 1027, 978, 982, 271,
	81, 973, 81, 981, 1060, 976, 998, 1029, 271, 271,
	271, 271, 271, 1028, 271, 271, 823, 1039, 271, 81,
	55, 1019, 1020, 1021, 1022, 1427, 1041, 1548, 1544, 1332,
	1309, 939, 1290, 1213, 846, 271, 817, 1030, 1031, 1032,
	271, 1159, 271, 271, 1312, 1157, 1160, 271, 321, 719,
	1158, 797, 1311, 719, 1035, 1036, 1156, 719, 804, 805,
	806, 322, 1155, 1535, 1161, 271, 960, 961, 616, 617,
	324, 1075, 323, 335, 877, 1528, 824, 1249, 1042, 321,
	1080, 828, 829, 830, 612, 832, 833, 1062, 1063, 1064,
	1065, 1066, 322, 1069, 1070, 837, 838, 1071, 1083, 318,
	319, 324, 1533, 323, 1090, 1089, 82, 930, 1204, 602,
	272, 743, 881, 272, 1073, 1084, 1085, 565, 1196, 1074,
	931, 603, 1093, 1095, 1507, 1506, 1079, 1441, 1194, 1094,
	1188, 1387, 1422, 1044, 816, 964, 1088, 878, 314, 315,
	1101, 272, 82, 308, 1087, 1363, 272, 309, 272, 59,
	1362, 1253, 271, 271, 271, 271, 271, 1149, 1092, 592,
	1550, 1549, 1550, 1123, 271, 1120, 839, 271, 619, 63,
	1488, 271, 1415, 847, 61, 271, 56, 1, 1542, 1144,
	1353, 1423, 1050, 1508, 1456, 1324, 1128, 1001, 992, 70,
	533, 69, 1181, 719, 81, 1499, 834, 578, 917, 1000,
	999, 1464, 1171, 1187, 1173, 1184, 1174, 1192, 1192, 1151,
	1152, 599, 1154, 882, 1413, 1150, 995, 1162, 1153, 1012,
	1170, 1198, 1015, 1331, 1195, 1504, 1102, 1103, 1104, 751,
	749, 750, 748, 1193, 753, 1176, 752, 747, 284, 1172,
	403, 963, 81, 81, 739, 1040, 620, 1203, 73, 1205,
	1206, 1207, 1234, 1233, 1201, 1202, 1189, 1190, 636, 646,
	647, 639, 640, 641, 642, 643, 644, 645, 638, 918,
	919, 648, 81, 924, 927, 928, 1046, 844, 1210, 281,
	719, 719, 719, 719, 719, 586, 587, 271, 286, 656,
	1086, 1177, 409, 1232, 1216, 719, 402, 1297, 942, 853,
	81, 945, 946, 719, 606, 1361, 1252, 1127, 685, 932,
	340, 1043, 869, 1045, 355, 352, 353, 858, 904, 1247,
	1248, 1141, 1256, 630, 338, 330, 718, 711, 955, 953,
	1072, 272, 952, 398, 1308, 1304, 272, 717, 862, 317,
	1382, 1258, 272, 1482, 1257, 316, 81, 81, 272, 1149,
	1291, 1282, 929, 82, 1275, 1286, 27, 82, 60, 82,
	325, 1276, 20, 19, 18, 82, 1251, 21, 17, 16,
	81, 1294, 15, 553, 31, 22, 1301, 1296, 14, 1083,
	328, 13, 12, 11, 81, 10, 81, 81, 9, 1310,
	1192, 1192, 8, 7, 6, 5, 1317, 1323, 4, 310,
	24, 1318, 82, 2, 0, 1337, 995, 0, 995, 0,
	1322, 1316, 0, 0, 271, 1328, 1329, 1327, 878, 0,
	0, 0, 0, 0, 0, 1335, 1336, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	81, 0, 1354, 81, 81, 81, 271, 1260, 1261, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 1278, 0, 1279, 1280, 1346, 0, 0, 272, 272,
	272, 0, 0, 1256, 0, 1287, 1288, 82, 1359, 1360,
	1347, 0, 1349, 82, 0, 0, 0, 0, 0, 0,
	0, 1370, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 1111, 0, 0, 0, 0, 1149,
	0, 0, 1388, 1348, 0, 857, 0, 1386, 1398, 0,
	0, 1126, 0, 81, 0, 1358, 1397, 0, 0, 0,
	0, 81, 1367, 1368, 1184, 1369, 0, 1333, 1371, 0,
	1373, 0, 0, 0, 0, 995, 81, 0, 0, 0,
	0, 0, 0, 81, 1215, 0, 0, 637, 636, 646,
	647, 639, 640, 641, 642, 643, 644, 645, 638, 1431,
	1407, 648, 0, 0, 1416, 1425, 1418, 0, 914, 916,
	0, 1429, 0, 1246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1410, 81, 81, 0, 81, 0, 0,
	1365, 0, 81, 1430, 81, 81, 81, 271, 272, 1442,
	81, 0, 1450, 82, 1451, 1453, 1454, 1294, 272, 272,
	82, 82, 82, 1461, 1444, 1455, 272, 81, 271, 272,
	1468, 0, 272, 0, 0, 1437, 272, 1476, 82, 0,
	1469, 0, 1470, 82, 82, 82, 272, 82, 82, 0,
	1449, 0, 0, 0, 0, 0, 0, 82, 82, 1498,
	1489, 0, 0, 0, 81, 1497, 0, 0, 1496, 0,
	0, 1294, 0, 0, 0, 81, 81, 1490, 0, 1511,
	0, 0, 0, 0, 0, 0, 82, 1512, 1379, 604,
	608, 0, 81, 272, 0, 1149, 1518, 1425, 995, 82,
	0, 0, 0, 271, 368, 52, 0, 1477, 0, 0,
	0, 81, 629, 0, 0, 0, 0, 0, 1432, 1433,
	1434, 1435, 1436, 1527, 0, 0, 1439, 1440, 0, 0,
	1534, 1532, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1536, 0, 0, 82, 1547, 0, 0, 675,
	0, 0, 1558, 0, 0, 0, 0, 52, 686, 0,
	0, 0, 0, 0, 0, 312, 637, 636, 646, 647,
	639, 640, 641, 642, 643, 644, 645, 638, 82, 82,
	648, 0, 1522, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 272, 272, 0, 0, 272, 272,
	0, 0, 272, 272, 272, 82, 0, 0, 0, 0,
	0, 1108, 0, 0, 0, 1109, 0, 0, 82, 0,
	0, 0, 1113, 1114, 1115, 0, 0, 0, 0, 1121,
	0, 0, 1124, 1125, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 1378, 1133, 0, 0, 1136, 1137, 1138,
	1139, 1140, 0, 1385, 0, 0, 0, 1421, 0, 646,
	647, 639, 640, 641, 642, 643, 644, 645, 638, 0,
	1164, 648, 272, 82, 0, 82, 0, 0, 0, 0,
	0, 272, 272, 272, 272, 272, 1551, 272, 272, 0,
	0, 272, 82, 637, 636, 646, 647, 639, 640, 641,
	642, 643, 644, 645, 638, 0, 0, 648, 272, 0,
	0, 0, 0, 272, 0, 272, 272, 0, 0, 0,
	272, 637, 636, 646, 647, 639, 640, 641, 642, 643,
	644, 645, 638, 0, 632, 648, 635, 0, 272, 0,
	0, 0, 649, 650, 651, 652, 653, 654, 655, 827,
	633, 634, 631, 637, 636, 646, 647, 639, 640, 641,
	642, 643, 644, 645, 638, 0, 0, 648, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 576, 0, 0, 0, 576, 0,
	576, 0, 0, 0, 0, 0, 576, 0, 0, 0,
	0, 0, 867, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1262, 1263, 52, 0, 0,
	0, 0, 0, 0, 0, 272, 272, 272, 272, 272,
	0, 0, 0, 0, 0, 0, 0, 272, 657, 0,
	272, 659, 1377, 0, 272, 0, 0, 0, 272, 366,
	0, 0, 0, 0, 0, 0, 0, 675, 0, 0,
	920, 921, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 672, 0, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 80, 687, 690, 690, 690, 696, 690, 690,
	696, 690, 704, 705, 706, 707, 708, 709, 710, 0,
	720, 0, 0, 637, 636, 646, 647, 639, 640, 641,
	642, 643, 644, 645, 638, 82, 82, 648, 410, 989,
	637, 636, 646, 647, 639, 640, 641, 642, 643, 644,
	645, 638, 0, 0, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 1364, 1259, 0, 0, 0, 0, 0, 1366,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	1375, 1376, 0, 637, 636, 646, 647, 639, 640, 641,
	642, 643, 644, 645, 638, 0, 0, 648, 0, 0,
	1390, 1391, 1392, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	82, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 0, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 576, 0, 0, 0, 0, 0,
	0, 576, 576, 576, 0, 0, 0, 82, 0, 82,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 576, 576, 576, 0, 576, 576,
	0, 0, 0, 0, 0, 0, 0, 272, 576, 576,
	0, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 1452, 0,
	0, 0, 0, 82, 0, 1130, 82, 82, 82, 272,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 410,
	0, 0, 0, 410, 0, 410, 0, 1478, 1479, 1480,
	1481, 410, 1485, 0, 1486, 1487, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 1494, 1495,
	0, 0, 0, 0, 52, 0, 637, 636, 646, 647,
	639, 640, 641, 642, 643, 644, 645, 638, 626, 0,
	648, 676, 0, 0, 0, 0, 0, 1514, 0, 0,
	0, 0, 0, 0, 0, 1519, 82, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 1524, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 966, 82, 0, 0, 720,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 0, 1559, 1560, 0, 740,
	0, 0, 25, 26, 53, 28, 29, 82, 82, 0,
	82, 0, 0, 1254, 0, 82, 0, 82, 82, 82,
	272, 44, 0, 82, 0, 0, 30, 49, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 272, 0, 0, 576, 0, 576, 0, 39, 0,
	1284, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 720,
	0, 0, 0, 0, 0, 0, 272, 32, 33, 35,
	34, 37, 1100, 51, 82, 0, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 410, 410, 410, 0,
	0, 0, 0, 0, 0, 82, 38, 45, 46, 0,
	0, 47, 48, 36, 410, 0, 0, 0, 0, 410,
	410, 410, 0, 410, 410, 0, 0, 40, 41, 0,
	42, 43, 0, 410, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1145, 1146, 0, 0, 720, 720, 720, 720,
	720, 0, 859, 0, 0, 0, 1384, 0, 0, 0,
	0, 966, 0, 1169, 0, 626, 675, 0, 410, 720,
	0, 0, 0, 0, 1399, 0, 0, 1400, 0, 0,
	1402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 1428, 675, 0, 0, 576, 0, 0,
	0, 0, 0, 0, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 576, 0, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 0, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 410,
	52, 410, 0, 0, 0, 329, 769, 0, 401, 0,
	0, 0, 0, 270, 0, 270, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 782,
	785, 786, 787, 788, 789, 790, 0, 791, 792, 793,
	794, 795, 770, 771, 772, 773, 754, 755, 783, 0,
	757, 410, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 774, 775, 776, 777, 778, 779, 780, 781,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 784, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1403, 1404,
	1405, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 0, 0, 0, 270, 0,
	576, 0, 0, 270, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1214, 410, 0, 1295, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 410, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 410,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 270, 270, 270, 0, 0,
	0, 0, 936, 0, 0, 1298, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 410, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 1545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	0, 0, 1355, 1356, 1357, 0, 0, 0, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 270, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 270, 0, 0, 270,
	0, 0, 936, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 1447, 0, 1448, 0, 0, 0,
	0, 1412, 0, 1412, 1412, 1412, 0, 0, 0, 1326,
	0, 0, 0, 329, 0, 0, 0, 0, 329, 329,
	0, 0, 329, 329, 329, 0, 1412, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 329, 329,
	329, 329, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 270, 971, 1503, 0, 270, 270, 0, 0, 270,
	979, 822, 0, 0, 410, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 270,
	270, 270, 270, 0, 270, 270, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	270, 0, 1076, 1077, 0, 0, 0, 270, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 270, 270, 270, 270, 270, 0, 0, 0,
	0, 0, 0, 0, 1163, 0, 0, 270, 0, 0,
	0, 971, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 971, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 270, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	996, 997, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 1185, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 937,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 270, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	996, 997, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 55, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	1255, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	980, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	875, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 413, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 414, 412, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	732, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 413, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 414, 412, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 520, 508, 0, 465, 523, 438, 455, 531,
	456, 459, 496, 423, 478, 171, 453, 0, 442, 418,
	449, 419, 440, 467, 115, 471, 437, 510, 481, 522,
	143, 443, 529, 145, 487, 0, 217, 159, 0, 0,
	0, 469, 512, 476, 505, 464, 497, 428, 486, 524,
	454, 494, 525, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 491,
	519, 451, 493, 495, 417, 488, 0, 421, 424, 530,
	515, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	468, 477, 502, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 485, 0, 0, 0, 425, 422,
	0, 0, 0, 0, 466, 0, 0, 0, 427, 0,
	445, 503, 0, 415, 124, 507, 514, 463, 273, 518,
	461, 460, 521, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 511, 441, 450,
	109, 448, 199, 178, 237, 484, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	404, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 413, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 420, 0, 218, 240, 255,
	103, 436, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 414, 412, 407, 406, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 432, 435, 430, 431, 479,
	480, 526, 527, 528, 504, 426, 0, 433, 434, 0,
	509, 516, 517, 483, 86, 95, 144, 252, 192, 120,
	241, 416, 429, 113, 439, 0, 0, 452, 457, 458,
	470, 472, 473, 474, 475, 482, 489, 490, 492, 498,
	499, 500, 501, 506, 513, 532, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 911, 0, 336, 0, 0,
	0, 115, 0, 333, 0, 0, 0, 143, 912, 378,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 83, 84, 85, 357, 356, 359, 360,
	361, 362, 0, 0, 105, 358, 363, 364, 365, 0,
	0, 0, 331, 350, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 348, 327, 0, 0,
	0, 392, 0, 349, 0, 0, 342, 343, 345, 344,
	346, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 391, 0, 0, 273, 0, 0, 389, 0,
	190, 0, 221, 127, 142, 101, 139, 87, 97, 0,
	126, 168, 197, 201, 0, 0, 0, 109, 0, 199,
	178, 237, 0, 180, 198, 146, 227, 191, 236, 246,
	247, 224, 244, 251, 214, 90, 223, 235, 106, 209,
	92, 233, 220, 157, 136, 137, 91, 0, 195, 114,
	122, 111, 170, 230, 231, 110, 254, 98, 243, 94,
	99, 242, 164, 226, 234, 158, 151, 93, 232, 156,
	150, 141, 118, 129, 188, 148, 189, 130, 161, 160,
	162, 0, 0, 0, 218, 240, 255, 103, 0, 225,
	249, 250, 0, 0, 104, 123, 117, 187, 121, 163,
	100, 132, 215, 140, 147, 194, 253, 177, 200, 107,
	239, 216, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 393, 371, 372, 373, 374, 376, 0, 387, 388,
	375, 86, 95, 144, 252, 192, 120, 241, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 96, 102, 108, 112, 116,
	119, 125, 128, 131, 133, 134, 135, 138, 149, 152,
	153, 154, 155, 165, 166, 167, 169, 172, 173, 174,
	175, 176, 179, 181, 182, 183, 184, 185, 186, 193,
	196, 202, 203, 204, 205, 206, 207, 208, 210, 211,
	212, 213, 219, 222, 228, 229, 238, 245, 248, 171,
	0, 0, 0, 0, 336, 0, 0, 0, 115, 0,
	333, 0, 0, 0, 143, 0, 378, 145, 0, 0,
	217, 159, 0, 0, 0, 0, 0, 369, 370, 0,
	0, 0, 0, 0, 0, 987, 0, 55, 0, 0,
	83, 84, 85, 357, 356, 359, 360, 361, 362, 0,
	0, 105, 358, 363, 364, 365, 988, 0, 0, 331,
	350, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 348, 0, 0, 0, 0, 392, 0,
	349, 0, 0, 342, 343, 345, 344, 346, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 391,
	0, 0, 273, 0, 0, 389, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 393, 371,
	372, 373, 374, 376, 0, 387, 388, 375, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 336, 0, 0, 0, 115, 0, 333, 0, 0,
	0, 143, 0, 378, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 600, 83, 84, 85,
	357, 356, 359, 360, 361, 362, 0, 0, 105, 358,
	363, 364, 365, 0, 0, 0, 331, 350, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 392, 0, 349, 0, 0,
	342, 343, 345, 344, 346, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 391, 0, 0, 273,
	0, 0, 389, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 379, 390, 385, 386,
	383, 384, 382, 381, 380, 393, 371, 372, 373, 374,
	376, 0, 387, 388, 375, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 336, 0,
	0, 0, 115, 0, 333, 0, 0, 0, 143, 0,
	378, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 83, 84, 85, 357, 356, 359,
	360, 361, 362, 0, 0, 105, 358, 363, 364, 365,
	0, 0, 0, 331, 350, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 348, 327, 0,
	0, 0, 392, 0, 349, 0, 0, 342, 343, 345,
	344, 346, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 391, 0, 0, 273, 0, 0, 389,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 379, 390, 385, 386, 383, 384, 382,
	381, 380, 393, 371, 372, 373, 374, 376, 0, 387,
	388, 375, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 336, 0, 0, 0, 115,
	0, 333, 0, 0, 0, 143, 0, 378, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 83, 84, 85, 357, 926, 359, 360, 361, 362,
	0, 0, 105, 358, 363, 364, 365, 0, 0, 0,
	331, 350, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 348, 327, 0, 0, 0, 392,
	0, 349, 0, 0, 342, 343, 345, 344, 346, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	391, 0, 0, 273, 0, 0, 389, 0, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 0, 0, 0, 109, 0, 199, 178, 237,
	0, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	0, 0, 218, 240, 255, 103, 0, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 393,
	371, 372, 373, 374, 376, 0, 387, 388, 375, 86,
	95, 144, 252, 192, 120, 241, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 171, 0, 0,
	0, 0, 336, 0, 0, 0, 115, 0, 333, 0,
	0, 0, 143, 0, 378, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 83, 84,
	85, 357, 923, 359, 360, 361, 362, 0, 0, 105,
	358, 363, 364, 365, 0, 0, 0, 331, 350, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 327, 0, 0, 0, 392, 0, 349, 0,
	0, 342, 343, 345, 344, 346, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 391, 0, 0,
	273, 0, 0, 389, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 379, 390, 385,
	386, 383, 384, 382, 381, 380, 393, 371, 372, 373,
	374, 376, 0, 387, 388, 375, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	0, 336, 0, 0, 0, 115, 0, 333, 0, 0,
	0, 143, 0, 378, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 83, 84, 85,
	357, 356, 359, 360, 361, 362, 0, 0, 105, 358,
	363, 364, 365, 0, 0, 0, 331, 350, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 392, 0, 349, 0, 0,
	342, 343, 345, 344, 346, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 391, 0, 0, 273,
	0, 0, 389, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 379, 390, 385, 386,
	383, 384, 382, 381, 380, 393, 371, 372, 373, 374,
	376, 0, 387, 388, 375, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 336, 0,
	0, 0, 115, 0, 333, 0, 0, 0, 143, 0,
	378, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 83, 84, 85, 357, 356, 359,
	360, 361, 362, 0, 0, 105, 358, 363, 364, 365,
	0, 0, 0, 331, 350, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 348, 0, 0,
	0, 0, 392, 0, 349, 0, 0, 342, 343, 345,
	344, 346, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 391, 0, 0, 273, 0, 0, 389,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 379, 390, 385, 386, 383, 384, 382,
	381, 380, 393, 371, 372, 373, 374, 376, 0, 387,
	388, 375, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 378, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 83, 84, 85, 357, 356, 359, 360, 361, 362,
	0, 0, 105, 358, 363, 364, 365, 0, 0, 0,
	0, 350, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 348, 0, 0, 0, 0, 392,
	0, 349, 0, 0, 342, 343, 345, 344, 346, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	391, 0, 0, 273, 0, 0, 389, 0, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 0, 0, 0, 109, 0, 199, 178, 237,
	1552, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	0, 0, 218, 240, 255, 103, 0, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 393,
	371, 372, 373, 374, 376, 0, 387, 388, 375, 86,
	95, 144, 252, 192, 120, 241, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 143, 0, 378, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 600, 83, 84,
	85, 357, 356, 359, 360, 361, 362, 0, 0, 105,
	358, 363, 364, 365, 0, 0, 0, 0, 350, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 0, 0, 0, 0, 392, 0, 349, 0,
	0, 342, 343, 345, 344, 346, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 391, 0, 0,
	273, 0, 0, 389, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 379, 390, 385,
	386, 383, 384, 382, 381, 380, 393, 371, 372, 373,
	374, 376, 0, 387, 388, 375, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 143,
	0, 378, 145, 0, 0, 217, 159, 0, 0, 0,
	0, 0, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 83, 84, 85, 357, 356,
	359, 360, 361, 362, 0, 0, 105, 358, 363, 364,
	365, 0, 0, 0, 0, 350, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 348, 0,
	0, 0, 0, 392, 0, 349, 0, 0, 342, 343,
	345, 344, 346, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 391, 0, 0, 273, 0, 0,
	389, 0, 190, 0, 221, 127, 142, 101, 139, 87,
	97, 0, 126, 168, 197, 201, 0, 0, 0, 109,
	0, 199, 178, 237, 0, 180, 198, 146, 227, 191,
	236, 246, 247, 224, 244, 251, 214, 90, 223, 235,
	106, 209, 92, 233, 220, 157, 136, 137, 91, 0,
	195, 114, 122, 111, 170, 230, 231, 110, 254, 98,
	243, 94, 99, 242, 164, 226, 234, 158, 151, 93,
	232, 156, 150, 141, 118, 129, 188, 148, 189, 130,
	161, 160, 162, 0, 0, 0, 218, 240, 255, 103,
	0, 225, 249, 250, 0, 0, 104, 123, 117, 187,
	121, 163, 100, 132, 215, 140, 147, 194, 253, 177,
	200, 107, 239, 216, 379, 390, 385, 386, 383, 384,
	382, 381, 380, 393, 371, 372, 373, 374, 376, 0,
	387, 388, 375, 86, 95, 144, 252, 192, 120, 241,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 96, 102, 108,
	112, 116, 119, 125, 128, 131, 133, 134, 135, 138,
	149, 152, 153, 154, 155, 165, 166, 167, 169, 172,
	173, 174, 175, 176, 179, 181, 182, 183, 184, 185,
	186, 193, 196, 202, 203, 204, 205, 206, 207, 208,
	210, 211, 212, 213, 219, 222, 228, 229, 238, 245,
	248, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 143, 0, 0, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 636, 646, 647, 639, 640, 641, 642, 643, 644,
	645, 638, 0, 0, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 625, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 627, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 622, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 77, 78, 0, 74, 0,
	0, 0, 79, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 970, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 143, 0, 0,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 972, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 273, 0, 0, 0, 0,
	190, 0, 221, 127, 142, 101, 139, 87, 97, 0,
	126, 168, 197, 201, 0, 0, 0, 109, 0, 199,
	178, 237, 0, 180, 198, 146, 227, 191, 236, 246,
	247, 224, 244, 251, 214, 90, 223, 235, 106, 209,
	92, 233, 220, 157, 136, 137, 91, 0, 195, 114,
	122, 111, 170, 230, 231, 110, 254, 98, 243, 94,
	99, 242, 164, 226, 234, 158, 151, 93, 232, 156,
	150, 141, 118, 129, 188, 148, 189, 130, 161, 160,
	162, 0, 0, 0, 218, 240, 255, 103, 0, 225,
	249, 250, 0, 0, 104, 123, 117, 187, 121, 163,
	100, 132, 215, 140, 147, 194, 253, 177, 200, 107,
	239, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 95, 144, 252, 192, 120, 241, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 96, 102, 108, 112, 116,
	119, 125, 128, 131, 133, 134, 135, 138, 149, 152,
	153, 154, 155, 165, 166, 167, 169, 172, 173, 174,
	175, 176, 179, 181, 182, 183, 184, 185, 186, 193,
	196, 202, 203, 204, 205, 206, 207, 208, 210, 211,
	212, 213, 219, 222, 228, 229, 238, 245, 248, 25,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 143, 0, 0, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 970, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 972, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 968,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 860, 0, 0, 861, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 742, 0, 0, 0, 143, 0, 0,
	145, 0, 0, 217, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 85, 0, 741, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 273, 0, 0, 0, 0,
	190, 0, 221, 127, 142, 101, 139, 87, 97, 0,
	126, 168, 197, 201, 0, 0, 0, 109, 0, 199,
	178, 237, 0, 180, 198, 146, 227, 191, 236, 246,
	247, 224, 244, 251, 214, 90, 223, 235, 106, 209,
	92, 233, 220, 157, 136, 137, 91, 0, 195, 114,
	122, 111, 170, 230, 231, 110, 254, 98, 243, 94,
	99, 242, 164, 226, 234, 158, 151, 93, 232, 156,
	150, 141, 118, 129, 188, 148, 189, 130, 161, 160,
	162, 0, 0, 0, 218, 240, 255, 103, 0, 225,
	249, 250, 0, 0, 104, 123, 117, 187, 121, 163,
	100, 132, 215, 140, 147, 194, 253, 177, 200, 107,
	239, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 95, 144, 252, 192, 120, 241, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 96, 102, 108, 112, 116,
	119, 125, 128, 131, 133, 134, 135, 138, 149, 152,
	153, 154, 155, 165, 166, 167, 169, 172, 173, 174,
	175, 176, 179, 181, 182, 183, 184, 185, 186, 193,
	196, 202, 203, 204, 205, 206, 207, 208, 210, 211,
	212, 213, 219, 222, 228, 229, 238, 245, 248, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 143, 0, 0, 145, 0, 0,
	217, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 273, 0, 0, 0, 0, 190, 0, 221,
	127, 142, 101, 139, 87, 97, 0, 126, 168, 197,
	201, 0, 0, 0, 109, 0, 199, 178, 237, 0,
	180, 198, 146, 227, 191, 236, 246, 247, 224, 244,
	251, 214, 90, 223, 235, 106, 209, 92, 233, 220,
	157, 136, 137, 91, 0, 195, 114, 122, 111, 170,
	230, 231, 110, 254, 98, 243, 94, 99, 242, 164,
	226, 234, 158, 151, 93, 232, 156, 150, 141, 118,
	129, 188, 148, 189, 130, 161, 160, 162, 0, 0,
	0, 218, 240, 255, 103, 0, 225, 249, 250, 0,
	0, 104, 123, 117, 187, 121, 163, 100, 132, 215,
	140, 147, 194, 253, 177, 200, 107, 239, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 95,
	144, 252, 192, 120, 241, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 96, 102, 108, 112, 116, 119, 125, 128,
	131, 133, 134, 135, 138, 149, 152, 153, 154, 155,
	165, 166, 167, 169, 172, 173, 174, 175, 176, 179,
	181, 182, 183, 184, 185, 186, 193, 196, 202, 203,
	204, 205, 206, 207, 208, 210, 211, 212, 213, 219,
	222, 228, 229, 238, 245, 248, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 143, 0, 0, 145, 0, 0, 217, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 273,
	0, 0, 0, 0, 190, 0, 221, 127, 142, 101,
	139, 87, 97, 0, 126, 168, 197, 201, 0, 0,
	0, 109, 0, 199, 178, 237, 0, 180, 198, 146,
	227, 191, 236, 246, 247, 224, 244, 251, 214, 90,
	223, 235, 106, 209, 92, 233, 220, 157, 136, 137,
	91, 0, 195, 114, 122, 111, 170, 230, 231, 110,
	254, 98, 243, 94, 99, 242, 164, 226, 234, 158,
	151, 93, 232, 156, 150, 141, 118, 129, 188, 148,
	189, 130, 161, 160, 162, 0, 0, 0, 218, 240,
	255, 103, 0, 225, 249, 250, 0, 0, 104, 123,
	117, 187, 121, 163, 100, 132, 215, 140, 147, 194,
	253, 177, 200, 107, 239, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 95, 144, 252, 192,
	120, 241, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 96,
	102, 108, 112, 116, 119, 125, 128, 131, 133, 134,
	135, 138, 149, 152, 153, 154, 155, 165, 166, 167,
	169, 172, 173, 174, 175, 176, 179, 181, 182, 183,
	184, 185, 186, 193, 196, 202, 203, 204, 205, 206,
	207, 208, 210, 211, 212, 213, 219, 222, 228, 229,
	238, 245, 248, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 143, 0,
	0, 145, 0, 0, 217, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 85, 0, 972, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 273, 0, 0, 0,
	0, 190, 0, 221, 127, 142, 101, 139, 87, 97,
	0, 126, 168, 197, 201, 0, 0, 0, 109, 0,
	199, 178, 237, 0, 180, 198, 146, 227, 191, 236,
	246, 247, 224, 244, 251, 214, 90, 223, 235, 106,
	209, 92, 233, 220, 157, 136, 137, 91, 0, 195,
	114, 122, 111, 170, 230, 231, 110, 254, 98, 243,
	94, 99, 242, 164, 226, 234, 158, 151, 93, 232,
	156, 150, 141, 118, 129, 188, 148, 189, 130, 161,
	160, 162, 0, 0, 0, 218, 240, 255, 103, 0,
	225, 249, 250, 0, 0, 104, 123, 117, 187, 121,
	163, 100, 132, 215, 140, 147, 194, 253, 177, 200,
	107, 239, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 95, 144, 252, 192, 120, 241, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 96, 102, 108, 112,
	116, 119, 125, 128, 131, 133, 134, 135, 138, 149,
	152, 153, 154, 155, 165, 166, 167, 169, 172, 173,
	174, 175, 176, 179, 181, 182, 183, 184, 185, 186,
	193, 196, 202, 203, 204, 205, 206, 207, 208, 210,
	211, 212, 213, 219, 222, 228, 229, 238, 245, 248,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 143, 0, 0, 145, 0,
	0, 217, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 85, 0, 627, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 273, 0, 0, 0, 0, 190, 0,
	221, 127, 142, 101, 139, 87, 97, 0, 126, 168,
	197, 201, 0, 0, 0, 109, 0, 199, 178, 237,
	0, 180, 198, 146, 227, 191, 236, 246, 247, 224,
	244, 251, 214, 90, 223, 235, 106, 209, 92, 233,
	220, 157, 136, 137, 91, 0, 195, 114, 122, 111,
	170, 230, 231, 110, 254, 98, 243, 94, 99, 242,
	164, 226, 234, 158, 151, 93, 232, 156, 150, 141,
	118, 129, 188, 148, 189, 130, 161, 160, 162, 0,
	0, 0, 218, 240, 255, 103, 0, 225, 249, 250,
	0, 0, 104, 123, 117, 187, 121, 163, 100, 132,
	215, 140, 147, 194, 253, 177, 200, 107, 239, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	95, 144, 252, 192, 120, 241, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 96, 102, 108, 112, 116, 119, 125,
	128, 131, 133, 134, 135, 138, 149, 152, 153, 154,
	155, 165, 166, 167, 169, 172, 173, 174, 175, 176,
	179, 181, 182, 183, 184, 185, 186, 193, 196, 202,
	203, 204, 205, 206, 207, 208, 210, 211, 212, 213,
	219, 222, 228, 229, 238, 245, 248, 171, 0, 0,
	0, 0, 0, 0, 0, 712, 115, 0, 0, 0,
	0, 0, 143, 0, 0, 145, 0, 0, 217, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	273, 0, 0, 0, 0, 190, 0, 221, 127, 142,
	101, 139, 87, 97, 0, 126, 168, 197, 201, 0,
	0, 0, 109, 0, 199, 178, 237, 0, 180, 198,
	146, 227, 191, 236, 246, 247, 224, 244, 251, 214,
	90, 223, 235, 106, 209, 92, 233, 220, 157, 136,
	137, 91, 0, 195, 114, 122, 111, 170, 230, 231,
	110, 254, 98, 243, 94, 99, 242, 164, 226, 234,
	158, 151, 93, 232, 156, 150, 141, 118, 129, 188,
	148, 189, 130, 161, 160, 162, 0, 0, 0, 218,
	240, 255, 103, 0, 225, 249, 250, 0, 0, 104,
	123, 117, 187, 121, 163, 100, 132, 215, 140, 147,
	194, 253, 177, 200, 107, 239, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 95, 144, 252,
	192, 120, 241, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	96, 102, 108, 112, 116, 119, 125, 128, 131, 133,
	134, 135, 138, 149, 152, 153, 154, 155, 165, 166,
	167, 169, 172, 173, 174, 175, 176, 179, 181, 182,
	183, 184, 185, 186, 193, 196, 202, 203, 204, 205,
	206, 207, 208, 210, 211, 212, 213, 219, 222, 228,
	229, 238, 245, 248, 396, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 143, 0, 0, 145,
	0, 0, 217, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 273, 0, 0, 0, 0, 190,
	0, 221, 127, 142, 101, 139, 87, 97, 0, 126,
	168, 197, 201, 0, 0, 0, 109, 0, 199, 178,
	237, 0, 180, 198, 146, 227, 191, 236, 246, 247,
	224, 244, 251, 214, 90, 223, 235, 106, 209, 92,
	233, 220, 157, 136, 137, 91, 0, 195, 114, 122,
	111, 170, 230, 231, 110, 254, 98, 243, 94, 99,
	242, 164, 226, 234, 158, 151, 93, 232, 156, 150,
	141, 118, 129, 188, 148, 189, 130, 161, 160, 162,
	0, 0, 0, 218, 240, 255, 103, 0, 225, 249,
	250, 0, 0, 104, 123, 117, 187, 121, 163, 100,
	132, 215, 140, 147, 194, 253, 177, 200, 107, 239,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 95, 144, 252, 192, 120, 241, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 96, 102, 108, 112, 116, 119,
	125, 128, 131, 133, 134, 135, 138, 149, 152, 153,
	154, 155, 165, 166, 167, 169, 172, 173, 174, 175,
	176, 179, 181, 182, 183, 184, 185, 186, 193, 196,
	202, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 219, 222, 228, 229, 238, 245, 248, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 143, 0, 0, 145, 0, 0, 217,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 268,
	0, 273, 0, 0, 0, 0, 190, 0, 221, 127,
	142, 101, 139, 87, 97, 0, 126, 168, 197, 201,
	0, 0, 0, 109, 0, 199, 178, 237, 0, 180,
	198, 146, 227, 191, 236, 246, 247, 224, 244, 251,
	214, 90, 223, 235, 106, 209, 92, 233, 220, 157,
	136, 137, 91, 0, 195, 114, 122, 111, 170, 230,
	231, 110, 254, 98, 243, 94, 99, 242, 164, 226,
	234, 158, 151, 93, 232, 156, 150, 141, 118, 129,
	188, 148, 189, 130, 161, 160, 162, 0, 0, 0,
	218, 240, 255, 103, 0, 225, 249, 250, 0, 0,
	104, 123, 117, 187, 121, 163, 100, 132, 215, 140,
	147, 194, 253, 177, 200, 107, 239, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 95, 144,
	252, 192, 120, 241, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 96, 102, 108, 112, 116, 119, 125, 128, 131,
	133, 134, 135, 138, 149, 152, 153, 154, 155, 165,
	166, 167, 169, 172, 173, 174, 175, 176, 179, 181,
	182, 183, 184, 185, 186, 193, 196, 202, 203, 204,
	205, 206, 207, 208, 210, 211, 212, 213, 219, 222,
	228, 229, 238, 245, 248, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	143, 0, 0, 145, 0, 0, 217, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 273, 0,
	0, 0, 0, 190, 0, 221, 127, 142, 101, 139,
	87, 97, 0, 126, 168, 197, 201, 0, 0, 0,
	109, 0, 199, 178, 237, 0, 180, 198, 146, 227,
	191, 236, 246, 247, 224, 244, 251, 214, 90, 223,
	235, 106, 209, 92, 233, 220, 157, 136, 137, 91,
	0, 195, 114, 122, 111, 170, 230, 231, 110, 254,
	98, 243, 94, 99, 242, 164, 226, 234, 158, 151,
	93, 232, 156, 150, 141, 118, 129, 188, 148, 189,
	130, 161, 160, 162, 0, 0, 0, 218, 240, 255,
	103, 0, 225, 249, 250, 0, 0, 104, 123, 117,
	187, 121, 163, 100, 132, 215, 140, 147, 194, 253,
	177, 200, 107, 239, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 95, 144, 252, 192, 120,
	241, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 96, 102,
	108, 112, 116, 119, 125, 128, 131, 133, 134, 135,
	138, 149, 152, 153, 154, 155, 165, 166, 167, 169,
	172, 173, 174, 175, 176, 179, 181, 182, 183, 184,
	185, 186, 193, 196, 202, 203, 204, 205, 206, 207,
	208, 210, 211, 212, 213, 219, 222, 228, 229, 238,
	245, 248,
}
var yyPact = [...]int{

	2256, -1000, -279, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 934, 969, -1000, -1000, -1000, -1000, -1000,
	-1000, 244, 11857, 41, 122, 7, 15920, 114, 143, 16257,
	-1000, 13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -82,
	-83, -1000, 701, -1000, -1000, -1000, -1000, -1000, 926, 931,
	764, 918, 858, -1000, 8475, 86, 86, 15583, 7127, -1000,
	-1000, 361, 16257, 110, 16257, -145, 87, 87, 87, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 112, 16257, 519, 519,
	224, -1000, 16257, 80, 519, 80, 80, 80, 16257, -1000,
	173, -1000, -1000, -1000, 16257, 519, 887, 337, 61, 4677,
	-1000, 177, -1000, 4677, 21, 4677, -50, 947, 23, -27,
	-1000, 4677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 483, 890, 9835, 9835,
	934, -1000, 701, -1000, -1000, -1000, 847, 8475, -1000, -1000,
	827, -1000, -1000, -1000, -1000, 304, 957, -1000, 11520, 171,
	-1000, 9835, 1656, 661, -1000, -1000, 661, -1000, -1000, 133,
	-1000, -1000, 10846, 10846, 10846, 10846, 10846, 10846, 10846, 10846,
	10846, 10846, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 661, -1000, 9498, 661,
	661, 661, 661, 661, 661, 661, 661, 9835, 661, 661,
	661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
	661, 661, 661, 661, 15239, 14228, 16257, 636, 612, -1000,
	-1000, 170, 696, 6777, -126, -1000, -1000, -1000, 245, 13554,
	-1000, -1000, -1000, 881, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 606, 16257, -1000, 2503, -1000, 519, 4677,
	99, 519, 282, 519, 16257, 16257, 4677, 4677, 4677, 31,
	64, 58, 16257, 685, 94, 16257, 911, 782, 16257, 519,
	519, -1000, 6077, -1000, 4677, 337, -1000, 438, 9835, 4677,
	4677, 4677, 16257, 4677, 4677, -1000, -1000, -1000, 323, -1000,
	-1000, -1000, -1000, 4677, 4677, -1000, 955, 316, -1000, -1000,
	-1000, -1000, 9835, 202, -1000, 780, -1000, -1000, -1000, -1000,
	-1000, -1000, 964, 199, 505, 169, 677, -1000, 405, 926,
	483, 827, 13217, 692, -1000, 827, -1000, -1000, -1000, 16257,
	-1000, 9835, 9835, 379, -1000, 14902, -1000, -1000, 5727, 215,
	10846, 439, 294, 10846, 10846, 10846, 10846, 10846, 10846, 10846,
	10846, 10846, 10846, 10846, 10846, 10846, 10846, 10846, 531, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 519, -1000, 701,
	544, 544, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 11183, 7464, 483, 603, 341, 9498, 8475, 8475, 9835,
	9835, 9149, 8812, 8475, 886, 275, 341, 16257, -1000, -1000,
	10509, -1000, -1000, -1000, -1000, -1000, 483, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16257, 16257, 8475, 8475, 8475, 8475,
	8475, 46, 16257, -1000, 671, 718, -1000, -1000, -1000, 913,
	12543, 12880, 46, 643, 14228, 16257, -1000, -1000, 14228, 16257,
	5377, 6427, -126, -1000, 663, -1000, -106, -116, 7801, 150,
	-1000, -1000, -1000, -1000, 4327, 364, 525, 333, -72, -1000,
	-1000, -1000, 700, -1000, 700, 700, 700, 700, -45, -45,
	-45, -45, -1000, -1000, -1000, -1000, -1000, 757, 751, -1000,
	700, 700, 700, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, 717, 717, 703, 703, 771, -1000, 16257, 4677,
	910, 4677, -1000, 85, -1000, -1000, -1000, 16257, 16257, 16257,
	16257, 16257, 131, 16257, 16257, 676, -1000, 16257, 4677, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 341, -1000, -1000,
	-1000, -1000, -1000, -1000, 16257, -1000, -1000, -1000, -1000, 16257,
	337, 16257, 16257, 341, -1000, 434, 16257, -1000, 841, 9835,
	9835, 6077, 9835, -1000, -1000, -1000, 890, -1000, 925, -1000,
	870, 869, 946, 8475, 14228, 827, -1000, 215, 228, -1000,
	-1000, 335, -1000, -1000, -1000, -1000, 164, 661, -1000, 1806,
	-1000, -1000, -1000, -1000, 439, 10846, 10846, 10846, 339, 1806,
	2069, 1560, 960, 182, 295, 295, 193, 193, 193, 193,
	193, 425, 425, -1000, -1000, -1000, 483, -1000, -1000, -1000,
	483, 8475, 8475, 670, -1000, 9835, -1000, 483, 596, 596,
	500, 512, 274, 954, 596, 263, 952, 596, 596, 8475,
	-1000, -1000, 271, -1000, 9835, 483, -1000, 155, -1000, 579,
	667, 666, 596, 483, 483, 596, 596, 662, 661, -1000,
	16257, 14228, 14228, 14228, 14228, 14228, -1000, 818, 812, -1000,
	801, 797, 820, 16257, -1000, 598, 12543, 185, 661, -1000,
	14565, -1000, -1000, 946, 14228, 600, -1000, 600, -1000, 153,
	-1000, -1000, 663, -126, -71, -1000, -1000, -1000, -1000, 341,
	-1000, 541, 658, 3977, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 716, 519, -1000, 902, 206, 238, 519, 900, -1000,
	-1000, -1000, 889, -1000, 290, -74, -1000, -1000, 390, -45,
	-45, -1000, -1000, 150, 878, 150, 150, 150, 433, 433,
	-1000, -1000, -1000, -1000, 385, -1000, -1000, -1000, 384, -1000,
	779, 16257, 4677, -1000, -1000, -1000, -1000, 187, 187, 255,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42, 664, -1000, -1000, -1000, -1000, -12, 30, 91,
	-1000, 4677, -1000, 316, 316, -1000, -1000, -1000, -1000, -1000,
	837, 341, 341, 152, -1000, -1000, 16257, -1000, -1000, -1000,
	-1000, 938, 9835, -1000, 654, -1000, -1000, -1000, -1000, 5027,
	8475, -1000, 339, 1806, 1886, -1000, 10846, 10846, -1000, -1000,
	596, 596, 341, -1000, -1000, -1000, 29, 531, 29, 10846,
	10846, -1000, 10846, 10846, -1000, -157, 655, 229, -1000, 9835,
	475, -1000, 6077, -1000, 10846, 10846, -1000, -1000, -1000, -1000,
	-1000, 778, 16257, 661, -1000, 12543, 16257, 653, -1000, 230,
	718, 736, 776, 693, -1000, -1000, -1000, -1000, 808, -1000,
	800, -1000, -1000, -1000, -1000, -1000, 109, 105, 101, 16257,
	-1000, 934, 600, -1000, -1000, 191, -1000, -1000, -122, -121,
	-1000, -1000, -1000, 4327, -1000, 4327, 16257, 66, -1000, 519,
	519, -1000, -1000, -1000, 705, 775, 10846, -1000, -1000, -1000,
	496, 150, 150, -1000, 354, -1000, -1000, -1000, 588, -1000,
	586, 645, 584, 16257, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16257, -1000, -1000, -1000, -1000, -1000, 16257,
	-180, 519, 16257, 16257, 16257, 16257, -1000, 337, 337, -1000,
	6077, -1000, 936, 929, 341, -1000, -1000, 483, -1000, 10846,
	1806, 1806, -1000, -1000, 483, 700, 700, -1000, 700, 703,
	-1000, 700, -3, 700, -4, 483, 483, 1823, 1624, 1469,
	414, 661, -152, -1000, 341, 9835, -1000, 1596, 1260, -1000,
	904, 617, 562, -1000, -1000, 8138, 483, 582, 149, 576,
	-1000, 934, 16257, 9835, -1000, -1000, 9835, 702, -1000, 9835,
	-1000, -1000, -1000, 661, 661, 661, 576, 926, -1000, -1000,
	-1000, -1000, 3977, -1000, 570, -1000, 700, -1000, -1000, -1000,
	16257, -68, 963, 1806, -1000, -1000, -1000, -1000, -1000, -45,
	416, -45, 368, -1000, 322, 4677, -1000, -1000, -1000, -1000,
	906, -1000, 6077, -1000, -1000, 699, 770, -1000, -1000, -1000,
	-1000, -1000, 9835, 9835, -1000, 1806, -1000, -1000, 124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10846, 10846, 10846,
	10846, 10846, 926, 400, 341, 10846, 10846, 899, -1000, 661,
	-1000, -1000, 660, 16257, 16257, -1000, 16257, 926, -1000, 341,
	341, 16257, 341, 13891, 16257, 16257, 12194, -1000, 162, 16257,
	-1000, 564, -1000, 205, -1000, -147, 150, -1000, 150, 492,
	485, -1000, 661, 593, -1000, 227, 16257, 16257, 341, 572,
	-1000, -1000, 579, 579, 579, 579, 60, 483, -1000, 579,
	579, 961, -1000, 661, -1000, 701, 144, -1000, -1000, -1000,
	560, 529, -1000, 529, 529, 185, 162, -1000, 519, 223,
	393, -1000, 52, 16257, 302, 897, -1000, 896, -1000, -1000,
	-1000, -1000, -1000, 40, 6077, 4327, 509, -1000, -1000, -1000,
	-1000, -1000, 483, 47, -183, -1000, -1000, -1000, 16257, 562,
	483, 16257, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320,
	-1000, -1000, 16257, -1000, -1000, 365, -1000, -1000, 480, -1000,
	16257, -1000, -1000, 664, -1000, 835, -177, -189, 542, -1000,
	-1000, -1000, 694, -1000, -1000, 40, 867, -180, -1000, 823,
	-1000, 16257, -1000, 36, -1000, -181, 446, 32, -184, 774,
	661, -190, 773, -1000, 951, 10172, -1000, -1000, 953, 212,
	212, 579, 483, -1000, -1000, -1000, 70, 406, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1203, 31, 508, 1200, 1199, 1198, 1195, 1194, 1193,
	1192, 1188, 1185, 1183, 1182, 1181, 1178, 1175, 1174, 1173,
	1172, 1169, 1168, 1167, 1164, 1163, 1162, 102, 1160, 1158,
	1156, 1152, 1145, 1143, 1140, 38, 391, 43, 58, 1139,
	57, 1180, 1138, 64, 63, 56, 1137, 35, 1135, 1134,
	80, 1133, 1132, 54, 1129, 1128, 79, 1127, 67, 1126,
	12, 28, 1125, 1124, 1123, 1121, 74, 140, 1117, 1116,
	14, 1115, 1114, 77, 1112, 55, 17, 16, 27, 19,
	1110, 128, 6, 1109, 53, 1108, 1107, 1106, 1105, 24,
	1104, 62, 1099, 52, 59, 1097, 10, 78, 41, 20,
	7, 1096, 1092, 15, 71, 51, 65, 1091, 1090, 564,
	1089, 1088, 45, 1086, 1085, 1079, 30, 1077, 97, 427,
	1076, 1053, 1052, 1048, 85, 873, 1849, 22, 70, 1046,
	1045, 1044, 2590, 46, 49, 18, 1041, 47, 311, 36,
	1040, 1038, 42, 1037, 1036, 1034, 1032, 1031, 1030, 1029,
	66, 1025, 1024, 1023, 34, 23, 1022, 1021, 61, 21,
	1019, 1014, 1001, 48, 60, 1000, 999, 50, 997, 996,
	25, 995, 991, 990, 989, 988, 26, 11, 987, 13,
	985, 8, 984, 29, 983, 5, 982, 4, 981, 2,
	0, 980, 9, 44, 1, 978, 3, 977, 976, 1504,
	704, 81, 969, 86,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 190, 190, 190, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 30,
	30, 8, 9, 9, 9, 9, 201, 201, 50, 50,
	51, 51, 97, 97, 10, 11, 11, 106, 106, 105,
	105, 105, 107, 107, 107, 107, 140, 140, 12, 12,
	12, 12, 12, 12, 12, 192, 192, 191, 189, 189,
	188, 188, 187, 18, 172, 174, 174, 173, 173, 173,
	173, 164, 143, 143, 143, 143, 146, 146, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 145, 145, 145,
	145, 145, 147, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 149,
	163, 163, 150, 150, 158, 158, 159, 159, 159, 156,
	156, 157, 157, 160, 160, 160, 152, 152, 153, 153,
	161, 161, 154, 154, 154, 155, 155, 155, 162, 162,
	162, 162, 162, 151, 151, 165, 165, 182, 182, 181,
	181, 181, 171, 171, 178, 178, 178, 178, 178, 168,
	168, 168, 169, 169, 167, 167, 170, 170, 180, 180,
	179, 166, 166, 183, 183, 183, 183, 195, 196, 194,
	194, 194, 194, 194, 175, 175, 175, 176, 176, 176,
	177, 177, 177, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 186, 184, 184, 185, 185, 14,
	19, 19, 15, 15, 15, 15, 15, 16, 16, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 113, 113, 115,
	115, 111, 111, 114, 114, 112, 112, 112, 116, 116,
	116, 117, 117, 141, 141, 141, 22, 22, 24, 24,
	25, 26, 23, 23, 23, 23, 23, 23, 23, 17,
	202, 27, 28, 28, 29, 29, 29, 32, 32, 32,
	31, 31, 31, 37, 37, 39, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 36, 36, 38, 38,
	38, 38, 129, 129, 129, 128, 128, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 45, 59, 59, 96,
	96, 98, 98, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 136, 136, 135, 135, 135, 134, 134,
	52, 52, 52, 54, 53, 53, 53, 53, 55, 55,
	57, 57, 56, 56, 58, 60, 60, 60, 60, 60,
	61, 61, 41, 41, 41, 41, 41, 41, 41, 110,
	110, 63, 63, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 74, 74, 74, 74, 74, 74, 64,
	64, 64, 64, 64, 64, 64, 35, 35, 75, 75,
	75, 81, 76, 76, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 71, 71,
	71, 71, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 203, 203, 73, 72, 72, 72, 72, 72, 72,
	72, 33, 33, 33, 33, 33, 139, 139, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 85, 85, 34, 34, 83, 83, 84, 86, 86,
	82, 82, 82, 66, 66, 66, 66, 66, 66, 66,
	66, 68, 68, 68, 87, 87, 88, 88, 89, 89,
	90, 90, 91, 92, 92, 92, 93, 93, 93, 93,
	94, 94, 94, 65, 65, 65, 65, 65, 65, 95,
	95, 95, 95, 99, 99, 77, 77, 79, 79, 78,
	80, 100, 100, 103, 101, 101, 101, 104, 104, 104,
	104, 102, 102, 102, 131, 131, 131, 108, 108, 118,
	118, 119, 119, 109, 109, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 121, 121, 121, 122, 122,
	123, 123, 123, 130, 130, 126, 126, 127, 127, 132,
	132, 133, 133, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 199, 200, 137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 4, 6,
	7, 5, 8, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 8, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 2, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -20, -21, -22, -24, -25,
	-26, -23, -17, -3, -4, 6, 7, -30, 9, 10,
	30, -18, 121, 122, 124, 123, 157, 125, 150, 52,
	171, 172, 174, 175, 25, 151, 152, 155, 156, 31,
	32, 127, -199, 8, 257, 56, -198, 355, -89, 15,
	-29, 5, -27, -202, -27, -27, -27, -27, -27, -172,
	-174, 56, 94, -123, 131, 76, 249, 128, 129, 135,
	-126, -190, -125, 59, 60, 61, 267, 143, 299, 300,
	171, 182, 176, 203, 195, 268, 301, 144, 193, 196,
	236, 141, 302, 223, 230, 70, 174, 245, 303, 153,
	191, 187, 304, 276, 185, 27, 305, 232, 208, 306,
	272, 234, 186, 231, 127, 307, 146, 139, 308, 209,
	213, 309, 237, 310, 311, 312, 180, 181, 313, 142,
	239, 207, 140, 33, 269, 36, 161, 240, 211, 314,
	206, 202, 315, 316, 317, 318, 205, 179, 201, 40,
	215, 214, 216, 235, 198, 319, 320, 321, 147, 322,
	188, 18, 323, 324, 325, 326, 327, 243, 156, 328,
	159, 329, 330, 331, 332, 333, 334, 233, 210, 212,
	136, 163, 271, 335, 241, 184, 336, 148, 160, 155,
	244, 149, 337, 338, 339, 340, 341, 342, 343, 175,
	344, 345, 346, 347, 170, 238, 247, 39, 220, 348,
	178, 138, 349, 172, 167, 225, 199, 162, 350, 351,
	189, 190, 204, 177, 200, 173, 164, 157, 352, 246,
	221, 273, 197, 194, 168, 353, 165, 166, 354, 226,
	227, 169, 270, 242, 192, 222, -109, 131, 249, 128,
	227, 133, 129, 129, 130, 131, 249, 128, 129, -56,
	-132, -190, -125, 131, 129, 112, 196, 236, 121, 224,
	232, -115, 233, 163, -141, 129, -111, 223, 226, 227,
	169, -190, 234, 238, 237, 228, -132, 173, -137, -137,
	-137, -137, -137, 225, 225, -137, -2, -93, 17, 16,
	-5, -3, -199, 6, 20, 21, -32, -39, 41, 42,
	-40, 21, 34, 45, 43, -28, -38, 103, -41, -132,
	-62, 78, -67, 29, -190, -125, 23, -66, -63, -82,
	-80, -81, 112, 113, 115, 114, 116, 101, 102, 109,
	79, 117, -71, -69, -70, -72, 63, 62, 71, 64,
	65, 66, 67, 72, 73, 74, -126, -78, -199, 46,
	47, 258, 259, 260, 261, 266, 262, 81, 35, 248,
	256, 255, 254, 252, 253, 250, 251, 264, 265, 134,
	249, 128, 107, 257, -109, -109, 11, -50, -51, -56,
	-58, -132, -101, -140, 173, -104, 238, 237, -127, -102,
	-126, -124, 236, 196, 235, 126, 274, 77, 22, 24,
	218, 80, 112, 16, 81, 111, 258, 121, 50, 275,
	250, 251, 248, 260, 261, 249, 224, 29, 10, 277,
	25, 151, 21, 34, 105, 123, 84, 85, 154, 23,
	152, 74, 280, 19, 53, 11, 13, 281, 282, 14,
	134, 133, 96, 130, 48, 8, 117, 26, 93, 44,
	283, 28, 284, 285, 286, 287, 46, 94, 17, 252,
	253, 31, 288, 266, 158, 107, 51, 37, 78, 289,
	290, 72, 291, 75, 54, 76, 15, 49, 292, 293,
	294, 295, 95, 124, 257, 47, 296, 128, 6, 263,
	30, 150, 45, 297, 129, 83, 264, 265, 132, 73,
	5, 135, 32, 9, 52, 55, 254, 255, 256, 35,
	82, 12, 298, -173, 94, -164, -190, -56, 130, -56,
	257, -119, 134, -119, -119, 129, -56, -190, -190, 121,
	123, 126, 54, -19, -56, -118, 134, -190, -118, -118,
	-118, -56, 118, -56, -190, 30, -116, 94, 12, 249,
	-190, 163, 129, 164, 131, -138, -199, -127, -168, 130,
	33, 142, -138, 167, 168, -138, -114, -113, 230, 231,
	225, 229, 12, 168, 225, 166, -138, -137, -137, -200,
	58, -94, 19, 31, -41, -132, -90, -91, -41, -89,
	-2, -27, 37, -36, -38, -40, 41, 42, 69, 11,
	-129, 77, 76, 93, -128, 22, -126, 63, 118, -41,
	-64, 96, 78, 94, 95, 80, 98, 97, 108, 101,
	102, 103, 104, 105, 106, 107, 99, 100, 111, 86,
	87, 88, 89, 90, 91, 92, -110, -199, -81, -199,
	119, 120, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -199, -2, -76, -41, -199, -199, -199, -199,
	-199, -199, -199, -199, -199, -85, -41, -199, -203, -73,
	-199, -203, -73, -203, -73, -203, -199, -203, -73, -203,
	-73, -203, -203, -73, -199, -199, -199, -199, -199, -199,
	-199, -57, 26, -56, -43, -44, -45, -46, -59, -81,
	-199, -56, -56, -50, -201, 57, 11, 55, -201, 57,
	118, 57, 173, -104, -106, -105, 239, 241, 86, -131,
	-126, 63, 29, 30, 58, 57, -56, -143, -146, -148,
	-147, -149, -144, -145, 193, 194, 112, 197, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 30, 153,
	189, 190, 191, 192, 209, 210, 211, 212, 213, 214,
	215, 216, 176, 195, 268, 177, 178, 179, 180, 181,
	182, 184, 185, 186, 187, 188, -190, -138, 131, -190,
	78, -190, -56, -56, -138, -138, -138, 165, 165, 129,
	129, 170, -56, 57, 132, -50, 23, 54, -56, -190,
	-190, -133, -132, -124, -138, -116, 63, -41, -138, -138,
	-138, -56, -138, -138, -169, 11, 96, -138, -138, 11,
	-112, 11, 96, -41, -117, 94, 54, 9, 96, 57,
	18, 118, 57, -92, 24, 25, -93, -200, -68, -126,
	64, 67, -42, 57, 11, -40, -56, -41, -41, -74,
	72, 78, 73, 74, -128, 103, -133, -127, -124, -67,
	-75, -78, -81, 68, 96, 94, 95, 80, -67, -67,
	-67, -67, -67, -67, -67, -67, -67, -67, -67, -67,
	-67, -67, -67, -139, -190, 63, -190, -66, -66, -126,
	-37, 21, 34, -36, -200, 57, -200, -2, -36, -36,
	-41, -41, -82, 63, -36, -82, 63, -36, -36, -31,
	21, 34, -83, -84, 82, -82, -126, -132, -200, -67,
	-126, -126, -36, -37, -37, -36, -36, -97, 159, -56,
	30, 57, -52, -54, -53, -55, 44, 48, 50, 45,
	46, 47, 51, -136, 22, -43, -199, -135, 159, -134,
	22, -132, 63, -97, 55, -43, -56, -43, -58, -132,
	103, -104, -106, 57, 240, 242, 243, 54, 75, -41,
	-155, 111, -175, -176, -177, -127, 63, 64, -164, -165,
	-166, -178, 145, -183, 136, 138, 135, -167, 146, 130,
	28, 58, -160, 72, 78, -156, 221, -150, 56, -150,
	-150, -150, -150, -154, 196, -154, -154, -154, 56, 56,
	-150, -150, -150, -158, 56, -158, -158, -159, 56, -159,
	-130, 55, -56, -138, 23, -138, -120, 126, 123, 124,
	-186, 122, 218, 196, 70, 29, 15, 258, 159, 273,
	-190, 160, -56, -56, -56, -56, -56, 126, 123, -56,
	-56, -56, -138, -56, -56, -116, -132, -132, 63, -56,
	39, -41, -41, -133, -91, -94, -108, 19, 11, 35,
	35, -61, 12, -38, -43, -40, 72, 73, 74, 118,
	-199, -75, -67, -67, -67, -35, 154, 77, -200, -200,
	-36, -36, -41, -200, -200, -200, 57, 55, 22, 11,
	11, -200, 11, 11, -200, -200, -36, -86, -84, 84,
	-41, -200, 118, -200, 57, 57, -200, -200, -200, -200,
	-200, -65, 30, 35, -2, -199, -199, -100, -103, -82,
	-44, -45, -45, -44, -45, 44, 44, 44, 49, 44,
	49, 44, -53, -132, -200, -60, 52, 133, 53, -199,
	-134, -61, -43, -61, -61, 118, -105, -107, 244, 241,
	247, -190, 63, 57, -177, 86, 56, -190, 28, -167,
	-167, -170, -190, -170, 28, -152, 29, 72, -157, 222,
	64, -154, -154, -155, 30, -155, -155, -155, -163, 63,
	-163, 64, 64, 54, -126, -138, -137, -193, 141, 137,
	145, 146, 139, 59, 60, 61, 130, 28, 136, 138,
	159, 135, -193, -121, -122, 132, 22, 130, 28, 159,
	-192, 55, 165, 218, 165, 132, -138, -112, -112, 40,
	118, -56, -87, 13, -41, 103, -127, -37, -35, 77,
	-67, -67, -200, -200, -142, 112, 193, 153, 191, 187,
	207, 198, 220, 189, 221, -139, -142, -67, -67, -67,
	-67, 267, -89, 85, -41, 83, -127, -67, -67, -99,
	54, -100, -77, -79, -78, -199, -2, -95, -126, -98,
	-126, -61, 57, 86, -48, -47, 54, 55, -49, 54,
	-47, 44, 44, 130, 130, 130, -98, -89, -61, 241,
	245, 246, -176, -177, -180, -179, -126, -183, -170, -170,
	56, -153, 54, -67, 58, -155, -155, -190, 112, 58,
	57, 58, 57, 58, 57, -56, -137, -137, -56, -137,
	-126, -189, 270, -191, -190, -126, -126, -126, -56, -116,
	-116, -88, 14, 16, -200, -67, -200, -150, -150, -150,
	-159, -150, 181, -150, 181, -200, -200, 19, 19, 19,
	19, -199, -34, 263, -41, 57, 57, 27, -99, 57,
	-200, -200, -200, 57, 118, -200, 57, -89, -103, -41,
	-41, 56, -41, -199, -199, -199, -200, -93, 58, 57,
	-150, -96, -126, -161, 218, 9, -154, 63, -154, 64,
	64, -138, 26, -188, -187, -127, 56, 55, -41, -76,
	-154, -190, -67, -67, -67, -67, -67, -93, 63, -67,
	-67, 28, -79, 35, -2, -199, -126, -126, -126, -93,
	-96, -96, -200, -96, -96, -135, -182, -181, 55, 140,
	70, -179, 58, 57, -162, 136, 28, 135, -70, -155,
	-155, 58, 58, -199, 57, 86, -96, -56, -200, -200,
	-200, -200, -33, 96, 270, -200, -200, -200, 9, -77,
	-2, 118, 58, -200, -200, -200, -60, -181, -190, -171,
	86, 63, 148, -126, -151, 70, 28, 28, -184, -185,
	159, -187, -177, 58, -200, 268, 51, 271, -100, -200,
	-126, 64, -56, 63, -200, 57, -126, -192, 40, 269,
	272, 56, -185, 35, -189, 40, -96, 161, 270, 58,
	162, 271, -195, -196, 54, -199, 272, -196, 54, 10,
	9, -67, 158, -194, 149, 144, 147, 30, -194, -200,
	-200, 143, 29, 72,
}
var yyDef = [...]int{

	24, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 588, 0, 330, 330, 330, 330, 330,
	330, 0, 660, 643, 0, 0, 0, 0, -2, 317,
	318, 0, 320, 321, 964, 964, 964, 964, 964, 0,
	0, 964, 0, 39, 40, 962, 1, 3, 596, 0,
	0, 334, -2, 332, 0, 643, 643, 0, 0, 68,
	69, 0, 0, 0, 951, 0, 641, 641, 641, 661,
	662, 665, 666, 25, 26, 27, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 0, 0, 0, 0,
	0, 644, 0, 639, 0, 639, 639, 639, 0, 268,
	412, 669, 670, 951, 0, 0, 0, 308, 0, 965,
	280, 0, 282, 965, 0, 965, 0, 289, 0, 0,
	295, 965, 300, 314, 315, 302, 316, 319, 322, 323,
	324, 325, 326, 964, 964, 329, 33, 600, 0, 0,
	588, 35, 0, 330, 335, 336, 0, 0, -2, -2,
	346, 352, 353, 354, 355, 331, 0, 358, 362, 0,
	422, 0, 427, 429, -2, -2, 0, 464, 465, 466,
	467, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 495, 496, 497, 573, 574, 575, 576,
	577, 578, 579, 580, 431, 432, 570, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 531,
	531, 531, 531, 531, 531, 531, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	50, 412, 54, 0, 940, 624, -2, -2, 0, 0,
	667, 668, -2, 804, -2, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 0, 0, 87, 0, 85, 0, 965,
	0, 0, 0, 0, 0, 0, 965, 965, 965, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 269, 965, 308, 272, 0, 0, 965,
	965, 965, 0, 965, 965, 279, 966, 967, 0, 189,
	190, 191, 283, 965, 965, 285, 0, 305, 303, 304,
	297, 298, 0, 311, 292, 293, 296, 327, 328, 34,
	963, 28, 0, 0, 597, 0, 589, 590, 593, 596,
	33, 345, 0, 367, 356, 347, 350, 351, 333, 0,
	359, 0, 0, 0, 363, 0, 365, 366, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 449,
	450, 451, 452, 453, 454, 455, 428, 0, 442, 0,
	0, 0, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 0, 343, 33, 0, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 0, 562, 0, 515, 523,
	0, 516, 524, 517, 525, 518, 0, 519, 526, 520,
	527, 521, 522, 528, 0, 0, 0, 343, 343, 0,
	0, 52, 0, 411, 0, 369, 371, 372, 373, -2,
	0, 395, -2, 0, 0, 0, 46, 47, 0, 0,
	0, 0, 940, 625, 56, 57, 0, 0, 0, 165,
	634, 635, 636, 632, 214, 0, 0, 153, 149, 93,
	94, 95, 142, 97, 142, 142, 142, 142, 162, 162,
	162, 162, 125, 126, 127, 128, 129, 0, 0, 112,
	142, 142, 142, 116, 132, 133, 134, 135, 136, 137,
	138, 139, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 144, 144, 144, 146, 146, 663, 71, 0, 965,
	0, 965, 83, 0, 228, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 640, 0, 965, 265,
	266, 413, 671, 672, 270, 271, 309, 310, 273, 274,
	275, 276, 277, 278, 0, 192, 193, 284, 288, 0,
	308, 0, 0, 290, 291, 0, 0, 601, 0, 0,
	0, 0, 0, 592, 594, 595, 600, 36, 0, 581,
	0, 0, 420, 0, 0, 348, 31, 423, 424, 426,
	443, 0, 445, 447, 364, 360, 0, 571, -2, 433,
	434, 458, 459, 460, 0, 0, 0, 0, 456, 438,
	0, 469, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 483, 546, 547, 0, 481, 482, 493,
	0, 0, 0, 344, 461, 0, 619, 33, 0, 0,
	0, 0, 466, 573, 0, 466, 573, 0, 0, 0,
	341, 342, 568, 565, 0, 0, 570, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	0, 0, 0, 0, 0, 0, 400, 0, 0, 403,
	0, 0, 0, 0, 394, 0, 0, 415, 885, 396,
	0, 398, 399, 420, 0, 420, 49, 420, 51, 0,
	414, 626, 55, 0, 0, 60, 61, 627, 628, 629,
	630, 0, 84, 215, 217, 220, 221, 222, 88, 89,
	90, 0, 0, 202, 0, 0, 196, 196, 0, 194,
	195, 86, 156, 154, 0, 151, 150, 96, 0, 162,
	162, 119, 120, 165, 0, 165, 165, 165, 0, 0,
	113, 114, 115, 107, 0, 108, 109, 110, 0, 111,
	0, 0, 965, 73, 642, 74, 964, 0, 0, 655,
	229, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 0, 75, 233, 235, 234, 238, 0, 0, 0,
	260, 965, 264, 305, 305, 287, 306, 307, 312, 294,
	0, 598, 599, 0, 591, 29, 0, 637, 638, 582,
	583, 584, 0, 357, 368, 349, 444, 446, 448, 0,
	343, 435, 456, 439, 0, 436, 0, 0, 430, 498,
	0, 0, 463, -2, 502, 503, 0, 0, 0, 0,
	0, 539, 0, 0, 540, 0, 588, 0, 566, 0,
	0, 514, 0, 533, 0, 0, 534, 535, 536, 537,
	538, 613, 0, 0, -2, 0, 0, 420, 621, 0,
	370, 389, 391, 0, 386, 401, 402, 404, 0, 406,
	0, 408, 409, 374, 376, 377, 0, 0, 0, 0,
	397, 588, 420, 44, 45, 0, 58, 59, 0, 0,
	65, 166, 167, 0, 218, 0, 0, 0, 184, 196,
	196, 187, 197, 188, 0, 158, 0, 155, 92, 152,
	0, 165, 165, 121, 0, 122, 123, 124, 0, 140,
	0, 0, 0, 0, 664, 72, 223, 964, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 964, 0, 964, 656, 657, 658, 659, 0,
	78, 0, 0, 0, 0, 0, 263, 308, 308, 602,
	0, 30, 586, 0, 421, 361, 572, 0, 437, 0,
	457, 440, 499, 500, 0, 142, 142, 551, 142, 146,
	554, 142, 556, 142, 559, 0, 0, 0, 0, 0,
	0, 0, 563, 513, 569, 0, 571, 0, 0, 37,
	0, 613, 603, 615, 617, 0, 33, 0, 609, 0,
	381, 588, 0, 0, 383, 390, 0, 0, 384, 0,
	385, 405, 407, 0, 0, 0, 0, 596, 43, 62,
	63, 64, 216, 219, 0, 198, 142, 201, 185, 186,
	0, 160, 0, 157, 143, 117, 118, 163, 164, 162,
	0, 162, 0, 147, 0, 965, 224, 225, 226, 227,
	0, 232, 0, 76, 77, 0, 0, 237, 261, 281,
	286, 32, 0, 0, 501, 441, 504, 548, 162, 552,
	553, 555, 557, 558, 560, 506, 505, 0, 0, 0,
	0, 0, 596, 0, 567, 0, 0, 0, 38, 0,
	618, -2, 0, 0, 0, 53, 0, 596, 622, 623,
	387, 0, 392, 0, 0, 0, 395, 42, 176, 0,
	200, 0, 379, 168, 161, 0, 165, 141, 165, 0,
	0, 70, 0, 79, 80, 0, 0, 0, 587, 585,
	549, 550, 0, 0, 0, 0, 541, 0, 564, 0,
	0, 0, 616, 0, -2, 0, 611, 610, 382, 41,
	0, 0, 417, 0, 0, 415, 175, 177, 0, 182,
	0, 199, 0, 0, 173, 0, 170, 172, 159, 130,
	131, 145, 148, 0, 0, 0, 0, 239, 507, 509,
	508, 510, 0, 0, 0, 512, 529, 530, 0, 606,
	33, 0, 388, 416, 418, 419, 378, 178, 179, 0,
	183, 181, 0, 380, 91, 0, 169, 171, 0, 255,
	0, 81, 82, 75, 511, 0, 0, 0, 614, -2,
	612, 180, 0, 174, 254, 0, 0, 78, 542, 0,
	545, 0, 256, 0, 236, 543, 0, 0, 0, 203,
	0, 0, 204, 205, 0, 0, 544, 206, 0, 0,
	0, 0, 0, 207, 209, 210, 0, 0, 208, 257,
	258, 211, 212, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 106, 98, 3,
	56, 58, 103, 101, 57, 102, 118, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 355,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 116, 117,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:331
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:336
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:341
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
			setParseTree(yylex, nil)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:437
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:465
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:495
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = RepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.str = ReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.str = ReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = Serializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:607
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:620
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:644
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:655
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:672
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:679
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:690
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:705
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:715
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:942
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:947
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:951
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:956
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:960
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:968
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:986
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:995
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1045
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1049
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1092
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1223
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1229
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1240
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 204:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1244
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1248
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1252
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1270
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1278
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1282
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1291
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1307
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1335
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1347
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1459
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1469
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1475
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1479
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1491
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1495
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1503
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1511
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1516
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &OtherRead{}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1559
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1624
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = "extended "
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.str = "full "
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1737
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1751
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = SessionStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = GlobalStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Begin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Commit{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &Rollback{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1841
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.selectExprs = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1909
		{
			yyVAL.strs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1925
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = SQLCacheStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = DistinctStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.str = DistinctStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.str = StraightJoinHint
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1975
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1979
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1984
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1992
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2014
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2048
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2052
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2062
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2085
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2089
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2093
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2105
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2115
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2117
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2120
		{
			yyVAL.empty = struct{}{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.empty = struct{}{}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = JoinStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = StraightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = LeftJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.str = LeftJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.str = RightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = RightJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = NaturalJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2188
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2198
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2223
		{
			yyVAL.indexHints = nil
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2227
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2231
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2235
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2239
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = nil
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = IsNullStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = IsNotNullStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = IsTrueStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = IsNotTrueStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = IsFalseStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = IsNotFalseStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = EqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = LessThanStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = GreaterThanStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = LessEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = GreaterEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = NotEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2396
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2549
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2571
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 506:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2789
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.str = BooleanModeStr
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 544:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.str = QueryExpansionStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.str = string("")
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2905
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2924
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2928
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &NullVal{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2968
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2986
		{
			yyVAL.exprs = nil
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2990
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3004
		{
			yyVAL.orderBy = nil
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3029
		{
			yyVAL.str = AscScr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = AscScr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.str = DescScr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3042
		{
			yyVAL.limit = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3054
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3059
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3063
		{
			yyVAL.str = ForUpdateStr
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3067
		{
			yyVAL.str = ShareModeStr
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3097
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3120
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3125
		{
			yyVAL.updateExprs = nil
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3129
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3149
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3155
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3181
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3191
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3214
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3221
		{
			yyVAL.bytes = []byte("charset")
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = &Default{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3245
		{
			yyVAL.byt = 0
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.byt = 1
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.str = ""
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.str = IgnoreStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3304
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3312
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3651
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			decNesting(yylex)
		}
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3665
		{
			skipToEnd(yylex)
		}
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3670
		{
			skipToEnd(yylex)
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3674
		{
			skipToEnd(yylex)
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3678
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const AT_ID = 57398
const AT_AT_ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const INDEXES = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const WARNINGS = 57491
const SEQUENCE = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const TABLES = 57547
const VITESS_METADATA = 57548
const VSCHEMA = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const EXTENDED = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const ARRAY = 57596
const CUME_DIST = 57597
const DESCRIPTION = 57598
const DENSE_RANK = 57599
const EMPTY = 57600
const EXCEPT = 57601
const FIRST_VALUE = 57602
const GROUPING = 57603
const GROUPS = 57604
const JSON_TABLE = 57605
const LAG = 57606
const LAST_VALUE = 57607
const LATERAL = 57608
const LEAD = 57609
const MEMBER = 57610
const NTH_VALUE = 57611
const NTILE = 57612
const OF = 57613
const OVER = 57614
const PERCENT_RANK = 57615
const RANK = 57616
const RECURSIVE = 57617
const ROW_NUMBER = 57618
const SYSTEM = 57619
const WINDOW = 57620
const ACTIVE = 57621
const ADMIN = 57622
const BUCKETS = 57623
const CLONE = 57624
const COMPONENT = 57625
const DEFINITION = 57626
const ENFORCED = 57627
const EXCLUDE = 57628
const FOLLOWING = 57629
const GEOMCOLLECTION = 57630
const GET_MASTER_PUBLIC_KEY = 57631
const HISTOGRAM = 57632
const HISTORY = 57633
const INACTIVE = 57634
const INVISIBLE = 57635
const LOCKED = 57636
const MASTER_COMPRESSION_ALGORITHMS = 57637
const MASTER_PUBLIC_KEY_PATH = 57638
const MASTER_TLS_CIPHERSUITES = 57639
const MASTER_ZSTD_COMPRESSION_LEVEL = 57640
const NESTED = 57641
const NETWORK_NAMESPACE = 57642
const NOWAIT = 57643
const NULLS = 57644
const OJ = 57645
const OLD = 57646
const OPTIONAL = 57647
const ORDINALITY = 57648
const ORGANIZATION = 57649
const OTHERS = 57650
const PATH = 57651
const PERSIST = 57652
const PERSIST_ONLY = 57653
const PRECEDING = 57654
const PRIVILEGE_CHECKS_USER = 57655
const PROCESS = 57656
const RANDOM = 57657
const REFERENCE = 57658
const REQUIRE_ROW_FORMAT = 57659
const RESOURCE = 57660
const RESPECT = 57661
const RESTART = 57662
const RETAIN = 57663
const REUSE = 57664
const ROLE = 57665
const SECONDARY = 57666
const SECONDARY_ENGINE = 57667
const SECONDARY_LOAD = 57668
const SECONDARY_UNLOAD = 57669
const SKIP = 57670
const SRID = 57671
const THREAD_PRIORITY = 57672
const TIES = 57673
const UNBOUNDED = 57674
const VCPU = 57675
const VISIBLE = 57676

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 37,
	33, 299,
	127, 299,
	139, 299,
	164, 313,
	165, 313,
	-2, 301,
	-1, 327,
	115, 657,
	-2, 653,
	-1, 328,
	115, 658,
	-2, 654,
	-1, 397,
	85, 908,
	-2, 66,
	-1, 398,
	85, 825,
	-2, 67,
	-1, 403,
	85, 793,
	-2, 619,
	-1, 405,
	85, 856,
	-2, 621,
	-1, 706,
	1, 366,
	5, 366,
	12, 366,
	13, 366,
	14, 366,
	15, 366,
	17, 366,
	19, 366,
	30, 366,
	31, 366,
	43, 366,
	44, 366,
	45, 366,
	46, 366,
	47, 366,
	49, 366,
	50, 366,
	53, 366,
	54, 366,
	56, 366,
	57, 366,
	352, 366,
	-2, 384,
	-1, 709,
	54, 47,
	56, 47,
	-2, 51,
	-1, 864,
	115, 660,
	-2, 656,
	-1, 1095,
	5, 33,
	-2, 452,
	-1, 1126,
	5, 32,
	-2, 593,
	-1, 1374,
	5, 33,
	-2, 594,
	-1, 1427,
	5, 32,
	-2, 596,
	-1, 1507,
	5, 33,
	-2, 597,
}

const yyPrivate = 57344

const yyLast = 16225

var yyAct = [...]int{

	327, 1541, 1335, 1495, 1531, 1129, 661, 979, 1440, 332,
	1407, 1223, 1147, 358, 1275, 345, 1309, 306, 952, 1276,
	1022, 1174, 950, 1130, 975, 1272, 57, 988, 1288, 978,
	557, 1282, 80, 889, 896, 1153, 270, 297, 290, 270,
	1394, 1247, 808, 900, 827, 1200, 402, 1086, 1191, 992,
	722, 954, 939, 918, 702, 866, 592, 660, 3, 526,
	1018, 598, 396, 703, 932, 391, 613, 270, 80, 604,
	315, 527, 270, 721, 270, 330, 388, 708, 393, 711,
	675, 56, 298, 299, 300, 301, 1534, 1518, 304, 61,
	546, 1529, 1505, 1526, 1002, 1336, 1517, 1504, 1041, 676,
	1264, 1366, 531, 266, 262, 263, 264, 319, 1008, 305,
	1304, 1305, 1040, 268, 899, 63, 64, 65, 66, 67,
	370, 1303, 376, 377, 374, 375, 373, 372, 371, 969,
	568, 82, 83, 84, 970, 971, 378, 379, 723, 1248,
	724, 82, 83, 84, 390, 258, 586, 303, 256, 528,
	260, 530, 1039, 1469, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 1162, 302, 637, 1161,
	581, 1182, 1163, 1001, 582, 579, 580, 1225, 1250, 1397,
	82, 83, 84, 1009, 1357, 1355, 296, 797, 574, 575,
	584, 796, 1227, 794, 1528, 1525, 1496, 1222, 399, 563,
	933, 565, 1036, 1033, 1034, 585, 1032, 1545, 1488, 993,
	1549, 571, 1252, 547, 1256, 533, 1251, 260, 1249, 1228,
	1441, 801, 1449, 1254, 265, 1148, 1150, 795, 798, 995,
	1226, 785, 1253, 562, 564, 1443, 1298, 1297, 1296, 1043,
	1046, 82, 83, 84, 259, 1255, 1257, 1219, 529, 536,
	273, 261, 1053, 1221, 1477, 1052, 1104, 270, 538, 539,
	1101, 1377, 270, 1233, 548, 995, 257, 1158, 270, 649,
	650, 1114, 1080, 838, 270, 555, 1038, 717, 561, 80,
	617, 976, 553, 80, 965, 80, 627, 835, 832, 637,
	637, 80, 612, 543, 274, 82, 83, 84, 1037, 70,
	1486, 277, 1458, 1442, 1149, 570, 82, 83, 84, 284,
	828, 1286, 1503, 611, 610, 1009, 1210, 572, 1543, 560,
	1268, 1544, 80, 1542, 559, 1470, 1450, 1448, 994, 1180,
	612, 725, 787, 919, 537, 1266, 600, 71, 1042, 545,
	588, 589, 919, 282, 1111, 552, 1206, 1207, 1208, 289,
	1491, 554, 1220, 1044, 1218, 549, 550, 551, 540, 1322,
	541, 649, 650, 542, 994, 649, 650, 822, 873, 601,
	630, 631, 632, 633, 634, 627, 275, 610, 637, 611,
	610, 607, 871, 872, 870, 1509, 270, 270, 270, 1403,
	82, 83, 84, 612, 829, 80, 612, 995, 841, 842,
	1402, 80, 602, 286, 278, 558, 287, 288, 294, 701,
	1195, 1194, 279, 281, 291, 1209, 276, 293, 292, 325,
	1214, 1211, 1202, 1212, 1205, 525, 1201, 82, 83, 84,
	1203, 1204, 626, 625, 635, 636, 628, 629, 630, 631,
	632, 633, 634, 627, 1213, 1183, 637, 54, 1511, 611,
	610, 823, 678, 680, 682, 684, 686, 688, 689, 869,
	1487, 998, 1421, 700, 710, 709, 612, 999, 1099, 715,
	1098, 679, 681, 719, 685, 687, 255, 690, 628, 629,
	630, 631, 632, 633, 634, 627, 1550, 1087, 637, 611,
	610, 532, 1400, 1241, 1192, 1063, 994, 856, 858, 859,
	813, 991, 989, 857, 990, 591, 612, 1077, 1078, 1079,
	713, 987, 993, 626, 625, 635, 636, 628, 629, 630,
	631, 632, 633, 634, 627, 399, 270, 637, 1551, 1455,
	783, 80, 1454, 786, 1318, 788, 270, 270, 80, 80,
	80, 385, 386, 996, 270, 1446, 1527, 270, 837, 591,
	270, 806, 807, 714, 270, 716, 80, 22, 1100, 1513,
	591, 80, 80, 80, 270, 80, 80, 58, 534, 535,
	82, 83, 84, 1285, 891, 80, 80, 82, 83, 84,
	54, 1165, 82, 83, 84, 902, 836, 812, 626, 625,
	635, 636, 628, 629, 630, 631, 632, 633, 634, 627,
	810, 1372, 637, 733, 80, 611, 610, 1273, 1093, 270,
	1285, 611, 610, 789, 790, 80, 1457, 310, 843, 1446,
	1499, 799, 612, 802, 390, 1446, 591, 805, 612, 941,
	944, 945, 946, 942, 867, 943, 947, 936, 890, 1289,
	1290, 818, 1224, 1446, 1478, 1446, 1445, 892, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 80,
	862, 637, 1392, 1391, 864, 348, 347, 350, 351, 352,
	353, 1379, 591, 845, 349, 354, 1376, 591, 909, 912,
	1154, 860, 1328, 1327, 920, 935, 852, 1324, 1325, 1324,
	1323, 1154, 80, 80, 1093, 591, 936, 591, 24, 713,
	270, 902, 591, 1326, 328, 732, 731, 1236, 270, 270,
	1166, 936, 270, 270, 24, 968, 270, 270, 270, 80,
	24, 904, 1124, 1117, 936, 893, 894, 1125, 1116, 928,
	929, 1093, 80, 527, 960, 1285, 81, 959, 962, 712,
	271, 916, 714, 271, 712, 712, 718, 54, 863, 1426,
	839, 800, 1093, 1519, 1409, 651, 652, 653, 654, 655,
	656, 657, 658, 54, 810, 1003, 1384, 1023, 1314, 54,
	1169, 271, 81, 1019, 958, 312, 271, 934, 271, 905,
	906, 966, 963, 911, 914, 915, 270, 80, 1014, 80,
	961, 1045, 983, 1013, 967, 270, 270, 270, 270, 270,
	1410, 270, 270, 1024, 1026, 270, 80, 1536, 927, 1289,
	1290, 930, 931, 941, 944, 945, 946, 942, 1532, 943,
	947, 1316, 270, 1295, 54, 1292, 1273, 270, 1196, 270,
	270, 833, 804, 851, 270, 1294, 1004, 1005, 1006, 1007,
	1020, 1021, 1141, 1139, 1138, 1137, 1523, 1142, 1140, 399,
	316, 317, 1015, 1016, 1017, 1010, 1011, 1012, 1060, 1516,
	1232, 1065, 980, 1027, 1143, 1521, 945, 946, 1075, 1074,
	605, 1187, 1047, 1048, 1049, 1050, 1051, 605, 1054, 1055,
	593, 1068, 1056, 606, 867, 864, 603, 730, 556, 1179,
	606, 1493, 594, 1088, 1492, 1424, 1177, 1171, 1370, 1058,
	1070, 1069, 1405, 1029, 1059, 803, 949, 313, 314, 307,
	1463, 1064, 308, 626, 625, 635, 636, 628, 629, 630,
	631, 632, 633, 634, 627, 1073, 1082, 637, 58, 1462,
	1412, 1154, 583, 1072, 1538, 1537, 1538, 270, 270, 270,
	270, 270, 1105, 1102, 826, 1131, 608, 1474, 1398, 270,
	834, 60, 270, 62, 55, 1, 270, 1530, 1337, 1406,
	270, 271, 1035, 1494, 1439, 1076, 271, 1308, 986, 863,
	977, 1110, 271, 69, 524, 68, 1485, 1164, 271, 80,
	821, 569, 1155, 81, 985, 984, 1167, 81, 1170, 81,
	1126, 1132, 1175, 1175, 1135, 81, 1156, 1447, 1157, 1396,
	1144, 1133, 1134, 997, 1136, 1181, 1000, 1152, 1315, 904,
	1178, 1490, 1091, 1092, 1176, 738, 736, 737, 735, 1159,
	740, 739, 734, 283, 394, 948, 81, 80, 80, 726,
	1025, 1108, 609, 1186, 72, 1188, 1189, 1190, 1217, 865,
	1172, 1173, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 80, 1216, 1031,
	831, 280, 577, 1193, 578, 285, 645, 1071, 1160, 1199,
	400, 1280, 270, 840, 597, 1461, 1411, 1109, 672, 1215,
	917, 80, 333, 855, 346, 343, 344, 846, 1123, 619,
	271, 271, 271, 331, 323, 705, 698, 924, 940, 81,
	890, 938, 937, 1230, 1231, 81, 389, 1291, 1287, 980,
	704, 1235, 1365, 1184, 1185, 1468, 1239, 850, 26, 59,
	318, 19, 18, 17, 20, 16, 334, 15, 80, 80,
	1274, 1240, 14, 1258, 1131, 1265, 544, 1246, 30, 1277,
	21, 13, 1259, 12, 11, 10, 9, 8, 7, 1234,
	6, 5, 80, 4, 309, 23, 2, 1068, 0, 0,
	0, 864, 0, 0, 1293, 1284, 0, 80, 0, 80,
	80, 0, 0, 1175, 1175, 0, 1307, 0, 0, 0,
	1300, 0, 0, 1299, 0, 1279, 0, 0, 1321, 0,
	0, 1302, 0, 0, 1312, 1313, 1306, 270, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1319,
	1320, 1238, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 80, 0, 1338, 80, 80, 80, 270,
	271, 0, 0, 0, 80, 81, 0, 270, 1330, 0,
	271, 271, 81, 81, 81, 1269, 0, 0, 271, 0,
	0, 271, 0, 1331, 271, 1333, 0, 0, 271, 1346,
	81, 1343, 1344, 0, 357, 81, 81, 81, 271, 81,
	81, 1345, 0, 1353, 1329, 0, 0, 0, 0, 81,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 1084, 1085, 1332, 1131, 79, 980, 0, 980,
	1371, 0, 0, 0, 0, 0, 1342, 80, 81, 1381,
	0, 1380, 0, 271, 1167, 80, 0, 0, 1390, 81,
	0, 0, 0, 0, 359, 51, 0, 0, 0, 0,
	80, 0, 401, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 1350, 1351, 0, 1352, 0, 0, 1354,
	0, 1356, 1414, 635, 636, 628, 629, 630, 631, 632,
	633, 634, 627, 81, 1238, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 80, 80, 0,
	80, 0, 0, 1420, 311, 80, 1277, 80, 80, 80,
	270, 0, 1425, 80, 0, 0, 81, 81, 1432, 0,
	0, 0, 0, 0, 271, 1393, 0, 923, 1438, 1444,
	80, 270, 271, 271, 1451, 0, 271, 271, 0, 0,
	271, 271, 271, 81, 1452, 1433, 1453, 1434, 1436, 1437,
	0, 0, 1399, 1427, 1401, 0, 81, 980, 0, 0,
	1277, 1475, 1484, 0, 0, 0, 0, 80, 1483, 0,
	1459, 1482, 0, 0, 0, 0, 647, 0, 80, 80,
	1413, 0, 0, 0, 0, 0, 1498, 1408, 1497, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	1506, 0, 566, 0, 1131, 0, 1476, 0, 1460, 270,
	271, 81, 0, 81, 0, 0, 0, 80, 0, 271,
	271, 271, 271, 271, 0, 271, 271, 1242, 1243, 271,
	81, 1515, 0, 706, 0, 0, 0, 1520, 1522, 0,
	80, 1260, 1261, 0, 1262, 1263, 271, 1369, 0, 0,
	0, 271, 0, 271, 271, 1535, 1270, 1271, 271, 0,
	1546, 0, 0, 401, 0, 0, 0, 401, 0, 401,
	0, 0, 0, 0, 0, 401, 0, 0, 0, 0,
	1524, 0, 0, 0, 0, 0, 1510, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 1368,
	0, 637, 0, 0, 0, 0, 615, 0, 1408, 980,
	1363, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 567, 0, 0, 0, 567, 0, 567,
	0, 0, 0, 0, 0, 567, 0, 0, 0, 626,
	625, 635, 636, 628, 629, 630, 631, 632, 633, 634,
	627, 0, 0, 637, 321, 0, 51, 1362, 0, 0,
	0, 271, 271, 271, 271, 271, 0, 0, 0, 0,
	0, 646, 0, 271, 648, 0, 271, 1361, 0, 401,
	271, 1348, 0, 0, 271, 727, 0, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 0,
	0, 637, 659, 81, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 0, 674, 677, 677, 677, 683, 677,
	677, 683, 677, 691, 692, 693, 694, 695, 696, 697,
	0, 707, 0, 590, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 0, 0, 637, 0,
	1360, 81, 81, 0, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 0, 868, 637, 626,
	625, 635, 636, 628, 629, 630, 631, 632, 633, 634,
	627, 81, 0, 637, 0, 573, 0, 576, 0, 0,
	0, 0, 0, 587, 0, 0, 271, 0, 0, 0,
	1415, 1416, 1417, 1418, 1419, 81, 0, 0, 1422, 1423,
	0, 0, 0, 0, 0, 401, 0, 0, 0, 0,
	0, 0, 401, 401, 401, 0, 0, 626, 625, 635,
	636, 628, 629, 630, 631, 632, 633, 634, 627, 0,
	401, 637, 0, 0, 0, 401, 401, 401, 0, 401,
	401, 0, 81, 81, 706, 0, 0, 0, 706, 401,
	401, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 81, 0, 0, 0,
	0, 0, 567, 567, 567, 0, 0, 0, 847, 0,
	0, 81, 0, 81, 81, 0, 0, 0, 0, 615,
	567, 0, 401, 0, 0, 567, 567, 567, 0, 567,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 567,
	567, 271, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 895, 0, 0, 0, 81, 0, 0,
	81, 81, 81, 271, 0, 0, 0, 0, 81, 921,
	0, 271, 595, 599, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1539, 0, 0, 925, 926, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 0, 0, 0, 663, 0,
	0, 0, 0, 0, 662, 0, 401, 868, 0, 0,
	0, 0, 0, 673, 0, 0, 0, 0, 0, 844,
	0, 81, 0, 784, 0, 0, 0, 0, 0, 81,
	791, 792, 793, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 81, 0, 707, 0, 811, 0,
	707, 81, 0, 815, 816, 817, 0, 819, 820, 0,
	0, 401, 0, 401, 0, 0, 0, 824, 825, 0,
	0, 0, 0, 706, 706, 706, 706, 706, 901, 903,
	401, 0, 0, 0, 0, 0, 0, 0, 706, 0,
	0, 81, 81, 0, 81, 0, 706, 0, 0, 81,
	0, 81, 81, 81, 271, 0, 0, 81, 0, 0,
	0, 0, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 567, 81, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 271, 814, 0, 0, 0, 0, 0,
	921, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 401, 0, 853, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 1128, 0,
	0, 707, 707, 707, 707, 707, 0, 0, 0, 1028,
	0, 1030, 0, 0, 0, 0, 951, 0, 1151, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 1057, 0,
	0, 1197, 401, 0, 0, 0, 0, 0, 662, 0,
	1089, 907, 908, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 1095, 1096, 1097, 0, 0, 0, 0, 1103,
	0, 401, 1106, 1107, 0, 0, 0, 0, 1113, 0,
	0, 596, 1115, 0, 0, 1118, 1119, 1120, 1121, 1122,
	0, 0, 0, 0, 0, 401, 0, 0, 0, 0,
	0, 0, 567, 0, 0, 0, 0, 0, 1146, 0,
	974, 0, 0, 706, 0, 0, 0, 269, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 401,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 1281, 1283, 0, 322, 0, 0, 392, 0,
	0, 0, 0, 269, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 401, 0, 401, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 25, 52, 27, 28, 0,
	1278, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 29, 48,
	49, 1066, 1067, 0, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1334, 0, 38,
	1339, 1340, 1341, 54, 0, 621, 0, 624, 401, 1244,
	1245, 0, 0, 638, 639, 640, 641, 642, 643, 644,
	1198, 622, 623, 620, 626, 625, 635, 636, 628, 629,
	630, 631, 632, 633, 634, 627, 0, 0, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 1229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 1112, 0, 31, 32, 34, 33,
	36, 707, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 1395,
	0, 0, 0, 0, 0, 37, 44, 45, 269, 1364,
	46, 47, 35, 269, 401, 0, 0, 0, 0, 269,
	0, 401, 0, 0, 0, 269, 39, 40, 0, 41,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1386, 1387, 1388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 1430, 0, 1431, 0, 0, 1347, 0, 1395,
	0, 1395, 1395, 1395, 567, 1349, 0, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 1358, 1359, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1373, 1374, 1375, 0,
	1378, 0, 53, 0, 0, 0, 0, 1278, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 1389, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 269, 269, 269,
	0, 0, 401, 401, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 1508, 0, 0, 0, 1267, 0, 0, 0,
	0, 1278, 0, 51, 0, 0, 0, 0, 0, 0,
	0, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 1301,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 1466, 1467, 0, 1471, 0,
	1472, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 1480, 1481, 0, 0, 0, 0,
	0, 0, 0, 1533, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 269, 0,
	0, 0, 0, 0, 0, 269, 1502, 0, 269, 0,
	0, 269, 0, 0, 1507, 809, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 1512, 1367, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 662, 0, 0, 0, 0, 0, 0,
	0, 1382, 0, 0, 1383, 0, 0, 1385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 1547, 1548, 809,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 743, 0, 0, 322, 322, 0, 0,
	322, 322, 322, 0, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 322, 322, 322, 322,
	0, 269, 756, 0, 0, 0, 0, 0, 0, 269,
	956, 0, 0, 269, 269, 0, 0, 269, 964, 809,
	0, 0, 0, 0, 0, 769, 772, 773, 774, 775,
	776, 777, 0, 778, 779, 780, 781, 782, 757, 758,
	759, 760, 741, 742, 770, 0, 744, 0, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 761, 762,
	763, 764, 765, 766, 767, 768, 0, 1500, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 269, 269, 269,
	269, 0, 269, 269, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 771, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 269, 0,
	1061, 1062, 0, 0, 0, 269, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 922, 269, 269,
	269, 269, 269, 0, 0, 0, 0, 0, 0, 0,
	1145, 0, 0, 269, 0, 0, 0, 956, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 511, 499, 0, 456,
	514, 429, 446, 522, 447, 450, 487, 414, 469, 170,
	444, 956, 433, 409, 440, 410, 431, 458, 114, 462,
	428, 501, 472, 513, 142, 434, 520, 144, 478, 0,
	216, 158, 269, 0, 460, 503, 467, 496, 455, 488,
	419, 477, 515, 445, 485, 516, 0, 0, 0, 82,
	83, 84, 0, 981, 982, 0, 0, 0, 0, 0,
	104, 0, 482, 510, 442, 484, 486, 408, 479, 0,
	412, 415, 521, 506, 437, 438, 1168, 0, 0, 0,
	0, 0, 0, 459, 468, 493, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 435, 922, 476, 0, 0,
	0, 416, 413, 0, 0, 457, 0, 0, 0, 418,
	269, 436, 494, 0, 406, 123, 498, 505, 454, 272,
	509, 452, 451, 512, 189, 0, 220, 126, 141, 100,
	138, 86, 96, 0, 125, 167, 196, 200, 502, 432,
	441, 108, 439, 198, 177, 236, 475, 179, 197, 145,
	226, 190, 235, 245, 246, 223, 243, 250, 213, 89,
	222, 234, 105, 208, 91, 232, 219, 156, 135, 136,
	90, 0, 194, 113, 121, 110, 169, 229, 230, 109,
	253, 97, 242, 93, 98, 241, 163, 225, 233, 157,
	150, 92, 231, 155, 149, 140, 117, 128, 187, 147,
	188, 129, 160, 159, 161, 0, 411, 0, 217, 239,
	254, 102, 427, 224, 248, 249, 0, 0, 103, 122,
	116, 186, 120, 162, 99, 131, 214, 139, 146, 193,
	252, 176, 199, 106, 238, 215, 423, 426, 421, 422,
	470, 471, 517, 518, 519, 495, 417, 0, 424, 425,
	0, 500, 507, 508, 474, 85, 94, 143, 251, 191,
	119, 240, 407, 420, 112, 430, 0, 0, 443, 448,
	449, 461, 463, 464, 465, 466, 473, 480, 481, 483,
	489, 490, 491, 492, 497, 504, 523, 87, 88, 95,
	101, 107, 111, 115, 118, 124, 127, 130, 132, 133,
	134, 137, 148, 151, 152, 153, 154, 164, 165, 166,
	168, 171, 172, 173, 174, 175, 178, 180, 181, 182,
	183, 184, 185, 192, 195, 201, 202, 203, 204, 205,
	206, 207, 209, 210, 211, 212, 218, 221, 227, 228,
	237, 244, 247, 511, 499, 0, 456, 514, 429, 446,
	522, 447, 450, 487, 414, 469, 170, 444, 0, 433,
	409, 440, 410, 431, 458, 114, 462, 428, 501, 472,
	513, 142, 434, 520, 144, 478, 0, 216, 158, 0,
	0, 460, 503, 467, 496, 455, 488, 419, 477, 515,
	445, 485, 516, 0, 0, 0, 82, 83, 84, 0,
	981, 982, 0, 0, 0, 0, 0, 104, 0, 482,
	510, 442, 484, 486, 408, 479, 0, 412, 415, 521,
	506, 437, 438, 0, 0, 0, 0, 0, 0, 0,
	459, 468, 493, 453, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 476, 0, 0, 0, 416, 413,
	0, 0, 457, 0, 0, 0, 418, 0, 436, 494,
	0, 406, 123, 498, 505, 454, 272, 509, 452, 451,
	512, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 502, 432, 441, 108, 439,
	198, 177, 236, 475, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 411, 0, 217, 239, 254, 102, 427,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 423, 426, 421, 422, 470, 471, 517,
	518, 519, 495, 417, 0, 424, 425, 0, 500, 507,
	508, 474, 85, 94, 143, 251, 191, 119, 240, 407,
	420, 112, 430, 0, 0, 443, 448, 449, 461, 463,
	464, 465, 466, 473, 480, 481, 483, 489, 490, 491,
	492, 497, 504, 523, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	511, 499, 0, 456, 514, 429, 446, 522, 447, 450,
	487, 414, 469, 170, 444, 0, 433, 409, 440, 410,
	431, 458, 114, 462, 428, 501, 472, 513, 142, 434,
	520, 144, 478, 0, 216, 158, 0, 0, 460, 503,
	467, 496, 455, 488, 419, 477, 515, 445, 485, 516,
	54, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 482, 510, 442, 484,
	486, 408, 479, 0, 412, 415, 521, 506, 437, 438,
	0, 0, 0, 0, 0, 0, 0, 459, 468, 493,
	453, 0, 0, 0, 0, 0, 0, 0, 0, 435,
	0, 476, 0, 0, 0, 416, 413, 0, 0, 457,
	0, 0, 0, 418, 0, 436, 494, 0, 406, 123,
	498, 505, 454, 272, 509, 452, 451, 512, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 502, 432, 441, 108, 439, 198, 177, 236,
	475, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	411, 0, 217, 239, 254, 102, 427, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	423, 426, 421, 422, 470, 471, 517, 518, 519, 495,
	417, 0, 424, 425, 0, 500, 507, 508, 474, 85,
	94, 143, 251, 191, 119, 240, 407, 420, 112, 430,
	0, 0, 443, 448, 449, 461, 463, 464, 465, 466,
	473, 480, 481, 483, 489, 490, 491, 492, 497, 504,
	523, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 511, 499, 0,
	456, 514, 429, 446, 522, 447, 450, 487, 414, 469,
	170, 444, 0, 433, 409, 440, 410, 431, 458, 114,
	462, 428, 501, 472, 513, 142, 434, 520, 144, 478,
	0, 216, 158, 0, 0, 460, 503, 467, 496, 455,
	488, 419, 477, 515, 445, 485, 516, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 482, 510, 442, 484, 486, 408, 479,
	0, 412, 415, 521, 506, 437, 438, 0, 0, 0,
	0, 0, 0, 0, 459, 468, 493, 453, 0, 0,
	0, 0, 0, 0, 1237, 0, 435, 0, 476, 0,
	0, 0, 416, 413, 0, 0, 457, 0, 0, 0,
	418, 0, 436, 494, 0, 406, 123, 498, 505, 454,
	272, 509, 452, 451, 512, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 502,
	432, 441, 108, 439, 198, 177, 236, 475, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 411, 0, 217,
	239, 254, 102, 427, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 423, 426, 421,
	422, 470, 471, 517, 518, 519, 495, 417, 0, 424,
	425, 0, 500, 507, 508, 474, 85, 94, 143, 251,
	191, 119, 240, 407, 420, 112, 430, 0, 0, 443,
	448, 449, 461, 463, 464, 465, 466, 473, 480, 481,
	483, 489, 490, 491, 492, 497, 504, 523, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 511, 499, 0, 456, 514, 429,
	446, 522, 447, 450, 487, 414, 469, 170, 444, 0,
	433, 409, 440, 410, 431, 458, 114, 462, 428, 501,
	472, 513, 142, 434, 520, 144, 478, 0, 216, 158,
	0, 0, 460, 503, 467, 496, 455, 488, 419, 477,
	515, 445, 485, 516, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	482, 510, 442, 484, 486, 408, 479, 0, 412, 415,
	521, 506, 437, 438, 0, 0, 0, 0, 0, 0,
	0, 459, 468, 493, 453, 0, 0, 0, 0, 0,
	0, 965, 0, 435, 0, 476, 0, 0, 0, 416,
	413, 0, 0, 457, 0, 0, 0, 418, 0, 436,
	494, 0, 406, 123, 498, 505, 454, 272, 509, 452,
	451, 512, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 502, 432, 441, 108,
	439, 198, 177, 236, 475, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 411, 0, 217, 239, 254, 102,
	427, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 423, 426, 421, 422, 470, 471,
	517, 518, 519, 495, 417, 0, 424, 425, 0, 500,
	507, 508, 474, 85, 94, 143, 251, 191, 119, 240,
	407, 420, 112, 430, 0, 0, 443, 448, 449, 461,
	463, 464, 465, 466, 473, 480, 481, 483, 489, 490,
	491, 492, 497, 504, 523, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 511, 499, 0, 456, 514, 429, 446, 522, 447,
	450, 487, 414, 469, 170, 444, 0, 433, 409, 440,
	410, 431, 458, 114, 462, 428, 501, 472, 513, 142,
	434, 520, 144, 478, 0, 216, 158, 0, 0, 460,
	503, 467, 496, 455, 488, 419, 477, 515, 445, 485,
	516, 0, 0, 0, 82, 83, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 482, 510, 442,
	484, 486, 408, 479, 0, 412, 415, 521, 506, 437,
	438, 0, 0, 0, 0, 0, 0, 0, 459, 468,
	493, 453, 0, 0, 0, 0, 0, 0, 861, 0,
	435, 0, 476, 0, 0, 0, 416, 413, 0, 0,
	457, 0, 0, 0, 418, 0, 436, 494, 0, 406,
	123, 498, 505, 454, 272, 509, 452, 451, 512, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 502, 432, 441, 108, 439, 198, 177,
	236, 475, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 411, 0, 217, 239, 254, 102, 427, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 423, 426, 421, 422, 470, 471, 517, 518, 519,
	495, 417, 0, 424, 425, 0, 500, 507, 508, 474,
	85, 94, 143, 251, 191, 119, 240, 407, 420, 112,
	430, 0, 0, 443, 448, 449, 461, 463, 464, 465,
	466, 473, 480, 481, 483, 489, 490, 491, 492, 497,
	504, 523, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 511, 499,
	0, 456, 514, 429, 446, 522, 447, 450, 487, 414,
	469, 170, 444, 0, 433, 409, 440, 410, 431, 458,
	114, 462, 428, 501, 472, 513, 142, 434, 520, 144,
	478, 0, 216, 158, 0, 0, 460, 503, 467, 496,
	455, 488, 419, 477, 515, 445, 485, 516, 0, 0,
	0, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 482, 510, 442, 484, 486, 408,
	479, 0, 412, 415, 521, 506, 437, 438, 0, 0,
	0, 0, 0, 0, 0, 459, 468, 493, 453, 0,
	0, 0, 0, 0, 0, 0, 0, 435, 0, 476,
	0, 0, 0, 416, 413, 0, 0, 457, 0, 0,
	0, 418, 0, 436, 494, 0, 406, 123, 498, 505,
	454, 272, 509, 452, 451, 512, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	502, 432, 441, 108, 439, 198, 177, 236, 475, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 411, 0,
	217, 239, 254, 102, 427, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 423, 426,
	421, 422, 470, 471, 517, 518, 519, 495, 417, 0,
	424, 425, 0, 500, 507, 508, 474, 85, 94, 143,
	251, 191, 119, 240, 407, 420, 112, 430, 0, 0,
	443, 448, 449, 461, 463, 464, 465, 466, 473, 480,
	481, 483, 489, 490, 491, 492, 497, 504, 523, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247, 511, 499, 0, 456, 514,
	429, 446, 522, 447, 450, 487, 414, 469, 170, 444,
	0, 433, 409, 440, 410, 431, 458, 114, 462, 428,
	501, 472, 513, 142, 434, 520, 144, 478, 0, 216,
	158, 0, 0, 460, 503, 467, 496, 455, 488, 419,
	477, 515, 445, 485, 516, 0, 0, 0, 82, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 482, 510, 442, 484, 486, 408, 479, 0, 412,
	415, 521, 506, 437, 438, 0, 0, 0, 0, 0,
	0, 0, 459, 468, 493, 453, 0, 0, 0, 0,
	0, 0, 0, 0, 435, 0, 476, 0, 0, 0,
	416, 413, 0, 0, 457, 0, 0, 0, 418, 0,
	436, 494, 0, 406, 123, 498, 505, 454, 272, 509,
	452, 451, 512, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 502, 432, 441,
	108, 439, 198, 177, 236, 475, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 404, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 411, 0, 217, 239, 254,
	102, 427, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 405, 403, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 423, 426, 421, 422, 470,
	471, 517, 518, 519, 495, 417, 0, 424, 425, 0,
	500, 507, 508, 474, 85, 94, 143, 251, 191, 119,
	240, 407, 420, 112, 430, 0, 0, 443, 448, 449,
	461, 463, 464, 465, 466, 473, 480, 481, 483, 489,
	490, 491, 492, 497, 504, 523, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 511, 499, 0, 456, 514, 429, 446, 522,
	447, 450, 487, 414, 469, 170, 444, 0, 433, 409,
	440, 410, 431, 458, 114, 462, 428, 501, 472, 513,
	142, 434, 520, 144, 478, 0, 216, 158, 0, 0,
	460, 503, 467, 496, 455, 488, 419, 477, 515, 445,
	485, 516, 0, 0, 0, 82, 83, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 482, 510,
	442, 484, 486, 408, 479, 0, 412, 415, 521, 506,
	437, 438, 0, 0, 0, 0, 0, 0, 0, 459,
	468, 493, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 435, 0, 476, 0, 0, 0, 416, 413, 0,
	0, 457, 0, 0, 0, 418, 0, 436, 494, 0,
	406, 123, 498, 505, 454, 272, 509, 452, 451, 512,
	189, 0, 220, 126, 141, 100, 138, 86, 96, 0,
	125, 167, 196, 200, 502, 432, 441, 108, 439, 198,
	177, 236, 475, 179, 197, 145, 226, 190, 235, 245,
	246, 223, 243, 250, 213, 89, 222, 720, 105, 208,
	91, 232, 219, 156, 135, 136, 90, 0, 194, 113,
	121, 110, 169, 229, 230, 109, 253, 97, 242, 93,
	404, 241, 163, 225, 233, 157, 150, 92, 231, 155,
	149, 140, 117, 128, 187, 147, 188, 129, 160, 159,
	161, 0, 411, 0, 217, 239, 254, 102, 427, 224,
	248, 249, 0, 0, 103, 122, 116, 186, 120, 405,
	403, 131, 214, 139, 146, 193, 252, 176, 199, 106,
	238, 215, 423, 426, 421, 422, 470, 471, 517, 518,
	519, 495, 417, 0, 424, 425, 0, 500, 507, 508,
	474, 85, 94, 143, 251, 191, 119, 240, 407, 420,
	112, 430, 0, 0, 443, 448, 449, 461, 463, 464,
	465, 466, 473, 480, 481, 483, 489, 490, 491, 492,
	497, 504, 523, 87, 88, 95, 101, 107, 111, 115,
	118, 124, 127, 130, 132, 133, 134, 137, 148, 151,
	152, 153, 154, 164, 165, 166, 168, 171, 172, 173,
	174, 175, 178, 180, 181, 182, 183, 184, 185, 192,
	195, 201, 202, 203, 204, 205, 206, 207, 209, 210,
	211, 212, 218, 221, 227, 228, 237, 244, 247, 511,
	499, 0, 456, 514, 429, 446, 522, 447, 450, 487,
	414, 469, 170, 444, 0, 433, 409, 440, 410, 431,
	458, 114, 462, 428, 501, 472, 513, 142, 434, 520,
	144, 478, 0, 216, 158, 0, 0, 460, 503, 467,
	496, 455, 488, 419, 477, 515, 445, 485, 516, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 482, 510, 442, 484, 486,
	408, 479, 0, 412, 415, 521, 506, 437, 438, 0,
	0, 0, 0, 0, 0, 0, 459, 468, 493, 453,
	0, 0, 0, 0, 0, 0, 0, 0, 435, 0,
	476, 0, 0, 0, 416, 413, 0, 0, 457, 0,
	0, 0, 418, 0, 436, 494, 0, 406, 123, 498,
	505, 454, 272, 509, 452, 451, 512, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 502, 432, 441, 108, 439, 198, 177, 236, 475,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 395, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 404, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 411,
	0, 217, 239, 254, 102, 427, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 405, 403, 398, 397,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 423,
	426, 421, 422, 470, 471, 517, 518, 519, 495, 417,
	0, 424, 425, 0, 500, 507, 508, 474, 85, 94,
	143, 251, 191, 119, 240, 407, 420, 112, 430, 0,
	0, 443, 448, 449, 461, 463, 464, 465, 466, 473,
	480, 481, 483, 489, 490, 491, 492, 497, 504, 523,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 897,
	0, 329, 0, 0, 0, 114, 0, 326, 0, 0,
	0, 142, 898, 369, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 348,
	347, 350, 351, 352, 353, 0, 0, 104, 349, 354,
	355, 356, 0, 0, 0, 324, 341, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 339,
	320, 0, 0, 0, 383, 0, 340, 0, 0, 335,
	336, 337, 342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 382, 0, 0, 272, 0, 0, 380,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 370, 381, 376, 377, 374, 375, 373,
	372, 371, 384, 362, 363, 364, 365, 367, 0, 378,
	379, 366, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 329, 0, 0, 0, 114,
	0, 326, 0, 0, 0, 142, 0, 369, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 360, 361, 0,
	0, 0, 0, 0, 0, 972, 0, 54, 0, 0,
	82, 83, 84, 348, 347, 350, 351, 352, 353, 0,
	0, 104, 349, 354, 355, 356, 973, 0, 0, 324,
	341, 0, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 339, 0, 0, 0, 0, 383, 0,
	340, 0, 0, 335, 336, 337, 342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 382, 0, 0,
	272, 0, 0, 380, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 370, 381, 376,
	377, 374, 375, 373, 372, 371, 384, 362, 363, 364,
	365, 367, 0, 378, 379, 366, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 329,
	0, 0, 0, 114, 0, 326, 0, 0, 0, 142,
	0, 369, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 591, 82, 83, 84, 348, 347, 350,
	351, 352, 353, 0, 0, 104, 349, 354, 355, 356,
	0, 0, 0, 324, 341, 0, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 339, 0, 0,
	0, 0, 383, 0, 340, 0, 0, 335, 336, 337,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 382, 0, 0, 272, 0, 0, 380, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 370, 381, 376, 377, 374, 375, 373, 372, 371,
	384, 362, 363, 364, 365, 367, 0, 378, 379, 366,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 329, 0, 0, 0, 114, 0, 326,
	0, 0, 0, 142, 0, 369, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 348, 347, 350, 351, 352, 353, 0, 0, 104,
	349, 354, 355, 356, 0, 0, 0, 324, 341, 0,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 339, 320, 0, 0, 0, 383, 0, 340, 0,
	0, 335, 336, 337, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 382, 0, 0, 272, 0,
	0, 380, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 370, 381, 376, 377, 374,
	375, 373, 372, 371, 384, 362, 363, 364, 365, 367,
	0, 378, 379, 366, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 329, 0, 0,
	0, 114, 0, 326, 0, 0, 0, 142, 0, 369,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 348, 913, 350, 351, 352,
	353, 0, 0, 104, 349, 354, 355, 356, 0, 0,
	0, 324, 341, 0, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 339, 320, 0, 0, 0,
	383, 0, 340, 0, 0, 335, 336, 337, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 382,
	0, 0, 272, 0, 0, 380, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 370,
	381, 376, 377, 374, 375, 373, 372, 371, 384, 362,
	363, 364, 365, 367, 0, 378, 379, 366, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 329, 0, 0, 0, 114, 0, 326, 0, 0,
	0, 142, 0, 369, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 348,
	910, 350, 351, 352, 353, 0, 0, 104, 349, 354,
	355, 356, 0, 0, 0, 324, 341, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 339,
	320, 0, 0, 0, 383, 0, 340, 0, 0, 335,
	336, 337, 342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 382, 0, 0, 272, 0, 0, 380,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 370, 381, 376, 377, 374, 375, 373,
	372, 371, 384, 362, 363, 364, 365, 367, 0, 378,
	379, 366, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 329, 0, 0,
	0, 114, 0, 326, 0, 0, 0, 142, 0, 369,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 360,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 82, 83, 84, 348, 347, 350, 351, 352,
	353, 0, 0, 104, 349, 354, 355, 356, 0, 0,
	0, 324, 341, 0, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 338, 339, 0, 0, 0, 0,
	383, 0, 340, 0, 0, 335, 336, 337, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 382,
	0, 0, 272, 0, 0, 380, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 370,
	381, 376, 377, 374, 375, 373, 372, 371, 384, 362,
	363, 364, 365, 367, 0, 378, 379, 366, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 329, 0, 0, 0, 114, 0, 326, 0, 0,
	0, 142, 0, 369, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 82, 83, 84, 348,
	347, 350, 351, 352, 353, 0, 0, 104, 349, 354,
	355, 356, 0, 0, 0, 324, 341, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 339,
	0, 0, 0, 0, 383, 0, 340, 0, 0, 335,
	336, 337, 342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 382, 0, 0, 272, 0, 0, 380,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 370, 381, 376, 377, 374, 375, 373,
	372, 371, 384, 362, 363, 364, 365, 367, 0, 378,
	379, 366, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 369, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 360, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	82, 83, 84, 348, 347, 350, 351, 352, 353, 0,
	0, 104, 349, 354, 355, 356, 0, 0, 0, 0,
	341, 0, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 339, 0, 0, 0, 0, 383, 0,
	340, 0, 0, 335, 336, 337, 342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 382, 0, 0,
	272, 0, 0, 380, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 1540, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 370, 381, 376,
	377, 374, 375, 373, 372, 371, 384, 362, 363, 364,
	365, 367, 0, 378, 379, 366, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 369, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 360, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 591, 82, 83, 84, 348, 347, 350,
	351, 352, 353, 0, 0, 104, 349, 354, 355, 356,
	0, 0, 0, 0, 341, 0, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 339, 0, 0,
	0, 0, 383, 0, 340, 0, 0, 335, 336, 337,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 382, 0, 0, 272, 0, 0, 380, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 370, 381, 376, 377, 374, 375, 373, 372, 371,
	384, 362, 363, 364, 365, 367, 0, 378, 379, 366,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 142, 0, 369, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 82, 83,
	84, 348, 347, 350, 351, 352, 353, 0, 0, 104,
	349, 354, 355, 356, 0, 0, 0, 0, 341, 0,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 339, 0, 0, 0, 0, 383, 0, 340, 0,
	0, 335, 336, 337, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 382, 0, 0, 272, 0,
	0, 380, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 370, 381, 376, 377, 374,
	375, 373, 372, 371, 384, 362, 363, 364, 365, 367,
	0, 378, 379, 366, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 0, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 625, 635, 636, 628, 629, 630, 631, 632, 633,
	634, 627, 0, 0, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	614, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 84, 0,
	616, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 611, 610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 272, 0, 0, 0,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 76, 77, 0,
	73, 0, 0, 0, 78, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 955, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 0, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 0, 957, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 272, 0, 0, 0, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	272, 0, 0, 0, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 955, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 0, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 0, 957, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 272, 0, 0, 0, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 953, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 0, 848, 0, 0, 849, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 729, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 728, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 0, 0, 0, 0,
	0, 142, 0, 0, 144, 0, 0, 216, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 82, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 272, 0, 0, 0,
	0, 189, 0, 220, 126, 141, 100, 138, 86, 96,
	0, 125, 167, 196, 200, 0, 0, 0, 108, 0,
	198, 177, 236, 0, 179, 197, 145, 226, 190, 235,
	245, 246, 223, 243, 250, 213, 89, 222, 234, 105,
	208, 91, 232, 219, 156, 135, 136, 90, 0, 194,
	113, 121, 110, 169, 229, 230, 109, 253, 97, 242,
	93, 98, 241, 163, 225, 233, 157, 150, 92, 231,
	155, 149, 140, 117, 128, 187, 147, 188, 129, 160,
	159, 161, 0, 0, 0, 217, 239, 254, 102, 0,
	224, 248, 249, 0, 0, 103, 122, 116, 186, 120,
	162, 99, 131, 214, 139, 146, 193, 252, 176, 199,
	106, 238, 215, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 94, 143, 251, 191, 119, 240, 0,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 95, 101, 107, 111,
	115, 118, 124, 127, 130, 132, 133, 134, 137, 148,
	151, 152, 153, 154, 164, 165, 166, 168, 171, 172,
	173, 174, 175, 178, 180, 181, 182, 183, 184, 185,
	192, 195, 201, 202, 203, 204, 205, 206, 207, 209,
	210, 211, 212, 218, 221, 227, 228, 237, 244, 247,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	0, 0, 0, 0, 0, 142, 0, 0, 144, 0,
	0, 216, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	82, 83, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	272, 0, 0, 0, 0, 189, 0, 220, 126, 141,
	100, 138, 86, 96, 0, 125, 167, 196, 200, 0,
	0, 0, 108, 0, 198, 177, 236, 0, 179, 197,
	145, 226, 190, 235, 245, 246, 223, 243, 250, 213,
	89, 222, 234, 105, 208, 91, 232, 219, 156, 135,
	136, 90, 0, 194, 113, 121, 110, 169, 229, 230,
	109, 253, 97, 242, 93, 98, 241, 163, 225, 233,
	157, 150, 92, 231, 155, 149, 140, 117, 128, 187,
	147, 188, 129, 160, 159, 161, 0, 0, 0, 217,
	239, 254, 102, 0, 224, 248, 249, 0, 0, 103,
	122, 116, 186, 120, 162, 99, 131, 214, 139, 146,
	193, 252, 176, 199, 106, 238, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 94, 143, 251,
	191, 119, 240, 0, 0, 112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	95, 101, 107, 111, 115, 118, 124, 127, 130, 132,
	133, 134, 137, 148, 151, 152, 153, 154, 164, 165,
	166, 168, 171, 172, 173, 174, 175, 178, 180, 181,
	182, 183, 184, 185, 192, 195, 201, 202, 203, 204,
	205, 206, 207, 209, 210, 211, 212, 218, 221, 227,
	228, 237, 244, 247, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 142,
	0, 0, 144, 0, 0, 216, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 84, 0, 957, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 272, 0, 0, 0, 0, 189,
	0, 220, 126, 141, 100, 138, 86, 96, 0, 125,
	167, 196, 200, 0, 0, 0, 108, 0, 198, 177,
	236, 0, 179, 197, 145, 226, 190, 235, 245, 246,
	223, 243, 250, 213, 89, 222, 234, 105, 208, 91,
	232, 219, 156, 135, 136, 90, 0, 194, 113, 121,
	110, 169, 229, 230, 109, 253, 97, 242, 93, 98,
	241, 163, 225, 233, 157, 150, 92, 231, 155, 149,
	140, 117, 128, 187, 147, 188, 129, 160, 159, 161,
	0, 0, 0, 217, 239, 254, 102, 0, 224, 248,
	249, 0, 0, 103, 122, 116, 186, 120, 162, 99,
	131, 214, 139, 146, 193, 252, 176, 199, 106, 238,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 143, 251, 191, 119, 240, 0, 0, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 95, 101, 107, 111, 115, 118,
	124, 127, 130, 132, 133, 134, 137, 148, 151, 152,
	153, 154, 164, 165, 166, 168, 171, 172, 173, 174,
	175, 178, 180, 181, 182, 183, 184, 185, 192, 195,
	201, 202, 203, 204, 205, 206, 207, 209, 210, 211,
	212, 218, 221, 227, 228, 237, 244, 247, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 0,
	0, 0, 0, 142, 0, 0, 144, 0, 0, 216,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 83,
	84, 0, 616, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 272, 0,
	0, 0, 0, 189, 0, 220, 126, 141, 100, 138,
	86, 96, 0, 125, 167, 196, 200, 0, 0, 0,
	108, 0, 198, 177, 236, 0, 179, 197, 145, 226,
	190, 235, 245, 246, 223, 243, 250, 213, 89, 222,
	234, 105, 208, 91, 232, 219, 156, 135, 136, 90,
	0, 194, 113, 121, 110, 169, 229, 230, 109, 253,
	97, 242, 93, 98, 241, 163, 225, 233, 157, 150,
	92, 231, 155, 149, 140, 117, 128, 187, 147, 188,
	129, 160, 159, 161, 0, 0, 0, 217, 239, 254,
	102, 0, 224, 248, 249, 0, 0, 103, 122, 116,
	186, 120, 162, 99, 131, 214, 139, 146, 193, 252,
	176, 199, 106, 238, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 94, 143, 251, 191, 119,
	240, 0, 0, 112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 95, 101,
	107, 111, 115, 118, 124, 127, 130, 132, 133, 134,
	137, 148, 151, 152, 153, 154, 164, 165, 166, 168,
	171, 172, 173, 174, 175, 178, 180, 181, 182, 183,
	184, 185, 192, 195, 201, 202, 203, 204, 205, 206,
	207, 209, 210, 211, 212, 218, 221, 227, 228, 237,
	244, 247, 170, 0, 0, 0, 0, 0, 0, 0,
	699, 114, 0, 0, 0, 0, 0, 142, 0, 0,
	144, 0, 0, 216, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 272, 0, 0, 0, 0, 189, 0, 220,
	126, 141, 100, 138, 86, 96, 0, 125, 167, 196,
	200, 0, 0, 0, 108, 0, 198, 177, 236, 0,
	179, 197, 145, 226, 190, 235, 245, 246, 223, 243,
	250, 213, 89, 222, 234, 105, 208, 91, 232, 219,
	156, 135, 136, 90, 0, 194, 113, 121, 110, 169,
	229, 230, 109, 253, 97, 242, 93, 98, 241, 163,
	225, 233, 157, 150, 92, 231, 155, 149, 140, 117,
	128, 187, 147, 188, 129, 160, 159, 161, 0, 0,
	0, 217, 239, 254, 102, 0, 224, 248, 249, 0,
	0, 103, 122, 116, 186, 120, 162, 99, 131, 214,
	139, 146, 193, 252, 176, 199, 106, 238, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 94,
	143, 251, 191, 119, 240, 0, 0, 112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 95, 101, 107, 111, 115, 118, 124, 127,
	130, 132, 133, 134, 137, 148, 151, 152, 153, 154,
	164, 165, 166, 168, 171, 172, 173, 174, 175, 178,
	180, 181, 182, 183, 184, 185, 192, 195, 201, 202,
	203, 204, 205, 206, 207, 209, 210, 211, 212, 218,
	221, 227, 228, 237, 244, 247, 387, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 0, 0, 0, 0, 0, 142, 0,
	0, 144, 0, 0, 216, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 272, 0, 0, 0, 0, 189, 0,
	220, 126, 141, 100, 138, 86, 96, 0, 125, 167,
	196, 200, 0, 0, 0, 108, 0, 198, 177, 236,
	0, 179, 197, 145, 226, 190, 235, 245, 246, 223,
	243, 250, 213, 89, 222, 234, 105, 208, 91, 232,
	219, 156, 135, 136, 90, 0, 194, 113, 121, 110,
	169, 229, 230, 109, 253, 97, 242, 93, 98, 241,
	163, 225, 233, 157, 150, 92, 231, 155, 149, 140,
	117, 128, 187, 147, 188, 129, 160, 159, 161, 0,
	0, 0, 217, 239, 254, 102, 0, 224, 248, 249,
	0, 0, 103, 122, 116, 186, 120, 162, 99, 131,
	214, 139, 146, 193, 252, 176, 199, 106, 238, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	94, 143, 251, 191, 119, 240, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 95, 101, 107, 111, 115, 118, 124,
	127, 130, 132, 133, 134, 137, 148, 151, 152, 153,
	154, 164, 165, 166, 168, 171, 172, 173, 174, 175,
	178, 180, 181, 182, 183, 184, 185, 192, 195, 201,
	202, 203, 204, 205, 206, 207, 209, 210, 211, 212,
	218, 221, 227, 228, 237, 244, 247, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 0, 0, 0,
	0, 0, 142, 0, 0, 144, 0, 0, 216, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 83, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 267, 0, 272, 0, 0,
	0, 0, 189, 0, 220, 126, 141, 100, 138, 86,
	96, 0, 125, 167, 196, 200, 0, 0, 0, 108,
	0, 198, 177, 236, 0, 179, 197, 145, 226, 190,
	235, 245, 246, 223, 243, 250, 213, 89, 222, 234,
	105, 208, 91, 232, 219, 156, 135, 136, 90, 0,
	194, 113, 121, 110, 169, 229, 230, 109, 253, 97,
	242, 93, 98, 241, 163, 225, 233, 157, 150, 92,
	231, 155, 149, 140, 117, 128, 187, 147, 188, 129,
	160, 159, 161, 0, 0, 0, 217, 239, 254, 102,
	0, 224, 248, 249, 0, 0, 103, 122, 116, 186,
	120, 162, 99, 131, 214, 139, 146, 193, 252, 176,
	199, 106, 238, 215, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 94, 143, 251, 191, 119, 240,
	0, 0, 112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 95, 101, 107,
	111, 115, 118, 124, 127, 130, 132, 133, 134, 137,
	148, 151, 152, 153, 154, 164, 165, 166, 168, 171,
	172, 173, 174, 175, 178, 180, 181, 182, 183, 184,
	185, 192, 195, 201, 202, 203, 204, 205, 206, 207,
	209, 210, 211, 212, 218, 221, 227, 228, 237, 244,
	247, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 0, 0, 0, 0, 142, 0, 0, 144,
	0, 0, 216, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 272, 0, 0, 0, 0, 189, 0, 220, 126,
	141, 100, 138, 86, 96, 0, 125, 167, 196, 200,
	0, 0, 0, 108, 0, 198, 177, 236, 0, 179,
	197, 145, 226, 190, 235, 245, 246, 223, 243, 250,
	213, 89, 222, 234, 105, 208, 91, 232, 219, 156,
	135, 136, 90, 0, 194, 113, 121, 110, 169, 229,
	230, 109, 253, 97, 242, 93, 98, 241, 163, 225,
	233, 157, 150, 92, 231, 155, 149, 140, 117, 128,
	187, 147, 188, 129, 160, 159, 161, 0, 0, 0,
	217, 239, 254, 102, 0, 224, 248, 249, 0, 0,
	103, 122, 116, 186, 120, 162, 99, 131, 214, 139,
	146, 193, 252, 176, 199, 106, 238, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 94, 143,
	251, 191, 119, 240, 0, 0, 112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 95, 101, 107, 111, 115, 118, 124, 127, 130,
	132, 133, 134, 137, 148, 151, 152, 153, 154, 164,
	165, 166, 168, 171, 172, 173, 174, 175, 178, 180,
	181, 182, 183, 184, 185, 192, 195, 201, 202, 203,
	204, 205, 206, 207, 209, 210, 211, 212, 218, 221,
	227, 228, 237, 244, 247,
}
var yyPact = [...]int{

	2438, -1000, -271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 913, 946, -1000, -1000, -1000, -1000, -1000, -1000,
	244, 11512, 20, 125, -22, 15539, 124, 183, 15873, -1000,
	16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -55, -75,
	-1000, 708, -1000, -1000, -1000, -1000, -1000, 892, 896, 769,
	887, 809, -1000, 8160, 87, 87, 15205, 6824, -1000, -1000,
	332, 15873, 121, 15873, -152, 84, 84, 84, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 123, 15873, 524, 524, 240,
	-1000, 15873, 82, 524, 82, 82, 82, 15873, -1000, 167,
	-1000, -1000, -1000, 15873, 524, 858, 312, 73, 4395, -1000,
	178, -1000, 4395, 24, 4395, -52, 920, 25, -17, -1000,
	4395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 448, 861, 9508, 9508, 913,
	-1000, 708, -1000, -1000, -1000, 849, -1000, -1000, 313, 935,
	-1000, 11178, 165, -1000, 9508, 2418, 525, -1000, -1000, 525,
	-1000, -1000, 153, -1000, -1000, 10510, 10510, 10510, 10510, 10510,
	10510, 10510, 10510, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 525, -1000, 9174,
	525, 525, 525, 525, 525, 525, 525, 525, 9508, 525,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 525, 525, 525, 14864, 13862, 15873, 688, 499,
	-1000, -1000, 162, 690, 6477, -98, -1000, -1000, -1000, 246,
	13194, -1000, -1000, -1000, 857, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 649, 15873, -1000, 2882, -1000, 524,
	4395, 103, 524, 255, 524, 15873, 15873, 4395, 4395, 4395,
	31, 65, 61, 15873, 695, 92, 15873, 882, 779, 15873,
	524, 524, -1000, 5783, -1000, 4395, 312, -1000, 438, 9508,
	4395, 4395, 4395, 15873, 4395, 4395, -1000, -1000, -1000, 356,
	-1000, -1000, -1000, -1000, 4395, 4395, -1000, 933, 299, -1000,
	-1000, -1000, -1000, 9508, 195, -1000, 778, -1000, -1000, -1000,
	-1000, -1000, -1000, 941, 192, 530, 158, 694, -1000, 374,
	892, 448, 809, 12860, 789, -1000, -1000, -1000, 15873, -1000,
	9508, 9508, 426, -1000, 14530, -1000, -1000, 5436, 200, 10510,
	392, 289, 10510, 10510, 10510, 10510, 10510, 10510, 10510, 10510,
	10510, 10510, 10510, 10510, 10510, 10510, 10510, 512, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 524, -1000, 708, 604,
	604, 180, 180, 180, 180, 180, 180, 180, 10844, 7158,
	448, 645, 304, 9174, 8160, 8160, 9508, 9508, 8828, 8494,
	8160, 856, 252, 304, 15873, -1000, -1000, 10176, -1000, -1000,
	-1000, -1000, -1000, 448, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15873, 15873, 8160, 8160, 8160, 8160, 8160, 44, 15873,
	-1000, 655, 770, -1000, -1000, -1000, 884, 12192, 12526, 44,
	683, 13862, 15873, -1000, -1000, 13862, 15873, 5089, 6130, 690,
	-98, 659, -1000, -108, -105, 7492, 171, -1000, -1000, -1000,
	-1000, 4048, 369, 486, 390, -45, -1000, -1000, -1000, 710,
	-1000, 710, 710, 710, 710, -10, -10, -10, -10, -1000,
	-1000, -1000, -1000, -1000, 738, 733, -1000, 710, 710, 710,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 718, 718,
	718, 712, 712, 750, -1000, 15873, 4395, 880, 4395, -1000,
	83, -1000, -1000, -1000, 15873, 15873, 15873, 15873, 15873, 132,
	15873, 15873, 689, -1000, 15873, 4395, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 304, -1000, -1000, -1000, -1000, -1000,
	-1000, 15873, -1000, -1000, -1000, -1000, 15873, 312, 15873, 15873,
	304, -1000, 433, 15873, -1000, 822, 9508, 9508, 5783, 9508,
	-1000, -1000, -1000, 861, -1000, 856, 914, -1000, 834, 833,
	8160, -1000, -1000, 200, 301, -1000, -1000, 436, -1000, -1000,
	-1000, -1000, 157, 525, -1000, 1653, -1000, -1000, -1000, -1000,
	392, 10510, 10510, 10510, 336, 1653, 817, 1255, 551, 180,
	268, 268, 179, 179, 179, 179, 179, 378, 378, -1000,
	-1000, -1000, 448, -1000, -1000, -1000, 448, 8160, 8160, 675,
	-1000, -1000, 9508, -1000, 448, 638, 638, 414, 536, 249,
	932, 638, 245, 931, 638, 638, 8160, 261, -1000, 9508,
	448, -1000, 156, -1000, 492, 672, 667, 638, 448, 448,
	638, 638, 692, 525, -1000, 15873, 13862, 13862, 13862, 13862,
	13862, -1000, 802, 801, -1000, 800, 799, 821, 15873, -1000,
	640, 12192, 174, 525, -1000, 14196, -1000, -1000, 919, 13862,
	668, -1000, 668, -1000, 152, -1000, -1000, 659, -98, -72,
	-1000, -1000, -1000, -1000, 304, -1000, 519, 654, 3701, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 715, 524, -1000, 869,
	201, 237, 524, 868, -1000, -1000, -1000, 860, -1000, 258,
	-48, -1000, -1000, 382, -10, -10, -1000, -1000, 171, 841,
	171, 171, 171, 432, 432, -1000, -1000, -1000, -1000, 348,
	-1000, -1000, -1000, 347, -1000, 775, 15873, 4395, -1000, -1000,
	-1000, -1000, 288, 288, 225, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, 588, -1000, -1000,
	-1000, -1000, 15, 30, 90, -1000, 4395, -1000, 299, 299,
	-1000, -1000, -1000, -1000, -1000, 820, 304, 304, 148, -1000,
	-1000, 15873, -1000, -1000, -1000, -1000, 696, -1000, -1000, -1000,
	4742, 8160, -1000, 336, 1653, 417, -1000, 10510, 10510, -1000,
	-1000, 638, 638, 8160, 304, -1000, -1000, -1000, 28, 512,
	28, 10510, 10510, -1000, 10510, 10510, -1000, -164, 552, 251,
	-1000, 9508, 238, -1000, 5783, -1000, 10510, 10510, -1000, -1000,
	-1000, -1000, -1000, 773, 15873, 525, -1000, 12192, 15873, 679,
	-1000, 226, 770, 756, 772, 586, -1000, -1000, -1000, -1000,
	792, -1000, 780, -1000, -1000, -1000, -1000, -1000, 111, 110,
	109, 15873, -1000, 913, 9508, 668, -1000, -1000, 182, -1000,
	-1000, -117, -132, -1000, -1000, -1000, 4048, -1000, 4048, 15873,
	66, -1000, 524, 524, -1000, -1000, -1000, 713, 768, 10510,
	-1000, -1000, -1000, 477, 171, 171, -1000, 248, -1000, -1000,
	-1000, 633, -1000, 631, 647, 626, 15873, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15873, -1000, -1000, -1000,
	-1000, -1000, 15873, -172, 524, 15873, 15873, 15873, 15873, -1000,
	312, 312, -1000, 5783, -1000, 919, 13862, -1000, -1000, 448,
	-1000, 10510, 1653, 1653, -1000, -1000, -1000, 448, 710, 710,
	-1000, 710, 712, -1000, 710, 7, 710, 6, 448, 448,
	1711, 1638, 1618, 1571, 525, -159, -1000, 304, 9508, -1000,
	1523, 1471, -1000, 871, 554, 545, -1000, -1000, 7826, 448,
	620, 146, 615, -1000, 913, 15873, 9508, -1000, -1000, 9508,
	711, -1000, 9508, -1000, -1000, -1000, 525, 525, 525, 615,
	892, 304, -1000, -1000, -1000, -1000, 3701, -1000, 606, -1000,
	710, -1000, -1000, -1000, 15873, -36, 939, 1653, -1000, -1000,
	-1000, -1000, -1000, -10, 430, -10, 337, -1000, 326, 4395,
	-1000, -1000, -1000, -1000, 876, -1000, 5783, -1000, -1000, 699,
	746, -1000, -1000, -1000, -1000, 917, 581, -1000, 1653, -1000,
	-1000, 122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10510, 10510, 10510, 10510, 10510, 892, 400, 304, 10510, 10510,
	867, -1000, 525, -1000, -1000, 714, 15873, 15873, -1000, 15873,
	892, -1000, 304, 304, 15873, 304, 13528, 15873, 15873, 11846,
	-1000, 166, 15873, -1000, 589, -1000, 194, -1000, -125, 171,
	-1000, 171, 475, 472, -1000, 525, 560, -1000, 217, 15873,
	15873, 915, 894, -1000, -1000, 492, 492, 492, 492, 58,
	448, -1000, 492, 492, 938, -1000, 525, -1000, 708, 139,
	-1000, -1000, -1000, 587, 569, -1000, 569, 569, 174, 166,
	-1000, 524, 215, 398, -1000, 63, 15873, 281, 866, -1000,
	863, -1000, -1000, -1000, -1000, -1000, 40, 5783, 4048, 563,
	-1000, -1000, 9508, 9508, -1000, -1000, -1000, -1000, 448, 47,
	-176, -1000, -1000, -1000, 15873, 545, 448, 15873, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 322, -1000, -1000, 15873, -1000,
	-1000, 386, -1000, -1000, 503, -1000, 15873, -1000, -1000, 588,
	304, 529, -1000, 819, -170, -182, 517, -1000, -1000, -1000,
	698, -1000, -1000, 40, 830, -172, -1000, 806, -1000, 15873,
	-1000, 37, -1000, -174, 489, 35, -177, 765, 525, -183,
	754, -1000, 925, 9842, -1000, -1000, 927, 177, 177, 492,
	448, -1000, -1000, -1000, 70, 457, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1156, 57, 557, 1155, 1154, 1153, 1151, 1150, 1148,
	1147, 1146, 1145, 1144, 1143, 1141, 1140, 1138, 1136, 1132,
	1127, 1125, 1124, 1123, 1122, 1121, 89, 1120, 1119, 1118,
	69, 1117, 70, 1115, 1112, 47, 114, 34, 43, 1634,
	1111, 22, 54, 63, 1110, 28, 1108, 1107, 76, 1106,
	1102, 52, 1101, 1098, 77, 1096, 65, 1095, 12, 35,
	1094, 1093, 1089, 1088, 75, 419, 1087, 1086, 15, 1085,
	1084, 99, 1083, 55, 6, 14, 13, 19, 1082, 1126,
	9, 1080, 53, 1078, 1077, 1076, 1075, 26, 1074, 61,
	1073, 17, 56, 1071, 40, 64, 31, 25, 5, 78,
	73, 1070, 23, 62, 50, 1068, 1067, 476, 1066, 1065,
	44, 1064, 1062, 1061, 30, 1060, 90, 491, 1059, 1058,
	1038, 1034, 46, 704, 1264, 130, 66, 1032, 1030, 1029,
	2331, 42, 51, 18, 1025, 37, 1482, 33, 1024, 1023,
	41, 1022, 1021, 1020, 1018, 1017, 1016, 1015, 94, 1011,
	1010, 1008, 108, 24, 1006, 1005, 60, 20, 1003, 999,
	997, 48, 59, 985, 984, 49, 981, 980, 21, 976,
	975, 974, 973, 970, 29, 7, 968, 16, 967, 8,
	964, 27, 963, 3, 962, 10, 959, 2, 0, 958,
	11, 45, 1, 957, 4, 955, 954, 1324, 1407, 79,
	953, 80,
}
var yyR1 = [...]int{

	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 188, 188, 188, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 29, 29,
	8, 9, 9, 9, 9, 199, 199, 48, 48, 49,
	49, 95, 95, 10, 10, 10, 10, 100, 100, 104,
	104, 104, 105, 105, 105, 105, 138, 138, 11, 11,
	11, 11, 11, 11, 11, 190, 190, 189, 187, 187,
	186, 186, 185, 17, 170, 172, 172, 171, 171, 171,
	171, 162, 141, 141, 141, 141, 144, 144, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 143, 143, 143,
	143, 143, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 147, 147, 147, 147, 147, 147, 147, 147,
	161, 161, 148, 148, 156, 156, 157, 157, 157, 154,
	154, 155, 155, 158, 158, 158, 150, 150, 151, 151,
	159, 159, 152, 152, 152, 153, 153, 153, 160, 160,
	160, 160, 160, 149, 149, 163, 163, 180, 180, 179,
	179, 179, 169, 169, 176, 176, 176, 176, 176, 166,
	166, 166, 167, 167, 165, 165, 168, 168, 178, 178,
	177, 164, 164, 181, 181, 181, 181, 193, 194, 192,
	192, 192, 192, 192, 173, 173, 173, 174, 174, 174,
	175, 175, 175, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 184, 182, 182, 183, 183, 13,
	18, 18, 14, 14, 14, 14, 14, 15, 15, 19,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 111, 111, 113,
	113, 109, 109, 112, 112, 110, 110, 110, 114, 114,
	114, 115, 115, 139, 139, 139, 21, 21, 23, 23,
	24, 25, 22, 22, 22, 22, 22, 22, 22, 16,
	200, 26, 27, 27, 28, 28, 28, 32, 32, 32,
	30, 30, 30, 31, 31, 37, 37, 36, 36, 38,
	38, 38, 38, 127, 127, 127, 126, 126, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 57, 57,
	94, 94, 96, 96, 44, 44, 44, 44, 45, 45,
	46, 46, 47, 47, 134, 134, 133, 133, 133, 132,
	132, 50, 50, 50, 52, 51, 51, 51, 51, 53,
	53, 55, 55, 54, 54, 56, 58, 58, 58, 58,
	58, 59, 59, 39, 39, 39, 39, 39, 39, 39,
	108, 108, 61, 61, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 72, 72, 72, 72, 72, 72,
	62, 62, 62, 62, 62, 62, 62, 35, 35, 73,
	73, 73, 79, 74, 74, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 69, 69, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	201, 201, 71, 70, 70, 70, 70, 70, 70, 70,
	33, 33, 33, 33, 33, 137, 137, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	83, 83, 34, 34, 81, 81, 82, 84, 84, 80,
	80, 80, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 85, 85, 86, 86, 87, 87, 88,
	88, 89, 90, 90, 90, 91, 91, 91, 91, 92,
	92, 92, 63, 63, 63, 63, 63, 63, 93, 93,
	93, 93, 97, 97, 75, 75, 77, 77, 76, 78,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 101,
	101, 101, 129, 129, 129, 106, 106, 116, 116, 117,
	117, 107, 107, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 119, 119, 120, 120, 121, 121,
	121, 128, 128, 124, 124, 125, 125, 130, 130, 131,
	131, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	197, 198, 135, 136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 4, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 118, 119, 121, 120, 154, 122, 147, 51, 168,
	169, 171, 172, 25, 148, 149, 152, 153, 31, 32,
	124, -197, 8, 254, 55, -196, 352, -87, 15, -28,
	5, -26, -200, -26, -26, -26, -26, -26, -170, -172,
	55, 93, -121, 128, 75, 246, 125, 126, 132, -124,
	-188, -123, 58, 59, 60, 264, 140, 296, 297, 168,
	179, 173, 200, 192, 265, 298, 141, 190, 193, 233,
	138, 299, 220, 227, 69, 171, 242, 300, 150, 188,
	184, 301, 273, 182, 27, 302, 229, 205, 303, 269,
	231, 183, 228, 124, 304, 143, 136, 305, 206, 210,
	306, 234, 307, 308, 309, 177, 178, 310, 139, 236,
	204, 137, 33, 266, 36, 158, 237, 208, 311, 203,
	199, 312, 313, 314, 315, 202, 176, 198, 40, 212,
	211, 213, 232, 195, 316, 317, 318, 144, 319, 185,
	18, 320, 321, 322, 323, 324, 240, 153, 325, 156,
	326, 327, 328, 329, 330, 331, 230, 207, 209, 133,
	160, 268, 332, 238, 181, 333, 145, 157, 152, 241,
	146, 334, 335, 336, 337, 338, 339, 340, 172, 341,
	342, 343, 344, 167, 235, 244, 39, 217, 345, 175,
	135, 346, 169, 164, 222, 196, 159, 347, 348, 186,
	187, 201, 174, 197, 170, 161, 154, 349, 243, 218,
	270, 194, 191, 165, 350, 162, 163, 351, 223, 224,
	166, 267, 239, 189, 219, -107, 128, 246, 125, 224,
	130, 126, 126, 127, 128, 246, 125, 126, -54, -130,
	-188, -123, 128, 126, 111, 193, 233, 118, 221, 229,
	-113, 230, 160, -139, 126, -109, 220, 223, 224, 166,
	-188, 231, 235, 234, 225, -130, 170, -135, -135, -135,
	-135, -135, 222, 222, -135, -2, -91, 17, 16, -5,
	-3, -197, 6, 20, 21, -32, 41, 42, -27, -38,
	102, -39, -130, -60, 77, -65, 29, -188, -123, 23,
	-64, -61, -80, -78, -79, 111, 112, 113, 100, 101,
	108, 78, 114, -69, -67, -68, -70, 62, 61, 70,
	63, 64, 65, 66, 71, 72, 73, -124, -76, -197,
	45, 46, 255, 256, 257, 258, 263, 259, 80, 35,
	245, 253, 252, 251, 249, 250, 247, 248, 261, 262,
	131, 246, 125, 106, 254, -107, -107, 11, -48, -49,
	-54, -56, -130, -99, -138, 170, -103, 235, 234, -125,
	-101, -124, -122, 233, 193, 232, 123, 271, 76, 22,
	24, 215, 79, 111, 16, 80, 110, 255, 118, 49,
	272, 247, 248, 245, 257, 258, 246, 221, 29, 10,
	274, 25, 148, 21, 34, 104, 120, 83, 84, 151,
	23, 149, 73, 277, 19, 52, 11, 13, 278, 279,
	14, 131, 130, 95, 127, 47, 8, 114, 26, 92,
	43, 280, 28, 281, 282, 283, 284, 45, 93, 17,
	249, 250, 31, 285, 263, 155, 106, 50, 37, 77,
	286, 287, 71, 288, 74, 53, 75, 15, 48, 289,
	290, 291, 292, 94, 121, 254, 46, 293, 125, 6,
	260, 30, 147, 44, 294, 126, 82, 261, 262, 129,
	72, 5, 132, 32, 9, 51, 54, 251, 252, 253,
	35, 81, 12, 295, -171, 93, -162, -188, -54, 127,
	-54, 254, -117, 131, -117, -117, 126, -54, -188, -188,
	118, 120, 123, 53, -18, -54, -116, 131, -188, -116,
	-116, -116, -54, 115, -54, -188, 30, -114, 93, 12,
	246, -188, 160, 126, 161, 128, -136, -197, -125, -166,
	127, 33, 139, -136, 164, 165, -136, -112, -111, 227,
	228, 222, 226, 12, 165, 222, 163, -136, -135, -135,
	-198, 57, -92, 19, 31, -39, -130, -88, -89, -39,
	-87, -2, -26, 37, -30, 21, 34, 68, 11, -127,
	76, 75, 92, -126, 22, -124, 62, 115, -39, -62,
	95, 77, 93, 94, 79, 97, 96, 107, 100, 101,
	102, 103, 104, 105, 106, 98, 99, 110, 85, 86,
	87, 88, 89, 90, 91, -108, -197, -79, -197, 116,
	117, -65, -65, -65, -65, -65, -65, -65, -65, -197,
	-2, -74, -39, -197, -197, -197, -197, -197, -197, -197,
	-197, -197, -83, -39, -197, -201, -71, -197, -201, -71,
	-201, -71, -201, -197, -201, -71, -201, -71, -201, -201,
	-71, -197, -197, -197, -197, -197, -197, -197, -55, 26,
	-54, -41, -42, -43, -44, -57, -79, -197, -54, -54,
	-48, -199, 56, 11, 54, -199, 56, 115, 56, -99,
	170, -100, -104, 236, 238, 85, -129, -124, 62, 29,
	30, 57, 56, -54, -141, -144, -146, -145, -147, -142,
	-143, 190, 191, 111, 194, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 30, 150, 186, 187, 188,
	189, 206, 207, 208, 209, 210, 211, 212, 213, 173,
	192, 265, 174, 175, 176, 177, 178, 179, 181, 182,
	183, 184, 185, -188, -136, 128, -188, 77, -188, -54,
	-54, -136, -136, -136, 162, 162, 126, 126, 167, -54,
	56, 129, -48, 23, 53, -54, -188, -188, -131, -130,
	-122, -136, -114, 62, -39, -136, -136, -136, -54, -136,
	-136, -167, 11, 95, -136, -136, 11, -110, 11, 95,
	-39, -115, 93, 53, 9, 95, 56, 18, 115, 56,
	-90, 24, 25, -91, -198, -32, -66, -124, 63, 66,
	-31, 44, -54, -39, -39, -72, 71, 77, 72, 73,
	-126, 102, -131, -125, -122, -65, -73, -76, -79, 67,
	95, 93, 94, 79, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -137,
	-188, 62, -188, -64, -64, -124, -37, 21, 34, -36,
	-38, -198, 56, -198, -2, -36, -36, -39, -39, -80,
	62, -36, -80, 62, -36, -36, -30, -81, -82, 81,
	-80, -124, -130, -198, -65, -124, -124, -36, -37, -37,
	-36, -36, -95, 156, -54, 30, 56, -50, -52, -51,
	-53, 43, 47, 49, 44, 45, 46, 50, -134, 22,
	-41, -197, -133, 156, -132, 22, -130, 62, -95, 54,
	-41, -54, -41, -56, -130, 102, -103, -100, 56, 237,
	239, 240, 53, 74, -39, -153, 110, -173, -174, -175,
	-125, 62, 63, -162, -163, -164, -176, 142, -181, 133,
	135, 132, -165, 143, 127, 28, 57, -158, 71, 77,
	-154, 218, -148, 55, -148, -148, -148, -148, -152, 193,
	-152, -152, -152, 55, 55, -148, -148, -148, -156, 55,
	-156, -156, -157, 55, -157, -128, 54, -54, -136, 23,
	-136, -118, 123, 120, 121, -184, 119, 215, 193, 69,
	29, 15, 255, 156, 270, -188, 157, -54, -54, -54,
	-54, -54, 123, 120, -54, -54, -54, -136, -54, -54,
	-114, -130, -130, 62, -54, 39, -39, -39, -131, -89,
	-92, -106, 19, 11, 35, 35, -36, 71, 72, 73,
	115, -197, -73, -65, -65, -65, -35, 151, 76, -198,
	-198, -36, -36, 56, -39, -198, -198, -198, 56, 54,
	22, 11, 11, -198, 11, 11, -198, -198, -36, -84,
	-82, 83, -39, -198, 115, -198, 56, 56, -198, -198,
	-198, -198, -198, -63, 30, 35, -2, -197, -197, -98,
	-102, -80, -42, -43, -43, -42, -43, 43, 43, 43,
	48, 43, 48, 43, -51, -130, -198, -58, 51, 130,
	52, -197, -132, -59, 12, -41, -59, -59, 115, -104,
	-105, 241, 238, 244, -188, 62, 56, -175, 85, 55,
	-188, 28, -165, -165, -168, -188, -168, 28, -150, 29,
	71, -155, 219, 63, -152, -152, -153, 30, -153, -153,
	-153, -161, 62, -161, 63, 63, 53, -124, -136, -135,
	-191, 138, 134, 142, 143, 136, 58, 59, 60, 127,
	28, 133, 135, 156, 132, -191, -119, -120, 129, 22,
	127, 28, 156, -190, 54, 162, 215, 162, 129, -136,
	-110, -110, 40, 115, -54, -40, 11, 102, -125, -37,
	-35, 76, -65, -65, -198, -198, -38, -140, 111, 190,
	150, 188, 184, 204, 195, 217, 186, 218, -137, -140,
	-65, -65, -65, -65, 264, -87, 84, -39, 82, -125,
	-65, -65, -97, 53, -98, -75, -77, -76, -197, -2,
	-93, -124, -96, -124, -59, 56, 85, -46, -45, 53,
	54, -47, 53, -45, 43, 43, 127, 127, 127, -96,
	-87, -39, -59, 238, 242, 243, -174, -175, -178, -177,
	-124, -181, -168, -168, 55, -151, 53, -65, 57, -153,
	-153, -188, 111, 57, 56, 57, 56, 57, 56, -54,
	-135, -135, -54, -135, -124, -187, 267, -189, -188, -124,
	-124, -124, -54, -114, -114, -59, -41, -198, -65, -198,
	-148, -148, -148, -157, -148, 178, -148, 178, -198, -198,
	19, 19, 19, 19, -197, -34, 260, -39, 56, 56,
	27, -97, 56, -198, -198, -198, 56, 115, -198, 56,
	-87, -102, -39, -39, 55, -39, -197, -197, -197, -198,
	-91, 57, 56, -148, -94, -124, -159, 215, 9, -152,
	62, -152, 63, 63, -136, 26, -186, -185, -125, 55,
	54, -85, 13, -152, -188, -65, -65, -65, -65, -65,
	-91, 62, -65, -65, 28, -77, 35, -2, -197, -124,
	-124, -124, -91, -94, -94, -198, -94, -94, -133, -180,
	-179, 54, 137, 69, -177, 57, 56, -160, 133, 28,
	132, -68, -153, -153, 57, 57, -197, 56, 85, -94,
	-54, -86, 14, 16, -198, -198, -198, -198, -33, 95,
	267, -198, -198, -198, 9, -75, -2, 115, 57, -198,
	-198, -198, -58, -179, -188, -169, 85, 62, 145, -124,
	-149, 69, 28, 28, -182, -183, 156, -185, -175, 57,
	-39, -74, -198, 265, 50, 268, -98, -198, -124, 63,
	-54, 62, -198, 56, -124, -190, 40, 266, 269, 55,
	-183, 35, -187, 40, -94, 158, 267, 57, 159, 268,
	-193, -194, 53, -197, 269, -194, 53, 10, 9, -65,
	155, -192, 146, 141, 144, 30, -192, -198, -198, 140,
	29, 71,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 577, 0, 330, 330, 330, 330, 330, 330,
	0, 648, 631, 0, 0, 0, 0, -2, 317, 318,
	0, 320, 321, 952, 952, 952, 952, 952, 0, 0,
	952, 0, 38, 39, 950, 1, 3, 585, 0, 0,
	334, 337, 332, 0, 631, 631, 0, 0, 68, 69,
	0, 0, 0, 939, 0, 629, 629, 629, 649, 650,
	653, 654, 24, 25, 26, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 0, 0, 0, 0, 0,
	632, 0, 627, 0, 627, 627, 627, 0, 268, 403,
	657, 658, 939, 0, 0, 0, 308, 0, 953, 280,
	0, 282, 953, 0, 953, 0, 289, 0, 0, 295,
	953, 300, 314, 315, 302, 316, 319, 322, 323, 324,
	325, 326, 952, 952, 329, 32, 589, 0, 0, 577,
	34, 0, 330, 335, 336, 340, 338, 339, 331, 0,
	349, 353, 0, 413, 0, 418, 420, -2, -2, 0,
	455, 456, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 483, 484, 485, 486, 562, 563, 564,
	565, 566, 567, 568, 569, 422, 423, 559, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 0,
	520, 520, 520, 520, 520, 520, 520, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 49, 403, 53, 0, 928, 613, -2, -2, 0,
	0, 655, 656, -2, 792, -2, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 0, 0, 87, 0, 85, 0,
	953, 0, 0, 0, 0, 0, 0, 953, 953, 953,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 269, 953, 308, 272, 0, 0,
	953, 953, 953, 0, 953, 953, 279, 954, 955, 0,
	189, 190, 191, 283, 953, 953, 285, 0, 305, 303,
	304, 297, 298, 0, 311, 292, 293, 296, 327, 328,
	33, 951, 27, 0, 0, 586, 0, 578, 579, 582,
	585, 32, 337, 0, 343, 341, 342, 333, 0, 350,
	0, 0, 0, 354, 0, 356, 357, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 440, 441,
	442, 443, 444, 445, 446, 419, 0, 433, 0, 0,
	0, 475, 476, 477, 478, 479, 480, 481, 0, 345,
	32, 0, 453, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 0, 551, 0, 504, 512, 0, 505, 513,
	506, 514, 507, 0, 508, 515, 509, 516, 510, 511,
	517, 0, 0, 0, 345, 345, 0, 0, 51, 0,
	402, 0, 360, 362, 363, 364, -2, 0, 386, -2,
	0, 0, 0, 45, 46, 0, 0, 0, 0, 54,
	928, 56, 57, 0, 0, 0, 165, 622, 623, 624,
	620, 214, 0, 0, 153, 149, 93, 94, 95, 142,
	97, 142, 142, 142, 142, 162, 162, 162, 162, 125,
	126, 127, 128, 129, 0, 0, 112, 142, 142, 142,
	116, 132, 133, 134, 135, 136, 137, 138, 139, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 144, 144,
	144, 146, 146, 651, 71, 0, 953, 0, 953, 83,
	0, 228, 230, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 628, 0, 953, 265, 266, 404, 659,
	660, 270, 271, 309, 310, 273, 274, 275, 276, 277,
	278, 0, 192, 193, 284, 288, 0, 308, 0, 0,
	290, 291, 0, 0, 590, 0, 0, 0, 0, 0,
	581, 583, 584, 589, 35, 340, 0, 570, 0, 0,
	0, 344, 30, 414, 415, 417, 434, 0, 436, 438,
	355, 351, 0, 560, -2, 424, 425, 449, 450, 451,
	0, 0, 0, 0, 447, 429, 0, 460, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 470, 471, 474,
	535, 536, 0, 472, 473, 482, 0, 0, 0, 346,
	347, 452, 0, 608, 32, 0, 0, 0, 0, 457,
	562, 0, 457, 562, 0, 0, 0, 557, 554, 0,
	0, 559, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 401, 0, 0, 0, 0, 0,
	0, 391, 0, 0, 394, 0, 0, 0, 0, 385,
	0, 0, 406, 873, 387, 0, 389, 390, 411, 0,
	411, 48, 411, 50, 0, 405, 614, 55, 0, 0,
	60, 61, 615, 616, 617, 618, 0, 84, 215, 217,
	220, 221, 222, 88, 89, 90, 0, 0, 202, 0,
	0, 196, 196, 0, 194, 195, 86, 156, 154, 0,
	151, 150, 96, 0, 162, 162, 119, 120, 165, 0,
	165, 165, 165, 0, 0, 113, 114, 115, 107, 0,
	108, 109, 110, 0, 111, 0, 0, 953, 73, 630,
	74, 952, 0, 0, 643, 229, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 0, 75, 233, 235,
	234, 238, 0, 0, 0, 260, 953, 264, 305, 305,
	287, 306, 307, 312, 294, 0, 587, 588, 0, 580,
	28, 0, 625, 626, 571, 572, 358, 435, 437, 439,
	0, 345, 426, 447, 430, 0, 427, 0, 0, 421,
	487, 0, 0, 0, 454, -2, 491, 492, 0, 0,
	0, 0, 0, 528, 0, 0, 529, 0, 577, 0,
	555, 0, 0, 503, 0, 522, 0, 0, 523, 524,
	525, 526, 527, 602, 0, 0, -2, 0, 0, 411,
	610, 0, 361, 380, 382, 0, 377, 392, 393, 395,
	0, 397, 0, 399, 400, 365, 367, 368, 0, 0,
	0, 0, 388, 577, 0, 411, 43, 44, 0, 58,
	59, 0, 0, 65, 166, 167, 0, 218, 0, 0,
	0, 184, 196, 196, 187, 197, 188, 0, 158, 0,
	155, 92, 152, 0, 165, 165, 121, 0, 122, 123,
	124, 0, 140, 0, 0, 0, 0, 652, 72, 223,
	952, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 952, 0, 952, 644, 645,
	646, 647, 0, 78, 0, 0, 0, 0, 0, 263,
	308, 308, 591, 0, 29, 411, 0, 352, 561, 0,
	428, 0, 448, 431, 488, 489, 348, 0, 142, 142,
	540, 142, 146, 543, 142, 545, 142, 548, 0, 0,
	0, 0, 0, 0, 0, 552, 502, 558, 0, 560,
	0, 0, 36, 0, 602, 592, 604, 606, 0, 32,
	0, 598, 0, 372, 577, 0, 0, 374, 381, 0,
	0, 375, 0, 376, 396, 398, 0, 0, 0, 0,
	585, 412, 42, 62, 63, 64, 216, 219, 0, 198,
	142, 201, 185, 186, 0, 160, 0, 157, 143, 117,
	118, 163, 164, 162, 0, 162, 0, 147, 0, 953,
	224, 225, 226, 227, 0, 232, 0, 76, 77, 0,
	0, 237, 261, 281, 286, 573, 359, 490, 432, 493,
	537, 162, 541, 542, 544, 546, 547, 549, 495, 494,
	0, 0, 0, 0, 0, 585, 0, 556, 0, 0,
	0, 37, 0, 607, -2, 0, 0, 0, 52, 0,
	585, 611, 612, 378, 0, 383, 0, 0, 0, 386,
	41, 176, 0, 200, 0, 370, 168, 161, 0, 165,
	141, 165, 0, 0, 70, 0, 79, 80, 0, 0,
	0, 575, 0, 538, 539, 0, 0, 0, 0, 530,
	0, 553, 0, 0, 0, 605, 0, -2, 0, 600,
	599, 373, 40, 0, 0, 408, 0, 0, 406, 175,
	177, 0, 182, 0, 199, 0, 0, 173, 0, 170,
	172, 159, 130, 131, 145, 148, 0, 0, 0, 0,
	239, 31, 0, 0, 496, 498, 497, 499, 0, 0,
	0, 501, 518, 519, 0, 595, 32, 0, 379, 407,
	409, 410, 369, 178, 179, 0, 183, 181, 0, 371,
	91, 0, 169, 171, 0, 255, 0, 81, 82, 75,
	576, 574, 500, 0, 0, 0, 603, -2, 601, 180,
	0, 174, 254, 0, 0, 78, 531, 0, 534, 0,
	256, 0, 236, 532, 0, 0, 0, 203, 0, 0,
	204, 205, 0, 0, 533, 206, 0, 0, 0, 0,
	0, 207, 209, 210, 0, 0, 208, 257, 258, 211,
	212, 213,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 105, 97, 3,
	55, 57, 102, 100, 56, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 352,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:357
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:363
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:395
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:408
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:412
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:429
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:441
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:457
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:487
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:510
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:514
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:566
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:570
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:601
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:610
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:638
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:666
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:673
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:684
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:695
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:699
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:709
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:954
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:966
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:972
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1016
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1025
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1030
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1077
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1120
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1217
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1223
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1234
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 204:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1238
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1242
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1246
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1252
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1276
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1293
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = yyDollar[1].str
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1341
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1346
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1453
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1463
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1469
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1473
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1485
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1489
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1505
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1510
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &OtherRead{}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1548
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1591
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1613
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1618
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1636
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = "extended "
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = "full "
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1733
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1737
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1747
		{
			yyVAL.showFilter = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = SessionStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = GlobalStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Begin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Commit{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.statement = &Rollback{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &OtherRead{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.statement = &OtherRead{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1837
		{
			setAllowComments(yylex, true)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1841
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.bytes2 = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = UnionStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = UnionAllStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = UnionDistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = SQLCacheStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = DistinctStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = DistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			yyVAL.str = StraightJoinHint
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.selectExprs = nil
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1929
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1933
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1937
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1942
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1962
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2006
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2010
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2020
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2026
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2043
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2047
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2051
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2063
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2067
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2073
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2075
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2078
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.empty = struct{}{}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2083
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = JoinStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = StraightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = LeftJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = LeftJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = RightJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = RightJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = NaturalJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2156
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2181
		{
			yyVAL.indexHints = nil
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2185
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2189
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2193
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2197
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = IsNullStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = IsNotNullStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = IsTrueStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = IsNotTrueStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = IsFalseStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = IsNotFalseStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = EqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = LessThanStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = GreaterThanStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = LessEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = GreaterEqualStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = NotEqualStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = nil
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2369
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2373
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2377
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2383
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 496:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 497:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 500:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2681
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = BooleanModeStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.str = QueryExpansionStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.str = string("")
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2855
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2878
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &NullVal{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2936
		{
			yyVAL.exprs = nil
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2954
		{
			yyVAL.orderBy = nil
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2979
		{
			yyVAL.str = AscScr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.str = AscScr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.str = DescScr
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2992
		{
			yyVAL.limit = nil
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3000
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3004
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3009
		{
			yyVAL.str = ""
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = ForUpdateStr
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = ShareModeStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3043
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3051
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3070
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3075
		{
			yyVAL.updateExprs = nil
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3079
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3089
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3125
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3131
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3141
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3147
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.bytes = []byte("charset")
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = &Default{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.byt = 0
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.byt = 1
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3200
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.str = IgnoreStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3208
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3212
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3227
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3247
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			decNesting(yylex)
		}
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3610
		{
			skipToEnd(yylex)
		}
	case 953:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3615
		{
			skipToEnd(yylex)
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			skipToEnd(yylex)
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

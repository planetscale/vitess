// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
	tableAndLockTypes      []*TableAndLockType
	tableAndLockType       *TableAndLockType
	lockType               LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const SEQUENCE = 57523
const BEGIN = 57524
const START = 57525
const TRANSACTION = 57526
const COMMIT = 57527
const ROLLBACK = 57528
const SAVEPOINT = 57529
const RELEASE = 57530
const WORK = 57531
const BIT = 57532
const TINYINT = 57533
const SMALLINT = 57534
const MEDIUMINT = 57535
const INT = 57536
const INTEGER = 57537
const BIGINT = 57538
const INTNUM = 57539
const REAL = 57540
const DOUBLE = 57541
const FLOAT_TYPE = 57542
const DECIMAL = 57543
const NUMERIC = 57544
const TIME = 57545
const TIMESTAMP = 57546
const DATETIME = 57547
const YEAR = 57548
const CHAR = 57549
const VARCHAR = 57550
const BOOL = 57551
const CHARACTER = 57552
const VARBINARY = 57553
const NCHAR = 57554
const TEXT = 57555
const TINYTEXT = 57556
const MEDIUMTEXT = 57557
const LONGTEXT = 57558
const BLOB = 57559
const TINYBLOB = 57560
const MEDIUMBLOB = 57561
const LONGBLOB = 57562
const JSON = 57563
const ENUM = 57564
const GEOMETRY = 57565
const POINT = 57566
const LINESTRING = 57567
const POLYGON = 57568
const GEOMETRYCOLLECTION = 57569
const MULTIPOINT = 57570
const MULTILINESTRING = 57571
const MULTIPOLYGON = 57572
const NULLX = 57573
const AUTO_INCREMENT = 57574
const APPROXNUM = 57575
const SIGNED = 57576
const UNSIGNED = 57577
const ZEROFILL = 57578
const COLLATION = 57579
const DATABASES = 57580
const SCHEMAS = 57581
const TABLES = 57582
const VITESS_METADATA = 57583
const VSCHEMA = 57584
const FULL = 57585
const PROCESSLIST = 57586
const COLUMNS = 57587
const FIELDS = 57588
const ENGINES = 57589
const PLUGINS = 57590
const EXTENDED = 57591
const KEYSPACES = 57592
const VITESS_KEYSPACES = 57593
const VITESS_SHARDS = 57594
const VITESS_TABLETS = 57595
const NAMES = 57596
const CHARSET = 57597
const GLOBAL = 57598
const SESSION = 57599
const ISOLATION = 57600
const LEVEL = 57601
const READ = 57602
const WRITE = 57603
const ONLY = 57604
const REPEATABLE = 57605
const COMMITTED = 57606
const UNCOMMITTED = 57607
const SERIALIZABLE = 57608
const CURRENT_TIMESTAMP = 57609
const DATABASE = 57610
const CURRENT_DATE = 57611
const CURRENT_TIME = 57612
const LOCALTIME = 57613
const LOCALTIMESTAMP = 57614
const UTC_DATE = 57615
const UTC_TIME = 57616
const UTC_TIMESTAMP = 57617
const REPLACE = 57618
const CONVERT = 57619
const CAST = 57620
const SUBSTR = 57621
const SUBSTRING = 57622
const GROUP_CONCAT = 57623
const SEPARATOR = 57624
const TIMESTAMPADD = 57625
const TIMESTAMPDIFF = 57626
const MATCH = 57627
const AGAINST = 57628
const BOOLEAN = 57629
const LANGUAGE = 57630
const WITH = 57631
const QUERY = 57632
const EXPANSION = 57633
const UNUSED = 57634
const ARRAY = 57635
const CUME_DIST = 57636
const DESCRIPTION = 57637
const DENSE_RANK = 57638
const EMPTY = 57639
const EXCEPT = 57640
const FIRST_VALUE = 57641
const GROUPING = 57642
const GROUPS = 57643
const JSON_TABLE = 57644
const LAG = 57645
const LAST_VALUE = 57646
const LATERAL = 57647
const LEAD = 57648
const MEMBER = 57649
const NTH_VALUE = 57650
const NTILE = 57651
const OF = 57652
const OVER = 57653
const PERCENT_RANK = 57654
const RANK = 57655
const RECURSIVE = 57656
const ROW_NUMBER = 57657
const SYSTEM = 57658
const WINDOW = 57659
const ACTIVE = 57660
const ADMIN = 57661
const BUCKETS = 57662
const CLONE = 57663
const COMPONENT = 57664
const DEFINITION = 57665
const ENFORCED = 57666
const EXCLUDE = 57667
const FOLLOWING = 57668
const GEOMCOLLECTION = 57669
const GET_MASTER_PUBLIC_KEY = 57670
const HISTOGRAM = 57671
const HISTORY = 57672
const INACTIVE = 57673
const INVISIBLE = 57674
const LOCKED = 57675
const MASTER_COMPRESSION_ALGORITHMS = 57676
const MASTER_PUBLIC_KEY_PATH = 57677
const MASTER_TLS_CIPHERSUITES = 57678
const MASTER_ZSTD_COMPRESSION_LEVEL = 57679
const NESTED = 57680
const NETWORK_NAMESPACE = 57681
const NOWAIT = 57682
const NULLS = 57683
const OJ = 57684
const OLD = 57685
const OPTIONAL = 57686
const ORDINALITY = 57687
const ORGANIZATION = 57688
const OTHERS = 57689
const PATH = 57690
const PERSIST = 57691
const PERSIST_ONLY = 57692
const PRECEDING = 57693
const PRIVILEGE_CHECKS_USER = 57694
const PROCESS = 57695
const RANDOM = 57696
const REFERENCE = 57697
const REQUIRE_ROW_FORMAT = 57698
const RESOURCE = 57699
const RESPECT = 57700
const RESTART = 57701
const RETAIN = 57702
const REUSE = 57703
const ROLE = 57704
const SECONDARY = 57705
const SECONDARY_ENGINE = 57706
const SECONDARY_LOAD = 57707
const SECONDARY_UNLOAD = 57708
const SKIP = 57709
const SRID = 57710
const THREAD_PRIORITY = 57711
const TIES = 57712
const UNBOUNDED = 57713
const VCPU = 57714
const VISIBLE = 57715
const FORMAT = 57716
const TREE = 57717
const VITESS = 57718
const TRADITIONAL = 57719
const LOCAL = 57720
const LOW_PRIORITY = 57721

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	136, 109,
	227, 109,
	-2, 103,
	-1, 50,
	34, 346,
	155, 346,
	167, 346,
	195, 360,
	196, 360,
	-2, 348,
	-1, 55,
	157, 370,
	-2, 368,
	-1, 79,
	55, 413,
	-2, 421,
	-1, 103,
	136, 109,
	227, 109,
	-2, 104,
	-1, 437,
	143, 788,
	-2, 784,
	-1, 438,
	143, 789,
	-2, 785,
	-1, 455,
	55, 414,
	-2, 426,
	-1, 456,
	55, 415,
	-2, 427,
	-1, 476,
	111, 1068,
	-2, 80,
	-1, 477,
	111, 972,
	-2, 81,
	-1, 482,
	111, 931,
	-2, 749,
	-1, 484,
	111, 1011,
	-2, 751,
	-1, 637,
	136, 109,
	227, 109,
	-2, 272,
	-1, 1023,
	143, 791,
	-2, 787,
	-1, 1115,
	73, 62,
	81, 62,
	-2, 66,
	-1, 1500,
	5, 665,
	18, 665,
	20, 665,
	32, 665,
	82, 665,
	-2, 452,
	-1, 1699,
	45, 720,
	-2, 718,
}

const yyPrivate = 57344

const yyLast = 19805

var yyAct = [...]int{
	437, 1784, 1542, 1773, 1699, 1417, 1742, 1604, 1675, 381,
	1329, 1647, 1137, 1480, 1624, 1297, 1188, 396, 1062, 1481,
	410, 1330, 1477, 1133, 1182, 78, 3, 1397, 1374, 448,
	800, 749, 1316, 911, 1398, 1146, 963, 618, 1136, 1112,
	1492, 615, 1465, 651, 793, 1437, 113, 1010, 1190, 125,
	481, 350, 125, 944, 1390, 1017, 1151, 362, 612, 125,
	1256, 837, 76, 369, 830, 1094, 1101, 457, 803, 1043,
	821, 798, 1064, 820, 823, 987, 787, 383, 834, 31,
	442, 1077, 611, 1206, 619, 836, 1117, 362, 810, 827,
	362, 125, 362, 125, 372, 74, 1178, 104, 105, 379,
	669, 958, 660, 79, 762, 1059, 1060, 973, 73, 1295,
	125, 125, 763, 671, 1696, 8, 7, 6, 125, 1649,
	643, 902, 1533, 125, 370, 371, 1167, 1614, 422, 1777,
	428, 429, 426, 427, 425, 424, 423, 1191, 81, 82,
	83, 84, 85, 86, 430, 431, 1739, 1771, 1720, 1764,
	463, 467, 1543, 1738, 443, 1719, 1454, 1572, 1193, 33,
	622, 1296, 67, 37, 38, 475, 101, 118, 119, 120,
	923, 838, 93, 839, 101, 109, 1506, 110, 33, 34,
	35, 67, 37, 38, 922, 114, 115, 116, 1360, 1507,
	1508, 1359, 1128, 1129, 1361, 1127, 677, 678, 71, 441,
	478, 628, 627, 39, 64, 65, 679, 62, 440, 1382,
	680, 677, 678, 63, 1161, 684, 1607, 1020, 1419, 630,
	870, 1168, 1563, 1561, 1061, 101, 94, 972, 92, 1192,
	364, 360, 97, 66, 358, 98, 99, 114, 115, 116,
	682, 933, 51, 674, 114, 115, 116, 638, 921, 672,
	673, 1422, 66, 1236, 1722, 1421, 657, 932, 659, 930,
	1763, 974, 975, 976, 1686, 711, 710, 720, 721, 713,
	714, 715, 716, 717, 718, 719, 712, 1420, 1752, 722,
	111, 683, 1676, 1095, 1228, 934, 1705, 1186, 1790, 1186,
	656, 658, 1513, 931, 642, 1186, 1298, 1300, 100, 614,
	624, 918, 915, 916, 1788, 914, 100, 469, 1423, 938,
	629, 905, 1667, 687, 376, 1464, 1703, 1463, 42, 44,
	47, 46, 49, 1462, 61, 625, 858, 1225, 1155, 667,
	125, 649, 329, 1227, 655, 117, 1593, 1505, 925, 928,
	1235, 1321, 362, 1234, 1275, 1285, 1272, 50, 70, 69,
	1134, 362, 59, 60, 48, 734, 735, 100, 1264, 1123,
	1532, 814, 747, 647, 722, 362, 362, 871, 1356, 1073,
	1194, 52, 53, 699, 54, 55, 56, 57, 964, 636,
	712, 920, 653, 722, 1299, 661, 702, 654, 1168, 702,
	1718, 641, 693, 685, 1456, 959, 884, 887, 888, 889,
	890, 891, 892, 919, 893, 894, 895, 896, 897, 872,
	873, 874, 875, 856, 857, 885, 1678, 859, 89, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 876,
	877, 878, 879, 880, 881, 882, 883, 1723, 662, 663,
	664, 125, 1786, 1668, 1666, 1787, 68, 1785, 924, 1687,
	666, 686, 1155, 633, 1154, 634, 732, 90, 635, 1226,
	1438, 1224, 668, 926, 675, 68, 362, 103, 912, 125,
	791, 125, 125, 790, 362, 1490, 734, 735, 734, 735,
	362, 840, 696, 694, 695, 701, 699, 965, 652, 697,
	907, 750, 1044, 886, 114, 115, 116, 114, 115, 116,
	1765, 1440, 702, 785, 960, 1380, 114, 115, 116, 1044,
	819, 1282, 644, 645, 1708, 788, 713, 714, 715, 716,
	717, 718, 719, 712, 1075, 804, 722, 1766, 765, 767,
	769, 771, 773, 775, 776, 1271, 766, 768, 807, 772,
	774, 1442, 777, 1446, 994, 1441, 1158, 1439, 330, 792,
	1757, 1524, 1444, 1159, 623, 1270, 1613, 333, 992, 993,
	991, 1443, 1791, 1269, 1612, 343, 1768, 66, 715, 716,
	717, 718, 719, 712, 1445, 1447, 722, 1758, 1154, 990,
	637, 1538, 700, 701, 699, 1394, 1074, 478, 710, 720,
	721, 713, 714, 715, 716, 717, 718, 719, 712, 341,
	702, 722, 700, 701, 699, 700, 701, 699, 348, 1393,
	1458, 125, 700, 701, 699, 898, 1078, 1079, 1197, 452,
	702, 1673, 362, 702, 125, 1767, 908, 909, 1792, 1759,
	702, 1750, 927, 362, 700, 701, 699, 125, 331, 1249,
	1250, 1251, 125, 1733, 1637, 125, 943, 1467, 125, 1610,
	362, 626, 702, 1581, 1539, 362, 362, 362, 125, 362,
	362, 982, 984, 985, 1469, 345, 334, 335, 983, 346,
	347, 354, 802, 362, 362, 338, 340, 351, 336, 337,
	356, 355, 1404, 332, 353, 352, 114, 115, 116, 1391,
	1012, 700, 701, 699, 948, 1468, 957, 949, 946, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 702,
	114, 115, 116, 967, 1411, 114, 115, 116, 835, 1363,
	75, 468, 904, 1011, 1672, 1395, 988, 114, 115, 116,
	1406, 939, 1013, 929, 1350, 628, 627, 114, 115, 116,
	1317, 1204, 1118, 700, 701, 699, 362, 1664, 1769, 1478,
	947, 1664, 1716, 1712, 452, 951, 952, 953, 1489, 955,
	956, 702, 1664, 1704, 77, 1032, 1035, 1664, 452, 1664,
	1663, 1045, 33, 961, 962, 901, 1603, 966, 1156, 362,
	362, 1027, 1489, 989, 1048, 969, 1580, 452, 1591, 452,
	125, 1530, 1529, 1526, 1527, 1526, 1525, 452, 1023, 1086,
	452, 1022, 362, 438, 1097, 473, 470, 471, 1098, 125,
	1098, 452, 362, 750, 698, 452, 125, 33, 125, 1654,
	1068, 901, 900, 847, 846, 1588, 125, 125, 698, 1086,
	1080, 1677, 1575, 362, 1014, 1015, 362, 1053, 1054, 1317,
	1119, 1528, 1324, 1098, 1024, 1364, 66, 362, 362, 1119,
	1615, 1113, 126, 1126, 1098, 126, 1087, 1288, 1287, 1086,
	363, 1021, 126, 451, 1325, 1023, 1118, 445, 1092, 1076,
	1057, 937, 1088, 711, 710, 720, 721, 713, 714, 715,
	716, 717, 718, 719, 712, 832, 66, 722, 1751, 1153,
	363, 66, 1626, 363, 126, 363, 126, 1616, 1617, 1618,
	1090, 1120, 362, 1599, 903, 1183, 125, 1489, 33, 1122,
	1120, 1124, 1203, 126, 126, 1121, 1116, 1400, 1118, 1125,
	1517, 126, 1184, 899, 1399, 1086, 126, 1368, 1021, 1179,
	1141, 125, 125, 125, 125, 125, 1173, 1172, 125, 125,
	1185, 66, 125, 362, 1202, 91, 478, 1493, 1494, 478,
	1418, 1627, 399, 398, 401, 402, 403, 404, 1201, 125,
	1138, 400, 405, 1779, 1619, 125, 125, 125, 1400, 1028,
	1029, 125, 362, 1034, 1037, 1038, 1162, 1205, 1163, 1164,
	1165, 1166, 66, 1774, 1196, 1519, 1195, 1496, 1169, 1170,
	1171, 1180, 1181, 1478, 1174, 1175, 1176, 1177, 1052, 1221,
	1408, 1055, 1056, 970, 941, 452, 1499, 1242, 1620, 1621,
	1498, 1246, 988, 1338, 1103, 1106, 1107, 1108, 1104, 986,
	1105, 1109, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1341, 1343, 1339,
	1107, 1108, 1342, 1240, 1340, 711, 710, 720, 721, 713,
	714, 715, 716, 717, 718, 719, 712, 1266, 125, 722,
	1337, 1754, 1737, 1470, 1306, 801, 125, 1252, 1735, 989,
	1103, 1106, 1107, 1108, 1104, 1592, 1105, 1109, 1315, 1049,
	1493, 1494, 1314, 1728, 1725, 1756, 1741, 1743, 125, 1304,
	1749, 96, 1748, 1700, 1698, 936, 439, 1305, 1405, 125,
	125, 125, 125, 125, 443, 1265, 1399, 1331, 1386, 794,
	910, 125, 1281, 1303, 1040, 125, 845, 650, 125, 125,
	1326, 795, 125, 125, 125, 1310, 1322, 1319, 1041, 1379,
	107, 1710, 788, 126, 1294, 1362, 108, 362, 1302, 121,
	1348, 1709, 1652, 1377, 1370, 363, 1369, 1586, 1309, 1365,
	1541, 1375, 1375, 1071, 363, 1318, 1320, 1351, 1078, 1079,
	1199, 1353, 940, 1111, 446, 447, 449, 1761, 363, 363,
	1333, 1334, 1332, 1336, 946, 1335, 1344, 1313, 1760, 1746,
	1376, 1349, 1473, 1729, 1585, 1312, 450, 1354, 1357, 77,
	1584, 1385, 1402, 1387, 1388, 1389, 1317, 681, 1781, 362,
	1367, 1276, 362, 1410, 1273, 1371, 1372, 1373, 458, 815,
	711, 710, 720, 721, 713, 714, 715, 716, 717, 718,
	719, 712, 459, 125, 722, 458, 1403, 808, 1392, 362,
	1781, 1780, 1701, 1608, 1072, 445, 1261, 1262, 1401, 459,
	362, 75, 80, 72, 126, 805, 806, 461, 1, 460,
	1138, 1058, 786, 349, 1772, 112, 1544, 1279, 1623, 917,
	1674, 1396, 455, 456, 461, 362, 460, 1257, 1189, 363,
	1412, 1011, 126, 1144, 126, 126, 1135, 363, 1425, 88,
	609, 87, 1426, 363, 665, 1413, 1143, 1415, 1142, 1665,
	1383, 1384, 1381, 1160, 1606, 1518, 1435, 1378, 1707, 1407,
	853, 851, 362, 852, 850, 855, 854, 1253, 1254, 1255,
	1455, 1436, 125, 849, 1427, 342, 971, 1449, 1448, 1433,
	359, 1110, 362, 841, 809, 1223, 1222, 913, 362, 362,
	1531, 1157, 339, 676, 1331, 1479, 1023, 344, 730, 1022,
	1424, 1311, 1358, 479, 472, 1484, 1482, 1200, 95, 1747,
	1726, 125, 1476, 1724, 1697, 1648, 1727, 1695, 1755, 1740,
	1070, 797, 1488, 1583, 1472, 362, 1280, 362, 759, 362,
	1042, 1487, 1375, 1375, 1375, 824, 1497, 382, 1434, 1510,
	981, 397, 1501, 394, 1503, 395, 1504, 1523, 1081, 1323,
	1502, 704, 380, 374, 816, 1102, 1100, 1099, 828, 1459,
	1514, 1515, 1516, 1509, 1495, 1512, 1511, 1521, 1522, 125,
	1491, 1153, 822, 1085, 126, 454, 1039, 1685, 1571, 1545,
	362, 362, 362, 453, 125, 363, 1535, 126, 58, 36,
	366, 689, 1534, 1536, 1537, 1434, 363, 462, 30, 29,
	126, 1574, 28, 23, 22, 126, 21, 20, 126, 19,
	25, 126, 18, 363, 17, 16, 106, 102, 363, 363,
	363, 126, 363, 363, 45, 1554, 43, 1559, 41, 1550,
	1551, 40, 639, 27, 26, 15, 363, 363, 1138, 14,
	1138, 13, 711, 710, 720, 721, 713, 714, 715, 716,
	717, 718, 719, 712, 12, 11, 722, 10, 9, 1331,
	5, 4, 1587, 692, 24, 748, 2, 0, 0, 0,
	362, 1596, 0, 0, 0, 0, 0, 0, 362, 1595,
	0, 0, 1365, 0, 0, 0, 0, 0, 0, 411,
	32, 0, 1601, 1025, 1026, 1602, 0, 0, 0, 0,
	0, 0, 0, 0, 362, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 1630, 0,
	1556, 1557, 32, 1558, 0, 0, 1560, 0, 1562, 0,
	0, 0, 1429, 1430, 0, 0, 1069, 362, 362, 362,
	125, 362, 363, 363, 1640, 1642, 1643, 1450, 1451, 0,
	1452, 1453, 362, 126, 362, 1582, 0, 0, 1644, 1628,
	362, 1636, 1460, 1461, 444, 363, 1657, 1660, 1653, 1482,
	465, 0, 126, 1482, 0, 363, 1655, 1651, 0, 126,
	1662, 126, 0, 1138, 0, 1659, 1669, 362, 125, 126,
	126, 1661, 0, 1670, 1679, 1671, 363, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 363, 1609, 0, 1611, 0, 0, 1625, 0, 0,
	1694, 0, 1216, 0, 0, 362, 0, 0, 1702, 0,
	0, 0, 0, 373, 0, 1482, 0, 362, 362, 362,
	0, 0, 0, 0, 1629, 0, 0, 0, 0, 0,
	0, 1715, 1714, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 125, 1721, 1646, 126,
	0, 1331, 1730, 0, 0, 0, 1212, 1213, 1214, 0,
	0, 1734, 1736, 0, 0, 0, 0, 0, 0, 1745,
	1744, 0, 0, 0, 126, 126, 126, 126, 126, 1753,
	0, 126, 126, 1552, 1569, 126, 363, 0, 0, 0,
	0, 0, 362, 0, 0, 0, 0, 0, 0, 1762,
	0, 0, 126, 0, 0, 0, 0, 0, 126, 126,
	126, 0, 0, 0, 126, 363, 1778, 0, 0, 0,
	0, 0, 0, 1789, 0, 0, 0, 408, 1215, 0,
	0, 1625, 1138, 1220, 1217, 1208, 1218, 1211, 1259, 1207,
	0, 0, 1260, 1209, 1210, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 1268, 0, 0, 1219, 0, 1274,
	0, 0, 1277, 1278, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 1286, 0, 0, 1289, 1290, 1291,
	1292, 1293, 0, 0, 361, 0, 711, 710, 720, 721,
	713, 714, 715, 716, 717, 718, 719, 712, 0, 0,
	722, 126, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 670, 0, 0, 480, 0, 0, 613, 0, 620,
	670, 1631, 1632, 1633, 1634, 1635, 0, 0, 0, 1638,
	1639, 126, 0, 0, 0, 0, 32, 1346, 1347, 0,
	0, 0, 126, 126, 126, 126, 126, 731, 733, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 126, 0,
	0, 126, 126, 0, 0, 126, 126, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	363, 0, 751, 752, 753, 754, 755, 756, 757, 758,
	0, 761, 764, 764, 764, 770, 764, 764, 770, 764,
	778, 779, 780, 781, 782, 783, 784, 1428, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 711, 710, 720,
	721, 713, 714, 715, 716, 717, 718, 719, 712, 0,
	825, 722, 363, 0, 0, 363, 720, 721, 713, 714,
	715, 716, 717, 718, 719, 712, 789, 0, 722, 0,
	0, 0, 373, 0, 0, 0, 126, 0, 1258, 0,
	0, 760, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 0, 1431, 1432, 711, 710,
	720, 721, 713, 714, 715, 716, 717, 718, 719, 712,
	796, 799, 722, 0, 0, 123, 0, 0, 363, 0,
	706, 0, 709, 0, 0, 365, 0, 0, 723, 724,
	725, 726, 727, 728, 729, 1775, 707, 708, 705, 711,
	710, 720, 721, 713, 714, 715, 716, 717, 718, 719,
	712, 0, 0, 722, 0, 363, 0, 617, 0, 621,
	0, 0, 1485, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 631, 632, 0, 480,
	0, 363, 363, 1500, 640, 1568, 0, 0, 480, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 688, 690, 126, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 363, 0,
	363, 1567, 363, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 670, 670, 670, 0, 670, 670,
	0, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 670, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 1553, 0,
	0, 0, 1555, 363, 363, 363, 0, 126, 0, 0,
	0, 0, 0, 1564, 1565, 0, 0, 711, 710, 720,
	721, 713, 714, 715, 716, 717, 718, 719, 712, 0,
	1579, 722, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 480, 0, 0, 950, 0, 0, 842, 1589, 1590,
	0, 0, 1594, 711, 710, 720, 721, 713, 714, 715,
	716, 717, 718, 719, 712, 0, 0, 722, 0, 0,
	0, 0, 968, 711, 710, 720, 721, 713, 714, 715,
	716, 717, 718, 719, 712, 0, 0, 722, 0, 977,
	978, 979, 980, 363, 0, 0, 0, 0, 0, 0,
	0, 363, 711, 710, 720, 721, 713, 714, 715, 716,
	717, 718, 719, 712, 0, 0, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 363, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 1641, 0, 0, 1030, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 363, 363, 126, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 363, 0, 0,
	0, 0, 0, 363, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 0, 0, 1681, 1682, 1683, 1684,
	480, 1688, 0, 1689, 1690, 1691, 0, 1692, 1693, 0,
	363, 126, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 480, 480, 480, 0, 480, 480, 0, 0,
	0, 1132, 0, 0, 0, 0, 0, 0, 0, 1711,
	480, 480, 0, 0, 0, 0, 0, 0, 363, 0,
	1717, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	363, 363, 363, 0, 0, 818, 0, 0, 829, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 126,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1016, 0, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	0, 1263, 0, 0, 444, 363, 0, 0, 0, 0,
	1782, 1783, 0, 0, 0, 0, 1050, 1051, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	409, 0, 0, 1301, 0, 0, 0, 0, 0, 812,
	0, 0, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	480, 0, 0, 480, 1327, 1328, 0, 848, 825, 825,
	825, 825, 825, 0, 480, 613, 0, 0, 0, 124,
	906, 0, 357, 0, 1114, 0, 0, 825, 0, 124,
	0, 825, 0, 935, 0, 1283, 0, 0, 829, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 466, 954, 0, 0, 0, 0, 0,
	0, 124, 0, 124, 0, 1307, 1308, 799, 0, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 124, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1093, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 1046, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 1198, 0, 480, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1229, 1230, 1231,
	1232, 1233, 0, 0, 1237, 1238, 0, 0, 1239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1241, 0, 0, 0, 0,
	0, 0, 0, 1245, 1570, 0, 480, 1247, 0, 1409,
	0, 0, 1576, 1577, 1578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 0, 0, 124,
	0, 124, 831, 0, 0, 0, 0, 0, 0, 1573,
	0, 1622, 0, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 373, 0, 0, 0, 0, 0,
	0, 1597, 0, 0, 1598, 0, 0, 1600, 0, 480,
	0, 0, 1046, 0, 0, 1486, 1466, 0, 1483, 0,
	32, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 0, 480, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1650, 373, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 1546, 1547, 1548,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 124, 0, 0, 124, 0, 0, 945, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1770, 0, 0, 0, 480, 0, 0,
	0, 0, 0, 0, 0, 1605, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 480, 0, 0, 0, 0, 0, 466, 945, 0,
	0, 0, 466, 466, 0, 0, 466, 466, 466, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1605, 1605, 1605, 0, 1645, 0,
	0, 466, 466, 466, 466, 466, 0, 0, 0, 1656,
	1066, 1658, 0, 0, 0, 0, 0, 1605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 945, 124, 0, 124, 0,
	0, 0, 0, 0, 1605, 0, 124, 124, 0, 0,
	0, 0, 0, 0, 0, 1540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1713, 480, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	0, 1731, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 124, 124, 124, 124, 0, 0, 124, 124,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 1605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 1243, 1244, 124, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 1066, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 124,
	124, 124, 124, 124, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 124, 0, 0, 124, 124,
	0, 0, 124, 1355, 945, 0, 0, 0, 0, 0,
	0, 0, 1732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 594, 582, 0, 124, 535,
	597, 508, 525, 605, 526, 529, 567, 493, 548, 231,
	523, 0, 512, 488, 519, 489, 510, 537, 162, 541,
	507, 584, 551, 596, 196, 0, 513, 242, 569, 273,
	153, 204, 202, 292, 167, 163, 161, 152, 184, 209,
	241, 289, 235, 603, 199, 558, 0, 281, 217, 0,
	0, 0, 539, 586, 546, 578, 534, 568, 498, 557,
	598, 524, 565, 599, 188, 151, 131, 228, 282, 169,
	0, 0, 1047, 114, 115, 116, 124, 1139, 1140, 0,
	0, 0, 0, 0, 147, 0, 562, 593, 521, 564,
	566, 608, 487, 559, 0, 491, 494, 604, 589, 516,
	517, 1366, 0, 0, 0, 0, 0, 0, 538, 547,
	575, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	514, 0, 556, 0, 0, 0, 495, 492, 0, 0,
	0, 0, 536, 0, 0, 0, 497, 0, 515, 576,
	0, 485, 174, 580, 588, 533, 315, 592, 531, 530,
	595, 253, 0, 286, 178, 195, 143, 192, 128, 139,
	0, 176, 227, 260, 264, 585, 511, 520, 154, 518,
	262, 239, 305, 555, 243, 261, 200, 294, 254, 304,
	316, 317, 159, 221, 310, 290, 313, 325, 278, 132,
	288, 302, 148, 272, 0, 0, 0, 134, 300, 285,
	215, 189, 190, 133, 0, 258, 160, 172, 156, 230,
	297, 298, 155, 327, 140, 312, 136, 141, 311, 223,
	293, 301, 216, 208, 135, 299, 214, 207, 194, 166,
	180, 251, 203, 252, 181, 219, 218, 220, 0, 490,
	0, 283, 308, 328, 145, 506, 581, 291, 321, 324,
	0, 255, 146, 173, 165, 250, 171, 197, 320, 322,
	323, 222, 142, 183, 279, 193, 201, 573, 607, 238,
	263, 149, 307, 280, 502, 505, 500, 501, 549, 550,
	600, 601, 602, 577, 496, 0, 503, 504, 0, 583,
	590, 591, 554, 127, 137, 198, 326, 256, 170, 309,
	486, 499, 158, 509, 0, 0, 522, 527, 528, 540,
	542, 543, 544, 545, 553, 560, 561, 563, 570, 571,
	572, 574, 579, 587, 606, 129, 130, 138, 144, 150,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	206, 210, 211, 212, 213, 224, 225, 226, 229, 232,
	233, 234, 236, 237, 240, 244, 245, 246, 247, 248,
	249, 257, 259, 265, 266, 267, 268, 269, 270, 271,
	274, 275, 276, 277, 284, 287, 295, 296, 306, 314,
	318, 177, 303, 319, 0, 205, 552, 594, 582, 0,
	0, 535, 597, 508, 525, 605, 526, 529, 567, 493,
	548, 231, 523, 0, 512, 488, 519, 489, 510, 537,
	162, 541, 507, 584, 551, 596, 196, 0, 513, 242,
	569, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 603, 199, 558, 0, 281,
	217, 0, 0, 0, 539, 586, 546, 578, 534, 568,
	498, 557, 598, 524, 565, 599, 188, 151, 131, 228,
	282, 169, 0, 0, 0, 114, 115, 116, 0, 1139,
	1140, 0, 0, 0, 0, 0, 147, 0, 562, 593,
	521, 564, 566, 608, 487, 559, 0, 491, 494, 604,
	589, 516, 517, 0, 0, 0, 0, 0, 0, 0,
	538, 547, 575, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 0, 556, 0, 0, 0, 495, 492,
	0, 0, 0, 0, 536, 0, 0, 0, 497, 0,
	515, 576, 0, 485, 174, 580, 588, 533, 315, 592,
	531, 530, 595, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 585, 511, 520,
	154, 518, 262, 239, 305, 555, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 490, 0, 283, 308, 328, 145, 506, 581, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 573,
	607, 238, 263, 149, 307, 280, 502, 505, 500, 501,
	549, 550, 600, 601, 602, 577, 496, 0, 503, 504,
	0, 583, 590, 591, 554, 127, 137, 198, 326, 256,
	170, 309, 486, 499, 158, 509, 0, 0, 522, 527,
	528, 540, 542, 543, 544, 545, 553, 560, 561, 563,
	570, 571, 572, 574, 579, 587, 606, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 0, 205, 552, 594,
	582, 0, 0, 535, 597, 508, 525, 605, 526, 529,
	567, 493, 548, 231, 523, 0, 512, 488, 519, 489,
	510, 537, 162, 541, 507, 584, 551, 596, 196, 0,
	513, 242, 569, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 603, 199, 558,
	0, 281, 217, 0, 0, 0, 539, 586, 546, 578,
	534, 568, 498, 557, 598, 524, 565, 599, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	562, 593, 521, 564, 566, 608, 487, 559, 0, 491,
	494, 604, 589, 516, 517, 0, 0, 0, 0, 0,
	0, 0, 538, 547, 575, 532, 0, 0, 0, 0,
	0, 0, 1475, 0, 514, 0, 556, 0, 0, 0,
	495, 492, 0, 0, 0, 0, 536, 0, 0, 0,
	497, 0, 515, 576, 0, 485, 174, 580, 588, 533,
	315, 592, 531, 530, 595, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 585,
	511, 520, 154, 518, 262, 239, 305, 555, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 141, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 490, 0, 283, 308, 328, 145, 506,
	581, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 222, 142, 183, 279, 193,
	201, 573, 607, 238, 263, 149, 307, 280, 502, 505,
	500, 501, 549, 550, 600, 601, 602, 577, 496, 0,
	503, 504, 0, 583, 590, 591, 554, 127, 137, 198,
	326, 256, 170, 309, 486, 499, 158, 509, 0, 0,
	522, 527, 528, 540, 542, 543, 544, 545, 553, 560,
	561, 563, 570, 571, 572, 574, 579, 587, 606, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 0, 205,
	552, 594, 582, 0, 0, 535, 597, 508, 525, 605,
	526, 529, 567, 493, 548, 231, 523, 0, 512, 488,
	519, 489, 510, 537, 162, 541, 507, 584, 551, 596,
	196, 0, 513, 242, 569, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 603,
	199, 558, 0, 281, 217, 0, 0, 0, 539, 586,
	546, 578, 534, 568, 498, 557, 598, 524, 565, 599,
	188, 151, 131, 228, 282, 169, 66, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 562, 593, 521, 564, 566, 608, 487, 559,
	0, 491, 494, 604, 589, 516, 517, 0, 0, 0,
	0, 0, 0, 0, 538, 547, 575, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 0, 556, 0,
	0, 0, 495, 492, 0, 0, 0, 0, 536, 0,
	0, 0, 497, 0, 515, 576, 0, 485, 174, 580,
	588, 533, 315, 592, 531, 530, 595, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 585, 511, 520, 154, 518, 262, 239, 305, 555,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 302, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 141, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 490, 0, 283, 308, 328,
	145, 506, 581, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 222, 142, 183,
	279, 193, 201, 573, 607, 238, 263, 149, 307, 280,
	502, 505, 500, 501, 549, 550, 600, 601, 602, 577,
	496, 0, 503, 504, 0, 583, 590, 591, 554, 127,
	137, 198, 326, 256, 170, 309, 486, 499, 158, 509,
	0, 0, 522, 527, 528, 540, 542, 543, 544, 545,
	553, 560, 561, 563, 570, 571, 572, 574, 579, 587,
	606, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	0, 205, 552, 594, 582, 0, 0, 535, 597, 508,
	525, 605, 526, 529, 567, 493, 548, 231, 523, 0,
	512, 488, 519, 489, 510, 537, 162, 541, 507, 584,
	551, 596, 196, 0, 513, 242, 569, 273, 153, 204,
	202, 292, 167, 163, 161, 152, 184, 209, 241, 289,
	235, 603, 199, 558, 0, 281, 217, 0, 0, 0,
	539, 586, 546, 578, 534, 568, 498, 557, 598, 524,
	565, 599, 188, 151, 131, 228, 282, 169, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 562, 593, 521, 564, 566, 608,
	487, 559, 0, 491, 494, 604, 589, 516, 517, 0,
	0, 0, 0, 0, 0, 0, 538, 547, 575, 532,
	0, 0, 0, 0, 0, 0, 1356, 0, 514, 0,
	556, 0, 0, 0, 495, 492, 0, 0, 0, 0,
	536, 0, 0, 0, 497, 0, 515, 576, 0, 485,
	174, 580, 588, 533, 315, 592, 531, 530, 595, 253,
	0, 286, 178, 195, 143, 192, 128, 139, 0, 176,
	227, 260, 264, 585, 511, 520, 154, 518, 262, 239,
	305, 555, 243, 261, 200, 294, 254, 304, 316, 317,
	159, 221, 310, 290, 313, 325, 278, 132, 288, 302,
	148, 272, 0, 0, 0, 134, 300, 285, 215, 189,
	190, 133, 0, 258, 160, 172, 156, 230, 297, 298,
	155, 327, 140, 312, 136, 141, 311, 223, 293, 301,
	216, 208, 135, 299, 214, 207, 194, 166, 180, 251,
	203, 252, 181, 219, 218, 220, 0, 490, 0, 283,
	308, 328, 145, 506, 581, 291, 321, 324, 0, 255,
	146, 173, 165, 250, 171, 197, 320, 322, 323, 222,
	142, 183, 279, 193, 201, 573, 607, 238, 263, 149,
	307, 280, 502, 505, 500, 501, 549, 550, 600, 601,
	602, 577, 496, 0, 503, 504, 0, 583, 590, 591,
	554, 127, 137, 198, 326, 256, 170, 309, 486, 499,
	158, 509, 0, 0, 522, 527, 528, 540, 542, 543,
	544, 545, 553, 560, 561, 563, 570, 571, 572, 574,
	579, 587, 606, 129, 130, 138, 144, 150, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 206, 210,
	211, 212, 213, 224, 225, 226, 229, 232, 233, 234,
	236, 237, 240, 244, 245, 246, 247, 248, 249, 257,
	259, 265, 266, 267, 268, 269, 270, 271, 274, 275,
	276, 277, 284, 287, 295, 296, 306, 314, 318, 177,
	303, 319, 0, 205, 552, 594, 582, 0, 0, 535,
	597, 508, 525, 605, 526, 529, 567, 493, 548, 231,
	523, 0, 512, 488, 519, 489, 510, 537, 162, 541,
	507, 584, 551, 596, 196, 0, 513, 242, 569, 273,
	153, 204, 202, 292, 167, 163, 161, 152, 184, 209,
	241, 289, 235, 603, 199, 558, 0, 281, 217, 0,
	0, 0, 539, 586, 546, 578, 534, 568, 498, 557,
	598, 524, 565, 599, 188, 151, 131, 228, 282, 169,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 562, 593, 521, 564,
	566, 608, 487, 559, 0, 491, 494, 604, 589, 516,
	517, 0, 0, 0, 0, 0, 0, 0, 538, 547,
	575, 532, 0, 0, 0, 0, 0, 0, 1091, 0,
	514, 0, 556, 0, 0, 0, 495, 492, 0, 0,
	0, 0, 536, 0, 0, 0, 497, 0, 515, 576,
	0, 485, 174, 580, 588, 533, 315, 592, 531, 530,
	595, 253, 0, 286, 178, 195, 143, 192, 128, 139,
	0, 176, 227, 260, 264, 585, 511, 520, 154, 518,
	262, 239, 305, 555, 243, 261, 200, 294, 254, 304,
	316, 317, 159, 221, 310, 290, 313, 325, 278, 132,
	288, 302, 148, 272, 0, 0, 0, 134, 300, 285,
	215, 189, 190, 133, 0, 258, 160, 172, 156, 230,
	297, 298, 155, 327, 140, 312, 136, 141, 311, 223,
	293, 301, 216, 208, 135, 299, 214, 207, 194, 166,
	180, 251, 203, 252, 181, 219, 218, 220, 0, 490,
	0, 283, 308, 328, 145, 506, 581, 291, 321, 324,
	0, 255, 146, 173, 165, 250, 171, 197, 320, 322,
	323, 222, 142, 183, 279, 193, 201, 573, 607, 238,
	263, 149, 307, 280, 502, 505, 500, 501, 549, 550,
	600, 601, 602, 577, 496, 0, 503, 504, 0, 583,
	590, 591, 554, 127, 137, 198, 326, 256, 170, 309,
	486, 499, 158, 509, 0, 0, 522, 527, 528, 540,
	542, 543, 544, 545, 553, 560, 561, 563, 570, 571,
	572, 574, 579, 587, 606, 129, 130, 138, 144, 150,
	157, 164, 168, 175, 179, 182, 185, 186, 187, 191,
	206, 210, 211, 212, 213, 224, 225, 226, 229, 232,
	233, 234, 236, 237, 240, 244, 245, 246, 247, 248,
	249, 257, 259, 265, 266, 267, 268, 269, 270, 271,
	274, 275, 276, 277, 284, 287, 295, 296, 306, 314,
	318, 177, 303, 319, 0, 205, 552, 594, 582, 0,
	0, 535, 597, 508, 525, 605, 526, 529, 567, 493,
	548, 231, 523, 0, 512, 488, 519, 489, 510, 537,
	162, 541, 507, 584, 551, 596, 196, 0, 513, 242,
	569, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 603, 199, 558, 0, 281,
	217, 0, 0, 0, 539, 586, 546, 578, 534, 568,
	498, 557, 598, 524, 565, 599, 188, 151, 131, 228,
	282, 169, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 562, 593,
	521, 564, 566, 608, 487, 559, 0, 491, 494, 604,
	589, 516, 517, 0, 0, 0, 0, 0, 0, 0,
	538, 547, 575, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 514, 0, 556, 0, 0, 0, 495, 492,
	0, 0, 0, 0, 536, 0, 0, 0, 497, 0,
	515, 576, 0, 485, 174, 580, 588, 533, 315, 592,
	531, 530, 595, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 585, 511, 520,
	154, 518, 262, 239, 305, 555, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 490, 0, 283, 308, 328, 145, 506, 581, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 573,
	607, 238, 263, 149, 307, 280, 502, 505, 500, 501,
	549, 550, 600, 601, 602, 577, 496, 0, 503, 504,
	0, 583, 590, 591, 554, 127, 137, 198, 326, 256,
	170, 309, 486, 499, 158, 509, 0, 0, 522, 527,
	528, 540, 542, 543, 544, 545, 553, 560, 561, 563,
	570, 571, 572, 574, 579, 587, 606, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 0, 205, 552, 594,
	582, 0, 0, 535, 597, 508, 525, 605, 526, 529,
	567, 493, 548, 231, 523, 0, 512, 488, 519, 489,
	510, 537, 162, 541, 507, 584, 551, 596, 196, 0,
	513, 242, 569, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 603, 199, 558,
	0, 281, 217, 0, 0, 0, 539, 586, 546, 578,
	534, 568, 498, 557, 598, 524, 565, 599, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	562, 593, 521, 564, 566, 608, 487, 559, 0, 491,
	494, 604, 589, 516, 517, 0, 0, 0, 0, 0,
	0, 0, 538, 547, 575, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 514, 0, 556, 0, 0, 0,
	495, 492, 0, 0, 0, 0, 536, 0, 0, 0,
	497, 0, 515, 576, 0, 485, 174, 580, 588, 533,
	315, 592, 531, 530, 595, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 585,
	511, 520, 154, 518, 262, 239, 305, 555, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 483, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 490, 0, 283, 308, 328, 145, 506,
	581, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 484, 482, 477, 476, 193,
	201, 573, 607, 238, 263, 149, 307, 280, 502, 505,
	500, 501, 549, 550, 600, 601, 602, 577, 496, 0,
	503, 504, 0, 583, 590, 591, 554, 127, 137, 198,
	326, 256, 170, 309, 486, 499, 158, 509, 0, 0,
	522, 527, 528, 540, 542, 543, 544, 545, 553, 560,
	561, 563, 570, 571, 572, 574, 579, 587, 606, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 0, 205,
	552, 594, 582, 0, 0, 535, 597, 508, 525, 605,
	526, 529, 567, 493, 548, 231, 523, 0, 512, 488,
	519, 489, 510, 537, 162, 541, 507, 584, 551, 596,
	196, 0, 513, 242, 569, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 603,
	199, 558, 0, 281, 217, 0, 0, 0, 539, 586,
	546, 578, 534, 568, 498, 557, 598, 524, 565, 599,
	188, 151, 131, 228, 282, 169, 0, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 562, 593, 521, 564, 566, 608, 487, 559,
	0, 491, 494, 604, 589, 516, 517, 0, 0, 0,
	0, 0, 0, 0, 538, 547, 575, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 514, 0, 556, 0,
	0, 0, 495, 492, 0, 0, 0, 0, 536, 0,
	0, 0, 497, 0, 515, 576, 0, 485, 174, 580,
	588, 533, 315, 592, 531, 530, 595, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 585, 511, 520, 154, 518, 262, 239, 305, 555,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 833, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 483, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 490, 0, 283, 308, 328,
	145, 506, 581, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 484, 482, 477,
	476, 193, 201, 573, 607, 238, 263, 149, 307, 280,
	502, 505, 500, 501, 549, 550, 600, 601, 602, 577,
	496, 0, 503, 504, 0, 583, 590, 591, 554, 127,
	137, 198, 326, 256, 170, 309, 486, 499, 158, 509,
	0, 0, 522, 527, 528, 540, 542, 543, 544, 545,
	553, 560, 561, 563, 570, 571, 572, 574, 579, 587,
	606, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	0, 205, 552, 594, 582, 0, 0, 535, 597, 508,
	525, 605, 526, 529, 567, 493, 548, 231, 523, 0,
	512, 488, 519, 489, 510, 537, 162, 541, 507, 584,
	551, 596, 196, 0, 513, 242, 569, 273, 153, 204,
	202, 292, 167, 163, 161, 152, 184, 209, 241, 289,
	235, 603, 199, 558, 0, 281, 217, 0, 0, 0,
	539, 586, 546, 578, 534, 568, 498, 557, 598, 524,
	565, 599, 188, 151, 131, 228, 282, 169, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 562, 593, 521, 564, 566, 608,
	487, 559, 0, 491, 494, 604, 589, 516, 517, 0,
	0, 0, 0, 0, 0, 0, 538, 547, 575, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 514, 0,
	556, 0, 0, 0, 495, 492, 0, 0, 0, 0,
	536, 0, 0, 0, 497, 0, 515, 576, 0, 485,
	174, 580, 588, 533, 315, 592, 531, 530, 595, 253,
	0, 286, 178, 195, 143, 192, 128, 139, 0, 176,
	227, 260, 264, 585, 511, 520, 154, 518, 262, 239,
	305, 555, 243, 261, 200, 294, 254, 304, 316, 317,
	159, 221, 310, 290, 313, 325, 278, 132, 288, 474,
	148, 272, 0, 0, 0, 134, 300, 285, 215, 189,
	190, 133, 0, 258, 160, 172, 156, 230, 297, 298,
	155, 327, 140, 312, 136, 483, 311, 223, 293, 301,
	216, 208, 135, 299, 214, 207, 194, 166, 180, 251,
	203, 252, 181, 219, 218, 220, 0, 490, 0, 283,
	308, 328, 145, 506, 581, 291, 321, 324, 0, 255,
	146, 173, 165, 250, 171, 197, 320, 322, 323, 484,
	482, 477, 476, 193, 201, 573, 607, 238, 263, 149,
	307, 280, 502, 505, 500, 501, 549, 550, 600, 601,
	602, 577, 496, 0, 503, 504, 0, 583, 590, 591,
	554, 127, 137, 198, 326, 256, 170, 309, 486, 499,
	158, 509, 0, 0, 522, 527, 528, 540, 542, 543,
	544, 545, 553, 560, 561, 563, 570, 571, 572, 574,
	579, 587, 606, 129, 130, 138, 144, 150, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 206, 210,
	211, 212, 213, 224, 225, 226, 229, 232, 233, 234,
	236, 237, 240, 244, 245, 246, 247, 248, 249, 257,
	259, 265, 266, 267, 268, 269, 270, 271, 274, 275,
	276, 277, 284, 287, 295, 296, 306, 314, 318, 177,
	303, 319, 231, 205, 552, 1018, 0, 378, 0, 0,
	0, 162, 0, 377, 0, 0, 0, 196, 0, 1019,
	242, 0, 273, 153, 204, 202, 292, 167, 163, 161,
	152, 184, 209, 241, 289, 235, 421, 199, 0, 0,
	281, 217, 0, 0, 0, 0, 0, 412, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 151, 131,
	228, 282, 169, 66, 0, 0, 114, 115, 116, 399,
	398, 401, 402, 403, 404, 0, 0, 147, 400, 405,
	406, 407, 0, 0, 0, 0, 375, 392, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	390, 464, 0, 0, 0, 435, 0, 391, 0, 0,
	384, 385, 387, 386, 388, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 434, 0, 0, 315,
	0, 0, 432, 0, 253, 0, 286, 178, 195, 143,
	192, 128, 139, 0, 176, 227, 260, 264, 0, 0,
	0, 154, 0, 262, 239, 305, 0, 243, 261, 200,
	294, 254, 304, 316, 317, 159, 221, 310, 290, 313,
	325, 278, 132, 288, 302, 148, 272, 0, 0, 0,
	134, 300, 285, 215, 189, 190, 133, 0, 258, 160,
	172, 156, 230, 297, 298, 155, 327, 140, 312, 136,
	141, 311, 223, 293, 301, 216, 208, 135, 299, 214,
	207, 194, 166, 180, 251, 203, 252, 181, 219, 218,
	220, 0, 0, 0, 283, 308, 328, 145, 0, 0,
	291, 321, 324, 0, 255, 146, 173, 165, 250, 171,
	197, 320, 322, 323, 222, 142, 183, 279, 193, 201,
	0, 0, 238, 263, 149, 307, 280, 422, 433, 428,
	429, 426, 427, 425, 424, 423, 436, 414, 415, 416,
	417, 419, 0, 430, 431, 418, 127, 137, 198, 326,
	256, 170, 309, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	138, 144, 150, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 206, 210, 211, 212, 213, 224, 225,
	226, 229, 232, 233, 234, 236, 237, 240, 244, 245,
	246, 247, 248, 249, 257, 259, 265, 266, 267, 268,
	269, 270, 271, 274, 275, 276, 277, 284, 287, 295,
	296, 306, 314, 318, 177, 303, 319, 231, 205, 0,
	0, 0, 378, 0, 0, 0, 162, 0, 377, 0,
	0, 0, 196, 0, 0, 242, 0, 273, 153, 204,
	202, 292, 167, 163, 161, 152, 184, 209, 241, 289,
	235, 421, 199, 0, 0, 281, 217, 0, 0, 0,
	0, 0, 412, 413, 0, 0, 0, 0, 0, 0,
	1130, 0, 188, 151, 131, 228, 282, 169, 66, 0,
	0, 114, 115, 116, 399, 398, 401, 402, 403, 404,
	0, 0, 147, 400, 405, 406, 407, 1131, 0, 0,
	0, 375, 392, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 390, 0, 0, 0, 0,
	435, 0, 391, 0, 0, 384, 385, 387, 386, 388,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 434, 0, 0, 315, 0, 0, 432, 0, 253,
	0, 286, 178, 195, 143, 192, 128, 139, 0, 176,
	227, 260, 264, 0, 0, 0, 154, 0, 262, 239,
	305, 0, 243, 261, 200, 294, 254, 304, 316, 317,
	159, 221, 310, 290, 313, 325, 278, 132, 288, 302,
	148, 272, 0, 0, 0, 134, 300, 285, 215, 189,
	190, 133, 0, 258, 160, 172, 156, 230, 297, 298,
	155, 327, 140, 312, 136, 141, 311, 223, 293, 301,
	216, 208, 135, 299, 214, 207, 194, 166, 180, 251,
	203, 252, 181, 219, 218, 220, 0, 0, 0, 283,
	308, 328, 145, 0, 0, 291, 321, 324, 0, 255,
	146, 173, 165, 250, 171, 197, 320, 322, 323, 222,
	142, 183, 279, 193, 201, 0, 0, 238, 263, 149,
	307, 280, 422, 433, 428, 429, 426, 427, 425, 424,
	423, 436, 414, 415, 416, 417, 419, 0, 430, 431,
	418, 127, 137, 198, 326, 256, 170, 309, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 138, 144, 150, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 206, 210,
	211, 212, 213, 224, 225, 226, 229, 232, 233, 234,
	236, 237, 240, 244, 245, 246, 247, 248, 249, 257,
	259, 265, 266, 267, 268, 269, 270, 271, 274, 275,
	276, 277, 284, 287, 295, 296, 306, 314, 318, 177,
	303, 319, 231, 205, 0, 0, 0, 378, 0, 0,
	0, 162, 0, 377, 0, 0, 0, 196, 0, 0,
	242, 0, 273, 153, 204, 202, 292, 167, 163, 161,
	152, 184, 209, 241, 289, 235, 421, 199, 0, 0,
	281, 217, 0, 0, 0, 0, 0, 412, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 151, 131,
	228, 282, 169, 66, 0, 452, 114, 115, 116, 399,
	398, 401, 402, 403, 404, 0, 0, 147, 400, 405,
	406, 407, 0, 0, 0, 0, 375, 392, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	390, 0, 0, 0, 0, 435, 0, 391, 0, 0,
	384, 385, 387, 386, 388, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 434, 0, 0, 315,
	0, 0, 432, 0, 253, 0, 286, 178, 195, 143,
	192, 128, 139, 0, 176, 227, 260, 264, 0, 0,
	0, 154, 0, 262, 239, 305, 0, 243, 261, 200,
	294, 254, 304, 316, 317, 159, 221, 310, 290, 313,
	325, 278, 132, 288, 302, 148, 272, 0, 0, 0,
	134, 300, 285, 215, 189, 190, 133, 0, 258, 160,
	172, 156, 230, 297, 298, 155, 327, 140, 312, 136,
	141, 311, 223, 293, 301, 216, 208, 135, 299, 214,
	207, 194, 166, 180, 251, 203, 252, 181, 219, 218,
	220, 0, 0, 0, 283, 308, 328, 145, 0, 0,
	291, 321, 324, 0, 255, 146, 173, 165, 250, 171,
	197, 320, 322, 323, 222, 142, 183, 279, 193, 201,
	0, 0, 238, 263, 149, 307, 280, 422, 433, 428,
	429, 426, 427, 425, 424, 423, 436, 414, 415, 416,
	417, 419, 0, 430, 431, 418, 127, 137, 198, 326,
	256, 170, 309, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	138, 144, 150, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 206, 210, 211, 212, 213, 224, 225,
	226, 229, 232, 233, 234, 236, 237, 240, 244, 245,
	246, 247, 248, 249, 257, 259, 265, 266, 267, 268,
	269, 270, 271, 274, 275, 276, 277, 284, 287, 295,
	296, 306, 314, 318, 177, 303, 319, 231, 205, 0,
	0, 0, 378, 0, 0, 0, 162, 0, 377, 0,
	0, 0, 196, 0, 0, 242, 0, 273, 153, 204,
	202, 292, 167, 163, 161, 152, 184, 209, 241, 289,
	235, 421, 199, 0, 0, 281, 217, 0, 0, 0,
	0, 0, 412, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 151, 131, 228, 282, 169, 66, 0,
	0, 114, 115, 116, 399, 398, 401, 402, 403, 404,
	0, 0, 147, 400, 405, 406, 407, 0, 0, 0,
	0, 375, 392, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 390, 464, 0, 0, 0,
	435, 0, 391, 0, 0, 384, 385, 387, 386, 388,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 434, 0, 0, 315, 0, 0, 432, 0, 253,
	0, 286, 178, 195, 143, 192, 128, 139, 0, 176,
	227, 260, 264, 0, 0, 0, 154, 0, 262, 239,
	305, 0, 243, 261, 200, 294, 254, 304, 316, 317,
	159, 221, 310, 290, 313, 325, 278, 132, 288, 302,
	148, 272, 0, 0, 0, 134, 300, 285, 215, 189,
	190, 133, 0, 258, 160, 172, 156, 230, 297, 298,
	155, 327, 140, 312, 136, 141, 311, 223, 293, 301,
	216, 208, 135, 299, 214, 207, 194, 166, 180, 251,
	203, 252, 181, 219, 218, 220, 0, 0, 0, 283,
	308, 328, 145, 0, 0, 291, 321, 324, 0, 255,
	146, 173, 165, 250, 171, 197, 320, 322, 323, 222,
	142, 183, 279, 193, 201, 0, 0, 238, 263, 149,
	307, 280, 422, 433, 428, 429, 426, 427, 425, 424,
	423, 436, 414, 415, 416, 417, 419, 0, 430, 431,
	418, 127, 137, 198, 326, 256, 170, 309, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 138, 144, 150, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 206, 210,
	211, 212, 213, 224, 225, 226, 229, 232, 233, 234,
	236, 237, 240, 244, 245, 246, 247, 248, 249, 257,
	259, 265, 266, 267, 268, 269, 270, 271, 274, 275,
	276, 277, 284, 287, 295, 296, 306, 314, 318, 177,
	303, 319, 231, 205, 0, 0, 0, 378, 0, 0,
	0, 162, 0, 377, 0, 0, 0, 196, 0, 0,
	242, 0, 273, 153, 204, 202, 292, 167, 163, 161,
	152, 184, 209, 241, 289, 235, 421, 199, 0, 0,
	281, 217, 0, 0, 0, 0, 0, 412, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 151, 131,
	228, 282, 169, 66, 0, 0, 114, 115, 116, 399,
	1036, 401, 402, 403, 404, 0, 0, 147, 400, 405,
	406, 407, 0, 0, 0, 0, 375, 392, 0, 420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	390, 464, 0, 0, 0, 435, 0, 391, 0, 0,
	384, 385, 387, 386, 388, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 434, 0, 0, 315,
	0, 0, 432, 0, 253, 0, 286, 178, 195, 143,
	192, 128, 139, 0, 176, 227, 260, 264, 0, 0,
	0, 154, 0, 262, 239, 305, 0, 243, 261, 200,
	294, 254, 304, 316, 317, 159, 221, 310, 290, 313,
	325, 278, 132, 288, 302, 148, 272, 0, 0, 0,
	134, 300, 285, 215, 189, 190, 133, 0, 258, 160,
	172, 156, 230, 297, 298, 155, 327, 140, 312, 136,
	141, 311, 223, 293, 301, 216, 208, 135, 299, 214,
	207, 194, 166, 180, 251, 203, 252, 181, 219, 218,
	220, 0, 0, 0, 283, 308, 328, 145, 0, 0,
	291, 321, 324, 0, 255, 146, 173, 165, 250, 171,
	197, 320, 322, 323, 222, 142, 183, 279, 193, 201,
	0, 0, 238, 263, 149, 307, 280, 422, 433, 428,
	429, 426, 427, 425, 424, 423, 436, 414, 415, 416,
	417, 419, 0, 430, 431, 418, 127, 137, 198, 326,
	256, 170, 309, 0, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 130,
	138, 144, 150, 157, 164, 168, 175, 179, 182, 185,
	186, 187, 191, 206, 210, 211, 212, 213, 224, 225,
	226, 229, 232, 233, 234, 236, 237, 240, 244, 245,
	246, 247, 248, 249, 257, 259, 265, 266, 267, 268,
	269, 270, 271, 274, 275, 276, 277, 284, 287, 295,
	296, 306, 314, 318, 177, 303, 319, 231, 205, 0,
	0, 0, 378, 0, 0, 0, 162, 0, 377, 0,
	0, 0, 196, 0, 0, 242, 0, 273, 153, 204,
	202, 292, 167, 163, 161, 152, 184, 209, 241, 289,
	235, 421, 199, 0, 0, 281, 217, 0, 0, 0,
	0, 0, 412, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 151, 131, 228, 282, 169, 66, 0,
	0, 114, 115, 116, 399, 1033, 401, 402, 403, 404,
	0, 0, 147, 400, 405, 406, 407, 0, 0, 0,
	0, 375, 392, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 390, 464, 0, 0, 0,
	435, 0, 391, 0, 0, 384, 385, 387, 386, 388,
	393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 434, 0, 0, 315, 0, 0, 432, 0, 253,
	0, 286, 178, 195, 143, 192, 128, 139, 0, 176,
	227, 260, 264, 0, 0, 0, 154, 0, 262, 239,
	305, 0, 243, 261, 200, 294, 254, 304, 316, 317,
	159, 221, 310, 290, 313, 325, 278, 132, 288, 302,
	148, 272, 0, 0, 0, 134, 300, 285, 215, 189,
	190, 133, 0, 258, 160, 172, 156, 230, 297, 298,
	155, 327, 140, 312, 136, 141, 311, 223, 293, 301,
	216, 208, 135, 299, 214, 207, 194, 166, 180, 251,
	203, 252, 181, 219, 218, 220, 0, 0, 0, 283,
	308, 328, 145, 0, 0, 291, 321, 324, 0, 255,
	146, 173, 165, 250, 171, 197, 320, 322, 323, 222,
	142, 183, 279, 193, 201, 0, 0, 238, 263, 149,
	307, 280, 422, 433, 428, 429, 426, 427, 425, 424,
	423, 436, 414, 415, 416, 417, 419, 0, 430, 431,
	418, 127, 137, 198, 326, 256, 170, 309, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 130, 138, 144, 150, 157, 164,
	168, 175, 179, 182, 185, 186, 187, 191, 206, 210,
	211, 212, 213, 224, 225, 226, 229, 232, 233, 234,
	236, 237, 240, 244, 245, 246, 247, 248, 249, 257,
	259, 265, 266, 267, 268, 269, 270, 271, 274, 275,
	276, 277, 284, 287, 295, 296, 306, 314, 318, 177,
	303, 319, 445, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 231, 0, 0, 0, 0,
	378, 0, 0, 0, 162, 0, 377, 0, 0, 0,
	196, 0, 0, 242, 0, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 421,
	199, 0, 0, 281, 217, 0, 0, 0, 0, 0,
	412, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 151, 131, 228, 282, 169, 66, 0, 0, 114,
	115, 116, 399, 398, 401, 402, 403, 404, 0, 0,
	147, 400, 405, 406, 407, 0, 0, 0, 0, 375,
	392, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 435, 0,
	391, 0, 0, 384, 385, 387, 386, 388, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 434,
	0, 0, 315, 0, 0, 432, 0, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 0, 0, 0, 154, 0, 262, 239, 305, 0,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 302, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 141, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 0, 0, 283, 308, 328,
	145, 0, 0, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 222, 142, 183,
	279, 193, 201, 0, 0, 238, 263, 149, 307, 280,
	422, 433, 428, 429, 426, 427, 425, 424, 423, 436,
	414, 415, 416, 417, 419, 0, 430, 431, 418, 127,
	137, 198, 326, 256, 170, 309, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	231, 205, 0, 0, 0, 378, 0, 0, 0, 162,
	0, 377, 0, 0, 0, 196, 0, 0, 242, 0,
	273, 153, 204, 202, 292, 167, 163, 161, 152, 184,
	209, 241, 289, 235, 421, 199, 0, 0, 281, 217,
	0, 0, 0, 0, 0, 412, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 151, 131, 228, 282,
	169, 66, 0, 0, 114, 115, 116, 399, 398, 401,
	402, 403, 404, 0, 0, 147, 400, 405, 406, 407,
	0, 0, 0, 0, 375, 392, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 390, 0,
	0, 0, 0, 435, 0, 391, 0, 0, 384, 385,
	387, 386, 388, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 434, 0, 0, 315, 0, 0,
	432, 0, 253, 0, 286, 178, 195, 143, 192, 128,
	139, 0, 176, 227, 260, 264, 0, 0, 0, 154,
	0, 262, 239, 305, 0, 243, 261, 200, 294, 254,
	304, 316, 317, 159, 221, 310, 290, 313, 325, 278,
	132, 288, 302, 148, 272, 0, 0, 0, 134, 300,
	285, 215, 189, 190, 133, 0, 258, 160, 172, 156,
	230, 297, 298, 155, 327, 140, 312, 136, 141, 311,
	223, 293, 301, 216, 208, 135, 299, 214, 207, 194,
	166, 180, 251, 203, 252, 181, 219, 218, 220, 0,
	0, 0, 283, 308, 328, 145, 0, 0, 291, 321,
	324, 0, 255, 146, 173, 165, 250, 171, 197, 320,
	322, 323, 222, 142, 183, 279, 193, 201, 0, 0,
	238, 263, 149, 307, 280, 422, 433, 428, 429, 426,
	427, 425, 424, 423, 436, 414, 415, 416, 417, 419,
	0, 430, 431, 418, 127, 137, 198, 326, 256, 170,
	309, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 138, 144,
	150, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 206, 210, 211, 212, 213, 224, 225, 226, 229,
	232, 233, 234, 236, 237, 240, 244, 245, 246, 247,
	248, 249, 257, 259, 265, 266, 267, 268, 269, 270,
	271, 274, 275, 276, 277, 284, 287, 295, 296, 306,
	314, 318, 177, 303, 319, 231, 205, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	196, 0, 0, 242, 0, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 421,
	199, 0, 0, 281, 217, 0, 0, 0, 0, 0,
	412, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 151, 131, 228, 282, 169, 66, 0, 0, 114,
	115, 116, 399, 398, 401, 402, 403, 404, 0, 0,
	147, 400, 405, 406, 407, 0, 0, 0, 0, 0,
	392, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 435, 0,
	391, 0, 0, 384, 385, 387, 386, 388, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 434,
	0, 0, 315, 0, 0, 432, 0, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 0, 0, 0, 154, 0, 262, 239, 305, 1776,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 302, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 141, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 0, 0, 283, 308, 328,
	145, 0, 0, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 222, 142, 183,
	279, 193, 201, 0, 0, 238, 263, 149, 307, 280,
	422, 433, 428, 429, 426, 427, 425, 424, 423, 436,
	414, 415, 416, 417, 419, 0, 430, 431, 418, 127,
	137, 198, 326, 256, 170, 309, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	231, 205, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 196, 0, 0, 242, 0,
	273, 153, 204, 202, 292, 167, 163, 161, 152, 184,
	209, 241, 289, 235, 421, 199, 0, 0, 281, 217,
	0, 0, 0, 0, 0, 412, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 151, 131, 228, 282,
	169, 66, 0, 452, 114, 115, 116, 399, 398, 401,
	402, 403, 404, 0, 0, 147, 400, 405, 406, 407,
	0, 0, 0, 0, 0, 392, 0, 420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 390, 0,
	0, 0, 0, 435, 0, 391, 0, 0, 384, 385,
	387, 386, 388, 393, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 434, 0, 0, 315, 0, 0,
	432, 0, 253, 0, 286, 178, 195, 143, 192, 128,
	139, 0, 176, 227, 260, 264, 0, 0, 0, 154,
	0, 262, 239, 305, 0, 243, 261, 200, 294, 254,
	304, 316, 317, 159, 221, 310, 290, 313, 325, 278,
	132, 288, 302, 148, 272, 0, 0, 0, 134, 300,
	285, 215, 189, 190, 133, 0, 258, 160, 172, 156,
	230, 297, 298, 155, 327, 140, 312, 136, 141, 311,
	223, 293, 301, 216, 208, 135, 299, 214, 207, 194,
	166, 180, 251, 203, 252, 181, 219, 218, 220, 0,
	0, 0, 283, 308, 328, 145, 0, 0, 291, 321,
	324, 0, 255, 146, 173, 165, 250, 171, 197, 320,
	322, 323, 222, 142, 183, 279, 193, 201, 0, 0,
	238, 263, 149, 307, 280, 422, 433, 428, 429, 426,
	427, 425, 424, 423, 436, 414, 415, 416, 417, 419,
	0, 430, 431, 418, 127, 137, 198, 326, 256, 170,
	309, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 138, 144,
	150, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 206, 210, 211, 212, 213, 224, 225, 226, 229,
	232, 233, 234, 236, 237, 240, 244, 245, 246, 247,
	248, 249, 257, 259, 265, 266, 267, 268, 269, 270,
	271, 274, 275, 276, 277, 284, 287, 295, 296, 306,
	314, 318, 177, 303, 319, 231, 205, 0, 0, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	196, 0, 0, 242, 0, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 421,
	199, 0, 0, 281, 217, 0, 0, 0, 0, 0,
	412, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 151, 131, 228, 282, 169, 66, 0, 0, 114,
	115, 116, 399, 398, 401, 402, 403, 404, 0, 0,
	147, 400, 405, 406, 407, 0, 0, 0, 0, 0,
	392, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 435, 0,
	391, 0, 0, 384, 385, 387, 386, 388, 393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 434,
	0, 0, 315, 0, 0, 432, 0, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 0, 0, 0, 154, 0, 262, 239, 305, 0,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 302, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 141, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 0, 0, 283, 308, 328,
	145, 0, 0, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 222, 142, 183,
	279, 193, 201, 0, 0, 238, 263, 149, 307, 280,
	422, 433, 428, 429, 426, 427, 425, 424, 423, 436,
	414, 415, 416, 417, 419, 0, 430, 431, 418, 127,
	137, 198, 326, 256, 170, 309, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	231, 205, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 0, 196, 0, 0, 242, 0,
	273, 153, 204, 202, 292, 167, 163, 161, 152, 184,
	209, 241, 289, 235, 0, 199, 0, 0, 281, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 151, 131, 228, 282,
	169, 0, 0, 0, 114, 115, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 710, 720, 721, 713, 714, 715,
	716, 717, 718, 719, 712, 0, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 315, 0, 0,
	0, 0, 253, 0, 286, 178, 195, 143, 192, 128,
	139, 0, 176, 227, 260, 264, 0, 0, 0, 154,
	0, 262, 239, 305, 0, 243, 261, 200, 294, 254,
	304, 316, 317, 159, 221, 310, 290, 313, 325, 278,
	132, 288, 302, 148, 272, 0, 0, 0, 134, 300,
	285, 215, 189, 190, 133, 0, 258, 160, 172, 156,
	230, 297, 298, 155, 327, 140, 312, 136, 141, 311,
	223, 293, 301, 216, 208, 135, 299, 214, 207, 194,
	166, 180, 251, 203, 252, 181, 219, 218, 220, 0,
	0, 0, 283, 308, 328, 145, 0, 0, 291, 321,
	324, 0, 255, 146, 173, 165, 250, 171, 197, 320,
	322, 323, 222, 142, 183, 279, 193, 201, 0, 0,
	238, 263, 149, 307, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 137, 198, 326, 256, 170,
	309, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 138, 144,
	150, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 206, 210, 211, 212, 213, 224, 225, 226, 229,
	232, 233, 234, 236, 237, 240, 244, 245, 246, 247,
	248, 249, 257, 259, 265, 266, 267, 268, 269, 270,
	271, 274, 275, 276, 277, 284, 287, 295, 296, 306,
	314, 318, 177, 303, 319, 231, 205, 0, 0, 811,
	0, 0, 0, 0, 162, 0, 0, 0, 0, 0,
	196, 0, 0, 242, 0, 273, 153, 204, 202, 292,
	167, 163, 161, 152, 184, 209, 241, 289, 235, 0,
	199, 0, 0, 281, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 151, 131, 228, 282, 169, 0, 0, 0, 114,
	115, 116, 0, 813, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 0, 700, 701, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 315, 0, 0, 0, 0, 253, 0, 286,
	178, 195, 143, 192, 128, 139, 0, 176, 227, 260,
	264, 0, 0, 0, 154, 0, 262, 239, 305, 0,
	243, 261, 200, 294, 254, 304, 316, 317, 159, 221,
	310, 290, 313, 325, 278, 132, 288, 302, 148, 272,
	0, 0, 0, 134, 300, 285, 215, 189, 190, 133,
	0, 258, 160, 172, 156, 230, 297, 298, 155, 327,
	140, 312, 136, 141, 311, 223, 293, 301, 216, 208,
	135, 299, 214, 207, 194, 166, 180, 251, 203, 252,
	181, 219, 218, 220, 0, 0, 0, 283, 308, 328,
	145, 0, 0, 291, 321, 324, 0, 255, 146, 173,
	165, 250, 171, 197, 320, 322, 323, 222, 142, 183,
	279, 193, 201, 0, 0, 238, 263, 149, 307, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	137, 198, 326, 256, 170, 309, 0, 0, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 138, 144, 150, 157, 164, 168, 175,
	179, 182, 185, 186, 187, 191, 206, 210, 211, 212,
	213, 224, 225, 226, 229, 232, 233, 234, 236, 237,
	240, 244, 245, 246, 247, 248, 249, 257, 259, 265,
	266, 267, 268, 269, 270, 271, 274, 275, 276, 277,
	284, 287, 295, 296, 306, 314, 318, 177, 303, 319,
	231, 205, 0, 0, 0, 0, 0, 0, 0, 162,
	1155, 0, 0, 0, 0, 196, 0, 0, 242, 0,
	273, 153, 204, 202, 292, 167, 163, 161, 152, 184,
	209, 241, 289, 235, 0, 199, 0, 0, 281, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 151, 131, 228, 282,
	169, 0, 0, 0, 114, 115, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 1154, 315, 0, 0,
	0, 1150, 1147, 0, 1148, 1149, 195, 616, 192, 128,
	139, 1145, 1152, 227, 260, 264, 0, 0, 0, 154,
	0, 262, 239, 305, 0, 243, 261, 200, 294, 254,
	304, 316, 317, 159, 221, 310, 290, 313, 325, 278,
	132, 288, 302, 148, 272, 0, 0, 0, 134, 300,
	285, 215, 189, 190, 133, 0, 258, 160, 172, 156,
	230, 297, 298, 155, 327, 140, 312, 136, 141, 311,
	223, 293, 301, 216, 208, 135, 299, 214, 207, 194,
	166, 180, 251, 203, 252, 181, 219, 218, 220, 0,
	0, 0, 283, 308, 328, 145, 0, 0, 291, 321,
	324, 0, 255, 146, 173, 165, 250, 171, 197, 320,
	322, 323, 222, 142, 183, 279, 193, 201, 0, 0,
	238, 263, 149, 307, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 137, 198, 326, 256, 170,
	309, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 138, 144,
	150, 157, 164, 168, 175, 179, 182, 185, 186, 187,
	191, 206, 210, 211, 212, 213, 224, 225, 226, 229,
	232, 233, 234, 236, 237, 240, 244, 245, 246, 247,
	248, 249, 257, 259, 265, 266, 267, 268, 269, 270,
	271, 274, 275, 276, 277, 284, 287, 295, 296, 306,
	314, 318, 177, 303, 319, 33, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 196, 0, 0, 242, 0, 273, 153,
	204, 202, 292, 167, 163, 161, 152, 184, 209, 241,
	289, 235, 0, 199, 0, 0, 281, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 151, 131, 228, 282, 169, 66,
	0, 452, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 315, 0, 0, 0, 0,
	253, 0, 286, 178, 195, 143, 192, 128, 139, 0,
	176, 227, 260, 264, 0, 0, 0, 154, 0, 262,
	239, 305, 0, 243, 261, 200, 294, 254, 304, 316,
	317, 159, 221, 310, 290, 313, 325, 278, 132, 288,
	302, 148, 272, 0, 0, 0, 134, 300, 285, 215,
	189, 190, 133, 0, 258, 160, 172, 156, 230, 297,
	298, 155, 327, 140, 312, 136, 141, 311, 223, 293,
	301, 216, 208, 135, 299, 214, 207, 194, 166, 180,
	251, 203, 252, 181, 219, 218, 220, 0, 0, 0,
	283, 308, 328, 145, 0, 0, 291, 321, 324, 0,
	255, 146, 173, 165, 250, 171, 197, 320, 322, 323,
	222, 142, 183, 279, 193, 201, 0, 0, 238, 263,
	149, 307, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 137, 198, 326, 256, 170, 309, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 138, 144, 150, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 206,
	210, 211, 212, 213, 224, 225, 226, 229, 232, 233,
	234, 236, 237, 240, 244, 245, 246, 247, 248, 249,
	257, 259, 265, 266, 267, 268, 269, 270, 271, 274,
	275, 276, 277, 284, 287, 295, 296, 306, 314, 318,
	177, 303, 319, 231, 205, 0, 0, 1065, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 196, 0,
	0, 242, 0, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 0, 199, 0,
	0, 281, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 1067, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	315, 0, 0, 0, 0, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 0,
	0, 0, 154, 0, 262, 239, 305, 0, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 141, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 0, 0, 283, 308, 328, 145, 0,
	0, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 222, 142, 183, 279, 193,
	201, 0, 0, 238, 263, 149, 307, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 137, 198,
	326, 256, 170, 309, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 33, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 196, 0, 0, 242,
	0, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 0, 199, 0, 0, 281,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 151, 131, 228,
	282, 169, 66, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 315, 0,
	0, 0, 0, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 0, 0, 0,
	154, 0, 262, 239, 305, 0, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 0, 0, 283, 308, 328, 145, 0, 0, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 0,
	0, 238, 263, 149, 307, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 137, 198, 326, 256,
	170, 309, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 231, 205, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 196, 0, 0, 242, 0, 273, 153, 204, 202,
	292, 167, 163, 161, 152, 184, 209, 241, 289, 235,
	0, 199, 0, 0, 281, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 151, 131, 228, 282, 169, 0, 0, 0,
	114, 115, 116, 0, 0, 1083, 0, 0, 1084, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 315, 0, 0, 0, 0, 253, 0,
	286, 178, 195, 143, 192, 128, 139, 0, 176, 227,
	260, 264, 0, 0, 0, 154, 0, 262, 239, 305,
	0, 243, 261, 200, 294, 254, 304, 316, 317, 159,
	221, 310, 290, 313, 325, 278, 132, 288, 302, 148,
	272, 0, 0, 0, 134, 300, 285, 215, 189, 190,
	133, 0, 258, 160, 172, 156, 230, 297, 298, 155,
	327, 140, 312, 136, 141, 311, 223, 293, 301, 216,
	208, 135, 299, 214, 207, 194, 166, 180, 251, 203,
	252, 181, 219, 218, 220, 0, 0, 0, 283, 308,
	328, 145, 0, 0, 291, 321, 324, 0, 255, 146,
	173, 165, 250, 171, 197, 320, 322, 323, 222, 142,
	183, 279, 193, 201, 0, 0, 238, 263, 149, 307,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 137, 198, 326, 256, 170, 309, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 138, 144, 150, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 206, 210, 211,
	212, 213, 224, 225, 226, 229, 232, 233, 234, 236,
	237, 240, 244, 245, 246, 247, 248, 249, 257, 259,
	265, 266, 267, 268, 269, 270, 271, 274, 275, 276,
	277, 284, 287, 295, 296, 306, 314, 318, 177, 303,
	319, 231, 205, 0, 0, 1065, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 196, 0, 0, 242,
	0, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 0, 199, 0, 0, 281,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 151, 131, 228,
	282, 169, 0, 0, 0, 114, 115, 116, 0, 1067,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 315, 0,
	0, 0, 0, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 0, 0, 0,
	154, 0, 262, 239, 305, 0, 1063, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 0, 0, 283, 308, 328, 145, 0, 0, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 0,
	0, 238, 263, 149, 307, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 137, 198, 326, 256,
	170, 309, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 231, 205, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 844, 0, 0,
	0, 196, 0, 0, 242, 0, 273, 153, 204, 202,
	292, 167, 163, 161, 152, 184, 209, 241, 289, 235,
	0, 199, 0, 0, 281, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 151, 131, 228, 282, 169, 0, 0, 0,
	114, 115, 116, 0, 843, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 315, 0, 0, 0, 0, 253, 0,
	286, 178, 195, 143, 192, 128, 139, 0, 176, 227,
	260, 264, 0, 0, 0, 154, 0, 262, 239, 305,
	0, 243, 261, 200, 294, 254, 304, 316, 317, 159,
	221, 310, 290, 313, 325, 278, 132, 288, 302, 148,
	272, 0, 0, 0, 134, 300, 285, 215, 189, 190,
	133, 0, 258, 160, 172, 156, 230, 297, 298, 155,
	327, 140, 312, 136, 141, 311, 223, 293, 301, 216,
	208, 135, 299, 214, 207, 194, 166, 180, 251, 203,
	252, 181, 219, 218, 220, 0, 0, 0, 283, 308,
	328, 145, 0, 0, 291, 321, 324, 0, 255, 146,
	173, 165, 250, 171, 197, 320, 322, 323, 222, 142,
	183, 279, 193, 201, 0, 0, 238, 263, 149, 307,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 137, 198, 326, 256, 170, 309, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 138, 144, 150, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 206, 210, 211,
	212, 213, 224, 225, 226, 229, 232, 233, 234, 236,
	237, 240, 244, 245, 246, 247, 248, 249, 257, 259,
	265, 266, 267, 268, 269, 270, 271, 274, 275, 276,
	277, 284, 287, 295, 296, 306, 314, 318, 177, 303,
	319, 231, 205, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 196, 0, 0, 242,
	0, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 0, 199, 0, 0, 281,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 151, 131, 228,
	282, 169, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 315, 0,
	0, 0, 0, 253, 0, 286, 178, 195, 616, 192,
	128, 139, 614, 176, 227, 260, 264, 0, 0, 0,
	154, 0, 262, 239, 305, 0, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 0, 0, 283, 308, 328, 145, 0, 0, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 0,
	0, 238, 263, 149, 307, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 137, 198, 326, 256,
	170, 309, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 231, 205, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 196, 0, 0, 242, 0, 273, 153, 204, 202,
	292, 167, 163, 161, 152, 184, 209, 241, 289, 235,
	0, 199, 0, 0, 281, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 151, 131, 228, 282, 169, 0, 0, 452,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 315, 0, 0, 0, 0, 253, 0,
	286, 178, 195, 143, 192, 128, 139, 0, 176, 227,
	260, 264, 0, 0, 0, 154, 0, 262, 239, 305,
	0, 243, 261, 200, 294, 254, 304, 316, 317, 159,
	221, 310, 290, 313, 325, 278, 132, 288, 302, 148,
	272, 0, 0, 0, 134, 300, 285, 215, 189, 190,
	133, 0, 258, 160, 172, 156, 230, 297, 298, 155,
	327, 140, 312, 136, 141, 311, 223, 293, 301, 216,
	208, 135, 299, 214, 207, 194, 166, 180, 251, 203,
	252, 181, 219, 218, 220, 0, 0, 0, 283, 308,
	328, 145, 0, 0, 291, 321, 324, 0, 255, 146,
	173, 165, 250, 171, 197, 320, 322, 323, 222, 142,
	183, 279, 193, 201, 0, 0, 238, 263, 149, 307,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 137, 198, 326, 256, 170, 309, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 138, 144, 150, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 206, 210, 211,
	212, 213, 224, 225, 226, 229, 232, 233, 234, 236,
	237, 240, 244, 245, 246, 247, 248, 249, 257, 259,
	265, 266, 267, 268, 269, 270, 271, 274, 275, 276,
	277, 284, 287, 295, 296, 306, 314, 318, 177, 303,
	319, 231, 205, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 196, 0, 0, 242,
	0, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 0, 199, 0, 0, 281,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 151, 131, 228,
	282, 169, 66, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 315, 0,
	0, 0, 0, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 0, 0, 0,
	154, 0, 262, 239, 305, 0, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 0, 0, 283, 308, 328, 145, 0, 0, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 0,
	0, 238, 263, 149, 307, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 137, 198, 326, 256,
	170, 309, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 231, 205, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 0, 0,
	0, 196, 0, 0, 242, 0, 273, 153, 204, 202,
	292, 167, 163, 161, 152, 184, 209, 241, 289, 235,
	0, 199, 0, 0, 281, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 151, 131, 228, 282, 169, 0, 0, 0,
	114, 115, 116, 0, 1067, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 315, 0, 0, 0, 0, 253, 0,
	286, 178, 195, 143, 192, 128, 139, 0, 176, 227,
	260, 264, 0, 0, 0, 154, 0, 262, 239, 305,
	0, 243, 261, 200, 294, 254, 304, 316, 317, 159,
	221, 310, 290, 313, 325, 278, 132, 288, 302, 148,
	272, 0, 0, 0, 134, 300, 285, 215, 189, 190,
	133, 0, 258, 160, 172, 156, 230, 297, 298, 155,
	327, 140, 312, 136, 141, 311, 223, 293, 301, 216,
	208, 135, 299, 214, 207, 194, 166, 180, 251, 203,
	252, 181, 219, 218, 220, 0, 0, 0, 283, 308,
	328, 145, 0, 0, 291, 321, 324, 0, 255, 146,
	173, 165, 250, 171, 197, 320, 322, 323, 222, 142,
	183, 279, 193, 201, 0, 0, 238, 263, 149, 307,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 137, 198, 326, 256, 170, 309, 0, 0, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 138, 144, 150, 157, 164, 168,
	175, 179, 182, 185, 186, 187, 191, 206, 210, 211,
	212, 213, 224, 225, 226, 229, 232, 233, 234, 236,
	237, 240, 244, 245, 246, 247, 248, 249, 257, 259,
	265, 266, 267, 268, 269, 270, 271, 274, 275, 276,
	277, 284, 287, 295, 296, 306, 314, 318, 177, 303,
	319, 231, 205, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 196, 0, 0, 242,
	0, 273, 153, 204, 202, 292, 167, 163, 161, 152,
	184, 209, 241, 289, 235, 0, 199, 0, 0, 281,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 151, 131, 228,
	282, 169, 0, 0, 0, 114, 115, 116, 0, 813,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 315, 0,
	0, 0, 0, 253, 0, 286, 178, 195, 143, 192,
	128, 139, 0, 176, 227, 260, 264, 0, 0, 0,
	154, 0, 262, 239, 305, 0, 243, 261, 200, 294,
	254, 304, 316, 317, 159, 221, 310, 290, 313, 325,
	278, 132, 288, 302, 148, 272, 0, 0, 0, 134,
	300, 285, 215, 189, 190, 133, 0, 258, 160, 172,
	156, 230, 297, 298, 155, 327, 140, 312, 136, 141,
	311, 223, 293, 301, 216, 208, 135, 299, 214, 207,
	194, 166, 180, 251, 203, 252, 181, 219, 218, 220,
	0, 0, 0, 283, 308, 328, 145, 0, 0, 291,
	321, 324, 0, 255, 146, 173, 165, 250, 171, 197,
	320, 322, 323, 222, 142, 183, 279, 193, 201, 0,
	0, 238, 263, 149, 307, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 137, 198, 326, 256,
	170, 309, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 138,
	144, 150, 157, 164, 168, 175, 179, 182, 185, 186,
	187, 191, 206, 210, 211, 212, 213, 224, 225, 226,
	229, 232, 233, 234, 236, 237, 240, 244, 245, 246,
	247, 248, 249, 257, 259, 265, 266, 267, 268, 269,
	270, 271, 274, 275, 276, 277, 284, 287, 295, 296,
	306, 314, 318, 177, 303, 319, 826, 205, 0, 0,
	0, 0, 0, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 196, 0,
	0, 242, 0, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 0, 199, 0,
	0, 281, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	315, 0, 0, 0, 0, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 0,
	0, 0, 154, 0, 262, 239, 305, 0, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 141, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 0, 0, 283, 308, 328, 145, 0,
	0, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 222, 142, 183, 279, 193,
	201, 0, 0, 238, 263, 149, 307, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 137, 198,
	326, 256, 170, 309, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 231, 205,
	0, 0, 0, 0, 0, 0, 817, 162, 0, 0,
	0, 0, 0, 196, 0, 0, 242, 0, 273, 153,
	204, 202, 292, 167, 163, 161, 152, 184, 209, 241,
	289, 235, 0, 199, 0, 0, 281, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 151, 131, 228, 282, 169, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 315, 0, 0, 0, 0,
	253, 0, 286, 178, 195, 143, 192, 128, 139, 0,
	176, 227, 260, 264, 0, 0, 0, 154, 0, 262,
	239, 305, 0, 243, 261, 200, 294, 254, 304, 316,
	317, 159, 221, 310, 290, 313, 325, 278, 132, 288,
	302, 148, 272, 0, 0, 0, 134, 300, 285, 215,
	189, 190, 133, 0, 258, 160, 172, 156, 230, 297,
	298, 155, 327, 140, 312, 136, 141, 311, 223, 293,
	301, 216, 208, 135, 299, 214, 207, 194, 166, 180,
	251, 203, 252, 181, 219, 218, 220, 0, 0, 0,
	283, 308, 328, 145, 0, 0, 291, 321, 324, 0,
	255, 146, 173, 165, 250, 171, 197, 320, 322, 323,
	222, 142, 183, 279, 193, 201, 0, 0, 238, 263,
	149, 307, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 137, 198, 326, 256, 170, 309, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 138, 144, 150, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 206,
	210, 211, 212, 213, 224, 225, 226, 229, 232, 233,
	234, 236, 237, 240, 244, 245, 246, 247, 248, 249,
	257, 259, 265, 266, 267, 268, 269, 270, 271, 274,
	275, 276, 277, 284, 287, 295, 296, 306, 314, 318,
	177, 303, 319, 231, 205, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 196, 0,
	0, 242, 0, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 0, 199, 0,
	0, 281, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 691, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	315, 0, 0, 0, 0, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 0,
	0, 0, 154, 0, 262, 239, 305, 0, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 141, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 0, 0, 283, 308, 328, 145, 0,
	0, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 222, 142, 183, 279, 193,
	201, 0, 0, 238, 263, 149, 307, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 137, 198,
	326, 256, 170, 309, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 231, 205,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 196, 0, 0, 242, 0, 273, 153,
	204, 202, 292, 167, 163, 161, 152, 184, 209, 241,
	289, 235, 0, 199, 0, 0, 281, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 151, 131, 228, 282, 169, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	0, 174, 0, 0, 0, 315, 0, 0, 0, 0,
	253, 0, 286, 178, 195, 143, 192, 128, 139, 0,
	176, 227, 260, 264, 0, 0, 0, 154, 0, 262,
	239, 305, 0, 243, 261, 200, 294, 254, 304, 316,
	317, 159, 221, 310, 290, 313, 325, 278, 132, 288,
	302, 148, 272, 0, 0, 0, 134, 300, 285, 215,
	189, 190, 133, 0, 258, 160, 172, 156, 230, 297,
	298, 155, 327, 140, 312, 136, 141, 311, 223, 293,
	301, 216, 208, 135, 299, 214, 207, 194, 166, 180,
	251, 203, 252, 181, 219, 218, 220, 0, 0, 0,
	283, 308, 328, 145, 0, 0, 291, 321, 324, 0,
	255, 146, 173, 165, 250, 171, 197, 320, 322, 323,
	222, 142, 183, 279, 193, 201, 0, 0, 238, 263,
	149, 307, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 137, 198, 326, 256, 170, 309, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 138, 144, 150, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 206,
	210, 211, 212, 213, 224, 225, 226, 229, 232, 233,
	234, 236, 237, 240, 244, 245, 246, 247, 248, 249,
	257, 259, 265, 266, 267, 268, 269, 270, 271, 274,
	275, 276, 277, 284, 287, 295, 296, 306, 314, 318,
	367, 303, 319, 231, 205, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 0, 196, 0,
	0, 242, 0, 273, 153, 204, 202, 292, 167, 163,
	161, 152, 184, 209, 241, 289, 235, 0, 199, 0,
	0, 281, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 151,
	131, 228, 282, 169, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 122, 0,
	315, 0, 0, 0, 0, 253, 0, 286, 178, 195,
	143, 192, 128, 139, 0, 176, 227, 260, 264, 0,
	0, 0, 154, 0, 262, 239, 305, 0, 243, 261,
	200, 294, 254, 304, 316, 317, 159, 221, 310, 290,
	313, 325, 278, 132, 288, 302, 148, 272, 0, 0,
	0, 134, 300, 285, 215, 189, 190, 133, 0, 258,
	160, 172, 156, 230, 297, 298, 155, 327, 140, 312,
	136, 141, 311, 223, 293, 301, 216, 208, 135, 299,
	214, 207, 194, 166, 180, 251, 203, 252, 181, 219,
	218, 220, 0, 0, 0, 283, 308, 328, 145, 0,
	0, 291, 321, 324, 0, 255, 146, 173, 165, 250,
	171, 197, 320, 322, 323, 222, 142, 183, 279, 193,
	201, 0, 0, 238, 263, 149, 307, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 137, 198,
	326, 256, 170, 309, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 138, 144, 150, 157, 164, 168, 175, 179, 182,
	185, 186, 187, 191, 206, 210, 211, 212, 213, 224,
	225, 226, 229, 232, 233, 234, 236, 237, 240, 244,
	245, 246, 247, 248, 249, 257, 259, 265, 266, 267,
	268, 269, 270, 271, 274, 275, 276, 277, 284, 287,
	295, 296, 306, 314, 318, 177, 303, 319, 231, 205,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 0, 196, 0, 0, 242, 0, 273, 153,
	204, 202, 292, 167, 163, 161, 152, 184, 209, 241,
	289, 235, 0, 199, 0, 0, 281, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 151, 131, 228, 282, 169, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 315, 0, 0, 0, 0,
	253, 0, 286, 178, 195, 143, 192, 128, 139, 0,
	176, 227, 260, 264, 0, 0, 0, 154, 0, 262,
	239, 305, 0, 243, 261, 200, 294, 254, 304, 316,
	317, 159, 221, 310, 290, 313, 325, 278, 132, 288,
	302, 148, 272, 0, 0, 0, 134, 300, 285, 215,
	189, 190, 133, 0, 258, 160, 172, 156, 230, 297,
	298, 155, 327, 140, 312, 136, 141, 311, 223, 293,
	301, 216, 208, 135, 299, 214, 207, 194, 166, 180,
	251, 203, 252, 181, 219, 218, 220, 0, 0, 0,
	283, 308, 328, 145, 0, 0, 291, 321, 324, 0,
	255, 146, 173, 165, 250, 171, 197, 320, 322, 323,
	222, 142, 183, 279, 193, 201, 0, 0, 238, 263,
	149, 307, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 137, 198, 326, 256, 170, 309, 0,
	0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 138, 144, 150, 157,
	164, 168, 175, 179, 182, 185, 186, 187, 191, 206,
	210, 211, 212, 213, 224, 225, 226, 229, 232, 233,
	234, 236, 237, 240, 244, 245, 246, 247, 248, 249,
	257, 259, 265, 266, 267, 268, 269, 270, 271, 274,
	275, 276, 277, 284, 287, 295, 296, 306, 314, 318,
	177, 303, 319, 0, 205,
}

var yyPact = [...]int{
	172, -1000, -289, 1236, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1173, 902, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	338, 865, 72, 1100, 21, 644, 181, 13, 19034, 178,
	411, 19409, -1000, 33, -1000, 25, 19409, 26, 18659, -1000,
	-1000, -1000, 10751, 1056, -49, -58, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 861, 1143, 1148, 1169, 715, 1203,
	-1000, 9238, 9238, 149, 149, 149, 7738, -1000, -1000, 15652,
	19409, 19409, 19409, -133, 141, 170, 141, -1000, -1000, -1000,
	-1000, -1000, -1000, 1100, -1000, -1000, 83, -1000, -1000, 19409,
	19409, 307, 1100, 53, -1000, -1000, -1000, 19409, 135, 644,
	135, 135, 19409, -1000, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19409,
	644, 1086, 369, 102, 266, 266, 266, 266, -1000, 295,
	-1000, 5386, 54, 48, -51, 1184, 44, 24, -1000, 369,
	5386, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 156,
	-1000, -1000, -1000, -1000, 19409, 18284, 153, 378, -1000, -1000,
	-1000, -1000, 747, 534, -1000, 10751, 1967, 806, 806, -1000,
	-1000, 211, -1000, -1000, 11876, 11876, 11876, 11876, 11876, 11876,
	11876, 11876, 11876, 11876, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, 219,
	-1000, 10376, 806, 806, 806, 806, 806, 806, 806, 806,
	10751, 806, 806, 806, 806, 806, 806, 806, 806, 806,
	806, 806, 806, 806, 806, 806, 806, -1000, -1000, -1000,
	19409, -1000, 1173, -1000, 902, -1000, -1000, -1000, 1089, 10751,
	10751, 1173, -1000, 1010, 9238, -1000, -1000, 1186, -1000, -1000,
	-1000, -1000, 445, 1215, -1000, 12626, 218, 1197, 17909, -1000,
	16402, 17534, 804, 7346, -104, -1000, -1000, -1000, 370, 15277,
	-1000, -1000, -1000, 1085, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 742,
	19409, -1000, -1000, 189, 644, -1000, 843, -1000, 740, -1000,
	824, 5386, 155, 19409, 387, 644, 644, -1000, -1000, 1079,
	357, 154, 5386, 69, 103, 87, 19409, 1100, 1055, 790,
	152, 19409, 1138, 932, 19409, 644, -1000, 6562, -1000, 5386,
	369, -1000, 610, 10751, 5386, 5386, 5386, 19409, 5386, 5386,
	-1000, 609, -1000, -1000, -1000, 383, -1000, -1000, -1000, -1000,
	-1000, -1000, 5386, 5386, 366, 383, 366, -1000, -1000, -1000,
	-1000, 10751, 266, -1000, 931, -1000, -1000, 23, -1000, -1000,
	-1000, -1000, -1000, 1236, -1000, -1000, -1000, -131, 10751, 10751,
	10751, 10751, 565, 268, 11876, 487, 439, 11876, 11876, 11876,
	11876, 11876, 11876, 11876, 11876, 11876, 11876, 11876, 11876, 11876,
	11876, 11876, 603, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 644, -1000, 1229, 866, 866, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 12251, 8113, 6562, 715, 733,
	1173, 9238, 9238, 10751, 10751, 9988, 9613, 9238, 1092, 385,
	534, 19409, -1000, -1000, 11501, -1000, -1000, -1000, -1000, -1000,
	537, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19409, 19409,
	9238, 9238, 9238, 9238, 9238, -1000, 789, -1000, -172, 14902,
	1148, 715, 1186, 1126, 1224, 248, 505, 788, -1000, 591,
	1148, 14527, 844, -1000, 1186, -1000, -1000, -1000, 19409, -1000,
	-1000, 17152, -1000, -1000, 6170, 19409, 99, 19409, -1000, 773,
	952, -1000, -1000, -1000, 1140, 14152, 19409, 837, 828, -1000,
	-1000, 216, 6954, -104, -1000, 6954, 772, -1000, -81, -86,
	8488, 214, -1000, -1000, -1000, -1000, 4602, 13001, 696, 450,
	-38, -1000, -1000, -1000, 824, -1000, 824, 824, 824, 824,
	-6, -6, -6, -6, -1000, -1000, -1000, -1000, -1000, 857,
	856, -1000, 824, 824, 824, 824, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 849, 849, 849, 825, 825, 123, 10751,
	64, 19409, 1133, 530, -1000, 19409, -1000, 1136, 885, -1000,
	357, 654, -1000, -1000, 1633, 1633, 304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, -1000,
	19409, 19409, 19409, 19409, 19409, 192, 61, 19409, 19409, 785,
	-1000, 19409, 5386, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19409, -1000,
	-1000, -1000, -1000, 369, 19409, 19409, 19409, 369, 534, -1000,
	19409, 19409, -1000, -1000, -1000, -1000, -1000, 534, 268, 384,
	271, -1000, -1000, 543, -1000, -1000, 2200, -1000, -1000, -1000,
	-1000, 487, 11876, 11876, 11876, 1088, 2200, 1926, 1882, 465,
	228, 440, 440, 247, 247, 247, 247, 247, 390, 390,
	-1000, -1000, -1000, 537, -1000, -1000, -1000, 537, 9238, 9238,
	778, 806, 215, -1000, 861, -1000, -1000, 1148, 718, 718,
	482, 512, 334, 1192, 718, 332, 1189, 718, 718, 9238,
	-1000, -1000, 402, -1000, 10751, 537, -1000, 202, -1000, 923,
	777, 776, 718, 537, 537, 718, 718, 19409, -1000, -286,
	-1000, -117, 226, 806, -1000, 16777, -1000, -1000, 1089, -1000,
	-1000, 1051, -1000, 1007, 10751, 10751, 10751, -1000, -1000, -1000,
	1089, 1165, -1000, 1029, 1025, 1183, 9238, 16402, 1186, -1000,
	-1000, -1000, 198, 1183, 811, 806, -1000, 19409, 16402, 16402,
	16402, 16402, 16402, -1000, 998, 951, -1000, 977, 975, 976,
	19409, -1000, 729, 715, 14152, 99, 661, 16402, 19409, -1000,
	-1000, 16402, 19409, 5778, -1000, 772, -104, -89, -1000, -1000,
	-1000, -1000, 534, -1000, 632, 764, 4210, -1000, -1000, -1000,
	-1000, 129, -1000, -1000, 847, 644, -1000, 1115, 299, 299,
	423, 644, 1114, -1000, -1000, -1000, -1000, 1099, -1000, 409,
	-44, -1000, -1000, -6, -6, -1000, -1000, 214, 1077, 214,
	214, 214, 602, 602, -1000, -1000, -1000, -1000, -1000, 521,
	-1000, -1000, -1000, 497, -1000, -1000, 843, 643, 892, 64,
	-1000, 644, 357, 595, 1061, -1000, -1000, 648, 5386, -1000,
	928, 19409, 627, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19409, -1000, -1000, -1000, -1000, -1000, 19409, 877,
	-1000, -1000, -1000, -1000, 28, 65, 58, 151, -1000, 5386,
	-1000, 366, -1000, -1000, -1000, 366, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1088, 2200, 1865, -1000, 11876, 11876, -1000,
	-1000, 718, 718, 9238, 6562, 1173, 1089, -1000, -1000, 323,
	603, 323, 11876, 11876, -1000, 11876, 11876, -1000, -147, 748,
	284, -1000, 10751, 502, -1000, 6562, -1000, 11876, 11876, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 168, 162,
	160, 19409, -1000, -1000, 608, 577, 1005, 534, 534, -1000,
	-1000, 19409, -1000, -1000, -1000, -1000, 1168, 10751, -1000, 762,
	-1000, 4994, 1148, 921, 19409, 806, 1236, 13389, 19409, 826,
	-1000, 364, 952, 875, 915, 1008, -1000, -1000, -1000, -1000,
	948, -1000, 944, -1000, -1000, -1000, -1000, -1000, 715, 1183,
	16402, 727, -1000, 727, -1000, 194, -1000, -1000, -1000, -101,
	-92, -1000, -1000, -1000, 4602, -1000, 4602, -1000, 19409, 121,
	-1000, 644, 644, 644, -1000, -1000, -1000, 840, 913, 11876,
	-1000, -1000, -1000, 214, 214, -1000, 414, -1000, -1000, -1000,
	714, -1000, 712, 760, 710, 19, -1000, 841, 1074, 357,
	357, -1000, -1000, 493, -1000, 567, -1000, -1000, 19409, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1123, -154, 644, 19409,
	19409, 19409, -1000, 19409, -1000, 369, 369, -1000, 11876, 2200,
	2200, -1000, -1000, 537, -1000, 1148, -1000, 537, 824, 824,
	-1000, 824, 825, -1000, 824, 11, 824, 10, 537, 537,
	2171, 2151, 2115, 1724, 806, -142, -1000, 534, 10751, -1000,
	1360, 751, 806, 806, 806, 705, -1000, 566, -6, -1000,
	-1000, -1000, 1175, 1167, 534, -1000, -1000, -1000, 1119, 677,
	744, -1000, -1000, 8863, 707, 1022, 193, 705, 1173, 19409,
	10751, -1000, -1000, 10751, 823, -1000, 10751, -1000, -1000, -1000,
	1173, 1173, 727, -1000, -1000, 240, -1000, -1000, -1000, 4210,
	-1000, 694, -1000, 1114, -1000, -1000, -1000, 19409, -33, 1223,
	2200, -1000, -1000, -1000, -1000, -6, 562, -6, 476, -1000,
	468, -1000, -1000, -214, -1000, -1000, 820, 934, -1000, -1000,
	-1000, 806, -1000, 6562, -1000, -1000, 812, 878, -1000, -1000,
	-1000, -1000, 2200, -1000, 1089, -1000, -1000, 161, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11876, 11876, 11876, 11876,
	11876, 1148, 557, 534, 11876, 11876, 16027, 19409, 19409, 13764,
	19409, -6, -66, -1000, 10751, 10751, 1113, -1000, 806, -1000,
	766, 19409, 806, 19409, -1000, 1148, -1000, 534, 534, 19409,
	534, 1148, -1000, 64, 688, -1000, 283, -1000, -156, 214,
	-1000, 214, 642, 539, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 98, 750, -1000, 305, 19409, 19409, -1000, -1000,
	-1000, 923, 923, 923, 923, 143, 537, -1000, 923, 923,
	686, -1000, 686, 686, 226, -1000, -277, -1000, 1052, 1050,
	534, 747, 1222, -1000, 806, 1236, 173, 744, -1000, -1000,
	681, -1000, -1000, 113, 19409, 420, 1112, -1000, 1102, -1000,
	-1000, -1000, -1000, -1000, 672, -1000, 19409, 6562, 4602, 670,
	-1000, -1000, -1000, -1000, -1000, 537, 86, -159, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -66, 207, -1000, 1033, 1031,
	1166, 19409, 744, 19409, -1000, 19409, -1000, -1000, 556, -1000,
	-1000, -1000, 98, 1015, -1000, -1000, 877, -1000, 1004, -152,
	-162, 1037, 1039, 1039, 1050, 1162, 1048, 1045, -1000, 544,
	701, -1000, 808, -1000, -1000, 92, -154, -1000, 1003, -1000,
	1035, 478, -1000, -1000, -1000, -1000, 542, -1000, 1161, 1150,
	-1000, 19409, 73, -1000, -157, -1000, 428, -1000, -1000, -1000,
	538, 479, 666, 806, -160, -1000, -1000, -1000, -1000, 911,
	11126, -179, 891, -1000, 1220, 923, 537, -1000, -1000, 1188,
	273, 273, -1000, -1000, -1000, -1000, -1000, 120, 532, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1506, 1505, 25, 79, 80, 1504, 1503, 1501, 1500,
	117, 116, 115, 1498, 1497, 1495, 1494, 1481, 1479, 1475,
	1474, 1473, 1472, 1471, 1468, 1466, 1464, 98, 97, 467,
	1457, 1456, 1455, 1454, 1452, 1450, 1449, 1447, 1446, 1444,
	1443, 1442, 1439, 1438, 103, 1437, 1431, 1430, 1429, 1428,
	1423, 1418, 1417, 1416, 95, 60, 217, 55, 68, 1415,
	67, 1610, 1413, 39, 73, 70, 1412, 40, 1410, 1404,
	89, 1398, 1397, 66, 1396, 1395, 2016, 1394, 64, 74,
	15, 32, 1393, 1392, 1391, 1389, 99, 314, 1388, 1385,
	17, 1383, 1381, 112, 1380, 75, 31, 13, 20, 19,
	1377, 77, 1375, 9, 1370, 69, 1368, 1366, 1364, 1363,
	30, 1361, 71, 81, 29, 1360, 6, 11, 1359, 1358,
	1357, 1356, 1355, 1354, 4, 1353, 1350, 1349, 1348, 1347,
	44, 1345, 7, 65, 42, 22, 10, 1344, 1343, 21,
	78, 61, 85, 1342, 1341, 1338, 721, 1337, 36, 1333,
	119, 1332, 43, 102, 391, 554, 1331, 1330, 1327, 1326,
	1325, 50, 803, 1787, 113, 88, 1324, 1323, 2590, 53,
	72, 18, 1321, 1320, 1316, 63, 100, 47, 718, 1315,
	45, 1313, 1306, 1305, 1304, 1303, 1301, 1300, 121, 1298,
	1297, 1295, 126, 23, 96, 24, 1294, 1293, 1292, 1289,
	54, 82, 1288, 1286, 58, 56, 1284, 101, 28, 33,
	1281, 1280, 1279, 1276, 38, 12, 1273, 84, 37, 48,
	27, 34, 1268, 16, 1261, 35, 41, 1260, 8, 1259,
	14, 1258, 2, 0, 1256, 5, 1255, 83, 1091, 1,
	1254, 3, 1253, 1252, 76, 1251, 1248, 1243, 1529, 784,
	86, 1242, 104,
}

var yyR1 = [...]int{
	0, 246, 247, 247, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 233, 233, 233, 236, 236, 21, 41,
	3, 3, 3, 3, 2, 2, 8, 9, 4, 5,
	5, 10, 10, 48, 48, 11, 12, 12, 12, 12,
	250, 250, 70, 70, 71, 71, 133, 133, 13, 14,
	14, 142, 142, 141, 141, 141, 143, 143, 143, 143,
	178, 178, 15, 15, 15, 15, 15, 15, 235, 235,
	234, 232, 232, 231, 231, 230, 23, 24, 25, 26,
	238, 238, 210, 30, 30, 29, 29, 29, 29, 31,
	31, 28, 28, 27, 27, 212, 212, 211, 211, 211,
	211, 211, 211, 201, 181, 181, 181, 181, 184, 184,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 183,
	183, 183, 183, 183, 185, 185, 185, 185, 185, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 187, 187, 187, 187, 187, 187,
	187, 187, 200, 200, 188, 188, 194, 194, 195, 195,
	195, 197, 197, 198, 198, 156, 156, 156, 190, 190,
	191, 191, 196, 196, 192, 192, 192, 193, 193, 193,
	199, 199, 199, 199, 199, 189, 189, 202, 223, 223,
	222, 222, 219, 219, 219, 219, 209, 209, 216, 216,
	216, 216, 216, 216, 206, 206, 206, 207, 207, 205,
	205, 208, 208, 218, 218, 217, 203, 203, 204, 204,
	225, 225, 225, 225, 225, 226, 240, 241, 239, 239,
	239, 239, 239, 157, 157, 157, 213, 213, 213, 214,
	214, 214, 215, 215, 215, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 229, 227, 227, 228,
	228, 17, 22, 22, 18, 18, 18, 18, 19, 19,
	32, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 149, 149, 242, 242, 151, 151, 147, 147,
	150, 150, 148, 148, 148, 152, 152, 152, 153, 153,
	179, 179, 179, 34, 34, 36, 36, 37, 38, 38,
	173, 173, 174, 174, 39, 40, 47, 47, 47, 47,
	47, 47, 49, 49, 49, 7, 7, 7, 7, 46,
	46, 46, 6, 6, 35, 35, 42, 243, 243, 244,
	245, 245, 245, 245, 43, 20, 251, 44, 45, 45,
	54, 54, 54, 50, 50, 50, 53, 53, 53, 57,
	57, 59, 59, 59, 59, 59, 60, 60, 60, 60,
	60, 60, 56, 56, 58, 58, 58, 58, 166, 166,
	166, 165, 165, 62, 62, 63, 63, 64, 64, 65,
	65, 65, 102, 79, 79, 132, 132, 134, 134, 66,
	66, 66, 66, 67, 67, 68, 68, 69, 69, 172,
	172, 171, 171, 171, 170, 170, 72, 72, 72, 74,
	73, 73, 73, 73, 75, 75, 77, 77, 76, 76,
	78, 80, 80, 80, 80, 80, 81, 81, 61, 61,
	61, 61, 61, 61, 61, 61, 145, 145, 83, 83,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	94, 94, 94, 94, 94, 94, 84, 84, 84, 84,
	84, 84, 84, 55, 55, 95, 95, 95, 101, 96,
	96, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 91, 91, 91, 91, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 252, 252,
	93, 92, 92, 92, 92, 92, 92, 92, 52, 52,
	52, 52, 52, 177, 177, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 106, 106,
	51, 51, 104, 104, 105, 107, 107, 103, 103, 103,
	86, 86, 86, 86, 86, 86, 86, 86, 88, 88,
	88, 108, 108, 109, 109, 110, 110, 111, 111, 112,
	113, 113, 113, 114, 114, 114, 114, 224, 224, 224,
	224, 224, 220, 220, 220, 220, 221, 221, 221, 130,
	130, 130, 115, 115, 115, 115, 120, 120, 120, 116,
	116, 118, 118, 118, 119, 119, 119, 117, 123, 123,
	125, 125, 124, 124, 122, 122, 127, 127, 126, 126,
	121, 121, 85, 85, 85, 85, 85, 131, 131, 131,
	131, 135, 135, 97, 97, 99, 99, 98, 100, 136,
	136, 139, 137, 137, 140, 140, 140, 140, 140, 138,
	138, 138, 167, 167, 167, 144, 144, 154, 154, 155,
	155, 146, 146, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 159, 159, 159, 160, 160, 128, 128,
	128, 128, 129, 129, 163, 163, 164, 164, 168, 168,
	169, 169, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 248, 249,
	175, 176, 176, 176,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 2, 3,
	5, 6, 6, 7, 4, 6, 5, 7, 8, 1,
	3, 7, 8, 1, 1, 9, 9, 8, 7, 7,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 6, 4, 6, 2, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 7, 4, 2,
	1, 1, 4, 0, 1, 1, 1, 2, 2, 0,
	1, 5, 5, 4, 4, 2, 4, 1, 1, 3,
	4, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 0, 1,
	1, 2, 2, 3, 2, 3, 0, 1, 2, 3,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 3, 3, 1, 3, 1,
	10, 11, 11, 12, 1, 5, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 5, 6, 6, 6, 6,
	4, 4, 3, 6, 7, 5, 5, 5, 12, 7,
	5, 9, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 5, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 2, 7, 2, 3, 4, 5,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	3, 3, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 5,
	0, 1, 0, 1, 2, 3, 0, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 5, 4, 5, 5, 0, 2, 1, 3,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 5, 6, 4,
	4, 6, 6, 6, 8, 8, 8, 8, 9, 8,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 2,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	2, 4, 0, 9, 3, 5, 0, 3, 3, 0,
	1, 0, 2, 2, 0, 2, 2, 2, 0, 3,
	0, 3, 0, 3, 0, 4, 0, 3, 0, 4,
	0, 1, 2, 1, 5, 4, 4, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -246, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -42,
	-43, -4, -248, 6, 7, 8, -48, 10, 11, 31,
	-23, -24, 146, -25, 147, -26, 149, 148, 182, 150,
	175, 70, 199, 200, 202, 203, 204, 205, -49, 180,
	181, 152, 35, 41, 32, 33, 80, 9, 293, 177,
	176, 26, -247, 397, -54, 5, -110, 16, -3, -44,
	-251, -44, -44, -44, -44, -44, -44, -210, -212, 80,
	119, 80, 156, 100, 154, -128, -238, 160, 163, 164,
	285, 153, -30, -29, -28, -27, -31, 30, -238, 154,
	156, 259, -236, -233, 83, 84, 85, 154, 154, 155,
	156, -238, 154, -76, -168, -233, -162, 303, 168, 335,
	336, 76, 199, 213, 207, 234, 226, 304, 337, 169,
	224, 227, 272, 166, 338, 254, 262, 94, 202, 281,
	339, 75, 47, 40, 178, 222, 218, 340, 312, 192,
	216, 46, 28, 45, 341, 264, 239, 44, 342, 79,
	308, 266, 217, 263, 152, 343, 171, 391, 164, 344,
	240, 244, 345, 273, 48, 346, 347, 348, 74, 211,
	212, 349, 167, 275, 238, 165, 34, 267, 305, 54,
	186, 276, 42, 242, 41, 395, 350, 237, 233, 49,
	351, 352, 353, 354, 236, 210, 232, 58, 246, 245,
	247, 193, 271, 229, 355, 356, 357, 172, 77, 358,
	219, 19, 359, 360, 361, 52, 362, 363, 279, 181,
	364, 50, 37, 184, 365, 366, 367, 368, 369, 370,
	265, 241, 243, 161, 188, 261, 307, 371, 215, 372,
	173, 185, 180, 280, 174, 373, 374, 375, 376, 377,
	378, 379, 203, 39, 380, 381, 382, 383, 198, 274,
	283, 57, 78, 251, 384, 209, 163, 385, 200, 51,
	195, 257, 43, 230, 187, 386, 387, 220, 221, 235,
	208, 231, 201, 392, 189, 182, 388, 282, 252, 309,
	194, 228, 225, 196, 389, 156, 190, 191, 390, 393,
	268, 258, 269, 270, 259, 197, 306, 223, 253, 154,
	137, 227, 272, 146, 255, 256, 267, 268, 264, -151,
	265, 188, -179, 154, -147, 254, 258, 259, 197, -242,
	-233, 266, 274, 273, 260, 270, 269, -168, 201, -173,
	206, -163, -233, -162, 204, -76, -47, 391, 150, -175,
	-175, -175, -96, -61, -82, 103, -87, 30, 24, -86,
	-83, -103, -100, -101, 137, 138, 140, 139, 141, 126,
	127, 134, 104, 142, -91, -89, -90, -92, 87, 86,
	95, 88, 89, 90, 91, 96, 97, 98, -163, -168,
	-98, -248, 64, 65, 294, 295, 296, 297, 302, 298,
	106, 53, 284, 292, 291, 290, 288, 289, 286, 287,
	300, 301, 159, 285, 153, 132, 293, -233, -162, 40,
	257, 257, -5, -4, -248, 6, 21, 22, -114, 18,
	17, -249, 82, -50, -59, 59, 60, -60, 22, 36,
	63, 61, -45, -58, 128, -61, -168, -58, -146, 158,
	-146, -146, -137, -178, 201, -140, 274, 273, -164, -138,
	-163, -161, 272, 227, 271, 151, 310, 102, 23, 25,
	249, 105, 137, 17, 106, 136, 294, 146, 68, 311,
	286, 287, 284, 296, 297, 285, 255, 30, 11, 313,
	26, 176, 22, 36, 130, 148, 109, 110, 179, 24,
	177, 98, 316, 20, 71, 12, 14, 317, 318, 15,
	159, 158, 121, 155, 66, 9, 142, 27, 118, 62,
	319, 29, 320, 321, 322, 323, 64, 119, 18, 288,
	289, 32, 396, 324, 302, 183, 132, 69, 55, 103,
	325, 326, 96, 327, 99, 72, 100, 16, 67, 38,
	328, 329, 330, 277, 331, 120, 149, 293, 65, 332,
	153, 256, 6, 299, 31, 175, 63, 333, 154, 108,
	300, 301, 157, 97, 5, 160, 33, 10, 70, 73,
	290, 291, 292, 53, 107, 13, 334, 278, 101, -211,
	119, -201, -204, -163, 170, -226, 166, -76, -218, -217,
	-163, -76, 293, -155, 159, 155, -155, -27, -28, 227,
	136, -76, -76, 146, 148, 151, 72, -29, 194, -22,
	-76, -154, 159, -233, -154, -154, -76, 143, -76, -233,
	31, -152, 119, 13, 285, -233, 188, 154, 189, 156,
	-153, 119, -153, -153, -153, -206, 155, 34, 167, -176,
	-248, -164, 195, 196, 195, -150, -149, 262, 263, 257,
	261, 13, 196, 257, 191, -152, -176, 157, -163, -46,
	-163, 87, -7, -3, -11, -10, -12, 111, 81, 102,
	100, 101, 118, -61, -84, 121, 103, 119, 120, 105,
	123, 122, 133, 126, 127, 128, 129, 130, 131, 132,
	124, 125, 136, 111, 112, 113, 114, 115, 116, 117,
	-145, -248, -101, -248, 144, 145, -87, -87, -87, -87,
	-87, -87, -87, -87, -87, -87, -248, 143, -2, -96,
	-4, -248, -248, -248, -248, -248, -248, -248, -248, -106,
	-61, -248, -252, -93, -248, -252, -93, -252, -93, -252,
	-248, -252, -93, -252, -93, -252, -252, -93, -248, -248,
	-248, -248, -248, -248, -248, -175, -243, -244, -79, -76,
	-110, -3, -44, -130, 20, 32, -61, -111, -112, -61,
	-110, 55, -56, -58, -60, 59, 60, 93, 12, -166,
	-165, 23, -163, 87, 143, 12, -77, 27, -76, -63,
	-64, -65, -66, -79, -102, -248, 12, -70, -71, -76,
	-78, -168, 81, 201, -140, -178, -142, -141, 275, 277,
	111, -167, -163, 87, 30, 31, 82, 81, -76, -181,
	-184, -186, -185, -187, -182, -183, 224, 225, 137, 228,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	31, 178, 220, 221, 222, 223, 240, 241, 242, 243,
	244, 245, 246, 247, 207, 226, 304, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 219, -233, 80,
	82, 81, -188, 80, -176, 156, -76, 103, -233, -233,
	31, -209, 111, -158, 151, 148, 149, -229, 147, 249,
	227, 94, 30, 16, 294, 184, 309, -233, 185, -176,
	190, 190, 154, 154, 198, -76, 40, 81, 157, -70,
	24, 72, -76, -233, -169, -168, -161, -176, -152, 87,
	-61, -176, -176, -176, -76, -176, -176, 87, -207, 12,
	121, -176, -176, -148, 12, 121, -207, -148, -61, -153,
	72, -174, 204, 238, 392, 393, 394, -61, -61, -61,
	-61, -94, 96, 103, 97, 98, -87, -95, -98, -101,
	92, 121, 119, 120, 105, -87, -87, -87, -87, -87,
	-87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
	-177, -233, 87, -233, -86, -86, -163, -57, 22, 36,
	-56, -164, -169, -161, -54, -249, -249, -110, -56, -56,
	-61, -61, -103, 87, -56, -103, 87, -56, -56, -53,
	22, 36, -104, -105, 107, -103, -163, -168, -249, -87,
	-163, -163, -56, -57, -57, -56, -56, 81, -245, 277,
	278, 396, -171, 184, -170, 23, -168, 87, -114, -249,
	-115, 27, 10, 121, 81, 19, 81, -113, 25, 26,
	-114, -88, -163, 88, 91, -62, 81, 12, -60, -76,
	-165, 128, -169, -76, -133, 184, -76, 31, 81, -72,
	-74, -73, -75, 62, 66, 68, 63, 64, 65, 69,
	-172, 23, -63, -3, -248, -76, -70, -250, 81, 12,
	73, -250, 81, 143, -140, -142, 81, 276, 278, 279,
	72, 99, -61, -193, 136, -213, -214, -215, -164, 87,
	88, -201, -202, -203, -216, 170, -225, 161, 163, 164,
	160, -205, 171, -226, 155, 29, 82, -156, 96, 103,
	-197, 252, -188, -188, -188, -188, -188, -192, 227, -192,
	-192, -192, 80, 80, -188, -188, -188, -188, -194, 80,
	-194, -194, -195, 80, -195, -226, 166, -61, -223, -222,
	-219, 73, 165, 94, 306, -217, -113, 88, -76, 24,
	-129, 73, -209, -233, 87, -175, -237, 166, 162, 170,
	171, 164, 83, 84, 85, 155, 29, 161, 163, 184,
	160, -237, -159, -160, 157, 23, 155, 29, 184, -76,
	-76, -76, -76, -76, 151, 148, 192, -76, -76, -76,
	-176, -76, -152, -168, -168, -76, -152, -76, -163, 96,
	97, 98, -95, -87, -87, -87, -55, 179, 102, -249,
	-249, -56, -56, -248, 143, -5, -114, -249, -249, 81,
	73, 23, 12, 12, -249, 12, 12, -249, -249, -56,
	-107, -105, 109, -61, -249, 143, -249, 81, 81, -249,
	-249, -249, -249, -249, -244, 395, 278, -80, 70, 158,
	71, -248, -170, -130, 38, 46, 57, -61, -61, -112,
	-130, -144, 20, 12, 53, 53, -81, 13, -58, -63,
	-60, 143, -81, -85, 31, 53, -3, -248, -248, -136,
	-139, -103, -64, -65, -65, -64, -65, 62, 62, 62,
	67, 62, 67, 62, -73, -168, -249, -249, -3, -133,
	73, -63, -76, -63, -78, -168, 128, -141, -143, 280,
	277, 283, -233, 87, 81, -215, 111, -204, 80, -233,
	29, -205, -205, -205, -208, -233, -208, 29, -190, 30,
	96, -198, 253, -192, -192, -193, 31, -193, -193, -193,
	-200, 87, -200, 88, 88, 82, -224, -220, -221, 32,
	76, -219, -233, -209, 87, 37, 82, -176, 72, -163,
	-233, 87, -175, -175, -76, -175, -163, -235, 73, 190,
	249, 190, 193, 157, -176, -148, -148, -55, 102, -87,
	-87, -249, -249, -57, -164, -110, -130, -180, 137, 224,
	178, 222, 218, 238, 229, 251, 220, 252, -177, -180,
	-87, -87, -87, -87, 303, -110, 110, -61, 108, -164,
	-87, -87, 155, 155, 155, -134, -163, 39, 87, 87,
	58, -76, -108, 14, -61, 128, -114, -135, 72, -136,
	-97, -99, -98, -248, -131, -249, -163, -134, -81, 81,
	111, -68, -67, 72, 73, -69, 72, -67, 62, 62,
	-249, -81, -63, -81, -81, 143, 277, 281, 282, -214,
	-215, -218, -225, 171, -208, -208, -208, 80, -191, 72,
	-87, -193, -193, -233, 137, 82, 81, 82, 81, 82,
	81, -157, 341, 103, -221, -220, -209, -209, 88, 87,
	-76, 27, -232, 306, -234, -233, -163, -163, -163, -76,
	-152, -152, -87, -249, -114, -249, -188, -188, -188, -195,
	-188, 212, -188, 212, -249, -249, 20, 20, 20, 20,
	-248, -51, 299, -61, 81, 81, -248, -248, -248, -249,
	81, 87, -192, -109, 15, 17, 28, -135, 81, -249,
	-249, 81, 53, 143, -249, -110, -139, -61, -61, 80,
	-61, -110, -81, 82, -132, -163, -196, 249, 10, -192,
	87, -192, 88, 88, 341, 30, 77, 78, 79, 30,
	74, 75, -248, -231, -230, -164, 80, 73, -130, -192,
	-233, -87, -87, -87, -87, -87, -114, 87, -87, -87,
	-132, -249, -132, -132, -171, -163, -192, -117, -122, -150,
	-61, -96, 29, -99, 53, -3, -163, -97, -163, -114,
	-132, -114, -223, 82, 81, -199, 161, 29, 160, -90,
	-193, -193, 82, 82, -227, -228, 184, 81, 111, -132,
	-76, -249, -249, -249, -249, -52, 121, 306, -249, -249,
	-249, -249, -249, -249, -80, -120, 391, -123, 42, -124,
	43, 10, -97, 143, 82, 173, -163, -189, 94, 29,
	29, -249, 81, -163, -230, -215, 82, -249, 304, 69,
	307, -117, 47, 230, -125, 51, -126, -121, 52, 17,
	-136, -163, -76, 87, -228, 53, -235, 58, 305, 308,
	-118, 49, -116, 48, -116, -124, 17, -127, 44, 45,
	87, 80, 186, -232, 58, -119, 50, 72, 99, 87,
	17, 17, -132, 187, 306, 72, 99, 87, 87, 82,
	-248, 307, -240, -241, 72, -87, 183, 308, -241, 72,
	11, 10, -249, -249, -239, 174, 169, 172, 31, -239,
	168, 30, 96,
}

var yyDef = [...]int{
	32, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 665, 0, 406, 406, 406, 406, 406, 406, 406,
	0, 0, 778, -2, 0, 36, 0, 0, 0, 0,
	-2, 364, 365, 0, 367, -2, 0, 0, 376, 1120,
	1120, 1120, 0, 0, 0, 0, 1118, 53, 54, 382,
	383, 384, 1, 3, 0, 410, 673, 0, 0, -2,
	408, 0, 0, 761, 761, 761, 0, 82, 83, 0,
	0, 0, 0, 0, 759, 0, 759, 779, 780, 781,
	100, 101, 87, -2, 105, 106, 0, 110, 99, 0,
	0, 0, 109, 37, 33, 34, 35, 0, 757, 0,
	757, 757, 0, 309, 488, 788, 789, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 0,
	0, 0, 355, 0, 358, 358, 358, 358, 324, 0,
	326, 1121, 0, 0, 0, 333, 0, 0, 339, 355,
	1121, 347, 361, 362, 349, 344, 345, 363, 366, 0,
	371, 374, 784, 785, 0, 389, 0, 966, 381, 394,
	395, 405, 38, 539, 498, 0, 504, 506, 0, 541,
	542, 543, 544, 545, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 572, 573, 574, 650, 651,
	652, 653, 654, 655, 656, 657, 508, 509, 647, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 608, 608, 608, 608, 608, 608, 608, 608,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 1120,
	0, 404, 665, 49, 0, 406, 411, 412, 689, 0,
	0, 665, 1119, 0, 0, -2, -2, 422, 428, 429,
	430, 431, 407, 0, 434, 438, 0, 0, 0, 762,
	0, 0, 68, 0, 1091, 742, -2, -2, 0, 0,
	786, 787, -2, 930, -2, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 0,
	0, 117, 118, 0, 0, 239, 932, 115, 0, 233,
	174, 1121, 0, 0, 0, 0, 0, 107, 108, 0,
	216, 0, 1121, 0, 0, 0, 0, -2, 0, 301,
	0, 0, 0, 0, 0, 0, 308, 0, 310, 1121,
	355, 313, 0, 0, 1121, 1121, 1121, 0, 1121, 1121,
	320, 0, 321, 322, 323, 0, 224, 225, 226, 327,
	1122, 1123, 1121, 1121, 352, 0, 352, 350, 351, 342,
	343, 0, 358, 336, 337, 340, 341, 372, 375, 392,
	390, 391, 393, 385, 386, 387, 388, 0, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 528, 529, 530, 531, 532,
	505, 0, 519, 0, 0, 0, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 0, 419, 0, 0, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	639, 0, 592, 600, 0, 593, 601, 594, 602, 595,
	0, 596, 603, 597, 604, 598, 599, 605, 0, 0,
	0, 419, 419, 0, 0, 39, 396, 397, 0, 471,
	673, 0, 421, 692, 0, 0, 674, 666, 667, 670,
	673, 0, 443, 432, 423, 426, 427, 409, 0, 435,
	439, 0, 441, 442, 0, 0, 66, 0, 487, 0,
	445, 447, 448, 449, 469, 0, 0, 0, 0, 62,
	64, 488, 0, 1091, 748, 0, 70, 71, 0, 0,
	0, 197, 752, 753, 754, 750, 256, 0, 0, 185,
	181, 125, 126, 127, 174, 129, 174, 174, 174, 174,
	194, 194, 194, 194, 157, 158, 159, 160, 161, 0,
	0, 144, 174, 174, 174, 174, 164, 165, 166, 167,
	168, 169, 170, 171, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 176, 176, 176, 178, 178, 0, 0,
	208, 0, 670, 0, 85, 0, 96, 0, 782, 98,
	216, 0, 217, 1120, 0, 0, 773, 271, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	758, 0, 1121, 307, 489, 790, 791, 311, 312, 356,
	357, 314, 315, 316, 317, 318, 319, 359, 0, 227,
	228, 328, 332, 355, 0, 0, 0, 355, 334, 335,
	0, 0, 373, 377, 378, 379, 380, 540, 499, 500,
	501, 503, 520, 0, 522, 524, 510, 511, 535, 536,
	537, 0, 0, 0, 0, 533, 515, 0, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	560, 623, 624, 0, 558, 559, 570, 0, 0, 0,
	420, 648, 0, -2, 0, 538, 737, 673, 0, 0,
	0, 0, 543, 650, 0, 543, 650, 0, 0, 0,
	417, 418, 645, 642, 0, 0, 647, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 400,
	402, 0, 491, 1032, 472, 0, 474, 475, 689, 50,
	40, 0, 690, 0, 0, 0, 0, 669, 671, 672,
	689, 0, 658, 0, 0, 496, 0, 0, 424, 46,
	440, 436, 0, 496, 0, 0, 486, 0, 0, 0,
	0, 0, 0, 476, 0, 0, 479, 0, 0, 0,
	0, 470, 0, 0, 0, -2, 0, 0, 0, 60,
	61, 0, 0, 0, 743, 69, 0, 0, 74, 75,
	744, 745, 746, 747, 0, 102, 257, 259, 262, 263,
	264, 119, 121, 122, 0, 0, 237, 1042, 1075, 967,
	231, 231, 965, 244, 229, 230, 116, 188, 186, 0,
	183, 182, 128, 194, 194, 151, 152, 197, 0, 197,
	197, 197, 0, 0, 145, 146, 147, 148, 139, 0,
	140, 141, 142, 0, 143, 238, 0, 0, 677, 209,
	210, 0, 216, 0, 0, 234, 235, 0, 1121, 760,
	0, 0, 0, 113, 114, 265, 1120, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294,
	295, 1120, 0, 1120, 774, 775, 776, 777, 0, 88,
	275, 277, 276, 280, 0, 0, 0, 0, 302, 1121,
	306, 352, 329, 353, 354, 352, 331, 338, 369, 521,
	523, 525, 512, 533, 516, 0, 513, 0, 0, 507,
	575, 0, 0, 419, 0, 665, 689, 579, 580, 0,
	0, 0, 0, 0, 616, 0, 0, 617, 0, 665,
	0, 643, 0, 0, 591, 0, 610, 0, 0, 611,
	612, 613, 614, 615, 398, 401, 403, 453, 0, 0,
	0, 0, 473, 42, 0, 0, 0, 675, 676, 668,
	41, 0, 755, 756, 659, 660, 661, 0, 433, 444,
	425, 0, 673, 731, 0, 0, 723, 0, 0, 496,
	739, 0, 446, 465, 467, 0, 462, 477, 478, 480,
	0, 482, 0, 484, 485, 450, 451, 452, 0, 496,
	0, 496, 63, 496, 65, 0, 490, 72, 73, 0,
	0, 79, 198, 199, 0, 260, 0, 120, 0, 0,
	218, 231, 231, 231, 222, 232, 223, 0, 190, 0,
	187, 124, 184, 197, 197, 153, 0, 154, 155, 156,
	0, 172, 0, 0, 0, 253, 84, 681, 680, 216,
	216, 211, 212, 0, 214, 0, 175, 86, 0, 783,
	111, 112, 266, 267, 268, 269, 0, 91, 0, 0,
	0, 0, 273, 0, 305, 355, 355, 514, 0, 534,
	517, 576, 577, 0, 649, 673, 44, 0, 174, 174,
	628, 174, 178, 631, 174, 633, 174, 636, 0, 0,
	0, 0, 0, 0, 0, 640, 590, 646, 0, 648,
	0, 0, 0, 0, 0, 0, 457, 0, 194, 694,
	691, 43, 663, 0, 497, 437, 47, 51, 0, 731,
	722, 733, 735, 0, 0, 0, 727, 0, 665, 0,
	0, 459, 466, 0, 0, 460, 0, 461, 481, 483,
	-2, 665, 496, 58, 59, 0, 76, 77, 78, 258,
	261, 0, 236, 0, 219, 220, 221, 0, 192, 0,
	189, 149, 150, 195, 196, 194, 0, 194, 0, 179,
	0, 245, 254, 0, 678, 679, 0, 0, 213, 215,
	97, 0, 274, 0, 89, 90, 0, 0, 279, 303,
	325, 330, 518, 578, 689, 581, 625, 194, 629, 630,
	632, 634, 635, 637, 583, 582, 0, 0, 0, 0,
	0, 673, 0, 644, 0, 0, 0, 0, 0, 471,
	0, 194, 714, 48, 0, 0, 0, 52, 0, 736,
	0, 0, 0, 0, 67, 673, 740, 741, 463, 0,
	468, 673, 57, 208, 0, 455, 200, 193, 0, 197,
	173, 197, 0, 0, 255, 682, 683, 684, 685, 686,
	687, 688, 0, 92, 93, 0, 0, 0, 45, 626,
	627, 0, 0, 0, 0, 618, 0, 641, 0, 0,
	0, 493, 0, 0, 491, 458, 696, 695, 708, 712,
	664, 662, 0, 734, 0, 726, 729, 725, 728, 55,
	0, 56, 207, 0, 0, 205, 0, 202, 204, 191,
	162, 163, 177, 180, 0, 297, 0, 0, 0, 0,
	281, 584, 586, 585, 587, 0, 0, 0, 589, 606,
	607, 492, 494, 495, 454, 714, 0, 707, 710, -2,
	0, 0, 724, 0, 464, 0, 456, 123, 0, 201,
	203, 296, 0, 0, 94, 95, 88, 588, 0, 0,
	0, 701, 699, 699, 712, 0, 716, 0, 721, 0,
	732, 730, 0, 206, 298, 0, 91, 619, 0, 622,
	704, 0, 697, 700, 698, 709, 0, 715, 0, 0,
	713, 0, 0, 278, 620, 693, 0, 702, 703, 711,
	0, 0, 0, 0, 0, 705, 706, 717, 719, 240,
	0, 0, 241, 242, 0, 0, 0, 621, 243, 0,
	0, 0, 299, 300, 246, 248, 249, 0, 0, 247,
	250, 251, 252,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 397,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:387
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:392
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:393
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:428
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:438
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:447
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Load{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:469
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:478
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:482
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:486
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:517
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:537
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:554
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:566
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
			yyVAL.insertAction = InsertAct
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:606
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:611
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:620
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:630
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:635
		{
			yyVAL.partitions = nil
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:639
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:665
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyVAL.characteristic = ReadWrite
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:679
		{
			yyVAL.characteristic = ReadOnly
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:689
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:693
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.isolationLevel = Serializable
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.scope = SessionScope
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.scope = GlobalScope
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 84:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:726
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:737
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:748
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:763
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:791
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:798
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, IndexType: yyDollar[5].str, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:805
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:823
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:829
		{
			yyVAL.collateAndCharsets = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:856
		{
			yyVAL.boolean = false
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.boolean = true
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:866
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:870
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:876
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:880
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:891
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:907
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:911
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:916
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:920
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:926
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1153
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1158
		{
			yyVAL.literal = nil
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1171
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1179
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1183
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1189
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1197
		{
			yyVAL.boolean = false
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.boolean = true
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.boolean = false
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.boolean = true
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1216
		{
			yyVAL.boolean = false
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.boolean = false
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.boolean = true
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1229
		{
			yyVAL.optVal = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1238
		{
			yyVAL.optVal = nil
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1247
		{
			yyVAL.boolean = false
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.boolean = true
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1269
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1273
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1282
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1286
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.colKeyOpt = colKey
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1303
		{
			yyVAL.literal = nil
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1313
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexOptions = nil
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1332
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1357
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1367
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1371
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1383
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1427
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1431
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1447
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1453
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1463
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1473
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 241:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1477
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 242:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1481
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 243:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1485
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1489
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1495
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1501
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1517
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1525
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1534
		{
			yyVAL.boolean = true
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.boolean = true
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.boolean = false
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.str = yyDollar[1].str
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1567
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1571
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1603
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1608
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1628
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1721
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 299:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1737
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1741
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1753
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1757
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1769
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1804
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1809
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1814
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1839
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1863
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1888
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1898
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1910
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1923
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1946
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1972
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = "extended "
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.str = "full "
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2002
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2016
		{
			yyVAL.showFilter = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2024
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2030
		{
			yyVAL.showFilter = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.scope = ImplicitScope
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.scope = SessionScope
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.scope = GlobalScope
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Begin{}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Begin{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.statement = &Commit{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &Rollback{}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2089
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2094
		{
			yyVAL.empty = struct{}{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.empty = struct{}{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2101
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2112
		{
			yyVAL.explainType = EmptyType
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2116
		{
			yyVAL.explainType = JSONType
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.explainType = TreeType
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.explainType = VitessType
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.explainType = TraditionalType
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.explainType = AnalyzeType
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = &OtherRead{}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2197
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: yyDollar[1].aliasedTableName, Lock: yyDollar[2].lockType}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.lockType = Read
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.lockType = ReadLocal
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.lockType = Write
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.lockType = LowPriorityWrite
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2243
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2253
		{
			setAllowComments(yylex, true)
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2263
		{
			yyVAL.bytes2 = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2267
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.boolean = true
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.boolean = false
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2281
		{
			yyVAL.boolean = true
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2286
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.str = SQLCacheStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2299
		{
			yyVAL.boolean = false
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.boolean = true
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.boolean = true
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2312
		{
			yyVAL.selectExprs = nil
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2321
		{
			yyVAL.strs = nil
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2337
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2347
		{
			yyVAL.str = SQLCacheStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2351
		{
			yyVAL.str = DistinctStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.str = DistinctStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.str = StraightJoinHint
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2369
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2373
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2391
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2396
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2404
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2416
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2426
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2430
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2444
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2460
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2464
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2484
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2497
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2505
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2517
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2521
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2523
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2527
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2532
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2537
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.joinType = NormalJoinType
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.joinType = NormalJoinType
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.joinType = NormalJoinType
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.joinType = StraightJoinType
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.joinType = LeftJoinType
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.joinType = LeftJoinType
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.joinType = RightJoinType
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.joinType = RightJoinType
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2610
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2635
		{
			yyVAL.indexHints = nil
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2639
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2647
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2651
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 589:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3119
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3165
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			yyVAL.matchExprOption = NoOption
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3213
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 621:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3217
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3221
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3287
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3301
		{
			yyVAL.str = string("")
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3315
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3321
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = nil
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3340
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3344
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3350
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3354
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = &NullVal{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3384
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3402
		{
			yyVAL.exprs = nil
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3406
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3411
		{
			yyVAL.expr = nil
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3415
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3420
		{
			yyVAL.orderBy = nil
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3424
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3434
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3440
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3445
		{
			yyVAL.orderDirection = AscOrder
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.orderDirection = AscOrder
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.orderDirection = DescOrder
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3458
		{
			yyVAL.limit = nil
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3462
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3466
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3470
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3475
		{
			yyVAL.indexOptions = nil
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3479
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3483
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3498
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3502
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3506
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3510
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3516
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3520
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3524
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3529
		{
			yyVAL.lock = NoLock
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3533
		{
			yyVAL.lock = ForUpdateLock
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3537
		{
			yyVAL.lock = ShareModeLock
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3542
		{
			yyVAL.selectInto = nil
		}
	case 693:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3546
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3550
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3554
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3559
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3563
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3567
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3572
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3576
		{
			yyVAL.str = " header"
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3581
		{
			yyVAL.str = ""
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3585
		{
			yyVAL.str = " manifest on"
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3589
		{
			yyVAL.str = " manifest off"
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3594
		{
			yyVAL.str = ""
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3598
		{
			yyVAL.str = " overwrite on"
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3602
		{
			yyVAL.str = " overwrite off"
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3613
		{
			yyVAL.str = ""
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3622
		{
			yyVAL.str = ""
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3626
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3631
		{
			yyVAL.str = ""
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3635
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3640
		{
			yyVAL.str = ""
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3644
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			yyVAL.str = ""
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3653
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3658
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3662
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3667
		{
			yyVAL.str = ""
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3671
		{
			yyVAL.str = " optionally"
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3684
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3688
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3692
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3696
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3700
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3706
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3710
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3714
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3718
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3723
		{
			yyVAL.updateExprs = nil
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3727
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3733
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3737
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3743
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3747
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3753
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3769
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3773
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3779
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3785
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3789
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3795
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3799
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3803
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3807
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3811
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3819
		{
			yyVAL.bytes = []byte("charset")
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3830
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.expr = &Default{}
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3843
		{
			yyVAL.boolean = false
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3845
		{
			yyVAL.boolean = true
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3848
		{
			yyVAL.boolean = false
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3850
		{
			yyVAL.boolean = true
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3853
		{
			yyVAL.ignore = false
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			yyVAL.ignore = true
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3859
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3863
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3865
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3867
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3869
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3871
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3873
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			yyVAL.empty = struct{}{}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3877
		{
			yyVAL.empty = struct{}{}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3881
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3883
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3885
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3889
		{
			yyVAL.empty = struct{}{}
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3891
		{
			yyVAL.empty = struct{}{}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3894
		{
			yyVAL.str = ""
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3896
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3903
		{
			yyVAL.str = ""
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3905
		{
			yyVAL.str = yyDollar[2].colIdent.val
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3909
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3920
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3926
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3930
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3937
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4289
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4298
		{
			decNesting(yylex)
		}
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4303
		{
			skipToEnd(yylex)
		}
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4308
		{
			skipToEnd(yylex)
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4312
		{
			skipToEnd(yylex)
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4316
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

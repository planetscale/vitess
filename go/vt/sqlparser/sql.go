// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const DATA = 57381
const LOAD = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const SQL_CALC_FOUND_ROWS = 57391
const JOIN = 57392
const STRAIGHT_JOIN = 57393
const LEFT = 57394
const RIGHT = 57395
const INNER = 57396
const OUTER = 57397
const CROSS = 57398
const NATURAL = 57399
const USE = 57400
const FORCE = 57401
const ON = 57402
const USING = 57403
const ID = 57404
const AT_ID = 57405
const AT_AT_ID = 57406
const HEX = 57407
const STRING = 57408
const INTEGRAL = 57409
const FLOAT = 57410
const HEXNUM = 57411
const VALUE_ARG = 57412
const LIST_ARG = 57413
const COMMENT = 57414
const COMMENT_KEYWORD = 57415
const BIT_LITERAL = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const XOR = 57422
const AND = 57423
const NOT = 57424
const BETWEEN = 57425
const CASE = 57426
const WHEN = 57427
const THEN = 57428
const ELSE = 57429
const END = 57430
const LE = 57431
const GE = 57432
const NE = 57433
const NULL_SAFE_EQUAL = 57434
const IS = 57435
const LIKE = 57436
const REGEXP = 57437
const IN = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const UNDERSCORE_UTF8MB4 = 57447
const UNDERSCORE_UTF8 = 57448
const UNDERSCORE_LATIN1 = 57449
const INTERVAL = 57450
const JSON_EXTRACT_OP = 57451
const JSON_UNQUOTE_EXTRACT_OP = 57452
const CREATE = 57453
const ALTER = 57454
const DROP = 57455
const RENAME = 57456
const ANALYZE = 57457
const ADD = 57458
const FLUSH = 57459
const SCHEMA = 57460
const TABLE = 57461
const INDEX = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const UNIQUE = 57467
const PRIMARY = 57468
const COLUMN = 57469
const SPATIAL = 57470
const FULLTEXT = 57471
const KEY_BLOCK_SIZE = 57472
const CHECK = 57473
const INDEXES = 57474
const ACTION = 57475
const CASCADE = 57476
const CONSTRAINT = 57477
const FOREIGN = 57478
const NO = 57479
const REFERENCES = 57480
const RESTRICT = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const WARNINGS = 57501
const SEQUENCE = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const SAVEPOINT = 57508
const RELEASE = 57509
const WORK = 57510
const BIT = 57511
const TINYINT = 57512
const SMALLINT = 57513
const MEDIUMINT = 57514
const INT = 57515
const INTEGER = 57516
const BIGINT = 57517
const INTNUM = 57518
const REAL = 57519
const DOUBLE = 57520
const FLOAT_TYPE = 57521
const DECIMAL = 57522
const NUMERIC = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const VITESS_METADATA = 57561
const VSCHEMA = 57562
const FULL = 57563
const PROCESSLIST = 57564
const COLUMNS = 57565
const FIELDS = 57566
const ENGINES = 57567
const PLUGINS = 57568
const EXTENDED = 57569
const KEYSPACES = 57570
const VITESS_KEYSPACES = 57571
const VITESS_SHARDS = 57572
const VITESS_TABLETS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693
const FORMAT = 57694
const TREE = 57695
const VITESS = 57696
const TRADITIONAL = 57697

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	34, 323,
	137, 323,
	149, 323,
	174, 337,
	175, 337,
	-2, 325,
	-1, 50,
	139, 347,
	-2, 345,
	-1, 74,
	43, 383,
	-2, 391,
	-1, 405,
	125, 719,
	-2, 715,
	-1, 406,
	125, 720,
	-2, 716,
	-1, 421,
	43, 384,
	-2, 396,
	-1, 422,
	43, 385,
	-2, 397,
	-1, 442,
	93, 978,
	-2, 76,
	-1, 443,
	93, 891,
	-2, 77,
	-1, 448,
	93, 857,
	-2, 678,
	-1, 450,
	93, 924,
	-2, 680,
	-1, 961,
	125, 722,
	-2, 718,
	-1, 1049,
	61, 58,
	63, 58,
	-2, 62,
	-1, 1409,
	5, 635,
	18, 635,
	20, 635,
	32, 635,
	64, 635,
	-2, 422,
}

const yyPrivate = 57344

const yyLast = 18610

var yyAct = [...]int{

	405, 1659, 1649, 1616, 1071, 1455, 1333, 1233, 1531, 1565,
	1517, 1389, 1253, 1425, 364, 708, 1043, 1390, 1234, 349,
	1115, 335, 1395, 577, 609, 1070, 748, 378, 1067, 414,
	1386, 948, 755, 1283, 1080, 1352, 447, 955, 1401, 882,
	94, 1169, 1220, 901, 295, 1310, 318, 295, 1300, 793,
	574, 1040, 94, 1084, 295, 786, 1022, 1045, 758, 73,
	3, 423, 71, 1029, 351, 753, 925, 981, 792, 776,
	29, 408, 1111, 573, 790, 340, 1051, 336, 775, 765,
	339, 1101, 94, 69, 783, 94, 295, 911, 295, 626,
	618, 896, 347, 74, 68, 8, 7, 721, 6, 1448,
	1527, 1652, 1636, 1647, 1624, 722, 1644, 1591, 670, 669,
	679, 680, 672, 673, 674, 675, 676, 677, 678, 671,
	1456, 1635, 681, 1095, 598, 1369, 76, 77, 78, 79,
	80, 81, 1485, 582, 1061, 429, 433, 1623, 1420, 1421,
	409, 283, 1062, 1063, 281, 390, 1137, 396, 397, 394,
	395, 393, 392, 391, 31, 1419, 441, 62, 35, 36,
	1136, 398, 399, 291, 287, 288, 289, 1270, 641, 794,
	1269, 795, 338, 1271, 636, 96, 97, 98, 637, 634,
	635, 337, 1291, 1094, 1520, 96, 97, 98, 1335, 1102,
	1476, 1474, 328, 910, 330, 96, 97, 98, 326, 31,
	32, 33, 62, 35, 36, 639, 1135, 631, 870, 869,
	61, 629, 630, 1337, 867, 1646, 1643, 1617, 1332, 66,
	781, 1023, 1609, 1663, 37, 56, 57, 1119, 59, 1119,
	640, 958, 1428, 60, 1119, 1667, 1254, 1256, 576, 1088,
	912, 913, 914, 284, 1336, 868, 615, 599, 617, 871,
	1574, 46, 1566, 584, 435, 61, 1338, 875, 644, 1132,
	1129, 1130, 858, 1128, 293, 1412, 1411, 1568, 1410, 282,
	1088, 628, 580, 587, 331, 96, 97, 98, 298, 286,
	614, 616, 295, 589, 590, 693, 694, 295, 1592, 600,
	285, 290, 1149, 295, 624, 1148, 1139, 1142, 1188, 295,
	607, 1598, 1499, 613, 1418, 1225, 579, 1329, 581, 1198,
	94, 1185, 1177, 1331, 1057, 769, 1068, 681, 1255, 94,
	706, 39, 40, 42, 41, 44, 1102, 58, 605, 1001,
	594, 94, 94, 1447, 671, 1266, 1134, 681, 1567, 902,
	619, 1607, 642, 1661, 661, 611, 1662, 1087, 1660, 1583,
	45, 65, 64, 444, 1399, 54, 55, 43, 1133, 655,
	656, 897, 1622, 1575, 1573, 1353, 96, 97, 98, 796,
	826, 47, 48, 612, 49, 50, 51, 52, 1087, 670,
	669, 679, 680, 672, 673, 674, 675, 676, 677, 678,
	671, 658, 650, 681, 1371, 620, 621, 623, 591, 654,
	592, 982, 1138, 593, 860, 84, 1355, 661, 643, 625,
	1612, 691, 693, 694, 601, 602, 603, 1140, 1289, 63,
	1439, 1330, 982, 1328, 1195, 693, 694, 791, 653, 651,
	903, 652, 94, 610, 762, 295, 1170, 295, 295, 1668,
	94, 745, 1627, 1357, 85, 1361, 94, 1356, 1526, 1354,
	709, 932, 898, 1091, 1359, 659, 660, 658, 814, 61,
	1092, 1525, 1304, 1358, 63, 930, 931, 929, 1303, 1292,
	746, 928, 1629, 661, 1608, 1544, 1360, 1362, 674, 675,
	676, 677, 678, 671, 1523, 759, 681, 1669, 774, 724,
	726, 728, 730, 732, 734, 735, 1489, 725, 727, 827,
	731, 733, 588, 736, 1301, 747, 583, 597, 1207, 439,
	1006, 1007, 895, 604, 659, 660, 658, 887, 873, 606,
	434, 595, 1373, 1571, 1645, 840, 843, 844, 845, 846,
	847, 848, 661, 849, 850, 851, 852, 853, 828, 829,
	830, 831, 812, 813, 841, 418, 815, 1580, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 832, 833,
	834, 835, 836, 837, 838, 839, 1579, 659, 660, 658,
	1162, 1163, 1164, 295, 1305, 1003, 1435, 854, 1398, 660,
	658, 856, 94, 1089, 859, 661, 861, 295, 295, 94,
	94, 94, 659, 660, 658, 295, 661, 585, 586, 295,
	436, 437, 295, 880, 881, 1495, 295, 1221, 94, 1025,
	661, 1631, 418, 94, 94, 94, 295, 94, 94, 1002,
	1221, 842, 672, 673, 674, 675, 676, 677, 678, 671,
	94, 94, 681, 886, 70, 1184, 657, 1320, 659, 660,
	658, 1026, 884, 920, 922, 923, 1582, 96, 97, 98,
	921, 950, 757, 1571, 1620, 773, 661, 1026, 785, 669,
	679, 680, 672, 673, 674, 675, 676, 677, 678, 671,
	1398, 857, 681, 1316, 1317, 1318, 1443, 905, 864, 865,
	866, 1026, 949, 876, 96, 97, 98, 1183, 1273, 1182,
	1274, 951, 926, 418, 659, 660, 658, 885, 96, 97,
	98, 1060, 889, 890, 891, 94, 893, 894, 659, 660,
	658, 444, 661, 367, 366, 369, 370, 371, 372, 899,
	900, 1053, 368, 373, 904, 1201, 661, 1571, 418, 927,
	907, 1571, 1599, 1200, 970, 973, 1571, 1570, 94, 94,
	983, 1387, 965, 961, 1398, 1319, 960, 1515, 1514, 31,
	1324, 1321, 1312, 1322, 1315, 31, 1311, 94, 1501, 418,
	1313, 1314, 1014, 709, 295, 1498, 418, 94, 1445, 1444,
	1054, 295, 1056, 295, 1323, 996, 1441, 1442, 991, 992,
	1228, 295, 295, 295, 1551, 1008, 952, 953, 411, 94,
	1229, 962, 94, 804, 1441, 1440, 1014, 418, 1026, 418,
	1053, 657, 418, 94, 94, 61, 961, 862, 863, 1020,
	72, 61, 1334, 803, 802, 872, 1260, 1052, 1052, 785,
	1004, 1016, 879, 874, 788, 61, 1637, 1086, 1031, 1034,
	1035, 1036, 1032, 1533, 1033, 1037, 892, 1096, 1402, 1403,
	1041, 418, 1015, 1506, 61, 1116, 1018, 1431, 855, 1054,
	31, 1052, 1402, 1403, 1641, 1278, 1534, 1014, 1059, 295,
	94, 1055, 94, 1058, 1141, 1112, 1107, 1050, 295, 295,
	295, 295, 295, 406, 1117, 295, 295, 1075, 1118, 295,
	94, 670, 669, 679, 680, 672, 673, 674, 675, 676,
	677, 678, 671, 1014, 1106, 681, 1122, 295, 1654, 1103,
	1104, 1105, 1650, 295, 295, 295, 61, 1433, 1405, 295,
	94, 1387, 1306, 95, 908, 878, 1245, 296, 1408, 1407,
	296, 1246, 1242, 1113, 1114, 95, 1155, 296, 1243, 1247,
	1159, 1035, 1036, 1244, 1241, 1634, 1097, 1098, 1099, 1100,
	1379, 1210, 966, 967, 756, 1639, 972, 975, 976, 1124,
	1219, 1126, 1108, 1109, 1110, 95, 1218, 926, 95, 296,
	407, 296, 1378, 424, 995, 1209, 1296, 801, 608, 1153,
	1288, 990, 1614, 424, 993, 994, 1613, 425, 959, 1031,
	1034, 1035, 1036, 1032, 1017, 1033, 1037, 425, 760, 761,
	427, 1021, 426, 1024, 927, 1179, 1165, 749, 421, 422,
	427, 978, 426, 1049, 1549, 1286, 1125, 1280, 1493, 750,
	1529, 379, 30, 999, 877, 979, 295, 1039, 412, 413,
	415, 1492, 416, 1208, 1217, 72, 1491, 295, 295, 295,
	295, 295, 1216, 409, 1178, 1214, 1382, 1221, 638, 295,
	1189, 959, 30, 295, 411, 1235, 1186, 295, 1194, 1656,
	1655, 1656, 295, 295, 770, 763, 295, 295, 295, 744,
	444, 1596, 1521, 444, 1226, 1000, 70, 1223, 75, 1272,
	1213, 94, 67, 1222, 1072, 1275, 1, 317, 1224, 1123,
	1279, 410, 1230, 1648, 1284, 1284, 1457, 1530, 1143, 1144,
	1145, 1146, 1147, 1131, 884, 1150, 1151, 1237, 1238, 1152,
	1240, 1248, 1252, 1261, 1258, 1236, 1259, 1263, 1239, 1615,
	1267, 1564, 1264, 1424, 1078, 1069, 83, 1154, 1285, 571,
	82, 1606, 622, 94, 94, 1158, 1277, 1077, 1076, 1160,
	1295, 1572, 1297, 1298, 1299, 1290, 1281, 1282, 679, 680,
	672, 673, 674, 675, 676, 677, 678, 671, 1093, 1309,
	681, 1519, 1432, 94, 1287, 296, 1302, 1611, 809, 807,
	296, 808, 806, 811, 810, 805, 296, 310, 909, 327,
	1038, 797, 296, 1121, 764, 1325, 86, 1327, 94, 1293,
	1294, 1326, 1127, 95, 949, 1446, 1090, 307, 1174, 1175,
	632, 633, 95, 312, 280, 689, 1215, 1268, 1340, 445,
	438, 1393, 1341, 998, 95, 95, 1351, 1005, 1342, 1192,
	752, 1350, 1490, 1308, 1348, 1363, 295, 1381, 1193, 718,
	1364, 980, 779, 350, 919, 1370, 94, 365, 362, 1377,
	363, 1009, 94, 94, 1227, 961, 1388, 663, 960, 348,
	342, 778, 1339, 1488, 771, 1030, 1028, 1027, 1235, 784,
	1404, 1400, 777, 1013, 420, 977, 1385, 1391, 94, 1590,
	1484, 295, 419, 53, 34, 332, 646, 428, 28, 23,
	22, 986, 21, 1262, 20, 94, 1397, 94, 1406, 94,
	1413, 1423, 1284, 1284, 670, 669, 679, 680, 672, 673,
	674, 675, 676, 677, 678, 671, 19, 1438, 681, 25,
	1422, 18, 1414, 1086, 1416, 95, 1417, 295, 296, 17,
	296, 296, 1415, 95, 1427, 1429, 1430, 16, 596, 95,
	38, 627, 1436, 1437, 27, 26, 15, 295, 14, 13,
	627, 12, 1450, 94, 11, 1458, 94, 94, 94, 295,
	10, 9, 1072, 5, 30, 417, 4, 1451, 649, 1453,
	24, 707, 2, 0, 0, 0, 0, 690, 692, 0,
	0, 0, 0, 0, 0, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 705, 0,
	0, 0, 710, 711, 712, 713, 714, 715, 716, 717,
	0, 720, 723, 723, 723, 729, 723, 723, 729, 723,
	737, 738, 739, 740, 741, 742, 743, 1503, 1235, 1494,
	0, 0, 30, 94, 0, 0, 0, 1275, 0, 0,
	1502, 0, 94, 0, 0, 0, 1380, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 296, 1512, 780, 1349,
	94, 0, 0, 0, 0, 95, 0, 94, 1513, 0,
	296, 296, 95, 95, 95, 0, 0, 0, 296, 0,
	1374, 1537, 296, 0, 0, 296, 0, 1469, 1470, 296,
	1471, 95, 0, 1473, 0, 1475, 95, 95, 95, 296,
	95, 95, 0, 0, 1535, 0, 0, 1349, 0, 94,
	94, 0, 94, 95, 95, 0, 0, 94, 1548, 94,
	94, 94, 295, 1550, 1543, 0, 94, 1557, 0, 1558,
	1560, 1561, 1522, 1391, 1524, 0, 0, 1449, 1562, 1569,
	0, 0, 1556, 0, 94, 295, 1576, 0, 0, 1528,
	0, 0, 1563, 0, 1584, 0, 1072, 1452, 1072, 0,
	1516, 1577, 1536, 1578, 0, 0, 0, 1552, 0, 1462,
	0, 0, 0, 1597, 0, 0, 0, 1605, 0, 0,
	0, 0, 94, 0, 1604, 1603, 0, 0, 95, 1391,
	0, 0, 0, 94, 94, 0, 0, 0, 1619, 0,
	0, 1618, 0, 627, 1482, 0, 0, 0, 0, 94,
	627, 627, 627, 0, 1625, 0, 0, 344, 0, 0,
	295, 95, 95, 0, 0, 0, 1235, 0, 94, 627,
	0, 0, 0, 0, 627, 627, 627, 1633, 627, 627,
	95, 0, 0, 0, 0, 1638, 0, 296, 94, 1640,
	95, 627, 627, 0, 296, 0, 296, 0, 1642, 0,
	0, 1653, 0, 0, 296, 296, 296, 0, 1664, 0,
	0, 0, 95, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 95, 670, 669,
	679, 680, 672, 673, 674, 675, 676, 677, 678, 671,
	0, 0, 681, 665, 1072, 668, 0, 96, 97, 98,
	0, 682, 683, 684, 685, 686, 687, 688, 0, 666,
	667, 664, 670, 669, 679, 680, 672, 673, 674, 675,
	676, 677, 678, 671, 0, 0, 681, 376, 1532, 0,
	0, 0, 296, 95, 0, 95, 0, 0, 0, 0,
	0, 296, 296, 296, 296, 296, 0, 0, 296, 296,
	0, 299, 296, 95, 0, 1585, 0, 0, 1481, 0,
	302, 0, 0, 0, 0, 0, 0, 93, 311, 0,
	296, 0, 1487, 0, 0, 0, 296, 296, 296, 329,
	0, 0, 296, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 0, 316, 446,
	0, 0, 575, 670, 669, 679, 680, 672, 673, 674,
	675, 676, 677, 678, 671, 0, 0, 681, 0, 0,
	1628, 0, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 670, 669, 679, 680, 672, 673, 674, 675,
	676, 677, 678, 671, 1532, 1072, 681, 0, 0, 0,
	0, 1480, 0, 0, 0, 313, 303, 0, 314, 315,
	322, 627, 0, 627, 306, 308, 319, 304, 305, 324,
	323, 0, 301, 321, 320, 0, 0, 0, 0, 296,
	0, 627, 0, 0, 0, 0, 0, 1479, 0, 0,
	296, 296, 296, 296, 296, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 0, 296, 0, 0, 0,
	296, 0, 0, 0, 0, 296, 296, 0, 0, 296,
	296, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 670, 669, 679, 680, 672,
	673, 674, 675, 676, 677, 678, 671, 0, 0, 681,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	0, 1176, 0, 0, 410, 0, 0, 0, 1343, 963,
	964, 670, 669, 679, 680, 672, 673, 674, 675, 676,
	677, 678, 671, 0, 0, 681, 95, 95, 670, 669,
	679, 680, 672, 673, 674, 675, 676, 677, 678, 671,
	0, 0, 681, 0, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 0, 95, 780, 0, 0,
	0, 0, 0, 0, 1231, 1232, 0, 446, 780, 780,
	780, 780, 780, 0, 0, 0, 446, 0, 1171, 0,
	0, 95, 0, 0, 1042, 0, 1257, 0, 645, 647,
	0, 0, 0, 780, 0, 0, 0, 780, 670, 669,
	679, 680, 672, 673, 674, 675, 676, 677, 678, 671,
	0, 0, 681, 0, 0, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 95, 95, 670, 669, 679,
	680, 672, 673, 674, 675, 676, 677, 678, 671, 0,
	0, 681, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 296, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	95, 0, 95, 0, 0, 0, 0, 0, 0, 767,
	0, 0, 0, 0, 627, 0, 0, 446, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 431, 0, 0,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	296, 0, 0, 0, 0, 0, 95, 0, 0, 95,
	95, 95, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1172, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 1180, 1181,
	0, 1392, 0, 30, 1187, 0, 0, 1190, 1191, 0,
	0, 0, 0, 0, 0, 1197, 0, 0, 0, 1199,
	0, 0, 1202, 1203, 1204, 1205, 1206, 0, 0, 0,
	0, 924, 780, 0, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 446,
	0, 0, 1250, 1251, 0, 0, 446, 446, 446, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	95, 987, 0, 0, 0, 446, 0, 0, 0, 0,
	446, 446, 446, 0, 446, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 95, 0, 95, 0, 0, 0, 0,
	95, 1483, 95, 95, 95, 296, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 1509, 1510, 0, 377, 0, 0, 0,
	0, 0, 954, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 1346, 1347, 984, 0,
	0, 0, 0, 0, 0, 0, 95, 95, 0, 0,
	0, 627, 0, 0, 0, 988, 989, 0, 0, 0,
	294, 0, 95, 325, 0, 0, 0, 0, 0, 0,
	294, 0, 0, 296, 1010, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 767, 0, 0, 446, 0, 0,
	0, 0, 0, 432, 432, 0, 0, 1392, 0, 30,
	0, 95, 294, 0, 294, 0, 446, 0, 0, 446,
	0, 662, 0, 0, 1409, 0, 0, 0, 0, 0,
	446, 575, 0, 0, 0, 0, 0, 0, 1166, 1167,
	1168, 1581, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
	0, 0, 0, 1392, 0, 0, 719, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 0, 446,
	0, 0, 0, 751, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 1478, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1651, 0,
	0, 0, 0, 0, 1496, 1497, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 1345,
	1559, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 1365, 1366, 0, 1367, 1368, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1375, 1376,
	1586, 1587, 1588, 1589, 0, 1593, 906, 1594, 1595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1600, 0, 1601, 1602, 0, 915, 916, 917, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
	1307, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 1621, 294, 787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 1630, 0, 0,
	968, 969, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 446, 0, 0, 1665,
	1666, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 446, 0, 0, 984, 0, 0, 1394,
	1396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	0, 0, 446, 0, 446, 0, 1426, 0, 0, 0,
	0, 0, 0, 294, 294, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 294, 0, 0, 294, 0,
	0, 0, 883, 1120, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 0, 0, 1459, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1538, 1539, 1540,
	1541, 1542, 0, 0, 0, 1545, 1546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 432, 883, 0, 0, 0, 432, 432, 0,
	0, 432, 432, 432, 0, 0, 0, 985, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1196, 0, 0, 0, 0, 0, 432, 432, 432, 432,
	432, 0, 0, 0, 0, 0, 0, 446, 0, 0,
	1211, 1212, 754, 0, 446, 0, 0, 0, 0, 0,
	294, 0, 0, 0, 0, 0, 883, 294, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 294, 1047, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1553, 1554, 0, 1555,
	0, 0, 0, 0, 1518, 0, 1518, 1518, 1518, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1657,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 294, 294, 294, 294, 1610,
	0, 294, 294, 0, 0, 294, 0, 0, 0, 0,
	446, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 984, 0, 1626, 0, 0, 1156,
	1157, 294, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 1372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1383,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 432, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 294, 294, 294, 294, 294, 0, 0,
	0, 0, 0, 0, 0, 1249, 0, 0, 0, 294,
	0, 0, 0, 1047, 0, 0, 0, 0, 294, 294,
	0, 0, 294, 1265, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1505, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1547,
	341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 557, 545, 0, 0, 501, 560,
	474, 491, 568, 492, 495, 532, 459, 514, 188, 489,
	0, 478, 454, 485, 455, 476, 503, 129, 507, 473,
	547, 517, 559, 158, 0, 479, 534, 228, 122, 165,
	566, 161, 523, 0, 236, 176, 0, 0, 0, 505,
	549, 512, 542, 500, 533, 464, 522, 561, 490, 530,
	562, 0, 0, 985, 96, 97, 98, 0, 1073, 1074,
	0, 0, 0, 0, 0, 118, 294, 527, 556, 487,
	529, 531, 570, 453, 524, 0, 457, 460, 567, 552,
	482, 483, 1276, 0, 0, 0, 0, 0, 0, 504,
	513, 539, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 0, 521, 0, 0, 0, 461, 458, 0,
	0, 0, 0, 502, 0, 0, 0, 463, 0, 481,
	540, 0, 451, 138, 544, 551, 499, 297, 555, 497,
	496, 558, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 548, 477, 486, 123,
	484, 217, 195, 257, 520, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 456, 0, 237,
	260, 279, 116, 472, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 468, 471, 466, 467, 515, 516, 563, 564, 565,
	541, 462, 0, 469, 470, 0, 546, 553, 554, 519,
	99, 108, 160, 276, 210, 134, 261, 452, 465, 127,
	475, 0, 0, 488, 493, 494, 506, 508, 509, 510,
	511, 518, 525, 526, 528, 535, 536, 537, 538, 543,
	550, 569, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 557, 545, 0, 0, 501, 560, 474, 491, 568,
	492, 495, 532, 459, 514, 188, 489, 0, 478, 454,
	485, 455, 476, 503, 129, 507, 473, 547, 517, 559,
	158, 0, 479, 534, 228, 122, 165, 566, 161, 523,
	0, 236, 176, 0, 0, 0, 505, 549, 512, 542,
	500, 533, 464, 522, 561, 490, 530, 562, 0, 0,
	0, 96, 97, 98, 0, 1073, 1074, 0, 0, 0,
	0, 0, 118, 0, 527, 556, 487, 529, 531, 570,
	453, 524, 0, 457, 460, 567, 552, 482, 483, 0,
	0, 0, 0, 0, 0, 0, 504, 513, 539, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 0,
	521, 0, 0, 0, 461, 458, 0, 0, 0, 0,
	502, 0, 0, 0, 463, 0, 481, 540, 0, 451,
	138, 544, 551, 499, 297, 555, 497, 496, 558, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 548, 477, 486, 123, 484, 217, 195,
	257, 520, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 456, 0, 237, 260, 279, 116,
	472, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 468, 471,
	466, 467, 515, 516, 563, 564, 565, 541, 462, 0,
	469, 470, 0, 546, 553, 554, 519, 99, 108, 160,
	276, 210, 134, 261, 452, 465, 127, 475, 0, 0,
	488, 493, 494, 506, 508, 509, 510, 511, 518, 525,
	526, 528, 535, 536, 537, 538, 543, 550, 569, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 557, 545,
	0, 0, 501, 560, 474, 491, 568, 492, 495, 532,
	459, 514, 188, 489, 0, 478, 454, 485, 455, 476,
	503, 129, 507, 473, 547, 517, 559, 158, 0, 479,
	534, 228, 122, 165, 566, 161, 523, 0, 236, 176,
	0, 0, 0, 505, 549, 512, 542, 500, 533, 464,
	522, 561, 490, 530, 562, 61, 0, 0, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 527, 556, 487, 529, 531, 570, 453, 524, 0,
	457, 460, 567, 552, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 504, 513, 539, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 0, 521, 0, 0,
	0, 461, 458, 0, 0, 0, 0, 502, 0, 0,
	0, 463, 0, 481, 540, 0, 451, 138, 544, 551,
	499, 297, 555, 497, 496, 558, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	548, 477, 486, 123, 484, 217, 195, 257, 520, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 456, 0, 237, 260, 279, 116, 472, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 468, 471, 466, 467, 515,
	516, 563, 564, 565, 541, 462, 0, 469, 470, 0,
	546, 553, 554, 519, 99, 108, 160, 276, 210, 134,
	261, 452, 465, 127, 475, 0, 0, 488, 493, 494,
	506, 508, 509, 510, 511, 518, 525, 526, 528, 535,
	536, 537, 538, 543, 550, 569, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 557, 545, 0, 0, 501,
	560, 474, 491, 568, 492, 495, 532, 459, 514, 188,
	489, 0, 478, 454, 485, 455, 476, 503, 129, 507,
	473, 547, 517, 559, 158, 0, 479, 534, 228, 122,
	165, 566, 161, 523, 0, 236, 176, 0, 0, 0,
	505, 549, 512, 542, 500, 533, 464, 522, 561, 490,
	530, 562, 0, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 527, 556,
	487, 529, 531, 570, 453, 524, 0, 457, 460, 567,
	552, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	504, 513, 539, 498, 0, 0, 0, 0, 0, 0,
	1384, 0, 480, 0, 521, 0, 0, 0, 461, 458,
	0, 0, 0, 0, 502, 0, 0, 0, 463, 0,
	481, 540, 0, 451, 138, 544, 551, 499, 297, 555,
	497, 496, 558, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 548, 477, 486,
	123, 484, 217, 195, 257, 520, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 456, 0,
	237, 260, 279, 116, 472, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 468, 471, 466, 467, 515, 516, 563, 564,
	565, 541, 462, 0, 469, 470, 0, 546, 553, 554,
	519, 99, 108, 160, 276, 210, 134, 261, 452, 465,
	127, 475, 0, 0, 488, 493, 494, 506, 508, 509,
	510, 511, 518, 525, 526, 528, 535, 536, 537, 538,
	543, 550, 569, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 557, 545, 0, 0, 501, 560, 474, 491,
	568, 492, 495, 532, 459, 514, 188, 489, 0, 478,
	454, 485, 455, 476, 503, 129, 507, 473, 547, 517,
	559, 158, 0, 479, 534, 228, 122, 165, 566, 161,
	523, 0, 236, 176, 0, 0, 0, 505, 549, 512,
	542, 500, 533, 464, 522, 561, 490, 530, 562, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 527, 556, 487, 529, 531,
	570, 453, 524, 0, 457, 460, 567, 552, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 504, 513, 539,
	498, 0, 0, 0, 0, 0, 0, 1266, 0, 480,
	0, 521, 0, 0, 0, 461, 458, 0, 0, 0,
	0, 502, 0, 0, 0, 463, 0, 481, 540, 0,
	451, 138, 544, 551, 499, 297, 555, 497, 496, 558,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 548, 477, 486, 123, 484, 217,
	195, 257, 520, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 456, 0, 237, 260, 279,
	116, 472, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 468,
	471, 466, 467, 515, 516, 563, 564, 565, 541, 462,
	0, 469, 470, 0, 546, 553, 554, 519, 99, 108,
	160, 276, 210, 134, 261, 452, 465, 127, 475, 0,
	0, 488, 493, 494, 506, 508, 509, 510, 511, 518,
	525, 526, 528, 535, 536, 537, 538, 543, 550, 569,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 557,
	545, 0, 0, 501, 560, 474, 491, 568, 492, 495,
	532, 459, 514, 188, 489, 0, 478, 454, 485, 455,
	476, 503, 129, 507, 473, 547, 517, 559, 158, 0,
	479, 534, 228, 122, 165, 566, 161, 523, 0, 236,
	176, 0, 0, 0, 505, 549, 512, 542, 500, 533,
	464, 522, 561, 490, 530, 562, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 527, 556, 487, 529, 531, 570, 453, 524,
	0, 457, 460, 567, 552, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 504, 513, 539, 498, 0, 0,
	0, 0, 0, 0, 1019, 0, 480, 0, 521, 0,
	0, 0, 461, 458, 0, 0, 0, 0, 502, 0,
	0, 0, 463, 0, 481, 540, 0, 451, 138, 544,
	551, 499, 297, 555, 497, 496, 558, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 548, 477, 486, 123, 484, 217, 195, 257, 520,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 456, 0, 237, 260, 279, 116, 472, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 468, 471, 466, 467,
	515, 516, 563, 564, 565, 541, 462, 0, 469, 470,
	0, 546, 553, 554, 519, 99, 108, 160, 276, 210,
	134, 261, 452, 465, 127, 475, 0, 0, 488, 493,
	494, 506, 508, 509, 510, 511, 518, 525, 526, 528,
	535, 536, 537, 538, 543, 550, 569, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 557, 545, 0, 0,
	501, 560, 474, 491, 568, 492, 495, 532, 459, 514,
	188, 489, 0, 478, 454, 485, 455, 476, 503, 129,
	507, 473, 547, 517, 559, 158, 0, 479, 534, 228,
	122, 165, 566, 161, 523, 0, 236, 176, 0, 0,
	0, 505, 549, 512, 542, 500, 533, 464, 522, 561,
	490, 530, 562, 0, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 527,
	556, 487, 529, 531, 570, 453, 524, 0, 457, 460,
	567, 552, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 504, 513, 539, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 480, 0, 521, 0, 0, 0, 461,
	458, 0, 0, 0, 0, 502, 0, 0, 0, 463,
	0, 481, 540, 0, 451, 138, 544, 551, 499, 297,
	555, 497, 496, 558, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 548, 477,
	486, 123, 484, 217, 195, 257, 520, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 456,
	0, 237, 260, 279, 116, 472, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 468, 471, 466, 467, 515, 516, 563,
	564, 565, 541, 462, 0, 469, 470, 0, 546, 553,
	554, 519, 99, 108, 160, 276, 210, 134, 261, 452,
	465, 127, 475, 0, 0, 488, 493, 494, 506, 508,
	509, 510, 511, 518, 525, 526, 528, 535, 536, 537,
	538, 543, 550, 569, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 557, 545, 0, 0, 501, 560, 474,
	491, 568, 492, 495, 532, 459, 514, 188, 489, 0,
	478, 454, 485, 455, 476, 503, 129, 507, 473, 547,
	517, 559, 158, 0, 479, 534, 228, 122, 165, 566,
	161, 523, 0, 236, 176, 0, 0, 0, 505, 549,
	512, 542, 500, 533, 464, 522, 561, 490, 530, 562,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 527, 556, 487, 529,
	531, 570, 453, 524, 0, 457, 460, 567, 552, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 504, 513,
	539, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	480, 0, 521, 0, 0, 0, 461, 458, 0, 0,
	0, 0, 502, 0, 0, 0, 463, 0, 481, 540,
	0, 451, 138, 544, 551, 499, 297, 555, 497, 496,
	558, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 548, 477, 486, 123, 484,
	217, 195, 257, 520, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 449, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 456, 0, 237, 260,
	279, 116, 472, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 450, 448, 443,
	442, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	468, 471, 466, 467, 515, 516, 563, 564, 565, 541,
	462, 0, 469, 470, 0, 546, 553, 554, 519, 99,
	108, 160, 276, 210, 134, 261, 452, 465, 127, 475,
	0, 0, 488, 493, 494, 506, 508, 509, 510, 511,
	518, 525, 526, 528, 535, 536, 537, 538, 543, 550,
	569, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	557, 545, 0, 0, 501, 560, 474, 491, 568, 492,
	495, 532, 459, 514, 188, 489, 0, 478, 454, 485,
	455, 476, 503, 129, 507, 473, 547, 517, 559, 158,
	0, 479, 534, 228, 122, 165, 566, 161, 523, 0,
	236, 176, 0, 0, 0, 505, 549, 512, 542, 500,
	533, 464, 522, 561, 490, 530, 562, 0, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 527, 556, 487, 529, 531, 570, 453,
	524, 0, 457, 460, 567, 552, 482, 483, 0, 0,
	0, 0, 0, 0, 0, 504, 513, 539, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 0, 521,
	0, 0, 0, 461, 458, 0, 0, 0, 0, 502,
	0, 0, 0, 463, 0, 481, 540, 0, 451, 138,
	544, 551, 499, 297, 555, 497, 496, 558, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 548, 477, 486, 123, 484, 217, 195, 257,
	520, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 789, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 449, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 456, 0, 237, 260, 279, 116, 472,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 450, 448, 443, 442, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 468, 471, 466,
	467, 515, 516, 563, 564, 565, 541, 462, 0, 469,
	470, 0, 546, 553, 554, 519, 99, 108, 160, 276,
	210, 134, 261, 452, 465, 127, 475, 0, 0, 488,
	493, 494, 506, 508, 509, 510, 511, 518, 525, 526,
	528, 535, 536, 537, 538, 543, 550, 569, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 557, 545, 0,
	0, 501, 560, 474, 491, 568, 492, 495, 532, 459,
	514, 188, 489, 0, 478, 454, 485, 455, 476, 503,
	129, 507, 473, 547, 517, 559, 158, 0, 479, 534,
	228, 122, 165, 566, 161, 523, 0, 236, 176, 0,
	0, 0, 505, 549, 512, 542, 500, 533, 464, 522,
	561, 490, 530, 562, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	527, 556, 487, 529, 531, 570, 453, 524, 0, 457,
	460, 567, 552, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 504, 513, 539, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 480, 0, 521, 0, 0, 0,
	461, 458, 0, 0, 0, 0, 502, 0, 0, 0,
	463, 0, 481, 540, 0, 451, 138, 544, 551, 499,
	297, 555, 497, 496, 558, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 548,
	477, 486, 123, 484, 217, 195, 257, 520, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 440, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 449, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	456, 0, 237, 260, 279, 116, 472, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 450, 448, 443, 442, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 468, 471, 466, 467, 515, 516,
	563, 564, 565, 541, 462, 0, 469, 470, 0, 546,
	553, 554, 519, 99, 108, 160, 276, 210, 134, 261,
	452, 465, 127, 475, 0, 0, 488, 493, 494, 506,
	508, 509, 510, 511, 518, 525, 526, 528, 535, 536,
	537, 538, 543, 550, 569, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 956, 0, 346,
	0, 0, 0, 129, 0, 345, 0, 0, 0, 158,
	0, 957, 0, 228, 122, 165, 389, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	96, 97, 98, 367, 366, 369, 370, 371, 372, 0,
	0, 118, 368, 373, 374, 375, 0, 0, 0, 0,
	343, 360, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 430, 0, 0, 0, 403,
	0, 359, 0, 0, 352, 353, 355, 354, 356, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	402, 0, 0, 297, 0, 0, 400, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 390, 401, 396,
	397, 394, 395, 393, 392, 391, 404, 382, 383, 384,
	385, 387, 0, 398, 399, 386, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 346, 0, 0, 0, 129, 0, 345, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 389,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 0, 0, 1064, 0,
	61, 0, 0, 96, 97, 98, 367, 366, 369, 370,
	371, 372, 0, 0, 118, 368, 373, 374, 375, 1065,
	0, 0, 0, 343, 360, 0, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 403, 0, 359, 0, 0, 352, 353, 355,
	354, 356, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 402, 0, 0, 297, 0, 0, 400,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	390, 401, 396, 397, 394, 395, 393, 392, 391, 404,
	382, 383, 384, 385, 387, 0, 398, 399, 386, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 0, 346, 0, 0, 0, 129,
	0, 345, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 389, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 380, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 418, 96, 97, 98, 367,
	366, 369, 370, 371, 372, 0, 0, 118, 368, 373,
	374, 375, 0, 0, 0, 0, 343, 360, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	358, 0, 0, 0, 0, 403, 0, 359, 0, 0,
	352, 353, 355, 354, 356, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 402, 0, 0, 297,
	0, 0, 400, 0, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 390, 401, 396, 397, 394, 395, 393,
	392, 391, 404, 382, 383, 384, 385, 387, 0, 398,
	399, 386, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 0, 346, 0,
	0, 0, 129, 0, 345, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 389, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 380, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 96,
	97, 98, 367, 366, 369, 370, 371, 372, 0, 0,
	118, 368, 373, 374, 375, 0, 0, 0, 0, 343,
	360, 0, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 358, 430, 0, 0, 0, 403, 0,
	359, 0, 0, 352, 353, 355, 354, 356, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 402,
	0, 0, 297, 0, 0, 400, 0, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 390, 401, 396, 397,
	394, 395, 393, 392, 391, 404, 382, 383, 384, 385,
	387, 0, 398, 399, 386, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 346, 0, 0, 0, 129, 0, 345, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 389, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 380,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 96, 97, 98, 367, 974, 369, 370, 371,
	372, 0, 0, 118, 368, 373, 374, 375, 0, 0,
	0, 0, 343, 360, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 358, 430, 0, 0,
	0, 403, 0, 359, 0, 0, 352, 353, 355, 354,
	356, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 402, 0, 0, 297, 0, 0, 400, 0,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 390,
	401, 396, 397, 394, 395, 393, 392, 391, 404, 382,
	383, 384, 385, 387, 0, 398, 399, 386, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 188,
	0, 0, 0, 0, 346, 0, 0, 0, 129, 0,
	345, 0, 0, 0, 158, 0, 0, 0, 228, 122,
	165, 389, 161, 0, 0, 236, 176, 0, 0, 0,
	0, 0, 380, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 96, 97, 98, 367, 971,
	369, 370, 371, 372, 0, 0, 118, 368, 373, 374,
	375, 0, 0, 0, 0, 343, 360, 0, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 357, 358,
	430, 0, 0, 0, 403, 0, 359, 0, 0, 352,
	353, 355, 354, 356, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 402, 0, 0, 297, 0,
	0, 400, 0, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 0, 0, 0,
	123, 0, 217, 195, 257, 0, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 0, 0,
	237, 260, 279, 116, 0, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 390, 401, 396, 397, 394, 395, 393, 392,
	391, 404, 382, 383, 384, 385, 387, 0, 398, 399,
	386, 99, 108, 160, 276, 210, 134, 261, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	346, 0, 0, 0, 129, 0, 345, 0, 0, 0,
	158, 0, 0, 0, 228, 122, 165, 389, 161, 0,
	0, 236, 176, 0, 0, 0, 0, 0, 380, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 96, 97, 98, 367, 366, 369, 370, 371, 372,
	0, 0, 118, 368, 373, 374, 375, 0, 0, 0,
	0, 343, 360, 0, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	403, 0, 359, 0, 0, 352, 353, 355, 354, 356,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 402, 0, 0, 297, 0, 0, 400, 0, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 0, 0, 0, 123, 0, 217, 195,
	257, 0, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 0, 0, 237, 260, 279, 116,
	0, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 390, 401,
	396, 397, 394, 395, 393, 392, 391, 404, 382, 383,
	384, 385, 387, 0, 398, 399, 386, 99, 108, 160,
	276, 210, 134, 261, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 188, 0,
	0, 0, 0, 346, 0, 0, 0, 129, 0, 345,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	389, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 380, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 97, 98, 367, 366, 369,
	370, 371, 372, 0, 0, 118, 368, 373, 374, 375,
	0, 0, 0, 0, 343, 360, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 358, 0,
	0, 0, 0, 403, 0, 359, 0, 0, 352, 353,
	355, 354, 356, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 402, 0, 0, 297, 0, 0,
	400, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 0, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 390, 401, 396, 397, 394, 395, 393, 392, 391,
	404, 382, 383, 384, 385, 387, 0, 398, 399, 386,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 389, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 380, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 96, 97, 98,
	367, 366, 369, 370, 371, 372, 0, 0, 118, 368,
	373, 374, 375, 0, 0, 0, 0, 0, 360, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 403, 0, 359, 0,
	0, 352, 353, 355, 354, 356, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 402, 0, 0,
	297, 0, 0, 400, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 1658, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 390, 401, 396, 397, 394, 395,
	393, 392, 391, 404, 382, 383, 384, 385, 387, 0,
	398, 399, 386, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 389, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 418,
	96, 97, 98, 367, 366, 369, 370, 371, 372, 0,
	0, 118, 368, 373, 374, 375, 0, 0, 0, 0,
	0, 360, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 0, 0, 0, 0, 403,
	0, 359, 0, 0, 352, 353, 355, 354, 356, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	402, 0, 0, 297, 0, 0, 400, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 390, 401, 396,
	397, 394, 395, 393, 392, 391, 404, 382, 383, 384,
	385, 387, 0, 398, 399, 386, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 389,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 96, 97, 98, 367, 366, 369, 370,
	371, 372, 0, 0, 118, 368, 373, 374, 375, 0,
	0, 0, 0, 0, 360, 0, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 403, 0, 359, 0, 0, 352, 353, 355,
	354, 356, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 402, 0, 0, 297, 0, 0, 400,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	390, 401, 396, 397, 394, 395, 393, 392, 391, 404,
	382, 383, 384, 385, 387, 0, 398, 399, 386, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 0, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 669, 679, 680, 672,
	673, 674, 675, 676, 677, 678, 671, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 297,
	0, 0, 0, 0, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 766, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 0, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 768, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 659, 660, 658, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 297, 0, 0, 0, 0, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 0, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 90, 91, 0, 87, 0, 0, 0, 92,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 1088,
	0, 0, 0, 0, 158, 0, 0, 0, 228, 122,
	165, 0, 161, 0, 0, 236, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 1087, 297, 0,
	0, 0, 1083, 1081, 0, 1082, 142, 157, 578, 154,
	100, 110, 1079, 1085, 185, 215, 219, 0, 0, 0,
	123, 0, 217, 195, 257, 0, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 0, 0,
	237, 260, 279, 116, 0, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 160, 276, 210, 134, 261, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 188, 0, 0, 0, 1046, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 228, 122, 165, 0, 161, 0, 0, 236, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 1048, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 297, 0, 0, 0, 0, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	0, 0, 0, 123, 0, 217, 195, 257, 0, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 0, 0, 237, 260, 279, 116, 0, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 160, 276, 210, 134,
	261, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 31, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	0, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 297, 0, 0,
	0, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 0, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 0, 1046, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 0, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 1048, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	297, 0, 0, 0, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 1044, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 0, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 0, 1011, 0, 0, 1012, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 297, 0, 0, 0, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 800, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 0,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 799, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 297, 0, 0, 0,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 0, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 297,
	0, 0, 0, 0, 207, 0, 240, 142, 157, 578,
	154, 100, 110, 576, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 0, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 418, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 297, 0, 0, 0, 0, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 0, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 297, 0, 0, 0, 0,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 228, 122,
	165, 0, 161, 0, 0, 236, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 1048,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 297, 0,
	0, 0, 0, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 0, 0, 0,
	123, 0, 217, 195, 257, 0, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 0, 0,
	237, 260, 279, 116, 0, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 160, 276, 210, 134, 261, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 228, 122, 165, 0, 161, 0, 0, 236, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 768, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 297, 0, 0, 0, 0, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	0, 0, 0, 123, 0, 217, 195, 257, 0, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 0, 0, 237, 260, 279, 116, 0, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 160, 276, 210, 134,
	261, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 782, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 228, 122, 165, 0, 161, 0, 0, 236, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 297, 0, 0, 0, 0, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	0, 0, 0, 123, 0, 217, 195, 257, 0, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 0, 0, 237, 260, 279, 116, 0, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 160, 276, 210, 134,
	261, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 188, 0, 0, 0, 0,
	0, 0, 0, 772, 129, 0, 0, 0, 0, 0,
	158, 0, 0, 0, 228, 122, 165, 0, 161, 0,
	0, 236, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 297, 0, 0, 0, 0, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 0, 0, 0, 123, 0, 217, 195,
	257, 0, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 0, 0, 237, 260, 279, 116,
	0, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 160,
	276, 210, 134, 261, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	0, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 648, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 297, 0, 0,
	0, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 0, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 0, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 138, 0, 0, 0,
	297, 0, 0, 0, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 333, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 0, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 292, 0, 297, 0, 0, 0, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 0,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 297, 0, 0, 0,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
}
var yyPact = [...]int{

	193, -1000, -279, 1061, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1009,
	844, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 343, 12217,
	6, 143, 28, 17885, 142, 1632, 18238, -1000, 18, -1000,
	7, 18238, 11, 17532, -1000, -1000, -54, -63, -1000, 10099,
	921, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 782,
	997, 1002, 1005, 629, 951, -1000, 8674, 8674, 114, 114,
	114, 7262, -1000, -1000, 14701, 18238, 135, 18238, -138, 112,
	112, 112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	137, 18238, 633, 633, 270, 452, 18238, 106, 633, 106,
	106, 106, 18238, -1000, 203, -1000, -1000, -1000, 18238, 633,
	937, 332, 110, 239, 239, 239, -1000, 260, -1000, 4693,
	37, 33, -61, 1025, 30, -5, -1000, 332, 4693, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 119, -1000, -1000,
	18238, 17179, 148, 306, -1000, -1000, -1000, -1000, -1000, -1000,
	573, 373, -1000, 10099, 1608, 763, 763, -1000, -1000, 159,
	-1000, -1000, 11158, 11158, 11158, 11158, 11158, 11158, 11158, 11158,
	11158, 11158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 763, 195, -1000, 9746,
	763, 763, 763, 763, 763, 763, 763, 763, 10099, 763,
	763, 763, 763, 763, 763, 763, 763, 763, 763, 763,
	763, 763, 763, 763, 763, -1000, -1000, 1047, 1009, -1000,
	844, -1000, -1000, -1000, 977, 10099, 10099, 1009, -1000, 901,
	8674, -1000, -1000, 941, -1000, -1000, -1000, -1000, 359, 1043,
	-1000, 11864, 190, 1042, 16826, -1000, 15407, 16473, 761, 6895,
	-84, -1000, -1000, -1000, 276, 14348, -1000, -1000, -1000, 936,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 750, 18238, -1000, -1000, 339, 633, -1000, 786, -1000,
	633, 4693, 124, 633, 319, 633, 18238, 18238, 4693, 4693,
	4693, 42, 73, 72, 18238, 449, 760, 118, 18238, 990,
	855, 18238, 633, 633, -1000, 6161, -1000, 4693, 332, -1000,
	448, 10099, 4693, 4693, 4693, 18238, 4693, 4693, -1000, 443,
	-1000, -1000, 349, -1000, -1000, -1000, -1000, -1000, -1000, 4693,
	4693, 327, 349, 327, -1000, -1000, -1000, -1000, 10099, 239,
	-1000, 854, -1000, -1000, 10, -1000, -1000, -1000, -1000, -1000,
	1061, -1000, -1000, -1000, -130, -1000, -1000, 10099, 10099, 10099,
	10099, 565, 244, 11158, 397, 364, 11158, 11158, 11158, 11158,
	11158, 11158, 11158, 11158, 11158, 11158, 11158, 11158, 11158, 11158,
	11158, 582, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	633, -1000, 1038, 645, 645, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 11511, 7615, 6161, 629, 738, 1009,
	8674, 8674, 10099, 10099, 9380, 9027, 8674, 979, 312, 373,
	18238, -1000, -1000, 10805, -1000, -1000, -1000, -1000, -1000, 481,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18238, 18238, 8674,
	8674, 8674, 8674, 8674, 926, 1002, 629, 941, 986, 1055,
	226, 556, 757, -1000, 485, 1002, 13995, 830, -1000, 941,
	-1000, -1000, -1000, 18238, -1000, -1000, 16113, -1000, -1000, 5794,
	18238, 55, 18238, -1000, 578, 929, -1000, -1000, -1000, 994,
	13289, 13642, 18238, 788, 709, -1000, -1000, 189, 6528, -84,
	-1000, 6528, 638, -1000, -120, -114, 7968, 198, -1000, -1000,
	-1000, -1000, 4326, 12570, 519, 375, -48, -1000, -1000, -1000,
	775, -1000, 775, 775, 775, 775, -17, -17, -17, -17,
	-1000, -1000, -1000, -1000, -1000, 832, 804, -1000, 775, 775,
	775, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 803,
	803, 803, 783, 783, 81, 10099, 835, -1000, 18238, 4693,
	982, 4693, -1000, 130, -1000, -1000, -1000, 18238, 18238, 18238,
	18238, 18238, 162, -1000, 18238, 18238, 754, -1000, 18238, 4693,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 373, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18238, -1000, -1000, -1000,
	-1000, 332, 18238, 18238, 18238, 332, 373, -1000, 18238, 18238,
	-1000, -1000, -1000, -1000, -1000, 373, 244, 496, 307, -1000,
	-1000, 492, -1000, -1000, 2003, -1000, -1000, -1000, -1000, 397,
	11158, 11158, 11158, 275, 2003, 1964, 1032, 554, 199, 368,
	368, 219, 219, 219, 219, 219, 514, 514, -1000, -1000,
	-1000, 481, -1000, -1000, -1000, 481, 8674, 8674, 699, 763,
	187, -1000, 782, -1000, -1000, 1002, 733, 733, 626, 612,
	299, 1034, 733, 286, 1028, 733, 733, 8674, -1000, -1000,
	333, -1000, 10099, 481, -1000, 184, -1000, 777, 670, 662,
	733, 481, 481, 733, 733, 439, 977, -1000, -1000, 928,
	-1000, 896, 10099, 10099, 10099, -1000, -1000, -1000, 977, 1012,
	-1000, 915, 909, 1024, 8674, 15407, 941, -1000, -1000, -1000,
	180, 1024, 749, 763, -1000, 18238, 15407, 15407, 15407, 15407,
	15407, -1000, 884, 872, -1000, 878, 866, 879, 18238, -1000,
	735, 629, 13289, 178, 763, -1000, 15760, -1000, -1000, 55,
	755, 15407, 18238, -1000, -1000, 15407, 18238, 5427, -1000, 638,
	-84, -88, -1000, -1000, -1000, -1000, 373, -1000, 619, 627,
	3959, -1000, -1000, -1000, -1000, 86, -1000, -1000, 793, 633,
	-1000, 978, 241, 210, 633, 976, -1000, -1000, -1000, -1000,
	940, -1000, 340, -50, -1000, -1000, 399, -17, -17, -1000,
	-1000, 198, 935, 198, 198, 198, 435, 435, -1000, -1000,
	-1000, -1000, 398, -1000, -1000, -1000, 392, -1000, -1000, 786,
	510, 852, 18238, 4693, -1000, -1000, -1000, -1000, 608, 608,
	284, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 52, 751, -1000, -1000, -1000, -1000, 16, 41,
	117, -1000, 4693, -1000, 327, -1000, -1000, -1000, 327, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 275, 2003, 1894, -1000,
	11158, 11158, -1000, -1000, 733, 733, 8674, 6161, 1009, 977,
	-1000, -1000, 246, 582, 246, 11158, 11158, -1000, 11158, 11158,
	-1000, -156, 794, 302, -1000, 10099, 432, -1000, 6161, -1000,
	11158, 11158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 924,
	894, 373, 373, -1000, -1000, 18238, -1000, -1000, -1000, -1000,
	1022, 10099, -1000, 618, -1000, 5060, 1002, 851, 18238, 763,
	1061, 13289, 18238, 607, -1000, 261, 929, 792, 848, 778,
	-1000, -1000, -1000, -1000, 869, -1000, 868, -1000, -1000, -1000,
	-1000, -1000, 629, -1000, 131, 129, 128, 18238, -1000, 1024,
	15407, 594, -1000, 594, -1000, 179, -1000, -1000, -1000, -100,
	-121, -1000, -1000, -1000, 4326, -1000, 4326, -1000, 18238, 79,
	-1000, 633, 633, -1000, -1000, -1000, 785, 847, 11158, -1000,
	-1000, -1000, 512, 198, 198, -1000, 301, -1000, -1000, -1000,
	731, -1000, 713, 613, 705, 14, 18238, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18238, -1000, -1000, -1000,
	-1000, -1000, 18238, -164, 633, 18238, 18238, 18238, 18238, -1000,
	332, 332, -1000, 11158, 2003, 2003, -1000, -1000, 481, -1000,
	1002, -1000, 481, 775, 775, -1000, 775, 783, -1000, 775,
	0, 775, -1, 481, 481, 1877, 1841, 1738, 1574, 763,
	-145, -1000, 373, 10099, -1000, 1709, 1180, -1000, 427, -1000,
	-1000, 1011, 1004, 373, -1000, -1000, -1000, 980, 681, 542,
	-1000, -1000, 8321, 702, 177, 695, -1000, 1009, 18238, 10099,
	-1000, -1000, 10099, 781, -1000, 10099, -1000, -1000, -1000, 1009,
	763, 763, 763, 695, 1009, 594, -1000, -1000, 225, -1000,
	-1000, -1000, 3959, -1000, 684, -1000, 775, -1000, 976, -1000,
	-1000, 18238, -44, 1052, 2003, -1000, -1000, -1000, -1000, -1000,
	-17, 415, -17, 391, -1000, 378, -1000, -1000, -219, 4693,
	-1000, -1000, -1000, -1000, 983, -1000, 6161, -1000, -1000, 771,
	795, -1000, -1000, -1000, -1000, 2003, -1000, 977, -1000, -1000,
	120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11158,
	11158, 11158, 11158, 11158, 1002, 406, 373, 11158, 11158, -1000,
	-1000, 10099, 10099, 975, -1000, 763, -1000, 743, 18238, 18238,
	-1000, 18238, 1002, -1000, 373, 373, 18238, 373, 15054, 18238,
	18238, 12923, 1002, -1000, 191, 18238, -1000, 673, -1000, 221,
	-1000, -117, 198, -1000, 198, 502, 483, -1000, -1000, 763,
	583, -1000, 256, 18238, 18238, -1000, -1000, -1000, 777, 777,
	777, 777, 4, 481, -1000, 777, 777, 373, 573, 1051,
	-1000, 763, 1061, 176, -1000, -1000, -1000, 668, 664, -1000,
	664, 664, 178, -1000, 191, -1000, 633, 248, 405, -1000,
	67, 18238, 334, 947, -1000, 943, -1000, -1000, -1000, -1000,
	-1000, 51, 6161, 4326, 590, -1000, -1000, -1000, -1000, -1000,
	481, 80, -181, -1000, -1000, -1000, 18238, 542, 18238, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 372, -1000, -1000, 18238,
	-1000, -1000, 403, -1000, -1000, 548, -1000, 18238, -1000, -1000,
	751, -1000, 889, -162, -184, 515, -1000, -1000, 764, -1000,
	-1000, 51, 904, -164, -1000, 808, -1000, 18238, -1000, 48,
	-1000, -178, 460, 46, -182, 842, 763, -185, 838, -1000,
	1039, 10452, -1000, -1000, 1041, 192, 192, 777, 481, -1000,
	-1000, -1000, 85, 409, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1352, 1351, 59, 70, 71, 1350, 1348, 1346, 1343,
	98, 96, 95, 1341, 1340, 1334, 1331, 1329, 1328, 1326,
	1325, 1324, 1320, 1318, 1317, 1309, 1301, 1299, 1296, 1274,
	1272, 1270, 1269, 1268, 93, 1267, 1266, 1265, 1264, 83,
	1263, 1262, 1260, 1259, 1255, 41, 231, 37, 58, 1254,
	61, 2177, 1253, 51, 78, 69, 1252, 38, 1251, 1250,
	84, 1249, 1247, 63, 1246, 1245, 220, 1244, 55, 1241,
	12, 42, 1240, 1239, 1237, 1234, 92, 1607, 1231, 1230,
	14, 1228, 1227, 105, 1224, 66, 15, 11, 27, 17,
	1223, 64, 1222, 19, 1221, 67, 1219, 1218, 1217, 1212,
	32, 1210, 65, 1207, 29, 1203, 26, 1201, 10, 56,
	22, 30, 7, 1200, 1199, 18, 74, 49, 68, 1197,
	1196, 1195, 520, 1194, 1193, 43, 1191, 1190, 1187, 24,
	90, 124, 506, 1186, 1185, 1182, 1181, 1177, 1176, 36,
	873, 1727, 271, 79, 1174, 1173, 1171, 2426, 39, 57,
	16, 1170, 1169, 1168, 21, 89, 31, 427, 1167, 35,
	1165, 1164, 1163, 1162, 1161, 1159, 1158, 123, 1157, 1154,
	1152, 81, 28, 72, 20, 1151, 1148, 1135, 1131, 48,
	73, 1128, 1127, 50, 53, 1122, 91, 33, 1121, 1120,
	1119, 1116, 1115, 25, 4, 1114, 13, 1113, 9, 1111,
	34, 23, 1109, 3, 1093, 8, 1087, 5, 0, 1086,
	6, 45, 1, 1083, 2, 1077, 1076, 1072, 1011, 1271,
	76, 1068, 97,
}
var yyR1 = [...]int{

	0, 216, 217, 217, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 208, 208, 208, 21, 33, 3, 3, 3, 3,
	2, 2, 8, 9, 4, 5, 5, 10, 10, 38,
	38, 11, 12, 12, 12, 12, 220, 220, 60, 60,
	61, 61, 109, 109, 13, 14, 14, 118, 118, 117,
	117, 117, 119, 119, 119, 119, 157, 157, 15, 15,
	15, 15, 15, 15, 15, 210, 210, 209, 207, 207,
	206, 206, 205, 22, 189, 191, 191, 190, 190, 190,
	190, 190, 190, 180, 160, 160, 160, 160, 163, 163,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 162,
	162, 162, 162, 162, 164, 164, 164, 164, 164, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 166, 166, 166, 166, 166, 166,
	166, 166, 179, 179, 167, 167, 173, 173, 174, 174,
	174, 176, 176, 177, 177, 133, 133, 133, 169, 169,
	170, 170, 175, 175, 171, 171, 171, 172, 172, 172,
	178, 178, 178, 178, 178, 168, 168, 181, 181, 199,
	199, 198, 198, 198, 188, 188, 195, 195, 195, 195,
	195, 185, 185, 185, 186, 186, 184, 184, 187, 187,
	197, 197, 196, 182, 182, 183, 183, 200, 200, 200,
	200, 200, 201, 213, 214, 212, 212, 212, 212, 212,
	134, 134, 134, 192, 192, 192, 193, 193, 193, 194,
	194, 194, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 204, 202, 202, 203, 203, 17, 23,
	23, 18, 18, 18, 18, 18, 19, 19, 24, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 126,
	126, 215, 215, 128, 128, 124, 124, 127, 127, 125,
	125, 125, 129, 129, 129, 130, 130, 158, 158, 158,
	26, 26, 28, 28, 29, 30, 30, 152, 152, 153,
	153, 31, 32, 37, 37, 37, 37, 37, 37, 40,
	40, 40, 7, 7, 7, 7, 36, 36, 36, 6,
	6, 27, 27, 27, 27, 20, 221, 34, 35, 35,
	39, 39, 39, 41, 41, 41, 44, 44, 44, 47,
	47, 49, 49, 49, 49, 49, 50, 50, 50, 50,
	50, 50, 46, 46, 48, 48, 48, 48, 144, 144,
	144, 143, 143, 52, 52, 53, 53, 54, 54, 55,
	55, 55, 92, 69, 69, 108, 108, 110, 110, 56,
	56, 56, 56, 57, 57, 58, 58, 59, 59, 151,
	151, 150, 150, 150, 149, 149, 62, 62, 62, 64,
	63, 63, 63, 63, 65, 65, 67, 67, 66, 66,
	68, 70, 70, 70, 70, 70, 71, 71, 51, 51,
	51, 51, 51, 51, 51, 51, 121, 121, 73, 73,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	84, 84, 84, 84, 84, 84, 74, 74, 74, 74,
	74, 74, 74, 45, 45, 85, 85, 85, 91, 86,
	86, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 81, 81, 81, 81, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 222, 222,
	83, 82, 82, 82, 82, 82, 82, 82, 43, 43,
	43, 43, 43, 156, 156, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 96, 96,
	42, 42, 94, 94, 95, 97, 97, 93, 93, 93,
	76, 76, 76, 76, 76, 76, 76, 76, 78, 78,
	78, 98, 98, 99, 99, 100, 100, 101, 101, 102,
	103, 103, 103, 104, 104, 104, 104, 106, 106, 106,
	105, 105, 75, 75, 75, 75, 107, 107, 107, 107,
	111, 111, 87, 87, 89, 89, 88, 90, 112, 112,
	115, 113, 113, 116, 116, 116, 116, 116, 114, 114,
	114, 146, 146, 146, 120, 120, 131, 131, 132, 132,
	122, 122, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 123, 123, 123, 136, 136, 136, 137, 137,
	138, 138, 138, 145, 145, 141, 141, 142, 142, 147,
	147, 148, 148, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 218, 219, 154, 155, 155,
	155,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 6, 5, 6, 6, 7,
	4, 6, 5, 7, 8, 1, 3, 7, 8, 1,
	1, 9, 9, 8, 7, 7, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 1, 3,
	4, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 3, 1, 10, 11, 11,
	12, 1, 5, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 7, 7, 4, 5, 4,
	4, 7, 5, 5, 5, 12, 7, 5, 9, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 2, 7, 2, 3, 4, 5, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 5, 0, 1, 0,
	1, 2, 3, 0, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	3, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 5, 4, 5, 5, 0, 2, 1, 3,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 5, 6, 4,
	4, 6, 6, 6, 8, 8, 8, 8, 9, 8,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	0, 4, 2, 1, 5, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 3, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -216, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -33, -4,
	-218, 6, 7, 8, -38, 10, 11, 31, -22, 128,
	129, 131, 130, 164, 132, 157, 58, 178, 179, 181,
	182, 183, 184, -40, 162, 163, 32, 33, 134, 35,
	40, 62, 9, 271, 159, 158, 26, -217, 373, -39,
	5, -100, 16, -3, -34, -221, -34, -34, -34, -34,
	-34, -34, -189, -191, 62, 101, -138, 138, 82, 263,
	135, 136, 142, -141, -208, -140, 65, 66, 67, 281,
	150, 313, 314, 178, 192, 186, 213, 205, 282, 315,
	151, 203, 206, 250, 148, 316, 233, 240, 76, 181,
	259, 317, 39, 160, 201, 197, 318, 290, 195, 28,
	319, 242, 218, 320, 286, 244, 196, 241, 134, 321,
	153, 369, 146, 322, 219, 223, 323, 251, 324, 325,
	326, 190, 191, 327, 149, 253, 217, 147, 34, 245,
	283, 42, 168, 254, 221, 40, 328, 216, 212, 329,
	330, 331, 332, 215, 189, 211, 46, 225, 224, 226,
	249, 208, 333, 334, 335, 154, 336, 198, 19, 337,
	338, 339, 340, 341, 257, 163, 342, 166, 343, 344,
	345, 346, 347, 348, 243, 220, 222, 143, 170, 239,
	285, 349, 255, 194, 350, 155, 167, 162, 258, 156,
	351, 352, 353, 354, 355, 356, 357, 182, 38, 358,
	359, 360, 361, 177, 252, 261, 45, 230, 362, 188,
	145, 363, 179, 174, 235, 209, 169, 364, 365, 199,
	200, 214, 187, 210, 180, 370, 171, 164, 366, 260,
	231, 287, 207, 204, 175, 367, 172, 173, 368, 371,
	246, 236, 247, 248, 237, 176, 284, 256, 202, 232,
	-123, 138, 263, 135, 237, 284, 136, 136, 137, 138,
	263, 135, 136, -66, -147, -208, -140, 138, 136, 119,
	206, 250, 128, 234, 245, 246, 242, -128, 243, 170,
	-158, 136, -124, 233, 236, 237, 176, -215, -208, 244,
	252, 251, 238, 248, 247, -147, 180, -152, 185, -141,
	183, -66, -37, 369, 132, -154, -154, 235, 235, -154,
	-86, -51, -72, 85, -77, 30, 24, -76, -73, -93,
	-90, -91, 119, 120, 122, 121, 123, 108, 109, 116,
	86, 124, -81, -79, -80, -82, 69, 68, 77, 70,
	71, 72, 73, 78, 79, 80, -141, -147, -88, -218,
	52, 53, 272, 273, 274, 275, 280, 276, 88, 41,
	262, 270, 269, 268, 266, 267, 264, 265, 278, 279,
	141, 263, 135, 114, 271, -208, -140, 39, -5, -4,
	-218, 6, 21, 22, -104, 18, 17, -219, 64, -41,
	-49, 47, 48, -50, 22, 36, 51, 49, -35, -48,
	110, -51, -147, -48, -122, 140, -122, -122, -113, -157,
	180, -116, 252, 251, -142, -114, -141, -139, 250, 206,
	249, 133, 288, 84, 23, 25, 228, 87, 119, 17,
	88, 118, 272, 128, 56, 289, 264, 265, 262, 274,
	275, 263, 234, 30, 11, 291, 26, 158, 22, 36,
	112, 130, 91, 92, 161, 24, 159, 80, 294, 20,
	59, 12, 14, 295, 296, 15, 141, 140, 103, 137,
	54, 9, 124, 27, 100, 50, 297, 29, 298, 299,
	300, 301, 52, 101, 18, 266, 267, 32, 302, 280,
	165, 114, 57, 43, 85, 303, 304, 78, 305, 81,
	60, 82, 16, 55, 37, 306, 307, 308, 309, 102,
	131, 271, 53, 310, 135, 6, 277, 31, 157, 51,
	311, 136, 90, 278, 279, 139, 79, 5, 142, 33,
	10, 58, 61, 268, 269, 270, 41, 89, 13, 312,
	83, -190, 101, -180, -183, -141, 152, -201, 148, -66,
	137, -66, 271, -132, 141, -132, -132, 136, -66, -208,
	-208, 128, 130, 133, 60, 69, -23, -66, -131, 141,
	-208, -131, -131, -131, -66, 125, -66, -208, 31, -129,
	101, 13, 263, -208, 170, 136, 171, 138, -130, 101,
	-130, -130, -185, 137, 34, 149, -155, -218, -142, 174,
	175, 174, -127, -126, 240, 241, 235, 239, 13, 175,
	235, 173, -129, -155, 139, -141, -36, -141, 69, -7,
	-3, -11, -10, -12, 93, -154, -154, 63, 84, 82,
	83, 100, -51, -74, 103, 85, 101, 102, 87, 105,
	104, 115, 108, 109, 110, 111, 112, 113, 114, 106,
	107, 118, 93, 94, 95, 96, 97, 98, 99, -121,
	-218, -91, -218, 126, 127, -77, -77, -77, -77, -77,
	-77, -77, -77, -77, -77, -218, 125, -2, -86, -4,
	-218, -218, -218, -218, -218, -218, -218, -218, -96, -51,
	-218, -222, -83, -218, -222, -83, -222, -83, -222, -218,
	-222, -83, -222, -83, -222, -222, -83, -218, -218, -218,
	-218, -218, -218, -218, 12, -100, -3, -34, -106, 20,
	32, -51, -101, -102, -51, -100, 43, -46, -48, -50,
	47, 48, 75, 12, -144, -143, 23, -141, 69, 125,
	12, -67, 27, -66, -53, -54, -55, -56, -69, -92,
	-218, -66, 12, -60, -61, -66, -68, -147, 63, 180,
	-116, -157, -118, -117, 253, 255, 93, -146, -141, 69,
	30, 31, 64, 63, -66, -160, -163, -165, -164, -166,
	-161, -162, 203, 204, 119, 207, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 31, 160, 199, 200,
	201, 202, 219, 220, 221, 222, 223, 224, 225, 226,
	186, 205, 282, 187, 188, 189, 190, 191, 192, 194,
	195, 196, 197, 198, -208, 62, -208, -155, 138, -208,
	85, -208, -66, -66, -155, -155, -155, 172, 172, 136,
	136, 177, -66, 69, 63, 139, -60, 24, 60, -66,
	-208, -208, -148, -147, -139, -155, -129, 69, -51, -155,
	-155, -155, -66, -155, -155, 69, -186, 12, 103, -155,
	-155, -125, 12, 103, -186, -125, -51, -130, 60, -153,
	183, 217, 370, 371, 372, -51, -51, -51, -51, -84,
	78, 85, 79, 80, -77, -85, -88, -91, 74, 103,
	101, 102, 87, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -77, -77, -77, -77, -77, -77, -156, -208,
	69, -208, -76, -76, -141, -47, 22, 36, -46, -142,
	-148, -139, -39, -219, -219, -100, -46, -46, -51, -51,
	-93, 69, -46, -93, 69, -46, -46, -44, 22, 36,
	-94, -95, 89, -93, -141, -147, -219, -77, -141, -141,
	-46, -47, -47, -46, -46, 38, -104, -219, -105, 27,
	10, 103, 63, 19, 63, -103, 25, 26, -104, -78,
	-141, 70, 73, -52, 63, 12, -50, -66, -143, 110,
	-148, -66, -109, 166, -66, 31, 63, -62, -64, -63,
	-65, 50, 54, 56, 51, 52, 53, 57, -151, 23,
	-53, -3, -218, -150, 166, -149, 23, -147, 69, -66,
	-60, -220, 63, 12, 61, -220, 63, 125, -116, -118,
	63, 254, 256, 257, 60, 81, -51, -172, 118, -192,
	-193, -194, -142, 69, 70, -180, -181, -182, -195, 152,
	-200, 143, 145, 142, -184, 153, -201, 137, 29, 64,
	-133, 78, 85, -176, 231, -167, 62, -167, -167, -167,
	-167, -171, 206, -171, -171, -171, 62, 62, -167, -167,
	-167, -173, 62, -173, -173, -174, 62, -174, -201, 148,
	-51, -145, 61, -66, -155, 24, -155, -135, 133, 130,
	131, -204, 129, 228, 206, 76, 30, 16, 272, 166,
	287, -208, 167, -66, -66, -66, -66, -66, 133, 130,
	-66, -66, -66, -155, -66, -129, -147, -147, -66, -129,
	-66, -141, 78, 79, 80, -85, -77, -77, -77, -45,
	161, 84, -219, -219, -46, -46, -218, 125, -5, -104,
	-219, -219, 63, 61, 23, 12, 12, -219, 12, 12,
	-219, -219, -46, -97, -95, 91, -51, -219, 125, -219,
	63, 63, -219, -219, -219, -219, -219, 69, -106, 37,
	45, -51, -51, -102, -106, -120, 20, 12, 41, 41,
	-71, 13, -48, -53, -50, 125, -71, -75, 31, 41,
	-3, -218, -218, -112, -115, -93, -54, -55, -55, -54,
	-55, 50, 50, 50, 55, 50, 55, 50, -63, -147,
	-219, -219, -3, -70, 58, 140, 59, -218, -149, -109,
	61, -53, -66, -53, -68, -147, 110, -117, -119, 258,
	255, 261, -208, 69, 63, -194, 93, -183, 62, -208,
	29, -184, -184, -187, -208, -187, 29, -169, 30, 78,
	-177, 232, 70, -171, -171, -172, 31, -172, -172, -172,
	-179, 69, -179, 70, 70, 64, 60, -141, -155, -154,
	-211, 148, 144, 152, 153, 146, 65, 66, 67, 137,
	29, 143, 145, 166, 142, -211, -136, -137, 139, 23,
	137, 29, 166, -210, 61, 172, 228, 172, 139, -155,
	-125, -125, -45, 84, -77, -77, -219, -219, -47, -142,
	-100, -106, -159, 119, 203, 160, 201, 197, 217, 208,
	230, 199, 231, -156, -159, -77, -77, -77, -77, 281,
	-100, 92, -51, 90, -142, -77, -77, -154, 38, 46,
	-66, -98, 14, -51, 110, -104, -111, 60, -112, -87,
	-89, -88, -218, -107, -141, -110, -141, -71, 63, 93,
	-58, -57, 60, 61, -59, 60, -57, 50, 50, -219,
	137, 137, 137, -110, -71, -53, -71, -71, 125, 255,
	259, 260, -193, -194, -197, -196, -141, -200, 153, -187,
	-187, 62, -170, 60, -77, 64, -172, -172, -208, 119,
	64, 63, 64, 63, 64, 63, -134, 319, 85, -66,
	-154, -154, -66, -154, -141, -207, 284, -209, -208, -141,
	-141, -141, -66, -129, -129, -77, -219, -104, -219, -167,
	-167, -167, -174, -167, 191, -167, 191, -219, -219, 20,
	20, 20, 20, -218, -42, 277, -51, 63, 63, 69,
	-99, 15, 17, 28, -111, 63, -219, -219, 63, 125,
	-219, 63, -100, -115, -51, -51, 62, -51, -218, -218,
	-218, -219, -100, -71, 64, 63, -167, -108, -141, -175,
	228, 10, -171, 69, -171, 70, 70, 319, -155, 27,
	-206, -205, -142, 62, 61, -106, -171, -208, -77, -77,
	-77, -77, -77, -104, 69, -77, -77, -51, -86, 29,
	-89, 41, -3, -141, -141, -141, -104, -108, -108, -219,
	-108, -108, -150, -104, -199, -198, 61, 147, 76, -196,
	64, 63, -178, 143, 29, 142, -80, -172, -172, 64,
	64, -218, 63, 93, -108, -66, -219, -219, -219, -219,
	-43, 103, 284, -219, -219, -219, 10, -87, 125, 64,
	-219, -219, -219, -70, -198, -208, -188, 93, 69, 155,
	-141, -168, 76, 29, 29, -202, -203, 166, -205, -194,
	64, -219, 282, 57, 285, -112, -141, 70, -66, 69,
	-219, 63, -141, -210, 46, 283, 286, 62, -203, 41,
	-207, 46, -108, 168, 284, 64, 169, 285, -213, -214,
	60, -218, 286, -214, 60, 11, 10, -77, 165, -212,
	156, 151, 154, 31, -212, -219, -219, 150, 30, 78,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 635,
	0, 376, 376, 376, 376, 376, 376, 376, 0, 710,
	702, 0, 0, 0, 0, -2, 341, 342, 0, 344,
	-2, 0, 0, 353, 1027, 1027, 0, 0, 1027, 0,
	0, 1025, 49, 50, 359, 360, 361, 1, 3, 0,
	380, 643, 0, 0, -2, 378, 0, 0, 690, 690,
	690, 0, 78, 79, 0, 0, 0, 1010, 0, 688,
	688, 688, 711, 712, 715, 716, 31, 32, 33, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 686,
	686, 686, 0, 287, 458, 719, 720, 1010, 0, 0,
	0, 332, 0, 335, 335, 335, 301, 0, 303, 1028,
	0, 0, 0, 310, 0, 0, 316, 332, 1028, 324,
	338, 339, 326, 321, 322, 340, 343, 0, 348, 351,
	0, 366, 0, 885, 358, 371, 372, 1027, 1027, 375,
	34, 509, 468, 0, 474, 476, 0, 511, 512, 513,
	514, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 543, 544, 620, 621, 622, 623,
	624, 625, 626, 627, 478, 479, 617, 0, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 0,
	578, 578, 578, 578, 578, 578, 578, 578, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 0, 635, 45,
	0, 376, 381, 382, 647, 0, 0, 635, 1026, 0,
	0, -2, -2, 392, 398, 399, 400, 401, 377, 0,
	404, 408, 0, 0, 0, 691, 0, 0, 64, 0,
	998, 671, -2, -2, 0, 0, 717, 718, -2, 856,
	-2, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 0, 0, 97, 98, 0, 0, 216, 858, 95,
	0, 1028, 0, 0, 0, 0, 0, 0, 1028, 1028,
	1028, 0, 0, 0, 0, 703, 278, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 288, 1028, 332, 291,
	0, 0, 1028, 1028, 1028, 0, 1028, 1028, 298, 0,
	299, 300, 0, 201, 202, 203, 304, 1029, 1030, 1028,
	1028, 329, 0, 329, 327, 328, 319, 320, 0, 335,
	313, 314, 317, 318, 349, 352, 369, 367, 368, 370,
	362, 363, 364, 365, 0, 373, 374, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 496, 497, 498, 499, 500, 501, 502, 475,
	0, 489, 0, 0, 0, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 0, 389, 0, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 386, 0, 609,
	0, 562, 570, 0, 563, 571, 564, 572, 565, 0,
	566, 573, 567, 574, 568, 569, 575, 0, 0, 0,
	389, 389, 0, 0, 0, 643, 0, 391, 650, 0,
	0, 644, 636, 637, 640, 643, 0, 413, 402, 393,
	396, 397, 379, 0, 405, 409, 0, 411, 412, 0,
	0, 62, 0, 457, 0, 415, 417, 418, 419, 439,
	0, 441, 0, 0, 0, 58, 60, 458, 0, 998,
	677, 0, 66, 67, 0, 0, 0, 177, 681, 682,
	683, 679, 233, 0, 0, 165, 161, 105, 106, 107,
	154, 109, 154, 154, 154, 154, 174, 174, 174, 174,
	137, 138, 139, 140, 141, 0, 0, 124, 154, 154,
	154, 128, 144, 145, 146, 147, 148, 149, 150, 151,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 156,
	156, 156, 158, 158, 0, 0, 713, 81, 0, 1028,
	0, 1028, 93, 0, 247, 249, 250, 0, 0, 0,
	0, 0, 0, 704, 0, 0, 281, 687, 0, 1028,
	284, 285, 459, 721, 722, 289, 290, 333, 334, 292,
	293, 294, 295, 296, 297, 336, 0, 204, 205, 305,
	309, 332, 0, 0, 0, 332, 311, 312, 0, 0,
	350, 354, 355, 356, 357, 510, 469, 470, 471, 473,
	490, 0, 492, 494, 480, 481, 505, 506, 507, 0,
	0, 0, 0, 503, 485, 0, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 530, 593,
	594, 0, 528, 529, 540, 0, 0, 0, 390, 618,
	0, -2, 0, 508, 666, 643, 0, 0, 0, 0,
	513, 620, 0, 513, 620, 0, 0, 0, 387, 388,
	615, 612, 0, 0, 617, 0, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 46, 36, 0,
	648, 0, 0, 0, 0, 639, 641, 642, 647, 0,
	628, 0, 0, 466, 0, 0, 394, 42, 410, 406,
	0, 466, 0, 0, 456, 0, 0, 0, 0, 0,
	0, 446, 0, 0, 449, 0, 0, 0, 0, 440,
	0, 0, 0, 461, 941, 442, 0, 444, 445, -2,
	0, 0, 0, 56, 57, 0, 0, 0, 672, 65,
	0, 0, 70, 71, 673, 674, 675, 676, 0, 94,
	234, 236, 239, 240, 241, 99, 101, 102, 0, 0,
	214, 951, 984, 208, 208, 884, 221, 206, 207, 96,
	168, 166, 0, 163, 162, 108, 0, 174, 174, 131,
	132, 177, 0, 177, 177, 177, 0, 0, 125, 126,
	127, 119, 0, 120, 121, 122, 0, 123, 215, 0,
	0, 0, 0, 1028, 83, 689, 84, 1027, 0, 0,
	705, 248, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 0, 85, 252, 254, 253, 257, 0, 0,
	0, 279, 1028, 283, 329, 306, 330, 331, 329, 308,
	315, 346, 491, 493, 495, 482, 503, 486, 0, 483,
	0, 0, 477, 545, 0, 0, 389, 0, 635, 647,
	549, 550, 0, 0, 0, 0, 0, 586, 0, 0,
	587, 0, 635, 0, 613, 0, 0, 561, 0, 580,
	0, 0, 581, 582, 583, 584, 585, 1027, 38, 0,
	0, 645, 646, 638, 37, 0, 684, 685, 629, 630,
	631, 0, 403, 414, 395, 0, 643, 660, 0, 0,
	653, 0, 0, 466, 668, 0, 416, 435, 437, 0,
	432, 447, 448, 450, 0, 452, 0, 454, 455, 420,
	421, 422, 0, 423, 0, 0, 0, 0, 443, 466,
	0, 466, 59, 466, 61, 0, 460, 68, 69, 0,
	0, 75, 178, 179, 0, 237, 0, 100, 0, 0,
	196, 208, 208, 199, 209, 200, 0, 170, 0, 167,
	104, 164, 0, 177, 177, 133, 0, 134, 135, 136,
	0, 152, 0, 0, 0, 230, 0, 714, 82, 242,
	1027, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 1027, 0, 1027, 706, 707,
	708, 709, 0, 88, 0, 0, 0, 0, 0, 282,
	332, 332, 484, 0, 504, 487, 546, 547, 0, 619,
	643, 40, 0, 154, 154, 598, 154, 158, 601, 154,
	603, 154, 606, 0, 0, 0, 0, 0, 0, 0,
	610, 560, 616, 0, 618, 0, 0, 35, 0, 649,
	39, 633, 0, 467, 407, 43, 47, 0, 660, 652,
	662, 664, 0, 0, 656, 0, 427, 635, 0, 0,
	429, 436, 0, 0, 430, 0, 431, 451, 453, -2,
	0, 0, 0, 0, 635, 466, 54, 55, 0, 72,
	73, 74, 235, 238, 0, 210, 154, 213, 0, 197,
	198, 0, 172, 0, 169, 155, 129, 130, 175, 176,
	174, 0, 174, 0, 159, 0, 222, 231, 0, 1028,
	243, 244, 245, 246, 0, 251, 0, 86, 87, 0,
	0, 256, 280, 302, 307, 488, 548, 647, 551, 595,
	174, 599, 600, 602, 604, 605, 607, 553, 552, 0,
	0, 0, 0, 0, 643, 0, 614, 0, 0, 651,
	44, 0, 0, 0, 48, 0, 665, 0, 0, 0,
	63, 0, 643, 669, 670, 433, 0, 438, 0, 0,
	0, 441, 643, 53, 188, 0, 212, 0, 425, 180,
	173, 0, 177, 153, 177, 0, 0, 232, 80, 0,
	89, 90, 0, 0, 0, 41, 596, 597, 0, 0,
	0, 0, 588, 0, 611, 0, 0, 634, 632, 0,
	663, 0, 655, 658, 657, 428, 51, 0, 0, 463,
	0, 0, 461, 52, 187, 189, 0, 194, 0, 211,
	0, 0, 185, 0, 182, 184, 171, 142, 143, 157,
	160, 0, 0, 0, 0, 258, 554, 556, 555, 557,
	0, 0, 0, 559, 576, 577, 0, 654, 0, 434,
	462, 464, 465, 424, 190, 191, 0, 195, 193, 0,
	426, 103, 0, 181, 183, 0, 274, 0, 91, 92,
	85, 558, 0, 0, 0, 661, 659, 192, 0, 186,
	273, 0, 0, 88, 589, 0, 592, 0, 275, 0,
	255, 590, 0, 0, 0, 217, 0, 0, 218, 219,
	0, 0, 591, 220, 0, 0, 0, 0, 0, 223,
	225, 226, 0, 0, 224, 276, 277, 227, 228, 229,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 86, 3, 3, 3, 113, 105, 3,
	62, 64, 110, 108, 63, 109, 125, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 373,
	94, 93, 95, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 87, 88, 89, 90, 91, 92, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 122, 123, 124, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:361
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:366
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:420
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:426
		{
			yyVAL.statement = &Load{InfileS3: string(yyDollar[5].bytes)}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:432
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.IntoOutfileS3 = yyDollar[5].str
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:472
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:500
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:506
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:510
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:517
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:529
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.insertAction = InsertAct
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:589
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:593
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			yyVAL.partitions = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:602
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:634
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:638
		{
			yyVAL.characteristic = ReadWrite
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.characteristic = ReadOnly
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:648
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.isolationLevel = Serializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:666
		{
			yyVAL.scope = SessionScope
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.scope = GlobalScope
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:700
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:704
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:724
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:746
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:752
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:770
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:790
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:799
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:805
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.literal = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1068
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.boolean = true
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1085
		{
			yyVAL.boolean = false
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1089
		{
			yyVAL.boolean = true
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1095
		{
			yyVAL.boolean = false
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.boolean = false
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.boolean = true
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1112
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1117
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1126
		{
			yyVAL.boolean = false
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolean = true
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1135
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1148
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.colKeyOpt = colKey
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1173
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.literal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1245
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1249
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1293
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1319
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 217:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1339
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 218:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1343
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 219:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1347
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 220:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1351
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1361
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1379
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1383
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1387
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1391
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1395
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1400
		{
			yyVAL.boolean = true
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.boolean = true
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1408
		{
			yyVAL.boolean = false
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1413
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1417
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = yyDollar[1].str
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1469
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1474
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1581
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1591
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 276:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1597
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1601
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1613
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1617
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1629
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.statement = &OtherRead{}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1668
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1673
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1708
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1722
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1747
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1769
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1805
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = "extended "
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = "full "
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.showFilter = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1879
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1889
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1893
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.scope = ImplicitScope
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.scope = SessionScope
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.scope = GlobalScope
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1923
		{
			yyVAL.statement = &Begin{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Begin{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.statement = &Commit{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = &Rollback{}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1948
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1953
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1971
		{
			yyVAL.explainType = EmptyType
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1975
		{
			yyVAL.explainType = JSONType
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1979
		{
			yyVAL.explainType = TreeType
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.explainType = VitessType
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.explainType = TraditionalType
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.explainType = AnalyzeType
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.statement = &OtherRead{}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2046
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2074
		{
			setAllowComments(yylex, true)
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2084
		{
			yyVAL.bytes2 = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.unionType = UnionBasic
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.unionType = UnionAll
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.unionType = UnionDistinct
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = SQLCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2120
		{
			yyVAL.boolean = false
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolean = true
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolean = true
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2133
		{
			yyVAL.selectExprs = nil
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2137
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.strs = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2150
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = SQLCacheStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = DistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = DistinctStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = StraightJoinHint
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2212
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2217
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2237
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2251
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2275
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2285
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2295
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2318
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2322
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2326
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2338
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2342
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2348
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2353
		{
			yyVAL.empty = struct{}{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2373
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.joinType = NormalJoinType
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.joinType = NormalJoinType
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2387
		{
			yyVAL.joinType = NormalJoinType
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.joinType = StraightJoinType
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.joinType = LeftJoinType
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.joinType = LeftJoinType
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.joinType = RightJoinType
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.joinType = RightJoinType
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2456
		{
			yyVAL.indexHints = nil
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2460
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2468
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2472
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2531
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 555:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 556:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 558:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3000
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3004
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.matchExprOption = NoOption
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 591:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3038
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = nil
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3122
		{
			yyVAL.str = string("")
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3142
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3161
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3165
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = &NullVal{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3223
		{
			yyVAL.exprs = nil
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = nil
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.orderBy = nil
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3261
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3266
		{
			yyVAL.orderDirection = AscOrder
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.orderDirection = AscOrder
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.orderDirection = DescOrder
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3279
		{
			yyVAL.limit = nil
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3287
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3291
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3296
		{
			yyVAL.lock = NoLock
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3300
		{
			yyVAL.lock = ForUpdateLock
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3304
		{
			yyVAL.lock = ShareModeLock
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3313
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3326
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3330
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3334
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3338
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3348
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3352
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3356
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3361
		{
			yyVAL.updateExprs = nil
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3365
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3371
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3375
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3385
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3411
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3417
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3423
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3427
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3433
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3437
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3441
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3449
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3457
		{
			yyVAL.bytes = []byte("charset")
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3472
		{
			yyVAL.expr = &Default{}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3481
		{
			yyVAL.boolean = false
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3483
		{
			yyVAL.boolean = true
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3486
		{
			yyVAL.boolean = false
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3488
		{
			yyVAL.boolean = true
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3491
		{
			yyVAL.ignore = false
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.ignore = true
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3497
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3501
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3505
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3509
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3513
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3519
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3523
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3529
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3537
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3547
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3550
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3557
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3559
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3591
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3919
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3928
		{
			decNesting(yylex)
		}
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3933
		{
			skipToEnd(yylex)
		}
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3938
		{
			skipToEnd(yylex)
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3942
		{
			skipToEnd(yylex)
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3946
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

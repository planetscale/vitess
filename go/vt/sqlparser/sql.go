// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	boolean              bool
	literal              *Literal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const KEYSPACES = 57566
const VITESS_KEYSPACES = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const TIMESTAMPADD = 57597
const TIMESTAMPDIFF = 57598
const MATCH = 57599
const AGAINST = 57600
const BOOLEAN = 57601
const LANGUAGE = 57602
const WITH = 57603
const QUERY = 57604
const EXPANSION = 57605
const UNUSED = 57606
const ARRAY = 57607
const CUME_DIST = 57608
const DESCRIPTION = 57609
const DENSE_RANK = 57610
const EMPTY = 57611
const EXCEPT = 57612
const FIRST_VALUE = 57613
const GROUPING = 57614
const GROUPS = 57615
const JSON_TABLE = 57616
const LAG = 57617
const LAST_VALUE = 57618
const LATERAL = 57619
const LEAD = 57620
const MEMBER = 57621
const NTH_VALUE = 57622
const NTILE = 57623
const OF = 57624
const OVER = 57625
const PERCENT_RANK = 57626
const RANK = 57627
const RECURSIVE = 57628
const ROW_NUMBER = 57629
const SYSTEM = 57630
const WINDOW = 57631
const ACTIVE = 57632
const ADMIN = 57633
const BUCKETS = 57634
const CLONE = 57635
const COMPONENT = 57636
const DEFINITION = 57637
const ENFORCED = 57638
const EXCLUDE = 57639
const FOLLOWING = 57640
const GEOMCOLLECTION = 57641
const GET_MASTER_PUBLIC_KEY = 57642
const HISTOGRAM = 57643
const HISTORY = 57644
const INACTIVE = 57645
const INVISIBLE = 57646
const LOCKED = 57647
const MASTER_COMPRESSION_ALGORITHMS = 57648
const MASTER_PUBLIC_KEY_PATH = 57649
const MASTER_TLS_CIPHERSUITES = 57650
const MASTER_ZSTD_COMPRESSION_LEVEL = 57651
const NESTED = 57652
const NETWORK_NAMESPACE = 57653
const NOWAIT = 57654
const NULLS = 57655
const OJ = 57656
const OLD = 57657
const OPTIONAL = 57658
const ORDINALITY = 57659
const ORGANIZATION = 57660
const OTHERS = 57661
const PATH = 57662
const PERSIST = 57663
const PERSIST_ONLY = 57664
const PRECEDING = 57665
const PRIVILEGE_CHECKS_USER = 57666
const PROCESS = 57667
const RANDOM = 57668
const REFERENCE = 57669
const REQUIRE_ROW_FORMAT = 57670
const RESOURCE = 57671
const RESPECT = 57672
const RESTART = 57673
const RETAIN = 57674
const REUSE = 57675
const ROLE = 57676
const SECONDARY = 57677
const SECONDARY_ENGINE = 57678
const SECONDARY_LOAD = 57679
const SECONDARY_UNLOAD = 57680
const SKIP = 57681
const SRID = 57682
const THREAD_PRIORITY = 57683
const TIES = 57684
const UNBOUNDED = 57685
const VCPU = 57686
const VISIBLE = 57687
const FORMAT = 57688
const TREE = 57689
const VITESS = 57690
const TRADITIONAL = 57691

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 309,
	133, 309,
	145, 309,
	170, 323,
	171, 323,
	-2, 311,
	-1, 49,
	135, 333,
	-2, 331,
	-1, 72,
	39, 369,
	-2, 377,
	-1, 395,
	121, 700,
	-2, 696,
	-1, 396,
	121, 701,
	-2, 697,
	-1, 410,
	39, 370,
	-2, 382,
	-1, 411,
	39, 371,
	-2, 383,
	-1, 435,
	89, 955,
	-2, 74,
	-1, 436,
	89, 870,
	-2, 75,
	-1, 441,
	89, 837,
	-2, 662,
	-1, 443,
	89, 902,
	-2, 664,
	-1, 767,
	57, 56,
	59, 56,
	-2, 60,
	-1, 945,
	121, 703,
	-2, 699,
	-1, 1375,
	5, 621,
	18, 621,
	20, 621,
	32, 621,
	60, 621,
	-2, 408,
}

const yyPrivate = 57344

const yyLast = 17746

var yyAct = [...]int{

	395, 1614, 1604, 1414, 1571, 1301, 339, 1051, 1206, 1487,
	1474, 1520, 1355, 1226, 354, 1388, 1024, 615, 368, 403,
	1356, 1352, 1047, 1207, 733, 1094, 1252, 1060, 1050, 1361,
	325, 1080, 1144, 1367, 740, 1320, 694, 613, 596, 92,
	867, 932, 1278, 288, 887, 310, 288, 1064, 1269, 71,
	3, 92, 440, 288, 1193, 939, 781, 1010, 1026, 760,
	766, 965, 1021, 69, 738, 341, 909, 565, 761, 397,
	778, 780, 28, 743, 1003, 750, 429, 412, 605, 288,
	92, 337, 769, 566, 288, 326, 288, 67, 329, 1090,
	426, 72, 707, 66, 895, 330, 8, 437, 1607, 7,
	6, 585, 380, 286, 386, 387, 384, 385, 383, 382,
	381, 708, 1591, 321, 1602, 1579, 1113, 1599, 388, 389,
	1415, 1590, 1578, 74, 75, 76, 77, 78, 79, 1337,
	1112, 1444, 570, 94, 95, 96, 1383, 1384, 30, 428,
	398, 60, 34, 35, 567, 782, 569, 783, 418, 422,
	434, 1382, 284, 280, 281, 282, 1042, 1043, 1041, 628,
	328, 94, 95, 96, 276, 327, 1260, 274, 1073, 278,
	1477, 942, 1111, 1081, 1546, 656, 655, 665, 666, 658,
	659, 660, 661, 662, 663, 664, 657, 1303, 1240, 667,
	59, 1239, 623, 1435, 1241, 1433, 624, 621, 622, 318,
	94, 95, 96, 894, 602, 320, 604, 316, 856, 616,
	617, 626, 855, 1305, 853, 1601, 1598, 1572, 1300, 1004,
	611, 627, 1564, 1065, 1622, 1108, 1105, 1106, 1618, 1104,
	1227, 1229, 586, 572, 278, 1067, 1306, 860, 601, 603,
	630, 1529, 844, 1304, 1074, 896, 897, 898, 854, 857,
	656, 655, 665, 666, 658, 659, 660, 661, 662, 663,
	664, 657, 1115, 1118, 667, 575, 277, 1378, 1521, 1377,
	1376, 568, 291, 279, 1553, 288, 577, 578, 283, 1297,
	288, 1457, 587, 1523, 1067, 1299, 288, 582, 1125, 1321,
	275, 1124, 288, 594, 1288, 1048, 600, 679, 680, 1236,
	1198, 1173, 1110, 92, 1152, 92, 1163, 1145, 775, 754,
	692, 92, 1228, 592, 667, 1037, 94, 95, 96, 610,
	1160, 92, 92, 888, 1109, 982, 1284, 1285, 1286, 599,
	1323, 612, 606, 882, 647, 576, 94, 95, 96, 1066,
	584, 1081, 618, 1562, 1616, 1577, 591, 1617, 629, 1615,
	1530, 1528, 593, 1547, 1522, 579, 598, 580, 641, 642,
	581, 657, 1538, 1365, 667, 784, 1114, 1325, 640, 1329,
	1339, 1324, 636, 1322, 966, 571, 607, 608, 1327, 916,
	846, 1116, 646, 644, 588, 589, 590, 1326, 1066, 1298,
	1401, 1296, 644, 914, 915, 913, 82, 61, 1287, 647,
	1328, 1330, 677, 1292, 1289, 1280, 1290, 1283, 647, 1279,
	889, 1067, 407, 1281, 1282, 1159, 679, 680, 779, 639,
	883, 92, 637, 638, 288, 288, 288, 1291, 1258, 1623,
	679, 680, 730, 92, 966, 83, 1170, 1567, 747, 92,
	597, 1582, 695, 94, 95, 96, 1158, 1483, 1157, 731,
	437, 273, 656, 655, 665, 666, 658, 659, 660, 661,
	662, 663, 664, 657, 573, 574, 667, 645, 646, 644,
	645, 646, 644, 1624, 710, 712, 714, 716, 718, 720,
	721, 1482, 1070, 59, 758, 647, 767, 759, 647, 1071,
	744, 1584, 732, 711, 713, 912, 717, 719, 432, 722,
	665, 666, 658, 659, 660, 661, 662, 663, 664, 657,
	773, 1273, 667, 1272, 1261, 1066, 768, 94, 95, 96,
	1063, 1061, 1563, 1062, 651, 1500, 654, 1480, 423, 424,
	1059, 1065, 668, 669, 670, 671, 672, 673, 674, 1270,
	652, 653, 650, 656, 655, 665, 666, 658, 659, 660,
	661, 662, 663, 664, 657, 987, 988, 667, 660, 661,
	662, 663, 664, 657, 880, 288, 667, 872, 407, 842,
	92, 292, 845, 1535, 847, 288, 288, 92, 92, 92,
	295, 742, 1534, 288, 1526, 1600, 288, 1397, 304, 288,
	865, 866, 1068, 288, 1194, 92, 1364, 94, 95, 96,
	92, 92, 92, 288, 92, 92, 1453, 843, 645, 646,
	644, 645, 646, 644, 850, 851, 852, 92, 92, 1341,
	1586, 407, 302, 1526, 1575, 792, 647, 643, 309, 647,
	1526, 407, 870, 564, 871, 848, 849, 874, 875, 876,
	1007, 878, 879, 858, 68, 869, 428, 1526, 1554, 864,
	904, 906, 907, 1353, 884, 885, 1364, 905, 293, 996,
	645, 646, 644, 877, 1137, 1138, 1139, 1537, 933, 910,
	357, 356, 359, 360, 361, 362, 861, 935, 647, 358,
	363, 94, 95, 96, 1405, 306, 296, 984, 307, 308,
	314, 92, 1526, 1525, 299, 301, 311, 297, 298, 407,
	294, 313, 312, 1472, 1471, 891, 995, 954, 957, 1007,
	943, 1459, 407, 967, 1456, 407, 911, 94, 95, 96,
	70, 934, 1407, 1406, 92, 92, 1244, 983, 1403, 1404,
	949, 1403, 1402, 944, 658, 659, 660, 661, 662, 663,
	664, 657, 92, 1194, 667, 945, 645, 646, 644, 288,
	979, 695, 92, 94, 95, 96, 288, 1243, 288, 30,
	989, 936, 937, 995, 647, 1006, 288, 288, 995, 407,
	288, 288, 943, 30, 288, 288, 288, 92, 1007, 407,
	92, 946, 975, 976, 1201, 643, 407, 791, 790, 1364,
	1202, 92, 566, 1007, 437, 1001, 771, 437, 1031, 1040,
	770, 1176, 1175, 995, 1507, 770, 985, 945, 1052, 998,
	400, 59, 1609, 859, 776, 1022, 1002, 59, 1005, 30,
	1592, 1489, 997, 1075, 1464, 59, 1095, 999, 869, 1393,
	771, 1033, 1032, 1368, 1369, 1302, 1034, 1082, 1083, 1084,
	1247, 772, 1030, 774, 1091, 288, 92, 1038, 92, 1039,
	1117, 1035, 1086, 1085, 288, 288, 288, 288, 288, 1055,
	288, 288, 59, 1490, 288, 92, 1098, 1096, 950, 951,
	1605, 59, 956, 959, 960, 772, 1395, 770, 1371, 1353,
	1274, 892, 288, 1100, 863, 1102, 1218, 288, 1374, 288,
	288, 1219, 1373, 288, 92, 1215, 1214, 974, 1216, 1596,
	977, 978, 1129, 1217, 1589, 1099, 396, 1345, 1183, 1220,
	970, 1016, 1017, 741, 1119, 1120, 1121, 1122, 1123, 1594,
	1126, 1127, 1192, 1191, 1128, 1265, 1132, 962, 1092, 1093,
	789, 595, 910, 1012, 1015, 1016, 1017, 1013, 734, 1014,
	1018, 963, 1130, 1368, 1369, 93, 1257, 1131, 1569, 289,
	735, 413, 289, 1135, 1568, 1505, 1255, 93, 1451, 289,
	1012, 1015, 1016, 1017, 1013, 414, 1014, 1018, 1249, 1154,
	1485, 1101, 745, 746, 416, 862, 415, 413, 404, 911,
	1140, 1020, 406, 401, 402, 289, 93, 1190, 1450, 405,
	289, 414, 289, 70, 1449, 1189, 1348, 288, 410, 411,
	416, 1194, 415, 625, 1182, 1611, 1610, 1611, 288, 288,
	288, 288, 288, 1208, 1187, 1164, 1153, 1161, 886, 398,
	288, 755, 748, 1551, 288, 1478, 1169, 981, 288, 400,
	68, 73, 288, 65, 1441, 1, 1603, 1416, 1486, 1107,
	1570, 1519, 1387, 1058, 1049, 1076, 1077, 1078, 1079, 1242,
	1186, 92, 81, 1203, 563, 80, 1561, 1199, 1245, 1196,
	1248, 1087, 1088, 1089, 1253, 1253, 881, 1209, 1052, 1195,
	1212, 609, 1057, 1225, 334, 1197, 1221, 1210, 1211, 1056,
	1213, 1527, 1259, 1072, 1476, 1232, 1231, 1234, 1394, 1235,
	1256, 1254, 1566, 797, 1233, 795, 796, 1237, 794, 92,
	92, 799, 798, 1264, 793, 1266, 1267, 1268, 1262, 1263,
	1250, 1251, 1149, 1150, 656, 655, 665, 666, 658, 659,
	660, 661, 662, 663, 664, 657, 303, 893, 667, 92,
	317, 1019, 785, 1167, 1277, 1271, 1097, 1276, 749, 84,
	1295, 1294, 1103, 1069, 300, 619, 620, 305, 1293, 675,
	1188, 1238, 438, 92, 431, 1359, 986, 737, 1448, 933,
	1347, 1168, 704, 964, 764, 340, 1307, 903, 355, 352,
	1317, 353, 990, 1200, 1310, 1308, 1309, 649, 338, 1319,
	332, 289, 763, 756, 1011, 1009, 289, 1008, 1318, 288,
	427, 1342, 289, 1370, 1366, 1332, 762, 994, 289, 92,
	1331, 409, 1338, 1443, 1545, 92, 92, 1316, 1208, 93,
	1354, 93, 408, 961, 944, 52, 1317, 93, 632, 1351,
	322, 1357, 33, 417, 23, 22, 945, 93, 93, 21,
	20, 92, 19, 25, 18, 17, 16, 583, 37, 27,
	26, 15, 14, 13, 12, 92, 1372, 92, 92, 1346,
	11, 1253, 1253, 10, 1386, 9, 5, 4, 635, 24,
	1379, 1363, 1052, 693, 1052, 2, 1400, 1380, 0, 0,
	1447, 0, 0, 1385, 0, 288, 1390, 1391, 1392, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1381, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 92, 0, 1417, 92, 92, 92, 288, 0, 1409,
	0, 656, 655, 665, 666, 658, 659, 660, 661, 662,
	663, 664, 657, 0, 1410, 667, 1412, 93, 0, 0,
	289, 289, 289, 0, 0, 1408, 0, 0, 1426, 93,
	0, 0, 0, 0, 0, 93, 0, 1422, 1423, 0,
	0, 1431, 0, 0, 0, 1411, 655, 665, 666, 658,
	659, 660, 661, 662, 663, 664, 657, 1421, 0, 667,
	0, 1208, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 0, 1461, 0,
	0, 0, 0, 1245, 92, 0, 0, 0, 1460, 0,
	1470, 0, 0, 1052, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 92, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 0, 0, 0,
	1493, 0, 0, 1488, 1479, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 92, 92, 0,
	92, 1492, 0, 1499, 0, 92, 0, 92, 92, 92,
	288, 289, 1357, 92, 1506, 1513, 93, 1514, 1516, 1517,
	1512, 289, 289, 93, 93, 93, 1518, 1504, 1524, 289,
	92, 288, 289, 1531, 0, 289, 0, 0, 0, 289,
	1539, 93, 1532, 0, 1533, 1508, 93, 93, 93, 289,
	93, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	1552, 0, 1560, 93, 93, 0, 1357, 92, 0, 0,
	0, 1559, 1558, 0, 0, 0, 0, 0, 92, 92,
	0, 0, 0, 0, 0, 0, 1574, 1573, 0, 0,
	0, 1540, 0, 0, 92, 1488, 1052, 0, 1208, 0,
	1580, 0, 0, 0, 0, 288, 1428, 1429, 0, 1430,
	0, 0, 1432, 92, 1434, 0, 0, 0, 0, 0,
	0, 1588, 0, 0, 0, 0, 0, 0, 369, 29,
	0, 1593, 1595, 92, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 1597, 947, 948, 1608, 0, 0, 0,
	0, 0, 0, 1619, 0, 0, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 1583, 0, 0, 0, 0,
	93, 93, 0, 0, 1473, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 289, 399, 0, 93, 0,
	0, 0, 289, 0, 289, 0, 0, 1446, 0, 0,
	0, 0, 289, 289, 0, 0, 289, 289, 0, 0,
	289, 289, 289, 93, 0, 0, 93, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 366, 656, 655,
	665, 666, 658, 659, 660, 661, 662, 663, 664, 657,
	0, 1439, 667, 0, 908, 0, 0, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 1438, 0, 0, 0, 91, 0, 0, 0,
	0, 289, 93, 0, 93, 0, 0, 0, 319, 0,
	289, 289, 289, 289, 289, 0, 289, 289, 0, 0,
	289, 93, 656, 655, 665, 666, 658, 659, 660, 661,
	662, 663, 664, 657, 971, 0, 667, 439, 289, 0,
	0, 0, 0, 289, 0, 289, 289, 0, 0, 289,
	93, 656, 655, 665, 666, 658, 659, 660, 661, 662,
	663, 664, 657, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 656, 655, 665, 666, 658, 659, 660, 661,
	662, 663, 664, 657, 0, 0, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1155, 1156, 0, 0, 0, 0, 1162, 0, 0,
	1165, 1166, 0, 0, 0, 0, 0, 0, 1172, 0,
	0, 0, 1174, 420, 0, 1177, 1178, 1179, 1180, 1181,
	0, 614, 0, 614, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 289, 289, 289, 289, 289, 0,
	0, 0, 0, 0, 676, 678, 289, 0, 0, 0,
	289, 0, 1223, 1224, 289, 0, 0, 0, 289, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 93, 0, 696,
	697, 698, 699, 700, 701, 702, 703, 0, 706, 709,
	709, 709, 715, 709, 709, 715, 709, 723, 724, 725,
	726, 727, 728, 729, 0, 0, 0, 0, 29, 1141,
	1142, 1143, 0, 656, 655, 665, 666, 658, 659, 660,
	661, 662, 663, 664, 657, 93, 93, 667, 0, 0,
	439, 0, 439, 765, 0, 0, 1311, 0, 439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 631, 633,
	0, 0, 0, 0, 0, 93, 656, 655, 665, 666,
	658, 659, 660, 661, 662, 663, 664, 657, 1146, 0,
	667, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	1314, 1315, 0, 0, 0, 0, 0, 0, 656, 655,
	665, 666, 658, 659, 660, 661, 662, 663, 664, 657,
	0, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 93, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 1375, 93, 0, 0,
	439, 0, 0, 0, 0, 0, 786, 0, 0, 0,
	0, 93, 0, 93, 93, 0, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 614, 614, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 614, 0, 0, 0, 0, 614, 614,
	614, 0, 614, 614, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 614, 614, 93, 0, 0,
	93, 93, 93, 289, 0, 0, 0, 648, 0, 0,
	1312, 1313, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 1427, 0, 0, 0, 1333, 1334, 0, 1335, 1336,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	1343, 1344, 0, 331, 0, 0, 0, 0, 0, 0,
	0, 0, 705, 0, 0, 0, 0, 0, 0, 1454,
	1455, 0, 1458, 0, 0, 0, 0, 439, 0, 0,
	0, 0, 0, 0, 439, 439, 439, 0, 736, 739,
	1469, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 439, 0, 0, 0, 0, 439, 439, 439,
	0, 439, 439, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 93, 0, 439, 439, 0, 0, 0, 0,
	0, 0, 1396, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 765, 0,
	0, 0, 765, 93, 93, 0, 93, 0, 0, 0,
	0, 93, 0, 93, 93, 93, 289, 1515, 0, 93,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 289, 938, 0,
	439, 0, 0, 0, 0, 1541, 1542, 1543, 1544, 0,
	1548, 0, 1549, 1550, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1555, 0, 1556, 1557, 0,
	0, 972, 973, 93, 614, 0, 614, 0, 0, 0,
	0, 0, 0, 0, 93, 93, 0, 0, 0, 991,
	0, 0, 0, 614, 0, 0, 1576, 0, 0, 752,
	93, 0, 439, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 1585, 873, 0, 439, 0, 0, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 1494, 1495, 1496, 1497, 1498, 0, 0,
	0, 1501, 1502, 1620, 1621, 0, 0, 899, 900, 901,
	902, 0, 1151, 0, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 0, 0, 0,
	0, 0, 439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 953, 0, 765, 0, 814, 0, 0,
	0, 0, 1204, 1205, 0, 0, 765, 765, 765, 765,
	765, 1136, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 315, 1023, 0, 1230, 0, 0, 0, 287, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 421, 0, 0, 430, 0, 0, 0, 0, 287,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 0,
	0, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1612, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 968, 0, 0, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 831,
	832, 833, 834, 835, 836, 0, 837, 838, 839, 840,
	841, 816, 817, 818, 819, 800, 801, 829, 439, 803,
	0, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 820, 821, 822, 823, 824, 825, 826, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1358, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 439, 0, 0, 0,
	287, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	1171, 287, 0, 0, 0, 0, 0, 287, 0, 0,
	439, 0, 0, 0, 0, 0, 0, 1184, 1185, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 968,
	0, 0, 1360, 1362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 439, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 1467, 1468, 0, 0,
	0, 0, 0, 0, 0, 421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	287, 287, 0, 0, 0, 0, 0, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 1418, 1419, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1358, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 1536, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 1358, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 287, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 287, 0, 0, 287, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 1509, 1510, 0, 1511, 287, 0,
	0, 0, 1475, 0, 1475, 1475, 1475, 0, 0, 0,
	1389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 1565, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 439, 439, 0, 0, 1462,
	0, 0, 1463, 0, 0, 1465, 0, 421, 868, 968,
	0, 1581, 421, 421, 0, 0, 421, 421, 421, 0,
	0, 0, 969, 0, 0, 0, 0, 0, 0, 0,
	1587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 421, 421, 421, 421, 421, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	868, 287, 0, 287, 30, 31, 32, 60, 34, 35,
	0, 287, 1028, 1503, 331, 287, 287, 0, 0, 287,
	1036, 868, 0, 0, 64, 0, 0, 0, 0, 36,
	55, 56, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	287, 287, 287, 287, 0, 287, 287, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 39, 41, 40, 43, 287, 57, 0,
	0, 0, 287, 0, 1133, 1134, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 63, 62, 0, 0, 53, 54, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 47, 0, 48, 49, 50, 51, 0,
	0, 0, 0, 0, 0, 0, 421, 421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 421, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 287, 287, 287, 287, 287, 0, 0,
	0, 0, 0, 61, 0, 1222, 0, 0, 0, 287,
	0, 0, 0, 1028, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 0,
	549, 537, 0, 0, 494, 552, 467, 484, 560, 485,
	488, 525, 452, 507, 184, 482, 287, 471, 447, 478,
	448, 469, 496, 126, 500, 466, 539, 510, 551, 155,
	0, 472, 558, 158, 516, 0, 231, 172, 0, 0,
	0, 498, 541, 505, 534, 493, 526, 457, 515, 553,
	483, 523, 554, 0, 0, 0, 94, 95, 96, 0,
	1053, 1054, 0, 0, 0, 0, 0, 116, 0, 520,
	548, 480, 522, 524, 562, 446, 517, 969, 450, 453,
	559, 544, 475, 476, 1246, 0, 0, 0, 0, 0,
	287, 497, 506, 531, 491, 0, 0, 0, 0, 0,
	0, 0, 0, 473, 0, 514, 0, 0, 0, 454,
	451, 0, 0, 0, 0, 495, 0, 0, 0, 456,
	0, 474, 532, 0, 444, 135, 536, 543, 492, 290,
	547, 490, 489, 550, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 540, 470,
	479, 120, 477, 213, 191, 252, 513, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 268, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 271, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 449,
	0, 232, 255, 272, 114, 465, 239, 266, 267, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 176, 111,
	144, 229, 152, 160, 208, 270, 190, 214, 118, 254,
	230, 461, 464, 459, 460, 508, 509, 555, 556, 557,
	533, 455, 0, 462, 463, 0, 538, 545, 546, 512,
	97, 106, 157, 269, 206, 131, 256, 445, 458, 124,
	468, 0, 0, 481, 486, 487, 499, 501, 502, 503,
	504, 511, 518, 519, 521, 527, 528, 529, 530, 535,
	542, 561, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 549, 537, 0, 0, 494, 552, 467, 484, 560,
	485, 488, 525, 452, 507, 184, 482, 0, 471, 447,
	478, 448, 469, 496, 126, 500, 466, 539, 510, 551,
	155, 0, 472, 558, 158, 516, 0, 231, 172, 0,
	0, 0, 498, 541, 505, 534, 493, 526, 457, 515,
	553, 483, 523, 554, 0, 0, 0, 94, 95, 96,
	0, 1053, 1054, 0, 0, 0, 0, 0, 116, 0,
	520, 548, 480, 522, 524, 562, 446, 517, 0, 450,
	453, 559, 544, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 497, 506, 531, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 473, 0, 514, 0, 0, 0,
	454, 451, 0, 0, 0, 0, 495, 0, 0, 0,
	456, 0, 474, 532, 0, 444, 135, 536, 543, 492,
	290, 547, 490, 489, 550, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 540,
	470, 479, 120, 477, 213, 191, 252, 513, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 268, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 271, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	449, 0, 232, 255, 272, 114, 465, 239, 266, 267,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 176,
	111, 144, 229, 152, 160, 208, 270, 190, 214, 118,
	254, 230, 461, 464, 459, 460, 508, 509, 555, 556,
	557, 533, 455, 0, 462, 463, 0, 538, 545, 546,
	512, 97, 106, 157, 269, 206, 131, 256, 445, 458,
	124, 468, 0, 0, 481, 486, 487, 499, 501, 502,
	503, 504, 511, 518, 519, 521, 527, 528, 529, 530,
	535, 542, 561, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 549, 537, 0, 0, 494, 552, 467, 484,
	560, 485, 488, 525, 452, 507, 184, 482, 0, 471,
	447, 478, 448, 469, 496, 126, 500, 466, 539, 510,
	551, 155, 0, 472, 558, 158, 516, 0, 231, 172,
	0, 0, 0, 498, 541, 505, 534, 493, 526, 457,
	515, 553, 483, 523, 554, 59, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 520, 548, 480, 522, 524, 562, 446, 517, 0,
	450, 453, 559, 544, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 497, 506, 531, 491, 0, 0, 0,
	0, 0, 0, 0, 0, 473, 0, 514, 0, 0,
	0, 454, 451, 0, 0, 0, 0, 495, 0, 0,
	0, 456, 0, 474, 532, 0, 444, 135, 536, 543,
	492, 290, 547, 490, 489, 550, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	540, 470, 479, 120, 477, 213, 191, 252, 513, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 268,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 271, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 449, 0, 232, 255, 272, 114, 465, 239, 266,
	267, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	176, 111, 144, 229, 152, 160, 208, 270, 190, 214,
	118, 254, 230, 461, 464, 459, 460, 508, 509, 555,
	556, 557, 533, 455, 0, 462, 463, 0, 538, 545,
	546, 512, 97, 106, 157, 269, 206, 131, 256, 445,
	458, 124, 468, 0, 0, 481, 486, 487, 499, 501,
	502, 503, 504, 511, 518, 519, 521, 527, 528, 529,
	530, 535, 542, 561, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 549, 537, 0, 0, 494, 552, 467,
	484, 560, 485, 488, 525, 452, 507, 184, 482, 0,
	471, 447, 478, 448, 469, 496, 126, 500, 466, 539,
	510, 551, 155, 0, 472, 558, 158, 516, 0, 231,
	172, 0, 0, 0, 498, 541, 505, 534, 493, 526,
	457, 515, 553, 483, 523, 554, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 520, 548, 480, 522, 524, 562, 446, 517,
	0, 450, 453, 559, 544, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 497, 506, 531, 491, 0, 0,
	0, 0, 0, 0, 1350, 0, 473, 0, 514, 0,
	0, 0, 454, 451, 0, 0, 0, 0, 495, 0,
	0, 0, 456, 0, 474, 532, 0, 444, 135, 536,
	543, 492, 290, 547, 490, 489, 550, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 540, 470, 479, 120, 477, 213, 191, 252, 513,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	268, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 271, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 449, 0, 232, 255, 272, 114, 465, 239,
	266, 267, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 176, 111, 144, 229, 152, 160, 208, 270, 190,
	214, 118, 254, 230, 461, 464, 459, 460, 508, 509,
	555, 556, 557, 533, 455, 0, 462, 463, 0, 538,
	545, 546, 512, 97, 106, 157, 269, 206, 131, 256,
	445, 458, 124, 468, 0, 0, 481, 486, 487, 499,
	501, 502, 503, 504, 511, 518, 519, 521, 527, 528,
	529, 530, 535, 542, 561, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 549, 537, 0, 0, 494, 552,
	467, 484, 560, 485, 488, 525, 452, 507, 184, 482,
	0, 471, 447, 478, 448, 469, 496, 126, 500, 466,
	539, 510, 551, 155, 0, 472, 558, 158, 516, 0,
	231, 172, 0, 0, 0, 498, 541, 505, 534, 493,
	526, 457, 515, 553, 483, 523, 554, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 520, 548, 480, 522, 524, 562, 446,
	517, 0, 450, 453, 559, 544, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 497, 506, 531, 491, 0,
	0, 0, 0, 0, 0, 1037, 0, 473, 0, 514,
	0, 0, 0, 454, 451, 0, 0, 0, 0, 495,
	0, 0, 0, 456, 0, 474, 532, 0, 444, 135,
	536, 543, 492, 290, 547, 490, 489, 550, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 540, 470, 479, 120, 477, 213, 191, 252,
	513, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 268, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 271, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 449, 0, 232, 255, 272, 114, 465,
	239, 266, 267, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 176, 111, 144, 229, 152, 160, 208, 270,
	190, 214, 118, 254, 230, 461, 464, 459, 460, 508,
	509, 555, 556, 557, 533, 455, 0, 462, 463, 0,
	538, 545, 546, 512, 97, 106, 157, 269, 206, 131,
	256, 445, 458, 124, 468, 0, 0, 481, 486, 487,
	499, 501, 502, 503, 504, 511, 518, 519, 521, 527,
	528, 529, 530, 535, 542, 561, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 549, 537, 0, 0, 494,
	552, 467, 484, 560, 485, 488, 525, 452, 507, 184,
	482, 0, 471, 447, 478, 448, 469, 496, 126, 500,
	466, 539, 510, 551, 155, 0, 472, 558, 158, 516,
	0, 231, 172, 0, 0, 0, 498, 541, 505, 534,
	493, 526, 457, 515, 553, 483, 523, 554, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 520, 548, 480, 522, 524, 562,
	446, 517, 0, 450, 453, 559, 544, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 497, 506, 531, 491,
	0, 0, 0, 0, 0, 0, 1000, 0, 473, 0,
	514, 0, 0, 0, 454, 451, 0, 0, 0, 0,
	495, 0, 0, 0, 456, 0, 474, 532, 0, 444,
	135, 536, 543, 492, 290, 547, 490, 489, 550, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 540, 470, 479, 120, 477, 213, 191,
	252, 513, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 268, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 271, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 449, 0, 232, 255, 272, 114,
	465, 239, 266, 267, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 176, 111, 144, 229, 152, 160, 208,
	270, 190, 214, 118, 254, 230, 461, 464, 459, 460,
	508, 509, 555, 556, 557, 533, 455, 0, 462, 463,
	0, 538, 545, 546, 512, 97, 106, 157, 269, 206,
	131, 256, 445, 458, 124, 468, 0, 0, 481, 486,
	487, 499, 501, 502, 503, 504, 511, 518, 519, 521,
	527, 528, 529, 530, 535, 542, 561, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 549, 537, 0, 0,
	494, 552, 467, 484, 560, 485, 488, 525, 452, 507,
	184, 482, 0, 471, 447, 478, 448, 469, 496, 126,
	500, 466, 539, 510, 551, 155, 0, 472, 558, 158,
	516, 0, 231, 172, 0, 0, 0, 498, 541, 505,
	534, 493, 526, 457, 515, 553, 483, 523, 554, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 520, 548, 480, 522, 524,
	562, 446, 517, 0, 450, 453, 559, 544, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 497, 506, 531,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 473,
	0, 514, 0, 0, 0, 454, 451, 0, 0, 0,
	0, 495, 0, 0, 0, 456, 0, 474, 532, 0,
	444, 135, 536, 543, 492, 290, 547, 490, 489, 550,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 540, 470, 479, 120, 477, 213,
	191, 252, 513, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 268, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 271,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 449, 0, 232, 255, 272,
	114, 465, 239, 266, 267, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 176, 111, 144, 229, 152, 160,
	208, 270, 190, 214, 118, 254, 230, 461, 464, 459,
	460, 508, 509, 555, 556, 557, 533, 455, 0, 462,
	463, 0, 538, 545, 546, 512, 97, 106, 157, 269,
	206, 131, 256, 445, 458, 124, 468, 0, 0, 481,
	486, 487, 499, 501, 502, 503, 504, 511, 518, 519,
	521, 527, 528, 529, 530, 535, 542, 561, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 549, 537, 0,
	0, 494, 552, 467, 484, 560, 485, 488, 525, 452,
	507, 184, 482, 0, 471, 447, 478, 448, 469, 496,
	126, 500, 466, 539, 510, 551, 155, 0, 472, 558,
	158, 516, 0, 231, 172, 0, 0, 0, 498, 541,
	505, 534, 493, 526, 457, 515, 553, 483, 523, 554,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 520, 548, 480, 522,
	524, 562, 446, 517, 0, 450, 453, 559, 544, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 497, 506,
	531, 491, 0, 0, 0, 0, 0, 0, 0, 0,
	473, 0, 514, 0, 0, 0, 454, 451, 0, 0,
	0, 0, 495, 0, 0, 0, 456, 0, 474, 532,
	0, 444, 135, 536, 543, 492, 290, 547, 490, 489,
	550, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 540, 470, 479, 120, 477,
	213, 191, 252, 513, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 268, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	271, 109, 258, 105, 442, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 449, 0, 232, 255,
	272, 114, 465, 239, 266, 267, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 443, 441, 436, 435, 152,
	160, 208, 270, 190, 214, 118, 254, 230, 461, 464,
	459, 460, 508, 509, 555, 556, 557, 533, 455, 0,
	462, 463, 0, 538, 545, 546, 512, 97, 106, 157,
	269, 206, 131, 256, 445, 458, 124, 468, 0, 0,
	481, 486, 487, 499, 501, 502, 503, 504, 511, 518,
	519, 521, 527, 528, 529, 530, 535, 542, 561, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 549, 537,
	0, 0, 494, 552, 467, 484, 560, 485, 488, 525,
	452, 507, 184, 482, 0, 471, 447, 478, 448, 469,
	496, 126, 500, 466, 539, 510, 551, 155, 0, 472,
	558, 158, 516, 0, 231, 172, 0, 0, 0, 498,
	541, 505, 534, 493, 526, 457, 515, 553, 483, 523,
	554, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 520, 548, 480,
	522, 524, 562, 446, 517, 0, 450, 453, 559, 544,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 497,
	506, 531, 491, 0, 0, 0, 0, 0, 0, 0,
	0, 473, 0, 514, 0, 0, 0, 454, 451, 0,
	0, 0, 0, 495, 0, 0, 0, 456, 0, 474,
	532, 0, 444, 135, 536, 543, 492, 290, 547, 490,
	489, 550, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 540, 470, 479, 120,
	477, 213, 191, 252, 513, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 268, 228, 101, 237, 777,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 271, 109, 258, 105, 442, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 449, 0, 232,
	255, 272, 114, 465, 239, 266, 267, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 443, 441, 436, 435,
	152, 160, 208, 270, 190, 214, 118, 254, 230, 461,
	464, 459, 460, 508, 509, 555, 556, 557, 533, 455,
	0, 462, 463, 0, 538, 545, 546, 512, 97, 106,
	157, 269, 206, 131, 256, 445, 458, 124, 468, 0,
	0, 481, 486, 487, 499, 501, 502, 503, 504, 511,
	518, 519, 521, 527, 528, 529, 530, 535, 542, 561,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 549,
	537, 0, 0, 494, 552, 467, 484, 560, 485, 488,
	525, 452, 507, 184, 482, 0, 471, 447, 478, 448,
	469, 496, 126, 500, 466, 539, 510, 551, 155, 0,
	472, 558, 158, 516, 0, 231, 172, 0, 0, 0,
	498, 541, 505, 534, 493, 526, 457, 515, 553, 483,
	523, 554, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 520, 548,
	480, 522, 524, 562, 446, 517, 0, 450, 453, 559,
	544, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	497, 506, 531, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 473, 0, 514, 0, 0, 0, 454, 451,
	0, 0, 0, 0, 495, 0, 0, 0, 456, 0,
	474, 532, 0, 444, 135, 536, 543, 492, 290, 547,
	490, 489, 550, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 540, 470, 479,
	120, 477, 213, 191, 252, 513, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 268, 228, 101, 237,
	433, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 271, 109, 258, 105, 442, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 449, 0,
	232, 255, 272, 114, 465, 239, 266, 267, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 443, 441, 436,
	435, 152, 160, 208, 270, 190, 214, 118, 254, 230,
	461, 464, 459, 460, 508, 509, 555, 556, 557, 533,
	455, 0, 462, 463, 0, 538, 545, 546, 512, 97,
	106, 157, 269, 206, 131, 256, 445, 458, 124, 468,
	0, 0, 481, 486, 487, 499, 501, 502, 503, 504,
	511, 518, 519, 521, 527, 528, 529, 530, 535, 542,
	561, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 940, 0, 336, 0, 0, 0, 126,
	0, 335, 0, 0, 0, 155, 0, 941, 379, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 357, 356, 359, 360, 361,
	362, 0, 0, 116, 358, 363, 364, 365, 0, 0,
	0, 0, 333, 350, 0, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 348, 419, 0, 0,
	0, 393, 0, 349, 0, 0, 342, 343, 345, 344,
	346, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 392, 0, 0, 290, 0, 0, 390, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 268, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 271,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 272,
	114, 0, 239, 266, 267, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 176, 111, 144, 229, 152, 160,
	208, 270, 190, 214, 118, 254, 230, 380, 391, 386,
	387, 384, 385, 383, 382, 381, 394, 372, 373, 374,
	375, 377, 0, 388, 389, 376, 97, 106, 157, 269,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 336, 0, 0, 0, 126, 0, 335, 0,
	0, 0, 155, 0, 0, 379, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 0, 0, 1044, 0, 59, 0, 0, 94,
	95, 96, 357, 356, 359, 360, 361, 362, 0, 0,
	116, 358, 363, 364, 365, 1045, 0, 0, 0, 333,
	350, 0, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 348, 0, 0, 0, 0, 393, 0,
	349, 0, 0, 342, 343, 345, 344, 346, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 392,
	0, 0, 290, 0, 0, 390, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	268, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 271, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 272, 114, 0, 239,
	266, 267, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 176, 111, 144, 229, 152, 160, 208, 270, 190,
	214, 118, 254, 230, 380, 391, 386, 387, 384, 385,
	383, 382, 381, 394, 372, 373, 374, 375, 377, 0,
	388, 389, 376, 97, 106, 157, 269, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 336,
	0, 0, 0, 126, 0, 335, 0, 0, 0, 155,
	0, 0, 379, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 407, 94, 95, 96, 357,
	356, 359, 360, 361, 362, 0, 0, 116, 358, 363,
	364, 365, 0, 0, 0, 0, 333, 350, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	348, 0, 0, 0, 0, 393, 0, 349, 0, 0,
	342, 343, 345, 344, 346, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 392, 0, 0, 290,
	0, 0, 390, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 268, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 271, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 272, 114, 0, 239, 266, 267, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 176, 111,
	144, 229, 152, 160, 208, 270, 190, 214, 118, 254,
	230, 380, 391, 386, 387, 384, 385, 383, 382, 381,
	394, 372, 373, 374, 375, 377, 0, 388, 389, 376,
	97, 106, 157, 269, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 336, 0, 0, 0,
	126, 0, 335, 0, 0, 0, 155, 0, 0, 379,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 357, 356, 359, 360,
	361, 362, 0, 0, 116, 358, 363, 364, 365, 0,
	0, 0, 0, 333, 350, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 348, 419, 0,
	0, 0, 393, 0, 349, 0, 0, 342, 343, 345,
	344, 346, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 392, 0, 0, 290, 0, 0, 390,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 268, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	271, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	272, 114, 0, 239, 266, 267, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 176, 111, 144, 229, 152,
	160, 208, 270, 190, 214, 118, 254, 230, 380, 391,
	386, 387, 384, 385, 383, 382, 381, 394, 372, 373,
	374, 375, 377, 0, 388, 389, 376, 97, 106, 157,
	269, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 0, 336, 0, 0, 0, 126, 0, 335,
	0, 0, 0, 155, 0, 0, 379, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 357, 958, 359, 360, 361, 362, 0,
	0, 116, 358, 363, 364, 365, 0, 0, 0, 0,
	333, 350, 0, 378, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 348, 419, 0, 0, 0, 393,
	0, 349, 0, 0, 342, 343, 345, 344, 346, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	392, 0, 0, 290, 0, 0, 390, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 268, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 271, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 272, 114, 0,
	239, 266, 267, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 176, 111, 144, 229, 152, 160, 208, 270,
	190, 214, 118, 254, 230, 380, 391, 386, 387, 384,
	385, 383, 382, 381, 394, 372, 373, 374, 375, 377,
	0, 388, 389, 376, 97, 106, 157, 269, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	336, 0, 0, 0, 126, 0, 335, 0, 0, 0,
	155, 0, 0, 379, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	357, 955, 359, 360, 361, 362, 0, 0, 116, 358,
	363, 364, 365, 0, 0, 0, 0, 333, 350, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 419, 0, 0, 0, 393, 0, 349, 0,
	0, 342, 343, 345, 344, 346, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 392, 0, 0,
	290, 0, 0, 390, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 268, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 271, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 272, 114, 0, 239, 266, 267,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 176,
	111, 144, 229, 152, 160, 208, 270, 190, 214, 118,
	254, 230, 380, 391, 386, 387, 384, 385, 383, 382,
	381, 394, 372, 373, 374, 375, 377, 0, 388, 389,
	376, 97, 106, 157, 269, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	336, 0, 0, 0, 126, 0, 335, 0, 0, 0,
	155, 0, 0, 379, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 94, 95, 96,
	357, 356, 359, 360, 361, 362, 0, 0, 116, 358,
	363, 364, 365, 0, 0, 0, 0, 333, 350, 0,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 348, 0, 0, 0, 0, 393, 0, 349, 0,
	0, 342, 343, 345, 344, 346, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 392, 0, 0,
	290, 0, 0, 390, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 268, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 271, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 272, 114, 0, 239, 266, 267,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 176,
	111, 144, 229, 152, 160, 208, 270, 190, 214, 118,
	254, 230, 380, 391, 386, 387, 384, 385, 383, 382,
	381, 394, 372, 373, 374, 375, 377, 0, 388, 389,
	376, 97, 106, 157, 269, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 336, 0, 0,
	0, 126, 0, 335, 0, 0, 0, 155, 0, 0,
	379, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 357, 356, 359,
	360, 361, 362, 0, 0, 116, 358, 363, 364, 365,
	0, 0, 0, 0, 333, 350, 0, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 348, 0,
	0, 0, 0, 393, 0, 349, 0, 0, 342, 343,
	345, 344, 346, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 392, 0, 0, 290, 0, 0,
	390, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 268, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 271, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 272, 114, 0, 239, 266, 267, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 176, 111, 144, 229,
	152, 160, 208, 270, 190, 214, 118, 254, 230, 380,
	391, 386, 387, 384, 385, 383, 382, 381, 394, 372,
	373, 374, 375, 377, 0, 388, 389, 376, 97, 106,
	157, 269, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 379, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 357, 356, 359, 360, 361, 362,
	0, 0, 116, 358, 363, 364, 365, 0, 0, 0,
	0, 0, 350, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 348, 0, 0, 0, 0,
	393, 0, 349, 0, 0, 342, 343, 345, 344, 346,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 392, 0, 0, 290, 0, 0, 390, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 1613, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 268, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 271, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 272, 114,
	0, 239, 266, 267, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 176, 111, 144, 229, 152, 160, 208,
	270, 190, 214, 118, 254, 230, 380, 391, 386, 387,
	384, 385, 383, 382, 381, 394, 372, 373, 374, 375,
	377, 0, 388, 389, 376, 97, 106, 157, 269, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 379, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 407, 94, 95,
	96, 357, 356, 359, 360, 361, 362, 0, 0, 116,
	358, 363, 364, 365, 0, 0, 0, 0, 0, 350,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 348, 0, 0, 0, 0, 393, 0, 349,
	0, 0, 342, 343, 345, 344, 346, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 392, 0,
	0, 290, 0, 0, 390, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 268,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 271, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 272, 114, 0, 239, 266,
	267, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	176, 111, 144, 229, 152, 160, 208, 270, 190, 214,
	118, 254, 230, 380, 391, 386, 387, 384, 385, 383,
	382, 381, 394, 372, 373, 374, 375, 377, 0, 388,
	389, 376, 97, 106, 157, 269, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 379, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 357, 356,
	359, 360, 361, 362, 0, 0, 116, 358, 363, 364,
	365, 0, 0, 0, 0, 0, 350, 0, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 348,
	0, 0, 0, 0, 393, 0, 349, 0, 0, 342,
	343, 345, 344, 346, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 392, 0, 0, 290, 0,
	0, 390, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 268, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 271, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 272, 114, 0, 239, 266, 267, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 176, 111, 144,
	229, 152, 160, 208, 270, 190, 214, 118, 254, 230,
	380, 391, 386, 387, 384, 385, 383, 382, 381, 394,
	372, 373, 374, 375, 377, 0, 388, 389, 376, 97,
	106, 157, 269, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 656, 655, 665, 666, 658, 659, 660, 661, 662,
	663, 664, 657, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 290, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 268, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 271,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 272,
	114, 0, 239, 266, 267, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 176, 111, 144, 229, 152, 160,
	208, 270, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 269,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 751, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 753, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 645, 646, 644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 290, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	268, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 271, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 272, 114, 0, 239,
	266, 267, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 176, 111, 144, 229, 152, 160, 208, 270, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 269, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 88, 89, 0, 85,
	0, 0, 0, 90, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 268, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 271, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 272, 114, 0, 239, 266, 267, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 176, 111,
	144, 229, 152, 160, 208, 270, 190, 214, 118, 254,
	230, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 269, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 1027, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 1029, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 290, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 268, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	271, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	272, 114, 0, 239, 266, 267, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 176, 111, 144, 229, 152,
	160, 208, 270, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	269, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 30, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 290, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 268, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	271, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	272, 114, 0, 239, 266, 267, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 176, 111, 144, 229, 152,
	160, 208, 270, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	269, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 1027, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 1029, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 290, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 1025, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 268, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 271, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 272, 114, 0,
	239, 266, 267, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 176, 111, 144, 229, 152, 160, 208, 270,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 269, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 992, 0, 0, 993, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	290, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 268, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 271, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 272, 114, 0, 239, 266, 267,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 176,
	111, 144, 229, 152, 160, 208, 270, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 269, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 788, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 787, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 290, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 268, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 271, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 272, 114, 0, 239, 266, 267, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 176, 111, 144, 229,
	152, 160, 208, 270, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 269, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 290, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 268, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 271, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 272, 114,
	0, 239, 266, 267, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 176, 111, 144, 229, 152, 160, 208,
	270, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 269, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 290, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 268,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 271, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 272, 114, 0, 239, 266,
	267, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	176, 111, 144, 229, 152, 160, 208, 270, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 269, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 1029,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 290, 0,
	0, 0, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 268, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 271, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 272, 114, 0, 239, 266, 267, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 176, 111, 144,
	229, 152, 160, 208, 270, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 269, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 753, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 290, 0, 0, 0, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 268, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 271,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 272,
	114, 0, 239, 266, 267, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 176, 111, 144, 229, 152, 160,
	208, 270, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 269,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 757, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 290, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	268, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 271, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 272, 114, 0, 239,
	266, 267, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 176, 111, 144, 229, 152, 160, 208, 270, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 269, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	634, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 290,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 268, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 271, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 272, 114, 0, 239, 266, 267, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 176, 111,
	144, 229, 152, 160, 208, 270, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 269, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 425, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 290, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 268, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 271, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 272, 114, 0,
	239, 266, 267, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 176, 111, 144, 229, 152, 160, 208, 270,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 269, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 324, 0, 135, 0, 0, 0,
	290, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 268, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 271, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 272, 114, 0, 239, 266, 267,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 176,
	111, 144, 229, 152, 160, 208, 270, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 269, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 323,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 285, 0, 290, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 268, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 271, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 272, 114, 0, 239, 266, 267, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 176, 111, 144, 229,
	152, 160, 208, 270, 190, 214, 118, 254, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 269, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 290, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 268, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 271, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 272, 114,
	0, 239, 266, 267, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 176, 111, 144, 229, 152, 160, 208,
	270, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 269, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264,
}
var yyPact = [...]int{

	3318, -1000, -274, 1025, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 977, 813,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 338, 12155, 33,
	141, 21, 17033, 140, 456, 17380, -1000, 31, -1000, 18,
	17380, 26, 16686, -1000, -1000, -66, -71, -1000, 10073, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 804, 962, 960,
	972, 639, 955, -1000, 8672, 8672, 98, 98, 16339, 7284,
	-1000, -1000, 536, 17380, 138, 17380, -133, 96, 96, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 133, 17380, 620, 620, 231, -1000, 17380,
	95, 620, 95, 95, 95, 17380, -1000, 192, -1000, -1000,
	-1000, 17380, 620, 900, 343, 72, 235, 235, 235, -1000,
	186, -1000, 4757, 39, 4757, -39, 990, 40, -10, -1000,
	4757, -1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, -1000,
	17380, 15985, 132, 279, -1000, -1000, -1000, -1000, -1000, -1000,
	568, 582, -1000, 10073, 443, 759, 759, -1000, -1000, 175,
	-1000, -1000, 11114, 11114, 11114, 11114, 11114, 11114, 11114, 11114,
	11114, 11114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 759, 189, -1000, 9726,
	759, 759, 759, 759, 759, 759, 759, 759, 10073, 759,
	759, 759, 759, 759, 759, 759, 759, 759, 759, 759,
	759, 759, 759, 759, 759, -1000, -1000, 977, -1000, 813,
	-1000, -1000, -1000, 918, 10073, 10073, 977, -1000, 874, 8672,
	-1000, -1000, 929, -1000, -1000, -1000, -1000, 367, 1010, -1000,
	11808, 188, 1009, 15638, 14597, 17380, 818, 784, -1000, -1000,
	187, 755, 6923, -102, -1000, -1000, -1000, 276, 13903, -1000,
	-1000, -1000, 899, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 728, 17380, -1000, 2556, -1000, 620, 4757,
	108, 620, 299, 620, 17380, 17380, 4757, 4757, 4757, 46,
	80, 76, 17380, 754, 102, 17380, 951, 828, 17380, 620,
	620, -1000, 6201, -1000, 4757, 343, -1000, 502, 10073, 4757,
	4757, 4757, 17380, 4757, 4757, -1000, 499, -1000, -1000, 321,
	-1000, -1000, -1000, -1000, -1000, -1000, 4757, 4757, -1000, 1006,
	311, -1000, -1000, -1000, -1000, 10073, 235, -1000, 825, -1000,
	24, -1000, -1000, -1000, -1000, -1000, 1025, -1000, -1000, -1000,
	-119, -1000, -1000, 10073, 10073, 10073, 10073, 576, 238, 11114,
	425, 296, 11114, 11114, 11114, 11114, 11114, 11114, 11114, 11114,
	11114, 11114, 11114, 11114, 11114, 11114, 11114, 656, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 620, -1000, 1023, 606,
	606, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	11461, 7631, 6201, 639, 726, 977, 8672, 8672, 10073, 10073,
	9366, 9019, 8672, 905, 289, 582, 17380, -1000, -1000, 10767,
	-1000, -1000, -1000, -1000, -1000, 508, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17380, 17380, 8672, 8672, 8672, 8672, 8672,
	960, 639, 929, -1000, 1017, 226, 668, 747, -1000, 530,
	960, 13556, 647, -1000, 929, -1000, -1000, -1000, 17380, -1000,
	-1000, 15291, -1000, -1000, 5840, 17380, 57, 17380, -1000, 734,
	914, -1000, -1000, -1000, 958, 12862, 13209, 57, 741, 14597,
	17380, -1000, -1000, 14597, 17380, 5479, 6562, -102, -1000, 6562,
	740, -1000, -90, -94, 7978, 181, -1000, -1000, -1000, -1000,
	4396, 382, 532, 408, -59, -1000, -1000, -1000, 765, -1000,
	765, 765, 765, 765, -29, -29, -29, -29, -1000, -1000,
	-1000, -1000, -1000, 795, 794, -1000, 765, 765, 765, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 786, 786, 786,
	768, 768, 809, -1000, 17380, 4757, 947, 4757, -1000, 100,
	-1000, -1000, -1000, 17380, 17380, 17380, 17380, 17380, 162, 17380,
	17380, 746, -1000, 17380, 4757, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 582, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17380, -1000, -1000, -1000, -1000, 17380, 343, 17380, 17380,
	582, -1000, 17380, 17380, -1000, -1000, -1000, -1000, -1000, 582,
	238, 303, 312, -1000, -1000, 590, -1000, -1000, 1893, -1000,
	-1000, -1000, -1000, 425, 11114, 11114, 11114, 150, 1893, 1968,
	398, 1255, 200, 452, 452, 250, 250, 250, 250, 250,
	630, 630, -1000, -1000, -1000, 508, -1000, -1000, -1000, 508,
	8672, 8672, 744, 759, 183, -1000, 804, -1000, -1000, 960,
	709, 709, 389, 392, 308, 1005, 709, 294, 1003, 709,
	709, 8672, -1000, -1000, 349, -1000, 10073, 508, -1000, 180,
	-1000, 352, 743, 742, 709, 508, 508, 709, 709, 918,
	-1000, -1000, 867, 10073, 10073, 10073, -1000, -1000, -1000, 918,
	975, -1000, 886, 885, 988, 8672, 14597, 929, -1000, -1000,
	-1000, 179, 988, 753, 759, -1000, 17380, 14597, 14597, 14597,
	14597, 14597, -1000, 850, 849, -1000, 852, 840, 863, 17380,
	-1000, 719, 639, 12862, 176, 759, -1000, 14944, -1000, -1000,
	988, 14597, 581, -1000, 581, -1000, 178, -1000, -1000, 740,
	-102, -61, -1000, -1000, -1000, -1000, 582, -1000, 692, 667,
	4035, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 782, 620,
	-1000, 939, 206, 255, 620, 927, -1000, -1000, -1000, 916,
	-1000, 354, -62, -1000, -1000, 448, -29, -29, -1000, -1000,
	181, 894, 181, 181, 181, 474, 474, -1000, -1000, -1000,
	-1000, 447, -1000, -1000, -1000, 445, -1000, 824, 17380, 4757,
	-1000, -1000, -1000, -1000, 265, 265, 256, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, 778,
	-1000, -1000, -1000, -1000, 19, 45, 101, -1000, 4757, -1000,
	311, 311, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 150, 1893, 1936, -1000, 11114, 11114, -1000, -1000, 709,
	709, 8672, 6201, 977, 918, -1000, -1000, 174, 656, 174,
	11114, 11114, -1000, 11114, 11114, -1000, -146, 704, 282, -1000,
	10073, 533, -1000, 6201, -1000, 11114, 11114, -1000, -1000, -1000,
	-1000, -1000, -1000, 865, 582, 582, -1000, -1000, 17380, -1000,
	-1000, -1000, -1000, 982, 10073, -1000, 650, -1000, 5118, 960,
	823, 17380, 759, 1025, 12862, 17380, 730, -1000, 274, 914,
	777, 822, 887, -1000, -1000, -1000, -1000, 846, -1000, 842,
	-1000, -1000, -1000, -1000, -1000, 639, -1000, 137, 136, 134,
	17380, -1000, 977, 581, -1000, -1000, 209, -1000, -1000, -98,
	-117, -1000, -1000, -1000, 4396, -1000, 4396, 17380, 74, -1000,
	620, 620, -1000, -1000, -1000, 771, 820, 11114, -1000, -1000,
	-1000, 527, 181, 181, -1000, 275, -1000, -1000, -1000, 672,
	-1000, 669, 625, 663, 17380, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17380, -1000, -1000, -1000, -1000, -1000,
	17380, -158, 620, 17380, 17380, 17380, 17380, -1000, 343, 343,
	-1000, 11114, 1893, 1893, -1000, -1000, 508, -1000, 960, -1000,
	508, 765, 765, -1000, 765, 768, -1000, 765, 8, 765,
	6, 508, 508, 1722, 1701, 1672, 1014, 759, -140, -1000,
	582, 10073, -1000, 1608, 1211, -1000, -1000, 979, 971, 582,
	-1000, -1000, -1000, 930, 597, 547, -1000, -1000, 8325, 655,
	160, 652, -1000, 977, 17380, 10073, -1000, -1000, 10073, 766,
	-1000, 10073, -1000, -1000, -1000, 977, 759, 759, 759, 652,
	960, -1000, -1000, -1000, -1000, 4035, -1000, 644, -1000, 765,
	-1000, -1000, -1000, 17380, -54, 1015, 1893, -1000, -1000, -1000,
	-1000, -1000, -29, 462, -29, 415, -1000, 381, 4757, -1000,
	-1000, -1000, -1000, 943, -1000, 6201, -1000, -1000, 763, 806,
	-1000, -1000, -1000, -1000, 1893, -1000, 918, -1000, -1000, 139,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11114, 11114,
	11114, 11114, 11114, 960, 460, 582, 11114, 11114, -1000, 10073,
	10073, 926, -1000, 759, -1000, 767, 17380, 17380, -1000, 17380,
	960, -1000, 582, 582, 17380, 582, 14250, 17380, 17380, 12502,
	-1000, 211, 17380, -1000, 633, -1000, 212, -1000, -154, 181,
	-1000, 181, 522, 513, -1000, 759, 608, -1000, 273, 17380,
	17380, -1000, -1000, -1000, 352, 352, 352, 352, 75, 508,
	-1000, 352, 352, 582, 568, 1013, -1000, 759, 1025, 153,
	-1000, -1000, -1000, 588, 571, -1000, 571, 571, 176, 211,
	-1000, 620, 254, 457, -1000, 71, 17380, 365, 925, -1000,
	919, -1000, -1000, -1000, -1000, -1000, 55, 6201, 4396, 564,
	-1000, -1000, -1000, -1000, -1000, 508, 69, -164, -1000, -1000,
	-1000, 17380, 547, 17380, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 375, -1000, -1000, 17380, -1000, -1000, 426, -1000, -1000,
	561, -1000, 17380, -1000, -1000, 778, -1000, 862, -156, -168,
	537, -1000, -1000, 762, -1000, -1000, 55, 882, -158, -1000,
	857, -1000, 17380, -1000, 52, -1000, -161, 525, 50, -165,
	814, 759, -182, 756, -1000, 995, 10420, -1000, -1000, 997,
	197, 197, 352, 508, -1000, -1000, -1000, 78, 399, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1265, 1263, 49, 72, 69, 1259, 1258, 1257, 1256,
	100, 99, 96, 1255, 1253, 1250, 1244, 1243, 1242, 1241,
	1240, 1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1230,
	1229, 1225, 1224, 91, 1223, 87, 1222, 1220, 1218, 1215,
	1213, 1212, 1204, 1203, 32, 171, 55, 73, 1201, 77,
	1883, 1197, 62, 59, 68, 1196, 33, 1194, 1193, 90,
	1190, 1187, 57, 1185, 1184, 60, 1183, 76, 1182, 13,
	54, 1180, 1178, 1177, 1173, 81, 1074, 1172, 1171, 14,
	1169, 1168, 111, 1167, 66, 36, 12, 18, 20, 1165,
	65, 1164, 6, 1163, 61, 1162, 1161, 1160, 1158, 34,
	1157, 64, 1156, 19, 24, 1155, 10, 74, 29, 21,
	8, 1154, 1152, 23, 70, 56, 71, 1151, 1150, 451,
	1149, 1147, 44, 1146, 1145, 1144, 38, 78, 101, 375,
	1143, 1142, 1141, 1140, 1139, 52, 906, 1707, 17, 75,
	1138, 1136, 1132, 2565, 40, 58, 16, 1131, 1130, 1127,
	30, 37, 41, 418, 1126, 35, 1104, 1102, 1101, 1098,
	1096, 1095, 1093, 244, 1092, 1090, 1088, 31, 22, 89,
	25, 1084, 1083, 1082, 1081, 48, 67, 1079, 1072, 47,
	1071, 1066, 26, 1056, 1055, 1054, 1052, 1044, 28, 7,
	1043, 15, 1042, 11, 1041, 27, 1040, 4, 1039, 9,
	1038, 3, 0, 1037, 5, 42, 1, 1036, 2, 1035,
	1033, 1588, 910, 82, 1031, 92,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	202, 202, 202, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 36, 36, 11,
	12, 12, 12, 12, 213, 213, 59, 59, 60, 60,
	107, 107, 13, 14, 14, 116, 116, 115, 115, 115,
	117, 117, 117, 117, 153, 153, 15, 15, 15, 15,
	15, 15, 15, 204, 204, 203, 201, 201, 200, 200,
	199, 22, 184, 186, 186, 185, 185, 185, 185, 176,
	156, 156, 156, 156, 159, 159, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 158,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	162, 162, 162, 162, 162, 162, 162, 162, 175, 175,
	163, 163, 169, 169, 170, 170, 170, 172, 172, 173,
	173, 130, 130, 130, 165, 165, 166, 166, 171, 171,
	167, 167, 167, 168, 168, 168, 174, 174, 174, 174,
	174, 164, 164, 177, 177, 194, 194, 193, 193, 193,
	183, 183, 190, 190, 190, 190, 190, 180, 180, 180,
	181, 181, 179, 179, 182, 182, 192, 192, 191, 178,
	178, 195, 195, 195, 195, 207, 208, 206, 206, 206,
	206, 206, 187, 187, 187, 188, 188, 188, 189, 189,
	189, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 198, 196, 196, 197, 197, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 123, 123, 125,
	125, 121, 121, 124, 124, 122, 122, 122, 126, 126,
	126, 127, 127, 154, 154, 154, 26, 26, 28, 28,
	29, 30, 30, 148, 148, 149, 149, 31, 32, 37,
	37, 37, 37, 37, 37, 39, 39, 39, 7, 7,
	7, 7, 38, 38, 38, 6, 6, 27, 27, 27,
	27, 20, 214, 33, 34, 34, 35, 35, 35, 41,
	41, 41, 40, 40, 40, 46, 46, 48, 48, 48,
	48, 48, 49, 49, 49, 49, 49, 49, 45, 45,
	47, 47, 47, 47, 140, 140, 140, 139, 139, 51,
	51, 52, 52, 53, 53, 54, 54, 54, 91, 68,
	68, 106, 106, 108, 108, 55, 55, 55, 55, 56,
	56, 57, 57, 58, 58, 147, 147, 146, 146, 146,
	145, 145, 61, 61, 61, 63, 62, 62, 62, 62,
	64, 64, 66, 66, 65, 65, 67, 69, 69, 69,
	69, 69, 70, 70, 50, 50, 50, 50, 50, 50,
	50, 50, 120, 120, 72, 72, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 83, 83, 83, 83,
	83, 83, 73, 73, 73, 73, 73, 73, 73, 44,
	44, 84, 84, 84, 90, 85, 85, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 80, 80, 80, 80, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 215, 215, 82, 81, 81, 81,
	81, 81, 81, 81, 42, 42, 42, 42, 42, 152,
	152, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 95, 95, 43, 43, 93, 93,
	94, 96, 96, 92, 92, 92, 75, 75, 75, 75,
	75, 75, 75, 75, 77, 77, 77, 97, 97, 98,
	98, 99, 99, 100, 100, 101, 102, 102, 102, 103,
	103, 103, 103, 104, 104, 104, 74, 74, 74, 74,
	105, 105, 105, 105, 109, 109, 86, 86, 88, 88,
	87, 89, 110, 110, 113, 111, 111, 114, 114, 114,
	114, 114, 112, 112, 112, 142, 142, 142, 118, 118,
	128, 128, 129, 129, 119, 119, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 132, 132, 132, 133,
	133, 134, 134, 134, 141, 141, 137, 137, 138, 138,
	143, 143, 144, 144, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	211, 212, 150, 151, 151, 151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 4, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 5, 0, 1, 0, 1, 2, 3, 0,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 4,
	5, 5, 0, 2, 1, 3, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 5, 4,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -211,
	6, 7, 8, -36, 10, 11, 31, -22, 124, 125,
	127, 126, 160, 128, 153, 54, 174, 175, 177, 178,
	179, 180, -39, 158, 159, 32, 33, 130, 35, 58,
	9, 265, 155, 154, 26, -210, 367, -35, 5, -99,
	16, -3, -33, -214, -33, -33, -33, -33, -33, -33,
	-184, -186, 58, 97, -134, 134, 78, 257, 131, 132,
	138, -137, -202, -136, 61, 62, 63, 275, 146, 307,
	308, 174, 188, 182, 209, 201, 276, 309, 147, 199,
	202, 244, 144, 310, 229, 236, 72, 177, 253, 311,
	156, 197, 193, 312, 284, 191, 28, 313, 238, 214,
	314, 280, 240, 192, 237, 130, 315, 149, 363, 142,
	316, 215, 219, 317, 245, 318, 319, 320, 186, 187,
	321, 145, 247, 213, 143, 34, 241, 277, 38, 164,
	248, 217, 322, 212, 208, 323, 324, 325, 326, 211,
	185, 207, 42, 221, 220, 222, 243, 204, 327, 328,
	329, 150, 330, 194, 19, 331, 332, 333, 334, 335,
	251, 159, 336, 162, 337, 338, 339, 340, 341, 342,
	239, 216, 218, 139, 166, 235, 279, 343, 249, 190,
	344, 151, 163, 158, 252, 152, 345, 346, 347, 348,
	349, 350, 351, 178, 352, 353, 354, 355, 173, 246,
	255, 41, 226, 356, 184, 141, 357, 175, 170, 231,
	205, 165, 358, 359, 195, 196, 210, 183, 206, 176,
	364, 167, 160, 360, 254, 227, 281, 203, 200, 171,
	361, 168, 169, 362, 365, 242, 232, 233, 172, 278,
	250, 198, 228, -119, 134, 257, 131, 233, 136, 132,
	132, 133, 134, 257, 131, 132, -65, -143, -202, -136,
	134, 132, 115, 202, 244, 124, 230, 241, 242, 238,
	-125, 239, 166, -154, 132, -121, 229, 232, 233, 172,
	-202, 240, 246, 245, 234, -143, 176, -148, 181, -137,
	179, -65, -37, 363, 128, -150, -150, 231, 231, -150,
	-85, -50, -71, 81, -76, 30, 24, -75, -72, -92,
	-89, -90, 115, 116, 118, 117, 119, 104, 105, 112,
	82, 120, -80, -78, -79, -81, 65, 64, 73, 66,
	67, 68, 69, 74, 75, 76, -137, -143, -87, -211,
	48, 49, 266, 267, 268, 269, 274, 270, 84, 37,
	256, 264, 263, 262, 260, 261, 258, 259, 272, 273,
	137, 257, 131, 110, 265, -202, -136, -5, -4, -211,
	6, 21, 22, -103, 18, 17, -212, 60, -41, -48,
	43, 44, -49, 22, 36, 47, 45, -34, -47, 106,
	-50, -143, -47, -119, -119, 12, -59, -60, -65, -67,
	-143, -111, -153, 176, -114, 246, 245, -138, -112, -137,
	-135, 244, 202, 243, 129, 282, 80, 23, 25, 224,
	83, 115, 17, 84, 114, 266, 124, 52, 283, 258,
	259, 256, 268, 269, 257, 230, 30, 11, 285, 26,
	154, 22, 36, 108, 126, 87, 88, 157, 24, 155,
	76, 288, 20, 55, 12, 14, 289, 290, 15, 137,
	136, 99, 133, 50, 9, 120, 27, 96, 46, 291,
	29, 292, 293, 294, 295, 48, 97, 18, 260, 261,
	32, 296, 274, 161, 110, 53, 39, 81, 297, 298,
	74, 299, 77, 56, 78, 16, 51, 300, 301, 302,
	303, 98, 127, 265, 49, 304, 131, 6, 271, 31,
	153, 47, 305, 132, 86, 272, 273, 135, 75, 5,
	138, 33, 10, 54, 57, 262, 263, 264, 37, 85,
	13, 306, 79, -185, 97, -176, -202, -65, 133, -65,
	265, -129, 137, -129, -129, 132, -65, -202, -202, 124,
	126, 129, 56, -23, -65, -128, 137, -202, -128, -128,
	-128, -65, 121, -65, -202, 31, -126, 97, 13, 257,
	-202, 166, 132, 167, 134, -127, 97, -127, -127, -180,
	133, 34, 145, -151, -211, -138, 170, 171, -151, -124,
	-123, 236, 237, 231, 235, 13, 171, 231, 169, -151,
	135, -137, -38, -137, 65, -7, -3, -11, -10, -12,
	89, -150, -150, 59, 80, 78, 79, 96, -50, -73,
	99, 81, 97, 98, 83, 101, 100, 111, 104, 105,
	106, 107, 108, 109, 110, 102, 103, 114, 89, 90,
	91, 92, 93, 94, 95, -120, -211, -90, -211, 122,
	123, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -211, 121, -2, -85, -4, -211, -211, -211, -211,
	-211, -211, -211, -211, -95, -50, -211, -215, -82, -211,
	-215, -82, -215, -82, -215, -211, -215, -82, -215, -82,
	-215, -215, -82, -211, -211, -211, -211, -211, -211, -211,
	-99, -3, -33, -104, 20, 32, -50, -100, -101, -50,
	-99, 39, -45, -47, -49, 43, 44, 71, 12, -140,
	-139, 23, -137, 65, 121, 12, -66, 27, -65, -52,
	-53, -54, -55, -68, -91, -211, -65, -65, -59, -213,
	59, 12, 57, -213, 59, 121, 59, 176, -114, -153,
	-116, -115, 247, 249, 89, -142, -137, 65, 30, 31,
	60, 59, -65, -156, -159, -161, -160, -162, -157, -158,
	199, 200, 115, 203, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 31, 156, 195, 196, 197, 198,
	215, 216, 217, 218, 219, 220, 221, 222, 182, 201,
	276, 183, 184, 185, 186, 187, 188, 190, 191, 192,
	193, 194, -202, -151, 134, -202, 81, -202, -65, -65,
	-151, -151, -151, 168, 168, 132, 132, 173, -65, 59,
	135, -59, 24, 56, -65, -202, -202, -144, -143, -135,
	-151, -126, 65, -50, -151, -151, -151, -65, -151, -151,
	65, -181, 12, 99, -151, -151, 12, -122, 12, 99,
	-50, -127, 56, -149, 179, 213, 364, 365, 366, -50,
	-50, -50, -50, -83, 74, 81, 75, 76, -76, -84,
	-87, -90, 70, 99, 97, 98, 83, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -152, -202, 65, -202, -75, -75, -137, -46,
	22, 36, -45, -138, -144, -135, -35, -212, -212, -99,
	-45, -45, -50, -50, -92, 65, -45, -92, 65, -45,
	-45, -40, 22, 36, -93, -94, 85, -92, -137, -143,
	-212, -76, -137, -137, -45, -46, -46, -45, -45, -103,
	-212, 10, 99, 59, 19, 59, -102, 25, 26, -103,
	-77, -137, 66, 69, -51, 59, 12, -49, -65, -139,
	106, -144, -65, -107, 162, -65, 31, 59, -61, -63,
	-62, -64, 46, 50, 52, 47, 48, 49, 53, -147,
	23, -52, -3, -211, -146, 162, -145, 23, -143, 65,
	-107, 57, -52, -65, -52, -67, -143, 106, -114, -116,
	59, 248, 250, 251, 56, 77, -50, -168, 114, -187,
	-188, -189, -138, 65, 66, -176, -177, -178, -190, 148,
	-195, 139, 141, 138, -179, 149, 133, 29, 60, -130,
	74, 81, -172, 227, -163, 58, -163, -163, -163, -163,
	-167, 202, -167, -167, -167, 58, 58, -163, -163, -163,
	-169, 58, -169, -169, -170, 58, -170, -141, 57, -65,
	-151, 24, -151, -131, 129, 126, 127, -198, 125, 224,
	202, 72, 30, 16, 266, 162, 281, -202, 163, -65,
	-65, -65, -65, -65, 129, 126, -65, -65, -65, -151,
	-65, -65, -126, -143, -143, -65, -137, 74, 75, 76,
	-84, -76, -76, -76, -44, 157, 80, -212, -212, -45,
	-45, -211, 121, -5, -103, -212, -212, 59, 57, 23,
	12, 12, -212, 12, 12, -212, -212, -45, -96, -94,
	87, -50, -212, 121, -212, 59, 59, -212, -212, -212,
	-212, -212, -104, 41, -50, -50, -101, -104, -118, 20,
	12, 37, 37, -70, 13, -47, -52, -49, 121, -70,
	-74, 31, 37, -3, -211, -211, -110, -113, -92, -53,
	-54, -54, -53, -54, 46, 46, 46, 51, 46, 51,
	46, -62, -143, -212, -212, -3, -69, 54, 136, 55,
	-211, -145, -70, -52, -70, -70, 121, -115, -117, 252,
	249, 255, -202, 65, 59, -189, 89, 58, -202, 29,
	-179, -179, -182, -202, -182, 29, -165, 30, 74, -173,
	228, 66, -167, -167, -168, 31, -168, -168, -168, -175,
	65, -175, 66, 66, 56, -137, -151, -150, -205, 144,
	140, 148, 149, 142, 61, 62, 63, 133, 29, 139,
	141, 162, 138, -205, -132, -133, 135, 23, 133, 29,
	162, -204, 57, 168, 224, 168, 135, -151, -122, -122,
	-44, 80, -76, -76, -212, -212, -46, -138, -99, -104,
	-155, 115, 199, 156, 197, 193, 213, 204, 226, 195,
	227, -152, -155, -76, -76, -76, -76, 275, -99, 88,
	-50, 86, -138, -76, -76, 42, -65, -97, 14, -50,
	106, -103, -109, 56, -110, -86, -88, -87, -211, -105,
	-137, -108, -137, -70, 59, 89, -57, -56, 56, 57,
	-58, 56, -56, 46, 46, -212, 133, 133, 133, -108,
	-99, -70, 249, 253, 254, -188, -189, -192, -191, -137,
	-195, -182, -182, 58, -166, 56, -76, 60, -168, -168,
	-202, 115, 60, 59, 60, 59, 60, 59, -65, -150,
	-150, -65, -150, -137, -201, 278, -203, -202, -137, -137,
	-137, -65, -126, -126, -76, -212, -103, -212, -163, -163,
	-163, -170, -163, 187, -163, 187, -212, -212, 20, 20,
	20, 20, -211, -43, 271, -50, 59, 59, -98, 15,
	17, 28, -109, 59, -212, -212, 59, 121, -212, 59,
	-99, -113, -50, -50, 58, -50, -211, -211, -211, -212,
	-103, 60, 59, -163, -106, -137, -171, 224, 10, -167,
	65, -167, 66, 66, -151, 27, -200, -199, -138, 58,
	57, -104, -167, -202, -76, -76, -76, -76, -76, -103,
	65, -76, -76, -50, -85, 29, -88, 37, -3, -137,
	-137, -137, -103, -106, -106, -212, -106, -106, -146, -194,
	-193, 57, 143, 72, -191, 60, 59, -174, 139, 29,
	138, -79, -168, -168, 60, 60, -211, 59, 89, -106,
	-65, -212, -212, -212, -212, -42, 99, 278, -212, -212,
	-212, 10, -86, 121, 60, -212, -212, -212, -69, -193,
	-202, -183, 89, 65, 151, -137, -164, 72, 29, 29,
	-196, -197, 162, -199, -189, 60, -212, 276, 53, 279,
	-110, -137, 66, -65, 65, -212, 59, -137, -204, 42,
	277, 280, 58, -197, 37, -201, 42, -106, 164, 278,
	60, 165, 279, -207, -208, 56, -211, 280, -208, 56,
	11, 10, -76, 161, -206, 152, 147, 150, 31, -206,
	-212, -212, 146, 30, 74,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 621, 0,
	362, 362, 362, 362, 362, 362, 362, 0, 691, 674,
	0, 0, 0, 0, -2, 327, 328, 0, 330, -2,
	0, 0, 339, 1002, 1002, 0, 0, 1002, 0, 1000,
	47, 48, 345, 346, 347, 1, 3, 0, 366, 629,
	0, 0, -2, 364, 0, 0, 674, 674, 0, 0,
	76, 77, 0, 0, 0, 987, 0, 672, 672, 672,
	692, 693, 696, 697, 30, 31, 32, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 0, 0, 0, 0, 0, 675, 0,
	670, 0, 670, 670, 670, 0, 276, 444, 700, 701,
	987, 0, 0, 0, 318, 0, 321, 321, 321, 290,
	0, 292, 1003, 0, 1003, 0, 299, 0, 0, 305,
	1003, 310, 324, 325, 312, 326, 329, 0, 334, 337,
	0, 352, 0, 864, 344, 357, 358, 1002, 1002, 361,
	33, 495, 454, 0, 460, 462, 0, 497, 498, 499,
	500, 501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 527, 528, 529, 530, 606, 607, 608, 609,
	610, 611, 612, 613, 464, 465, 603, 0, 651, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	564, 564, 564, 564, 564, 564, 564, 564, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 621, 43, 0,
	362, 367, 368, 633, 0, 0, 621, 1001, 0, 0,
	-2, -2, 378, 384, 385, 386, 387, 363, 0, 390,
	394, 0, 0, 0, 0, 0, 0, 0, 56, 58,
	444, 62, 0, 975, 655, -2, -2, 0, 0, 698,
	699, -2, 836, -2, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 0, 0, 95, 0, 93, 0, 1003,
	0, 0, 0, 0, 0, 0, 1003, 1003, 1003, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 275, 0, 277, 1003, 318, 280, 0, 0, 1003,
	1003, 1003, 0, 1003, 1003, 287, 0, 288, 289, 0,
	197, 198, 199, 293, 1004, 1005, 1003, 1003, 295, 0,
	315, 313, 314, 307, 308, 0, 321, 302, 303, 306,
	335, 338, 355, 353, 354, 356, 348, 349, 350, 351,
	0, 359, 360, 0, 0, 0, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 482, 483,
	484, 485, 486, 487, 488, 461, 0, 475, 0, 0,
	0, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	0, 375, 0, 0, 0, 621, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 595, 0, 548, 556, 0,
	549, 557, 550, 558, 551, 0, 552, 559, 553, 560,
	554, 555, 561, 0, 0, 0, 375, 375, 0, 0,
	629, 0, 377, 34, 0, 0, 630, 622, 623, 626,
	629, 0, 399, 388, 379, 382, 383, 365, 0, 391,
	395, 0, 397, 398, 0, 0, 60, 0, 443, 0,
	401, 403, 404, 405, 425, 0, 427, -2, 0, 0,
	0, 54, 55, 0, 0, 0, 0, 975, 661, 0,
	64, 65, 0, 0, 0, 173, 665, 666, 667, 663,
	222, 0, 0, 161, 157, 101, 102, 103, 150, 105,
	150, 150, 150, 150, 170, 170, 170, 170, 133, 134,
	135, 136, 137, 0, 0, 120, 150, 150, 150, 124,
	140, 141, 142, 143, 144, 145, 146, 147, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 152, 152, 152,
	154, 154, 694, 79, 0, 1003, 0, 1003, 91, 0,
	236, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 671, 0, 1003, 273, 274, 445, 702, 703,
	278, 279, 319, 320, 281, 282, 283, 284, 285, 286,
	322, 0, 200, 201, 294, 298, 0, 318, 0, 0,
	300, 301, 0, 0, 336, 340, 341, 342, 343, 496,
	455, 456, 457, 459, 476, 0, 478, 480, 466, 467,
	491, 492, 493, 0, 0, 0, 0, 489, 471, 0,
	502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
	512, 513, 516, 579, 580, 0, 514, 515, 526, 0,
	0, 0, 376, 604, 0, -2, 0, 494, 650, 629,
	0, 0, 0, 0, 499, 606, 0, 499, 606, 0,
	0, 0, 373, 374, 601, 598, 0, 0, 603, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 633,
	44, 634, 0, 0, 0, 0, 625, 627, 628, 633,
	0, 614, 0, 0, 452, 0, 0, 380, 40, 396,
	392, 0, 452, 0, 0, 442, 0, 0, 0, 0,
	0, 0, 432, 0, 0, 435, 0, 0, 0, 0,
	426, 0, 0, 0, 447, 919, 428, 0, 430, 431,
	452, 0, 452, 57, 452, 59, 0, 446, 656, 63,
	0, 0, 68, 69, 657, 658, 659, 660, 0, 92,
	223, 225, 228, 229, 230, 96, 97, 98, 0, 0,
	210, 0, 0, 204, 204, 0, 202, 203, 94, 164,
	162, 0, 159, 158, 104, 0, 170, 170, 127, 128,
	173, 0, 173, 173, 173, 0, 0, 121, 122, 123,
	115, 0, 116, 117, 118, 0, 119, 0, 0, 1003,
	81, 673, 82, 1002, 0, 0, 686, 237, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 0, 83,
	241, 243, 242, 246, 0, 0, 0, 268, 1003, 272,
	315, 315, 297, 316, 317, 304, 332, 477, 479, 481,
	468, 489, 472, 0, 469, 0, 0, 463, 531, 0,
	0, 375, 0, 621, 633, 535, 536, 0, 0, 0,
	0, 0, 572, 0, 0, 573, 0, 621, 0, 599,
	0, 0, 547, 0, 566, 0, 0, 567, 568, 569,
	570, 571, 36, 0, 631, 632, 624, 35, 0, 668,
	669, 615, 616, 617, 0, 389, 400, 381, 0, 629,
	644, 0, 0, 637, 0, 0, 452, 652, 0, 402,
	421, 423, 0, 418, 433, 434, 436, 0, 438, 0,
	440, 441, 406, 407, 408, 0, 409, 0, 0, 0,
	0, 429, 621, 452, 52, 53, 0, 66, 67, 0,
	0, 73, 174, 175, 0, 226, 0, 0, 0, 192,
	204, 204, 195, 205, 196, 0, 166, 0, 163, 100,
	160, 0, 173, 173, 129, 0, 130, 131, 132, 0,
	148, 0, 0, 0, 0, 695, 80, 231, 1002, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 1002, 0, 1002, 687, 688, 689, 690,
	0, 86, 0, 0, 0, 0, 0, 271, 318, 318,
	470, 0, 490, 473, 532, 533, 0, 605, 629, 38,
	0, 150, 150, 584, 150, 154, 587, 150, 589, 150,
	592, 0, 0, 0, 0, 0, 0, 0, 596, 546,
	602, 0, 604, 0, 0, 635, 37, 619, 0, 453,
	393, 41, 45, 0, 644, 636, 646, 648, 0, 0,
	640, 0, 413, 621, 0, 0, 415, 422, 0, 0,
	416, 0, 417, 437, 439, -2, 0, 0, 0, 0,
	629, 51, 70, 71, 72, 224, 227, 0, 206, 150,
	209, 193, 194, 0, 168, 0, 165, 151, 125, 126,
	171, 172, 170, 0, 170, 0, 155, 0, 1003, 232,
	233, 234, 235, 0, 240, 0, 84, 85, 0, 0,
	245, 269, 291, 296, 474, 534, 633, 537, 581, 170,
	585, 586, 588, 590, 591, 593, 539, 538, 0, 0,
	0, 0, 0, 629, 0, 600, 0, 0, 42, 0,
	0, 0, 46, 0, 649, 0, 0, 0, 61, 0,
	629, 653, 654, 419, 0, 424, 0, 0, 0, 427,
	50, 184, 0, 208, 0, 411, 176, 169, 0, 173,
	149, 173, 0, 0, 78, 0, 87, 88, 0, 0,
	0, 39, 582, 583, 0, 0, 0, 0, 574, 0,
	597, 0, 0, 620, 618, 0, 647, 0, 639, 642,
	641, 414, 49, 0, 0, 449, 0, 0, 447, 183,
	185, 0, 190, 0, 207, 0, 0, 181, 0, 178,
	180, 167, 138, 139, 153, 156, 0, 0, 0, 0,
	247, 540, 542, 541, 543, 0, 0, 0, 545, 562,
	563, 0, 638, 0, 420, 448, 450, 451, 410, 186,
	187, 0, 191, 189, 0, 412, 99, 0, 177, 179,
	0, 263, 0, 89, 90, 83, 544, 0, 0, 0,
	645, 643, 188, 0, 182, 262, 0, 0, 86, 575,
	0, 578, 0, 264, 0, 244, 576, 0, 0, 0,
	211, 0, 0, 212, 213, 0, 0, 577, 214, 0,
	0, 0, 0, 0, 215, 217, 218, 0, 0, 216,
	265, 266, 219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 367,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:376
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:396
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:402
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:441
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:461
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereStr, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:486
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:498
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
			yyVAL.str = InsertStr
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.str = ReplaceStr
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:538
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:548
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:562
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:567
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:571
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:603
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.str = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.str = SessionStr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.str = GlobalStr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:656
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:661
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:665
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:669
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:673
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:678
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:682
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:693
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:698
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:721
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:728
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:735
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:739
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:750
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:754
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:758
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:764
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1000
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1009
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1048
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1080
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1085
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1089
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1094
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1120
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1151
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1186
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1262
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1278
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1289
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1293
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1297
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1301
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1313
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1327
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1396
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1401
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1418
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1508
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1514
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1524
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1528
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1540
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1544
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1556
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1595
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1630
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1640
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1649
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1670
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1675
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1697
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1744
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.str = "extended "
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = "full "
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1782
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1788
		{
			yyVAL.showFilter = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1796
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = SessionStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = GlobalStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &Begin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Begin{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.statement = &Commit{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.statement = &Rollback{}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1856
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1866
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = JSONStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = TreeStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = VitessStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.str = TraditionalStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = AnalyzeStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1941
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &OtherRead{}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1983
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1987
		{
			setAllowComments(yylex, true)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1991
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1997
		{
			yyVAL.bytes2 = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = UnionStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = UnionAllStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = UnionDistinctStr
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = SQLCacheStr
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = DistinctStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = DistinctStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2046
		{
			yyVAL.selectExprs = nil
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.strs = nil
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2063
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2071
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = SQLCacheStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = DistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = DistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = StraightJoinHint
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2117
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2125
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2130
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2164
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2174
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2198
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2231
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2235
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2243
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2251
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2255
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2261
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2263
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2266
		{
			yyVAL.empty = struct{}{}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2268
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2286
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = JoinStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = StraightJoinStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = LeftJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = RightJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = NaturalJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2369
		{
			yyVAL.indexHints = nil
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2373
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2381
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2385
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2448
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = IsNullStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = IsNotNullStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = IsTrueStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = IsNotTrueStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.str = IsFalseStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = IsNotFalseStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.str = EqualStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.str = LessThanStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.str = GreaterThanStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.str = LessEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.str = GreaterEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.str = NotEqualStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2585
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2721
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2939
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = BooleanModeStr
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2947
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = QueryExpansionStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3035
		{
			yyVAL.str = string("")
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3055
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3078
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &NullVal{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3136
		{
			yyVAL.exprs = nil
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3140
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3149
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3154
		{
			yyVAL.orderBy = nil
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3158
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3174
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.str = AscScr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.str = AscScr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.str = DescScr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3192
		{
			yyVAL.limit = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3196
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3200
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3204
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.str = ForUpdateStr
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3217
		{
			yyVAL.str = ShareModeStr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3230
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3238
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3242
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3252
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3256
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3260
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3265
		{
			yyVAL.updateExprs = nil
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3269
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3295
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3301
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3315
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3321
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3331
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3337
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("on"))}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3341
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrLiteral([]byte("off"))}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3345
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3349
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.bytes = []byte("charset")
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = &Default{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3385
		{
			yyVAL.boolean = false
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3387
		{
			yyVAL.boolean = true
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3390
		{
			yyVAL.boolean = false
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.boolean = true
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3395
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.str = IgnoreStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3417
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3419
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3422
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3435
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3442
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3444
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3452
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3798
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3807
		{
			decNesting(yylex)
		}
	case 1002:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3812
		{
			skipToEnd(yylex)
		}
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3817
		{
			skipToEnd(yylex)
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3821
		{
			skipToEnd(yylex)
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3825
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

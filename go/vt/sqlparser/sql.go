// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	derivedTable           *DerivedTable
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
	createDatabase         *CreateDatabase
	alterDatabase          *AlterDatabase
	collateAndCharset      CollateAndCharset
	collateAndCharsets     []CollateAndCharset
	createTable            *CreateTable
	tableAndLockTypes      []*TableAndLockType
	tableAndLockType       *TableAndLockType
	lockType               LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const AT_ID = 57423
const AT_AT_ID = 57424
const HEX = 57425
const STRING = 57426
const INTEGRAL = 57427
const FLOAT = 57428
const HEXNUM = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const BIT_LITERAL = 57434
const NULL = 57435
const TRUE = 57436
const FALSE = 57437
const OFF = 57438
const OR = 57439
const XOR = 57440
const AND = 57441
const NOT = 57442
const BETWEEN = 57443
const CASE = 57444
const WHEN = 57445
const THEN = 57446
const ELSE = 57447
const END = 57448
const LE = 57449
const GE = 57450
const NE = 57451
const NULL_SAFE_EQUAL = 57452
const IS = 57453
const LIKE = 57454
const REGEXP = 57455
const IN = 57456
const SHIFT_LEFT = 57457
const SHIFT_RIGHT = 57458
const DIV = 57459
const MOD = 57460
const UNARY = 57461
const COLLATE = 57462
const BINARY = 57463
const UNDERSCORE_BINARY = 57464
const UNDERSCORE_UTF8MB4 = 57465
const UNDERSCORE_UTF8 = 57466
const UNDERSCORE_LATIN1 = 57467
const INTERVAL = 57468
const JSON_EXTRACT_OP = 57469
const JSON_UNQUOTE_EXTRACT_OP = 57470
const CREATE = 57471
const ALTER = 57472
const DROP = 57473
const RENAME = 57474
const ANALYZE = 57475
const ADD = 57476
const FLUSH = 57477
const SCHEMA = 57478
const TABLE = 57479
const INDEX = 57480
const VIEW = 57481
const TO = 57482
const IGNORE = 57483
const IF = 57484
const UNIQUE = 57485
const PRIMARY = 57486
const COLUMN = 57487
const SPATIAL = 57488
const FULLTEXT = 57489
const KEY_BLOCK_SIZE = 57490
const CHECK = 57491
const INDEXES = 57492
const ACTION = 57493
const CASCADE = 57494
const CONSTRAINT = 57495
const FOREIGN = 57496
const NO = 57497
const REFERENCES = 57498
const RESTRICT = 57499
const SHOW = 57500
const DESCRIBE = 57501
const EXPLAIN = 57502
const DATE = 57503
const ESCAPE = 57504
const REPAIR = 57505
const OPTIMIZE = 57506
const TRUNCATE = 57507
const MAXVALUE = 57508
const PARTITION = 57509
const REORGANIZE = 57510
const LESS = 57511
const THAN = 57512
const PROCEDURE = 57513
const TRIGGER = 57514
const VINDEX = 57515
const VINDEXES = 57516
const DIRECTORY = 57517
const NAME = 57518
const UPGRADE = 57519
const STATUS = 57520
const VARIABLES = 57521
const WARNINGS = 57522
const CASCADED = 57523
const DEFINER = 57524
const OPTION = 57525
const SQL = 57526
const UNDEFINED = 57527
const SEQUENCE = 57528
const MERGE = 57529
const TEMPTABLE = 57530
const INVOKER = 57531
const SECURITY = 57532
const BEGIN = 57533
const START = 57534
const TRANSACTION = 57535
const COMMIT = 57536
const ROLLBACK = 57537
const SAVEPOINT = 57538
const RELEASE = 57539
const WORK = 57540
const BIT = 57541
const TINYINT = 57542
const SMALLINT = 57543
const MEDIUMINT = 57544
const INT = 57545
const INTEGER = 57546
const BIGINT = 57547
const INTNUM = 57548
const REAL = 57549
const DOUBLE = 57550
const FLOAT_TYPE = 57551
const DECIMAL = 57552
const NUMERIC = 57553
const TIME = 57554
const TIMESTAMP = 57555
const DATETIME = 57556
const YEAR = 57557
const CHAR = 57558
const VARCHAR = 57559
const BOOL = 57560
const CHARACTER = 57561
const VARBINARY = 57562
const NCHAR = 57563
const TEXT = 57564
const TINYTEXT = 57565
const MEDIUMTEXT = 57566
const LONGTEXT = 57567
const BLOB = 57568
const TINYBLOB = 57569
const MEDIUMBLOB = 57570
const LONGBLOB = 57571
const JSON = 57572
const ENUM = 57573
const GEOMETRY = 57574
const POINT = 57575
const LINESTRING = 57576
const POLYGON = 57577
const GEOMETRYCOLLECTION = 57578
const MULTIPOINT = 57579
const MULTILINESTRING = 57580
const MULTIPOLYGON = 57581
const NULLX = 57582
const AUTO_INCREMENT = 57583
const APPROXNUM = 57584
const SIGNED = 57585
const UNSIGNED = 57586
const ZEROFILL = 57587
const COLLATION = 57588
const DATABASES = 57589
const SCHEMAS = 57590
const TABLES = 57591
const VITESS_METADATA = 57592
const VSCHEMA = 57593
const FULL = 57594
const PROCESSLIST = 57595
const COLUMNS = 57596
const FIELDS = 57597
const ENGINES = 57598
const PLUGINS = 57599
const EXTENDED = 57600
const KEYSPACES = 57601
const VITESS_KEYSPACES = 57602
const VITESS_SHARDS = 57603
const VITESS_TABLETS = 57604
const NAMES = 57605
const CHARSET = 57606
const GLOBAL = 57607
const SESSION = 57608
const ISOLATION = 57609
const LEVEL = 57610
const READ = 57611
const WRITE = 57612
const ONLY = 57613
const REPEATABLE = 57614
const COMMITTED = 57615
const UNCOMMITTED = 57616
const SERIALIZABLE = 57617
const CURRENT_TIMESTAMP = 57618
const DATABASE = 57619
const CURRENT_DATE = 57620
const CURRENT_TIME = 57621
const LOCALTIME = 57622
const LOCALTIMESTAMP = 57623
const CURRENT_USER = 57624
const UTC_DATE = 57625
const UTC_TIME = 57626
const UTC_TIMESTAMP = 57627
const REPLACE = 57628
const CONVERT = 57629
const CAST = 57630
const SUBSTR = 57631
const SUBSTRING = 57632
const GROUP_CONCAT = 57633
const SEPARATOR = 57634
const TIMESTAMPADD = 57635
const TIMESTAMPDIFF = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const QUERY = 57642
const EXPANSION = 57643
const UNUSED = 57644
const ARRAY = 57645
const CUME_DIST = 57646
const DESCRIPTION = 57647
const DENSE_RANK = 57648
const EMPTY = 57649
const EXCEPT = 57650
const FIRST_VALUE = 57651
const GROUPING = 57652
const GROUPS = 57653
const JSON_TABLE = 57654
const LAG = 57655
const LAST_VALUE = 57656
const LATERAL = 57657
const LEAD = 57658
const MEMBER = 57659
const NTH_VALUE = 57660
const NTILE = 57661
const OF = 57662
const OVER = 57663
const PERCENT_RANK = 57664
const RANK = 57665
const RECURSIVE = 57666
const ROW_NUMBER = 57667
const SYSTEM = 57668
const WINDOW = 57669
const ACTIVE = 57670
const ADMIN = 57671
const BUCKETS = 57672
const CLONE = 57673
const COMPONENT = 57674
const DEFINITION = 57675
const ENFORCED = 57676
const EXCLUDE = 57677
const FOLLOWING = 57678
const GEOMCOLLECTION = 57679
const GET_MASTER_PUBLIC_KEY = 57680
const HISTOGRAM = 57681
const HISTORY = 57682
const INACTIVE = 57683
const INVISIBLE = 57684
const LOCKED = 57685
const MASTER_COMPRESSION_ALGORITHMS = 57686
const MASTER_PUBLIC_KEY_PATH = 57687
const MASTER_TLS_CIPHERSUITES = 57688
const MASTER_ZSTD_COMPRESSION_LEVEL = 57689
const NESTED = 57690
const NETWORK_NAMESPACE = 57691
const NOWAIT = 57692
const NULLS = 57693
const OJ = 57694
const OLD = 57695
const OPTIONAL = 57696
const ORDINALITY = 57697
const ORGANIZATION = 57698
const OTHERS = 57699
const PATH = 57700
const PERSIST = 57701
const PERSIST_ONLY = 57702
const PRECEDING = 57703
const PRIVILEGE_CHECKS_USER = 57704
const PROCESS = 57705
const RANDOM = 57706
const REFERENCE = 57707
const REQUIRE_ROW_FORMAT = 57708
const RESOURCE = 57709
const RESPECT = 57710
const RESTART = 57711
const RETAIN = 57712
const REUSE = 57713
const ROLE = 57714
const SECONDARY = 57715
const SECONDARY_ENGINE = 57716
const SECONDARY_LOAD = 57717
const SECONDARY_UNLOAD = 57718
const SKIP = 57719
const SRID = 57720
const THREAD_PRIORITY = 57721
const TIES = 57722
const UNBOUNDED = 57723
const VCPU = 57724
const VISIBLE = 57725
const FORMAT = 57726
const TREE = 57727
const VITESS = 57728
const TRADITIONAL = 57729
const LOCAL = 57730
const LOW_PRIORITY = 57731

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"DIRECTORY",
	"NAME",
	"UPGRADE",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CASCADED",
	"DEFINER",
	"OPTION",
	"SQL",
	"UNDEFINED",
	"SEQUENCE",
	"MERGE",
	"TEMPTABLE",
	"INVOKER",
	"SECURITY",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"CURRENT_USER",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"LOCAL",
	"LOW_PRIORITY",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	155, 805,
	-2, 89,
	-1, 43,
	136, 112,
	236, 112,
	-2, 106,
	-1, 50,
	34, 352,
	155, 352,
	167, 352,
	195, 366,
	196, 366,
	-2, 354,
	-1, 55,
	157, 376,
	-2, 374,
	-1, 79,
	55, 419,
	-2, 427,
	-1, 103,
	136, 112,
	236, 112,
	-2, 107,
	-1, 446,
	143, 815,
	-2, 811,
	-1, 447,
	143, 816,
	-2, 812,
	-1, 464,
	55, 420,
	-2, 432,
	-1, 465,
	55, 421,
	-2, 433,
	-1, 485,
	111, 1103,
	-2, 82,
	-1, 486,
	111, 1003,
	-2, 83,
	-1, 491,
	111, 961,
	-2, 776,
	-1, 493,
	111, 1044,
	-2, 778,
	-1, 648,
	136, 112,
	236, 112,
	-2, 278,
	-1, 1036,
	143, 818,
	-2, 814,
	-1, 1128,
	73, 64,
	81, 64,
	-2, 68,
	-1, 1527,
	5, 673,
	18, 673,
	20, 673,
	32, 673,
	82, 673,
	-2, 458,
	-1, 1737,
	45, 747,
	-2, 745,
}

const yyPrivate = 57344

const yyLast = 20423

var yyAct = [...]int{
	446, 1831, 1575, 1784, 1713, 1350, 390, 1683, 1737, 1443,
	1637, 1820, 1150, 78, 3, 1318, 1660, 405, 419, 457,
	1507, 1201, 1075, 760, 1504, 1146, 1337, 1508, 1195, 804,
	1351, 1418, 923, 1159, 811, 1149, 1419, 662, 628, 682,
	957, 1125, 625, 1464, 1277, 1180, 113, 1395, 1519, 125,
	490, 359, 125, 1492, 680, 1030, 1023, 371, 1203, 125,
	622, 976, 1411, 1164, 848, 841, 76, 1107, 1114, 378,
	832, 466, 1077, 831, 814, 834, 809, 392, 798, 1000,
	1090, 451, 1056, 1224, 838, 629, 381, 371, 31, 621,
	371, 125, 371, 1191, 847, 1130, 845, 74, 821, 388,
	971, 671, 104, 105, 79, 986, 773, 1072, 1073, 73,
	125, 125, 1795, 774, 1316, 1734, 8, 7, 125, 6,
	654, 913, 1685, 125, 1560, 1647, 487, 1824, 1781, 1818,
	379, 380, 75, 1204, 1760, 1810, 1576, 1780, 1759, 81,
	82, 83, 84, 85, 86, 1481, 935, 33, 34, 35,
	67, 37, 38, 1605, 1206, 637, 472, 476, 101, 109,
	934, 110, 1433, 452, 1317, 33, 1432, 71, 67, 37,
	38, 1533, 39, 64, 65, 1140, 62, 1534, 1535, 114,
	115, 116, 63, 484, 695, 1724, 722, 721, 731, 732,
	724, 725, 726, 727, 728, 729, 730, 723, 450, 1381,
	733, 1033, 1380, 96, 449, 1382, 639, 638, 1141, 1142,
	849, 51, 850, 114, 115, 116, 101, 118, 119, 120,
	1403, 66, 688, 689, 933, 1205, 431, 1074, 437, 438,
	435, 436, 690, 434, 433, 432, 691, 688, 689, 66,
	1174, 1445, 1640, 439, 440, 1762, 114, 115, 116, 1181,
	668, 1596, 670, 1594, 369, 985, 101, 93, 641, 694,
	987, 988, 989, 97, 367, 373, 98, 99, 1429, 1569,
	685, 945, 1212, 111, 1816, 916, 1570, 930, 927, 928,
	1214, 926, 1215, 1216, 667, 669, 693, 42, 44, 47,
	46, 49, 649, 61, 683, 684, 944, 1448, 1254, 100,
	1447, 942, 1809, 1714, 1797, 1108, 1743, 1246, 1837, 1446,
	1808, 1199, 678, 653, 937, 940, 50, 70, 69, 1796,
	946, 59, 60, 48, 1199, 1835, 1199, 634, 1465, 1540,
	624, 1168, 943, 1258, 478, 1319, 1321, 1449, 1703, 125,
	660, 950, 698, 666, 1428, 1168, 1741, 1491, 1490, 52,
	53, 371, 54, 55, 56, 57, 1243, 100, 640, 1489,
	371, 635, 1245, 338, 117, 1253, 932, 1626, 1252, 1467,
	745, 746, 1559, 1532, 371, 371, 1207, 1342, 1431, 881,
	1725, 1296, 1306, 1758, 1293, 114, 115, 116, 931, 704,
	665, 1285, 1136, 825, 758, 1147, 696, 100, 647, 1181,
	658, 722, 721, 731, 732, 724, 725, 726, 727, 728,
	729, 730, 723, 723, 697, 733, 733, 733, 1469, 1377,
	1473, 1261, 1468, 1320, 1466, 1007, 1260, 977, 1086, 1471,
	114, 115, 116, 677, 936, 103, 672, 1763, 1470, 1005,
	1006, 1004, 972, 1775, 68, 679, 673, 674, 675, 938,
	125, 1472, 1474, 713, 664, 89, 461, 1167, 1278, 1057,
	1716, 924, 68, 1833, 1517, 743, 1834, 802, 1832, 1704,
	1702, 1167, 644, 1213, 645, 371, 686, 646, 125, 917,
	125, 125, 851, 371, 1551, 869, 801, 708, 1244, 371,
	1242, 1483, 707, 705, 90, 706, 722, 721, 731, 732,
	724, 725, 726, 727, 728, 729, 730, 723, 652, 761,
	733, 919, 1401, 745, 746, 1746, 745, 746, 796, 710,
	818, 830, 487, 1646, 1088, 799, 882, 724, 725, 726,
	727, 728, 729, 730, 723, 713, 978, 733, 815, 776,
	778, 780, 782, 784, 786, 787, 777, 779, 648, 783,
	785, 973, 788, 1838, 633, 1234, 1091, 1092, 1645, 803,
	663, 1057, 1565, 1303, 895, 898, 899, 900, 901, 902,
	903, 1415, 904, 905, 906, 907, 908, 883, 884, 885,
	886, 867, 868, 896, 1414, 870, 1087, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 887, 888, 889,
	890, 891, 892, 893, 894, 711, 712, 710, 1210, 1230,
	1231, 1232, 726, 727, 728, 729, 730, 723, 1291, 1839,
	733, 125, 1416, 713, 1292, 909, 1290, 1811, 1171, 655,
	656, 711, 712, 710, 125, 1172, 920, 921, 712, 710,
	711, 712, 710, 939, 371, 711, 712, 710, 125, 713,
	636, 1802, 66, 125, 1812, 713, 125, 956, 713, 125,
	1494, 371, 897, 713, 1003, 813, 371, 371, 371, 125,
	371, 371, 995, 997, 998, 711, 712, 710, 1803, 996,
	1814, 1233, 1813, 1485, 371, 371, 1238, 1235, 1226, 1236,
	1229, 1804, 1225, 713, 1792, 1773, 1227, 1228, 941, 961,
	1673, 711, 712, 710, 1643, 711, 712, 710, 1495, 959,
	1237, 1270, 1271, 1272, 1614, 960, 1566, 1608, 1496, 713,
	964, 965, 966, 713, 968, 969, 114, 115, 116, 1425,
	1025, 114, 115, 116, 1024, 1001, 1412, 951, 974, 975,
	114, 115, 116, 1026, 1437, 970, 114, 115, 116, 980,
	1384, 639, 638, 962, 846, 1572, 461, 371, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	477, 1709, 733, 1045, 1048, 1516, 114, 115, 116, 1058,
	1222, 1700, 1815, 1700, 1756, 1752, 461, 979, 1700, 1750,
	371, 371, 1700, 1742, 1002, 982, 1040, 75, 1034, 1035,
	1708, 125, 408, 407, 410, 411, 412, 413, 1657, 1036,
	1132, 409, 414, 371, 1700, 461, 1700, 1699, 447, 1132,
	125, 1081, 1338, 371, 912, 1636, 77, 125, 1338, 125,
	1427, 1093, 1169, 761, 1613, 461, 1621, 125, 125, 1624,
	461, 482, 1557, 1556, 371, 1027, 1028, 371, 1066, 1067,
	1126, 1553, 1554, 1553, 1552, 479, 480, 1037, 371, 371,
	1099, 461, 1111, 461, 33, 1034, 1105, 126, 709, 461,
	126, 1133, 912, 911, 461, 372, 1036, 126, 1648, 1135,
	1133, 858, 857, 487, 33, 1505, 487, 1101, 1131, 1345,
	1111, 1099, 1371, 1100, 1516, 709, 1516, 1151, 1715, 1110,
	1131, 1166, 33, 1555, 1111, 372, 1385, 1139, 372, 126,
	372, 1346, 1309, 371, 1308, 1099, 1131, 1089, 1182, 1183,
	1184, 1103, 1129, 1070, 1221, 1649, 1650, 1651, 126, 126,
	454, 1690, 949, 843, 66, 1134, 126, 1197, 66, 1138,
	1137, 126, 1793, 125, 125, 125, 125, 125, 1154, 1111,
	125, 125, 1198, 1662, 125, 1220, 1656, 1632, 66, 914,
	1196, 1421, 1099, 1571, 1041, 1042, 1544, 910, 1047, 1050,
	1051, 1389, 125, 1192, 1186, 1185, 66, 91, 125, 125,
	125, 1420, 632, 1652, 125, 371, 1444, 1175, 1663, 1176,
	1177, 1178, 1179, 1065, 1209, 1223, 1068, 1069, 1208, 1193,
	1194, 1520, 1521, 1219, 66, 1187, 1188, 1189, 1190, 1799,
	1826, 1239, 1821, 1546, 1263, 1523, 1505, 1434, 1267, 983,
	953, 1526, 1525, 1001, 717, 1421, 720, 1653, 1654, 1359,
	1358, 1779, 734, 735, 736, 737, 738, 739, 740, 1061,
	718, 719, 716, 722, 721, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 1497, 1364, 733, 1120, 1121,
	1287, 731, 732, 724, 725, 726, 727, 728, 729, 730,
	723, 125, 1327, 733, 1116, 1119, 1120, 1121, 1117, 125,
	1118, 1122, 1002, 1362, 1273, 1777, 812, 1625, 1363, 114,
	115, 116, 1116, 1119, 1120, 1121, 1117, 1336, 1118, 1122,
	1360, 125, 1520, 1521, 1335, 1361, 1768, 1765, 1801, 1783,
	95, 1324, 125, 125, 125, 125, 125, 1352, 460, 1286,
	1785, 1347, 1325, 1331, 125, 1791, 452, 1790, 125, 1738,
	1326, 125, 125, 1343, 1736, 125, 125, 125, 1302, 948,
	448, 1369, 1340, 339, 1426, 1420, 799, 1407, 1383, 1315,
	371, 1323, 342, 1053, 922, 108, 805, 126, 121, 1390,
	352, 467, 1386, 856, 1396, 1396, 1330, 1054, 806, 372,
	1748, 661, 1372, 1341, 1339, 468, 1374, 1400, 372, 107,
	1747, 1688, 1398, 1354, 1355, 1353, 1357, 959, 1356, 1151,
	1391, 1365, 372, 372, 350, 1619, 1370, 1574, 816, 817,
	470, 1375, 469, 357, 1378, 1423, 1406, 1084, 1408, 1409,
	1410, 1217, 1397, 952, 467, 1388, 1091, 1092, 1710, 1124,
	371, 1436, 1404, 1405, 1334, 1392, 1393, 1394, 468, 455,
	456, 458, 1333, 1282, 1283, 1806, 1805, 1788, 1424, 1769,
	1618, 125, 340, 459, 77, 1617, 1500, 371, 1338, 1413,
	692, 464, 465, 470, 1300, 469, 1828, 1827, 371, 125,
	1297, 1422, 1294, 826, 819, 1828, 1739, 1641, 126, 354,
	343, 344, 1085, 355, 356, 363, 454, 75, 80, 347,
	349, 360, 345, 346, 365, 364, 371, 341, 362, 361,
	72, 1, 1024, 372, 1438, 1071, 126, 797, 126, 126,
	358, 372, 1819, 112, 1577, 1659, 929, 372, 1712, 1439,
	1417, 1441, 1450, 1202, 1157, 1148, 88, 1463, 619, 1454,
	87, 1462, 676, 371, 1452, 1461, 1156, 1155, 1453, 1701,
	1402, 1173, 1639, 125, 1545, 1482, 1476, 1399, 1745, 864,
	1460, 862, 863, 371, 861, 866, 1486, 1035, 1475, 371,
	371, 1506, 1352, 865, 860, 351, 984, 1036, 368, 1123,
	852, 820, 1241, 1503, 1240, 1509, 925, 1558, 1170, 348,
	687, 353, 125, 741, 1332, 1379, 488, 1515, 481, 1655,
	1511, 1218, 1461, 420, 32, 94, 371, 1789, 371, 1766,
	371, 1764, 1735, 1396, 1396, 1396, 1684, 1528, 1767, 1530,
	1537, 1531, 1733, 1514, 1800, 1524, 1782, 1083, 1550, 808,
	1616, 1499, 1301, 1529, 770, 1055, 32, 835, 391, 994,
	406, 1536, 403, 404, 1539, 1151, 1094, 1151, 1538, 125,
	1548, 1549, 1344, 1166, 715, 125, 389, 383, 827, 126,
	1541, 1542, 1543, 1115, 1113, 1578, 371, 371, 371, 1112,
	125, 1562, 126, 1563, 1564, 1561, 385, 954, 453, 839,
	1522, 1518, 372, 1607, 833, 1098, 126, 1430, 915, 1211,
	1568, 126, 631, 463, 126, 92, 1052, 126, 1723, 372,
	1604, 462, 1587, 58, 372, 372, 372, 126, 372, 372,
	1583, 1584, 36, 375, 1259, 1794, 1774, 700, 1592, 471,
	30, 29, 372, 372, 722, 721, 731, 732, 724, 725,
	726, 727, 728, 729, 730, 723, 28, 23, 733, 22,
	21, 20, 19, 1352, 25, 18, 17, 16, 106, 102,
	45, 1620, 43, 41, 40, 650, 27, 371, 26, 15,
	14, 1615, 13, 12, 11, 371, 10, 1629, 9, 1386,
	1628, 5, 4, 703, 24, 759, 1635, 2, 0, 0,
	0, 0, 0, 1634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 1151, 371, 1602, 0,
	0, 0, 0, 0, 0, 0, 0, 1589, 1590, 0,
	1591, 1666, 0, 1593, 0, 1595, 0, 0, 1642, 0,
	1644, 0, 0, 0, 0, 0, 0, 0, 372, 372,
	371, 371, 371, 125, 371, 0, 1661, 1664, 0, 126,
	1676, 1678, 1679, 0, 1672, 371, 0, 371, 0, 0,
	0, 372, 0, 371, 0, 1680, 1665, 1691, 126, 0,
	1509, 372, 1687, 1696, 1509, 126, 1693, 126, 1695, 1689,
	0, 0, 0, 0, 1697, 126, 126, 371, 1698, 1705,
	1682, 0, 372, 371, 125, 372, 0, 1711, 1706, 0,
	1707, 0, 0, 1717, 0, 0, 372, 372, 0, 0,
	722, 721, 731, 732, 724, 725, 726, 727, 728, 729,
	730, 723, 0, 0, 733, 0, 1732, 0, 0, 0,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 1509,
	0, 1740, 0, 0, 0, 371, 371, 371, 0, 0,
	0, 0, 0, 0, 1749, 0, 0, 0, 0, 1755,
	0, 372, 1754, 0, 681, 0, 0, 0, 0, 0,
	0, 1761, 371, 681, 125, 1770, 1352, 0, 0, 0,
	0, 0, 0, 0, 0, 1661, 1151, 1776, 0, 32,
	0, 126, 126, 126, 126, 126, 1778, 1786, 126, 126,
	742, 744, 126, 1787, 1601, 0, 0, 0, 0, 0,
	0, 1798, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 371, 0, 126, 126, 126, 1038,
	1039, 757, 126, 372, 1807, 762, 763, 764, 765, 766,
	767, 768, 769, 0, 772, 775, 775, 775, 781, 775,
	775, 781, 775, 789, 790, 791, 792, 793, 794, 795,
	1836, 1825, 0, 0, 0, 0, 0, 32, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 0, 0,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	0, 0, 0, 836, 0, 0, 0, 1600, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 721, 731, 732,
	724, 725, 726, 727, 728, 729, 730, 723, 0, 126,
	733, 1599, 0, 0, 0, 0, 0, 126, 0, 0,
	417, 722, 721, 731, 732, 724, 725, 726, 727, 728,
	729, 730, 723, 0, 0, 733, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 126, 126, 126, 126, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 126, 0, 0, 126,
	126, 0, 0, 126, 126, 126, 0, 370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 722,
	721, 731, 732, 724, 725, 726, 727, 728, 729, 730,
	723, 0, 0, 733, 0, 0, 0, 489, 1455, 0,
	623, 0, 630, 722, 721, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 0, 0, 733, 722, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	0, 0, 733, 0, 0, 0, 0, 681, 0, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	0, 0, 0, 0, 681, 0, 0, 0, 0, 681,
	681, 681, 0, 681, 681, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 372, 1280, 681, 681, 0,
	1281, 0, 0, 0, 0, 0, 372, 126, 0, 0,
	0, 1288, 1289, 0, 0, 0, 0, 1295, 0, 0,
	1298, 1299, 382, 1279, 0, 0, 0, 0, 1305, 0,
	0, 0, 1307, 0, 372, 1310, 1311, 1312, 1313, 1314,
	0, 0, 0, 722, 721, 731, 732, 724, 725, 726,
	727, 728, 729, 730, 723, 0, 0, 733, 0, 721,
	731, 732, 724, 725, 726, 727, 728, 729, 730, 723,
	0, 372, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 0, 0, 1367, 1368, 372, 372, 0,
	0, 0, 999, 0, 0, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 372, 0, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 489, 0, 126, 0, 0, 0, 0, 0, 0,
	489, 0, 0, 0, 372, 372, 372, 0, 126, 0,
	0, 0, 0, 0, 699, 701, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 0, 489, 0, 0, 0, 0, 1512, 853,
	0, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1527,
	0, 0, 0, 0, 714, 0, 0, 0, 1284, 0,
	0, 453, 0, 0, 0, 0, 0, 0, 372, 372,
	372, 126, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 372, 0, 372, 0, 0, 0, 0,
	382, 372, 0, 0, 0, 0, 0, 0, 0, 771,
	1322, 0, 1274, 1275, 1276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 372, 126, 0, 836, 0, 0, 0, 807, 810,
	0, 1348, 1349, 0, 0, 836, 836, 836, 836, 836,
	1586, 0, 0, 0, 1588, 0, 0, 0, 0, 0,
	0, 1127, 0, 0, 836, 1597, 1598, 0, 836, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1612, 372, 372, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 489, 0, 0, 0, 0, 0,
	1622, 1623, 0, 0, 1627, 0, 0, 0, 0, 0,
	372, 489, 126, 0, 0, 0, 489, 489, 489, 0,
	489, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 489, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 418, 0, 0, 1677,
	0, 0, 0, 0, 0, 0, 0, 1029, 0, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 1064, 0, 0, 963, 124, 0, 0, 366, 0,
	0, 0, 0, 0, 0, 124, 0, 1719, 1720, 1721,
	1722, 0, 1726, 1095, 1727, 1728, 1729, 0, 1730, 1731,
	0, 0, 981, 823, 0, 0, 489, 0, 475, 475,
	1510, 0, 32, 0, 0, 1456, 1457, 124, 0, 990,
	991, 992, 993, 0, 489, 0, 0, 489, 0, 0,
	1477, 1478, 1751, 1479, 1480, 836, 124, 124, 489, 623,
	0, 0, 0, 1757, 124, 1487, 1488, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1547, 0, 0,
	0, 0, 1829, 1830, 0, 1603, 0, 0, 0, 0,
	0, 0, 0, 1609, 1610, 1611, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 1585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	1200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 643, 0, 0, 1658, 0,
	0, 0, 651, 0, 0, 0, 0, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 32, 0, 1510,
	0, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	489, 0, 0, 0, 0, 0, 1667, 1668, 1669, 1670,
	1671, 0, 0, 0, 1674, 1675, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 32, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 0, 1328, 1329, 810,
	1435, 0, 0, 0, 124, 0, 124, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 0, 0, 489, 0, 0, 0,
	0, 0, 0, 1817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 489, 0, 0, 1059, 0, 0, 1513,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 1822, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 489, 0, 489, 0,
	630, 0, 0, 0, 124, 0, 0, 0, 0, 124,
	0, 0, 124, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 840, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1579, 1580, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 958, 0, 0, 0, 475,
	475, 0, 0, 475, 475, 475, 0, 1059, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 475, 475,
	475, 475, 475, 0, 0, 1638, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 124, 0, 0, 0,
	0, 0, 958, 124, 0, 124, 0, 489, 918, 0,
	0, 0, 0, 124, 124, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 840, 0, 0,
	955, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1638, 1638, 1638, 967, 1681, 1606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1692, 0, 1694, 0, 0,
	0, 0, 0, 1638, 0, 0, 0, 0, 0, 0,
	382, 0, 0, 0, 0, 0, 0, 1630, 0, 0,
	1631, 0, 0, 1633, 0, 0, 0, 1638, 0, 0,
	0, 0, 0, 1638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	124, 124, 124, 124, 0, 0, 124, 124, 0, 0,
	124, 1744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1753, 489, 489, 124, 0,
	0, 0, 0, 0, 1264, 1265, 124, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 0, 1771, 0, 0, 0, 0, 1686, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 1106, 0, 1109, 0, 0, 0, 0, 475, 475,
	0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1638, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 124, 124,
	124, 124, 124, 0, 0, 0, 0, 0, 0, 0,
	1366, 0, 0, 0, 124, 0, 0, 124, 124, 0,
	0, 124, 1376, 958, 0, 0, 0, 1247, 1248, 1249,
	1250, 1251, 0, 0, 1255, 1256, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1262, 0, 0, 0,
	0, 0, 0, 0, 1266, 0, 0, 0, 1268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1373, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 124, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1567, 0, 0, 0, 0, 0, 1573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1582, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 603, 591, 0, 0, 544, 606, 517,
	534, 615, 535, 538, 576, 501, 557, 236, 532, 0,
	521, 497, 528, 498, 519, 546, 165, 550, 516, 593,
	560, 605, 200, 0, 522, 248, 578, 279, 155, 208,
	206, 301, 170, 166, 164, 154, 187, 213, 247, 297,
	241, 612, 203, 567, 0, 288, 222, 0, 0, 0,
	548, 595, 555, 587, 543, 577, 506, 566, 607, 533,
	574, 608, 191, 153, 131, 233, 289, 172, 0, 0,
	0, 114, 115, 116, 0, 1152, 1153, 0, 1718, 0,
	0, 0, 149, 0, 571, 602, 530, 573, 575, 618,
	496, 568, 0, 499, 502, 614, 598, 525, 526, 1387,
	0, 0, 0, 0, 0, 0, 547, 556, 584, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 523, 0,
	565, 0, 0, 0, 503, 500, 0, 0, 0, 0,
	545, 0, 0, 0, 505, 0, 524, 585, 0, 494,
	177, 589, 597, 542, 325, 601, 540, 539, 604, 259,
	0, 293, 181, 199, 145, 196, 128, 140, 1772, 179,
	232, 266, 270, 594, 520, 529, 156, 527, 268, 245,
	314, 564, 249, 267, 204, 303, 260, 313, 326, 327,
	162, 226, 320, 298, 323, 335, 141, 159, 239, 294,
	317, 285, 221, 300, 195, 284, 133, 296, 311, 150,
	278, 0, 0, 0, 135, 309, 292, 219, 192, 193,
	134, 0, 264, 163, 175, 158, 235, 306, 307, 157,
	336, 142, 322, 137, 143, 321, 228, 302, 310, 220,
	212, 136, 308, 218, 211, 198, 169, 183, 257, 207,
	258, 184, 224, 223, 225, 0, 132, 0, 290, 318,
	337, 147, 515, 590, 299, 331, 334, 0, 261, 148,
	176, 168, 256, 174, 201, 330, 332, 333, 227, 144,
	186, 286, 197, 205, 582, 617, 244, 269, 151, 316,
	287, 510, 514, 508, 509, 558, 559, 511, 609, 610,
	611, 586, 504, 0, 512, 513, 0, 592, 599, 600,
	563, 127, 138, 202, 613, 262, 173, 319, 495, 507,
	161, 518, 0, 0, 531, 536, 537, 549, 551, 552,
	553, 554, 562, 569, 570, 572, 579, 580, 581, 583,
	588, 596, 616, 129, 130, 139, 146, 152, 160, 167,
	171, 178, 182, 185, 188, 189, 190, 194, 210, 214,
	215, 216, 217, 229, 230, 231, 234, 237, 238, 240,
	242, 243, 246, 250, 251, 252, 253, 254, 255, 263,
	265, 271, 272, 273, 274, 275, 276, 277, 280, 281,
	282, 283, 291, 295, 304, 305, 315, 324, 328, 180,
	312, 329, 0, 209, 561, 603, 591, 0, 0, 544,
	606, 517, 534, 615, 535, 538, 576, 501, 557, 236,
	532, 0, 521, 497, 528, 498, 519, 546, 165, 550,
	516, 593, 560, 605, 200, 0, 522, 248, 578, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 612, 203, 567, 0, 288, 222, 0,
	0, 0, 548, 595, 555, 587, 543, 577, 506, 566,
	607, 533, 574, 608, 191, 153, 131, 233, 289, 172,
	0, 0, 0, 114, 115, 116, 0, 1152, 1153, 0,
	0, 0, 0, 0, 149, 0, 571, 602, 530, 573,
	575, 618, 496, 568, 0, 499, 502, 614, 598, 525,
	526, 0, 0, 0, 0, 0, 0, 0, 547, 556,
	584, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 565, 0, 0, 0, 503, 500, 0, 0,
	0, 0, 545, 0, 0, 0, 505, 0, 524, 585,
	0, 494, 177, 589, 597, 542, 325, 601, 540, 539,
	604, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 594, 520, 529, 156, 527,
	268, 245, 314, 564, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 515, 590, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 582, 617, 244, 269,
	151, 316, 287, 510, 514, 508, 509, 558, 559, 511,
	609, 610, 611, 586, 504, 0, 512, 513, 0, 592,
	599, 600, 563, 127, 138, 202, 613, 262, 173, 319,
	495, 507, 161, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 562, 569, 570, 572, 579, 580,
	581, 583, 588, 596, 616, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 0, 209, 561, 603, 591, 0,
	0, 544, 606, 517, 534, 615, 535, 538, 576, 501,
	557, 236, 532, 0, 521, 497, 528, 498, 519, 546,
	165, 550, 516, 593, 560, 605, 200, 0, 522, 248,
	578, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 612, 203, 567, 0, 288,
	222, 0, 0, 0, 548, 595, 555, 587, 543, 577,
	506, 566, 607, 533, 574, 608, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 571, 602,
	530, 573, 575, 618, 496, 568, 0, 499, 502, 614,
	598, 525, 526, 0, 0, 0, 0, 0, 0, 0,
	547, 556, 584, 541, 0, 0, 0, 0, 0, 0,
	1502, 0, 523, 0, 565, 0, 0, 0, 503, 500,
	0, 0, 0, 0, 545, 0, 0, 0, 505, 0,
	524, 585, 0, 494, 177, 589, 597, 542, 325, 601,
	540, 539, 604, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 594, 520, 529,
	156, 527, 268, 245, 314, 564, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 143, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 515, 590, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 227, 144, 186, 286, 197, 205, 582, 617,
	244, 269, 151, 316, 287, 510, 514, 508, 509, 558,
	559, 511, 609, 610, 611, 586, 504, 0, 512, 513,
	0, 592, 599, 600, 563, 127, 138, 202, 613, 262,
	173, 319, 495, 507, 161, 518, 0, 0, 531, 536,
	537, 549, 551, 552, 553, 554, 562, 569, 570, 572,
	579, 580, 581, 583, 588, 596, 616, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 0, 209, 561, 603,
	591, 0, 0, 544, 606, 517, 534, 615, 535, 538,
	576, 501, 557, 236, 532, 0, 521, 497, 528, 498,
	519, 546, 165, 550, 516, 593, 560, 605, 200, 0,
	522, 248, 578, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 612, 203, 567,
	0, 288, 222, 0, 0, 0, 548, 595, 555, 587,
	543, 577, 506, 566, 607, 533, 574, 608, 191, 153,
	131, 233, 289, 172, 66, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	571, 602, 530, 573, 575, 618, 496, 568, 0, 499,
	502, 614, 598, 525, 526, 0, 0, 0, 0, 0,
	0, 0, 547, 556, 584, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 523, 0, 565, 0, 0, 0,
	503, 500, 0, 0, 0, 0, 545, 0, 0, 0,
	505, 0, 524, 585, 0, 494, 177, 589, 597, 542,
	325, 601, 540, 539, 604, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 594,
	520, 529, 156, 527, 268, 245, 314, 564, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 311, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	143, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 515, 590,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 227, 144, 186, 286, 197, 205,
	582, 617, 244, 269, 151, 316, 287, 510, 514, 508,
	509, 558, 559, 511, 609, 610, 611, 586, 504, 0,
	512, 513, 0, 592, 599, 600, 563, 127, 138, 202,
	613, 262, 173, 319, 495, 507, 161, 518, 0, 0,
	531, 536, 537, 549, 551, 552, 553, 554, 562, 569,
	570, 572, 579, 580, 581, 583, 588, 596, 616, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 0, 209,
	561, 603, 591, 0, 0, 544, 606, 517, 534, 615,
	535, 538, 576, 501, 557, 236, 532, 0, 521, 497,
	528, 498, 519, 546, 165, 550, 516, 593, 560, 605,
	200, 0, 522, 248, 578, 279, 155, 208, 206, 301,
	170, 166, 164, 154, 187, 213, 247, 297, 241, 612,
	203, 567, 0, 288, 222, 0, 0, 0, 548, 595,
	555, 587, 543, 577, 506, 566, 607, 533, 574, 608,
	191, 153, 131, 233, 289, 172, 0, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 571, 602, 530, 573, 575, 618, 496, 568,
	0, 499, 502, 614, 598, 525, 526, 0, 0, 0,
	0, 0, 0, 0, 547, 556, 584, 541, 0, 0,
	0, 0, 0, 0, 1377, 0, 523, 0, 565, 0,
	0, 0, 503, 500, 0, 0, 0, 0, 545, 0,
	0, 0, 505, 0, 524, 585, 0, 494, 177, 589,
	597, 542, 325, 601, 540, 539, 604, 259, 0, 293,
	181, 199, 145, 196, 128, 140, 0, 179, 232, 266,
	270, 594, 520, 529, 156, 527, 268, 245, 314, 564,
	249, 267, 204, 303, 260, 313, 326, 327, 162, 226,
	320, 298, 323, 335, 141, 159, 239, 294, 317, 285,
	221, 300, 195, 284, 133, 296, 311, 150, 278, 0,
	0, 0, 135, 309, 292, 219, 192, 193, 134, 0,
	264, 163, 175, 158, 235, 306, 307, 157, 336, 142,
	322, 137, 143, 321, 228, 302, 310, 220, 212, 136,
	308, 218, 211, 198, 169, 183, 257, 207, 258, 184,
	224, 223, 225, 0, 132, 0, 290, 318, 337, 147,
	515, 590, 299, 331, 334, 0, 261, 148, 176, 168,
	256, 174, 201, 330, 332, 333, 227, 144, 186, 286,
	197, 205, 582, 617, 244, 269, 151, 316, 287, 510,
	514, 508, 509, 558, 559, 511, 609, 610, 611, 586,
	504, 0, 512, 513, 0, 592, 599, 600, 563, 127,
	138, 202, 613, 262, 173, 319, 495, 507, 161, 518,
	0, 0, 531, 536, 537, 549, 551, 552, 553, 554,
	562, 569, 570, 572, 579, 580, 581, 583, 588, 596,
	616, 129, 130, 139, 146, 152, 160, 167, 171, 178,
	182, 185, 188, 189, 190, 194, 210, 214, 215, 216,
	217, 229, 230, 231, 234, 237, 238, 240, 242, 243,
	246, 250, 251, 252, 253, 254, 255, 263, 265, 271,
	272, 273, 274, 275, 276, 277, 280, 281, 282, 283,
	291, 295, 304, 305, 315, 324, 328, 180, 312, 329,
	0, 209, 561, 603, 591, 0, 0, 544, 606, 517,
	534, 615, 535, 538, 576, 501, 557, 236, 532, 0,
	521, 497, 528, 498, 519, 546, 165, 550, 516, 593,
	560, 605, 200, 0, 522, 248, 578, 279, 155, 208,
	206, 301, 170, 166, 164, 154, 187, 213, 247, 297,
	241, 612, 203, 567, 0, 288, 222, 0, 0, 0,
	548, 595, 555, 587, 543, 577, 506, 566, 607, 533,
	574, 608, 191, 153, 131, 233, 289, 172, 0, 0,
	0, 114, 115, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 571, 602, 530, 573, 575, 618,
	496, 568, 0, 499, 502, 614, 598, 525, 526, 0,
	0, 0, 0, 0, 0, 0, 547, 556, 584, 541,
	0, 0, 0, 0, 0, 0, 1104, 0, 523, 0,
	565, 0, 0, 0, 503, 500, 0, 0, 0, 0,
	545, 0, 0, 0, 505, 0, 524, 585, 0, 494,
	177, 589, 597, 542, 325, 601, 540, 539, 604, 259,
	0, 293, 181, 199, 145, 196, 128, 140, 0, 179,
	232, 266, 270, 594, 520, 529, 156, 527, 268, 245,
	314, 564, 249, 267, 204, 303, 260, 313, 326, 327,
	162, 226, 320, 298, 323, 335, 141, 159, 239, 294,
	317, 285, 221, 300, 195, 284, 133, 296, 311, 150,
	278, 0, 0, 0, 135, 309, 292, 219, 192, 193,
	134, 0, 264, 163, 175, 158, 235, 306, 307, 157,
	336, 142, 322, 137, 143, 321, 228, 302, 310, 220,
	212, 136, 308, 218, 211, 198, 169, 183, 257, 207,
	258, 184, 224, 223, 225, 0, 132, 0, 290, 318,
	337, 147, 515, 590, 299, 331, 334, 0, 261, 148,
	176, 168, 256, 174, 201, 330, 332, 333, 227, 144,
	186, 286, 197, 205, 582, 617, 244, 269, 151, 316,
	287, 510, 514, 508, 509, 558, 559, 511, 609, 610,
	611, 586, 504, 0, 512, 513, 0, 592, 599, 600,
	563, 127, 138, 202, 613, 262, 173, 319, 495, 507,
	161, 518, 0, 0, 531, 536, 537, 549, 551, 552,
	553, 554, 562, 569, 570, 572, 579, 580, 581, 583,
	588, 596, 616, 129, 130, 139, 146, 152, 160, 167,
	171, 178, 182, 185, 188, 189, 190, 194, 210, 214,
	215, 216, 217, 229, 230, 231, 234, 237, 238, 240,
	242, 243, 246, 250, 251, 252, 253, 254, 255, 263,
	265, 271, 272, 273, 274, 275, 276, 277, 280, 281,
	282, 283, 291, 295, 304, 305, 315, 324, 328, 180,
	312, 329, 0, 209, 561, 603, 591, 0, 0, 544,
	606, 517, 534, 615, 535, 538, 576, 501, 557, 236,
	532, 0, 521, 497, 528, 498, 519, 546, 165, 550,
	516, 593, 560, 605, 200, 0, 522, 248, 578, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 612, 203, 567, 0, 288, 222, 0,
	0, 0, 548, 595, 555, 587, 543, 577, 506, 566,
	607, 533, 574, 608, 191, 153, 131, 233, 289, 172,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 571, 602, 530, 573,
	575, 618, 496, 568, 0, 499, 502, 614, 598, 525,
	526, 0, 0, 0, 0, 0, 0, 0, 547, 556,
	584, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 565, 0, 0, 0, 503, 500, 0, 0,
	0, 0, 545, 0, 0, 0, 505, 0, 524, 585,
	0, 494, 177, 589, 597, 542, 325, 601, 540, 539,
	604, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 594, 520, 529, 156, 527,
	268, 245, 314, 564, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 515, 590, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 582, 617, 244, 269,
	151, 316, 287, 510, 514, 508, 509, 558, 559, 511,
	609, 610, 611, 586, 504, 0, 512, 513, 0, 592,
	599, 600, 563, 127, 138, 202, 613, 262, 173, 319,
	495, 507, 161, 518, 0, 0, 531, 536, 537, 549,
	551, 552, 553, 554, 562, 569, 570, 572, 579, 580,
	581, 583, 588, 596, 616, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 0, 209, 561, 603, 591, 0,
	0, 544, 606, 517, 534, 615, 535, 538, 576, 501,
	557, 236, 532, 0, 521, 497, 528, 498, 519, 546,
	165, 550, 516, 593, 560, 605, 200, 0, 522, 248,
	578, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 612, 203, 567, 0, 288,
	222, 0, 0, 0, 548, 595, 555, 587, 543, 577,
	506, 566, 607, 533, 574, 608, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 571, 602,
	530, 573, 575, 618, 496, 568, 0, 499, 502, 614,
	598, 525, 526, 0, 0, 0, 0, 0, 0, 0,
	547, 556, 584, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 523, 0, 565, 0, 0, 0, 503, 500,
	0, 0, 0, 0, 545, 0, 0, 0, 505, 0,
	524, 585, 0, 494, 177, 589, 597, 542, 325, 601,
	540, 539, 604, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 594, 520, 529,
	156, 527, 268, 245, 314, 564, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 492, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 515, 590, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 493, 491, 486, 485, 197, 205, 582, 617,
	244, 269, 151, 316, 287, 510, 514, 508, 509, 558,
	559, 511, 609, 610, 611, 586, 504, 0, 512, 513,
	0, 592, 599, 600, 563, 127, 138, 202, 613, 262,
	173, 319, 495, 507, 161, 518, 0, 0, 531, 536,
	537, 549, 551, 552, 553, 554, 562, 569, 570, 572,
	579, 580, 581, 583, 588, 596, 616, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 0, 209, 561, 603,
	591, 0, 0, 544, 606, 517, 534, 615, 535, 538,
	576, 501, 557, 236, 532, 0, 521, 497, 528, 498,
	519, 546, 165, 550, 516, 593, 560, 605, 200, 0,
	522, 248, 578, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 612, 203, 567,
	0, 288, 222, 0, 0, 0, 548, 595, 555, 587,
	543, 577, 506, 566, 607, 533, 574, 608, 191, 153,
	131, 233, 289, 172, 0, 0, 0, 114, 115, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	571, 602, 530, 573, 575, 618, 496, 568, 0, 499,
	502, 614, 598, 525, 526, 0, 0, 0, 0, 0,
	0, 0, 547, 556, 584, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 523, 0, 565, 0, 0, 0,
	503, 500, 0, 0, 0, 0, 545, 0, 0, 0,
	505, 0, 524, 585, 0, 494, 177, 589, 597, 542,
	325, 601, 540, 539, 604, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 594,
	520, 529, 156, 527, 268, 245, 314, 564, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 844, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	492, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 515, 590,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 493, 491, 486, 485, 197, 205,
	582, 617, 244, 269, 151, 316, 287, 510, 514, 508,
	509, 558, 559, 511, 609, 610, 611, 586, 504, 0,
	512, 513, 0, 592, 599, 600, 563, 127, 138, 202,
	613, 262, 173, 319, 495, 507, 161, 518, 0, 0,
	531, 536, 537, 549, 551, 552, 553, 554, 562, 569,
	570, 572, 579, 580, 581, 583, 588, 596, 616, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 0, 209,
	561, 603, 591, 0, 0, 544, 606, 517, 534, 615,
	535, 538, 576, 501, 557, 236, 532, 0, 521, 497,
	528, 498, 519, 546, 165, 550, 516, 593, 560, 605,
	200, 0, 522, 248, 578, 279, 155, 208, 206, 301,
	170, 166, 164, 154, 187, 213, 247, 297, 241, 612,
	203, 567, 0, 288, 222, 0, 0, 0, 548, 595,
	555, 587, 543, 577, 506, 566, 607, 533, 574, 608,
	191, 153, 131, 233, 289, 172, 0, 0, 0, 114,
	115, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 571, 602, 530, 573, 575, 618, 496, 568,
	0, 499, 502, 614, 598, 525, 526, 0, 0, 0,
	0, 0, 0, 0, 547, 556, 584, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 523, 0, 565, 0,
	0, 0, 503, 500, 0, 0, 0, 0, 545, 0,
	0, 0, 505, 0, 524, 585, 0, 494, 177, 589,
	597, 542, 325, 601, 540, 539, 604, 259, 0, 293,
	181, 199, 145, 196, 128, 140, 0, 179, 232, 266,
	270, 594, 520, 529, 156, 527, 268, 245, 314, 564,
	249, 267, 204, 303, 260, 313, 326, 327, 162, 226,
	320, 298, 323, 335, 141, 159, 239, 294, 317, 285,
	221, 300, 195, 284, 133, 296, 483, 150, 278, 0,
	0, 0, 135, 309, 292, 219, 192, 193, 134, 0,
	264, 163, 175, 158, 235, 306, 307, 157, 336, 142,
	322, 137, 492, 321, 228, 302, 310, 220, 212, 136,
	308, 218, 211, 198, 169, 183, 257, 207, 258, 184,
	224, 223, 225, 0, 132, 0, 290, 318, 337, 147,
	515, 590, 299, 331, 334, 0, 261, 148, 176, 168,
	256, 174, 201, 330, 332, 333, 493, 491, 486, 485,
	197, 205, 582, 617, 244, 269, 151, 316, 287, 510,
	514, 508, 509, 558, 559, 511, 609, 610, 611, 586,
	504, 0, 512, 513, 0, 592, 599, 600, 563, 127,
	138, 202, 613, 262, 173, 319, 495, 507, 161, 518,
	0, 0, 531, 536, 537, 549, 551, 552, 553, 554,
	562, 569, 570, 572, 579, 580, 581, 583, 588, 596,
	616, 129, 130, 139, 146, 152, 160, 167, 171, 178,
	182, 185, 188, 189, 190, 194, 210, 214, 215, 216,
	217, 229, 230, 231, 234, 237, 238, 240, 242, 243,
	246, 250, 251, 252, 253, 254, 255, 263, 265, 271,
	272, 273, 274, 275, 276, 277, 280, 281, 282, 283,
	291, 295, 304, 305, 315, 324, 328, 180, 312, 329,
	236, 209, 561, 1031, 0, 387, 0, 0, 0, 165,
	0, 386, 0, 0, 0, 200, 0, 1032, 248, 0,
	279, 155, 208, 206, 301, 170, 166, 164, 154, 187,
	213, 247, 297, 241, 430, 203, 0, 0, 288, 222,
	0, 0, 0, 0, 0, 421, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 153, 131, 233, 289,
	172, 66, 0, 0, 114, 115, 116, 408, 407, 410,
	411, 412, 413, 0, 0, 149, 409, 414, 415, 416,
	0, 0, 0, 0, 384, 401, 0, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 399, 473,
	0, 0, 0, 444, 0, 400, 0, 0, 393, 394,
	396, 395, 397, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 443, 0, 0, 325, 0, 0,
	441, 0, 259, 0, 293, 181, 199, 145, 196, 128,
	140, 0, 179, 232, 266, 270, 0, 0, 0, 156,
	0, 268, 245, 314, 0, 249, 267, 204, 303, 260,
	313, 326, 327, 162, 226, 320, 298, 323, 335, 141,
	159, 239, 294, 317, 285, 221, 300, 195, 284, 133,
	296, 311, 150, 278, 0, 0, 0, 135, 309, 292,
	219, 192, 193, 134, 0, 264, 163, 175, 158, 235,
	306, 307, 157, 336, 142, 322, 137, 143, 321, 228,
	302, 310, 220, 212, 136, 308, 218, 211, 198, 169,
	183, 257, 207, 258, 184, 224, 223, 225, 0, 132,
	0, 290, 318, 337, 147, 0, 0, 299, 331, 334,
	0, 261, 148, 176, 168, 256, 174, 201, 330, 332,
	333, 227, 144, 186, 286, 197, 205, 0, 0, 244,
	269, 151, 316, 287, 431, 442, 437, 438, 435, 436,
	0, 434, 433, 432, 445, 423, 424, 425, 426, 428,
	0, 439, 440, 427, 127, 138, 202, 0, 262, 173,
	319, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	152, 160, 167, 171, 178, 182, 185, 188, 189, 190,
	194, 210, 214, 215, 216, 217, 229, 230, 231, 234,
	237, 238, 240, 242, 243, 246, 250, 251, 252, 253,
	254, 255, 263, 265, 271, 272, 273, 274, 275, 276,
	277, 280, 281, 282, 283, 291, 295, 304, 305, 315,
	324, 328, 180, 312, 329, 236, 209, 0, 0, 0,
	387, 0, 0, 0, 165, 0, 386, 0, 0, 0,
	200, 0, 0, 248, 0, 279, 155, 208, 206, 301,
	170, 166, 164, 154, 187, 213, 247, 297, 241, 430,
	203, 0, 0, 288, 222, 0, 0, 0, 0, 0,
	421, 422, 0, 0, 0, 0, 0, 0, 1143, 0,
	191, 153, 131, 233, 289, 172, 66, 0, 0, 114,
	115, 116, 408, 407, 410, 411, 412, 413, 0, 0,
	149, 409, 414, 415, 416, 1144, 0, 0, 0, 384,
	401, 0, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 399, 0, 0, 0, 0, 444, 0,
	400, 0, 0, 393, 394, 396, 395, 397, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 443,
	0, 0, 325, 0, 0, 441, 0, 259, 0, 293,
	181, 199, 145, 196, 128, 140, 0, 179, 232, 266,
	270, 0, 0, 0, 156, 0, 268, 245, 314, 0,
	249, 267, 204, 303, 260, 313, 326, 327, 162, 226,
	320, 298, 323, 335, 141, 159, 239, 294, 317, 285,
	221, 300, 195, 284, 133, 296, 311, 150, 278, 0,
	0, 0, 135, 309, 292, 219, 192, 193, 134, 0,
	264, 163, 175, 158, 235, 306, 307, 157, 336, 142,
	322, 137, 143, 321, 228, 302, 310, 220, 212, 136,
	308, 218, 211, 198, 169, 183, 257, 207, 258, 184,
	224, 223, 225, 0, 132, 0, 290, 318, 337, 147,
	0, 0, 299, 331, 334, 0, 261, 148, 176, 168,
	256, 174, 201, 330, 332, 333, 227, 144, 186, 286,
	197, 205, 0, 0, 244, 269, 151, 316, 287, 431,
	442, 437, 438, 435, 436, 0, 434, 433, 432, 445,
	423, 424, 425, 426, 428, 0, 439, 440, 427, 127,
	138, 202, 0, 262, 173, 319, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 152, 160, 167, 171, 178,
	182, 185, 188, 189, 190, 194, 210, 214, 215, 216,
	217, 229, 230, 231, 234, 237, 238, 240, 242, 243,
	246, 250, 251, 252, 253, 254, 255, 263, 265, 271,
	272, 273, 274, 275, 276, 277, 280, 281, 282, 283,
	291, 295, 304, 305, 315, 324, 328, 180, 312, 329,
	236, 209, 0, 0, 0, 387, 0, 0, 0, 165,
	0, 386, 0, 0, 0, 200, 0, 0, 248, 0,
	279, 155, 208, 206, 301, 170, 166, 164, 154, 187,
	213, 247, 297, 241, 430, 203, 0, 0, 288, 222,
	0, 0, 0, 0, 0, 421, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 153, 131, 233, 289,
	172, 66, 0, 461, 114, 115, 116, 408, 407, 410,
	411, 412, 413, 0, 0, 149, 409, 414, 415, 416,
	0, 0, 0, 0, 384, 401, 0, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 399, 0,
	0, 0, 0, 444, 0, 400, 0, 0, 393, 394,
	396, 395, 397, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 443, 0, 0, 325, 0, 0,
	441, 0, 259, 0, 293, 181, 199, 145, 196, 128,
	140, 0, 179, 232, 266, 270, 0, 0, 0, 156,
	0, 268, 245, 314, 0, 249, 267, 204, 303, 260,
	313, 326, 327, 162, 226, 320, 298, 323, 335, 141,
	159, 239, 294, 317, 285, 221, 300, 195, 284, 133,
	296, 311, 150, 278, 0, 0, 0, 135, 309, 292,
	219, 192, 193, 134, 0, 264, 163, 175, 158, 235,
	306, 307, 157, 336, 142, 322, 137, 143, 321, 228,
	302, 310, 220, 212, 136, 308, 218, 211, 198, 169,
	183, 257, 207, 258, 184, 224, 223, 225, 0, 132,
	0, 290, 318, 337, 147, 0, 0, 299, 331, 334,
	0, 261, 148, 176, 168, 256, 174, 201, 330, 332,
	333, 227, 144, 186, 286, 197, 205, 0, 0, 244,
	269, 151, 316, 287, 431, 442, 437, 438, 435, 436,
	0, 434, 433, 432, 445, 423, 424, 425, 426, 428,
	0, 439, 440, 427, 127, 138, 202, 0, 262, 173,
	319, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	152, 160, 167, 171, 178, 182, 185, 188, 189, 190,
	194, 210, 214, 215, 216, 217, 229, 230, 231, 234,
	237, 238, 240, 242, 243, 246, 250, 251, 252, 253,
	254, 255, 263, 265, 271, 272, 273, 274, 275, 276,
	277, 280, 281, 282, 283, 291, 295, 304, 305, 315,
	324, 328, 180, 312, 329, 236, 209, 0, 0, 0,
	387, 0, 0, 0, 165, 0, 386, 0, 0, 0,
	200, 0, 0, 248, 0, 279, 155, 208, 206, 301,
	170, 166, 164, 154, 187, 213, 247, 297, 241, 430,
	203, 0, 0, 288, 222, 0, 0, 0, 0, 0,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 153, 131, 233, 289, 172, 66, 0, 0, 114,
	115, 116, 408, 407, 410, 411, 412, 413, 0, 0,
	149, 409, 414, 415, 416, 0, 0, 0, 0, 384,
	401, 0, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 399, 473, 0, 0, 0, 444, 0,
	400, 0, 0, 393, 394, 396, 395, 397, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 443,
	0, 0, 325, 0, 0, 441, 0, 259, 0, 293,
	181, 199, 145, 196, 128, 140, 0, 179, 232, 266,
	270, 0, 0, 0, 156, 0, 268, 245, 314, 0,
	249, 267, 204, 303, 260, 313, 326, 327, 162, 226,
	320, 298, 323, 335, 141, 159, 239, 294, 317, 285,
	221, 300, 195, 284, 133, 296, 311, 150, 278, 0,
	0, 0, 135, 309, 292, 219, 192, 193, 134, 0,
	264, 163, 175, 158, 235, 306, 307, 157, 336, 142,
	322, 137, 143, 321, 228, 302, 310, 220, 212, 136,
	308, 218, 211, 198, 169, 183, 257, 207, 258, 184,
	224, 223, 225, 0, 132, 0, 290, 318, 337, 147,
	0, 0, 299, 331, 334, 0, 261, 148, 176, 168,
	256, 174, 201, 330, 332, 333, 227, 144, 186, 286,
	197, 205, 0, 0, 244, 269, 151, 316, 287, 431,
	442, 437, 438, 435, 436, 0, 434, 433, 432, 445,
	423, 424, 425, 426, 428, 0, 439, 440, 427, 127,
	138, 202, 0, 262, 173, 319, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 152, 160, 167, 171, 178,
	182, 185, 188, 189, 190, 194, 210, 214, 215, 216,
	217, 229, 230, 231, 234, 237, 238, 240, 242, 243,
	246, 250, 251, 252, 253, 254, 255, 263, 265, 271,
	272, 273, 274, 275, 276, 277, 280, 281, 282, 283,
	291, 295, 304, 305, 315, 324, 328, 180, 312, 329,
	236, 209, 0, 0, 0, 387, 0, 0, 0, 165,
	0, 386, 0, 0, 0, 200, 0, 0, 248, 0,
	279, 155, 208, 206, 301, 170, 166, 164, 154, 187,
	213, 247, 297, 241, 430, 203, 0, 0, 288, 222,
	0, 0, 0, 0, 0, 421, 422, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 153, 131, 233, 289,
	172, 66, 0, 0, 114, 115, 116, 408, 1049, 410,
	411, 412, 413, 0, 0, 149, 409, 414, 415, 416,
	0, 0, 0, 0, 384, 401, 0, 429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 399, 473,
	0, 0, 0, 444, 0, 400, 0, 0, 393, 394,
	396, 395, 397, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 443, 0, 0, 325, 0, 0,
	441, 0, 259, 0, 293, 181, 199, 145, 196, 128,
	140, 0, 179, 232, 266, 270, 0, 0, 0, 156,
	0, 268, 245, 314, 0, 249, 267, 204, 303, 260,
	313, 326, 327, 162, 226, 320, 298, 323, 335, 141,
	159, 239, 294, 317, 285, 221, 300, 195, 284, 133,
	296, 311, 150, 278, 0, 0, 0, 135, 309, 292,
	219, 192, 193, 134, 0, 264, 163, 175, 158, 235,
	306, 307, 157, 336, 142, 322, 137, 143, 321, 228,
	302, 310, 220, 212, 136, 308, 218, 211, 198, 169,
	183, 257, 207, 258, 184, 224, 223, 225, 0, 132,
	0, 290, 318, 337, 147, 0, 0, 299, 331, 334,
	0, 261, 148, 176, 168, 256, 174, 201, 330, 332,
	333, 227, 144, 186, 286, 197, 205, 0, 0, 244,
	269, 151, 316, 287, 431, 442, 437, 438, 435, 436,
	0, 434, 433, 432, 445, 423, 424, 425, 426, 428,
	0, 439, 440, 427, 127, 138, 202, 0, 262, 173,
	319, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 130, 139, 146,
	152, 160, 167, 171, 178, 182, 185, 188, 189, 190,
	194, 210, 214, 215, 216, 217, 229, 230, 231, 234,
	237, 238, 240, 242, 243, 246, 250, 251, 252, 253,
	254, 255, 263, 265, 271, 272, 273, 274, 275, 276,
	277, 280, 281, 282, 283, 291, 295, 304, 305, 315,
	324, 328, 180, 312, 329, 236, 209, 0, 0, 0,
	387, 0, 0, 0, 165, 0, 386, 0, 0, 0,
	200, 0, 0, 248, 0, 279, 155, 208, 206, 301,
	170, 166, 164, 154, 187, 213, 247, 297, 241, 430,
	203, 0, 0, 288, 222, 0, 0, 0, 0, 0,
	421, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 153, 131, 233, 289, 172, 66, 0, 0, 114,
	115, 116, 408, 1046, 410, 411, 412, 413, 0, 0,
	149, 409, 414, 415, 416, 0, 0, 0, 0, 384,
	401, 0, 429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 399, 473, 0, 0, 0, 444, 0,
	400, 0, 0, 393, 394, 396, 395, 397, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 443,
	0, 0, 325, 0, 0, 441, 0, 259, 0, 293,
	181, 199, 145, 196, 128, 140, 0, 179, 232, 266,
	270, 0, 0, 0, 156, 0, 268, 245, 314, 0,
	249, 267, 204, 303, 260, 313, 326, 327, 162, 226,
	320, 298, 323, 335, 141, 159, 239, 294, 317, 285,
	221, 300, 195, 284, 133, 296, 311, 150, 278, 0,
	0, 0, 135, 309, 292, 219, 192, 193, 134, 0,
	264, 163, 175, 158, 235, 306, 307, 157, 336, 142,
	322, 137, 143, 321, 228, 302, 310, 220, 212, 136,
	308, 218, 211, 198, 169, 183, 257, 207, 258, 184,
	224, 223, 225, 0, 132, 0, 290, 318, 337, 147,
	0, 0, 299, 331, 334, 0, 261, 148, 176, 168,
	256, 174, 201, 330, 332, 333, 227, 144, 186, 286,
	197, 205, 0, 0, 244, 269, 151, 316, 287, 431,
	442, 437, 438, 435, 436, 0, 434, 433, 432, 445,
	423, 424, 425, 426, 428, 0, 439, 440, 427, 127,
	138, 202, 0, 262, 173, 319, 0, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 139, 146, 152, 160, 167, 171, 178,
	182, 185, 188, 189, 190, 194, 210, 214, 215, 216,
	217, 229, 230, 231, 234, 237, 238, 240, 242, 243,
	246, 250, 251, 252, 253, 254, 255, 263, 265, 271,
	272, 273, 274, 275, 276, 277, 280, 281, 282, 283,
	291, 295, 304, 305, 315, 324, 328, 180, 312, 329,
	454, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 236, 0, 0, 0, 0, 387, 0,
	0, 0, 165, 0, 386, 0, 0, 0, 200, 0,
	0, 248, 0, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 430, 203, 0,
	0, 288, 222, 0, 0, 0, 0, 0, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 153,
	131, 233, 289, 172, 66, 0, 0, 114, 115, 116,
	408, 407, 410, 411, 412, 413, 0, 0, 149, 409,
	414, 415, 416, 0, 0, 0, 0, 384, 401, 0,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 399, 0, 0, 0, 0, 444, 0, 400, 0,
	0, 393, 394, 396, 395, 397, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 443, 0, 0,
	325, 0, 0, 441, 0, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 0,
	0, 0, 156, 0, 268, 245, 314, 0, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 311, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	143, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 0, 0,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 227, 144, 186, 286, 197, 205,
	0, 0, 244, 269, 151, 316, 287, 431, 442, 437,
	438, 435, 436, 0, 434, 433, 432, 445, 423, 424,
	425, 426, 428, 0, 439, 440, 427, 127, 138, 202,
	0, 262, 173, 319, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 236, 209,
	0, 0, 0, 387, 0, 0, 0, 165, 0, 386,
	0, 0, 0, 200, 0, 0, 248, 0, 279, 155,
	208, 206, 301, 170, 166, 164, 154, 187, 213, 247,
	297, 241, 430, 203, 0, 0, 288, 222, 0, 0,
	0, 0, 0, 421, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 153, 131, 233, 289, 172, 66,
	0, 0, 114, 115, 116, 408, 407, 410, 411, 412,
	413, 0, 0, 149, 409, 414, 415, 416, 0, 0,
	0, 0, 384, 401, 0, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 399, 0, 0, 0,
	0, 444, 0, 400, 0, 0, 393, 394, 396, 395,
	397, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 443, 0, 0, 325, 0, 0, 441, 0,
	259, 0, 293, 181, 199, 145, 196, 128, 140, 0,
	179, 232, 266, 270, 0, 0, 0, 156, 0, 268,
	245, 314, 0, 249, 267, 204, 303, 260, 313, 326,
	327, 162, 226, 320, 298, 323, 335, 141, 159, 239,
	294, 317, 285, 221, 300, 195, 284, 133, 296, 311,
	150, 278, 0, 0, 0, 135, 309, 292, 219, 192,
	193, 134, 0, 264, 163, 175, 158, 235, 306, 307,
	157, 336, 142, 322, 137, 143, 321, 228, 302, 310,
	220, 212, 136, 308, 218, 211, 198, 169, 183, 257,
	207, 258, 184, 224, 223, 225, 0, 132, 0, 290,
	318, 337, 147, 0, 0, 299, 331, 334, 0, 261,
	148, 176, 168, 256, 174, 201, 330, 332, 333, 227,
	144, 186, 286, 197, 205, 0, 0, 244, 269, 151,
	316, 287, 431, 442, 437, 438, 435, 436, 0, 434,
	433, 432, 445, 423, 424, 425, 426, 428, 0, 439,
	440, 427, 127, 138, 202, 0, 262, 173, 319, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 152, 160,
	167, 171, 178, 182, 185, 188, 189, 190, 194, 210,
	214, 215, 216, 217, 229, 230, 231, 234, 237, 238,
	240, 242, 243, 246, 250, 251, 252, 253, 254, 255,
	263, 265, 271, 272, 273, 274, 275, 276, 277, 280,
	281, 282, 283, 291, 295, 304, 305, 315, 324, 328,
	180, 312, 329, 236, 209, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 200, 0,
	0, 248, 0, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 430, 203, 0,
	0, 288, 222, 0, 0, 0, 0, 0, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 153,
	131, 233, 289, 172, 66, 0, 0, 114, 115, 116,
	408, 407, 410, 411, 412, 413, 0, 0, 149, 409,
	414, 415, 416, 0, 0, 0, 0, 0, 401, 0,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 399, 0, 0, 0, 0, 444, 0, 400, 0,
	0, 393, 394, 396, 395, 397, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 443, 0, 0,
	325, 0, 0, 441, 0, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 0,
	0, 0, 156, 0, 268, 245, 314, 1823, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 311, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	143, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 0, 0,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 227, 144, 186, 286, 197, 205,
	0, 0, 244, 269, 151, 316, 287, 431, 442, 437,
	438, 435, 436, 0, 434, 433, 432, 445, 423, 424,
	425, 426, 428, 0, 439, 440, 427, 127, 138, 202,
	0, 262, 173, 319, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 236, 209,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 200, 0, 0, 248, 0, 279, 155,
	208, 206, 301, 170, 166, 164, 154, 187, 213, 247,
	297, 241, 430, 203, 0, 0, 288, 222, 0, 0,
	0, 0, 0, 421, 422, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 153, 131, 233, 289, 172, 66,
	0, 461, 114, 115, 116, 408, 407, 410, 411, 412,
	413, 0, 0, 149, 409, 414, 415, 416, 0, 0,
	0, 0, 0, 401, 0, 429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 399, 0, 0, 0,
	0, 444, 0, 400, 0, 0, 393, 394, 396, 395,
	397, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 443, 0, 0, 325, 0, 0, 441, 0,
	259, 0, 293, 181, 199, 145, 196, 128, 140, 0,
	179, 232, 266, 270, 0, 0, 0, 156, 0, 268,
	245, 314, 0, 249, 267, 204, 303, 260, 313, 326,
	327, 162, 226, 320, 298, 323, 335, 141, 159, 239,
	294, 317, 285, 221, 300, 195, 284, 133, 296, 311,
	150, 278, 0, 0, 0, 135, 309, 292, 219, 192,
	193, 134, 0, 264, 163, 175, 158, 235, 306, 307,
	157, 336, 142, 322, 137, 143, 321, 228, 302, 310,
	220, 212, 136, 308, 218, 211, 198, 169, 183, 257,
	207, 258, 184, 224, 223, 225, 0, 132, 0, 290,
	318, 337, 147, 0, 0, 299, 331, 334, 0, 261,
	148, 176, 168, 256, 174, 201, 330, 332, 333, 227,
	144, 186, 286, 197, 205, 0, 0, 244, 269, 151,
	316, 287, 431, 442, 437, 438, 435, 436, 0, 434,
	433, 432, 445, 423, 424, 425, 426, 428, 0, 439,
	440, 427, 127, 138, 202, 0, 262, 173, 319, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 152, 160,
	167, 171, 178, 182, 185, 188, 189, 190, 194, 210,
	214, 215, 216, 217, 229, 230, 231, 234, 237, 238,
	240, 242, 243, 246, 250, 251, 252, 253, 254, 255,
	263, 265, 271, 272, 273, 274, 275, 276, 277, 280,
	281, 282, 283, 291, 295, 304, 305, 315, 324, 328,
	180, 312, 329, 236, 209, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 200, 0,
	0, 248, 0, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 430, 203, 0,
	0, 288, 222, 0, 0, 0, 0, 0, 421, 422,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 153,
	131, 233, 289, 172, 66, 0, 0, 114, 115, 116,
	408, 407, 410, 411, 412, 413, 0, 0, 149, 409,
	414, 415, 416, 0, 0, 0, 0, 0, 401, 0,
	429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 399, 0, 0, 0, 0, 444, 0, 400, 0,
	0, 393, 394, 396, 395, 397, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 443, 0, 0,
	325, 0, 0, 441, 0, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 0,
	0, 0, 156, 0, 268, 245, 314, 0, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 311, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	143, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 0, 0,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 227, 144, 186, 286, 197, 205,
	0, 0, 244, 269, 151, 316, 287, 431, 442, 437,
	438, 435, 436, 0, 434, 433, 432, 445, 423, 424,
	425, 426, 428, 0, 439, 440, 427, 127, 138, 202,
	0, 262, 173, 319, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 236, 209,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 200, 0, 0, 248, 0, 279, 155,
	208, 206, 301, 170, 166, 164, 154, 187, 213, 247,
	297, 241, 0, 203, 0, 0, 288, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 153, 131, 233, 289, 172, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 721, 731, 732, 724, 725, 726, 727, 728,
	729, 730, 723, 0, 0, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 325, 0, 0, 0, 0,
	259, 0, 293, 181, 199, 145, 196, 128, 140, 0,
	179, 232, 266, 270, 0, 0, 0, 156, 0, 268,
	245, 314, 0, 249, 267, 204, 303, 260, 313, 326,
	327, 162, 226, 320, 298, 323, 335, 141, 159, 239,
	294, 317, 285, 221, 300, 195, 284, 133, 296, 311,
	150, 278, 0, 0, 0, 135, 309, 292, 219, 192,
	193, 134, 0, 264, 163, 175, 158, 235, 306, 307,
	157, 336, 142, 322, 137, 143, 321, 228, 302, 310,
	220, 212, 136, 308, 218, 211, 198, 169, 183, 257,
	207, 258, 184, 224, 223, 225, 0, 132, 0, 290,
	318, 337, 147, 0, 0, 299, 331, 334, 0, 261,
	148, 176, 168, 256, 174, 201, 330, 332, 333, 227,
	144, 186, 286, 197, 205, 0, 0, 244, 269, 151,
	316, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 138, 202, 0, 262, 173, 319, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 152, 160,
	167, 171, 178, 182, 185, 188, 189, 190, 194, 210,
	214, 215, 216, 217, 229, 230, 231, 234, 237, 238,
	240, 242, 243, 246, 250, 251, 252, 253, 254, 255,
	263, 265, 271, 272, 273, 274, 275, 276, 277, 280,
	281, 282, 283, 291, 295, 304, 305, 315, 324, 328,
	180, 312, 329, 236, 209, 0, 0, 822, 0, 0,
	0, 0, 165, 0, 0, 0, 0, 0, 200, 0,
	0, 248, 0, 279, 155, 208, 206, 301, 170, 166,
	164, 154, 187, 213, 247, 297, 241, 0, 203, 0,
	0, 288, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 153,
	131, 233, 289, 172, 0, 0, 0, 114, 115, 116,
	0, 824, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 711, 712, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 0,
	325, 0, 0, 0, 0, 259, 0, 293, 181, 199,
	145, 196, 128, 140, 0, 179, 232, 266, 270, 0,
	0, 0, 156, 0, 268, 245, 314, 0, 249, 267,
	204, 303, 260, 313, 326, 327, 162, 226, 320, 298,
	323, 335, 141, 159, 239, 294, 317, 285, 221, 300,
	195, 284, 133, 296, 311, 150, 278, 0, 0, 0,
	135, 309, 292, 219, 192, 193, 134, 0, 264, 163,
	175, 158, 235, 306, 307, 157, 336, 142, 322, 137,
	143, 321, 228, 302, 310, 220, 212, 136, 308, 218,
	211, 198, 169, 183, 257, 207, 258, 184, 224, 223,
	225, 0, 132, 0, 290, 318, 337, 147, 0, 0,
	299, 331, 334, 0, 261, 148, 176, 168, 256, 174,
	201, 330, 332, 333, 227, 144, 186, 286, 197, 205,
	0, 0, 244, 269, 151, 316, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 138, 202,
	0, 262, 173, 319, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	130, 139, 146, 152, 160, 167, 171, 178, 182, 185,
	188, 189, 190, 194, 210, 214, 215, 216, 217, 229,
	230, 231, 234, 237, 238, 240, 242, 243, 246, 250,
	251, 252, 253, 254, 255, 263, 265, 271, 272, 273,
	274, 275, 276, 277, 280, 281, 282, 283, 291, 295,
	304, 305, 315, 324, 328, 180, 312, 329, 236, 209,
	0, 0, 0, 0, 0, 0, 0, 165, 1168, 0,
	0, 0, 0, 200, 0, 0, 248, 0, 279, 155,
	208, 206, 301, 170, 166, 164, 154, 187, 213, 247,
	297, 241, 0, 203, 0, 0, 288, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 153, 131, 233, 289, 172, 0,
	0, 0, 114, 115, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 1167, 325, 0, 0, 0, 1163,
	1160, 0, 1161, 1162, 199, 626, 196, 128, 140, 1158,
	1165, 232, 266, 270, 0, 0, 0, 156, 0, 268,
	245, 314, 0, 249, 267, 204, 303, 260, 313, 326,
	327, 162, 226, 320, 298, 323, 335, 141, 159, 239,
	294, 317, 285, 221, 300, 195, 284, 133, 296, 311,
	150, 278, 0, 0, 0, 135, 309, 292, 219, 192,
	193, 134, 0, 264, 163, 175, 158, 235, 306, 307,
	157, 336, 142, 322, 137, 143, 321, 228, 302, 310,
	220, 212, 136, 308, 218, 211, 198, 169, 183, 257,
	207, 258, 184, 224, 223, 225, 0, 132, 0, 290,
	318, 337, 147, 0, 0, 299, 331, 334, 0, 261,
	148, 176, 168, 256, 174, 201, 330, 332, 333, 227,
	144, 186, 286, 197, 205, 0, 0, 244, 269, 151,
	316, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 138, 202, 0, 262, 173, 319, 0,
	0, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 130, 139, 146, 152, 160,
	167, 171, 178, 182, 185, 188, 189, 190, 194, 210,
	214, 215, 216, 217, 229, 230, 231, 234, 237, 238,
	240, 242, 243, 246, 250, 251, 252, 253, 254, 255,
	263, 265, 271, 272, 273, 274, 275, 276, 277, 280,
	281, 282, 283, 291, 295, 304, 305, 315, 324, 328,
	180, 312, 329, 33, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 200, 0, 0, 248, 0, 279, 155, 208, 206,
	301, 170, 166, 164, 154, 187, 213, 247, 297, 241,
	0, 203, 0, 0, 288, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 153, 131, 233, 289, 172, 66, 0, 461,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 325, 0, 0, 0, 0, 259, 0,
	293, 181, 199, 145, 196, 128, 140, 0, 179, 232,
	266, 270, 0, 0, 0, 156, 0, 268, 245, 314,
	0, 249, 267, 204, 303, 260, 313, 326, 327, 162,
	226, 320, 298, 323, 335, 141, 159, 239, 294, 317,
	285, 221, 300, 195, 284, 133, 296, 311, 150, 278,
	0, 0, 0, 135, 309, 292, 219, 192, 193, 134,
	0, 264, 163, 175, 158, 235, 306, 307, 157, 336,
	142, 322, 137, 143, 321, 228, 302, 310, 220, 212,
	136, 308, 218, 211, 198, 169, 183, 257, 207, 258,
	184, 224, 223, 225, 0, 132, 0, 290, 318, 337,
	147, 0, 0, 299, 331, 334, 0, 261, 148, 176,
	168, 256, 174, 201, 330, 332, 333, 227, 144, 186,
	286, 197, 205, 0, 0, 244, 269, 151, 316, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 202, 0, 262, 173, 319, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 152, 160, 167, 171,
	178, 182, 185, 188, 189, 190, 194, 210, 214, 215,
	216, 217, 229, 230, 231, 234, 237, 238, 240, 242,
	243, 246, 250, 251, 252, 253, 254, 255, 263, 265,
	271, 272, 273, 274, 275, 276, 277, 280, 281, 282,
	283, 291, 295, 304, 305, 315, 324, 328, 180, 312,
	329, 236, 209, 0, 0, 1078, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 200, 0, 0, 248,
	0, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 0, 203, 0, 0, 288,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 1080,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 325, 0,
	0, 0, 0, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 0, 0, 0,
	156, 0, 268, 245, 314, 0, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 143, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 0, 0, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 227, 144, 186, 286, 197, 205, 0, 0,
	244, 269, 151, 316, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 202, 0, 262,
	173, 319, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 33, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 200, 0, 0, 248, 0, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 0, 203, 0, 0, 288, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 153, 131, 233, 289, 172,
	66, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 325, 0, 0, 0,
	0, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 0, 0, 0, 156, 0,
	268, 245, 314, 0, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 0, 0, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 0, 0, 244, 269,
	151, 316, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 202, 0, 262, 173, 319,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 236, 209, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 200,
	0, 0, 248, 0, 279, 155, 208, 206, 301, 170,
	166, 164, 154, 187, 213, 247, 297, 241, 0, 203,
	0, 0, 288, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	153, 131, 233, 289, 172, 0, 0, 0, 114, 115,
	116, 0, 0, 1096, 0, 0, 1097, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 325, 0, 0, 0, 0, 259, 0, 293, 181,
	199, 145, 196, 128, 140, 0, 179, 232, 266, 270,
	0, 0, 0, 156, 0, 268, 245, 314, 0, 249,
	267, 204, 303, 260, 313, 326, 327, 162, 226, 320,
	298, 323, 335, 141, 159, 239, 294, 317, 285, 221,
	300, 195, 284, 133, 296, 311, 150, 278, 0, 0,
	0, 135, 309, 292, 219, 192, 193, 134, 0, 264,
	163, 175, 158, 235, 306, 307, 157, 336, 142, 322,
	137, 143, 321, 228, 302, 310, 220, 212, 136, 308,
	218, 211, 198, 169, 183, 257, 207, 258, 184, 224,
	223, 225, 0, 132, 0, 290, 318, 337, 147, 0,
	0, 299, 331, 334, 0, 261, 148, 176, 168, 256,
	174, 201, 330, 332, 333, 227, 144, 186, 286, 197,
	205, 0, 0, 244, 269, 151, 316, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	202, 0, 262, 173, 319, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 152, 160, 167, 171, 178, 182,
	185, 188, 189, 190, 194, 210, 214, 215, 216, 217,
	229, 230, 231, 234, 237, 238, 240, 242, 243, 246,
	250, 251, 252, 253, 254, 255, 263, 265, 271, 272,
	273, 274, 275, 276, 277, 280, 281, 282, 283, 291,
	295, 304, 305, 315, 324, 328, 180, 312, 329, 236,
	209, 0, 0, 1078, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 200, 0, 0, 248, 0, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 0, 203, 0, 0, 288, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 153, 131, 233, 289, 172,
	0, 0, 0, 114, 115, 116, 0, 1080, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 325, 0, 0, 0,
	0, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 0, 0, 0, 156, 0,
	268, 245, 314, 0, 1076, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 0, 0, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 0, 0, 244, 269,
	151, 316, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 202, 0, 262, 173, 319,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 236, 209, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 855, 0, 0, 0, 200,
	0, 0, 248, 0, 279, 155, 208, 206, 301, 170,
	166, 164, 154, 187, 213, 247, 297, 241, 0, 203,
	0, 0, 288, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	153, 131, 233, 289, 172, 0, 0, 0, 114, 115,
	116, 0, 854, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 325, 0, 0, 0, 0, 259, 0, 293, 181,
	199, 145, 196, 128, 140, 0, 179, 232, 266, 270,
	0, 0, 0, 156, 0, 268, 245, 314, 0, 249,
	267, 204, 303, 260, 313, 326, 327, 162, 226, 320,
	298, 323, 335, 141, 159, 239, 294, 317, 285, 221,
	300, 195, 284, 133, 296, 311, 150, 278, 0, 0,
	0, 135, 309, 292, 219, 192, 193, 134, 0, 264,
	163, 175, 158, 235, 306, 307, 157, 336, 142, 322,
	137, 143, 321, 228, 302, 310, 220, 212, 136, 308,
	218, 211, 198, 169, 183, 257, 207, 258, 184, 224,
	223, 225, 0, 132, 0, 290, 318, 337, 147, 0,
	0, 299, 331, 334, 0, 261, 148, 176, 168, 256,
	174, 201, 330, 332, 333, 227, 144, 186, 286, 197,
	205, 0, 0, 244, 269, 151, 316, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	202, 0, 262, 173, 319, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 152, 160, 167, 171, 178, 182,
	185, 188, 189, 190, 194, 210, 214, 215, 216, 217,
	229, 230, 231, 234, 237, 238, 240, 242, 243, 246,
	250, 251, 252, 253, 254, 255, 263, 265, 271, 272,
	273, 274, 275, 276, 277, 280, 281, 282, 283, 291,
	295, 304, 305, 315, 324, 328, 180, 312, 329, 236,
	209, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 200, 0, 0, 248, 0, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 0, 203, 0, 0, 288, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 153, 131, 233, 289, 172,
	0, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 325, 0, 0, 0,
	0, 259, 0, 293, 181, 199, 626, 196, 128, 140,
	624, 179, 232, 266, 270, 0, 0, 0, 156, 0,
	268, 245, 314, 0, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 0, 0, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 0, 0, 244, 269,
	151, 316, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 202, 0, 262, 173, 319,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 236, 209, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 200,
	0, 0, 248, 0, 279, 155, 208, 206, 301, 170,
	166, 164, 154, 187, 213, 247, 297, 241, 0, 203,
	0, 0, 288, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	153, 131, 233, 289, 172, 0, 0, 461, 114, 115,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 325, 0, 0, 0, 0, 259, 0, 293, 181,
	199, 145, 196, 128, 140, 0, 179, 232, 266, 270,
	0, 0, 0, 156, 0, 268, 245, 314, 0, 249,
	267, 204, 303, 260, 313, 326, 327, 162, 226, 320,
	298, 323, 335, 141, 159, 239, 294, 317, 285, 221,
	300, 195, 284, 133, 296, 311, 150, 278, 0, 0,
	0, 135, 309, 292, 219, 192, 193, 134, 0, 264,
	163, 175, 158, 235, 306, 307, 157, 336, 142, 322,
	137, 143, 321, 228, 302, 310, 220, 212, 136, 308,
	218, 211, 198, 169, 183, 257, 207, 258, 184, 224,
	223, 225, 0, 132, 0, 290, 318, 337, 147, 0,
	0, 299, 331, 334, 0, 261, 148, 176, 168, 256,
	174, 201, 330, 332, 333, 227, 144, 186, 286, 197,
	205, 0, 0, 244, 269, 151, 316, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	202, 0, 262, 173, 319, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 152, 160, 167, 171, 178, 182,
	185, 188, 189, 190, 194, 210, 214, 215, 216, 217,
	229, 230, 231, 234, 237, 238, 240, 242, 243, 246,
	250, 251, 252, 253, 254, 255, 263, 265, 271, 272,
	273, 274, 275, 276, 277, 280, 281, 282, 283, 291,
	295, 304, 305, 315, 324, 328, 180, 312, 329, 236,
	209, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 200, 0, 0, 248, 0, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 0, 203, 0, 0, 288, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 153, 131, 233, 289, 172,
	66, 0, 0, 114, 115, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 325, 0, 0, 0,
	0, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 0, 0, 0, 156, 0,
	268, 245, 314, 0, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 0, 0, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 0, 0, 244, 269,
	151, 316, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 202, 0, 262, 173, 319,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 236, 209, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 200,
	0, 0, 248, 0, 279, 155, 208, 206, 301, 170,
	166, 164, 154, 187, 213, 247, 297, 241, 0, 203,
	0, 0, 288, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	153, 131, 233, 289, 172, 0, 0, 0, 114, 115,
	116, 0, 1080, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
	0, 325, 0, 0, 0, 0, 259, 0, 293, 181,
	199, 145, 196, 128, 140, 0, 179, 232, 266, 270,
	0, 0, 0, 156, 0, 268, 245, 314, 0, 249,
	267, 204, 303, 260, 313, 326, 327, 162, 226, 320,
	298, 323, 335, 141, 159, 239, 294, 317, 285, 221,
	300, 195, 284, 133, 296, 311, 150, 278, 0, 0,
	0, 135, 309, 292, 219, 192, 193, 134, 0, 264,
	163, 175, 158, 235, 306, 307, 157, 336, 142, 322,
	137, 143, 321, 228, 302, 310, 220, 212, 136, 308,
	218, 211, 198, 169, 183, 257, 207, 258, 184, 224,
	223, 225, 0, 132, 0, 290, 318, 337, 147, 0,
	0, 299, 331, 334, 0, 261, 148, 176, 168, 256,
	174, 201, 330, 332, 333, 227, 144, 186, 286, 197,
	205, 0, 0, 244, 269, 151, 316, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 138,
	202, 0, 262, 173, 319, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 130, 139, 146, 152, 160, 167, 171, 178, 182,
	185, 188, 189, 190, 194, 210, 214, 215, 216, 217,
	229, 230, 231, 234, 237, 238, 240, 242, 243, 246,
	250, 251, 252, 253, 254, 255, 263, 265, 271, 272,
	273, 274, 275, 276, 277, 280, 281, 282, 283, 291,
	295, 304, 305, 315, 324, 328, 180, 312, 329, 236,
	209, 0, 0, 0, 0, 0, 0, 0, 165, 0,
	0, 0, 0, 0, 200, 0, 0, 248, 0, 279,
	155, 208, 206, 301, 170, 166, 164, 154, 187, 213,
	247, 297, 241, 0, 203, 0, 0, 288, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 153, 131, 233, 289, 172,
	0, 0, 0, 114, 115, 116, 0, 824, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 325, 0, 0, 0,
	0, 259, 0, 293, 181, 199, 145, 196, 128, 140,
	0, 179, 232, 266, 270, 0, 0, 0, 156, 0,
	268, 245, 314, 0, 249, 267, 204, 303, 260, 313,
	326, 327, 162, 226, 320, 298, 323, 335, 141, 159,
	239, 294, 317, 285, 221, 300, 195, 284, 133, 296,
	311, 150, 278, 0, 0, 0, 135, 309, 292, 219,
	192, 193, 134, 0, 264, 163, 175, 158, 235, 306,
	307, 157, 336, 142, 322, 137, 143, 321, 228, 302,
	310, 220, 212, 136, 308, 218, 211, 198, 169, 183,
	257, 207, 258, 184, 224, 223, 225, 0, 132, 0,
	290, 318, 337, 147, 0, 0, 299, 331, 334, 0,
	261, 148, 176, 168, 256, 174, 201, 330, 332, 333,
	227, 144, 186, 286, 197, 205, 0, 0, 244, 269,
	151, 316, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 138, 202, 0, 262, 173, 319,
	0, 0, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 130, 139, 146, 152,
	160, 167, 171, 178, 182, 185, 188, 189, 190, 194,
	210, 214, 215, 216, 217, 229, 230, 231, 234, 237,
	238, 240, 242, 243, 246, 250, 251, 252, 253, 254,
	255, 263, 265, 271, 272, 273, 274, 275, 276, 277,
	280, 281, 282, 283, 291, 295, 304, 305, 315, 324,
	328, 180, 312, 329, 837, 209, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 200, 0, 0, 248,
	0, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 0, 203, 0, 0, 288,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 325, 0,
	0, 0, 0, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 0, 0, 0,
	156, 0, 268, 245, 314, 0, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 143, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 0, 0, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 227, 144, 186, 286, 197, 205, 0, 0,
	244, 269, 151, 316, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 202, 0, 262,
	173, 319, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 236, 209, 0, 0,
	0, 0, 0, 0, 828, 165, 0, 0, 0, 0,
	0, 200, 0, 0, 248, 0, 279, 155, 208, 206,
	301, 170, 166, 164, 154, 187, 213, 247, 297, 241,
	0, 203, 0, 0, 288, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 153, 131, 233, 289, 172, 0, 0, 0,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 325, 0, 0, 0, 0, 259, 0,
	293, 181, 199, 145, 196, 128, 140, 0, 179, 232,
	266, 270, 0, 0, 0, 156, 0, 268, 245, 314,
	0, 249, 267, 204, 303, 260, 313, 326, 327, 162,
	226, 320, 298, 323, 335, 141, 159, 239, 294, 317,
	285, 221, 300, 195, 284, 133, 296, 311, 150, 278,
	0, 0, 0, 135, 309, 292, 219, 192, 193, 134,
	0, 264, 163, 175, 158, 235, 306, 307, 157, 336,
	142, 322, 137, 143, 321, 228, 302, 310, 220, 212,
	136, 308, 218, 211, 198, 169, 183, 257, 207, 258,
	184, 224, 223, 225, 0, 132, 0, 290, 318, 337,
	147, 0, 0, 299, 331, 334, 0, 261, 148, 176,
	168, 256, 174, 201, 330, 332, 333, 227, 144, 186,
	286, 197, 205, 0, 0, 244, 269, 151, 316, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 202, 0, 262, 173, 319, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 152, 160, 167, 171,
	178, 182, 185, 188, 189, 190, 194, 210, 214, 215,
	216, 217, 229, 230, 231, 234, 237, 238, 240, 242,
	243, 246, 250, 251, 252, 253, 254, 255, 263, 265,
	271, 272, 273, 274, 275, 276, 277, 280, 281, 282,
	283, 291, 295, 304, 305, 315, 324, 328, 180, 312,
	329, 236, 209, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 200, 0, 0, 248,
	0, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 0, 203, 0, 0, 288,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 702,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 325, 0,
	0, 0, 0, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 0, 0, 0,
	156, 0, 268, 245, 314, 0, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 143, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 0, 0, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 227, 144, 186, 286, 197, 205, 0, 0,
	244, 269, 151, 316, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 202, 0, 262,
	173, 319, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 236, 209, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 200, 0, 0, 248, 0, 279, 155, 208, 206,
	301, 170, 166, 164, 154, 187, 213, 247, 297, 241,
	0, 203, 0, 0, 288, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 153, 131, 233, 289, 172, 0, 0, 0,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 377, 0, 177,
	0, 0, 0, 325, 0, 0, 0, 0, 259, 0,
	293, 181, 199, 145, 196, 128, 140, 0, 179, 232,
	266, 270, 0, 0, 0, 156, 0, 268, 245, 314,
	0, 249, 267, 204, 303, 260, 313, 326, 327, 162,
	226, 320, 298, 323, 335, 141, 159, 239, 294, 317,
	285, 221, 300, 195, 284, 133, 296, 311, 150, 278,
	0, 0, 0, 135, 309, 292, 219, 192, 193, 134,
	0, 264, 163, 175, 158, 235, 306, 307, 157, 336,
	142, 322, 137, 143, 321, 228, 302, 310, 220, 212,
	136, 308, 218, 211, 198, 169, 183, 257, 207, 258,
	184, 224, 223, 225, 0, 132, 0, 290, 318, 337,
	147, 0, 0, 299, 331, 334, 0, 261, 148, 176,
	168, 256, 174, 201, 330, 332, 333, 227, 144, 186,
	286, 197, 205, 0, 0, 244, 269, 151, 316, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 202, 0, 262, 173, 319, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 152, 160, 167, 171,
	178, 182, 185, 188, 189, 190, 194, 210, 214, 215,
	216, 217, 229, 230, 231, 234, 237, 238, 240, 242,
	243, 246, 250, 251, 252, 253, 254, 255, 263, 265,
	271, 272, 273, 274, 275, 276, 277, 280, 281, 282,
	283, 291, 295, 304, 305, 315, 324, 328, 376, 312,
	329, 236, 209, 0, 0, 0, 0, 0, 0, 0,
	165, 0, 0, 0, 0, 0, 200, 0, 0, 248,
	0, 279, 155, 208, 206, 301, 170, 166, 164, 154,
	187, 213, 247, 297, 241, 0, 203, 0, 0, 288,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 153, 131, 233,
	289, 172, 0, 0, 0, 114, 115, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 122, 0, 325, 0,
	0, 0, 0, 259, 0, 293, 181, 199, 145, 196,
	128, 140, 0, 179, 232, 266, 270, 0, 0, 0,
	156, 0, 268, 245, 314, 0, 249, 267, 204, 303,
	260, 313, 326, 327, 162, 226, 320, 298, 323, 335,
	141, 159, 239, 294, 317, 285, 221, 300, 195, 284,
	133, 296, 311, 150, 278, 0, 0, 0, 135, 309,
	292, 219, 192, 193, 134, 0, 264, 163, 175, 158,
	235, 306, 307, 157, 336, 142, 322, 137, 143, 321,
	228, 302, 310, 220, 212, 136, 308, 218, 211, 198,
	169, 183, 257, 207, 258, 184, 224, 223, 225, 0,
	132, 0, 290, 318, 337, 147, 0, 0, 299, 331,
	334, 0, 261, 148, 176, 168, 256, 174, 201, 330,
	332, 333, 227, 144, 186, 286, 197, 205, 0, 0,
	244, 269, 151, 316, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 138, 202, 0, 262,
	173, 319, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 130, 139,
	146, 152, 160, 167, 171, 178, 182, 185, 188, 189,
	190, 194, 210, 214, 215, 216, 217, 229, 230, 231,
	234, 237, 238, 240, 242, 243, 246, 250, 251, 252,
	253, 254, 255, 263, 265, 271, 272, 273, 274, 275,
	276, 277, 280, 281, 282, 283, 291, 295, 304, 305,
	315, 324, 328, 180, 312, 329, 236, 209, 0, 0,
	0, 0, 0, 0, 0, 165, 0, 0, 0, 0,
	0, 200, 0, 0, 248, 0, 279, 155, 208, 206,
	301, 170, 166, 164, 154, 187, 213, 247, 297, 241,
	0, 203, 0, 0, 288, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 153, 131, 233, 289, 172, 0, 0, 0,
	114, 115, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 325, 0, 0, 0, 0, 259, 0,
	293, 181, 199, 145, 196, 128, 140, 0, 179, 232,
	266, 270, 0, 0, 0, 156, 0, 268, 245, 314,
	0, 249, 267, 204, 303, 260, 313, 326, 327, 162,
	226, 320, 298, 323, 335, 141, 159, 239, 294, 317,
	285, 221, 300, 195, 284, 133, 296, 311, 150, 278,
	0, 0, 0, 135, 309, 292, 219, 192, 193, 134,
	0, 264, 163, 175, 158, 235, 306, 307, 157, 336,
	142, 322, 137, 143, 321, 228, 302, 310, 220, 212,
	136, 308, 218, 211, 198, 169, 183, 257, 207, 258,
	184, 224, 223, 225, 0, 132, 0, 290, 318, 337,
	147, 0, 0, 299, 331, 334, 0, 261, 148, 176,
	168, 256, 174, 201, 330, 332, 333, 227, 144, 186,
	286, 197, 205, 0, 0, 244, 269, 151, 316, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 138, 202, 0, 262, 173, 319, 0, 0, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 130, 139, 146, 152, 160, 167, 171,
	178, 182, 185, 188, 189, 190, 194, 210, 214, 215,
	216, 217, 229, 230, 231, 234, 237, 238, 240, 242,
	243, 246, 250, 251, 252, 253, 254, 255, 263, 265,
	271, 272, 273, 274, 275, 276, 277, 280, 281, 282,
	283, 291, 295, 304, 305, 315, 324, 328, 180, 312,
	329, 0, 209,
}

var yyPact = [...]int{
	141, -1000, -298, 1272, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1228, 896, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	375, 897, 103, 1149, 5, 648, 210, 63, 19632, 209,
	1006, 20017, -1000, 54, -1000, 39, 20017, 52, 19247, -1000,
	-1000, -1000, 11129, 1100, -62, -68, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 924, 1208, 1213, 1226, 792, 1192,
	-1000, 9576, 9576, 176, 176, 176, 8036, -1000, -1000, 16160,
	20017, 20017, 906, 168, 206, 168, -148, -1000, -1000, -1000,
	-1000, -1000, -1000, 1149, -1000, -1000, 122, -1000, -1000, 20017,
	20017, 326, 1149, 98, -1000, -1000, -1000, 20017, 154, 648,
	154, 154, 20017, -1000, 257, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20017, 648,
	1140, 441, 96, 317, 317, 317, 317, -1000, 278, -1000,
	5624, 99, 75, -34, 1237, 90, -7, -1000, 441, 5624,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 185, -1000,
	-1000, -1000, -1000, 20017, 18862, 159, 376, -1000, -1000, -1000,
	-1000, 814, 605, -1000, 11129, 921, 854, 854, -1000, -1000,
	226, -1000, -1000, 12284, 12284, 12284, 12284, 12284, 12284, 12284,
	12284, 12284, 12284, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 854, 251, -1000,
	10744, 854, 854, 854, 854, 854, 854, 854, 854, 11129,
	854, 854, 854, 854, 854, 854, 854, 854, 854, 854,
	854, 854, 854, 854, 854, 854, -1000, -1000, -1000, 20017,
	-1000, 1228, -1000, 896, -1000, -1000, -1000, 1136, 11129, 11129,
	1228, -1000, 1031, 9576, -1000, -1000, 1139, -1000, -1000, -1000,
	-1000, 427, 1252, -1000, 13054, 250, 1251, 18477, -1000, 16930,
	18092, 852, 7634, -74, -1000, -1000, -1000, 371, 15775, -1000,
	-1000, -1000, 1132, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 800,
	20017, -1000, -1000, 348, 648, -1000, 887, -1000, 791, -1000,
	879, 76, 368, 20017, 408, 648, 648, -1000, -1000, -1000,
	1123, 350, 130, 5624, 111, 142, 117, 20017, 1149, 1099,
	851, 184, 20017, 1189, 948, 20017, 648, -1000, 6830, -1000,
	5624, 441, -1000, 666, 11129, 5624, 5624, 5624, 20017, 5624,
	5624, -1000, 658, -1000, -1000, -1000, 430, -1000, -1000, -1000,
	-1000, -1000, -1000, 5624, 5624, 415, 430, 415, -1000, -1000,
	-1000, -1000, 11129, 317, -1000, 947, -1000, -1000, 42, -1000,
	-1000, -1000, -1000, -1000, 1272, -1000, -1000, -1000, -142, 11129,
	11129, 11129, 11129, 576, 335, 12284, 572, 320, 12284, 12284,
	12284, 12284, 12284, 12284, 12284, 12284, 12284, 12284, 12284, 12284,
	12284, 12284, 12284, 643, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 648, -1000, 1270, 716, 716, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 12669, 8421, 6830, 792,
	787, 1228, 9576, 9576, 11129, 11129, 10346, 9961, 9576, 1131,
	352, 605, 20017, -1000, -1000, 11899, -1000, -1000, -1000, -1000,
	-1000, 674, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20017,
	20017, 9576, 9576, 9576, 9576, 9576, -1000, 842, -1000, -179,
	15390, 1213, 792, 1139, 1180, 1262, 307, 505, 836, -1000,
	531, 1213, 15005, 881, -1000, 1139, -1000, -1000, -1000, 20017,
	-1000, -1000, 17700, -1000, -1000, 6428, 20017, 121, 20017, -1000,
	868, 1012, -1000, -1000, -1000, 1196, 14620, 20017, 807, 798,
	-1000, -1000, 249, 7232, -74, -1000, 7232, 826, -1000, -110,
	-79, 8806, 259, -1000, -1000, -1000, -1000, 4820, 13439, 750,
	532, -21, -1000, -1000, -1000, 879, -1000, 879, 879, 879,
	879, 13, 13, 13, 13, -1000, -1000, -1000, -1000, -1000,
	895, 894, -1000, 879, 879, 879, 879, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 893, 893, 893, 880, 880, 145,
	11129, 60, 20017, 1191, 520, 71, 362, 78, -1000, 1187,
	930, -1000, 350, 693, -1000, -1000, 526, 526, 333, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	123, -1000, 20017, 20017, 20017, 20017, 20017, 217, 106, 20017,
	20017, 835, -1000, 20017, 252, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 605, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20017, -1000, -1000, -1000, -1000, 441, 20017, 20017, 20017,
	441, 605, -1000, 20017, 20017, -1000, -1000, -1000, -1000, -1000,
	605, 335, 537, 417, -1000, -1000, 615, -1000, -1000, 1779,
	-1000, -1000, -1000, -1000, 572, 12284, 12284, 12284, 279, 1779,
	1991, 937, 2006, 281, 484, 484, 280, 280, 280, 280,
	280, 401, 401, -1000, -1000, -1000, 674, -1000, -1000, -1000,
	674, 9576, 9576, 834, 854, 248, -1000, 924, -1000, -1000,
	1213, 779, 779, 545, 601, 372, 1250, 779, 369, 1248,
	779, 779, 9576, -1000, -1000, 454, -1000, 11129, 674, -1000,
	239, -1000, 374, 833, 831, 779, 674, 674, 779, 779,
	20017, -1000, -291, -1000, -123, 265, 854, -1000, 17315, -1000,
	-1000, 1136, -1000, -1000, 1084, -1000, 1015, 11129, 11129, 11129,
	-1000, -1000, -1000, 1136, 1212, -1000, 1051, 1044, 1235, 9576,
	16930, 1139, -1000, -1000, -1000, 234, 1235, 858, 854, -1000,
	20017, 16930, 16930, 16930, 16930, 16930, -1000, 968, 967, -1000,
	1038, 1021, 994, 20017, -1000, 781, 792, 14620, 121, 819,
	16930, 20017, -1000, -1000, 16930, 20017, 6026, -1000, 826, -74,
	-87, -1000, -1000, -1000, -1000, 605, -1000, 663, 825, 4418,
	-1000, -1000, -1000, -1000, 160, -1000, -1000, 891, 648, -1000,
	1161, 316, 316, 302, 648, 1153, -1000, -1000, -1000, -1000,
	1147, -1000, 416, -42, -1000, -1000, 13, 13, -1000, -1000,
	259, 1116, 259, 259, 259, 649, 649, -1000, -1000, -1000,
	-1000, -1000, 496, -1000, -1000, -1000, 483, -1000, -1000, 887,
	540, 949, 60, -1000, 648, 350, 642, 1107, -1000, -1000,
	748, 188, 61, 79, -1000, -1000, -1000, -1000, 945, 20017,
	657, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20017, -1000, -1000, -1000, -1000, -1000, 20017, 913, -1000, -1000,
	-1000, -1000, 51, 110, 104, 180, -1000, 5624, 20017, -1000,
	-1000, -1000, 415, -1000, -1000, -1000, 415, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 279, 1779, 1886, -1000, 12284, 12284,
	-1000, -1000, 779, 779, 9576, 6830, 1228, 1136, -1000, -1000,
	191, 643, 191, 12284, 12284, -1000, 12284, 12284, -1000, -168,
	810, 381, -1000, 11129, 575, -1000, 6830, -1000, 12284, 12284,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204,
	193, 192, 20017, -1000, -1000, 621, 631, 997, 605, 605,
	-1000, -1000, 20017, -1000, -1000, -1000, -1000, 1232, 11129, -1000,
	823, -1000, 5222, 1213, 944, 20017, 854, 1272, 13837, 20017,
	815, -1000, 353, 1012, 929, 943, 1030, -1000, -1000, -1000,
	-1000, 960, -1000, 959, -1000, -1000, -1000, -1000, -1000, 792,
	1235, 16930, 809, -1000, 809, -1000, 230, -1000, -1000, -1000,
	-115, -113, -1000, -1000, -1000, 4820, -1000, 4820, -1000, 20017,
	158, -1000, 648, 648, 648, -1000, -1000, -1000, 886, 941,
	12284, -1000, -1000, -1000, 259, 259, -1000, 347, -1000, -1000,
	-1000, 772, -1000, 770, 822, 761, 21, -1000, 885, 1113,
	350, 350, -1000, -1000, 474, -1000, 629, -1000, 20017, 70,
	-1000, 883, 671, -1000, 20017, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1170, -180, 648, 20017, 20017, 20017, -1000, 20017,
	-1000, -1000, 441, 441, -1000, 12284, 1779, 1779, -1000, -1000,
	674, -1000, 1213, -1000, 674, 879, 879, -1000, 879, 880,
	-1000, 879, 32, 879, 30, 674, 674, 1871, 1847, 1754,
	1558, 854, -156, -1000, 605, 11129, -1000, 1382, 636, 854,
	854, 854, 753, -1000, 627, 13, -1000, -1000, -1000, 1230,
	1223, 605, -1000, -1000, -1000, 1167, 813, 755, -1000, -1000,
	9191, 758, 1034, 224, 753, 1228, 20017, 11129, -1000, -1000,
	11129, 877, -1000, 11129, -1000, -1000, -1000, 1228, 1228, 809,
	-1000, -1000, 291, -1000, -1000, -1000, 4418, -1000, 743, -1000,
	1153, -1000, -1000, -1000, 20017, -16, 1257, 1779, -1000, -1000,
	-1000, -1000, 13, 617, 13, 470, -1000, 435, -1000, -1000,
	-226, -1000, -1000, 848, 953, -1000, -1000, 876, -1000, -1000,
	-1000, 726, -1000, -1000, 854, -1000, 6830, -1000, -1000, 873,
	915, -1000, -1000, -1000, -1000, 1779, -1000, 1136, -1000, -1000,
	163, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12284,
	12284, 12284, 12284, 12284, 1213, 613, 605, 12284, 12284, 16545,
	20017, 20017, 14222, 20017, 13, -49, -1000, 11129, 11129, 1152,
	-1000, 854, -1000, 878, 20017, 854, 20017, -1000, 1213, -1000,
	605, 605, 20017, 605, 1213, -1000, 60, 735, -1000, 309,
	-1000, -67, 259, -1000, 259, 718, 689, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1195, 20017, -1000, 119, 817,
	-1000, 349, 20017, 20017, -1000, -1000, -1000, 374, 374, 374,
	374, 64, 674, -1000, 374, 374, 733, -1000, 733, 733,
	265, -1000, -286, -1000, 1092, 1086, 605, 814, 1256, -1000,
	854, 1272, 203, 755, -1000, -1000, 711, -1000, -1000, 133,
	20017, 421, 1151, -1000, 1141, -1000, -1000, -1000, -1000, -1000,
	896, 707, 704, -1000, 20017, 6830, 4820, 702, -1000, -1000,
	-1000, -1000, -1000, 674, 69, -183, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -49, 198, -1000, 1056, 1054, 1222, 20017,
	755, 20017, -1000, 20017, -1000, -1000, 608, -1000, -1000, 127,
	-1000, -1000, 119, 1032, -1000, -1000, 913, -1000, 973, -178,
	-190, 1060, 1072, 1072, 1086, 1220, 1083, 1080, -1000, 607,
	694, -1000, 862, -1000, -1000, -86, -1000, 118, -180, -1000,
	951, -1000, 1058, 579, -1000, -1000, -1000, -1000, 604, -1000,
	1219, 1218, -1000, 20017, 144, -1000, -1000, 115, -1000, -181,
	-1000, 555, -1000, -1000, -1000, 595, 593, 700, 74, 854,
	-188, -1000, -1000, -1000, -1000, 940, -1000, 11514, -191, 938,
	-1000, 1246, 374, 674, -1000, -1000, 1255, 294, 294, -1000,
	-1000, -1000, -1000, -1000, 140, 523, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1557, 1555, 13, 88, 81, 1554, 1553, 1552, 1551,
	119, 117, 116, 1548, 1546, 1544, 1543, 1542, 1540, 1539,
	1538, 1536, 1535, 1534, 1533, 1532, 1530, 103, 102, 435,
	1529, 1528, 1527, 1526, 1525, 1524, 1522, 1521, 1520, 1519,
	1517, 1516, 1501, 1500, 104, 1499, 1497, 1496, 1495, 1494,
	1493, 1492, 1483, 1481, 1480, 1478, 1476, 97, 1475, 44,
	201, 55, 74, 1473, 71, 1472, 1470, 1469, 1468, 1467,
	2029, 1465, 41, 73, 70, 1464, 48, 1461, 1460, 84,
	1459, 1457, 1449, 68, 1444, 1443, 2844, 1438, 65, 75,
	15, 26, 1437, 1436, 1434, 1432, 99, 1456, 1426, 1423,
	17, 1422, 1420, 113, 1419, 79, 23, 20, 18, 27,
	1418, 77, 1417, 6, 1415, 82, 1414, 1412, 1411, 1410,
	34, 1409, 76, 80, 19, 1407, 3, 7, 1406, 1404,
	1402, 1398, 1396, 1392, 8, 1391, 1389, 1387, 1385, 1381,
	29, 1380, 10, 1379, 67, 53, 24, 5, 1378, 1376,
	30, 96, 64, 94, 1375, 1374, 1373, 770, 1371, 61,
	1370, 122, 1369, 37, 101, 508, 554, 1368, 1367, 1366,
	1364, 1362, 50, 818, 1900, 39, 98, 1361, 1360, 2646,
	40, 72, 22, 1359, 1358, 1356, 69, 54, 56, 754,
	1355, 43, 1354, 1353, 1345, 1344, 1342, 1341, 1339, 121,
	1338, 1337, 1334, 45, 25, 93, 28, 1332, 1331, 1330,
	1329, 62, 89, 1327, 1326, 60, 63, 1322, 100, 47,
	32, 1320, 1318, 1316, 1315, 35, 12, 1314, 85, 38,
	58, 31, 36, 1313, 21, 1310, 33, 42, 1308, 4,
	1306, 16, 1305, 2, 0, 1304, 9, 1303, 83, 1110,
	1, 1302, 11, 1300, 1297, 78, 1295, 1291, 1290, 1383,
	1039, 95, 1278, 106,
}

var yyR1 = [...]int{
	0, 257, 258, 258, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 244, 244, 244, 247, 247, 21, 41,
	3, 3, 3, 3, 2, 2, 8, 9, 4, 5,
	5, 10, 10, 51, 51, 11, 12, 12, 12, 12,
	261, 261, 81, 81, 79, 79, 80, 80, 144, 144,
	13, 14, 14, 153, 153, 152, 152, 152, 154, 154,
	154, 154, 189, 189, 15, 15, 15, 15, 15, 58,
	58, 246, 246, 245, 243, 243, 242, 242, 241, 23,
	24, 25, 26, 249, 249, 221, 30, 30, 29, 29,
	29, 29, 31, 31, 28, 28, 27, 27, 223, 223,
	222, 222, 222, 222, 222, 222, 212, 192, 192, 192,
	192, 195, 195, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 194, 194, 194, 194, 194, 196, 196, 196,
	196, 196, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 198, 198, 198,
	198, 198, 198, 198, 198, 211, 211, 199, 199, 205,
	205, 206, 206, 206, 208, 208, 209, 209, 167, 167,
	167, 201, 201, 202, 202, 207, 207, 203, 203, 203,
	204, 204, 204, 210, 210, 210, 210, 210, 200, 200,
	213, 234, 234, 233, 233, 230, 230, 230, 230, 220,
	220, 227, 227, 227, 227, 227, 227, 217, 217, 217,
	218, 218, 216, 216, 219, 219, 229, 229, 228, 214,
	214, 215, 215, 236, 236, 236, 236, 236, 237, 251,
	252, 250, 250, 250, 250, 250, 49, 49, 49, 168,
	168, 168, 224, 224, 224, 225, 225, 225, 226, 226,
	226, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 240, 238, 238, 239, 239, 17, 22, 22,
	18, 18, 18, 18, 19, 19, 32, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 160, 160,
	253, 253, 162, 162, 158, 158, 161, 161, 159, 159,
	159, 163, 163, 163, 164, 164, 190, 190, 190, 34,
	34, 36, 36, 37, 38, 38, 184, 184, 185, 185,
	39, 40, 50, 50, 50, 50, 50, 50, 52, 52,
	52, 7, 7, 7, 7, 46, 46, 46, 6, 6,
	35, 35, 42, 254, 254, 255, 256, 256, 256, 256,
	43, 20, 262, 44, 45, 45, 57, 57, 57, 53,
	53, 53, 56, 56, 56, 61, 61, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 60, 60,
	62, 62, 62, 62, 177, 177, 177, 176, 176, 71,
	71, 72, 72, 73, 73, 74, 74, 74, 112, 89,
	89, 143, 143, 142, 142, 145, 145, 75, 75, 75,
	75, 76, 76, 77, 77, 78, 78, 183, 183, 182,
	182, 182, 181, 181, 82, 82, 82, 84, 83, 83,
	83, 83, 85, 85, 87, 87, 86, 86, 88, 90,
	90, 90, 90, 90, 91, 91, 70, 70, 70, 70,
	70, 70, 70, 70, 156, 156, 93, 93, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 104, 104,
	104, 104, 104, 104, 94, 94, 94, 94, 94, 94,
	94, 59, 59, 105, 105, 105, 111, 106, 106, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 101, 101, 101, 101, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 263, 263, 103, 102,
	102, 102, 102, 102, 102, 102, 55, 55, 55, 55,
	55, 188, 188, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 116, 116, 54, 54,
	114, 114, 115, 117, 117, 113, 113, 113, 96, 96,
	96, 96, 96, 96, 96, 96, 98, 98, 98, 118,
	118, 119, 119, 120, 120, 121, 121, 122, 123, 123,
	123, 124, 124, 124, 124, 235, 235, 235, 235, 235,
	231, 231, 231, 231, 232, 232, 232, 65, 65, 65,
	65, 67, 67, 66, 66, 47, 47, 48, 48, 48,
	68, 68, 69, 69, 69, 69, 140, 140, 140, 125,
	125, 125, 125, 130, 130, 130, 126, 126, 128, 128,
	128, 129, 129, 129, 127, 133, 133, 135, 135, 134,
	134, 132, 132, 137, 137, 136, 136, 131, 131, 95,
	95, 95, 95, 95, 141, 141, 141, 141, 146, 146,
	107, 107, 109, 109, 108, 110, 147, 147, 150, 148,
	148, 151, 151, 151, 151, 151, 149, 149, 149, 178,
	178, 178, 155, 155, 165, 165, 166, 166, 157, 157,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	170, 170, 170, 171, 171, 138, 138, 138, 138, 139,
	139, 174, 174, 175, 175, 179, 179, 180, 180, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 259, 260, 186, 187, 187,
	187,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 2, 3,
	5, 6, 6, 7, 4, 6, 5, 7, 8, 1,
	3, 7, 8, 1, 1, 9, 9, 8, 7, 7,
	1, 1, 1, 3, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 6, 11, 2, 0,
	2, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	7, 4, 2, 1, 1, 4, 0, 1, 1, 1,
	2, 2, 0, 1, 5, 5, 4, 4, 2, 4,
	1, 1, 3, 4, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 0, 1, 1, 2, 2, 3, 2, 3, 0,
	1, 2, 3, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 3, 3,
	1, 3, 1, 10, 11, 11, 12, 1, 5, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 1, 0,
	1, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 5, 6, 6, 6, 6, 4, 4, 3, 6,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 3, 2, 3, 4, 4, 3,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	2, 7, 2, 3, 4, 5, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 2,
	3, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	7, 0, 3, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	5, 4, 5, 5, 0, 2, 1, 3, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 5, 6, 4, 4, 6,
	6, 6, 8, 8, 8, 8, 9, 8, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 2, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 3, 3,
	3, 0, 3, 1, 1, 0, 4, 0, 1, 1,
	0, 3, 1, 3, 2, 1, 0, 2, 4, 0,
	9, 3, 5, 0, 3, 3, 0, 1, 0, 2,
	2, 0, 2, 2, 2, 0, 3, 0, 3, 0,
	3, 0, 4, 0, 3, 0, 4, 0, 1, 2,
	1, 5, 4, 4, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -257, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -32, -33, -34, -36,
	-37, -38, -39, -40, -6, -35, -20, -21, -41, -42,
	-43, -4, -259, 6, 7, 8, -51, 10, 11, 31,
	-23, -24, 146, -25, 147, -26, 149, 148, 182, 150,
	175, 70, 208, 209, 211, 212, 213, 214, -52, 180,
	181, 152, 35, 41, 32, 33, 80, 9, 303, 177,
	176, 26, -258, 407, -57, 5, -120, 16, -3, -44,
	-262, -44, -44, -44, -44, -44, -44, -221, -223, 80,
	119, 80, -58, 154, -138, -249, 100, 160, 163, 164,
	294, 153, -30, -29, -28, -27, -31, 30, -249, 154,
	156, 268, -247, -244, 83, 84, 85, 154, 154, 155,
	156, -249, 154, -86, -179, -244, -173, 313, 168, 345,
	346, 76, 258, 208, 222, 216, 243, 235, 314, 347,
	169, 198, 233, 236, 281, 166, 348, 263, 271, 94,
	211, 290, 349, 75, 47, 40, 178, 231, 227, 199,
	350, 322, 192, 225, 46, 28, 45, 351, 273, 248,
	44, 352, 79, 318, 275, 226, 272, 152, 353, 171,
	401, 164, 354, 249, 253, 355, 282, 48, 356, 357,
	358, 74, 220, 221, 359, 206, 167, 284, 247, 165,
	34, 276, 315, 54, 186, 285, 42, 251, 41, 405,
	360, 246, 242, 49, 361, 362, 363, 364, 245, 219,
	241, 204, 58, 255, 254, 256, 193, 280, 238, 365,
	366, 367, 172, 77, 368, 228, 19, 369, 370, 200,
	371, 52, 372, 373, 288, 181, 374, 50, 37, 184,
	375, 376, 377, 378, 379, 380, 274, 250, 252, 161,
	188, 270, 317, 381, 224, 382, 173, 185, 180, 289,
	174, 383, 384, 385, 386, 387, 388, 389, 212, 39,
	390, 391, 392, 393, 207, 203, 283, 292, 57, 78,
	260, 394, 218, 163, 201, 395, 209, 51, 195, 266,
	205, 43, 239, 187, 396, 397, 229, 230, 244, 217,
	240, 210, 402, 189, 182, 398, 291, 202, 261, 319,
	194, 237, 234, 196, 399, 156, 190, 191, 400, 403,
	277, 267, 278, 279, 268, 197, 232, 262, 154, 137,
	236, 281, 146, 264, 265, 276, 277, 273, -162, 274,
	188, -190, 154, -158, 263, 267, 268, 197, -253, -244,
	275, 283, 282, 269, 279, 278, -179, 210, -184, 215,
	-174, -244, -173, 213, -86, -50, 401, 150, -186, -186,
	-186, -106, -70, -92, 103, -97, 30, 24, -96, -93,
	-113, -110, -111, 137, 138, 140, 139, 141, 126, 127,
	134, 104, 142, -101, -99, -100, -102, 87, 86, 95,
	88, 89, 90, 91, 96, 97, 98, -174, -179, -108,
	-259, 64, 65, 304, 305, 306, 307, 312, 308, 106,
	53, 293, 302, 301, 300, 297, 298, 295, 296, 310,
	311, 159, 294, 153, 132, 303, -244, -173, 40, 266,
	266, -5, -4, -259, 6, 21, 22, -124, 18, 17,
	-260, 82, -53, -63, 59, 60, -64, 22, 36, 63,
	61, -45, -62, 128, -70, -179, -62, -157, 158, -157,
	-157, -148, -189, 210, -151, 283, 282, -175, -149, -174,
	-172, 281, 236, 280, 151, 320, 102, 23, 25, 105,
	137, 17, 106, 136, 304, 146, 68, 321, 295, 296,
	293, 299, 306, 307, 294, 264, 30, 11, 323, 26,
	176, 22, 36, 130, 148, 109, 110, 179, 24, 177,
	98, 326, 20, 71, 12, 14, 327, 328, 15, 159,
	158, 121, 155, 66, 9, 142, 27, 118, 62, 329,
	29, 330, 331, 332, 333, 64, 119, 18, 297, 298,
	32, 406, 334, 312, 183, 132, 69, 55, 103, 335,
	336, 96, 337, 99, 72, 100, 16, 67, 38, 338,
	339, 340, 286, 341, 120, 149, 303, 65, 342, 153,
	265, 6, 309, 31, 175, 63, 343, 154, 108, 310,
	311, 157, 97, 5, 160, 33, 10, 70, 73, 300,
	301, 302, 53, 316, 107, 13, 344, 287, 101, -222,
	119, -212, -215, -174, 170, -237, 166, -86, -229, -228,
	-174, -65, 76, -166, 159, 155, -166, 303, -27, -28,
	236, 136, -86, -86, 146, 148, 151, 72, -29, 194,
	-22, -86, -165, 159, -244, -165, -165, -86, 143, -86,
	-244, 31, -163, 119, 13, 294, -244, 188, 154, 189,
	156, -164, 119, -164, -164, -164, -217, 155, 34, 167,
	-187, -259, -175, 195, 196, 195, -161, -160, 271, 272,
	266, 270, 13, 196, 266, 191, -163, -187, 157, -174,
	-46, -174, 87, -7, -3, -11, -10, -12, 111, 81,
	102, 100, 101, 118, -70, -94, 121, 103, 119, 120,
	105, 123, 122, 133, 126, 127, 128, 129, 130, 131,
	132, 124, 125, 136, 111, 112, 113, 114, 115, 116,
	117, -156, -259, -111, -259, 144, 145, -97, -97, -97,
	-97, -97, -97, -97, -97, -97, -97, -259, 143, -2,
	-106, -4, -259, -259, -259, -259, -259, -259, -259, -259,
	-116, -70, -259, -263, -103, -259, -263, -103, -263, -103,
	-263, -259, -263, -103, -263, -103, -263, -263, -103, -259,
	-259, -259, -259, -259, -259, -259, -186, -254, -255, -89,
	-86, -120, -3, -44, -140, 20, 32, -70, -121, -122,
	-70, -120, 55, -60, -62, -64, 59, 60, 93, 12,
	-177, -176, 23, -174, 87, 143, 12, -87, 27, -86,
	-72, -73, -74, -75, -89, -112, -259, 12, -79, -80,
	-86, -88, -179, 81, 210, -151, -189, -153, -152, 284,
	286, 111, -178, -174, 87, 30, 31, 82, 81, -86,
	-192, -195, -197, -196, -198, -193, -194, 233, 234, 137,
	237, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 31, 178, 229, 230, 231, 232, 249, 250, 251,
	252, 253, 254, 255, 256, 216, 235, 314, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 228, -244,
	80, 82, 81, -199, 80, -68, 199, 111, -86, 103,
	-244, -244, 31, -220, 111, -169, 151, 148, 149, -240,
	147, 258, 236, 94, 30, 16, 304, 184, 319, -244,
	185, -187, 190, 190, 154, 154, 203, -86, 40, 81,
	157, -79, 24, 72, -81, -86, -244, -180, -179, -172,
	-187, -163, 87, -70, -187, -187, -187, -86, -187, -187,
	87, -218, 12, 121, -187, -187, -159, 12, 121, -218,
	-159, -70, -164, 72, -185, 213, 247, 402, 403, 404,
	-70, -70, -70, -70, -104, 96, 103, 97, 98, -97,
	-105, -108, -111, 92, 121, 119, 120, 105, -97, -97,
	-97, -97, -97, -97, -97, -97, -97, -97, -97, -97,
	-97, -97, -97, -188, -244, 87, -244, -96, -96, -174,
	-61, 22, 36, -60, -175, -180, -172, -57, -260, -260,
	-120, -60, -60, -70, -70, -113, 87, -60, -113, 87,
	-60, -60, -56, 22, 36, -114, -115, 107, -113, -174,
	-179, -260, -97, -174, -174, -60, -61, -61, -60, -60,
	81, -256, 286, 287, 406, -182, 184, -181, 23, -179,
	87, -124, -260, -125, 27, 10, 121, 81, 19, 81,
	-123, 25, 26, -124, -98, -174, 88, 91, -71, 81,
	12, -64, -86, -176, 128, -180, -86, -144, 184, -86,
	31, 81, -82, -84, -83, -85, 62, 66, 68, 63,
	64, 65, 69, -183, 23, -72, -3, -259, -86, -79,
	-261, 81, 12, 73, -261, 81, 143, -151, -153, 81,
	285, 287, 288, 72, 99, -70, -204, 136, -224, -225,
	-226, -175, 87, 88, -212, -213, -214, -227, 170, -236,
	161, 163, 164, 160, -216, 171, -237, 155, 29, 82,
	-167, 96, 103, -208, 261, -199, -199, -199, -199, -199,
	-203, 236, -203, -203, -203, 80, 80, -199, -199, -199,
	-199, -205, 80, -205, -205, -206, 80, -206, -237, 166,
	-70, -234, -233, -230, 73, 165, 94, 316, -228, -123,
	88, -67, 201, 111, 202, 204, 205, 24, -139, 73,
	-220, -244, 87, -186, -248, 166, 162, 170, 171, 164,
	83, 84, 85, 155, 29, 161, 163, 184, 160, -248,
	-170, -171, 157, 23, 155, 29, 184, -86, -86, -86,
	-86, -86, 151, 148, 192, -86, -86, -86, 81, -49,
	174, 169, -86, -163, -179, -179, -86, -163, -86, -174,
	96, 97, 98, -105, -97, -97, -97, -59, 179, 102,
	-260, -260, -60, -60, -259, 143, -5, -124, -260, -260,
	81, 73, 23, 12, 12, -260, 12, 12, -260, -260,
	-60, -117, -115, 109, -70, -260, 143, -260, 81, 81,
	-260, -260, -260, -260, -260, -255, 405, 287, -90, 70,
	158, 71, -259, -181, -140, 38, 46, 57, -70, -70,
	-122, -140, -155, 20, 12, 53, 53, -91, 13, -62,
	-72, -64, 143, -91, -95, 31, 53, -3, -259, -259,
	-147, -150, -113, -73, -74, -74, -73, -74, 62, 62,
	62, 67, 62, 67, 62, -83, -179, -260, -260, -3,
	-144, 73, -72, -86, -72, -88, -179, 128, -152, -154,
	289, 286, 292, -244, 87, 81, -226, 111, -215, 80,
	-244, 29, -216, -216, -216, -219, -244, -219, 29, -201,
	30, 96, -209, 262, -203, -203, -204, 31, -204, -204,
	-204, -211, 87, -211, 88, 88, 82, -235, -231, -232,
	32, 76, -230, -244, -220, 87, 37, 82, 156, 207,
	-69, 299, 87, 83, 72, -174, -244, 87, -186, -186,
	-86, -186, -174, -246, 73, 190, 258, 190, 193, 157,
	-187, -86, -159, -159, -59, 102, -97, -97, -260, -260,
	-61, -175, -120, -140, -191, 137, 233, 178, 231, 227,
	247, 238, 260, 229, 261, -188, -191, -97, -97, -97,
	-97, 313, -120, 110, -70, 108, -175, -97, -97, 155,
	155, 155, -145, -174, 39, 87, 87, 58, -86, -118,
	14, -70, 128, -124, -146, 72, -147, -107, -109, -108,
	-259, -141, -260, -174, -145, -91, 81, 111, -77, -76,
	72, 73, -78, 72, -76, 62, 62, -260, -91, -72,
	-91, -91, 143, 286, 290, 291, -225, -226, -229, -236,
	171, -219, -219, -219, 80, -202, 72, -97, -204, -204,
	-244, 137, 82, 81, 82, 81, 82, 81, -168, 351,
	103, -232, -231, -220, -220, 88, 87, -86, -66, 199,
	206, 80, 84, -86, 27, -243, 316, -245, -244, -174,
	-174, -174, -86, -163, -163, -97, -260, -124, -260, -199,
	-199, -199, -206, -199, 221, -199, 221, -260, -260, 20,
	20, 20, 20, -259, -54, 309, -70, 81, 81, -259,
	-259, -259, -260, 81, 87, -203, -119, 15, 17, 28,
	-146, 81, -260, -260, 81, 53, 143, -260, -120, -150,
	-70, -70, 80, -70, -120, -91, 82, -142, -174, -207,
	258, 10, -203, 87, -203, 88, 88, 351, 30, 77,
	78, 79, 30, 74, 75, -143, 80, 82, -259, -242,
	-241, -175, 80, 73, -140, -203, -244, -97, -97, -97,
	-97, -97, -124, 87, -97, -97, -142, -260, -142, -142,
	-182, -174, -203, -127, -132, -161, -70, -106, 29, -109,
	53, -3, -174, -107, -174, -124, -142, -124, -234, 82,
	81, -210, 161, 29, 160, -100, -204, -204, 82, 82,
	23, -142, -238, -239, 184, 81, 111, -142, -86, -260,
	-260, -260, -260, -55, 121, 316, -260, -260, -260, -260,
	-260, -260, -90, -130, 401, -133, 42, -134, 43, 10,
	-107, 143, 82, 173, -174, -200, 94, 29, 29, -3,
	82, -260, 81, -174, -241, -226, 82, -260, 314, 69,
	317, -127, 47, 239, -135, 51, -136, -131, 52, 17,
	-147, -174, -86, 87, -47, 316, -239, 53, -246, 58,
	315, 318, -128, 49, -126, 48, -126, -134, 17, -137,
	44, 45, 87, 80, -48, 198, 405, 186, -243, 58,
	-129, 50, 72, 99, 87, 17, 17, -142, 166, 187,
	316, 72, 99, 87, 87, 82, 200, -259, 317, -251,
	-252, 72, -97, 183, 318, -252, 72, 11, 10, -260,
	-260, -250, 174, 169, 172, 31, -250, 168, 30, 96,
}

var yyDef = [...]int{
	32, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 673, 0, 412, 412, 412, 412, 412, 412, 412,
	0, 0, -2, -2, 0, 36, 0, 0, 0, 0,
	-2, 370, 371, 0, 373, -2, 0, 0, 382, 1157,
	1157, 1157, 0, 0, 0, 0, 1155, 53, 54, 388,
	389, 390, 1, 3, 0, 416, 681, 0, 0, -2,
	414, 0, 0, 788, 788, 788, 0, 84, 85, 0,
	0, 0, 697, 786, 0, 786, 0, 806, 807, 808,
	103, 104, 88, -2, 108, 109, 0, 113, 102, 0,
	0, 0, 112, 37, 33, 34, 35, 0, 784, 0,
	784, 784, 0, 315, 496, 815, 816, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 0, 0,
	0, 361, 0, 364, 364, 364, 364, 330, 0, 332,
	1158, 0, 0, 0, 339, 0, 0, 345, 361, 1158,
	353, 367, 368, 355, 350, 351, 369, 372, 0, 377,
	380, 811, 812, 0, 395, 0, 997, 387, 400, 401,
	411, 38, 547, 506, 0, 512, 514, 0, 549, 550,
	551, 552, 553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 580, 581, 582, 658, 659, 660,
	661, 662, 663, 664, 665, 516, 517, 655, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 646,
	0, 616, 616, 616, 616, 616, 616, 616, 616, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 1157, 0,
	410, 673, 49, 0, 412, 417, 418, 716, 0, 0,
	673, 1156, 0, 0, -2, -2, 428, 434, 435, 436,
	437, 413, 0, 440, 444, 0, 0, 0, 789, 0,
	0, 70, 0, 1128, 769, -2, -2, 0, 0, 813,
	814, -2, 960, -2, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 0,
	0, 120, 121, 0, 0, 242, 962, 118, 0, 236,
	177, 710, 0, 0, 0, 0, 0, 90, 110, 111,
	0, 219, 0, 1158, 0, 0, 0, 0, -2, 0,
	307, 0, 0, 0, 0, 0, 0, 314, 0, 316,
	1158, 361, 319, 0, 0, 1158, 1158, 1158, 0, 1158,
	1158, 326, 0, 327, 328, 329, 0, 227, 228, 229,
	333, 1159, 1160, 1158, 1158, 358, 0, 358, 356, 357,
	348, 349, 0, 364, 342, 343, 346, 347, 378, 381,
	398, 396, 397, 399, 391, 392, 393, 394, 0, 0,
	0, 0, 0, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 534, 535, 536, 537, 538, 539,
	540, 513, 0, 527, 0, 0, 0, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 0, 425, 0, 0,
	0, 673, 0, 0, 0, 0, 0, 0, 0, 422,
	0, 647, 0, 600, 608, 0, 601, 609, 602, 610,
	603, 0, 604, 611, 605, 612, 606, 607, 613, 0,
	0, 0, 425, 425, 0, 0, 39, 402, 403, 0,
	479, 681, 0, 427, 719, 0, 0, 682, 674, 675,
	678, 681, 0, 449, 438, 429, 432, 433, 415, 0,
	441, 445, 0, 447, 448, 0, 0, 68, 0, 495,
	0, 451, 453, 454, 455, 477, 0, 0, 0, 0,
	64, 66, 496, 0, 1128, 775, 0, 72, 73, 0,
	0, 0, 200, 779, 780, 781, 777, 262, 0, 0,
	188, 184, 128, 129, 130, 177, 132, 177, 177, 177,
	177, 197, 197, 197, 197, 160, 161, 162, 163, 164,
	0, 0, 147, 177, 177, 177, 177, 167, 168, 169,
	170, 171, 172, 173, 174, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 179, 179, 179, 181, 181, 0,
	0, 211, 0, 678, 0, 701, 0, 0, 99, 0,
	809, 101, 219, 0, 220, 1157, 0, 0, 800, 277,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 785, 0, 256, 62, 313, 497, 817, 818,
	317, 318, 362, 363, 320, 321, 322, 323, 324, 325,
	365, 0, 230, 231, 334, 338, 361, 0, 0, 0,
	361, 340, 341, 0, 0, 379, 383, 384, 385, 386,
	548, 507, 508, 509, 511, 528, 0, 530, 532, 518,
	519, 543, 544, 545, 0, 0, 0, 0, 541, 523,
	0, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 568, 631, 632, 0, 566, 567, 578,
	0, 0, 0, 426, 656, 0, -2, 0, 546, 764,
	681, 0, 0, 0, 0, 551, 658, 0, 551, 658,
	0, 0, 0, 423, 424, 653, 650, 0, 0, 655,
	0, 617, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 405, 406, 408, 0, 499, 1066, 480, 0, 482,
	483, 716, 50, 40, 0, 717, 0, 0, 0, 0,
	677, 679, 680, 716, 0, 666, 0, 0, 504, 0,
	0, 430, 46, 446, 442, 0, 504, 0, 0, 494,
	0, 0, 0, 0, 0, 0, 484, 0, 0, 487,
	0, 0, 0, 0, 478, 0, 0, 0, -2, 0,
	0, 0, 60, 61, 0, 0, 0, 770, 71, 0,
	0, 76, 77, 771, 772, 773, 774, 0, 105, 263,
	265, 268, 269, 270, 122, 124, 125, 0, 0, 240,
	1076, 1110, 998, 234, 234, 996, 247, 232, 233, 119,
	191, 189, 0, 186, 185, 131, 197, 197, 154, 155,
	200, 0, 200, 200, 200, 0, 0, 148, 149, 150,
	151, 142, 0, 143, 144, 145, 0, 146, 241, 0,
	0, 685, 212, 213, 0, 219, 0, 0, 237, 238,
	0, 0, 0, 0, 698, 699, 700, 787, 0, 0,
	0, 116, 117, 271, 1157, 288, 289, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 301, 1157,
	0, 1157, 801, 802, 803, 804, 0, 91, 281, 283,
	282, 286, 0, 0, 0, 0, 308, 1158, 0, 312,
	257, 258, 358, 335, 359, 360, 358, 337, 344, 375,
	529, 531, 533, 520, 541, 524, 0, 521, 0, 0,
	515, 583, 0, 0, 425, 0, 673, 716, 587, 588,
	0, 0, 0, 0, 0, 624, 0, 0, 625, 0,
	673, 0, 651, 0, 0, 599, 0, 618, 0, 0,
	619, 620, 621, 622, 623, 404, 407, 409, 459, 0,
	0, 0, 0, 481, 42, 0, 0, 0, 683, 684,
	676, 41, 0, 782, 783, 667, 668, 669, 0, 439,
	450, 431, 0, 681, 758, 0, 0, 750, 0, 0,
	504, 766, 0, 452, 473, 475, 0, 470, 485, 486,
	488, 0, 490, 0, 492, 493, 456, 457, 458, 0,
	504, 0, 504, 65, 504, 67, 0, 498, 74, 75,
	0, 0, 81, 201, 202, 0, 266, 0, 123, 0,
	0, 221, 234, 234, 234, 225, 235, 226, 0, 193,
	0, 190, 127, 187, 200, 200, 156, 0, 157, 158,
	159, 0, 175, 0, 0, 0, 259, 86, 689, 688,
	219, 219, 214, 215, 0, 217, 0, 178, 0, 0,
	711, 712, 0, 715, 0, 810, 114, 115, 272, 273,
	274, 275, 0, 94, 0, 0, 0, 0, 279, 0,
	311, 63, 361, 361, 522, 0, 542, 525, 584, 585,
	0, 657, 681, 44, 0, 177, 177, 636, 177, 181,
	639, 177, 641, 177, 644, 0, 0, 0, 0, 0,
	0, 0, 648, 598, 654, 0, 656, 0, 0, 0,
	0, 0, 0, 465, 0, 197, 721, 718, 43, 671,
	0, 505, 443, 47, 51, 0, 758, 749, 760, 762,
	0, 0, 0, 754, 0, 673, 0, 0, 467, 474,
	0, 0, 468, 0, 469, 489, 491, -2, 673, 504,
	58, 59, 0, 78, 79, 80, 264, 267, 0, 239,
	0, 222, 223, 224, 0, 195, 0, 192, 152, 153,
	198, 199, 197, 0, 197, 0, 182, 0, 248, 260,
	0, 686, 687, 0, 0, 216, 218, 461, 702, 703,
	704, 0, 714, 100, 0, 280, 0, 92, 93, 0,
	0, 285, 309, 331, 336, 526, 586, 716, 589, 633,
	197, 637, 638, 640, 642, 643, 645, 591, 590, 0,
	0, 0, 0, 0, 681, 0, 652, 0, 0, 0,
	0, 0, 479, 0, 197, 741, 48, 0, 0, 0,
	52, 0, 763, 0, 0, 0, 0, 69, 681, 767,
	768, 471, 0, 476, 681, 57, 211, 0, 463, 203,
	196, 0, 200, 176, 200, 0, 0, 261, 690, 691,
	692, 693, 694, 695, 696, 0, 0, 713, 0, 95,
	96, 0, 0, 0, 45, 634, 635, 0, 0, 0,
	0, 626, 0, 649, 0, 0, 0, 501, 0, 0,
	499, 466, 723, 722, 735, 739, 672, 670, 0, 761,
	0, 753, 756, 752, 755, 55, 0, 56, 210, 0,
	0, 208, 0, 205, 207, 194, 165, 166, 180, 183,
	0, 0, 0, 303, 0, 0, 0, 0, 287, 592,
	594, 593, 595, 0, 0, 0, 597, 614, 615, 500,
	502, 503, 460, 741, 0, 734, 737, -2, 0, 0,
	751, 0, 472, 0, 464, 126, 0, 204, 206, 705,
	462, 302, 0, 0, 97, 98, 91, 596, 0, 0,
	0, 728, 726, 726, 739, 0, 743, 0, 748, 0,
	759, 757, 0, 209, 87, 707, 304, 0, 94, 627,
	0, 630, 731, 0, 724, 727, 725, 736, 0, 742,
	0, 0, 740, 0, 0, 708, 709, 0, 284, 628,
	720, 0, 729, 730, 738, 0, 0, 0, 0, 0,
	0, 732, 733, 744, 746, 243, 706, 0, 0, 244,
	245, 0, 0, 0, 629, 246, 0, 0, 0, 305,
	306, 249, 251, 252, 0, 0, 250, 253, 254, 255,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 104, 3, 3, 3, 131, 123, 3,
	80, 82, 128, 126, 81, 127, 143, 129, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 407,
	112, 111, 113, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 133, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 122, 3, 134,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 114, 115, 116, 117, 118,
	119, 120, 121, 124, 125, 130, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:388
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:393
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:429
		{
			setParseTree(yylex, nil)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:435
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:439
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:443
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:448
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Load{}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:470
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:479
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:483
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:487
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:510
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:518
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:538
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:555
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:567
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.insertAction = InsertAct
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:621
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:637
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:646
		{
			yyVAL.partitions = nil
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:662
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:666
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:672
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:686
		{
			yyVAL.characteristic = ReadWrite
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:690
		{
			yyVAL.characteristic = ReadOnly
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:696
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:704
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.isolationLevel = Serializable
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.scope = SessionScope
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.scope = GlobalScope
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:724
		{
			yyDollar[1].createTable.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:730
		{
			// Create table [name] like [name]
			yyDollar[1].createTable.OptLike = yyDollar[2].optLike
			yyDollar[1].createTable.FullyParsed = true
			yyVAL.statement = yyDollar[1].createTable
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:737
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:744
		{
			yyVAL.statement = &CreateView{ViewName: yyDollar[7].tableName.ToViewName(), IsReplace: yyDollar[2].boolean, Algorithm: yyDollar[3].str, Definer: yyDollar[4].str, Security: yyDollar[5].str, Columns: yyDollar[8].columns, Select: yyDollar[10].selStmt, CheckOption: yyDollar[11].str}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:748
		{
			yyDollar[1].createDatabase.FullyParsed = true
			yyDollar[1].createDatabase.CreateOptions = yyDollar[2].collateAndCharsets
			yyVAL.statement = yyDollar[1].createDatabase
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:755
		{
			yyVAL.boolean = false
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.boolean = true
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:764
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:779
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			yyVAL.createTable = &CreateTable{Table: yyDollar[4].tableName, IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createTable)
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:814
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[2].str, Name: yyDollar[4].colIdent, IndexType: yyDollar[5].str, Table: yyDollar[7].tableName}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:821
		{
			yyVAL.createDatabase = &CreateDatabase{DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
			setDDL(yylex, yyVAL.createDatabase)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			yyVAL.alterDatabase = &AlterDatabase{}
			setDDL(yylex, yyVAL.alterDatabase)
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:839
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:845
		{
			yyVAL.collateAndCharsets = nil
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.collateAndCharsets = yyDollar[1].collateAndCharsets
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.collateAndCharsets = []CollateAndCharset{yyDollar[1].collateAndCharset}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:863
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:867
		{
			yyVAL.collateAndCharsets = append(yyDollar[1].collateAndCharsets, yyDollar[2].collateAndCharset)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:872
		{
			yyVAL.boolean = false
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.boolean = true
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:882
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: (yyDollar[5].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:886
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CharacterSetType, Value: ("'" + string(yyDollar[5].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:892
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: (yyDollar[4].colIdent.String()), IsDefault: yyDollar[1].boolean}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:896
		{
			yyVAL.collateAndCharset = CollateAndCharset{Type: CollateType, Value: ("'" + string(yyDollar[4].bytes) + "'"), IsDefault: yyDollar[1].boolean}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:907
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:927
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:932
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 126:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:942
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1174
		{
			yyVAL.literal = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1178
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1183
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1187
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1195
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1205
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1213
		{
			yyVAL.boolean = false
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.boolean = true
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1222
		{
			yyVAL.boolean = false
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.boolean = true
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1232
		{
			yyVAL.boolean = false
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.boolean = false
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			yyVAL.boolean = true
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1245
		{
			yyVAL.optVal = nil
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1249
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1254
		{
			yyVAL.optVal = nil
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1258
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1263
		{
			yyVAL.boolean = false
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.boolean = true
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1272
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1298
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1302
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.colKeyOpt = colKey
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1319
		{
			yyVAL.literal = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexOptions = nil
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1348
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1363
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1367
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1373
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1383
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1403
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1443
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1457
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1463
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1469
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1473
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1479
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1483
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 243:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1489
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 244:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1493
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 245:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1497
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 246:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1501
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1511
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1537
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1541
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1554
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1563
		{
			yyVAL.boolean = true
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.boolean = true
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.boolean = false
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1576
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = yyDollar[1].str
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1632
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[3].tableName}, ToTables: TableNames{yyDollar[6].tableName}}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1637
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName, PartitionSpec: yyDollar[4].partSpec}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1650
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.AlterOptions = yyDollar[3].collateAndCharsets
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1657
		{
			yyDollar[1].alterDatabase.FullyParsed = true
			yyDollar[1].alterDatabase.DBName = yyDollar[2].colIdent.String()
			yyDollar[1].alterDatabase.UpdateDataDirectory = true
			yyVAL.statement = yyDollar[1].alterDatabase
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1750
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1756
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1760
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1766
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1770
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1786
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1798
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1803
		{
			yyVAL.statement = &DropView{FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &DropDatabase{DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &OtherRead{}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1833
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1848
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1852
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1856
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1860
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1868
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1892
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1905
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1917
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1939
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1956
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = "extended "
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = "full "
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2045
		{
			yyVAL.showFilter = nil
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2049
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2053
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2059
		{
			yyVAL.showFilter = nil
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2063
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2069
		{
			yyVAL.scope = ImplicitScope
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.scope = SessionScope
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.scope = GlobalScope
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2083
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Begin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.statement = &Begin{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &Commit{}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.statement = &Rollback{}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2113
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2118
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2123
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2141
		{
			yyVAL.explainType = EmptyType
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.explainType = JSONType
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.explainType = TreeType
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.explainType = VitessType
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.explainType = TraditionalType
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2161
		{
			yyVAL.explainType = AnalyzeType
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2171
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2193
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.statement = &OtherRead{}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2248
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: yyDollar[1].aliasedTableName, Lock: yyDollar[2].lockType}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.lockType = Read
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			yyVAL.lockType = ReadLocal
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.lockType = Write
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.lockType = LowPriorityWrite
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2282
		{
			setAllowComments(yylex, true)
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2292
		{
			yyVAL.bytes2 = nil
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
			yyVAL.boolean = true
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.boolean = false
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			yyVAL.boolean = true
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2315
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = SQLCacheStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2328
		{
			yyVAL.boolean = false
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2332
		{
			yyVAL.boolean = true
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.boolean = true
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2341
		{
			yyVAL.selectExprs = nil
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2350
		{
			yyVAL.strs = nil
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2366
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = SQLCacheStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = DistinctStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = DistinctStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = StraightJoinHint
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2398
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2416
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2420
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2425
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2445
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2469
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].derivedTable, As: yyDollar[3].tableIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.derivedTable = &DerivedTable{yyDollar[2].selStmt}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2493
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2498
		{
			yyVAL.columns = nil
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2512
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2522
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2535
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2543
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2547
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2555
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2565
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2570
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2572
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2575
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.joinType = NormalJoinType
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.joinType = NormalJoinType
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.joinType = NormalJoinType
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.joinType = StraightJoinType
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.joinType = LeftJoinType
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.joinType = LeftJoinType
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.joinType = RightJoinType
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.joinType = RightJoinType
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2652
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
			yyVAL.indexHints = nil
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2677
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2681
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2685
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2689
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = nil
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 526:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2879
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3025
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 594:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3243
		{
			yyVAL.matchExprOption = NoOption
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3247
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3251
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 629:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3255
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3283
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3317
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3325
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = nil
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3339
		{
			yyVAL.str = string("")
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3359
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3364
		{
			yyVAL.expr = nil
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3378
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3382
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = &NullVal{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3440
		{
			yyVAL.exprs = nil
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3444
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3449
		{
			yyVAL.expr = nil
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3453
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3458
		{
			yyVAL.orderBy = nil
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3462
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3472
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3478
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			yyVAL.orderDirection = AscOrder
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.orderDirection = AscOrder
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.orderDirection = DescOrder
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3496
		{
			yyVAL.limit = nil
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3500
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3504
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3508
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3513
		{
			yyVAL.indexOptions = nil
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3517
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3529
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3536
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3540
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3544
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3548
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3558
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3562
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3567
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3571
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3575
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3579
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3584
		{
			yyVAL.str = ""
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3588
		{
			yyVAL.str = yyDollar[3].str
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3603
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3607
		{
			yyVAL.str = yyDollar[2].str
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3612
		{
			yyVAL.str = "cascaded"
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3625
		{
			yyVAL.str = ""
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3629
		{
			yyVAL.str = yyDollar[3].str
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3643
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'@" + string(yyDollar[2].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3652
		{
			yyVAL.lock = NoLock
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3656
		{
			yyVAL.lock = ForUpdateLock
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3660
		{
			yyVAL.lock = ShareModeLock
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3665
		{
			yyVAL.selectInto = nil
		}
	case 720:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3669
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3673
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3677
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = ""
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = ""
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3699
		{
			yyVAL.str = " header"
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = ""
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = " manifest on"
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3712
		{
			yyVAL.str = " manifest off"
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3717
		{
			yyVAL.str = ""
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3721
		{
			yyVAL.str = " overwrite on"
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3725
		{
			yyVAL.str = " overwrite off"
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3731
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3736
		{
			yyVAL.str = ""
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3740
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3745
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3749
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3754
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3758
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3763
		{
			yyVAL.str = ""
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3767
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3772
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3776
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3781
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3785
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3790
		{
			yyVAL.str = ""
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3794
		{
			yyVAL.str = " optionally"
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3807
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3811
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3815
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3819
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3823
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3829
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3833
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3837
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3841
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3846
		{
			yyVAL.updateExprs = nil
		}
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3850
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3856
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3860
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3866
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3870
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3876
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3882
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3892
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3902
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3908
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3912
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3918
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3922
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3926
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3930
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3934
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.bytes = []byte("charset")
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3949
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3953
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3957
		{
			yyVAL.expr = &Default{}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3966
		{
			yyVAL.boolean = false
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3968
		{
			yyVAL.boolean = true
		}
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3971
		{
			yyVAL.boolean = false
		}
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3973
		{
			yyVAL.boolean = true
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3976
		{
			yyVAL.ignore = false
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			yyVAL.ignore = true
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3986
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3988
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3990
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3994
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3996
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3998
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4000
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4004
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4006
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4008
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4012
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4014
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4017
		{
			yyVAL.str = ""
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4019
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4023
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4026
		{
			yyVAL.str = ""
		}
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4028
		{
			yyVAL.str = yyDollar[2].colIdent.val
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4032
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4036
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4043
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4049
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4053
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4060
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4421
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4430
		{
			decNesting(yylex)
		}
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4435
		{
			skipToEnd(yylex)
		}
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4440
		{
			skipToEnd(yylex)
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4444
		{
			skipToEnd(yylex)
		}
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4448
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

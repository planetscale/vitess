// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const UNDERSCORE_UTF8 = 57442
const UNDERSCORE_LATIN1 = 57443
const INTERVAL = 57444
const JSON_EXTRACT_OP = 57445
const JSON_UNQUOTE_EXTRACT_OP = 57446
const CREATE = 57447
const ALTER = 57448
const DROP = 57449
const RENAME = 57450
const ANALYZE = 57451
const ADD = 57452
const FLUSH = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const INDEXES = 57468
const ACTION = 57469
const CASCADE = 57470
const CONSTRAINT = 57471
const FOREIGN = 57472
const NO = 57473
const REFERENCES = 57474
const RESTRICT = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const EXTENDED = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599
const ARRAY = 57600
const CUME_DIST = 57601
const DESCRIPTION = 57602
const DENSE_RANK = 57603
const EMPTY = 57604
const EXCEPT = 57605
const FIRST_VALUE = 57606
const GROUPING = 57607
const GROUPS = 57608
const JSON_TABLE = 57609
const LAG = 57610
const LAST_VALUE = 57611
const LATERAL = 57612
const LEAD = 57613
const MEMBER = 57614
const NTH_VALUE = 57615
const NTILE = 57616
const OF = 57617
const OVER = 57618
const PERCENT_RANK = 57619
const RANK = 57620
const RECURSIVE = 57621
const ROW_NUMBER = 57622
const SYSTEM = 57623
const WINDOW = 57624
const ACTIVE = 57625
const ADMIN = 57626
const BUCKETS = 57627
const CLONE = 57628
const COMPONENT = 57629
const DEFINITION = 57630
const ENFORCED = 57631
const EXCLUDE = 57632
const FOLLOWING = 57633
const GEOMCOLLECTION = 57634
const GET_MASTER_PUBLIC_KEY = 57635
const HISTOGRAM = 57636
const HISTORY = 57637
const INACTIVE = 57638
const INVISIBLE = 57639
const LOCKED = 57640
const MASTER_COMPRESSION_ALGORITHMS = 57641
const MASTER_PUBLIC_KEY_PATH = 57642
const MASTER_TLS_CIPHERSUITES = 57643
const MASTER_ZSTD_COMPRESSION_LEVEL = 57644
const NESTED = 57645
const NETWORK_NAMESPACE = 57646
const NOWAIT = 57647
const NULLS = 57648
const OJ = 57649
const OLD = 57650
const OPTIONAL = 57651
const ORDINALITY = 57652
const ORGANIZATION = 57653
const OTHERS = 57654
const PATH = 57655
const PERSIST = 57656
const PERSIST_ONLY = 57657
const PRECEDING = 57658
const PRIVILEGE_CHECKS_USER = 57659
const PROCESS = 57660
const RANDOM = 57661
const REFERENCE = 57662
const REQUIRE_ROW_FORMAT = 57663
const RESOURCE = 57664
const RESPECT = 57665
const RESTART = 57666
const RETAIN = 57667
const REUSE = 57668
const ROLE = 57669
const SECONDARY = 57670
const SECONDARY_ENGINE = 57671
const SECONDARY_LOAD = 57672
const SECONDARY_UNLOAD = 57673
const SKIP = 57674
const SRID = 57675
const THREAD_PRIORITY = 57676
const TIES = 57677
const UNBOUNDED = 57678
const VCPU = 57679
const VISIBLE = 57680
const FORMAT = 57681
const TREE = 57682
const VITESS = 57683
const TRADITIONAL = 57684

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 40,
	33, 303,
	131, 303,
	143, 303,
	168, 317,
	169, 317,
	-2, 305,
	-1, 66,
	38, 356,
	-2, 364,
	-1, 377,
	119, 686,
	-2, 682,
	-1, 378,
	119, 687,
	-2, 683,
	-1, 392,
	38, 357,
	-2, 369,
	-1, 393,
	38, 358,
	-2, 370,
	-1, 416,
	87, 938,
	-2, 70,
	-1, 417,
	87, 854,
	-2, 71,
	-1, 422,
	87, 822,
	-2, 648,
	-1, 424,
	87, 885,
	-2, 650,
	-1, 740,
	56, 52,
	58, 52,
	-2, 56,
	-1, 914,
	119, 689,
	-2, 685,
	-1, 1341,
	5, 607,
	17, 607,
	19, 607,
	31, 607,
	59, 607,
	-2, 395,
}

const yyPrivate = 57344

const yyLast = 17461

var yyAct = [...]int{

	377, 1580, 1570, 1380, 1537, 1268, 1019, 321, 1173, 1453,
	1486, 1321, 1193, 992, 1174, 336, 1354, 385, 350, 65,
	3, 1042, 1322, 1318, 707, 1028, 1048, 1062, 576, 668,
	1333, 1327, 1018, 1219, 1287, 85, 1015, 901, 1440, 276,
	839, 296, 276, 421, 1112, 739, 858, 276, 1245, 1032,
	908, 307, 1161, 753, 994, 1236, 989, 978, 734, 714,
	394, 733, 323, 712, 717, 934, 878, 410, 379, 415,
	545, 407, 276, 85, 25, 971, 546, 276, 1058, 276,
	319, 724, 312, 742, 274, 63, 61, 752, 60, 682,
	865, 7, 303, 6, 5, 1573, 66, 1557, 1568, 681,
	308, 1081, 362, 311, 368, 369, 366, 367, 365, 364,
	363, 585, 565, 1545, 1565, 1080, 1381, 409, 370, 371,
	1556, 1544, 547, 1304, 549, 68, 69, 70, 71, 72,
	1410, 550, 1348, 400, 1349, 1350, 380, 272, 268, 269,
	270, 1010, 1011, 754, 310, 755, 87, 88, 89, 87,
	88, 89, 27, 1009, 54, 30, 31, 1079, 264, 1207,
	309, 262, 1206, 266, 587, 1208, 600, 1227, 1041, 1270,
	601, 598, 599, 605, 1443, 87, 88, 89, 1049, 1401,
	911, 1512, 630, 629, 639, 640, 632, 633, 634, 635,
	636, 637, 638, 631, 1399, 302, 641, 828, 593, 594,
	603, 1272, 825, 53, 1567, 1564, 827, 1538, 1267, 1076,
	1073, 1074, 972, 1072, 1584, 1530, 590, 1033, 1588, 582,
	566, 584, 1271, 552, 27, 28, 54, 30, 31, 266,
	1487, 1273, 604, 832, 1035, 816, 1344, 418, 829, 866,
	867, 868, 826, 58, 1495, 1489, 1083, 1086, 32, 49,
	50, 1343, 52, 581, 583, 1264, 1342, 265, 271, 548,
	1035, 1266, 555, 276, 557, 558, 279, 267, 276, 1093,
	567, 41, 1092, 1519, 276, 53, 1423, 1194, 1196, 263,
	276, 574, 1203, 1078, 580, 85, 653, 654, 1166, 85,
	1141, 85, 87, 88, 89, 1120, 748, 85, 728, 666,
	1131, 572, 939, 631, 85, 1077, 641, 1016, 556, 641,
	951, 1005, 1049, 564, 589, 1488, 1035, 619, 75, 571,
	562, 863, 621, 1128, 611, 573, 591, 1528, 1504, 1582,
	859, 1331, 1583, 621, 1581, 853, 1288, 1034, 1543, 579,
	34, 35, 37, 36, 39, 1082, 51, 786, 87, 88,
	89, 756, 1496, 1494, 578, 1513, 76, 1126, 1195, 1125,
	1084, 616, 617, 1034, 1265, 615, 1263, 1306, 388, 40,
	57, 56, 818, 935, 47, 48, 38, 1290, 620, 619,
	935, 651, 1138, 568, 569, 570, 1225, 559, 721, 560,
	42, 43, 561, 44, 45, 621, 614, 1533, 612, 613,
	592, 705, 595, 85, 55, 276, 276, 276, 606, 653,
	654, 1292, 1038, 1296, 85, 1291, 860, 1289, 1039, 1034,
	85, 854, 1294, 1548, 1031, 1029, 669, 1030, 1449, 1448,
	774, 1293, 653, 654, 1027, 1033, 1589, 577, 1550, 704,
	87, 88, 89, 1240, 1295, 1297, 1105, 1106, 1107, 1239,
	731, 1228, 740, 685, 687, 718, 691, 693, 885, 696,
	620, 619, 732, 684, 686, 688, 690, 692, 694, 695,
	1529, 787, 883, 884, 882, 544, 55, 621, 741, 706,
	1590, 1466, 551, 751, 1446, 634, 635, 636, 637, 638,
	631, 1237, 746, 641, 800, 803, 804, 805, 806, 807,
	808, 1103, 809, 810, 811, 812, 813, 788, 789, 790,
	791, 772, 773, 801, 844, 775, 389, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 792, 793, 794,
	795, 796, 797, 798, 799, 639, 640, 632, 633, 634,
	635, 636, 637, 638, 631, 276, 1501, 641, 1500, 814,
	85, 1363, 817, 1036, 819, 276, 276, 85, 85, 85,
	87, 88, 89, 276, 553, 554, 276, 53, 53, 276,
	837, 838, 716, 276, 261, 85, 1127, 1330, 418, 881,
	85, 85, 85, 276, 85, 85, 802, 87, 88, 89,
	764, 903, 620, 619, 85, 85, 956, 957, 1419, 1308,
	820, 821, 1492, 1566, 843, 87, 88, 89, 830, 621,
	618, 409, 1319, 1367, 836, 1330, 841, 629, 639, 640,
	632, 633, 634, 635, 636, 637, 638, 631, 849, 1503,
	641, 620, 619, 873, 875, 876, 999, 833, 743, 874,
	62, 953, 902, 879, 404, 405, 1552, 389, 621, 620,
	619, 904, 632, 633, 634, 635, 636, 637, 638, 631,
	1371, 815, 641, 1492, 1541, 85, 621, 975, 822, 823,
	824, 1492, 389, 1492, 1520, 339, 338, 341, 342, 343,
	344, 952, 923, 926, 340, 345, 842, 880, 936, 1492,
	1491, 846, 847, 848, 389, 850, 851, 1211, 85, 85,
	620, 619, 1438, 1437, 1008, 855, 856, 913, 1425, 389,
	914, 87, 88, 89, 64, 1210, 85, 621, 1422, 389,
	1373, 1372, 948, 276, 1369, 1370, 85, 669, 1162, 918,
	965, 276, 958, 974, 905, 906, 1369, 1368, 1144, 276,
	276, 964, 389, 276, 276, 975, 389, 276, 276, 276,
	85, 944, 945, 744, 915, 618, 389, 964, 990, 763,
	762, 975, 1162, 85, 546, 1143, 964, 743, 967, 970,
	382, 954, 914, 831, 975, 316, 973, 964, 744, 966,
	980, 983, 984, 985, 981, 749, 982, 986, 27, 1001,
	1334, 1335, 841, 1558, 1044, 1045, 1046, 1047, 745, 1000,
	747, 1455, 1043, 1002, 1050, 1051, 1052, 968, 1330, 1430,
	1055, 1056, 1057, 1063, 1255, 1003, 998, 276, 85, 1006,
	85, 53, 1085, 745, 1269, 743, 276, 276, 276, 276,
	276, 912, 276, 276, 1023, 1359, 276, 85, 1007, 53,
	27, 1064, 1334, 1335, 1575, 1214, 1251, 1252, 1253, 27,
	1059, 919, 920, 276, 1054, 925, 928, 929, 276, 1053,
	276, 276, 1067, 1456, 1168, 276, 1066, 1571, 1361, 1337,
	1169, 1087, 1088, 1089, 1090, 1091, 1319, 1094, 1095, 1473,
	943, 1096, 1241, 946, 947, 864, 835, 1100, 1151, 1060,
	1061, 53, 1185, 912, 1183, 378, 1340, 1186, 1098, 1184,
	53, 879, 1339, 1099, 1182, 980, 983, 984, 985, 981,
	1104, 982, 986, 1187, 418, 984, 985, 1254, 1181, 1562,
	1555, 1312, 1259, 1256, 1247, 1257, 1250, 1020, 1246, 1068,
	86, 1070, 1248, 1249, 277, 715, 1122, 277, 1560, 1160,
	1159, 1232, 277, 761, 575, 880, 1258, 1224, 1097, 1108,
	630, 629, 639, 640, 632, 633, 634, 635, 636, 637,
	638, 631, 1535, 1534, 641, 1471, 276, 277, 86, 1222,
	916, 917, 277, 1150, 277, 931, 276, 276, 276, 276,
	276, 395, 1175, 1155, 1121, 708, 1216, 1451, 276, 932,
	380, 1170, 276, 1069, 1417, 396, 276, 709, 834, 1137,
	276, 988, 719, 720, 398, 1158, 397, 1113, 949, 383,
	384, 1192, 386, 1157, 1416, 1415, 387, 1209, 1154, 85,
	395, 64, 1164, 1315, 1162, 1212, 602, 1165, 1215, 1163,
	1577, 1576, 1220, 1220, 396, 1177, 1178, 1176, 1180, 1132,
	1179, 392, 393, 398, 1188, 397, 1129, 857, 722, 1407,
	1198, 1199, 1577, 1201, 1517, 1202, 1200, 1444, 950, 382,
	62, 67, 1204, 59, 1, 1569, 1221, 85, 85, 1382,
	1452, 1229, 1230, 1075, 1536, 1485, 1353, 1026, 1017, 74,
	1217, 1218, 543, 73, 1527, 1231, 852, 1233, 1234, 1235,
	1117, 1118, 588, 1025, 1024, 1493, 1442, 85, 1037, 1226,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	1238, 1135, 1040, 1360, 1223, 1532, 769, 767, 768, 766,
	771, 85, 1260, 1244, 770, 765, 289, 902, 630, 629,
	639, 640, 632, 633, 634, 635, 636, 637, 638, 631,
	413, 987, 641, 757, 1065, 1275, 1276, 1286, 723, 77,
	1262, 1261, 1071, 862, 1277, 286, 596, 276, 277, 597,
	291, 649, 1299, 277, 1298, 1156, 1205, 85, 419, 277,
	1283, 412, 85, 85, 1325, 277, 1175, 1320, 955, 1243,
	86, 1285, 913, 1020, 86, 914, 86, 711, 1323, 1414,
	1314, 1136, 86, 678, 933, 1305, 737, 322, 85, 86,
	872, 337, 1313, 334, 335, 959, 1167, 1115, 1274, 623,
	1338, 1116, 85, 320, 85, 85, 314, 736, 1220, 1220,
	1352, 729, 1123, 1124, 979, 977, 1329, 976, 1130, 1345,
	408, 1133, 1134, 1366, 1336, 1332, 735, 963, 391, 1140,
	1409, 1356, 276, 1142, 1351, 1511, 1145, 1146, 1147, 1148,
	1149, 1357, 1358, 1347, 390, 930, 46, 607, 304, 1346,
	29, 399, 276, 20, 19, 18, 1364, 1365, 85, 22,
	1383, 85, 85, 85, 276, 17, 16, 15, 563, 33,
	24, 23, 14, 13, 12, 1284, 11, 1374, 10, 9,
	8, 4, 1190, 1191, 610, 21, 667, 1375, 86, 2,
	277, 277, 277, 1392, 1388, 1389, 1309, 1377, 0, 86,
	1394, 1395, 1376, 1396, 1378, 86, 1398, 0, 1400, 1387,
	1397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1284, 0, 0, 0, 0, 0, 0, 1175, 0,
	0, 0, 0, 0, 1418, 1427, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 1212, 0,
	85, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 1020, 1439, 1020, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 1445, 1459, 1447, 0, 877,
	0, 0, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 1457, 0, 0,
	1281, 1282, 1458, 85, 85, 0, 85, 1465, 0, 0,
	0, 85, 0, 85, 85, 85, 276, 0, 1323, 85,
	277, 1474, 1472, 0, 1478, 86, 1470, 0, 0, 1484,
	277, 277, 86, 86, 86, 1490, 85, 276, 277, 940,
	1497, 277, 0, 0, 277, 0, 0, 0, 277, 1479,
	86, 1480, 1482, 1483, 0, 86, 86, 86, 277, 86,
	86, 0, 1498, 0, 1499, 1518, 1450, 0, 1526, 86,
	86, 0, 1323, 85, 1505, 1341, 1525, 1524, 0, 0,
	0, 0, 1506, 0, 85, 85, 0, 0, 0, 0,
	0, 1540, 0, 1539, 0, 0, 1020, 0, 0, 0,
	85, 0, 0, 0, 0, 1175, 1546, 0, 0, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 1454, 1554, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 1559, 1561, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1574, 0, 0, 0, 1549, 0, 0, 1585,
	0, 0, 0, 0, 0, 0, 1391, 0, 0, 0,
	1393, 0, 0, 86, 86, 0, 0, 1563, 0, 0,
	0, 1402, 1403, 0, 313, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 86, 0, 0, 0, 0, 277, 1420, 1421, 0,
	1424, 0, 0, 0, 277, 277, 0, 0, 277, 277,
	0, 0, 277, 277, 277, 86, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 351, 26, 1406, 86, 1109,
	1110, 1111, 0, 0, 0, 0, 0, 0, 1454, 1020,
	0, 0, 0, 0, 0, 625, 0, 628, 0, 0,
	0, 0, 26, 642, 643, 644, 645, 646, 647, 648,
	0, 626, 627, 624, 630, 629, 639, 640, 632, 633,
	634, 635, 636, 637, 638, 631, 0, 0, 641, 0,
	0, 0, 277, 86, 0, 86, 0, 381, 0, 0,
	0, 277, 277, 277, 277, 277, 0, 277, 277, 0,
	0, 277, 86, 0, 0, 1481, 630, 629, 639, 640,
	632, 633, 634, 635, 636, 637, 638, 631, 277, 389,
	641, 0, 0, 277, 0, 277, 277, 0, 0, 0,
	277, 0, 0, 1507, 1508, 1509, 1510, 0, 1514, 0,
	1515, 1516, 0, 0, 0, 1413, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 1522, 1523, 0, 630, 629,
	639, 640, 632, 633, 634, 635, 636, 637, 638, 631,
	1412, 0, 641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1542, 630, 629, 639, 640, 632,
	633, 634, 635, 636, 637, 638, 631, 0, 0, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	630, 629, 639, 640, 632, 633, 634, 635, 636, 637,
	638, 631, 0, 0, 641, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 622, 0, 0,
	0, 277, 277, 277, 277, 277, 0, 0, 0, 0,
	0, 1586, 1587, 277, 0, 0, 0, 277, 0, 1279,
	1280, 277, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 1278, 0, 313, 1300, 1301, 0, 1302, 1303, 0,
	0, 0, 679, 348, 86, 0, 0, 0, 0, 1310,
	1311, 630, 629, 639, 640, 632, 633, 634, 635, 636,
	637, 638, 631, 0, 0, 641, 0, 0, 710, 713,
	586, 0, 0, 0, 586, 0, 586, 0, 84, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	26, 0, 86, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 0,
	1405, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	1362, 0, 0, 0, 665, 0, 0, 0, 670, 671,
	672, 673, 674, 675, 676, 677, 86, 680, 683, 683,
	683, 689, 683, 683, 689, 683, 697, 698, 699, 700,
	701, 702, 703, 1404, 0, 0, 0, 26, 0, 630,
	629, 639, 640, 632, 633, 634, 635, 636, 637, 638,
	631, 0, 277, 641, 1390, 0, 0, 0, 0, 0,
	0, 738, 86, 0, 0, 0, 0, 86, 86, 630,
	629, 639, 640, 632, 633, 634, 635, 636, 637, 638,
	631, 0, 0, 641, 0, 0, 0, 0, 0, 87,
	88, 89, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 86,
	86, 0, 630, 629, 639, 640, 632, 633, 634, 635,
	636, 637, 638, 631, 0, 0, 641, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 861, 0, 0, 277, 0, 290,
	0, 0, 0, 86, 0, 0, 86, 86, 86, 277,
	869, 870, 871, 0, 0, 0, 0, 0, 0, 0,
	1460, 1461, 1462, 1463, 1464, 0, 0, 0, 1467, 1468,
	0, 0, 0, 288, 0, 0, 0, 0, 420, 295,
	0, 0, 420, 0, 420, 586, 0, 0, 0, 0,
	420, 0, 586, 586, 586, 0, 0, 608, 0, 0,
	0, 0, 0, 0, 921, 922, 281, 0, 0, 0,
	586, 0, 0, 0, 0, 586, 586, 586, 0, 586,
	586, 0, 0, 0, 0, 0, 0, 86, 0, 586,
	586, 0, 0, 292, 284, 86, 293, 294, 300, 1114,
	0, 0, 285, 287, 297, 0, 282, 299, 298, 0,
	86, 0, 0, 0, 0, 0, 0, 86, 0, 630,
	629, 639, 640, 632, 633, 634, 635, 636, 637, 638,
	631, 0, 0, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 726, 0, 86, 86,
	0, 86, 0, 0, 0, 0, 86, 420, 86, 86,
	86, 277, 0, 758, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1578, 0,
	0, 86, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 738, 86,
	86, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	420, 420, 420, 586, 0, 586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 420, 0,
	0, 0, 586, 420, 420, 420, 0, 420, 420, 0,
	0, 0, 0, 0, 1152, 1153, 713, 420, 420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 381, 0, 0, 0, 0, 0, 0, 907, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 1171, 1172, 960,
	0, 738, 738, 738, 738, 738, 0, 0, 0, 726,
	0, 0, 420, 0, 0, 0, 0, 991, 0, 1197,
	0, 0, 0, 349, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 275, 0, 0, 301, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 403, 586, 0, 411, 0, 0, 0, 0,
	275, 420, 275, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	420, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 1429, 0, 937, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 275, 0, 0,
	0, 0, 420, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 0, 0, 0, 0, 0, 0, 1469, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1242, 420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 1433,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	586, 0, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 275, 275,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 26, 0, 0,
	420, 0, 937, 0, 0, 1326, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 420, 0, 420, 1355, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1379, 0, 0, 1384, 1385, 1386, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 275, 275,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 275,
	0, 0, 275, 1572, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	840, 0, 0, 0, 403, 403, 0, 0, 403, 403,
	403, 0, 0, 0, 938, 0, 1475, 1476, 0, 1477,
	0, 0, 0, 0, 1441, 0, 1441, 1441, 1441, 0,
	0, 0, 1355, 403, 403, 403, 403, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 840, 0, 275, 0, 0, 0, 0, 0,
	0, 0, 275, 996, 0, 0, 275, 275, 0, 0,
	275, 1004, 840, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 420, 420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 1547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 1441, 0, 0, 0, 0, 0, 0, 275,
	275, 275, 275, 275, 0, 275, 275, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 0, 0,
	0, 275, 0, 1101, 1102, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 275,
	275, 275, 275, 275, 0, 0, 0, 0, 0, 0,
	0, 1189, 0, 0, 0, 275, 0, 0, 0, 996,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 530, 518, 0,
	475, 533, 448, 465, 541, 466, 469, 506, 433, 488,
	175, 463, 0, 452, 428, 459, 429, 450, 477, 119,
	481, 447, 520, 491, 532, 147, 0, 453, 539, 149,
	497, 0, 222, 163, 0, 0, 0, 479, 522, 486,
	515, 474, 507, 438, 496, 534, 464, 504, 535, 0,
	0, 938, 87, 88, 89, 0, 1021, 1022, 0, 0,
	0, 0, 0, 109, 275, 501, 529, 461, 503, 505,
	427, 498, 0, 431, 434, 540, 525, 456, 457, 1213,
	0, 0, 0, 0, 0, 0, 478, 487, 512, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 0,
	495, 0, 0, 0, 435, 432, 0, 0, 0, 0,
	476, 0, 0, 0, 437, 0, 455, 513, 0, 425,
	128, 517, 524, 473, 278, 528, 471, 470, 531, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 521, 451, 460, 113, 458, 204, 182,
	242, 494, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 430, 0, 223, 245, 260, 107, 446, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 442, 445, 440, 441, 489, 490, 536, 537, 538,
	514, 436, 0, 443, 444, 0, 519, 526, 527, 493,
	90, 99, 148, 257, 197, 124, 246, 426, 439, 117,
	449, 0, 0, 462, 467, 468, 480, 482, 483, 484,
	485, 492, 499, 500, 502, 508, 509, 510, 511, 516,
	523, 542, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 530, 518,
	0, 475, 533, 448, 465, 541, 466, 469, 506, 433,
	488, 175, 463, 0, 452, 428, 459, 429, 450, 477,
	119, 481, 447, 520, 491, 532, 147, 0, 453, 539,
	149, 497, 0, 222, 163, 0, 0, 0, 479, 522,
	486, 515, 474, 507, 438, 496, 534, 464, 504, 535,
	0, 0, 0, 87, 88, 89, 0, 1021, 1022, 0,
	0, 0, 0, 0, 109, 0, 501, 529, 461, 503,
	505, 427, 498, 0, 431, 434, 540, 525, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 478, 487, 512,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	0, 495, 0, 0, 0, 435, 432, 0, 0, 0,
	0, 476, 0, 0, 0, 437, 0, 455, 513, 0,
	425, 128, 517, 524, 473, 278, 528, 471, 470, 531,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 521, 451, 460, 113, 458, 204,
	182, 242, 494, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 430, 0, 223, 245, 260, 107, 446, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 442, 445, 440, 441, 489, 490, 536, 537,
	538, 514, 436, 0, 443, 444, 0, 519, 526, 527,
	493, 90, 99, 148, 257, 197, 124, 246, 426, 439,
	117, 449, 0, 0, 462, 467, 468, 480, 482, 483,
	484, 485, 492, 499, 500, 502, 508, 509, 510, 511,
	516, 523, 542, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 530,
	518, 0, 475, 533, 448, 465, 541, 466, 469, 506,
	433, 488, 175, 463, 0, 452, 428, 459, 429, 450,
	477, 119, 481, 447, 520, 491, 532, 147, 0, 453,
	539, 149, 497, 0, 222, 163, 0, 0, 0, 479,
	522, 486, 515, 474, 507, 438, 496, 534, 464, 504,
	535, 53, 0, 0, 87, 88, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 501, 529, 461,
	503, 505, 427, 498, 0, 431, 434, 540, 525, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 478, 487,
	512, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 0, 495, 0, 0, 0, 435, 432, 0, 0,
	0, 0, 476, 0, 0, 0, 437, 0, 455, 513,
	0, 425, 128, 517, 524, 473, 278, 528, 471, 470,
	531, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 521, 451, 460, 113, 458,
	204, 182, 242, 494, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 430, 0, 223, 245, 260, 107, 446,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 442, 445, 440, 441, 489, 490, 536,
	537, 538, 514, 436, 0, 443, 444, 0, 519, 526,
	527, 493, 90, 99, 148, 257, 197, 124, 246, 426,
	439, 117, 449, 0, 0, 462, 467, 468, 480, 482,
	483, 484, 485, 492, 499, 500, 502, 508, 509, 510,
	511, 516, 523, 542, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	530, 518, 0, 475, 533, 448, 465, 541, 466, 469,
	506, 433, 488, 175, 463, 0, 452, 428, 459, 429,
	450, 477, 119, 481, 447, 520, 491, 532, 147, 0,
	453, 539, 149, 497, 0, 222, 163, 0, 0, 0,
	479, 522, 486, 515, 474, 507, 438, 496, 534, 464,
	504, 535, 0, 0, 0, 87, 88, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 501, 529,
	461, 503, 505, 427, 498, 0, 431, 434, 540, 525,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 478,
	487, 512, 472, 0, 0, 0, 0, 0, 0, 1317,
	0, 454, 0, 495, 0, 0, 0, 435, 432, 0,
	0, 0, 0, 476, 0, 0, 0, 437, 0, 455,
	513, 0, 425, 128, 517, 524, 473, 278, 528, 471,
	470, 531, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 521, 451, 460, 113,
	458, 204, 182, 242, 494, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 430, 0, 223, 245, 260, 107,
	446, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 442, 445, 440, 441, 489, 490,
	536, 537, 538, 514, 436, 0, 443, 444, 0, 519,
	526, 527, 493, 90, 99, 148, 257, 197, 124, 246,
	426, 439, 117, 449, 0, 0, 462, 467, 468, 480,
	482, 483, 484, 485, 492, 499, 500, 502, 508, 509,
	510, 511, 516, 523, 542, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 530, 518, 0, 475, 533, 448, 465, 541, 466,
	469, 506, 433, 488, 175, 463, 0, 452, 428, 459,
	429, 450, 477, 119, 481, 447, 520, 491, 532, 147,
	0, 453, 539, 149, 497, 0, 222, 163, 0, 0,
	0, 479, 522, 486, 515, 474, 507, 438, 496, 534,
	464, 504, 535, 0, 0, 0, 87, 88, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 501,
	529, 461, 503, 505, 427, 498, 0, 431, 434, 540,
	525, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	478, 487, 512, 472, 0, 0, 0, 0, 0, 0,
	1005, 0, 454, 0, 495, 0, 0, 0, 435, 432,
	0, 0, 0, 0, 476, 0, 0, 0, 437, 0,
	455, 513, 0, 425, 128, 517, 524, 473, 278, 528,
	471, 470, 531, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 521, 451, 460,
	113, 458, 204, 182, 242, 494, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 430, 0, 223, 245, 260,
	107, 446, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 442, 445, 440, 441, 489,
	490, 536, 537, 538, 514, 436, 0, 443, 444, 0,
	519, 526, 527, 493, 90, 99, 148, 257, 197, 124,
	246, 426, 439, 117, 449, 0, 0, 462, 467, 468,
	480, 482, 483, 484, 485, 492, 499, 500, 502, 508,
	509, 510, 511, 516, 523, 542, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 530, 518, 0, 475, 533, 448, 465, 541,
	466, 469, 506, 433, 488, 175, 463, 0, 452, 428,
	459, 429, 450, 477, 119, 481, 447, 520, 491, 532,
	147, 0, 453, 539, 149, 497, 0, 222, 163, 0,
	0, 0, 479, 522, 486, 515, 474, 507, 438, 496,
	534, 464, 504, 535, 0, 0, 0, 87, 88, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	501, 529, 461, 503, 505, 427, 498, 0, 431, 434,
	540, 525, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 478, 487, 512, 472, 0, 0, 0, 0, 0,
	0, 969, 0, 454, 0, 495, 0, 0, 0, 435,
	432, 0, 0, 0, 0, 476, 0, 0, 0, 437,
	0, 455, 513, 0, 425, 128, 517, 524, 473, 278,
	528, 471, 470, 531, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 521, 451,
	460, 113, 458, 204, 182, 242, 494, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 430, 0, 223, 245,
	260, 107, 446, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 442, 445, 440, 441,
	489, 490, 536, 537, 538, 514, 436, 0, 443, 444,
	0, 519, 526, 527, 493, 90, 99, 148, 257, 197,
	124, 246, 426, 439, 117, 449, 0, 0, 462, 467,
	468, 480, 482, 483, 484, 485, 492, 499, 500, 502,
	508, 509, 510, 511, 516, 523, 542, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 530, 518, 0, 475, 533, 448, 465,
	541, 466, 469, 506, 433, 488, 175, 463, 0, 452,
	428, 459, 429, 450, 477, 119, 481, 447, 520, 491,
	532, 147, 0, 453, 539, 149, 497, 0, 222, 163,
	0, 0, 0, 479, 522, 486, 515, 474, 507, 438,
	496, 534, 464, 504, 535, 0, 0, 0, 87, 88,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 501, 529, 461, 503, 505, 427, 498, 0, 431,
	434, 540, 525, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 478, 487, 512, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 454, 0, 495, 0, 0, 0,
	435, 432, 0, 0, 0, 0, 476, 0, 0, 0,
	437, 0, 455, 513, 0, 425, 128, 517, 524, 473,
	278, 528, 471, 470, 531, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 521,
	451, 460, 113, 458, 204, 182, 242, 494, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 240, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 103, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 430, 0, 223,
	245, 260, 107, 446, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 167, 104, 136, 220, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 442, 445, 440,
	441, 489, 490, 536, 537, 538, 514, 436, 0, 443,
	444, 0, 519, 526, 527, 493, 90, 99, 148, 257,
	197, 124, 246, 426, 439, 117, 449, 0, 0, 462,
	467, 468, 480, 482, 483, 484, 485, 492, 499, 500,
	502, 508, 509, 510, 511, 516, 523, 542, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 530, 518, 0, 475, 533, 448,
	465, 541, 466, 469, 506, 433, 488, 175, 463, 0,
	452, 428, 459, 429, 450, 477, 119, 481, 447, 520,
	491, 532, 147, 0, 453, 539, 149, 497, 0, 222,
	163, 0, 0, 0, 479, 522, 486, 515, 474, 507,
	438, 496, 534, 464, 504, 535, 0, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 501, 529, 461, 503, 505, 427, 498, 0,
	431, 434, 540, 525, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 478, 487, 512, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 0, 495, 0, 0,
	0, 435, 432, 0, 0, 0, 0, 476, 0, 0,
	0, 437, 0, 455, 513, 0, 425, 128, 517, 524,
	473, 278, 528, 471, 470, 531, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	521, 451, 460, 113, 458, 204, 182, 242, 494, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 423, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 430, 0,
	223, 245, 260, 107, 446, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 424, 422, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 442, 445,
	440, 441, 489, 490, 536, 537, 538, 514, 436, 0,
	443, 444, 0, 519, 526, 527, 493, 90, 99, 148,
	257, 197, 124, 246, 426, 439, 117, 449, 0, 0,
	462, 467, 468, 480, 482, 483, 484, 485, 492, 499,
	500, 502, 508, 509, 510, 511, 516, 523, 542, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 530, 518, 0, 475, 533,
	448, 465, 541, 466, 469, 506, 433, 488, 175, 463,
	0, 452, 428, 459, 429, 450, 477, 119, 481, 447,
	520, 491, 532, 147, 0, 453, 539, 149, 497, 0,
	222, 163, 0, 0, 0, 479, 522, 486, 515, 474,
	507, 438, 496, 534, 464, 504, 535, 0, 0, 0,
	87, 88, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 501, 529, 461, 503, 505, 427, 498,
	0, 431, 434, 540, 525, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 478, 487, 512, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 0, 495, 0,
	0, 0, 435, 432, 0, 0, 0, 0, 476, 0,
	0, 0, 437, 0, 455, 513, 0, 425, 128, 517,
	524, 473, 278, 528, 471, 470, 531, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 521, 451, 460, 113, 458, 204, 182, 242, 494,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 750, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 423, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 430,
	0, 223, 245, 260, 107, 446, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 424, 422, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 442,
	445, 440, 441, 489, 490, 536, 537, 538, 514, 436,
	0, 443, 444, 0, 519, 526, 527, 493, 90, 99,
	148, 257, 197, 124, 246, 426, 439, 117, 449, 0,
	0, 462, 467, 468, 480, 482, 483, 484, 485, 492,
	499, 500, 502, 508, 509, 510, 511, 516, 523, 542,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 530, 518, 0, 475,
	533, 448, 465, 541, 466, 469, 506, 433, 488, 175,
	463, 0, 452, 428, 459, 429, 450, 477, 119, 481,
	447, 520, 491, 532, 147, 0, 453, 539, 149, 497,
	0, 222, 163, 0, 0, 0, 479, 522, 486, 515,
	474, 507, 438, 496, 534, 464, 504, 535, 0, 0,
	0, 87, 88, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 501, 529, 461, 503, 505, 427,
	498, 0, 431, 434, 540, 525, 456, 457, 0, 0,
	0, 0, 0, 0, 0, 478, 487, 512, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 0, 495,
	0, 0, 0, 435, 432, 0, 0, 0, 0, 476,
	0, 0, 0, 437, 0, 455, 513, 0, 425, 128,
	517, 524, 473, 278, 528, 471, 470, 531, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 521, 451, 460, 113, 458, 204, 182, 242,
	494, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 414, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 423, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	430, 0, 223, 245, 260, 107, 446, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 424, 422, 417,
	416, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	442, 445, 440, 441, 489, 490, 536, 537, 538, 514,
	436, 0, 443, 444, 0, 519, 526, 527, 493, 90,
	99, 148, 257, 197, 124, 246, 426, 439, 117, 449,
	0, 0, 462, 467, 468, 480, 482, 483, 484, 485,
	492, 499, 500, 502, 508, 509, 510, 511, 516, 523,
	542, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 175, 0, 0,
	909, 0, 318, 0, 0, 0, 119, 0, 317, 0,
	0, 0, 147, 0, 910, 361, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 87,
	88, 89, 339, 338, 341, 342, 343, 344, 0, 0,
	109, 340, 345, 346, 347, 0, 0, 0, 315, 332,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 401, 0, 0, 0, 375, 0, 331,
	0, 0, 324, 325, 327, 326, 328, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 374, 0,
	0, 278, 0, 0, 372, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 362, 373,
	368, 369, 366, 367, 365, 364, 363, 376, 354, 355,
	356, 357, 359, 0, 370, 371, 358, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 0,
	318, 0, 0, 0, 119, 0, 317, 0, 0, 0,
	147, 0, 0, 361, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 352, 353, 0, 0, 0, 0,
	0, 0, 1012, 0, 53, 0, 0, 87, 88, 89,
	339, 338, 341, 342, 343, 344, 0, 0, 109, 340,
	345, 346, 347, 1013, 0, 0, 315, 332, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	330, 0, 0, 0, 0, 375, 0, 331, 0, 0,
	324, 325, 327, 326, 328, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 374, 0, 0, 278,
	0, 0, 372, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 362, 373, 368, 369,
	366, 367, 365, 364, 363, 376, 354, 355, 356, 357,
	359, 0, 370, 371, 358, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 318, 0,
	0, 0, 119, 0, 317, 0, 0, 0, 147, 0,
	0, 361, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 389, 87, 88, 89, 339, 338,
	341, 342, 343, 344, 0, 0, 109, 340, 345, 346,
	347, 0, 0, 0, 315, 332, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 330, 0,
	0, 0, 0, 375, 0, 331, 0, 0, 324, 325,
	327, 326, 328, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 374, 0, 0, 278, 0, 0,
	372, 0, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 0, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 362, 373, 368, 369, 366, 367,
	365, 364, 363, 376, 354, 355, 356, 357, 359, 0,
	370, 371, 358, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 175, 0, 0, 0, 0, 318, 0, 0, 0,
	119, 0, 317, 0, 0, 0, 147, 0, 0, 361,
	149, 0, 0, 222, 163, 0, 0, 0, 0, 0,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 87, 88, 89, 339, 338, 341, 342,
	343, 344, 0, 0, 109, 340, 345, 346, 347, 0,
	0, 0, 315, 332, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 330, 401, 0, 0,
	0, 375, 0, 331, 0, 0, 324, 325, 327, 326,
	328, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 374, 0, 0, 278, 0, 0, 372, 0,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 0, 0, 0, 113, 0, 204,
	182, 242, 0, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 0, 0, 223, 245, 260, 107, 0, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 362, 373, 368, 369, 366, 367, 365, 364,
	363, 376, 354, 355, 356, 357, 359, 0, 370, 371,
	358, 90, 99, 148, 257, 197, 124, 246, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 175,
	0, 0, 0, 0, 318, 0, 0, 0, 119, 0,
	317, 0, 0, 0, 147, 0, 0, 361, 149, 0,
	0, 222, 163, 0, 0, 0, 0, 0, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 87, 88, 89, 339, 927, 341, 342, 343, 344,
	0, 0, 109, 340, 345, 346, 347, 0, 0, 0,
	315, 332, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 330, 401, 0, 0, 0, 375,
	0, 331, 0, 0, 324, 325, 327, 326, 328, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	374, 0, 0, 278, 0, 0, 372, 0, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 0, 0, 0, 113, 0, 204, 182, 242,
	0, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 240, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 103, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	0, 0, 223, 245, 260, 107, 0, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 167, 104, 136,
	220, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	362, 373, 368, 369, 366, 367, 365, 364, 363, 376,
	354, 355, 356, 357, 359, 0, 370, 371, 358, 90,
	99, 148, 257, 197, 124, 246, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 175, 0, 0,
	0, 0, 318, 0, 0, 0, 119, 0, 317, 0,
	0, 0, 147, 0, 0, 361, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 87,
	88, 89, 339, 924, 341, 342, 343, 344, 0, 0,
	109, 340, 345, 346, 347, 0, 0, 0, 315, 332,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 401, 0, 0, 0, 375, 0, 331,
	0, 0, 324, 325, 327, 326, 328, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 374, 0,
	0, 278, 0, 0, 372, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 362, 373,
	368, 369, 366, 367, 365, 364, 363, 376, 354, 355,
	356, 357, 359, 0, 370, 371, 358, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 318, 0, 0, 0, 119, 0, 317, 0,
	0, 0, 147, 0, 0, 361, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 352, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 87,
	88, 89, 339, 338, 341, 342, 343, 344, 0, 0,
	109, 340, 345, 346, 347, 0, 0, 0, 315, 332,
	0, 360, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 330, 0, 0, 0, 0, 375, 0, 331,
	0, 0, 324, 325, 327, 326, 328, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 374, 0,
	0, 278, 0, 0, 372, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 362, 373,
	368, 369, 366, 367, 365, 364, 363, 376, 354, 355,
	356, 357, 359, 0, 370, 371, 358, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 0,
	318, 0, 0, 0, 119, 0, 317, 0, 0, 0,
	147, 0, 0, 361, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 352, 353, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 87, 88, 89,
	339, 338, 341, 342, 343, 344, 0, 0, 109, 340,
	345, 346, 347, 0, 0, 0, 315, 332, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	330, 0, 0, 0, 0, 375, 0, 331, 0, 0,
	324, 325, 327, 326, 328, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 374, 0, 0, 278,
	0, 0, 372, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 362, 373, 368, 369,
	366, 367, 365, 364, 363, 376, 354, 355, 356, 357,
	359, 0, 370, 371, 358, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 147, 0,
	0, 361, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 352, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 87, 88, 89, 339, 338,
	341, 342, 343, 344, 0, 0, 109, 340, 345, 346,
	347, 0, 0, 0, 0, 332, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 330, 0,
	0, 0, 0, 375, 0, 331, 0, 0, 324, 325,
	327, 326, 328, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 374, 0, 0, 278, 0, 0,
	372, 0, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 1579, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 362, 373, 368, 369, 366, 367,
	365, 364, 363, 376, 354, 355, 356, 357, 359, 0,
	370, 371, 358, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 147, 0, 0, 361,
	149, 0, 0, 222, 163, 0, 0, 0, 0, 0,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 389, 87, 88, 89, 339, 338, 341, 342,
	343, 344, 0, 0, 109, 340, 345, 346, 347, 0,
	0, 0, 0, 332, 0, 360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 329, 330, 0, 0, 0,
	0, 375, 0, 331, 0, 0, 324, 325, 327, 326,
	328, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 374, 0, 0, 278, 0, 0, 372, 0,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 0, 0, 0, 113, 0, 204,
	182, 242, 0, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 0, 0, 223, 245, 260, 107, 0, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 362, 373, 368, 369, 366, 367, 365, 364,
	363, 376, 354, 355, 356, 357, 359, 0, 370, 371,
	358, 90, 99, 148, 257, 197, 124, 246, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 147, 0, 0, 361, 149, 0,
	0, 222, 163, 0, 0, 0, 0, 0, 352, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 87, 88, 89, 339, 338, 341, 342, 343, 344,
	0, 0, 109, 340, 345, 346, 347, 0, 0, 0,
	0, 332, 0, 360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 330, 0, 0, 0, 0, 375,
	0, 331, 0, 0, 324, 325, 327, 326, 328, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	374, 0, 0, 278, 0, 0, 372, 0, 194, 0,
	226, 131, 146, 105, 143, 91, 101, 0, 130, 172,
	202, 206, 0, 0, 0, 113, 0, 204, 182, 242,
	0, 184, 203, 150, 232, 195, 241, 251, 252, 229,
	249, 256, 219, 94, 228, 240, 110, 214, 96, 238,
	225, 161, 140, 141, 95, 0, 200, 118, 126, 115,
	174, 235, 236, 114, 259, 102, 248, 98, 103, 247,
	168, 231, 239, 162, 155, 97, 237, 160, 154, 145,
	122, 133, 192, 152, 193, 134, 165, 164, 166, 0,
	0, 0, 223, 245, 260, 107, 0, 230, 254, 255,
	0, 196, 108, 127, 121, 191, 125, 167, 104, 136,
	220, 144, 151, 199, 258, 181, 205, 111, 244, 221,
	362, 373, 368, 369, 366, 367, 365, 364, 363, 376,
	354, 355, 356, 357, 359, 0, 370, 371, 358, 90,
	99, 148, 257, 197, 124, 246, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 100, 106, 112, 116, 120, 123, 129,
	132, 135, 137, 138, 139, 142, 153, 156, 157, 158,
	159, 169, 170, 171, 173, 176, 177, 178, 179, 180,
	183, 185, 186, 187, 188, 189, 190, 198, 201, 207,
	208, 209, 210, 211, 212, 213, 215, 216, 217, 218,
	224, 227, 233, 234, 243, 250, 253, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 629, 639,
	640, 632, 633, 634, 635, 636, 637, 638, 631, 0,
	0, 641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 278, 0, 0, 0, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 725,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	0, 727, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 620, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 278,
	0, 0, 0, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 81, 82, 0, 78, 0, 0,
	0, 83, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 0, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	149, 0, 0, 222, 163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 128, 0, 0, 0, 278, 0, 0, 0, 0,
	194, 0, 226, 131, 146, 105, 143, 91, 101, 0,
	130, 172, 202, 206, 0, 0, 0, 113, 0, 204,
	182, 242, 0, 184, 203, 150, 232, 195, 241, 251,
	252, 229, 249, 256, 219, 94, 228, 240, 110, 214,
	96, 238, 225, 161, 140, 141, 95, 0, 200, 118,
	126, 115, 174, 235, 236, 114, 259, 102, 248, 98,
	103, 247, 168, 231, 239, 162, 155, 97, 237, 160,
	154, 145, 122, 133, 192, 152, 193, 134, 165, 164,
	166, 0, 0, 0, 223, 245, 260, 107, 0, 230,
	254, 255, 0, 196, 108, 127, 121, 191, 125, 167,
	104, 136, 220, 144, 151, 199, 258, 181, 205, 111,
	244, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 99, 148, 257, 197, 124, 246, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 100, 106, 112, 116, 120,
	123, 129, 132, 135, 137, 138, 139, 142, 153, 156,
	157, 158, 159, 169, 170, 171, 173, 176, 177, 178,
	179, 180, 183, 185, 186, 187, 188, 189, 190, 198,
	201, 207, 208, 209, 210, 211, 212, 213, 215, 216,
	217, 218, 224, 227, 233, 234, 243, 250, 253, 305,
	175, 0, 0, 0, 995, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 0, 997, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 278, 0, 0, 0, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 87, 88, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 278, 0, 0, 0, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 175, 0,
	0, 0, 995, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 149, 0, 0,
	222, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 89, 0, 997, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 278, 0, 0, 0, 0, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 0, 0, 0, 113, 0, 204, 182, 242, 0,
	993, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 0,
	0, 223, 245, 260, 107, 0, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 99,
	148, 257, 197, 124, 246, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 149, 0, 0, 222, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	89, 0, 0, 961, 0, 0, 962, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	278, 0, 0, 0, 0, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 0,
	0, 0, 113, 0, 204, 182, 242, 0, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 240, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 103, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 0, 0, 223,
	245, 260, 107, 0, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 167, 104, 136, 220, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 99, 148, 257,
	197, 124, 246, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 760, 0, 0, 0, 147,
	0, 0, 0, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	759, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 278, 0,
	0, 0, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 87, 88, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 278, 0, 0, 0,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 149,
	0, 0, 222, 163, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 87, 88, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 278, 0, 0, 0, 0, 194,
	0, 226, 131, 146, 105, 143, 91, 101, 0, 130,
	172, 202, 206, 0, 0, 0, 113, 0, 204, 182,
	242, 0, 184, 203, 150, 232, 195, 241, 251, 252,
	229, 249, 256, 219, 94, 228, 240, 110, 214, 96,
	238, 225, 161, 140, 141, 95, 0, 200, 118, 126,
	115, 174, 235, 236, 114, 259, 102, 248, 98, 103,
	247, 168, 231, 239, 162, 155, 97, 237, 160, 154,
	145, 122, 133, 192, 152, 193, 134, 165, 164, 166,
	0, 0, 0, 223, 245, 260, 107, 0, 230, 254,
	255, 0, 196, 108, 127, 121, 191, 125, 167, 104,
	136, 220, 144, 151, 199, 258, 181, 205, 111, 244,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 99, 148, 257, 197, 124, 246, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 100, 106, 112, 116, 120, 123,
	129, 132, 135, 137, 138, 139, 142, 153, 156, 157,
	158, 159, 169, 170, 171, 173, 176, 177, 178, 179,
	180, 183, 185, 186, 187, 188, 189, 190, 198, 201,
	207, 208, 209, 210, 211, 212, 213, 215, 216, 217,
	218, 224, 227, 233, 234, 243, 250, 253, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 149, 0, 0,
	222, 163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 89, 0, 997, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 278, 0, 0, 0, 0, 194, 0, 226,
	131, 146, 105, 143, 91, 101, 0, 130, 172, 202,
	206, 0, 0, 0, 113, 0, 204, 182, 242, 0,
	184, 203, 150, 232, 195, 241, 251, 252, 229, 249,
	256, 219, 94, 228, 240, 110, 214, 96, 238, 225,
	161, 140, 141, 95, 0, 200, 118, 126, 115, 174,
	235, 236, 114, 259, 102, 248, 98, 103, 247, 168,
	231, 239, 162, 155, 97, 237, 160, 154, 145, 122,
	133, 192, 152, 193, 134, 165, 164, 166, 0, 0,
	0, 223, 245, 260, 107, 0, 230, 254, 255, 0,
	196, 108, 127, 121, 191, 125, 167, 104, 136, 220,
	144, 151, 199, 258, 181, 205, 111, 244, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 99,
	148, 257, 197, 124, 246, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 100, 106, 112, 116, 120, 123, 129, 132,
	135, 137, 138, 139, 142, 153, 156, 157, 158, 159,
	169, 170, 171, 173, 176, 177, 178, 179, 180, 183,
	185, 186, 187, 188, 189, 190, 198, 201, 207, 208,
	209, 210, 211, 212, 213, 215, 216, 217, 218, 224,
	227, 233, 234, 243, 250, 253, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 149, 0, 0, 222, 163,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	89, 0, 727, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	278, 0, 0, 0, 0, 194, 0, 226, 131, 146,
	105, 143, 91, 101, 0, 130, 172, 202, 206, 0,
	0, 0, 113, 0, 204, 182, 242, 0, 184, 203,
	150, 232, 195, 241, 251, 252, 229, 249, 256, 219,
	94, 228, 240, 110, 214, 96, 238, 225, 161, 140,
	141, 95, 0, 200, 118, 126, 115, 174, 235, 236,
	114, 259, 102, 248, 98, 103, 247, 168, 231, 239,
	162, 155, 97, 237, 160, 154, 145, 122, 133, 192,
	152, 193, 134, 165, 164, 166, 0, 0, 0, 223,
	245, 260, 107, 0, 230, 254, 255, 0, 196, 108,
	127, 121, 191, 125, 167, 104, 136, 220, 144, 151,
	199, 258, 181, 205, 111, 244, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 99, 148, 257,
	197, 124, 246, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	100, 106, 112, 116, 120, 123, 129, 132, 135, 137,
	138, 139, 142, 153, 156, 157, 158, 159, 169, 170,
	171, 173, 176, 177, 178, 179, 180, 183, 185, 186,
	187, 188, 189, 190, 198, 201, 207, 208, 209, 210,
	211, 212, 213, 215, 216, 217, 218, 224, 227, 233,
	234, 243, 250, 253, 175, 0, 0, 0, 0, 0,
	0, 0, 730, 119, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 149, 0, 0, 222, 163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 278, 0,
	0, 0, 0, 194, 0, 226, 131, 146, 105, 143,
	91, 101, 0, 130, 172, 202, 206, 0, 0, 0,
	113, 0, 204, 182, 242, 0, 184, 203, 150, 232,
	195, 241, 251, 252, 229, 249, 256, 219, 94, 228,
	240, 110, 214, 96, 238, 225, 161, 140, 141, 95,
	0, 200, 118, 126, 115, 174, 235, 236, 114, 259,
	102, 248, 98, 103, 247, 168, 231, 239, 162, 155,
	97, 237, 160, 154, 145, 122, 133, 192, 152, 193,
	134, 165, 164, 166, 0, 0, 0, 223, 245, 260,
	107, 0, 230, 254, 255, 0, 196, 108, 127, 121,
	191, 125, 167, 104, 136, 220, 144, 151, 199, 258,
	181, 205, 111, 244, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 99, 148, 257, 197, 124,
	246, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 100, 106,
	112, 116, 120, 123, 129, 132, 135, 137, 138, 139,
	142, 153, 156, 157, 158, 159, 169, 170, 171, 173,
	176, 177, 178, 179, 180, 183, 185, 186, 187, 188,
	189, 190, 198, 201, 207, 208, 209, 210, 211, 212,
	213, 215, 216, 217, 218, 224, 227, 233, 234, 243,
	250, 253, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 149, 0, 0, 222, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 89, 0, 609, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 278, 0, 0, 0,
	0, 194, 0, 226, 131, 146, 105, 143, 91, 101,
	0, 130, 172, 202, 206, 0, 0, 0, 113, 0,
	204, 182, 242, 0, 184, 203, 150, 232, 195, 241,
	251, 252, 229, 249, 256, 219, 94, 228, 240, 110,
	214, 96, 238, 225, 161, 140, 141, 95, 0, 200,
	118, 126, 115, 174, 235, 236, 114, 259, 102, 248,
	98, 103, 247, 168, 231, 239, 162, 155, 97, 237,
	160, 154, 145, 122, 133, 192, 152, 193, 134, 165,
	164, 166, 0, 0, 0, 223, 245, 260, 107, 0,
	230, 254, 255, 0, 196, 108, 127, 121, 191, 125,
	167, 104, 136, 220, 144, 151, 199, 258, 181, 205,
	111, 244, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 99, 148, 257, 197, 124, 246, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 93, 100, 106, 112, 116,
	120, 123, 129, 132, 135, 137, 138, 139, 142, 153,
	156, 157, 158, 159, 169, 170, 171, 173, 176, 177,
	178, 179, 180, 183, 185, 186, 187, 188, 189, 190,
	198, 201, 207, 208, 209, 210, 211, 212, 213, 215,
	216, 217, 218, 224, 227, 233, 234, 243, 250, 253,
	406, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 149, 0, 0, 222,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 278, 0, 0, 0, 0, 194, 0, 226, 131,
	146, 105, 143, 91, 101, 0, 130, 172, 202, 206,
	0, 0, 0, 113, 0, 204, 182, 242, 0, 184,
	203, 150, 232, 195, 241, 251, 252, 229, 249, 256,
	219, 94, 228, 240, 110, 214, 96, 238, 225, 161,
	140, 141, 95, 0, 200, 118, 126, 115, 174, 235,
	236, 114, 259, 102, 248, 98, 103, 247, 168, 231,
	239, 162, 155, 97, 237, 160, 154, 145, 122, 133,
	192, 152, 193, 134, 165, 164, 166, 0, 0, 0,
	223, 245, 260, 107, 0, 230, 254, 255, 0, 196,
	108, 127, 121, 191, 125, 167, 104, 136, 220, 144,
	151, 199, 258, 181, 205, 111, 244, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 99, 148,
	257, 197, 124, 246, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 100, 106, 112, 116, 120, 123, 129, 132, 135,
	137, 138, 139, 142, 153, 156, 157, 158, 159, 169,
	170, 171, 173, 176, 177, 178, 179, 180, 183, 185,
	186, 187, 188, 189, 190, 198, 201, 207, 208, 209,
	210, 211, 212, 213, 215, 216, 217, 218, 224, 227,
	233, 234, 243, 250, 253, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 149, 0, 0, 222, 163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 273, 0, 278,
	0, 0, 0, 0, 194, 0, 226, 131, 146, 105,
	143, 91, 101, 0, 130, 172, 202, 206, 0, 0,
	0, 113, 0, 204, 182, 242, 0, 184, 203, 150,
	232, 195, 241, 251, 252, 229, 249, 256, 219, 94,
	228, 240, 110, 214, 96, 238, 225, 161, 140, 141,
	95, 0, 200, 118, 126, 115, 174, 235, 236, 114,
	259, 102, 248, 98, 103, 247, 168, 231, 239, 162,
	155, 97, 237, 160, 154, 145, 122, 133, 192, 152,
	193, 134, 165, 164, 166, 0, 0, 0, 223, 245,
	260, 107, 0, 230, 254, 255, 0, 196, 108, 127,
	121, 191, 125, 167, 104, 136, 220, 144, 151, 199,
	258, 181, 205, 111, 244, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 99, 148, 257, 197,
	124, 246, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 100,
	106, 112, 116, 120, 123, 129, 132, 135, 137, 138,
	139, 142, 153, 156, 157, 158, 159, 169, 170, 171,
	173, 176, 177, 178, 179, 180, 183, 185, 186, 187,
	188, 189, 190, 198, 201, 207, 208, 209, 210, 211,
	212, 213, 215, 216, 217, 218, 224, 227, 233, 234,
	243, 250, 253, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 149, 0, 0, 222, 163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 278, 0, 0,
	0, 0, 194, 0, 226, 131, 146, 105, 143, 91,
	101, 0, 130, 172, 202, 206, 0, 0, 0, 113,
	0, 204, 182, 242, 0, 184, 203, 150, 232, 195,
	241, 251, 252, 229, 249, 256, 219, 94, 228, 240,
	110, 214, 96, 238, 225, 161, 140, 141, 95, 0,
	200, 118, 126, 115, 174, 235, 236, 114, 259, 102,
	248, 98, 103, 247, 168, 231, 239, 162, 155, 97,
	237, 160, 154, 145, 122, 133, 192, 152, 193, 134,
	165, 164, 166, 0, 0, 0, 223, 245, 260, 107,
	0, 230, 254, 255, 0, 196, 108, 127, 121, 191,
	125, 167, 104, 136, 220, 144, 151, 199, 258, 181,
	205, 111, 244, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 99, 148, 257, 197, 124, 246,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 100, 106, 112,
	116, 120, 123, 129, 132, 135, 137, 138, 139, 142,
	153, 156, 157, 158, 159, 169, 170, 171, 173, 176,
	177, 178, 179, 180, 183, 185, 186, 187, 188, 189,
	190, 198, 201, 207, 208, 209, 210, 211, 212, 213,
	215, 216, 217, 218, 224, 227, 233, 234, 243, 250,
	253,
}
var yyPact = [...]int{

	218, -1000, -272, 1055, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1006, 782, -1000, -1000, -1000,
	-1000, -1000, -1000, 261, 12015, 29, 137, 8, 16767, 136,
	2029, 17105, -1000, 21, -1000, -1000, 12353, -1000, -1000, -66,
	-82, -1000, 9987, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 764, 989, 995, 1000, 635, 999, -1000, 8623, 95,
	95, 16429, 7271, -1000, -1000, 380, 17105, 128, 17105, -127,
	88, 88, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 132, 17105, 545, 545, 265, -1000, 17105, 85, 545,
	85, 85, 85, 17105, -1000, 182, -1000, -1000, -1000, 17105,
	545, 914, 342, 89, 4814, -1000, 183, -1000, 4814, 30,
	4814, -60, 1014, 31, 6, -1000, 4814, -1000, -1000, -1000,
	-1000, -1000, -1000, 16084, 146, 278, -1000, -1000, -1000, -1000,
	-1000, -1000, 552, 383, -1000, 9987, 1596, 511, 511, -1000,
	-1000, 166, -1000, -1000, 11001, 11001, 11001, 11001, 11001, 11001,
	11001, 11001, 11001, 11001, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 511, 180,
	-1000, 9649, 511, 511, 511, 511, 511, 511, 511, 511,
	9987, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, -1000, -1000, 1006,
	-1000, 782, -1000, -1000, -1000, 966, 9987, 9987, 1006, -1000,
	897, 8623, -1000, -1000, 960, -1000, -1000, -1000, -1000, 318,
	1037, -1000, 11677, 179, 15746, 14732, 17105, 767, 742, -1000,
	-1000, 177, 727, 6920, -97, -1000, -1000, -1000, 264, 14056,
	-1000, -1000, -1000, 913, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 701, 17105, -1000, 317, -1000, 545, 4814,
	103, 545, 293, 545, 17105, 17105, 4814, 4814, 4814, 36,
	76, 67, 17105, 715, 100, 17105, 975, 831, 17105, 545,
	545, -1000, 6218, -1000, 4814, 342, -1000, 450, 9987, 4814,
	4814, 4814, 17105, 4814, 4814, -1000, -1000, -1000, 324, -1000,
	-1000, -1000, -1000, 4814, 4814, -1000, 1036, 319, -1000, -1000,
	-1000, -1000, 9987, 226, -1000, 830, -1000, -1000, -1000, -1000,
	-1000, 1055, -1000, -1000, -1000, -118, -1000, -1000, 9987, 9987,
	9987, 560, 228, 11001, 510, 377, 11001, 11001, 11001, 11001,
	11001, 11001, 11001, 11001, 11001, 11001, 11001, 11001, 11001, 11001,
	11001, 527, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	545, -1000, 1053, 612, 612, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 11339, 7609, 6218, 635, 697, 1006,
	8623, 8623, 9987, 9987, 9299, 8961, 8623, 954, 290, 383,
	17105, -1000, -1000, 10663, -1000, -1000, -1000, -1000, -1000, 457,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17105, 17105, 8623,
	8623, 8623, 8623, 8623, 995, 635, 960, -1000, 1049, 213,
	623, 713, -1000, 572, 995, 13718, 719, -1000, 960, -1000,
	-1000, -1000, 17105, -1000, -1000, 15408, -1000, -1000, 5867, 52,
	17105, -1000, 703, 860, -1000, -1000, -1000, 979, 13042, 13380,
	52, 580, 14732, 17105, -1000, -1000, 14732, 17105, 5516, 6569,
	-97, -1000, 646, -1000, -88, -102, 7947, 195, -1000, -1000,
	-1000, -1000, 4463, 288, 494, 339, -54, -1000, -1000, -1000,
	745, -1000, 745, 745, 745, 745, -19, -19, -19, -19,
	-1000, -1000, -1000, -1000, -1000, 802, 797, -1000, 745, 745,
	745, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 793,
	793, 793, 756, 756, 810, -1000, 17105, 4814, 970, 4814,
	-1000, 86, -1000, -1000, -1000, 17105, 17105, 17105, 17105, 17105,
	145, 17105, 17105, 709, -1000, 17105, 4814, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 383, -1000, -1000, -1000, -1000,
	-1000, -1000, 17105, -1000, -1000, -1000, -1000, 17105, 342, 17105,
	17105, 383, -1000, 437, 17105, -1000, -1000, -1000, -1000, 383,
	228, 239, -1000, -1000, 373, -1000, -1000, 1941, -1000, -1000,
	-1000, -1000, 510, 11001, 11001, 11001, 852, 1941, 2181, 435,
	518, 197, 381, 381, 194, 194, 194, 194, 194, 550,
	550, -1000, -1000, -1000, 457, -1000, -1000, -1000, 457, 8623,
	8623, 708, 511, 176, -1000, 764, -1000, -1000, 995, 683,
	683, 301, 554, 312, 1035, 683, 289, 1028, 683, 683,
	8623, -1000, -1000, 297, -1000, 9987, 457, -1000, 171, -1000,
	1690, 707, 680, 683, 457, 457, 683, 683, 966, -1000,
	-1000, 848, 9987, 9987, 9987, -1000, -1000, -1000, 966, 994,
	-1000, 904, 903, 1012, 8623, 14732, 960, -1000, -1000, -1000,
	169, 834, 511, -1000, 17105, 14732, 14732, 14732, 14732, 14732,
	-1000, 873, 859, -1000, 849, 847, 868, 17105, -1000, 687,
	635, 13042, 224, 511, -1000, 15070, -1000, -1000, 1012, 14732,
	716, -1000, 716, -1000, 163, -1000, -1000, 646, -97, -83,
	-1000, -1000, -1000, -1000, 383, -1000, 651, 639, 4112, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 788, 545, -1000, 958,
	206, 232, 545, 941, -1000, -1000, -1000, 918, -1000, 313,
	-56, -1000, -1000, 386, -19, -19, -1000, -1000, 195, 911,
	195, 195, 195, 427, 427, -1000, -1000, -1000, -1000, 384,
	-1000, -1000, -1000, 378, -1000, 827, 17105, 4814, -1000, -1000,
	-1000, -1000, 786, 786, 233, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 48, 768, -1000, -1000,
	-1000, -1000, 3, 35, 98, -1000, 4814, -1000, 319, 319,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 852,
	1941, 1823, -1000, 11001, 11001, -1000, -1000, 683, 683, 8623,
	6218, 1006, 966, -1000, -1000, 223, 527, 223, 11001, 11001,
	-1000, 11001, 11001, -1000, -145, 699, 281, -1000, 9987, 515,
	-1000, 6218, -1000, 11001, 11001, -1000, -1000, -1000, -1000, -1000,
	-1000, 880, 383, 383, -1000, -1000, 17105, -1000, -1000, -1000,
	-1000, 1010, 9987, -1000, 609, -1000, 5165, 821, 17105, 511,
	1055, 13042, 17105, 750, -1000, 244, 860, 787, 814, 735,
	-1000, -1000, -1000, -1000, 857, -1000, 851, -1000, -1000, -1000,
	-1000, -1000, 635, -1000, 125, 120, 105, 17105, -1000, 1006,
	716, -1000, -1000, 207, -1000, -1000, -110, -112, -1000, -1000,
	-1000, 4463, -1000, 4463, 17105, 70, -1000, 545, 545, -1000,
	-1000, -1000, 778, 813, 11001, -1000, -1000, -1000, 492, 195,
	195, -1000, 500, -1000, -1000, -1000, 678, -1000, 666, 602,
	662, 17105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17105, -1000, -1000, -1000, -1000, -1000, 17105, -155, 545,
	17105, 17105, 17105, 17105, -1000, 342, 342, -1000, 11001, 1941,
	1941, -1000, -1000, 457, -1000, 995, -1000, 457, 745, 745,
	-1000, 745, 756, -1000, 745, 12, 745, -3, 457, 457,
	2014, 1971, 1638, 1030, 511, -134, -1000, 383, 9987, -1000,
	1742, 1717, -1000, -1000, 1001, 998, 383, -1000, -1000, 967,
	557, 540, -1000, -1000, 8285, 660, 157, 650, -1000, 1006,
	17105, 9987, -1000, -1000, 9987, 752, -1000, 9987, -1000, -1000,
	-1000, 1006, 511, 511, 511, 650, 995, -1000, -1000, -1000,
	-1000, 4112, -1000, 644, -1000, 745, -1000, -1000, -1000, 17105,
	-45, 1048, 1941, -1000, -1000, -1000, -1000, -1000, -19, 420,
	-19, 364, -1000, 363, 4814, -1000, -1000, -1000, -1000, 961,
	-1000, 6218, -1000, -1000, 744, 807, -1000, -1000, -1000, -1000,
	1941, -1000, 966, -1000, -1000, 115, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11001, 11001, 11001, 11001, 11001, 995,
	417, 383, 11001, 11001, -1000, 9987, 9987, 937, -1000, 511,
	-1000, 843, 17105, 17105, -1000, 17105, 995, -1000, 383, 383,
	17105, 383, 14394, 17105, 17105, 12692, -1000, 174, 17105, -1000,
	631, -1000, 216, -1000, -147, 195, -1000, 195, 489, 487,
	-1000, 511, 571, -1000, 241, 17105, 17105, -1000, -1000, -1000,
	1690, 1690, 1690, 1690, 84, 457, -1000, 1690, 1690, 383,
	552, 1045, -1000, 511, 1055, 154, -1000, -1000, -1000, 615,
	613, -1000, 613, 613, 224, 174, -1000, 545, 240, 406,
	-1000, 66, 17105, 326, 935, -1000, 934, -1000, -1000, -1000,
	-1000, -1000, 47, 6218, 4463, 605, -1000, -1000, -1000, -1000,
	-1000, 457, 69, -159, -1000, -1000, -1000, 17105, 540, 17105,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 358, -1000, -1000,
	17105, -1000, -1000, 374, -1000, -1000, 588, -1000, 17105, -1000,
	-1000, 768, -1000, 879, -150, -176, 519, -1000, -1000, 736,
	-1000, -1000, 47, 902, -155, -1000, 878, -1000, 17105, -1000,
	43, -1000, -157, 544, 41, -174, 812, 511, -178, 789,
	-1000, 1021, 10325, -1000, -1000, 1043, 184, 184, 1690, 457,
	-1000, -1000, -1000, 74, 407, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1299, 1296, 19, 74, 68, 1295, 1294, 1291, 94,
	93, 91, 1290, 1289, 1288, 1286, 1284, 1283, 1282, 1281,
	1280, 1279, 1278, 1277, 1276, 1275, 1269, 1265, 1264, 1263,
	96, 1261, 86, 1260, 1258, 1257, 1256, 1255, 1254, 1245,
	1240, 44, 180, 50, 64, 1238, 60, 1551, 1237, 56,
	61, 58, 1236, 30, 1235, 1234, 71, 1230, 1227, 57,
	1225, 1224, 45, 1221, 67, 1217, 12, 52, 1216, 1213,
	1209, 1206, 80, 775, 1205, 1204, 15, 1203, 1201, 89,
	1200, 66, 29, 11, 18, 22, 1197, 62, 1196, 7,
	1194, 65, 1193, 1191, 1190, 1189, 59, 1187, 63, 1178,
	17, 24, 1174, 38, 75, 31, 23, 8, 1171, 1168,
	14, 69, 53, 87, 1166, 1165, 574, 1161, 1160, 46,
	1159, 1156, 1155, 28, 1153, 112, 482, 1152, 1151, 1150,
	1149, 43, 895, 1913, 164, 81, 1148, 1144, 1143, 2653,
	40, 54, 13, 1141, 51, 111, 37, 1140, 1126, 34,
	1125, 1124, 1120, 1119, 1118, 1117, 1116, 21, 1115, 1114,
	1113, 26, 36, 1112, 1099, 78, 27, 1098, 1096, 1095,
	55, 70, 1094, 1093, 49, 1092, 1086, 33, 1084, 1083,
	1082, 1079, 1078, 32, 6, 1077, 16, 1076, 10, 1075,
	25, 1074, 4, 1073, 9, 1070, 3, 0, 1069, 5,
	48, 1, 1065, 2, 1064, 1063, 1655, 302, 83, 1061,
	99,
}
var yyR1 = [...]int{

	0, 204, 205, 205, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 197, 197, 197,
	20, 3, 3, 3, 3, 2, 2, 8, 4, 5,
	5, 9, 9, 33, 33, 10, 11, 11, 11, 11,
	208, 208, 56, 56, 57, 57, 104, 104, 12, 13,
	13, 113, 113, 112, 112, 112, 114, 114, 114, 114,
	147, 147, 14, 14, 14, 14, 14, 14, 14, 199,
	199, 198, 196, 196, 195, 195, 194, 21, 179, 181,
	181, 180, 180, 180, 180, 171, 150, 150, 150, 150,
	153, 153, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 152, 152, 152, 152, 152, 154, 154, 154, 154,
	154, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 156, 156, 156, 170, 170, 157, 157, 165, 165,
	166, 166, 166, 163, 163, 164, 164, 167, 167, 167,
	159, 159, 160, 160, 168, 168, 161, 161, 161, 162,
	162, 162, 169, 169, 169, 169, 169, 158, 158, 172,
	172, 189, 189, 188, 188, 188, 178, 178, 185, 185,
	185, 185, 185, 175, 175, 175, 176, 176, 174, 174,
	177, 177, 187, 187, 186, 173, 173, 190, 190, 190,
	190, 202, 203, 201, 201, 201, 201, 201, 182, 182,
	182, 183, 183, 183, 184, 184, 184, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 193, 191,
	191, 192, 192, 16, 22, 22, 17, 17, 17, 17,
	17, 18, 18, 23, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 120, 120, 122, 122, 118, 118, 121, 121, 119,
	119, 119, 123, 123, 123, 124, 124, 148, 148, 148,
	25, 25, 27, 27, 28, 29, 34, 34, 34, 34,
	34, 34, 36, 36, 36, 7, 7, 7, 7, 35,
	35, 35, 6, 6, 26, 26, 26, 26, 19, 209,
	30, 31, 31, 32, 32, 32, 38, 38, 38, 37,
	37, 37, 43, 43, 45, 45, 45, 45, 45, 46,
	46, 46, 46, 46, 46, 42, 42, 44, 44, 44,
	44, 136, 136, 136, 135, 135, 48, 48, 49, 49,
	50, 50, 51, 51, 51, 88, 65, 65, 103, 103,
	105, 105, 52, 52, 52, 52, 53, 53, 54, 54,
	55, 55, 143, 143, 142, 142, 142, 141, 141, 58,
	58, 58, 60, 59, 59, 59, 59, 61, 61, 63,
	63, 62, 62, 64, 66, 66, 66, 66, 66, 67,
	67, 47, 47, 47, 47, 47, 47, 47, 117, 117,
	69, 69, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 80, 80, 80, 80, 80, 80, 70, 70,
	70, 70, 70, 70, 70, 41, 41, 81, 81, 81,
	87, 82, 82, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 77, 77, 77,
	77, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	210, 210, 79, 78, 78, 78, 78, 78, 78, 78,
	39, 39, 39, 39, 39, 146, 146, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	92, 92, 40, 40, 90, 90, 91, 93, 93, 89,
	89, 89, 72, 72, 72, 72, 72, 72, 72, 72,
	74, 74, 74, 94, 94, 95, 95, 96, 96, 97,
	97, 98, 99, 99, 99, 100, 100, 100, 100, 101,
	101, 101, 71, 71, 71, 71, 102, 102, 102, 102,
	106, 106, 83, 83, 85, 85, 84, 86, 107, 107,
	110, 108, 108, 108, 111, 111, 111, 111, 109, 109,
	109, 138, 138, 138, 115, 115, 125, 125, 126, 126,
	116, 116, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 128, 128, 129, 129, 130, 130, 130,
	137, 137, 133, 133, 134, 134, 139, 139, 140, 140,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	206, 207, 144, 145, 145, 145,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	2, 4, 6, 6, 7, 4, 6, 5, 8, 1,
	3, 7, 8, 1, 1, 9, 8, 7, 6, 6,
	1, 1, 1, 3, 1, 3, 0, 4, 3, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 1, 2,
	0, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 4, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 2, 7, 2, 3, 4, 3,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	3, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 0, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 3, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 4, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 8, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 5, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 2, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -204, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -6, -26, -19, -20, -4, -206, 6, 7, -33,
	9, 10, 30, -21, 122, 123, 125, 124, 158, 126,
	151, 53, 172, 173, 175, 176, -36, 156, 157, 31,
	32, 128, 34, 57, 8, 258, 153, 152, 25, -205,
	360, -32, 5, -96, 15, -3, -30, -209, -30, -30,
	-30, -30, -30, -179, -181, 57, 95, -130, 132, 77,
	250, 129, 130, 136, -133, -197, -132, 60, 61, 62,
	268, 144, 300, 301, 172, 183, 177, 204, 196, 269,
	302, 145, 194, 197, 237, 142, 303, 224, 231, 71,
	175, 246, 304, 154, 192, 188, 305, 277, 186, 27,
	306, 233, 209, 307, 273, 235, 187, 232, 128, 308,
	147, 140, 309, 210, 214, 310, 238, 311, 312, 313,
	181, 182, 314, 143, 240, 208, 141, 33, 270, 37,
	162, 241, 212, 315, 207, 203, 316, 317, 318, 319,
	206, 180, 202, 41, 216, 215, 217, 236, 199, 320,
	321, 322, 148, 323, 189, 18, 324, 325, 326, 327,
	328, 244, 157, 329, 160, 330, 331, 332, 333, 334,
	335, 234, 211, 213, 137, 164, 230, 272, 336, 242,
	185, 337, 149, 161, 156, 245, 150, 338, 339, 340,
	341, 342, 343, 344, 176, 345, 346, 347, 348, 171,
	239, 248, 40, 221, 349, 179, 139, 350, 173, 168,
	226, 200, 163, 351, 352, 190, 191, 205, 178, 201,
	174, 165, 158, 353, 247, 222, 274, 198, 195, 169,
	354, 166, 167, 355, 227, 228, 170, 271, 243, 193,
	223, -116, 132, 250, 129, 228, 134, 130, 130, 131,
	132, 250, 129, 130, -62, -139, -197, -132, 132, 130,
	113, 197, 237, 122, 225, 233, -122, 234, 164, -148,
	130, -118, 224, 227, 228, 170, -197, 235, 239, 238,
	229, -139, 174, -62, -34, 356, 126, -144, -144, 226,
	226, -144, -82, -47, -68, 79, -73, 29, 23, -72,
	-69, -89, -86, -87, 113, 114, 116, 115, 117, 102,
	103, 110, 80, 118, -77, -75, -76, -78, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -133, -139,
	-84, -206, 47, 48, 259, 260, 261, 262, 267, 263,
	82, 36, 249, 257, 256, 255, 253, 254, 251, 252,
	265, 266, 135, 250, 129, 108, 258, -197, -132, -5,
	-4, -206, 6, 20, 21, -100, 17, 16, -207, 59,
	-38, -45, 42, 43, -46, 21, 35, 46, 44, -31,
	-44, 104, -47, -139, -116, -116, 11, -56, -57, -62,
	-64, -139, -108, -147, 174, -111, 239, 238, -134, -109,
	-133, -131, 237, 197, 236, 127, 275, 78, 22, 24,
	219, 81, 113, 16, 82, 112, 259, 122, 51, 276,
	251, 252, 249, 261, 262, 250, 225, 29, 10, 278,
	25, 152, 21, 35, 106, 124, 85, 86, 155, 23,
	153, 75, 281, 19, 54, 11, 13, 282, 283, 14,
	135, 134, 97, 131, 49, 8, 118, 26, 94, 45,
	284, 28, 285, 286, 287, 288, 47, 95, 17, 253,
	254, 31, 289, 267, 159, 108, 52, 38, 79, 290,
	291, 73, 292, 76, 55, 77, 15, 50, 293, 294,
	295, 296, 96, 125, 258, 48, 297, 129, 6, 264,
	30, 151, 46, 298, 130, 84, 265, 266, 133, 74,
	5, 136, 32, 9, 53, 56, 255, 256, 257, 36,
	83, 12, 299, -180, 95, -171, -197, -62, 131, -62,
	258, -126, 135, -126, -126, 130, -62, -197, -197, 122,
	124, 127, 55, -22, -62, -125, 135, -197, -125, -125,
	-125, -62, 119, -62, -197, 30, -123, 95, 12, 250,
	-197, 164, 130, 165, 132, -145, -206, -134, -175, 131,
	33, 143, -145, 168, 169, -145, -121, -120, 231, 232,
	226, 230, 12, 169, 226, 167, -145, -35, -133, 64,
	-7, -3, -10, -9, -11, 87, -144, -144, 58, 78,
	77, 94, -47, -70, 97, 79, 95, 96, 81, 99,
	98, 109, 102, 103, 104, 105, 106, 107, 108, 100,
	101, 112, 87, 88, 89, 90, 91, 92, 93, -117,
	-206, -87, -206, 120, 121, -73, -73, -73, -73, -73,
	-73, -73, -73, -73, -73, -206, 119, -2, -82, -4,
	-206, -206, -206, -206, -206, -206, -206, -206, -92, -47,
	-206, -210, -79, -206, -210, -79, -210, -79, -210, -206,
	-210, -79, -210, -79, -210, -210, -79, -206, -206, -206,
	-206, -206, -206, -206, -96, -3, -30, -101, 19, 31,
	-47, -97, -98, -47, -96, 38, -42, -44, -46, 42,
	43, 70, 11, -136, -135, 22, -133, 64, 119, -63,
	26, -62, -49, -50, -51, -52, -65, -88, -206, -62,
	-62, -56, -208, 58, 11, 56, -208, 58, 119, 58,
	174, -111, -113, -112, 240, 242, 87, -138, -133, 64,
	29, 30, 59, 58, -62, -150, -153, -155, -154, -156,
	-151, -152, 194, 195, 113, 198, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 30, 154, 190, 191,
	192, 193, 210, 211, 212, 213, 214, 215, 216, 217,
	177, 196, 269, 178, 179, 180, 181, 182, 183, 185,
	186, 187, 188, 189, -197, -145, 132, -197, 79, -197,
	-62, -62, -145, -145, -145, 166, 166, 130, 130, 171,
	-62, 58, 133, -56, 23, 55, -62, -197, -197, -140,
	-139, -131, -145, -123, 64, -47, -145, -145, -145, -62,
	-145, -145, -176, 11, 97, -145, -145, 11, -119, 11,
	97, -47, -124, 95, 55, 208, 357, 358, 359, -47,
	-47, -47, -80, 73, 79, 74, 75, -73, -81, -84,
	-87, 69, 97, 95, 96, 81, -73, -73, -73, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -146, -197, 64, -197, -72, -72, -133, -43, 21,
	35, -42, -134, -140, -131, -32, -207, -207, -96, -42,
	-42, -47, -47, -89, 64, -42, -89, 64, -42, -42,
	-37, 21, 35, -90, -91, 83, -89, -133, -139, -207,
	-73, -133, -133, -42, -43, -43, -42, -42, -100, -207,
	9, 97, 58, 18, 58, -99, 24, 25, -100, -74,
	-133, 65, 68, -48, 58, 11, -46, -62, -135, 104,
	-140, -104, 160, -62, 30, 58, -58, -60, -59, -61,
	45, 49, 51, 46, 47, 48, 52, -143, 22, -49,
	-3, -206, -142, 160, -141, 22, -139, 64, -104, 56,
	-49, -62, -49, -64, -139, 104, -111, -113, 58, 241,
	243, 244, 55, 76, -47, -162, 112, -182, -183, -184,
	-134, 64, 65, -171, -172, -173, -185, 146, -190, 137,
	139, 136, -174, 147, 131, 28, 59, -167, 73, 79,
	-163, 222, -157, 57, -157, -157, -157, -157, -161, 197,
	-161, -161, -161, 57, 57, -157, -157, -157, -165, 57,
	-165, -165, -166, 57, -166, -137, 56, -62, -145, 23,
	-145, -127, 127, 124, 125, -193, 123, 219, 197, 71,
	29, 15, 259, 160, 274, -197, 161, -62, -62, -62,
	-62, -62, 127, 124, -62, -62, -62, -145, -62, -62,
	-123, -139, -139, 64, -62, 73, 74, 75, -81, -73,
	-73, -73, -41, 155, 78, -207, -207, -42, -42, -206,
	119, -5, -100, -207, -207, 58, 56, 22, 11, 11,
	-207, 11, 11, -207, -207, -42, -93, -91, 85, -47,
	-207, 119, -207, 58, 58, -207, -207, -207, -207, -207,
	-101, 40, -47, -47, -98, -101, -115, 19, 11, 36,
	36, -67, 12, -44, -49, -46, 119, -71, 30, 36,
	-3, -206, -206, -107, -110, -89, -50, -51, -51, -50,
	-51, 45, 45, 45, 50, 45, 50, 45, -59, -139,
	-207, -207, -3, -66, 53, 134, 54, -206, -141, -67,
	-49, -67, -67, 119, -112, -114, 245, 242, 248, -197,
	64, 58, -184, 87, 57, -197, 28, -174, -174, -177,
	-197, -177, 28, -159, 29, 73, -164, 223, 65, -161,
	-161, -162, 30, -162, -162, -162, -170, 64, -170, 65,
	65, 55, -133, -145, -144, -200, 142, 138, 146, 147,
	140, 60, 61, 62, 131, 28, 137, 139, 160, 136,
	-200, -128, -129, 133, 22, 131, 28, 160, -199, 56,
	166, 219, 166, 133, -145, -119, -119, -41, 78, -73,
	-73, -207, -207, -43, -134, -96, -101, -149, 113, 194,
	154, 192, 188, 208, 199, 221, 190, 222, -146, -149,
	-73, -73, -73, -73, 268, -96, 86, -47, 84, -134,
	-73, -73, 41, -62, -94, 13, -47, 104, -106, 55,
	-107, -83, -85, -84, -206, -102, -133, -105, -133, -67,
	58, 87, -54, -53, 55, 56, -55, 55, -53, 45,
	45, -207, 131, 131, 131, -105, -96, -67, 242, 246,
	247, -183, -184, -187, -186, -133, -190, -177, -177, 57,
	-160, 55, -73, 59, -162, -162, -197, 113, 59, 58,
	59, 58, 59, 58, -62, -144, -144, -62, -144, -133,
	-196, 271, -198, -197, -133, -133, -133, -62, -123, -123,
	-73, -207, -100, -207, -157, -157, -157, -166, -157, 182,
	-157, 182, -207, -207, 19, 19, 19, 19, -206, -40,
	264, -47, 58, 58, -95, 14, 16, 27, -106, 58,
	-207, -207, 58, 119, -207, 58, -96, -110, -47, -47,
	57, -47, -206, -206, -206, -207, -100, 59, 58, -157,
	-103, -133, -168, 219, 9, -161, 64, -161, 65, 65,
	-145, 26, -195, -194, -134, 57, 56, -101, -161, -197,
	-73, -73, -73, -73, -73, -100, 64, -73, -73, -47,
	-82, 28, -85, 36, -3, -133, -133, -133, -100, -103,
	-103, -207, -103, -103, -142, -189, -188, 56, 141, 71,
	-186, 59, 58, -169, 137, 28, 136, -76, -162, -162,
	59, 59, -206, 58, 87, -103, -62, -207, -207, -207,
	-207, -39, 97, 271, -207, -207, -207, 9, -83, 119,
	59, -207, -207, -207, -66, -188, -197, -178, 87, 64,
	149, -133, -158, 71, 28, 28, -191, -192, 160, -194,
	-184, 59, -207, 269, 52, 272, -107, -133, 65, -62,
	64, -207, 58, -133, -199, 41, 270, 273, 57, -192,
	36, -196, 41, -103, 162, 271, 59, 163, 272, -202,
	-203, 55, -206, 273, -203, 55, 10, 9, -73, 159,
	-201, 150, 145, 148, 30, -201, -207, -207, 144, 29,
	73,
}
var yyDef = [...]int{

	26, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 607, 0, 349, 349, 349,
	349, 349, 349, 0, 677, 660, 0, 0, 0, 0,
	-2, 321, 322, 0, 324, 325, 326, 982, 982, 0,
	0, 982, 0, 980, 43, 44, 332, 333, 334, 1,
	3, 0, 353, 615, 0, 0, -2, 351, 0, 660,
	660, 0, 0, 72, 73, 0, 0, 0, 969, 0,
	658, 658, 658, 678, 679, 682, 683, 27, 28, 29,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 0, 0, 0, 0, 0, 661, 0, 656, 0,
	656, 656, 656, 0, 272, 431, 686, 687, 969, 0,
	0, 0, 312, 0, 983, 284, 0, 286, 983, 0,
	983, 0, 293, 0, 0, 299, 983, 304, 318, 319,
	306, 320, 323, 339, 0, 0, 331, 344, 345, 982,
	982, 348, 30, 481, 441, 0, 446, 448, 0, 483,
	484, 485, 486, 487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 514, 515, 516, 592, 593,
	594, 595, 596, 597, 598, 599, 450, 451, 589, 0,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 0, 550, 550, 550, 550, 550, 550, 550, 550,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 607,
	39, 0, 349, 354, 355, 619, 0, 0, 607, 981,
	0, 0, -2, -2, 365, 371, 372, 373, 374, 350,
	0, 377, 381, 0, 0, 0, 0, 0, 0, 52,
	54, 431, 58, 0, 958, 641, -2, -2, 0, 0,
	684, 685, -2, 821, -2, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 0, 0, 91, 0, 89, 0, 983,
	0, 0, 0, 0, 0, 0, 983, 983, 983, 0,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 273, 983, 312, 276, 0, 0, 983,
	983, 983, 0, 983, 983, 283, 984, 985, 0, 193,
	194, 195, 287, 983, 983, 289, 0, 309, 307, 308,
	301, 302, 0, 315, 296, 297, 300, 342, 340, 341,
	343, 335, 336, 337, 338, 0, 346, 347, 0, 0,
	0, 0, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 468, 469, 470, 471, 472, 473, 474, 447,
	0, 461, 0, 0, 0, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 0, 362, 0, 0, 0, 607,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 581,
	0, 534, 542, 0, 535, 543, 536, 544, 537, 0,
	538, 545, 539, 546, 540, 541, 547, 0, 0, 0,
	362, 362, 0, 0, 615, 0, 364, 31, 0, 0,
	616, 608, 609, 612, 615, 0, 386, 375, 366, 369,
	370, 352, 0, 378, 382, 0, 384, 385, 0, 56,
	0, 430, 0, 388, 390, 391, 392, 412, 0, 414,
	-2, 0, 0, 0, 50, 51, 0, 0, 0, 0,
	958, 642, 60, 61, 0, 0, 0, 169, 651, 652,
	653, 649, 218, 0, 0, 157, 153, 97, 98, 99,
	146, 101, 146, 146, 146, 146, 166, 166, 166, 166,
	129, 130, 131, 132, 133, 0, 0, 116, 146, 146,
	146, 120, 136, 137, 138, 139, 140, 141, 142, 143,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 148,
	148, 148, 150, 150, 680, 75, 0, 983, 0, 983,
	87, 0, 232, 234, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 657, 0, 983, 269, 270, 432,
	688, 689, 274, 275, 313, 314, 277, 278, 279, 280,
	281, 282, 0, 196, 197, 288, 292, 0, 312, 0,
	0, 294, 295, 0, 0, 327, 328, 329, 330, 482,
	442, 443, 445, 462, 0, 464, 466, 452, 453, 477,
	478, 479, 0, 0, 0, 0, 475, 457, 0, 488,
	489, 490, 491, 492, 493, 494, 495, 496, 497, 498,
	499, 502, 565, 566, 0, 500, 501, 512, 0, 0,
	0, 363, 590, 0, -2, 0, 480, 636, 615, 0,
	0, 0, 0, 485, 592, 0, 485, 592, 0, 0,
	0, 360, 361, 587, 584, 0, 0, 589, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 40,
	620, 0, 0, 0, 0, 611, 613, 614, 619, 0,
	600, 0, 0, 439, 0, 0, 367, 37, 383, 379,
	0, 0, 0, 429, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 422, 0, 0, 0, 0, 413, 0,
	0, 0, 434, 902, 415, 0, 417, 418, 439, 0,
	439, 53, 439, 55, 0, 433, 643, 59, 0, 0,
	64, 65, 644, 645, 646, 647, 0, 88, 219, 221,
	224, 225, 226, 92, 93, 94, 0, 0, 206, 0,
	0, 200, 200, 0, 198, 199, 90, 160, 158, 0,
	155, 154, 100, 0, 166, 166, 123, 124, 169, 0,
	169, 169, 169, 0, 0, 117, 118, 119, 111, 0,
	112, 113, 114, 0, 115, 0, 0, 983, 77, 659,
	78, 982, 0, 0, 672, 233, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 0, 79, 237, 239,
	238, 242, 0, 0, 0, 264, 983, 268, 309, 309,
	291, 310, 311, 316, 298, 463, 465, 467, 454, 475,
	458, 0, 455, 0, 0, 449, 517, 0, 0, 362,
	0, 607, 619, 521, 522, 0, 0, 0, 0, 0,
	558, 0, 0, 559, 0, 607, 0, 585, 0, 0,
	533, 0, 552, 0, 0, 553, 554, 555, 556, 557,
	33, 0, 617, 618, 610, 32, 0, 654, 655, 601,
	602, 603, 0, 376, 387, 368, 0, 630, 0, 0,
	623, 0, 0, 439, 638, 0, 389, 408, 410, 0,
	405, 420, 421, 423, 0, 425, 0, 427, 428, 393,
	394, 395, 0, 396, 0, 0, 0, 0, 416, 607,
	439, 48, 49, 0, 62, 63, 0, 0, 69, 170,
	171, 0, 222, 0, 0, 0, 188, 200, 200, 191,
	201, 192, 0, 162, 0, 159, 96, 156, 0, 169,
	169, 125, 0, 126, 127, 128, 0, 144, 0, 0,
	0, 0, 681, 76, 227, 982, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	982, 0, 982, 673, 674, 675, 676, 0, 82, 0,
	0, 0, 0, 0, 267, 312, 312, 456, 0, 476,
	459, 518, 519, 0, 591, 615, 35, 0, 146, 146,
	570, 146, 150, 573, 146, 575, 146, 578, 0, 0,
	0, 0, 0, 0, 0, 582, 532, 588, 0, 590,
	0, 0, 621, 34, 605, 0, 440, 380, 41, 0,
	630, 622, 632, 634, 0, 0, 626, 0, 400, 607,
	0, 0, 402, 409, 0, 0, 403, 0, 404, 424,
	426, -2, 0, 0, 0, 0, 615, 47, 66, 67,
	68, 220, 223, 0, 202, 146, 205, 189, 190, 0,
	164, 0, 161, 147, 121, 122, 167, 168, 166, 0,
	166, 0, 151, 0, 983, 228, 229, 230, 231, 0,
	236, 0, 80, 81, 0, 0, 241, 265, 285, 290,
	460, 520, 619, 523, 567, 166, 571, 572, 574, 576,
	577, 579, 525, 524, 0, 0, 0, 0, 0, 615,
	0, 586, 0, 0, 38, 0, 0, 0, 42, 0,
	635, 0, 0, 0, 57, 0, 615, 639, 640, 406,
	0, 411, 0, 0, 0, 414, 46, 180, 0, 204,
	0, 398, 172, 165, 0, 169, 145, 169, 0, 0,
	74, 0, 83, 84, 0, 0, 0, 36, 568, 569,
	0, 0, 0, 0, 560, 0, 583, 0, 0, 606,
	604, 0, 633, 0, 625, 628, 627, 401, 45, 0,
	0, 436, 0, 0, 434, 179, 181, 0, 186, 0,
	203, 0, 0, 177, 0, 174, 176, 163, 134, 135,
	149, 152, 0, 0, 0, 0, 243, 526, 528, 527,
	529, 0, 0, 0, 531, 548, 549, 0, 624, 0,
	407, 435, 437, 438, 397, 182, 183, 0, 187, 185,
	0, 399, 95, 0, 173, 175, 0, 259, 0, 85,
	86, 79, 530, 0, 0, 0, 631, 629, 184, 0,
	178, 258, 0, 0, 82, 561, 0, 564, 0, 260,
	0, 240, 562, 0, 0, 0, 207, 0, 0, 208,
	209, 0, 0, 563, 210, 0, 0, 0, 0, 0,
	211, 213, 214, 0, 0, 212, 261, 262, 215, 216,
	217,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	57, 59, 104, 102, 58, 103, 119, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 360,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:436
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:444
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:468
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:475
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:487
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.str = InsertStr
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
			yyVAL.str = ReplaceStr
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:519
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:527
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:541
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:551
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:556
		{
			yyVAL.partitions = nil
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:560
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:586
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:592
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:600
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.str = RepeatableRead
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyVAL.str = ReadCommitted
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:614
		{
			yyVAL.str = ReadUncommitted
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.str = Serializable
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.str = SessionStr
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.str = GlobalStr
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:634
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 74:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:645
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:654
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:658
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:662
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:667
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:682
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:698
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:704
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:710
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:717
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:724
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:728
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:743
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:747
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:753
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:985
		{
			yyVAL.sqlVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:989
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:998
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1016
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1037
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1069
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1083
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1091
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1113
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.sqlVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1140
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 207:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1278
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 208:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1282
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 209:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1286
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1290
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1302
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1316
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1324
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1329
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1337
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.str = yyDollar[1].str
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1353
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1367
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1385
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1390
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1497
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1503
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1513
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1517
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1533
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1541
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1549
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1554
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1635
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1648
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1656
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1661
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1683
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = "extended "
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1740
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1744
		{
			yyVAL.str = "full "
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1754
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1768
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1774
		{
			yyVAL.showFilter = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1782
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1788
		{
			yyVAL.showFilter = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = SessionStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = GlobalStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.statement = &Begin{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &Commit{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Rollback{}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = JSONStr
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = TreeStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = VitessStr
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = TraditionalStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = AnalyzeStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.statement = &OtherRead{}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1946
		{
			setAllowComments(yylex, true)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1956
		{
			yyVAL.bytes2 = nil
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = UnionStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.str = UnionAllStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.str = UnionDistinctStr
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = SQLCacheStr
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1992
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = DistinctStr
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2005
		{
			yyVAL.selectExprs = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.strs = nil
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2018
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2026
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2030
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = SQLCacheStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = DistinctStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = DistinctStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = StraightJoinHint
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2084
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2089
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2097
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2113
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2157
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2194
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2198
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2210
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2214
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2220
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2225
		{
			yyVAL.empty = struct{}{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2227
		{
			yyVAL.empty = struct{}{}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2230
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2245
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = JoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2259
		{
			yyVAL.str = JoinStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = StraightJoinStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.str = LeftJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2275
		{
			yyVAL.str = LeftJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.str = RightJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = RightJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2289
		{
			yyVAL.str = NaturalJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2293
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2328
		{
			yyVAL.indexHints = nil
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2332
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2336
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2340
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2344
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2389
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.str = IsNullStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.str = IsNotNullStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.str = IsTrueStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.str = IsNotTrueStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.str = IsFalseStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.str = IsNotFalseStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = EqualStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = LessThanStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2485
		{
			yyVAL.str = GreaterThanStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = LessEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.str = GreaterEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.str = NotEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2530
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2536
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2540
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 525:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 530:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 531:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = ""
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = BooleanModeStr
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2910
		{
			yyVAL.str = QueryExpansionStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.expr = nil
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2990
		{
			yyVAL.str = string("")
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2994
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3010
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = nil
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3029
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3033
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &NullVal{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3073
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3091
		{
			yyVAL.exprs = nil
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3095
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = nil
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3109
		{
			yyVAL.orderBy = nil
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3113
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3123
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3129
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = AscScr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = AscScr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = DescScr
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3147
		{
			yyVAL.limit = nil
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3155
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3159
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3164
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = ForUpdateStr
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3172
		{
			yyVAL.str = ShareModeStr
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3193
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3197
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3211
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3215
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3220
		{
			yyVAL.updateExprs = nil
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3224
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3234
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3250
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3276
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3286
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3291
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3297
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3301
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3305
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3309
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3316
		{
			yyVAL.bytes = []byte("charset")
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = &Default{}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3340
		{
			yyVAL.byt = 0
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3342
		{
			yyVAL.byt = 1
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3350
		{
			yyVAL.str = ""
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.str = IgnoreStr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3374
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3377
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3381
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3390
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3397
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3407
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3747
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3756
		{
			decNesting(yylex)
		}
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3761
		{
			skipToEnd(yylex)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3766
		{
			skipToEnd(yylex)
		}
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			skipToEnd(yylex)
		}
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3774
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

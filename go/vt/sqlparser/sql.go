//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const CONSTRAINT = 57455
const SPATIAL = 57456
const FULLTEXT = 57457
const FOREIGN = 57458
const KEY_BLOCK_SIZE = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const BEGIN = 57479
const START = 57480
const TRANSACTION = 57481
const COMMIT = 57482
const ROLLBACK = 57483
const BIT = 57484
const TINYINT = 57485
const SMALLINT = 57486
const MEDIUMINT = 57487
const INT = 57488
const INTEGER = 57489
const BIGINT = 57490
const INTNUM = 57491
const REAL = 57492
const DOUBLE = 57493
const FLOAT_TYPE = 57494
const DECIMAL = 57495
const NUMERIC = 57496
const TIME = 57497
const TIMESTAMP = 57498
const DATETIME = 57499
const YEAR = 57500
const CHAR = 57501
const VARCHAR = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const COLLATION = 57531
const DATABASES = 57532
const TABLES = 57533
const VITESS_KEYSPACES = 57534
const VITESS_SHARDS = 57535
const VITESS_TABLETS = 57536
const VSCHEMA_TABLES = 57537
const FULL = 57538
const PROCESSLIST = 57539
const COLUMNS = 57540
const NAMES = 57541
const CHARSET = 57542
const GLOBAL = 57543
const SESSION = 57544
const ISOLATION = 57545
const LEVEL = 57546
const READ = 57547
const WRITE = 57548
const ONLY = 57549
const REPEATABLE = 57550
const COMMITTED = 57551
const UNCOMMITTED = 57552
const SERIALIZABLE = 57553
const CURRENT_TIMESTAMP = 57554
const DATABASE = 57555
const CURRENT_DATE = 57556
const CURRENT_TIME = 57557
const LOCALTIME = 57558
const LOCALTIMESTAMP = 57559
const UTC_DATE = 57560
const UTC_TIME = 57561
const UTC_TIMESTAMP = 57562
const REPLACE = 57563
const CONVERT = 57564
const CAST = 57565
const SUBSTR = 57566
const SUBSTRING = 57567
const GROUP_CONCAT = 57568
const SEPARATOR = 57569
const MATCH = 57570
const AGAINST = 57571
const BOOLEAN = 57572
const LANGUAGE = 57573
const WITH = 57574
const QUERY = 57575
const EXPANSION = 57576
const UNUSED = 57577

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 264,
	153, 264,
	-2, 256,
	-1, 245,
	111, 591,
	-2, 587,
	-1, 246,
	111, 592,
	-2, 588,
	-1, 316,
	81, 753,
	-2, 58,
	-1, 317,
	81, 714,
	-2, 59,
	-1, 322,
	81, 696,
	-2, 553,
	-1, 324,
	81, 735,
	-2, 555,
	-1, 590,
	53, 41,
	55, 41,
	-2, 43,
	-1, 725,
	111, 594,
	-2, 590,
	-1, 932,
	5, 28,
	-2, 398,
	-1, 957,
	5, 27,
	-2, 528,
	-1, 1178,
	5, 28,
	-2, 529,
	-1, 1222,
	5, 27,
	-2, 531,
	-1, 1284,
	5, 28,
	-2, 532,
}

const yyPrivate = 57344

const yyLast = 10781

var yyAct = [...]int{

	277, 49, 243, 1275, 871, 537, 250, 787, 1233, 661,
	1087, 1184, 1115, 805, 1018, 1088, 584, 1084, 865, 582,
	851, 224, 276, 898, 826, 827, 823, 216, 788, 976,
	321, 1061, 924, 750, 760, 690, 757, 960, 1021, 1009,
	536, 3, 600, 55, 776, 965, 727, 837, 469, 475,
	49, 861, 419, 599, 315, 586, 784, 302, 229, 571,
	481, 845, 303, 489, 307, 248, 233, 312, 310, 54,
	1304, 217, 218, 219, 220, 1294, 1302, 1282, 1300, 872,
	1293, 906, 1079, 301, 1172, 423, 59, 1242, 888, 1281,
	223, 1110, 1111, 444, 819, 820, 237, 551, 1121, 1122,
	1123, 601, 887, 602, 1109, 818, 1126, 1124, 222, 221,
	460, 61, 62, 63, 64, 65, 461, 458, 252, 185,
	181, 182, 183, 1000, 844, 984, 308, 1196, 983, 1211,
	892, 985, 852, 1161, 1159, 215, 1301, 432, 1299, 886,
	455, 456, 1276, 1257, 502, 501, 511, 512, 504, 505,
	506, 507, 508, 509, 510, 503, 1042, 446, 513, 448,
	785, 187, 1234, 759, 433, 1240, 806, 808, 426, 178,
	179, 179, 669, 839, 246, 1236, 660, 975, 839, 974,
	973, 421, 306, 429, 445, 447, 193, 180, 883, 880,
	881, 311, 879, 525, 526, 1262, 422, 1181, 450, 450,
	450, 450, 994, 450, 1048, 78, 940, 918, 699, 190,
	493, 450, 190, 439, 824, 696, 513, 890, 893, 506,
	507, 508, 509, 510, 503, 1130, 1039, 513, 503, 184,
	49, 513, 1041, 900, 691, 488, 487, 486, 190, 190,
	78, 807, 1267, 1235, 190, 522, 78, 1081, 524, 465,
	466, 852, 885, 488, 1140, 963, 527, 528, 529, 530,
	531, 532, 533, 534, 1241, 1239, 443, 838, 1125, 603,
	478, 477, 838, 1062, 884, 1131, 535, 777, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 1280, 550, 552,
	552, 552, 552, 552, 552, 552, 552, 560, 561, 562,
	563, 1258, 1029, 486, 1064, 430, 664, 431, 583, 777,
	899, 947, 889, 438, 692, 998, 839, 479, 734, 488,
	440, 435, 436, 437, 467, 891, 1040, 1270, 1038, 483,
	698, 1027, 732, 733, 731, 1287, 1066, 1286, 1070, 1202,
	1065, 1268, 1063, 841, 936, 420, 935, 1068, 842, 717,
	719, 720, 1201, 190, 718, 190, 1067, 177, 751, 937,
	752, 190, 487, 486, 702, 703, 523, 697, 190, 1069,
	1071, 1013, 78, 78, 78, 78, 52, 78, 591, 488,
	425, 597, 1218, 487, 486, 78, 730, 553, 554, 555,
	556, 557, 558, 559, 1012, 1001, 1028, 915, 916, 917,
	488, 1033, 1030, 1023, 1024, 1031, 1026, 1025, 487, 486,
	838, 487, 486, 1199, 78, 836, 834, 1045, 1032, 835,
	300, 1168, 468, 450, 1035, 488, 306, 566, 488, 1010,
	1265, 450, 1118, 487, 486, 21, 590, 1290, 468, 468,
	1083, 1117, 450, 450, 450, 450, 450, 450, 450, 450,
	488, 1226, 1273, 1246, 427, 428, 450, 450, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	678, 995, 513, 986, 874, 190, 266, 265, 268, 269,
	270, 271, 190, 190, 190, 267, 272, 753, 78, 675,
	1165, 468, 1245, 228, 78, 1226, 468, 1127, 726, 704,
	674, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 1226, 1227, 52, 728,
	665, 676, 1193, 1192, 725, 49, 663, 502, 501, 511,
	512, 504, 505, 506, 507, 508, 509, 510, 503, 658,
	539, 513, 1106, 468, 1180, 468, 706, 1137, 1136, 1133,
	1134, 769, 772, 23, 721, 666, 667, 778, 441, 670,
	1133, 1132, 673, 930, 468, 568, 468, 762, 468, 307,
	307, 307, 307, 307, 789, 723, 434, 955, 610, 609,
	764, 956, 420, 594, 583, 1085, 809, 961, 961, 693,
	762, 754, 755, 307, 56, 962, 1051, 78, 781, 962,
	23, 52, 1206, 190, 190, 78, 942, 190, 774, 939,
	190, 713, 813, 1176, 190, 729, 78, 78, 78, 78,
	78, 78, 78, 78, 764, 595, 790, 593, 1221, 793,
	78, 78, 791, 792, 930, 794, 567, 190, 568, 802,
	930, 568, 961, 810, 853, 854, 855, 811, 52, 662,
	941, 815, 816, 938, 812, 78, 593, 1139, 1135, 190,
	23, 568, 987, 831, 450, 78, 450, 817, 930, 596,
	700, 846, 866, 230, 450, 1100, 867, 990, 966, 967,
	847, 848, 849, 850, 862, 857, 856, 306, 306, 306,
	306, 306, 786, 67, 869, 1120, 858, 859, 860, 1085,
	275, 1014, 306, 969, 765, 766, 863, 864, 52, 78,
	773, 306, 504, 505, 506, 507, 508, 509, 510, 503,
	814, 52, 513, 672, 780, 919, 782, 783, 462, 799,
	725, 76, 712, 797, 800, 921, 922, 923, 798, 801,
	190, 577, 578, 190, 190, 190, 190, 190, 972, 971,
	907, 796, 795, 908, 728, 190, 234, 235, 190, 1298,
	1292, 1047, 190, 903, 1297, 1272, 320, 190, 190, 913,
	912, 78, 424, 573, 576, 577, 578, 574, 920, 575,
	579, 1005, 608, 442, 78, 958, 959, 870, 470, 482,
	997, 573, 576, 577, 578, 574, 894, 575, 579, 895,
	471, 966, 967, 705, 480, 1271, 1219, 991, 1174, 1207,
	876, 671, 581, 307, 231, 232, 897, 482, 911, 225,
	946, 1251, 226, 56, 1250, 957, 910, 1209, 962, 463,
	689, 484, 979, 1259, 1197, 190, 695, 58, 78, 970,
	78, 60, 592, 53, 190, 1, 451, 190, 78, 978,
	729, 980, 988, 873, 1017, 882, 1274, 1232, 1114, 833,
	981, 761, 763, 825, 190, 418, 190, 190, 1002, 1003,
	66, 450, 1266, 832, 1238, 914, 1195, 779, 1004, 840,
	1006, 1007, 1008, 992, 993, 999, 843, 1119, 1269, 996,
	615, 613, 614, 612, 617, 616, 450, 1011, 320, 320,
	320, 320, 611, 320, 201, 313, 1020, 804, 580, 604,
	868, 320, 318, 485, 68, 1037, 1036, 878, 459, 1034,
	203, 521, 929, 909, 982, 319, 1092, 701, 1057, 1058,
	474, 306, 1249, 1044, 1208, 945, 548, 775, 944, 251,
	491, 1074, 1075, 716, 1077, 1078, 264, 261, 263, 262,
	707, 954, 495, 249, 1055, 241, 1054, 1090, 305, 49,
	564, 572, 789, 1086, 570, 1060, 569, 968, 789, 1073,
	1072, 725, 964, 304, 1102, 1103, 1104, 1050, 239, 1089,
	1171, 1256, 711, 25, 78, 57, 236, 190, 1080, 1094,
	1096, 19, 18, 17, 20, 16, 15, 14, 29, 1091,
	13, 78, 12, 11, 1095, 10, 9, 8, 7, 6,
	5, 4, 1112, 227, 320, 1113, 22, 1108, 2, 0,
	605, 0, 1107, 0, 0, 0, 0, 0, 0, 1128,
	1129, 0, 0, 0, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 78, 78, 0, 78, 0, 1141,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 1152,
	449, 0, 1143, 0, 0, 1146, 0, 0, 1148, 0,
	78, 1150, 0, 0, 0, 0, 0, 0, 927, 0,
	1170, 0, 928, 0, 190, 1157, 0, 0, 1149, 932,
	933, 934, 0, 78, 0, 0, 0, 0, 943, 0,
	0, 0, 0, 949, 1175, 950, 951, 952, 953, 0,
	0, 0, 0, 0, 1186, 1187, 1188, 1183, 0, 0,
	0, 0, 1189, 320, 1154, 1155, 0, 1156, 0, 1191,
	1158, 320, 1160, 78, 78, 0, 0, 0, 988, 450,
	0, 1138, 320, 320, 320, 320, 320, 320, 320, 320,
	0, 0, 0, 1198, 1204, 1200, 320, 320, 0, 0,
	318, 0, 78, 1145, 78, 78, 1205, 0, 1212, 1213,
	306, 1214, 1215, 1216, 0, 0, 1210, 1090, 1194, 0,
	1223, 708, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 491, 1220, 0, 320, 0, 0, 78, 0, 1089,
	0, 0, 0, 1231, 472, 476, 1237, 0, 1248, 0,
	78, 190, 0, 0, 0, 0, 0, 78, 1247, 0,
	1222, 494, 1090, 78, 49, 1243, 190, 1244, 0, 1029,
	0, 0, 1260, 0, 0, 756, 0, 0, 0, 0,
	0, 1264, 0, 0, 1089, 770, 770, 0, 0, 0,
	0, 770, 0, 0, 1059, 0, 538, 1278, 1027, 452,
	453, 454, 0, 457, 1261, 549, 789, 1283, 770, 0,
	0, 464, 0, 0, 0, 78, 0, 78, 78, 78,
	190, 78, 473, 1288, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 1295, 1296, 0, 0, 320, 0, 0,
	0, 1105, 1303, 0, 0, 0, 1305, 0, 0, 0,
	320, 0, 0, 78, 78, 78, 0, 188, 0, 0,
	214, 0, 0, 1028, 0, 0, 0, 0, 1033, 1030,
	1023, 1024, 1031, 1026, 1025, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 240, 1032, 188, 188, 0, 0,
	0, 1022, 188, 0, 0, 78, 78, 0, 0, 0,
	0, 0, 0, 0, 320, 0, 320, 0, 78, 0,
	0, 0, 0, 0, 320, 0, 0, 0, 0, 1151,
	0, 78, 0, 199, 0, 0, 1153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 1163, 1164,
	320, 78, 1167, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 1177, 1178, 1179, 0, 1182,
	502, 501, 511, 512, 504, 505, 506, 507, 508, 509,
	510, 503, 0, 0, 513, 0, 0, 78, 0, 0,
	0, 0, 694, 318, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 828, 194, 0, 0,
	0, 188, 0, 188, 196, 714, 715, 925, 0, 188,
	0, 202, 198, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 0, 1217, 0, 200, 0,
	0, 204, 679, 680, 681, 682, 683, 684, 685, 686,
	977, 1228, 1229, 1230, 0, 0, 687, 688, 538, 0,
	0, 767, 768, 0, 0, 0, 0, 320, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 1252, 1253, 1254,
	1255, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 197, 0, 206,
	207, 208, 209, 213, 468, 0, 0, 0, 212, 211,
	1015, 320, 0, 320, 0, 0, 0, 0, 0, 0,
	0, 1279, 822, 188, 0, 0, 1284, 0, 0, 0,
	188, 588, 188, 0, 0, 0, 320, 0, 0, 1289,
	502, 501, 511, 512, 504, 505, 506, 507, 508, 509,
	510, 503, 0, 0, 513, 0, 0, 0, 0, 320,
	1169, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	1307, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 502, 501, 511, 512, 504, 505, 506,
	507, 508, 509, 510, 503, 0, 770, 513, 0, 1093,
	977, 0, 770, 511, 512, 504, 505, 506, 507, 508,
	509, 510, 503, 828, 0, 513, 904, 905, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	320, 1116, 0, 502, 501, 511, 512, 504, 505, 506,
	507, 508, 509, 510, 503, 0, 0, 513, 0, 0,
	0, 188, 188, 0, 0, 188, 0, 0, 188, 1019,
	0, 0, 677, 1142, 875, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 1144, 0, 0, 0,
	0, 931, 0, 1147, 0, 188, 0, 0, 0, 320,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 0, 188, 926, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1076, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	0, 1185, 513, 1185, 1185, 1185, 0, 1190, 0, 0,
	0, 0, 0, 320, 0, 0, 0, 0, 240, 0,
	0, 0, 0, 240, 240, 0, 0, 771, 771, 240,
	0, 0, 0, 771, 828, 1166, 828, 0, 0, 320,
	320, 320, 0, 240, 240, 240, 240, 0, 188, 0,
	771, 188, 188, 188, 188, 188, 0, 0, 0, 0,
	0, 0, 0, 803, 0, 0, 188, 0, 0, 0,
	588, 0, 0, 0, 0, 188, 188, 0, 0, 1046,
	0, 1224, 1225, 501, 511, 512, 504, 505, 506, 507,
	508, 509, 510, 503, 1116, 1053, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1185, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	0, 0, 513, 0, 0, 0, 1082, 1263, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 1098, 188, 0, 1099, 0, 0, 1101, 0,
	0, 0, 188, 0, 0, 188, 1043, 0, 0, 828,
	770, 0, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 901, 902, 129, 1291, 0, 0,
	490, 0, 677, 0, 0, 97, 1019, 828, 0, 0,
	0, 111, 0, 113, 240, 0, 146, 122, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	0, 0, 513, 0, 0, 77, 0, 492, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 487,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 240, 0, 0, 0, 0, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 188, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 1203,
	0, 0, 240, 0, 79, 0, 112, 173, 137, 99,
	164, 0, 0, 240, 0, 0, 0, 23, 24, 50,
	26, 27, 0, 677, 0, 0, 0, 0, 0, 1277,
	538, 0, 0, 0, 0, 0, 42, 0, 771, 0,
	0, 28, 47, 48, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 497, 0,
	500, 37, 0, 0, 0, 52, 514, 515, 516, 517,
	518, 519, 520, 0, 498, 499, 496, 502, 501, 511,
	512, 504, 505, 506, 507, 508, 509, 510, 503, 0,
	0, 513, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 30, 31, 33, 32, 35,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 396, 0,
	368, 409, 346, 360, 417, 361, 362, 389, 332, 376,
	129, 358, 0, 349, 327, 355, 328, 347, 370, 97,
	373, 345, 398, 379, 408, 111, 415, 113, 384, 51,
	146, 122, 0, 0, 372, 400, 374, 394, 367, 390,
	337, 383, 410, 359, 387, 411, 0, 0, 0, 77,
	0, 829, 830, 0, 0, 0, 0, 0, 90, 0,
	386, 405, 357, 388, 326, 385, 0, 330, 333, 416,
	403, 352, 353, 989, 0, 0, 0, 0, 0, 0,
	371, 375, 391, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 382, 0, 0, 0, 334, 331,
	0, 0, 369, 0, 0, 0, 336, 0, 351, 392,
	0, 325, 395, 401, 366, 191, 404, 364, 363, 407,
	135, 0, 771, 149, 102, 101, 110, 399, 348, 356,
	93, 354, 141, 131, 161, 381, 132, 140, 114, 153,
	136, 160, 192, 168, 151, 167, 80, 150, 159, 91,
	143, 82, 157, 148, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 154, 155, 94, 175, 85, 166,
	84, 86, 165, 127, 152, 158, 121, 118, 83, 156,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 329, 0, 147, 163, 176, 88, 344,
	402, 169, 170, 171, 172, 0, 0, 89, 126, 87,
	105, 144, 108, 115, 138, 174, 130, 142, 92, 162,
	145, 340, 343, 338, 339, 377, 378, 412, 413, 414,
	393, 335, 0, 341, 342, 0, 397, 380, 79, 0,
	112, 173, 137, 99, 164, 406, 396, 0, 368, 409,
	346, 360, 417, 361, 362, 389, 332, 376, 129, 358,
	0, 349, 327, 355, 328, 347, 370, 97, 373, 345,
	398, 379, 408, 111, 415, 113, 384, 0, 146, 122,
	0, 0, 372, 400, 374, 394, 367, 390, 337, 383,
	410, 359, 387, 411, 0, 0, 0, 77, 0, 829,
	830, 0, 0, 0, 0, 0, 90, 0, 386, 405,
	357, 388, 326, 385, 0, 330, 333, 416, 403, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 371, 375,
	391, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 382, 0, 0, 0, 334, 331, 0, 0,
	369, 0, 0, 0, 336, 0, 351, 392, 0, 325,
	395, 401, 366, 191, 404, 364, 363, 407, 135, 0,
	0, 149, 102, 101, 110, 399, 348, 356, 93, 354,
	141, 131, 161, 381, 132, 140, 114, 153, 136, 160,
	192, 168, 151, 167, 80, 150, 159, 91, 143, 82,
	157, 148, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 154, 155, 94, 175, 85, 166, 84, 86,
	165, 127, 152, 158, 121, 118, 83, 156, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 329, 0, 147, 163, 176, 88, 344, 402, 169,
	170, 171, 172, 0, 0, 89, 126, 87, 105, 144,
	108, 115, 138, 174, 130, 142, 92, 162, 145, 340,
	343, 338, 339, 377, 378, 412, 413, 414, 393, 335,
	0, 341, 342, 0, 397, 380, 79, 0, 112, 173,
	137, 99, 164, 406, 396, 0, 368, 409, 346, 360,
	417, 361, 362, 389, 332, 376, 129, 358, 0, 349,
	327, 355, 328, 347, 370, 97, 373, 345, 398, 379,
	408, 111, 415, 113, 384, 0, 146, 122, 0, 0,
	372, 400, 374, 394, 367, 390, 337, 383, 410, 359,
	387, 411, 52, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 386, 405, 357, 388,
	326, 385, 0, 330, 333, 416, 403, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 371, 375, 391, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	382, 0, 0, 0, 334, 331, 0, 0, 369, 0,
	0, 0, 336, 0, 351, 392, 0, 325, 395, 401,
	366, 191, 404, 364, 363, 407, 135, 0, 0, 149,
	102, 101, 110, 399, 348, 356, 93, 354, 141, 131,
	161, 381, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 329,
	0, 147, 163, 176, 88, 344, 402, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 340, 343, 338,
	339, 377, 378, 412, 413, 414, 393, 335, 0, 341,
	342, 0, 397, 380, 79, 0, 112, 173, 137, 99,
	164, 406, 396, 0, 368, 409, 346, 360, 417, 361,
	362, 389, 332, 376, 129, 358, 0, 349, 327, 355,
	328, 347, 370, 97, 373, 345, 398, 379, 408, 111,
	415, 113, 384, 0, 146, 122, 0, 0, 372, 400,
	374, 394, 367, 390, 337, 383, 410, 359, 387, 411,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 386, 405, 357, 388, 326, 385,
	0, 330, 333, 416, 403, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 371, 375, 391, 365, 0, 0,
	0, 0, 0, 0, 1052, 0, 350, 0, 382, 0,
	0, 0, 334, 331, 0, 0, 369, 0, 0, 0,
	336, 0, 351, 392, 0, 325, 395, 401, 366, 191,
	404, 364, 363, 407, 135, 0, 0, 149, 102, 101,
	110, 399, 348, 356, 93, 354, 141, 131, 161, 381,
	132, 140, 114, 153, 136, 160, 192, 168, 151, 167,
	80, 150, 159, 91, 143, 82, 157, 148, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 154, 155,
	94, 175, 85, 166, 84, 86, 165, 127, 152, 158,
	121, 118, 83, 156, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 329, 0, 147,
	163, 176, 88, 344, 402, 169, 170, 171, 172, 0,
	0, 89, 126, 87, 105, 144, 108, 115, 138, 174,
	130, 142, 92, 162, 145, 340, 343, 338, 339, 377,
	378, 412, 413, 414, 393, 335, 0, 341, 342, 0,
	397, 380, 79, 0, 112, 173, 137, 99, 164, 406,
	396, 0, 368, 409, 346, 360, 417, 361, 362, 389,
	332, 376, 129, 358, 0, 349, 327, 355, 328, 347,
	370, 97, 373, 345, 398, 379, 408, 111, 415, 113,
	384, 0, 146, 122, 0, 0, 372, 400, 374, 394,
	367, 390, 337, 383, 410, 359, 387, 411, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 386, 405, 357, 388, 326, 385, 0, 330,
	333, 416, 403, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 722, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 0, 369, 0, 0, 0, 336, 0,
	351, 392, 0, 325, 395, 401, 366, 191, 404, 364,
	363, 407, 135, 0, 0, 149, 102, 101, 110, 399,
	348, 356, 93, 354, 141, 131, 161, 381, 132, 140,
	114, 153, 136, 160, 192, 168, 151, 167, 80, 150,
	159, 91, 143, 82, 157, 148, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 154, 155, 94, 175,
	85, 166, 84, 86, 165, 127, 152, 158, 121, 118,
	83, 156, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 329, 0, 147, 163, 176,
	88, 344, 402, 169, 170, 171, 172, 0, 0, 89,
	126, 87, 105, 144, 108, 115, 138, 174, 130, 142,
	92, 162, 145, 340, 343, 338, 339, 377, 378, 412,
	413, 414, 393, 335, 0, 341, 342, 0, 397, 380,
	79, 0, 112, 173, 137, 99, 164, 406, 396, 0,
	368, 409, 346, 360, 417, 361, 362, 389, 332, 376,
	129, 358, 0, 349, 327, 355, 328, 347, 370, 97,
	373, 345, 398, 379, 408, 111, 415, 113, 384, 0,
	146, 122, 0, 0, 372, 400, 374, 394, 367, 390,
	337, 383, 410, 359, 387, 411, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	386, 405, 357, 388, 326, 385, 0, 330, 333, 416,
	403, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 391, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 382, 0, 0, 0, 334, 331,
	0, 0, 369, 0, 0, 0, 336, 0, 351, 392,
	0, 325, 395, 401, 366, 191, 404, 364, 363, 407,
	135, 0, 0, 149, 102, 101, 110, 399, 348, 356,
	93, 354, 141, 131, 161, 381, 132, 140, 114, 153,
	136, 160, 192, 168, 151, 167, 80, 150, 159, 91,
	143, 82, 157, 148, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 154, 155, 94, 175, 85, 166,
	84, 86, 165, 127, 152, 158, 121, 118, 83, 156,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 329, 0, 147, 163, 176, 88, 344,
	402, 169, 170, 171, 172, 0, 0, 89, 126, 87,
	105, 144, 108, 115, 138, 174, 130, 142, 92, 162,
	145, 340, 343, 338, 339, 377, 378, 412, 413, 414,
	393, 335, 0, 341, 342, 0, 397, 380, 79, 0,
	112, 173, 137, 99, 164, 406, 396, 0, 368, 409,
	346, 360, 417, 361, 362, 389, 332, 376, 129, 358,
	0, 349, 327, 355, 328, 347, 370, 97, 373, 345,
	398, 379, 408, 111, 415, 113, 384, 0, 146, 122,
	0, 0, 372, 400, 374, 394, 367, 390, 337, 383,
	410, 359, 387, 411, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 386, 405,
	357, 388, 326, 385, 0, 330, 333, 416, 403, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 371, 375,
	391, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 382, 0, 0, 0, 334, 331, 0, 0,
	369, 0, 0, 0, 336, 0, 351, 392, 0, 325,
	395, 401, 366, 191, 404, 364, 363, 407, 135, 0,
	0, 149, 102, 101, 110, 399, 348, 356, 93, 354,
	141, 131, 161, 381, 132, 140, 114, 153, 136, 160,
	192, 168, 151, 167, 80, 150, 159, 91, 143, 82,
	157, 148, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 154, 155, 94, 175, 85, 166, 84, 86,
	165, 127, 152, 158, 121, 118, 83, 156, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 329, 0, 147, 163, 176, 88, 344, 402, 169,
	170, 171, 172, 0, 0, 89, 126, 87, 105, 144,
	108, 115, 138, 174, 130, 142, 92, 162, 145, 340,
	343, 338, 339, 377, 378, 412, 413, 414, 393, 335,
	0, 341, 342, 0, 397, 380, 79, 0, 112, 173,
	137, 99, 164, 406, 396, 0, 368, 409, 346, 360,
	417, 361, 362, 389, 332, 376, 129, 358, 0, 349,
	327, 355, 328, 347, 370, 97, 373, 345, 398, 379,
	408, 111, 415, 113, 384, 0, 146, 122, 0, 0,
	372, 400, 374, 394, 367, 390, 337, 383, 410, 359,
	387, 411, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 386, 405, 357, 388,
	326, 385, 0, 330, 333, 416, 403, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 371, 375, 391, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	382, 0, 0, 0, 334, 331, 0, 0, 369, 0,
	0, 0, 336, 0, 351, 392, 0, 325, 395, 401,
	366, 191, 404, 364, 363, 407, 135, 0, 0, 149,
	102, 101, 110, 399, 348, 356, 93, 354, 141, 131,
	161, 381, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 323, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 329,
	0, 147, 163, 176, 88, 344, 402, 169, 170, 171,
	172, 0, 0, 89, 324, 322, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 340, 343, 338,
	339, 377, 378, 412, 413, 414, 393, 335, 0, 341,
	342, 0, 397, 380, 79, 0, 112, 173, 137, 99,
	164, 406, 396, 0, 368, 409, 346, 360, 417, 361,
	362, 389, 332, 376, 129, 358, 0, 349, 327, 355,
	328, 347, 370, 97, 373, 345, 398, 379, 408, 111,
	415, 113, 384, 0, 146, 122, 0, 0, 372, 400,
	374, 394, 367, 390, 337, 383, 410, 359, 387, 411,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 386, 405, 357, 388, 326, 385,
	0, 330, 333, 416, 403, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 371, 375, 391, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 382, 0,
	0, 0, 334, 331, 0, 0, 369, 0, 0, 0,
	336, 0, 351, 392, 0, 325, 395, 401, 366, 191,
	404, 364, 363, 407, 135, 0, 0, 149, 102, 101,
	110, 399, 348, 356, 93, 354, 141, 131, 161, 381,
	132, 140, 114, 153, 136, 160, 192, 168, 151, 167,
	80, 150, 159, 91, 143, 82, 157, 148, 120, 106,
	107, 81, 0, 139, 96, 100, 95, 128, 154, 155,
	94, 175, 85, 166, 84, 86, 165, 127, 152, 158,
	121, 118, 83, 156, 119, 117, 109, 98, 103, 133,
	116, 134, 104, 124, 123, 125, 0, 329, 0, 147,
	163, 176, 88, 344, 402, 169, 170, 171, 172, 0,
	0, 89, 126, 87, 105, 144, 108, 115, 138, 174,
	130, 142, 92, 162, 145, 340, 343, 338, 339, 377,
	378, 412, 413, 414, 393, 335, 0, 341, 342, 0,
	397, 380, 79, 0, 112, 173, 137, 99, 164, 406,
	396, 0, 368, 409, 346, 360, 417, 361, 362, 389,
	332, 376, 129, 358, 0, 349, 327, 355, 328, 347,
	370, 97, 373, 345, 398, 379, 408, 111, 415, 113,
	384, 0, 146, 122, 0, 0, 372, 400, 374, 394,
	367, 390, 337, 383, 410, 359, 387, 411, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 386, 405, 357, 388, 326, 385, 0, 330,
	333, 416, 403, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 0, 369, 0, 0, 0, 336, 0,
	351, 392, 0, 325, 395, 401, 366, 191, 404, 364,
	363, 407, 135, 0, 0, 149, 102, 101, 110, 399,
	348, 356, 93, 354, 141, 131, 161, 381, 132, 140,
	114, 153, 136, 160, 192, 168, 151, 167, 80, 150,
	598, 91, 143, 82, 157, 148, 120, 106, 107, 81,
	0, 139, 96, 100, 95, 128, 154, 155, 94, 175,
	85, 166, 84, 323, 165, 127, 152, 158, 121, 118,
	83, 156, 119, 117, 109, 98, 103, 133, 116, 134,
	104, 124, 123, 125, 0, 329, 0, 147, 163, 176,
	88, 344, 402, 169, 170, 171, 172, 0, 0, 89,
	324, 322, 105, 144, 108, 115, 138, 174, 130, 142,
	92, 162, 145, 340, 343, 338, 339, 377, 378, 412,
	413, 414, 393, 335, 0, 341, 342, 0, 397, 380,
	79, 0, 112, 173, 137, 99, 164, 406, 396, 0,
	368, 409, 346, 360, 417, 361, 362, 389, 332, 376,
	129, 358, 0, 349, 327, 355, 328, 347, 370, 97,
	373, 345, 398, 379, 408, 111, 415, 113, 384, 0,
	146, 122, 0, 0, 372, 400, 374, 394, 367, 390,
	337, 383, 410, 359, 387, 411, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	386, 405, 357, 388, 326, 385, 0, 330, 333, 416,
	403, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 391, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 382, 0, 0, 0, 334, 331,
	0, 0, 369, 0, 0, 0, 336, 0, 351, 392,
	0, 325, 395, 401, 366, 191, 404, 364, 363, 407,
	135, 0, 0, 149, 102, 101, 110, 399, 348, 356,
	93, 354, 141, 131, 161, 381, 132, 140, 114, 153,
	136, 160, 192, 168, 151, 167, 80, 150, 314, 91,
	143, 82, 157, 148, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 154, 155, 94, 175, 85, 166,
	84, 323, 165, 127, 152, 158, 121, 118, 83, 156,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 329, 0, 147, 163, 176, 88, 344,
	402, 169, 170, 171, 172, 0, 0, 89, 324, 322,
	317, 316, 108, 115, 138, 174, 130, 142, 92, 162,
	145, 340, 343, 338, 339, 377, 378, 412, 413, 414,
	393, 335, 0, 341, 342, 0, 397, 380, 79, 0,
	112, 173, 137, 99, 164, 129, 0, 0, 758, 0,
	247, 0, 0, 0, 97, 0, 244, 0, 0, 0,
	111, 287, 113, 0, 0, 146, 122, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 245, 266, 265, 268, 269, 270,
	271, 0, 0, 90, 267, 272, 273, 274, 0, 0,
	242, 259, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 238, 0, 0, 0, 298,
	0, 258, 0, 0, 253, 254, 255, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 296, 0, 135, 0, 0, 149, 102,
	101, 110, 0, 0, 0, 93, 0, 141, 131, 161,
	0, 132, 140, 114, 153, 136, 160, 192, 168, 151,
	167, 80, 150, 159, 91, 143, 82, 157, 148, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 154,
	155, 94, 175, 85, 166, 84, 86, 165, 127, 152,
	158, 121, 118, 83, 156, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	147, 163, 176, 88, 0, 0, 169, 170, 171, 172,
	0, 0, 89, 126, 87, 105, 144, 108, 115, 138,
	174, 130, 142, 92, 162, 145, 288, 297, 294, 295,
	292, 293, 291, 290, 289, 299, 280, 281, 282, 283,
	285, 0, 284, 79, 0, 112, 173, 137, 99, 164,
	129, 0, 0, 0, 0, 247, 0, 0, 0, 97,
	0, 244, 0, 0, 0, 111, 287, 113, 0, 0,
	146, 122, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 468, 245,
	266, 265, 268, 269, 270, 271, 0, 0, 90, 267,
	272, 273, 274, 0, 0, 242, 259, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	0, 0, 0, 0, 298, 0, 258, 0, 0, 253,
	254, 255, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 296, 0,
	135, 0, 0, 149, 102, 101, 110, 0, 0, 0,
	93, 0, 141, 131, 161, 0, 132, 140, 114, 153,
	136, 160, 192, 168, 151, 167, 80, 150, 159, 91,
	143, 82, 157, 148, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 154, 155, 94, 175, 85, 166,
	84, 86, 165, 127, 152, 158, 121, 118, 83, 156,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 147, 163, 176, 88, 0,
	0, 169, 170, 171, 172, 0, 0, 89, 126, 87,
	105, 144, 108, 115, 138, 174, 130, 142, 92, 162,
	145, 288, 297, 294, 295, 292, 293, 291, 290, 289,
	299, 280, 281, 282, 283, 285, 0, 284, 79, 0,
	112, 173, 137, 99, 164, 129, 0, 0, 0, 0,
	247, 0, 0, 0, 97, 0, 244, 0, 0, 0,
	111, 287, 113, 0, 0, 146, 122, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 245, 266, 265, 268, 269, 270,
	271, 0, 0, 90, 267, 272, 273, 274, 0, 0,
	242, 259, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 238, 0, 0, 0, 298,
	0, 258, 0, 0, 253, 254, 255, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 296, 0, 135, 0, 0, 149, 102,
	101, 110, 0, 0, 0, 93, 0, 141, 131, 161,
	0, 132, 140, 114, 153, 136, 160, 192, 168, 151,
	167, 80, 150, 159, 91, 143, 82, 157, 148, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 154,
	155, 94, 175, 85, 166, 84, 86, 165, 127, 152,
	158, 121, 118, 83, 156, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	147, 163, 176, 88, 0, 0, 169, 170, 171, 172,
	0, 0, 89, 126, 87, 105, 144, 108, 115, 138,
	174, 130, 142, 92, 162, 145, 288, 297, 294, 295,
	292, 293, 291, 290, 289, 299, 280, 281, 282, 283,
	285, 0, 284, 79, 0, 112, 173, 137, 99, 164,
	129, 0, 0, 0, 0, 247, 0, 0, 0, 97,
	0, 244, 0, 0, 0, 111, 287, 113, 0, 0,
	146, 122, 0, 0, 0, 0, 278, 279, 0, 0,
	0, 0, 0, 0, 821, 0, 52, 0, 0, 245,
	266, 265, 268, 269, 270, 271, 0, 0, 90, 267,
	272, 273, 274, 0, 0, 242, 259, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	0, 0, 0, 0, 298, 0, 258, 0, 0, 253,
	254, 255, 260, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 296, 0,
	135, 0, 0, 149, 102, 101, 110, 0, 0, 0,
	93, 0, 141, 131, 161, 0, 132, 140, 114, 153,
	136, 160, 192, 168, 151, 167, 80, 150, 159, 91,
	143, 82, 157, 148, 120, 106, 107, 81, 0, 139,
	96, 100, 95, 128, 154, 155, 94, 175, 85, 166,
	84, 86, 165, 127, 152, 158, 121, 118, 83, 156,
	119, 117, 109, 98, 103, 133, 116, 134, 104, 124,
	123, 125, 0, 0, 0, 147, 163, 176, 88, 0,
	0, 169, 170, 171, 172, 0, 0, 89, 126, 87,
	105, 144, 108, 115, 138, 174, 130, 142, 92, 162,
	145, 288, 297, 294, 295, 292, 293, 291, 290, 289,
	299, 280, 281, 282, 283, 285, 23, 284, 79, 0,
	112, 173, 137, 99, 164, 0, 0, 0, 129, 0,
	0, 0, 0, 247, 0, 0, 0, 97, 0, 244,
	0, 0, 0, 111, 287, 113, 0, 0, 146, 122,
	0, 0, 0, 0, 278, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 245, 266, 265,
	268, 269, 270, 271, 0, 0, 90, 267, 272, 273,
	274, 0, 0, 242, 259, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 0, 0,
	0, 0, 298, 0, 258, 0, 0, 253, 254, 255,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 296, 0, 135, 0,
	0, 149, 102, 101, 110, 0, 0, 0, 93, 0,
	141, 131, 161, 0, 132, 140, 114, 153, 136, 160,
	192, 168, 151, 167, 80, 150, 159, 91, 143, 82,
	157, 148, 120, 106, 107, 81, 0, 139, 96, 100,
	95, 128, 154, 155, 94, 175, 85, 166, 84, 86,
	165, 127, 152, 158, 121, 118, 83, 156, 119, 117,
	109, 98, 103, 133, 116, 134, 104, 124, 123, 125,
	0, 0, 0, 147, 163, 176, 88, 0, 0, 169,
	170, 171, 172, 0, 0, 89, 126, 87, 105, 144,
	108, 115, 138, 174, 130, 142, 92, 162, 145, 288,
	297, 294, 295, 292, 293, 291, 290, 289, 299, 280,
	281, 282, 283, 285, 0, 284, 79, 0, 112, 173,
	137, 99, 164, 129, 0, 0, 0, 0, 247, 0,
	0, 0, 97, 0, 244, 0, 0, 0, 111, 287,
	113, 0, 0, 146, 122, 0, 0, 0, 0, 278,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 245, 266, 265, 268, 269, 270, 271, 0,
	0, 90, 267, 272, 273, 274, 0, 0, 242, 259,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 0, 0, 0, 0, 298, 0, 258,
	0, 0, 253, 254, 255, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 296, 0, 135, 0, 0, 149, 102, 101, 110,
	0, 0, 0, 93, 0, 141, 131, 161, 0, 132,
	140, 114, 153, 136, 160, 192, 168, 151, 167, 80,
	150, 159, 91, 143, 82, 157, 148, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 154, 155, 94,
	175, 85, 166, 84, 86, 165, 127, 152, 158, 121,
	118, 83, 156, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 147, 163,
	176, 88, 0, 0, 169, 170, 171, 172, 0, 0,
	89, 126, 87, 105, 144, 108, 115, 138, 174, 130,
	142, 92, 162, 145, 288, 297, 294, 295, 292, 293,
	291, 290, 289, 299, 280, 281, 282, 283, 285, 129,
	284, 79, 0, 112, 173, 137, 99, 164, 97, 0,
	0, 0, 0, 0, 111, 287, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 278, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 245, 266,
	265, 268, 269, 270, 271, 0, 0, 90, 267, 272,
	273, 274, 0, 0, 0, 259, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 0,
	0, 0, 0, 298, 0, 258, 0, 0, 253, 254,
	255, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 296, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 1306, 132, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	288, 297, 294, 295, 292, 293, 291, 290, 289, 299,
	280, 281, 282, 283, 285, 129, 284, 79, 0, 112,
	173, 137, 99, 164, 97, 0, 0, 0, 0, 0,
	111, 287, 113, 0, 0, 146, 122, 0, 0, 0,
	0, 278, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 245, 266, 265, 268, 269, 270,
	271, 0, 0, 90, 267, 272, 273, 274, 0, 0,
	0, 259, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 0, 0, 0, 0, 298,
	0, 258, 0, 0, 253, 254, 255, 260, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 296, 0, 135, 0, 0, 149, 102,
	101, 110, 0, 0, 0, 93, 0, 141, 131, 161,
	0, 132, 140, 114, 153, 136, 160, 192, 168, 151,
	167, 80, 150, 159, 91, 143, 82, 157, 148, 120,
	106, 107, 81, 0, 139, 96, 100, 95, 128, 154,
	155, 94, 175, 85, 166, 84, 86, 165, 127, 152,
	158, 121, 118, 83, 156, 119, 117, 109, 98, 103,
	133, 116, 134, 104, 124, 123, 125, 0, 0, 0,
	147, 163, 176, 88, 0, 0, 169, 170, 171, 172,
	0, 0, 89, 126, 87, 105, 144, 108, 115, 138,
	174, 130, 142, 92, 162, 145, 288, 297, 294, 295,
	292, 293, 291, 290, 289, 299, 280, 281, 282, 283,
	285, 129, 284, 79, 0, 112, 173, 137, 99, 164,
	97, 0, 0, 0, 0, 0, 111, 0, 113, 0,
	0, 146, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 502, 501, 511, 512, 504,
	505, 506, 507, 508, 509, 510, 503, 0, 0, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 135, 0, 0, 149, 102, 101, 110, 0, 0,
	0, 93, 0, 141, 131, 161, 0, 132, 140, 114,
	153, 136, 160, 192, 168, 151, 167, 80, 150, 159,
	91, 143, 82, 157, 148, 120, 106, 107, 81, 632,
	139, 96, 100, 95, 128, 154, 155, 94, 175, 85,
	166, 84, 86, 165, 127, 152, 158, 121, 118, 83,
	156, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 147, 163, 176, 88,
	0, 0, 169, 170, 171, 172, 0, 0, 89, 126,
	87, 105, 144, 108, 115, 138, 174, 130, 142, 92,
	162, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 620, 0, 0, 79,
	97, 112, 173, 137, 99, 164, 111, 0, 113, 0,
	0, 146, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 70, 0, 0, 0, 646, 647,
	648, 649, 650, 651, 652, 0, 653, 654, 655, 656,
	657, 634, 635, 636, 637, 618, 619, 0, 0, 621,
	0, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 638, 639, 640, 641, 642, 643, 644, 645, 0,
	0, 0, 0, 73, 74, 0, 69, 0, 0, 0,
	75, 135, 0, 0, 149, 102, 101, 110, 0, 0,
	0, 93, 0, 141, 131, 161, 0, 132, 140, 114,
	153, 136, 160, 71, 168, 151, 167, 80, 150, 159,
	91, 143, 82, 157, 148, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 154, 155, 94, 175, 85,
	166, 84, 86, 165, 127, 152, 158, 121, 118, 83,
	156, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 147, 163, 176, 88,
	0, 0, 169, 170, 171, 172, 0, 0, 89, 126,
	87, 105, 144, 108, 115, 138, 174, 130, 142, 92,
	162, 145, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 587, 0, 0, 0, 79,
	97, 112, 173, 137, 99, 164, 111, 0, 113, 0,
	0, 146, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 589, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 135, 0, 0, 149, 102, 101, 110, 0, 0,
	0, 93, 0, 141, 131, 161, 0, 132, 140, 114,
	153, 136, 160, 192, 168, 151, 167, 80, 150, 159,
	91, 143, 82, 157, 148, 120, 106, 107, 81, 0,
	139, 96, 100, 95, 128, 154, 155, 94, 175, 85,
	166, 84, 86, 165, 127, 152, 158, 121, 118, 83,
	156, 119, 117, 109, 98, 103, 133, 116, 134, 104,
	124, 123, 125, 0, 0, 0, 147, 163, 176, 88,
	0, 0, 169, 170, 171, 172, 0, 0, 89, 126,
	87, 105, 144, 108, 115, 138, 174, 130, 142, 92,
	162, 145, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 79,
	0, 112, 173, 137, 99, 164, 97, 0, 0, 0,
	0, 0, 111, 0, 113, 0, 0, 146, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 0, 135, 0, 0,
	149, 102, 101, 110, 0, 0, 0, 93, 0, 141,
	131, 161, 0, 132, 140, 114, 153, 136, 160, 192,
	168, 151, 167, 80, 150, 159, 91, 143, 82, 157,
	148, 120, 106, 107, 81, 0, 139, 96, 100, 95,
	128, 154, 155, 94, 175, 85, 166, 84, 86, 165,
	127, 152, 158, 121, 118, 83, 156, 119, 117, 109,
	98, 103, 133, 116, 134, 104, 124, 123, 125, 0,
	0, 0, 147, 163, 176, 88, 0, 0, 169, 170,
	171, 172, 0, 0, 89, 126, 87, 105, 144, 108,
	115, 138, 174, 130, 142, 92, 162, 145, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 79, 0, 112, 173, 137,
	99, 164, 97, 0, 0, 0, 0, 0, 111, 0,
	113, 0, 0, 146, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 135, 0, 0, 149, 102, 101, 110,
	0, 0, 0, 93, 0, 141, 131, 161, 0, 132,
	140, 114, 153, 136, 160, 192, 168, 151, 167, 80,
	150, 159, 91, 143, 82, 157, 148, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 154, 155, 94,
	175, 85, 166, 84, 86, 165, 127, 152, 158, 121,
	118, 83, 156, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 147, 163,
	176, 88, 0, 0, 169, 170, 171, 172, 0, 0,
	89, 126, 87, 105, 144, 108, 115, 138, 174, 130,
	142, 92, 162, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 79, 97, 112, 173, 137, 99, 164, 111, 0,
	113, 0, 0, 146, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 709, 0, 0, 710, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 135, 0, 0, 149, 102, 101, 110,
	0, 0, 0, 93, 0, 141, 131, 161, 0, 132,
	140, 114, 153, 136, 160, 192, 168, 151, 167, 80,
	150, 159, 91, 143, 82, 157, 148, 120, 106, 107,
	81, 0, 139, 96, 100, 95, 128, 154, 155, 94,
	175, 85, 166, 84, 86, 165, 127, 152, 158, 121,
	118, 83, 156, 119, 117, 109, 98, 103, 133, 116,
	134, 104, 124, 123, 125, 0, 0, 0, 147, 163,
	176, 88, 0, 0, 169, 170, 171, 172, 0, 0,
	89, 126, 87, 105, 144, 108, 115, 138, 174, 130,
	142, 92, 162, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 79, 0, 112, 173, 137, 99, 164, 97, 0,
	607, 0, 0, 0, 111, 0, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	606, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 0, 132, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 587, 0, 0, 0, 79, 97, 112,
	173, 137, 99, 164, 111, 0, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	589, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 0, 585, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	173, 137, 99, 164, 111, 0, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 0, 132, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	173, 137, 99, 164, 111, 0, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	589, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 0, 132, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 79, 97, 112,
	173, 137, 99, 164, 111, 0, 113, 0, 0, 146,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	492, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 135,
	0, 0, 149, 102, 101, 110, 0, 0, 0, 93,
	0, 141, 131, 161, 0, 132, 140, 114, 153, 136,
	160, 192, 168, 151, 167, 80, 150, 159, 91, 143,
	82, 157, 148, 120, 106, 107, 81, 0, 139, 96,
	100, 95, 128, 154, 155, 94, 175, 85, 166, 84,
	86, 165, 127, 152, 158, 121, 118, 83, 156, 119,
	117, 109, 98, 103, 133, 116, 134, 104, 124, 123,
	125, 0, 0, 0, 147, 163, 176, 88, 0, 0,
	169, 170, 171, 172, 0, 0, 89, 126, 87, 105,
	144, 108, 115, 138, 174, 130, 142, 92, 162, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 79, 0, 112,
	173, 137, 99, 164, 565, 97, 0, 0, 0, 0,
	0, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 309,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 173, 137, 99,
	164, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 173, 137, 99,
	164, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 173, 137, 99,
	164, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 173, 137, 99,
	164, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 79, 97, 112, 173, 137, 99,
	164, 111, 0, 113, 0, 0, 146, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 0, 135, 0, 0, 149,
	102, 101, 110, 0, 0, 0, 93, 0, 141, 131,
	161, 0, 132, 140, 114, 153, 136, 160, 192, 168,
	151, 167, 80, 150, 159, 91, 143, 82, 157, 148,
	120, 106, 107, 81, 0, 139, 96, 100, 95, 128,
	154, 155, 94, 175, 85, 166, 84, 86, 165, 127,
	152, 158, 121, 118, 83, 156, 119, 117, 109, 98,
	103, 133, 116, 134, 104, 124, 123, 125, 0, 0,
	0, 147, 163, 176, 88, 0, 0, 169, 170, 171,
	172, 0, 0, 89, 126, 87, 105, 144, 108, 115,
	138, 174, 130, 142, 92, 162, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 112, 173, 137, 99,
	164,
}
var yyPact = [...]int{

	2211, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 808, 832, -1000, -1000, -1000, -1000, -1000, -1000, 639,
	7203, 46, 66, -1, 9868, 65, 1350, 10528, -1000, -21,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -99, -100, 654,
	-1000, -1000, -1000, -1000, -1000, 802, 806, 667, 794, 716,
	-1000, 5597, 45, 8761, 9648, 4892, -1000, 525, 59, 10528,
	-153, 10088, 42, 42, 42, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 62, 10528, -1000,
	10528, 38, 519, 38, 38, 38, 10528, -1000, 102, -1000,
	-1000, -1000, -1000, 10528, 501, 753, 36, 2908, 2908, 2908,
	2908, -12, 2908, -98, 676, 817, -1000, -1000, -1000, -1000,
	2908, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 383, 769, 6305, 6305, 808, -1000, 654,
	-1000, -1000, -1000, 768, -1000, -1000, 264, 820, -1000, 1958,
	99, -1000, 6305, 2185, 464, -1000, -1000, 464, -1000, -1000,
	81, -1000, -1000, 6757, 6757, 6757, 6757, 6757, 6757, 6757,
	6757, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 464, -1000, 6070, 464, 464,
	464, 464, 464, 464, 464, 464, 6305, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	9428, 606, 731, -1000, -1000, -1000, 790, 7875, 8541, 10528,
	572, -1000, 614, 4644, -119, -1000, -1000, -1000, 188, 8321,
	-1000, -1000, -1000, 752, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 523, -1000,
	7119, 482, 2908, 53, 596, 469, 233, 463, 10528, 10528,
	2908, 48, 10528, 788, 671, 10528, 443, 432, -1000, 4396,
	-1000, 2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, -1000,
	-1000, -1000, -1000, -1000, -1000, 2908, 2908, -1000, 819, 223,
	-1000, -1000, 10528, 6305, -1000, -1000, -1000, -1000, -1000, -1000,
	827, 124, 312, 97, 615, -1000, 340, 802, 383, 716,
	8095, 689, -1000, -1000, 10528, -1000, 6305, 6305, 281, -1000,
	9201, -1000, -1000, 3404, 147, 6757, 322, 243, 6757, 6757,
	6757, 6757, 6757, 6757, 6757, 6757, 6757, 6757, 6757, 6757,
	6757, 6757, 6757, 301, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 430, -1000, 654, 418, 418, 110, 110, 110,
	110, 110, 110, 110, 6983, 5127, 383, 512, 165, 6070,
	5597, 5597, 6305, 6305, 10308, 10308, 5597, 796, 200, 165,
	10308, -1000, 383, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5597, 5597, 5597, 5597, 16, 10528, -1000, 10308, 8761, 8761,
	8761, 8761, 8761, -1000, 710, 709, -1000, 691, 687, 697,
	10528, -1000, 510, 7875, 116, 464, -1000, 8981, -1000, -1000,
	16, 601, 8761, 10528, -1000, -1000, 4148, 614, -119, 612,
	-1000, -116, -129, 5832, 108, -1000, -1000, -1000, -1000, 2660,
	288, 275, -80, -1000, -1000, -1000, 617, -1000, 617, 617,
	617, 617, -47, -47, -47, -47, -1000, -1000, -1000, -1000,
	-1000, 632, 631, -1000, 617, 617, 617, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 630, 630, 630, 618, 618, 641, -1000,
	10528, -170, 417, 2908, 787, 2908, -1000, 73, -1000, 10528,
	-1000, -1000, 10528, 2908, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10528,
	221, 10528, 10528, -1000, 165, -1000, 725, 6305, 6305, 3900,
	6305, -1000, -1000, -1000, 769, -1000, 796, 807, -1000, 736,
	735, 5597, -1000, -1000, 147, 231, -1000, -1000, 329, -1000,
	-1000, -1000, -1000, 96, 464, -1000, 1906, -1000, -1000, -1000,
	-1000, 322, 6757, 6757, 6757, 1328, 1906, 1696, 1569, 1790,
	110, 121, 121, 125, 125, 125, 125, 125, 616, 616,
	-1000, -1000, -1000, 383, -1000, -1000, -1000, 383, 5597, 613,
	-1000, -1000, 6305, -1000, 383, 508, 508, 291, 337, 598,
	-1000, 95, 595, 508, 5597, 232, -1000, 6305, 383, -1000,
	508, 383, 508, 508, 547, 464, -1000, 587, -1000, 174,
	731, 626, 651, 749, -1000, -1000, -1000, -1000, 707, -1000,
	706, -1000, -1000, -1000, -1000, -1000, 58, 57, 55, 10088,
	-1000, 816, 8761, 583, -1000, -1000, 612, -119, -97, -1000,
	-1000, -1000, 165, -1000, 416, 607, 2412, -1000, -1000, -1000,
	-1000, -1000, -1000, 623, 779, 150, 145, 414, -1000, -1000,
	761, -1000, 247, -82, -1000, -1000, 335, -47, -47, -1000,
	-1000, 108, 751, 108, 108, 108, 370, 370, -1000, -1000,
	-1000, -1000, 334, -1000, -1000, -1000, 311, -1000, 649, 10088,
	2908, -1000, 3652, -1000, -1000, -1000, -1000, -1000, -1000, 1201,
	274, 204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12, -1000, 2908, -1000, 223, -1000, 358,
	6305, -1000, -1000, 722, 165, 165, 93, -1000, -1000, 10528,
	-1000, -1000, -1000, -1000, 585, -1000, -1000, -1000, 3156, 5597,
	-1000, 1328, 1906, 1551, -1000, 6757, 6757, -1000, -1000, 508,
	5597, 165, -1000, -1000, -1000, 166, 301, 166, 6757, 6757,
	3900, 6757, 6757, -164, 579, 167, -1000, 6305, 362, -1000,
	-1000, -1000, -1000, -1000, 647, 10308, 464, -1000, 7649, 10088,
	808, 10308, 6305, 6305, -1000, -1000, 6305, 621, -1000, 6305,
	-1000, -1000, -1000, 464, 464, 464, 487, -1000, 808, 583,
	-1000, -1000, -1000, -118, -135, -1000, -1000, 2660, -1000, 2660,
	10088, -1000, 384, 375, -1000, -1000, 643, 39, -1000, -1000,
	-1000, 441, 108, 108, -1000, 168, -1000, -1000, -1000, 505,
	-1000, 494, 603, 492, 10528, -1000, -1000, 602, -1000, 173,
	-1000, -1000, 10088, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10088, 10528, -1000, -1000, -1000,
	-1000, -1000, 10088, -1000, 221, -1000, 165, -1000, 3652, -1000,
	816, 8761, -1000, -1000, 383, -1000, 6757, 1906, 1906, -1000,
	-1000, 383, 617, 617, -1000, 617, 618, -1000, 617, -30,
	617, -31, 383, 383, 435, 1816, -1000, 366, 1601, 464,
	-160, -1000, 165, 6305, -1000, 781, 533, 558, -1000, -1000,
	5362, 383, 489, 86, 487, 802, -1000, 165, 165, 165,
	10088, 165, 10088, 10088, 10088, 7423, 10088, 802, -1000, -1000,
	-1000, -1000, 2412, -1000, 467, -1000, 617, -1000, -1000, -74,
	825, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -47, 354, -47, 292, -1000, 279, 2908, 3652,
	2660, -1000, 548, -1000, -1000, -1000, -1000, 783, -1000, 814,
	586, -1000, 1906, -1000, -1000, 72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6757, 6757, -1000, 6757, 6757,
	6757, 383, 323, 165, 778, -1000, 464, -1000, -1000, 594,
	10088, 10088, -1000, -1000, 461, -1000, 440, 440, 440, 116,
	-1000, -1000, 109, 10088, -1000, 137, -1000, -142, 108, -1000,
	108, 436, 397, -1000, -1000, -1000, 10088, 464, 810, 805,
	-1000, -1000, 1508, 1508, 1508, 1508, 52, -1000, -1000, 824,
	-1000, 464, -1000, 654, 84, -1000, 10088, -1000, -1000, -1000,
	-1000, -1000, 109, -1000, 373, 161, 282, -1000, 261, 777,
	-1000, 737, -1000, -1000, -1000, -1000, -1000, 396, -2, -1000,
	6305, 6305, -1000, -1000, -1000, -1000, 383, 40, -173, 10308,
	558, 383, 10088, -1000, -1000, -1000, 277, -1000, -1000, -1000,
	276, -1000, -1000, 596, 382, -1000, 10088, 165, 535, -1000,
	721, -168, -176, 532, -1000, -1000, -1000, -1000, -170, -1000,
	-2, 730, -1000, 720, -1000, -1000, -1000, -8, -171, -11,
	-174, 464, -181, 6531, -1000, 1508, 383, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1018, 40, 435, 1016, 1013, 1011, 1010, 1009, 1008,
	1007, 1006, 1005, 1003, 1002, 1000, 998, 997, 996, 995,
	994, 993, 992, 991, 86, 986, 985, 983, 60, 982,
	66, 981, 980, 32, 163, 36, 34, 978, 977, 19,
	57, 62, 973, 45, 972, 967, 68, 966, 59, 964,
	961, 126, 960, 958, 13, 37, 955, 953, 952, 951,
	65, 2, 950, 949, 948, 947, 946, 943, 46, 5,
	10, 22, 15, 939, 118, 6, 937, 44, 936, 935,
	934, 932, 43, 930, 49, 927, 21, 48, 926, 11,
	56, 29, 17, 7, 67, 53, 925, 28, 54, 42,
	924, 923, 357, 921, 920, 35, 918, 23, 137, 380,
	917, 916, 915, 914, 30, 174, 700, 846, 63, 913,
	910, 909, 1282, 81, 55, 16, 908, 27, 1060, 33,
	905, 904, 31, 902, 895, 894, 893, 892, 891, 890,
	61, 889, 888, 887, 20, 26, 886, 885, 51, 18,
	879, 876, 874, 39, 52, 873, 47, 872, 870, 865,
	863, 24, 25, 859, 12, 858, 8, 857, 856, 3,
	855, 14, 854, 4, 853, 9, 38, 845, 843, 0,
	324, 842, 841, 97,
}
var yyR1 = [...]int{

	0, 177, 178, 178, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 181,
	181, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 175, 175, 174,
	173, 173, 172, 172, 171, 16, 158, 159, 159, 159,
	154, 133, 133, 133, 133, 136, 136, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 153, 153, 140,
	140, 148, 148, 149, 149, 149, 146, 146, 147, 147,
	150, 150, 150, 141, 141, 141, 141, 141, 141, 141,
	143, 143, 151, 151, 144, 144, 144, 145, 145, 152,
	152, 152, 152, 152, 142, 142, 155, 155, 167, 167,
	166, 166, 166, 157, 157, 163, 163, 163, 163, 163,
	156, 156, 165, 165, 164, 160, 160, 160, 161, 161,
	161, 162, 162, 162, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 170, 168, 168, 169, 169, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 106, 106, 104, 104, 105, 105,
	105, 107, 107, 107, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 20, 20,
	182, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 119, 119, 119, 118, 118, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 126, 126, 125, 125, 125, 124, 124, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 103, 103, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 183,
	183, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	129, 129, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 97, 94, 94,
	98, 98, 98, 96, 96, 96, 121, 121, 121, 101,
	101, 108, 108, 109, 109, 102, 102, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 111,
	112, 112, 113, 113, 113, 120, 120, 116, 116, 117,
	117, 122, 122, 123, 123, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 179, 180,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 7, 5, 4, 2, 2, 4, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -177, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 142, 118, 135, 50, 154, 155,
	157, 158, 25, 136, 137, 140, 141, 31, 32, -179,
	8, 238, 54, -178, 253, -82, 15, -26, 5, -24,
	-182, -24, -24, -24, -24, -24, -158, 54, -113, 123,
	71, 150, 230, 120, 121, 127, -116, 57, -115, 246,
	154, 165, 159, 186, 178, 176, 179, 217, 206, 215,
	66, 157, 226, 138, 174, 170, 168, 27, 191, 251,
	169, 133, 132, 192, 196, 218, 163, 164, 220, 190,
	134, 33, 248, 35, 146, 221, 194, 189, 185, 188,
	162, 184, 39, 198, 197, 199, 216, 181, 171, 18,
	224, 141, 144, 193, 195, 128, 148, 250, 222, 167,
	145, 140, 225, 158, 219, 228, 38, 203, 161, 131,
	155, 152, 182, 147, 172, 173, 187, 160, 183, 156,
	149, 142, 227, 204, 252, 180, 177, 153, 151, 209,
	210, 211, 212, 249, 223, 175, 205, -102, 123, 125,
	121, 121, 122, 123, 230, 120, 121, -51, -122, 57,
	-115, 123, 150, 121, 107, 179, 114, 207, 122, 33,
	148, -131, 121, -104, 151, 206, 209, 210, 211, 212,
	57, 219, 218, 213, -122, 156, -127, -127, -127, -127,
	-127, 208, 208, -2, -86, 17, 16, -5, -3, -179,
	6, 20, 21, -30, 40, 41, -25, -36, 98, -37,
	-122, -56, 73, -61, 29, 57, -115, 23, -60, -57,
	-75, -73, -74, 107, 108, 109, 96, 97, 104, 74,
	110, -65, -63, -64, -66, 59, 58, 67, 60, 61,
	62, 63, 68, 69, 70, -116, -71, -179, 44, 45,
	239, 240, 241, 242, 245, 243, 76, 34, 229, 237,
	236, 235, 233, 234, 231, 232, 126, 230, 102, 238,
	-102, -39, -40, -41, -42, -53, -74, -179, -51, 11,
	-46, -51, -94, -130, 156, -98, 219, 218, -117, -96,
	-116, -114, 217, 179, 216, 119, 72, 22, 24, 201,
	75, 107, 16, 76, 106, 239, 114, 48, 231, 232,
	229, 241, 242, 230, 207, 29, 10, 25, 136, 21,
	100, 116, 79, 80, 139, 23, 137, 70, 19, 51,
	11, 13, 14, 126, 125, 91, 122, 46, 8, 110,
	26, 88, 42, 28, 44, 89, 17, 233, 234, 31,
	245, 143, 102, 49, 36, 73, 68, 52, 71, 15,
	47, 90, 117, 238, 45, 120, 6, 244, 30, 135,
	43, 121, 208, 78, 124, 69, 5, 127, 32, 9,
	50, 53, 235, 236, 237, 34, 77, 12, -159, -154,
	57, 122, -51, 238, -116, -109, 126, -109, -109, 121,
	-51, -51, -108, 126, 57, -108, -108, -108, -51, 111,
	-51, 57, 30, 230, 57, 148, 121, 149, 123, -128,
	-179, -117, -128, -128, -128, 152, 153, -128, 215, -106,
	208, 214, 52, 12, -128, -127, -127, -180, 56, -87,
	19, 31, -37, -122, -83, -84, -37, -82, -2, -24,
	36, -28, 21, 65, 11, -119, 72, 71, 88, -118,
	22, -116, 59, 111, -37, -58, 91, 73, 89, 90,
	75, 93, 92, 103, 96, 97, 98, 99, 100, 101,
	102, 94, 95, 106, 81, 82, 83, 84, 85, 86,
	87, -103, -179, -74, -179, 112, 113, -61, -61, -61,
	-61, -61, -61, -61, -61, -179, -2, -69, -37, -179,
	-179, -179, -179, -179, -179, -179, -179, -179, -78, -37,
	-179, -183, -179, -183, -183, -183, -183, -183, -183, -183,
	-179, -179, -179, -179, -52, 26, -51, 30, 55, -47,
	-49, -48, -50, 42, 46, 48, 43, 44, 45, 49,
	-126, 22, -39, -179, -125, 144, -124, 22, -122, 59,
	-51, -46, -181, 55, 11, 53, 55, -94, 156, -95,
	-99, 220, 222, 81, -121, -116, 59, 29, 30, 56,
	55, -133, -136, -138, -137, -139, -134, -135, 176, 177,
	107, 180, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 30, 138, 172, 173, 174, 175, 192, 193,
	194, 195, 196, 197, 198, 199, 159, 160, 161, 162,
	163, 164, 165, 167, 168, 169, 170, 171, 57, -128,
	123, -175, 53, 57, 73, 57, -51, -51, -128, 124,
	-51, 23, 52, -51, 57, 57, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, 11,
	-105, 11, 91, -51, -37, 9, 91, 55, 18, 111,
	55, -85, 24, 25, -86, -180, -30, -62, -116, 60,
	63, -29, 43, -51, -37, -37, -67, 68, 73, 69,
	70, -118, 98, -123, -117, -114, -61, -68, -71, -74,
	64, 91, 89, 90, 75, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-129, 57, 59, 57, -60, -60, -116, -35, 21, -34,
	-36, -180, 55, -180, -2, -34, -34, -37, -37, -75,
	-116, -122, -75, -34, -28, -76, -77, 77, -75, -180,
	-34, -35, -34, -34, -90, 144, -51, -93, -97, -75,
	-40, -41, -41, -40, -41, 42, 42, 42, 47, 42,
	47, 42, -48, -122, -180, -54, 50, 125, 51, -179,
	-124, -90, 53, -39, -51, -98, -95, 55, 221, 223,
	224, 52, -37, -145, 106, -160, -161, -162, -117, 59,
	60, -154, -155, -163, 128, 131, 127, -156, 122, 28,
	-150, 68, 73, -146, 204, -140, 54, -140, -140, -140,
	-140, -144, 179, -144, -144, -144, 54, 54, -140, -140,
	-140, -148, 54, -148, -148, -149, 54, -149, -120, 53,
	-51, -173, 249, -174, 57, -128, 23, -128, -110, 119,
	116, 117, -170, 115, 201, 179, 66, 29, 15, 239,
	144, 252, 57, 145, -51, -51, -128, -51, -107, 89,
	12, -122, -122, 38, -37, -37, -123, -84, -87, -101,
	19, 11, 34, 34, -34, 68, 69, 70, 111, -179,
	-68, -61, -61, -61, -33, 139, 72, -180, -180, -34,
	55, -37, -180, -180, -180, 55, 53, 22, 55, 11,
	111, 55, 11, -180, -34, -79, -77, 79, -37, -180,
	-180, -180, -180, -180, -59, 30, 34, -2, -179, -179,
	-55, 55, 12, 81, -44, -43, 52, 53, -45, 52,
	-43, 42, 42, 122, 122, 122, -91, -116, -55, -39,
	-55, -99, -100, 225, 222, 228, 57, 55, -162, 81,
	54, 28, -156, -156, 57, 57, -141, 29, 68, -147,
	205, 60, -144, -144, -145, 30, -145, -145, -145, -153,
	59, -153, 60, 60, 52, -116, -128, -172, -171, -117,
	-127, -176, 150, 129, 130, 133, 132, 57, 122, 28,
	128, 131, 144, 127, -176, 150, -111, -112, 124, 22,
	122, 28, 144, -128, -105, 59, -37, 39, 111, -51,
	-38, 11, 98, -117, -35, -33, 72, -61, -61, -180,
	-36, -132, 107, 176, 138, 174, 170, 190, 181, 203,
	172, 204, -129, -132, -61, -61, -117, -61, -61, 246,
	-82, 80, -37, 78, -92, 52, -93, -70, -72, -71,
	-179, -2, -88, -116, -91, -82, -97, -37, -37, -37,
	54, -37, -179, -179, -179, -180, 55, -82, -55, 222,
	226, 227, -161, -162, -165, -164, -116, 57, 57, -143,
	52, 59, 60, 61, 68, 229, 67, 56, -145, -145,
	57, 107, 56, 55, 56, 55, 56, 55, -51, 55,
	81, -127, -116, -127, -116, -51, -127, -116, -107, -55,
	-39, -180, -61, -180, -140, -140, -140, -149, -140, 164,
	-140, 164, -180, -180, -180, 55, 19, -180, 55, 19,
	-179, -32, 244, -37, 27, -92, 55, -180, -180, -180,
	55, 111, -180, -86, -89, -116, -89, -89, -89, -125,
	-116, -86, 56, 55, -140, -151, 201, 9, -144, 59,
	-144, 60, 60, -128, -171, -162, 54, 26, -80, 13,
	-144, 57, -61, -61, -61, -61, -61, -180, 59, 28,
	-72, 34, -2, -179, -116, -116, 55, 56, -180, -180,
	-180, -54, -167, -166, 53, 134, 66, -164, -152, 128,
	28, 127, 229, -145, -145, 56, 56, -89, -179, -81,
	14, 16, -180, -180, -180, -180, -31, 91, 249, 9,
	-70, -2, 111, -116, -166, 57, -157, 81, 59, -142,
	66, 28, 28, 56, -168, -169, 144, -37, -69, -180,
	247, 49, 250, -93, -180, -116, 60, 59, -175, -180,
	55, -116, 39, 248, 251, -173, -169, 34, 39, 146,
	249, 147, 250, -179, 251, -61, 143, -180, -180,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 512, 0, 280, 280, 280, 280, 280, 280, 0,
	582, 565, 0, 0, 0, 0, -2, 268, 269, 0,
	271, 272, 790, 790, 790, 790, 790, 0, 0, 0,
	33, 34, 788, 1, 3, 520, 0, 0, 284, 287,
	282, 0, 565, 0, 0, 0, 60, 0, 0, 777,
	0, 778, 563, 563, 563, 583, 584, 587, 588, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 0, 0, 566,
	0, 561, 0, 561, 561, 561, 0, 226, 351, 591,
	592, 777, 778, 0, 0, 0, 0, 791, 791, 791,
	791, 0, 791, 0, 245, 246, 249, 250, 251, 252,
	791, 265, 266, 257, 267, 270, 273, 274, 275, 276,
	277, 790, 790, 27, 524, 0, 0, 512, 29, 0,
	280, 285, 286, 290, 288, 289, 281, 0, 298, 302,
	0, 359, 0, 364, 366, -2, -2, 0, 401, 402,
	403, 404, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 430, 431, 432, 497, 498, 499, 500, 501,
	502, 503, 504, 368, 369, 494, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 0, 459, 459,
	459, 459, 459, 459, 459, 459, 0, 0, 0, 0,
	0, 0, 309, 311, 312, 313, 332, 0, 334, 0,
	0, 41, 45, 0, 768, 548, -2, -2, 0, 0,
	589, 590, -2, 695, -2, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 0, 77,
	0, 0, 791, 0, 67, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	227, 791, 791, 791, 791, 791, 791, 791, 791, 236,
	792, 793, 237, 238, 239, 791, 791, 241, 0, 258,
	254, 255, 0, 0, 253, 278, 279, 28, 789, 22,
	0, 0, 521, 0, 513, 514, 517, 520, 27, 287,
	0, 292, 291, 283, 0, 299, 0, 0, 0, 303,
	0, 305, 306, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 387, 388, 389, 390, 391,
	392, 365, 0, 379, 0, 0, 0, 421, 422, 423,
	424, 425, 426, 427, 0, 294, 27, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 486,
	0, 451, 0, 452, 453, 454, 455, 456, 457, 458,
	0, 294, 0, 0, 43, 0, 350, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 342, 0, 0, 0,
	0, 333, 0, 0, 353, 741, 335, 0, 337, 338,
	-2, 0, 0, 0, 39, 40, 0, 46, 768, 48,
	49, 0, 0, 0, 157, 556, 557, 558, 554, 185,
	0, 140, 136, 82, 83, 84, 129, 86, 129, 129,
	129, 129, 154, 154, 154, 154, 112, 113, 114, 115,
	116, 0, 0, 99, 129, 129, 129, 103, 119, 120,
	121, 122, 123, 124, 125, 126, 87, 88, 89, 90,
	91, 92, 93, 131, 131, 131, 133, 133, 585, 62,
	0, 70, 0, 791, 0, 791, 75, 0, 201, 0,
	220, 562, 0, 791, 223, 224, 352, 593, 594, 228,
	229, 230, 231, 232, 233, 234, 235, 240, 244, 0,
	261, 0, 0, 248, 247, 525, 0, 0, 0, 0,
	0, 516, 518, 519, 524, 30, 290, 0, 505, 0,
	0, 0, 293, 25, 360, 361, 363, 380, 0, 382,
	384, 304, 300, 0, 495, -2, 370, 371, 395, 396,
	397, 0, 0, 0, 0, 393, 375, 0, 406, 407,
	408, 409, 410, 411, 412, 413, 414, 415, 416, 417,
	420, 470, 471, 0, 418, 419, 428, 0, 0, 295,
	296, 398, 0, 543, 27, 0, 0, 0, 0, 0,
	494, 0, 0, 0, 0, 492, 489, 0, 0, 460,
	0, 0, 0, 0, 0, 0, 349, 357, 545, 0,
	310, 328, 330, 0, 325, 340, 341, 343, 0, 345,
	0, 347, 348, 314, 315, 316, 0, 0, 0, 0,
	336, 357, 0, 357, 42, 549, 47, 0, 0, 52,
	53, 550, 551, 552, 0, 76, 186, 188, 191, 192,
	193, 78, 79, 0, 0, 0, 0, 0, 180, 181,
	143, 141, 0, 138, 137, 85, 0, 154, 154, 106,
	107, 157, 0, 157, 157, 157, 0, 0, 100, 101,
	102, 94, 0, 95, 96, 97, 0, 98, 0, 0,
	791, 64, 0, 68, 69, 65, 564, 66, 790, 0,
	0, 577, 202, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 0, 219, 791, 222, 258, 243, 0,
	0, 259, 260, 0, 522, 523, 0, 515, 23, 0,
	559, 560, 506, 507, 307, 381, 383, 385, 0, 294,
	372, 393, 376, 0, 373, 0, 0, 367, 433, 0,
	0, 400, -2, 436, 437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 512, 0, 490, 0, 0, 450,
	461, 462, 463, 464, 537, 0, 0, -2, 0, 0,
	512, 0, 0, 0, 322, 329, 0, 0, 323, 0,
	324, 344, 346, 0, 0, 0, 0, 320, 512, 357,
	38, 50, 51, 0, 0, 57, 158, 0, 189, 0,
	0, 175, 0, 0, 178, 179, 150, 0, 142, 81,
	139, 0, 157, 157, 108, 0, 109, 110, 111, 0,
	127, 0, 0, 0, 0, 586, 63, 71, 72, 0,
	194, 790, 0, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 790, 0, 0, 790, 578, 579,
	580, 581, 0, 221, 261, 262, 263, 526, 0, 24,
	357, 0, 301, 496, 0, 374, 0, 394, 377, 434,
	297, 0, 129, 129, 475, 129, 133, 478, 129, 480,
	129, 483, 0, 0, 0, 0, 495, 0, 0, 0,
	487, 449, 493, 0, 31, 0, 537, 527, 539, 541,
	0, 27, 0, 533, 0, 520, 546, 358, 547, 326,
	0, 331, 0, 0, 0, 334, 0, 520, 37, 54,
	55, 56, 187, 190, 0, 182, 129, 176, 177, 152,
	0, 144, 145, 146, 147, 148, 149, 130, 104, 105,
	155, 156, 154, 0, 154, 0, 134, 0, 791, 0,
	0, 195, 0, 196, 198, 199, 200, 0, 242, 508,
	308, 435, 378, 438, 472, 154, 476, 477, 479, 481,
	482, 484, 440, 439, 441, 0, 0, 444, 0, 0,
	0, 0, 0, 491, 0, 32, 0, 542, -2, 0,
	0, 0, 44, 35, 0, 318, 0, 0, 0, 353,
	321, 36, 167, 0, 184, 159, 153, 0, 157, 128,
	157, 0, 0, 61, 73, 74, 0, 0, 510, 0,
	473, 474, 0, 0, 0, 0, 465, 448, 488, 0,
	540, 0, -2, 0, 535, 534, 0, 327, 354, 355,
	356, 317, 166, 168, 0, 173, 0, 183, 164, 0,
	161, 163, 151, 117, 118, 132, 135, 0, 0, 26,
	0, 0, 442, 443, 445, 446, 0, 0, 0, 0,
	530, 27, 0, 319, 169, 170, 0, 174, 172, 80,
	0, 160, 162, 67, 0, 215, 0, 511, 509, 447,
	0, 0, 0, 538, -2, 536, 171, 165, 70, 214,
	0, 0, 466, 0, 469, 197, 216, 0, 467, 0,
	0, 0, 0, 0, 468, 0, 0, 217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 253,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:335
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:353
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:399
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:440
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:539
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:548
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:564
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:584
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:600
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:606
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:612
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:619
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:641
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:860
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:865
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:869
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:874
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:878
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:904
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:908
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:923
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:936
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:940
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:965
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:969
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:983
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:996
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1060
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1207
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1212
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1272
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1280
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1285
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1375
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1380
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = "full "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.showFilter = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = SessionStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = GlobalStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.statement = &Commit{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Rollback{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
			setAllowComments(yylex, true)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.bytes2 = nil
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.str = UnionStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.str = UnionAllStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.str = UnionDistinctStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = SQLCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = DistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = StraightJoinHint
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.selectExprs = nil
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.str = StraightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = NaturalJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1860
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.indexHints = nil
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.str = IsNullStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.str = IsNotNullStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.str = IsTrueStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.str = IsNotTrueStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.str = IsFalseStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.str = IsNotFalseStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.str = EqualStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.str = LessThanStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.str = GreaterThanStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.str = LessEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = GreaterEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = NotEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2225
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 443:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = BooleanModeStr
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.str = QueryExpansionStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.expr = nil
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.str = string("")
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.expr = &NullVal{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.exprs = nil
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.orderBy = nil
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.str = AscScr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.str = AscScr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.str = DescScr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.limit = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.str = ForUpdateStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.str = ShareModeStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2690
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2703
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.updateExprs = nil
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2814
		{
			yyVAL.bytes = []byte("charset")
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.expr = &Default{}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.byt = 0
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.byt = 1
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.str = IgnoreStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3148
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3157
		{
			decNesting(yylex)
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3162
		{
			forceEOF(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3167
		{
			forceEOF(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3171
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3175
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

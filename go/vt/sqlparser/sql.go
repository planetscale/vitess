//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const PRIMARY = 57449
const SHOW = 57450
const DESCRIBE = 57451
const EXPLAIN = 57452
const DATE = 57453
const ESCAPE = 57454
const REPAIR = 57455
const OPTIMIZE = 57456
const TRUNCATE = 57457
const MAXVALUE = 57458
const PARTITION = 57459
const REORGANIZE = 57460
const LESS = 57461
const THAN = 57462
const PROCEDURE = 57463
const TRIGGER = 57464
const VINDEX = 57465
const VINDEXES = 57466
const STATUS = 57467
const VARIABLES = 57468
const BEGIN = 57469
const START = 57470
const TRANSACTION = 57471
const COMMIT = 57472
const ROLLBACK = 57473
const BIT = 57474
const TINYINT = 57475
const SMALLINT = 57476
const MEDIUMINT = 57477
const INT = 57478
const INTEGER = 57479
const BIGINT = 57480
const INTNUM = 57481
const REAL = 57482
const DOUBLE = 57483
const FLOAT_TYPE = 57484
const DECIMAL = 57485
const NUMERIC = 57486
const TIME = 57487
const TIMESTAMP = 57488
const DATETIME = 57489
const YEAR = 57490
const CHAR = 57491
const VARCHAR = 57492
const BOOL = 57493
const CHARACTER = 57494
const VARBINARY = 57495
const NCHAR = 57496
const TEXT = 57497
const TINYTEXT = 57498
const MEDIUMTEXT = 57499
const LONGTEXT = 57500
const BLOB = 57501
const TINYBLOB = 57502
const MEDIUMBLOB = 57503
const LONGBLOB = 57504
const JSON = 57505
const ENUM = 57506
const NULLX = 57507
const AUTO_INCREMENT = 57508
const APPROXNUM = 57509
const SIGNED = 57510
const UNSIGNED = 57511
const ZEROFILL = 57512
const DATABASES = 57513
const TABLES = 57514
const VITESS_KEYSPACES = 57515
const VITESS_SHARDS = 57516
const VITESS_TABLETS = 57517
const VSCHEMA_TABLES = 57518
const NAMES = 57519
const CHARSET = 57520
const GLOBAL = 57521
const SESSION = 57522
const CURRENT_TIMESTAMP = 57523
const DATABASE = 57524
const CURRENT_DATE = 57525
const CURRENT_TIME = 57526
const LOCALTIME = 57527
const LOCALTIMESTAMP = 57528
const UTC_DATE = 57529
const UTC_TIME = 57530
const UTC_TIMESTAMP = 57531
const REPLACE = 57532
const CONVERT = 57533
const CAST = 57534
const GROUP_CONCAT = 57535
const SEPARATOR = 57536
const MATCH = 57537
const AGAINST = 57538
const BOOLEAN = 57539
const LANGUAGE = 57540
const WITH = 57541
const QUERY = 57542
const EXPANSION = 57543
const UNUSED = 57544

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 212,
	109, 511,
	-2, 507,
	-1, 213,
	109, 512,
	-2, 508,
	-1, 280,
	80, 649,
	109, 649,
	-2, 52,
	-1, 281,
	80, 622,
	109, 622,
	-2, 53,
	-1, 282,
	80, 611,
	109, 611,
	-2, 47,
	-1, 284,
	80, 636,
	109, 636,
	-2, 49,
	-1, 646,
	109, 514,
	-2, 510,
	-1, 827,
	5, 28,
	-2, 335,
	-1, 847,
	5, 27,
	-2, 458,
	-1, 1016,
	5, 28,
	-2, 459,
	-1, 1053,
	5, 27,
	-2, 461,
	-1, 1098,
	5, 28,
	-2, 462,
}

const yyPrivate = 57344

const yyLast = 8573

var yyAct = [...]int{

	243, 47, 1089, 486, 944, 210, 720, 966, 217, 775,
	276, 945, 899, 736, 1022, 531, 941, 191, 772, 529,
	735, 671, 242, 759, 185, 53, 485, 3, 850, 864,
	693, 885, 923, 681, 819, 678, 315, 853, 745, 648,
	419, 425, 768, 289, 518, 431, 733, 279, 47, 200,
	533, 215, 52, 701, 439, 319, 196, 1115, 1106, 753,
	1113, 1096, 271, 1111, 498, 779, 1105, 1095, 186, 187,
	188, 189, 285, 936, 190, 1010, 293, 1069, 881, 267,
	752, 265, 266, 1034, 760, 1046, 300, 560, 1005, 57,
	1003, 184, 1112, 204, 411, 412, 1077, 452, 451, 461,
	462, 454, 455, 456, 457, 458, 459, 460, 453, 572,
	1110, 463, 1090, 908, 59, 60, 61, 62, 63, 702,
	721, 723, 310, 206, 301, 296, 151, 591, 152, 1067,
	577, 578, 579, 580, 581, 582, 583, 417, 584, 585,
	586, 587, 588, 573, 574, 575, 576, 558, 559, 152,
	597, 561, 863, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 680, 154, 155, 156, 862, 861, 316,
	316, 316, 316, 291, 316, 316, 297, 164, 905, 153,
	886, 316, 1082, 312, 907, 314, 971, 972, 973, 475,
	476, 747, 722, 1019, 868, 974, 813, 47, 760, 620,
	549, 443, 305, 463, 311, 313, 408, 409, 410, 617,
	413, 414, 472, 438, 989, 474, 980, 416, 548, 875,
	427, 219, 1078, 428, 1068, 1066, 477, 478, 479, 480,
	481, 482, 483, 1094, 453, 436, 938, 463, 694, 594,
	837, 694, 484, 303, 488, 489, 490, 491, 492, 493,
	494, 438, 497, 499, 499, 499, 499, 499, 499, 499,
	499, 507, 508, 509, 510, 309, 981, 1085, 433, 213,
	879, 1038, 530, 747, 906, 655, 904, 437, 436, 1037,
	317, 746, 150, 270, 940, 894, 285, 429, 543, 653,
	654, 652, 749, 316, 438, 623, 624, 750, 893, 316,
	74, 290, 882, 979, 161, 832, 924, 161, 316, 316,
	316, 316, 316, 316, 316, 316, 422, 426, 500, 501,
	502, 503, 504, 505, 506, 672, 975, 673, 926, 590,
	1100, 161, 161, 444, 1049, 596, 1036, 161, 831, 74,
	830, 437, 436, 264, 605, 606, 607, 608, 609, 610,
	611, 612, 602, 437, 436, 50, 437, 436, 438, 892,
	928, 604, 932, 746, 927, 651, 925, 487, 744, 743,
	438, 930, 968, 438, 496, 810, 811, 812, 1102, 418,
	929, 876, 437, 436, 674, 931, 933, 452, 451, 461,
	462, 454, 455, 456, 457, 458, 459, 460, 453, 438,
	589, 463, 461, 462, 454, 455, 456, 457, 458, 459,
	460, 453, 316, 316, 463, 638, 640, 641, 1057, 418,
	639, 161, 307, 161, 302, 820, 290, 161, 1057, 1058,
	1031, 1030, 961, 418, 161, 418, 473, 1071, 74, 74,
	74, 74, 21, 74, 74, 625, 1018, 418, 613, 614,
	74, 647, 986, 985, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 649,
	983, 982, 825, 418, 1070, 47, 74, 619, 976, 627,
	918, 454, 455, 456, 457, 458, 459, 460, 453, 488,
	644, 463, 542, 270, 913, 642, 515, 418, 195, 646,
	452, 451, 461, 462, 454, 455, 456, 457, 458, 459,
	460, 453, 540, 618, 463, 685, 271, 271, 271, 271,
	271, 683, 418, 285, 54, 704, 683, 675, 676, 437,
	436, 530, 851, 724, 161, 551, 550, 825, 1014, 271,
	691, 161, 161, 161, 698, 23, 438, 942, 74, 515,
	542, 285, 514, 541, 988, 539, 984, 685, 727, 545,
	635, 636, 74, 825, 74, 161, 626, 161, 74, 730,
	161, 717, 1052, 161, 515, 161, 515, 74, 74, 74,
	74, 74, 74, 74, 74, 725, 869, 761, 762, 763,
	729, 726, 50, 50, 241, 740, 706, 707, 705, 709,
	825, 708, 316, 23, 23, 646, 851, 774, 621, 197,
	754, 773, 487, 955, 872, 688, 689, 769, 755, 756,
	757, 758, 764, 682, 684, 72, 65, 845, 770, 771,
	846, 854, 855, 765, 766, 767, 776, 696, 798, 456,
	457, 458, 459, 460, 453, 799, 814, 463, 542, 633,
	50, 50, 970, 686, 687, 942, 50, 690, 286, 816,
	817, 818, 895, 802, 294, 857, 803, 719, 650, 600,
	415, 697, 731, 699, 700, 649, 646, 860, 714, 712,
	859, 74, 74, 715, 713, 161, 716, 711, 524, 525,
	710, 821, 815, 201, 202, 1109, 1104, 910, 1108, 808,
	74, 807, 848, 849, 161, 887, 547, 308, 878, 1087,
	74, 452, 451, 461, 462, 454, 455, 456, 457, 458,
	459, 460, 453, 836, 645, 463, 1086, 1050, 847, 520,
	523, 524, 525, 521, 432, 522, 526, 270, 270, 270,
	270, 270, 800, 801, 873, 426, 858, 420, 430, 870,
	1012, 1042, 270, 74, 780, 866, 867, 599, 528, 421,
	270, 198, 199, 318, 318, 318, 318, 74, 318, 318,
	432, 192, 1075, 806, 193, 318, 54, 1074, 316, 883,
	884, 805, 161, 874, 1044, 161, 161, 161, 161, 161,
	851, 434, 1079, 888, 889, 890, 809, 161, 316, 1035,
	161, 441, 616, 56, 161, 58, 901, 826, 161, 161,
	538, 51, 822, 1, 897, 778, 823, 898, 838, 783,
	74, 1088, 965, 827, 828, 829, 919, 920, 833, 742,
	732, 737, 734, 839, 909, 840, 841, 842, 843, 288,
	64, 741, 891, 824, 1065, 1033, 748, 947, 880, 47,
	916, 917, 751, 934, 285, 834, 943, 969, 1084, 922,
	937, 161, 957, 958, 959, 935, 877, 161, 554, 946,
	161, 74, 286, 318, 650, 948, 952, 555, 553, 951,
	557, 556, 552, 172, 277, 964, 527, 318, 544, 592,
	963, 435, 962, 318, 66, 903, 902, 781, 295, 471,
	804, 645, 318, 318, 318, 318, 318, 318, 318, 318,
	278, 949, 622, 424, 271, 977, 978, 232, 231, 234,
	235, 236, 237, 1073, 996, 1043, 233, 238, 991, 835,
	495, 692, 218, 994, 637, 230, 227, 1008, 229, 228,
	628, 993, 520, 523, 524, 525, 521, 1001, 522, 526,
	844, 445, 854, 855, 216, 208, 269, 511, 519, 517,
	1013, 939, 921, 516, 274, 856, 852, 268, 912, 1009,
	1021, 1076, 1024, 1025, 1026, 953, 1027, 870, 954, 632,
	1029, 956, 25, 55, 998, 999, 203, 1000, 316, 19,
	1002, 18, 1004, 17, 74, 20, 16, 15, 14, 29,
	13, 1040, 960, 1041, 12, 74, 318, 318, 11, 10,
	9, 8, 7, 6, 1047, 947, 737, 5, 1054, 4,
	194, 22, 2, 1045, 1039, 629, 1051, 1032, 0, 0,
	272, 0, 0, 0, 1062, 441, 0, 946, 318, 1064,
	1063, 0, 0, 1072, 1053, 0, 74, 74, 0, 74,
	0, 0, 0, 947, 995, 47, 790, 1080, 0, 0,
	900, 997, 0, 0, 1011, 158, 0, 74, 0, 0,
	788, 487, 1006, 1007, 161, 946, 0, 0, 677, 1092,
	0, 1081, 0, 74, 0, 1015, 1016, 1017, 285, 1020,
	1097, 0, 695, 275, 915, 0, 0, 794, 292, 0,
	0, 0, 0, 0, 0, 1107, 787, 0, 0, 286,
	0, 0, 0, 1114, 0, 0, 0, 0, 74, 74,
	1116, 0, 452, 451, 461, 462, 454, 455, 456, 457,
	458, 459, 460, 453, 0, 270, 463, 286, 74, 74,
	0, 74, 74, 0, 318, 318, 0, 1048, 0, 915,
	737, 0, 737, 0, 784, 789, 782, 0, 0, 0,
	0, 0, 1059, 1060, 1061, 161, 0, 0, 0, 0,
	0, 0, 161, 0, 0, 792, 795, 0, 74, 0,
	0, 0, 298, 161, 299, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 306, 318, 0, 1091, 487,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	786, 0, 0, 0, 1093, 318, 0, 0, 0, 1098,
	0, 0, 0, 0, 785, 74, 1101, 74, 74, 74,
	161, 74, 0, 74, 0, 0, 0, 0, 159, 0,
	0, 183, 0, 0, 737, 0, 0, 0, 0, 791,
	0, 0, 0, 0, 1118, 1119, 0, 74, 74, 74,
	793, 0, 0, 207, 0, 159, 159, 287, 0, 900,
	737, 159, 0, 0, 0, 0, 0, 0, 23, 24,
	48, 26, 27, 0, 0, 0, 0, 0, 74, 74,
	0, 0, 0, 0, 0, 513, 0, 42, 0, 418,
	0, 74, 28, 0, 537, 451, 461, 462, 454, 455,
	456, 457, 458, 459, 460, 453, 0, 0, 463, 865,
	0, 37, 0, 0, 0, 50, 593, 74, 595, 0,
	318, 598, 0, 0, 601, 452, 451, 461, 462, 454,
	455, 456, 457, 458, 459, 460, 453, 0, 0, 463,
	0, 0, 74, 0, 0, 159, 0, 159, 0, 0,
	74, 159, 0, 0, 0, 170, 0, 0, 159, 0,
	0, 896, 318, 0, 318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 31, 33, 32, 35, 180,
	0, 0, 318, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 165,
	286, 0, 0, 950, 865, 167, 615, 0, 0, 0,
	173, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 318, 634, 318, 967, 159, 0,
	0, 171, 0, 0, 175, 159, 535, 159, 0, 49,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 159, 166, 992, 159, 0, 0, 159, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 168, 174, 176, 177, 178, 179, 0, 0, 182,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	1023, 0, 1023, 1023, 1023, 0, 1028, 0, 318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 447, 0, 450,
	0, 0, 318, 318, 318, 464, 465, 466, 467, 468,
	469, 470, 0, 448, 449, 446, 452, 451, 461, 462,
	454, 455, 456, 457, 458, 459, 460, 453, 0, 0,
	463, 0, 0, 1055, 1056, 0, 0, 0, 0, 159,
	0, 0, 777, 0, 0, 0, 967, 0, 796, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 207, 0,
	0, 0, 0, 207, 207, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 207, 207, 207, 0, 159, 0, 287, 159,
	159, 159, 159, 159, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 159, 0, 0, 0, 535, 0,
	0, 0, 159, 159, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	0, 159, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 911, 207, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 207, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	452, 451, 461, 462, 454, 455, 456, 457, 458, 459,
	460, 453, 0, 0, 463, 0, 987, 0, 0, 0,
	0, 0, 0, 990, 0, 0, 0, 0, 162, 0,
	0, 0, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 159, 143,
	144, 145, 146, 108, 83, 94, 121, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 75, 0, 99, 147, 116, 92, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	0, 0, 0, 0, 0, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 397, 387, 0, 360, 399, 338, 352, 407,
	353, 354, 381, 326, 368, 111, 350, 0, 341, 321,
	347, 322, 339, 362, 90, 365, 337, 389, 371, 98,
	405, 100, 376, 0, 122, 107, 0, 0, 364, 391,
	366, 386, 359, 382, 331, 375, 400, 351, 379, 401,
	0, 0, 0, 73, 0, 738, 739, 0, 0, 0,
	0, 0, 84, 0, 378, 396, 349, 380, 320, 377,
	0, 324, 327, 406, 394, 344, 345, 871, 0, 0,
	0, 0, 0, 0, 363, 367, 383, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 374, 0,
	0, 0, 328, 325, 0, 361, 0, 0, 0, 330,
	0, 343, 384, 287, 392, 358, 162, 395, 356, 355,
	398, 114, 390, 340, 348, 86, 346, 119, 112, 136,
	373, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	323, 0, 123, 137, 149, 336, 393, 143, 144, 145,
	146, 108, 83, 94, 121, 334, 335, 332, 333, 369,
	370, 402, 403, 404, 385, 329, 0, 0, 388, 372,
	75, 0, 99, 147, 116, 92, 138, 397, 387, 0,
	360, 399, 338, 352, 407, 353, 354, 381, 326, 368,
	111, 350, 0, 341, 321, 347, 322, 339, 362, 90,
	365, 337, 389, 371, 98, 405, 100, 376, 0, 122,
	107, 0, 0, 364, 391, 366, 386, 359, 382, 331,
	375, 400, 351, 379, 401, 0, 0, 0, 73, 0,
	738, 739, 0, 0, 0, 0, 0, 84, 0, 378,
	396, 349, 380, 320, 377, 0, 324, 327, 406, 394,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 328, 325, 0,
	361, 0, 0, 0, 330, 0, 343, 384, 0, 392,
	358, 162, 395, 356, 355, 398, 114, 390, 340, 348,
	86, 346, 119, 112, 136, 373, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 323, 0, 123, 137, 149,
	336, 393, 143, 144, 145, 146, 108, 83, 94, 121,
	334, 335, 332, 333, 369, 370, 402, 403, 404, 385,
	329, 0, 0, 388, 372, 75, 0, 99, 147, 116,
	92, 138, 397, 387, 0, 360, 399, 338, 352, 407,
	353, 354, 381, 326, 368, 111, 350, 0, 341, 321,
	347, 322, 339, 362, 90, 365, 337, 389, 371, 98,
	405, 100, 376, 0, 122, 107, 0, 0, 364, 391,
	366, 386, 359, 382, 331, 375, 400, 351, 379, 401,
	50, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 378, 396, 349, 380, 320, 377,
	0, 324, 327, 406, 394, 344, 345, 0, 0, 0,
	0, 0, 0, 0, 363, 367, 383, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 374, 0,
	0, 0, 328, 325, 0, 361, 0, 0, 0, 330,
	0, 343, 384, 0, 392, 358, 162, 395, 356, 355,
	398, 114, 390, 340, 348, 86, 346, 119, 112, 136,
	373, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	323, 0, 123, 137, 149, 336, 393, 143, 144, 145,
	146, 108, 83, 94, 121, 334, 335, 332, 333, 369,
	370, 402, 403, 404, 385, 329, 0, 0, 388, 372,
	75, 0, 99, 147, 116, 92, 138, 397, 387, 0,
	360, 399, 338, 352, 407, 353, 354, 381, 326, 368,
	111, 350, 0, 341, 321, 347, 322, 339, 362, 90,
	365, 337, 389, 371, 98, 405, 100, 376, 0, 122,
	107, 0, 0, 364, 391, 366, 386, 359, 382, 331,
	375, 400, 351, 379, 401, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 378,
	396, 349, 380, 320, 377, 0, 324, 327, 406, 394,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 914,
	0, 342, 0, 374, 0, 0, 0, 328, 325, 0,
	361, 0, 0, 0, 330, 0, 343, 384, 0, 392,
	358, 162, 395, 356, 355, 398, 114, 390, 340, 348,
	86, 346, 119, 112, 136, 373, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 323, 0, 123, 137, 149,
	336, 393, 143, 144, 145, 146, 108, 83, 94, 121,
	334, 335, 332, 333, 369, 370, 402, 403, 404, 385,
	329, 0, 0, 388, 372, 75, 0, 99, 147, 116,
	92, 138, 397, 387, 0, 360, 399, 338, 352, 407,
	353, 354, 381, 326, 368, 111, 350, 0, 341, 321,
	347, 322, 339, 362, 90, 365, 337, 389, 371, 98,
	405, 100, 376, 0, 122, 107, 0, 0, 364, 391,
	366, 386, 359, 382, 331, 375, 400, 351, 379, 401,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 378, 396, 349, 380, 320, 377,
	0, 324, 327, 406, 394, 344, 345, 0, 0, 0,
	0, 0, 0, 0, 363, 367, 383, 357, 0, 0,
	0, 0, 0, 0, 643, 0, 342, 0, 374, 0,
	0, 0, 328, 325, 0, 361, 0, 0, 0, 330,
	0, 343, 384, 0, 392, 358, 162, 395, 356, 355,
	398, 114, 390, 340, 348, 86, 346, 119, 112, 136,
	373, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	323, 0, 123, 137, 149, 336, 393, 143, 144, 145,
	146, 108, 83, 94, 121, 334, 335, 332, 333, 369,
	370, 402, 403, 404, 385, 329, 0, 0, 388, 372,
	75, 0, 99, 147, 116, 92, 138, 397, 387, 0,
	360, 399, 338, 352, 407, 353, 354, 381, 326, 368,
	111, 350, 0, 341, 321, 347, 322, 339, 362, 90,
	365, 337, 389, 371, 98, 405, 100, 376, 0, 122,
	107, 0, 0, 364, 391, 366, 386, 359, 382, 331,
	375, 400, 351, 379, 401, 0, 0, 0, 73, 0,
	546, 0, 0, 0, 0, 0, 0, 84, 0, 378,
	396, 349, 380, 320, 377, 0, 324, 327, 406, 394,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 328, 325, 0,
	361, 0, 0, 0, 330, 0, 343, 384, 0, 392,
	358, 162, 395, 356, 355, 398, 114, 390, 340, 348,
	86, 346, 119, 112, 136, 373, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 323, 0, 123, 137, 149,
	336, 393, 143, 144, 145, 146, 108, 83, 94, 121,
	334, 335, 332, 333, 369, 370, 402, 403, 404, 385,
	329, 0, 0, 388, 372, 75, 0, 99, 147, 116,
	92, 138, 397, 387, 0, 360, 399, 338, 352, 407,
	353, 354, 381, 326, 368, 111, 350, 0, 341, 321,
	347, 322, 339, 362, 90, 365, 337, 389, 371, 98,
	405, 100, 376, 0, 122, 107, 0, 0, 364, 391,
	366, 386, 359, 382, 331, 375, 400, 351, 379, 401,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 378, 396, 349, 380, 320, 377,
	0, 324, 327, 406, 394, 344, 345, 0, 0, 0,
	0, 0, 0, 0, 363, 367, 383, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 374, 0,
	0, 0, 328, 325, 0, 361, 0, 0, 0, 330,
	0, 343, 384, 0, 392, 358, 162, 395, 356, 355,
	398, 114, 390, 340, 348, 86, 346, 119, 112, 136,
	373, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	323, 0, 123, 137, 149, 336, 393, 143, 144, 145,
	146, 108, 83, 94, 121, 334, 335, 332, 333, 369,
	370, 402, 403, 404, 385, 329, 0, 0, 388, 372,
	75, 0, 99, 147, 116, 92, 138, 397, 387, 0,
	360, 399, 338, 352, 407, 353, 354, 381, 326, 368,
	111, 350, 0, 341, 321, 347, 322, 339, 362, 90,
	365, 337, 389, 371, 98, 405, 100, 376, 0, 122,
	107, 0, 0, 364, 391, 366, 386, 359, 382, 331,
	375, 400, 351, 379, 401, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 378,
	396, 349, 380, 320, 377, 0, 324, 327, 406, 394,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 328, 325, 0,
	361, 0, 0, 0, 330, 0, 343, 384, 0, 392,
	358, 162, 395, 356, 355, 398, 114, 390, 340, 348,
	86, 346, 119, 112, 136, 373, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 323, 0, 123, 137, 149,
	336, 393, 143, 144, 145, 146, 108, 83, 94, 121,
	334, 335, 332, 333, 369, 370, 402, 403, 404, 385,
	329, 0, 0, 388, 372, 75, 0, 99, 147, 116,
	92, 138, 397, 387, 0, 360, 399, 338, 352, 407,
	353, 354, 381, 326, 368, 111, 350, 0, 341, 321,
	347, 322, 339, 362, 90, 365, 337, 389, 371, 98,
	405, 100, 376, 0, 122, 107, 0, 0, 364, 391,
	366, 386, 359, 382, 331, 375, 400, 351, 379, 401,
	0, 0, 0, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 378, 396, 349, 380, 320, 377,
	0, 324, 327, 406, 394, 344, 345, 0, 0, 0,
	0, 0, 0, 0, 363, 367, 383, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 374, 0,
	0, 0, 328, 325, 0, 361, 0, 0, 0, 330,
	0, 343, 384, 0, 392, 358, 162, 395, 356, 355,
	398, 114, 390, 340, 348, 86, 346, 119, 112, 136,
	373, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	323, 0, 123, 137, 149, 336, 393, 143, 144, 145,
	146, 108, 83, 94, 121, 334, 335, 332, 333, 369,
	370, 402, 403, 404, 385, 329, 0, 0, 388, 372,
	75, 0, 99, 147, 116, 92, 138, 111, 0, 0,
	679, 0, 214, 0, 0, 0, 90, 0, 211, 0,
	0, 98, 251, 100, 0, 0, 122, 107, 0, 0,
	0, 0, 244, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 212, 232, 231, 234, 235,
	236, 237, 0, 0, 84, 233, 238, 239, 240, 0,
	0, 209, 225, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 205, 0, 0, 0,
	262, 0, 224, 0, 0, 220, 221, 226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 0,
	0, 260, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 0, 143,
	144, 145, 146, 108, 83, 94, 121, 252, 261, 258,
	259, 256, 257, 255, 254, 253, 263, 246, 247, 249,
	0, 248, 75, 0, 99, 147, 116, 92, 138, 111,
	0, 0, 0, 0, 214, 0, 0, 0, 90, 0,
	211, 0, 0, 98, 251, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 244, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 418, 212, 232, 231,
	234, 235, 236, 237, 0, 0, 84, 233, 238, 239,
	240, 0, 0, 209, 225, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 0, 0,
	0, 0, 262, 0, 224, 0, 0, 220, 221, 226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 260, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	0, 143, 144, 145, 146, 108, 83, 94, 121, 252,
	261, 258, 259, 256, 257, 255, 254, 253, 263, 246,
	247, 249, 0, 248, 75, 0, 99, 147, 116, 92,
	138, 111, 0, 0, 0, 0, 214, 0, 0, 0,
	90, 0, 211, 0, 0, 98, 251, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 244, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 212,
	232, 231, 234, 235, 236, 237, 0, 0, 84, 233,
	238, 239, 240, 0, 0, 209, 225, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	205, 0, 0, 0, 262, 0, 224, 0, 0, 220,
	221, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 260, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 0, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 0, 143, 144, 145, 146, 108, 83, 94,
	121, 252, 261, 258, 259, 256, 257, 255, 254, 253,
	263, 246, 247, 249, 23, 248, 75, 0, 99, 147,
	116, 92, 138, 0, 0, 0, 111, 0, 0, 0,
	0, 214, 0, 0, 0, 90, 0, 211, 0, 0,
	98, 251, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 244, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 212, 232, 231, 234, 235, 236,
	237, 0, 0, 84, 233, 238, 239, 240, 0, 0,
	209, 225, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 0, 0, 0, 0, 262,
	0, 224, 0, 0, 220, 221, 226, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	260, 0, 114, 0, 0, 0, 86, 0, 119, 112,
	136, 0, 113, 118, 101, 128, 115, 135, 163, 142,
	126, 141, 76, 125, 134, 85, 120, 78, 132, 124,
	105, 95, 96, 77, 0, 117, 89, 93, 88, 110,
	129, 130, 87, 148, 81, 140, 80, 82, 139, 109,
	127, 133, 106, 103, 79, 131, 104, 102, 97, 91,
	0, 0, 0, 123, 137, 149, 0, 0, 143, 144,
	145, 146, 108, 83, 94, 121, 252, 261, 258, 259,
	256, 257, 255, 254, 253, 263, 246, 247, 249, 0,
	248, 75, 0, 99, 147, 116, 92, 138, 111, 0,
	0, 0, 0, 214, 0, 0, 0, 90, 0, 211,
	0, 0, 98, 251, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 212, 232, 231, 234,
	235, 236, 237, 0, 0, 84, 233, 238, 239, 240,
	0, 0, 209, 225, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 0, 0, 0,
	0, 262, 0, 224, 0, 0, 220, 221, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 260, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 113, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 0,
	143, 144, 145, 146, 108, 83, 94, 121, 252, 261,
	258, 259, 256, 257, 255, 254, 253, 263, 246, 247,
	249, 111, 248, 75, 0, 99, 147, 116, 92, 138,
	90, 0, 0, 0, 0, 98, 251, 100, 0, 0,
	122, 107, 0, 0, 0, 0, 244, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 212,
	232, 231, 234, 235, 236, 237, 0, 0, 84, 233,
	238, 239, 240, 0, 0, 0, 225, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	0, 0, 0, 0, 262, 0, 224, 0, 0, 220,
	221, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 260, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 1117, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 0, 143, 144, 145, 146, 108, 83, 94,
	121, 252, 261, 258, 259, 256, 257, 255, 254, 253,
	263, 246, 247, 249, 111, 248, 75, 0, 99, 147,
	116, 92, 138, 90, 0, 0, 0, 0, 98, 251,
	100, 0, 0, 122, 107, 0, 0, 0, 0, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 212, 232, 231, 234, 235, 236, 237, 0,
	0, 84, 233, 238, 239, 240, 0, 0, 0, 225,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 0, 0, 0, 0, 262, 0, 224,
	0, 0, 220, 221, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 0, 260, 0,
	114, 0, 0, 0, 86, 0, 119, 112, 136, 0,
	113, 118, 101, 128, 115, 135, 163, 142, 126, 141,
	76, 125, 134, 85, 120, 78, 132, 124, 105, 95,
	96, 77, 0, 117, 89, 93, 88, 110, 129, 130,
	87, 148, 81, 140, 80, 82, 139, 109, 127, 133,
	106, 103, 79, 131, 104, 102, 97, 91, 0, 0,
	0, 123, 137, 149, 0, 0, 143, 144, 145, 146,
	108, 83, 94, 121, 252, 261, 258, 259, 256, 257,
	255, 254, 253, 263, 246, 247, 249, 0, 248, 75,
	0, 99, 147, 116, 92, 138, 111, 0, 0, 0,
	440, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 442, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 437, 436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 114, 0, 0, 0, 86, 0, 119, 112,
	136, 0, 113, 118, 101, 128, 115, 135, 163, 142,
	126, 141, 76, 125, 134, 85, 120, 78, 132, 124,
	105, 95, 96, 77, 0, 117, 89, 93, 88, 110,
	129, 130, 87, 148, 81, 140, 80, 82, 139, 109,
	127, 133, 106, 103, 79, 131, 104, 102, 97, 91,
	0, 0, 0, 123, 137, 149, 0, 111, 143, 144,
	145, 146, 108, 83, 94, 121, 90, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 75, 0, 99, 147, 116, 92, 138, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 67, 0,
	0, 0, 71, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 69,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 0, 143,
	144, 145, 146, 108, 83, 94, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 99, 147, 116, 92, 138, 111,
	0, 0, 0, 534, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 536,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	0, 143, 144, 145, 146, 108, 83, 94, 121, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 75, 0, 99, 147, 116, 92,
	138, 90, 0, 0, 0, 0, 98, 0, 100, 0,
	0, 122, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 0, 0, 0, 114, 0,
	0, 0, 86, 0, 119, 112, 136, 0, 113, 118,
	101, 128, 115, 135, 163, 142, 126, 141, 76, 125,
	134, 85, 120, 78, 132, 124, 105, 95, 96, 77,
	0, 117, 89, 93, 88, 110, 129, 130, 87, 148,
	81, 140, 80, 82, 139, 109, 127, 133, 106, 103,
	79, 131, 104, 102, 97, 91, 0, 0, 0, 123,
	137, 149, 0, 0, 143, 144, 145, 146, 108, 83,
	94, 121, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 75, 0, 99,
	147, 116, 92, 138, 90, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 114, 0, 0, 0, 86, 0, 119, 112, 136,
	0, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 0,
	0, 0, 123, 137, 149, 0, 111, 143, 144, 145,
	146, 108, 83, 94, 121, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	75, 0, 99, 147, 116, 92, 138, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 630, 0, 0,
	631, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 114, 0, 0, 0, 86, 0, 119, 112,
	136, 0, 113, 118, 101, 128, 115, 135, 163, 142,
	126, 141, 76, 125, 134, 85, 120, 78, 132, 124,
	105, 95, 96, 77, 0, 117, 89, 93, 88, 110,
	129, 130, 87, 148, 81, 140, 80, 82, 139, 109,
	127, 133, 106, 103, 79, 131, 104, 102, 97, 91,
	0, 0, 0, 123, 137, 149, 0, 0, 143, 144,
	145, 146, 108, 83, 94, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 99, 147, 116, 92, 138, 111, 0,
	0, 0, 534, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 536, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 532, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 111,
	143, 144, 145, 146, 108, 83, 94, 121, 90, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 75, 0, 99, 147, 116, 92, 138,
	0, 0, 0, 0, 50, 0, 0, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	111, 143, 144, 145, 146, 108, 83, 94, 121, 90,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 75, 0, 99, 147, 116, 92,
	138, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	536, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 114, 0, 0, 0,
	86, 0, 119, 112, 136, 0, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 0, 0, 123, 137, 149,
	0, 111, 143, 144, 145, 146, 108, 83, 94, 121,
	90, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 75, 0, 99, 147, 116,
	92, 138, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 442, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 0, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 82, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 0, 143, 144, 145, 146, 108, 83, 94,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 75, 0, 99, 147,
	116, 92, 138, 512, 90, 0, 0, 0, 0, 98,
	0, 100, 0, 0, 122, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 0, 0,
	0, 114, 0, 0, 0, 86, 0, 119, 112, 136,
	0, 113, 118, 101, 128, 115, 135, 163, 142, 126,
	141, 76, 125, 134, 85, 120, 78, 132, 124, 105,
	95, 96, 77, 0, 117, 89, 93, 88, 110, 129,
	130, 87, 148, 81, 140, 80, 82, 139, 109, 127,
	133, 106, 103, 79, 131, 104, 102, 97, 91, 273,
	0, 0, 123, 137, 149, 0, 111, 143, 144, 145,
	146, 108, 83, 94, 121, 90, 0, 0, 0, 0,
	98, 0, 100, 0, 0, 122, 107, 0, 0, 0,
	75, 0, 99, 147, 116, 92, 138, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 0, 114, 0, 0, 0, 86, 0, 119, 112,
	136, 0, 113, 118, 101, 128, 115, 135, 163, 142,
	126, 141, 76, 125, 134, 85, 120, 78, 132, 124,
	105, 95, 96, 77, 0, 117, 89, 93, 88, 110,
	129, 130, 87, 148, 81, 140, 80, 82, 139, 109,
	127, 133, 106, 103, 79, 131, 104, 102, 97, 91,
	0, 0, 0, 123, 137, 149, 0, 111, 143, 144,
	145, 146, 108, 83, 94, 121, 90, 0, 0, 0,
	0, 98, 0, 100, 0, 0, 122, 107, 0, 0,
	0, 75, 0, 99, 147, 116, 92, 138, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 162, 0,
	0, 0, 0, 114, 0, 0, 0, 86, 0, 119,
	112, 136, 0, 113, 118, 101, 128, 115, 135, 163,
	142, 126, 141, 76, 125, 134, 85, 120, 78, 132,
	124, 105, 95, 96, 77, 0, 117, 89, 93, 88,
	110, 129, 130, 87, 148, 81, 140, 80, 82, 139,
	109, 127, 133, 106, 103, 79, 131, 104, 102, 97,
	91, 0, 0, 0, 123, 137, 149, 0, 111, 143,
	144, 145, 146, 108, 83, 94, 121, 90, 0, 0,
	0, 0, 98, 0, 100, 0, 0, 122, 107, 0,
	0, 0, 75, 0, 99, 147, 116, 92, 138, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 0, 114, 0, 0, 0, 86, 0,
	119, 112, 136, 0, 113, 118, 101, 128, 115, 135,
	163, 142, 126, 141, 76, 125, 134, 85, 120, 78,
	132, 124, 105, 95, 96, 77, 0, 117, 89, 93,
	88, 110, 129, 130, 87, 148, 81, 140, 80, 82,
	139, 109, 127, 133, 106, 103, 79, 131, 104, 102,
	97, 91, 0, 0, 0, 123, 137, 149, 0, 111,
	143, 144, 145, 146, 108, 83, 94, 121, 90, 0,
	0, 0, 0, 98, 0, 100, 0, 0, 122, 107,
	0, 0, 0, 75, 0, 99, 147, 116, 92, 138,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 0, 0, 0, 114, 0, 0, 0, 86,
	0, 119, 112, 136, 0, 113, 118, 101, 128, 115,
	135, 163, 142, 126, 141, 76, 125, 134, 85, 120,
	78, 132, 124, 105, 95, 96, 77, 0, 117, 89,
	93, 88, 110, 129, 130, 87, 148, 81, 140, 80,
	82, 139, 109, 127, 133, 106, 103, 79, 131, 104,
	102, 97, 91, 0, 0, 0, 123, 137, 149, 0,
	111, 143, 144, 145, 146, 108, 83, 94, 121, 90,
	0, 0, 0, 0, 98, 0, 100, 0, 0, 122,
	107, 0, 0, 0, 75, 0, 99, 147, 116, 92,
	138, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 0, 0, 114, 0, 0, 0,
	86, 0, 119, 112, 136, 0, 113, 118, 101, 128,
	115, 135, 163, 142, 126, 141, 76, 125, 134, 85,
	120, 78, 132, 124, 105, 95, 96, 77, 0, 117,
	89, 93, 88, 110, 129, 130, 87, 148, 81, 140,
	80, 82, 139, 109, 127, 133, 106, 103, 79, 131,
	104, 102, 97, 91, 0, 0, 0, 123, 137, 149,
	0, 111, 143, 144, 145, 146, 108, 83, 94, 121,
	90, 0, 0, 0, 0, 98, 0, 100, 0, 0,
	122, 107, 0, 0, 0, 75, 0, 99, 147, 116,
	92, 138, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 0, 114, 0, 0,
	0, 86, 0, 119, 112, 136, 0, 113, 118, 101,
	128, 115, 135, 163, 142, 126, 141, 76, 125, 134,
	85, 120, 78, 132, 124, 105, 95, 96, 77, 0,
	117, 89, 93, 88, 110, 129, 130, 87, 148, 81,
	140, 80, 283, 139, 109, 127, 133, 106, 103, 79,
	131, 104, 102, 97, 91, 0, 0, 0, 123, 137,
	149, 0, 0, 143, 144, 145, 146, 284, 282, 281,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 99, 147,
	116, 92, 138,
}
var yyPact = [...]int{

	1272, -1000, -168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 761, 798, -1000, -1000, -1000, -1000, -1000, -1000, 573,
	5659, 7, 62, 47, 7669, 60, 1333, 8182, -1000, -55,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 598, -1000, -1000,
	-1000, -1000, -1000, 754, 758, 603, 741, 654, -1000, 4493,
	28, 6791, 7498, 8353, -1000, 370, 55, 8182, -131, 7840,
	3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59, 8182, -1000, 8182, 2, 368, 2, 8182, -1000, 93,
	-1000, -1000, -1000, -1000, 8182, 366, 677, 66, 2597, 2597,
	2597, 2597, -48, 2597, 2597, 619, -1000, -1000, -1000, -1000,
	2597, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	380, 728, 4900, 4900, 761, -1000, 598, -1000, -1000, -1000,
	713, -1000, -1000, 204, 780, -1000, 5488, 92, -1000, 4900,
	1505, 540, -1000, -1000, 540, -1000, -1000, 79, -1000, -1000,
	5286, 5286, 5286, 5286, 5286, 5286, 5286, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 540, -1000, 4698, 540, 540, 540, 540, 540, 540,
	4900, 540, 540, 540, 540, 540, 540, 540, 540, 540,
	540, 540, 540, 540, 7327, 522, 688, -1000, -1000, -1000,
	736, 6247, 6620, 8182, 501, -1000, 438, 8011, 3242, -1000,
	-1000, -1000, -1000, 676, -1000, 138, -1000, 91, 481, -1000,
	-19, 344, 2597, 8, 7840, 8182, 167, 8182, 2597, 30,
	8182, 734, 618, 8182, -1000, 3887, -1000, 2597, 2597, 2597,
	2597, 2597, 2597, 2597, 2597, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2597, 2597, -1000, -1000, 8182, -1000, -1000, -1000, -1000,
	793, 119, 459, 90, 554, -1000, 271, 754, 380, 654,
	6418, 607, -1000, -1000, 8182, -1000, 4900, 4900, 348, -1000,
	7133, -1000, -1000, 3027, 126, 5286, 302, 201, 5286, 5286,
	5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286, 5286,
	5286, 5286, 5286, 269, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 328, -1000, 598, 860, 860, 98, 98, 98,
	98, 98, 98, 1819, 4089, 380, 467, 312, 4698, 4493,
	4493, 4900, 4900, 4493, 749, 165, 312, 7840, -1000, 380,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4493, 4493, 4493,
	4493, -15, 8182, -1000, 8011, 6791, 6791, 6791, 6791, 6791,
	-1000, 649, 646, -1000, 638, 637, 645, 8182, -1000, 442,
	6247, 71, 540, -1000, 6962, -1000, -1000, -15, 6791, 8182,
	-1000, -1000, 8011, 438, -1000, -1000, -1000, -1000, 4900, 3672,
	2382, 245, 225, -106, -1000, -1000, 557, -1000, 557, 557,
	557, 557, -85, -85, -85, -85, -1000, -1000, -1000, -1000,
	-1000, 569, -1000, 557, 557, 557, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 564, 564, 564, 558, 558, 584,
	-1000, 8182, -151, -1000, 731, 1041, -1000, 8182, -1000, -1000,
	8182, 2597, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 608, 4900, 4900,
	3672, 4900, -1000, -1000, -1000, 728, -1000, 749, 762, -1000,
	668, 666, 4493, -1000, -1000, 126, 164, -1000, -1000, 308,
	-1000, -1000, -1000, -1000, 87, 540, -1000, 1031, -1000, -1000,
	-1000, -1000, 302, 5286, 5286, 5286, 296, 1031, 620, 309,
	1213, 98, 542, 542, 132, 132, 132, 132, 132, 386,
	386, -1000, -1000, -1000, 380, -1000, -1000, -1000, 380, 4493,
	546, -1000, -1000, 4900, -1000, 380, 418, 418, 286, 283,
	418, 4493, 162, -1000, 4900, 380, -1000, 418, 380, 418,
	418, 597, 540, -1000, 594, 688, 580, 614, 901, -1000,
	-1000, -1000, -1000, 639, -1000, 636, -1000, -1000, -1000, -1000,
	-1000, 50, 49, 34, 7840, -1000, 778, 520, -1000, -1000,
	-1000, 312, -1000, 85, 532, 2167, -1000, -1000, -1000, -1000,
	-1000, -1000, 561, 716, 163, 325, -1000, -1000, 679, -1000,
	203, -109, -1000, -1000, 243, -85, -85, -1000, -1000, 75,
	675, 75, 75, 75, 301, -1000, -1000, -1000, -1000, 239,
	-1000, -1000, -1000, 226, -1000, 611, 7840, 2597, -1000, 3457,
	-1000, -1000, 156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -21, -1000, 2597, -1000, 659,
	312, 312, -1000, -1000, 8182, -1000, -1000, -1000, -1000, 483,
	-1000, -1000, -1000, 2812, 4493, -1000, 296, 1031, 409, -1000,
	5286, 5286, -1000, -1000, 418, 4493, 312, -1000, -1000, -1000,
	200, 269, 200, -140, 509, 157, -1000, 4900, 207, -1000,
	-1000, -1000, -1000, -1000, 604, 8011, 540, -1000, 6054, 7840,
	761, 4900, -1000, -1000, 4900, 560, -1000, 4900, -1000, -1000,
	-1000, 540, 540, 540, 378, -1000, 761, -1000, 3457, 2382,
	-1000, 2382, 7840, -1000, 316, -1000, -1000, 601, 128, -1000,
	-1000, -1000, 423, 75, 75, -1000, 247, 160, -1000, -1000,
	-1000, 416, -1000, 502, 398, 8182, -1000, -1000, 500, -1000,
	134, -1000, 8182, -1000, -1000, -1000, -1000, -1000, 7840, -1000,
	-1000, -1000, 778, 6791, -1000, -1000, 380, -1000, 5286, 1031,
	1031, -1000, -1000, 380, 557, 557, -1000, 557, 558, -1000,
	557, -64, 557, -66, 380, 380, 540, -136, -1000, 312,
	4900, -1000, 723, 496, 484, -1000, -1000, 4291, 380, 392,
	84, 378, 754, 312, 312, 7840, 312, 7840, 7840, 7840,
	5861, 7840, 754, 2167, -1000, 376, -1000, 557, -1000, -100,
	790, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 278, 220, -1000, 212, 2597, 3457, 2382,
	-1000, -1000, 725, 771, 495, -1000, 1031, -1000, -1000, 29,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5286, 380,
	276, 312, 699, -1000, 540, -1000, -1000, 539, 7840, 7840,
	-1000, -1000, 374, -1000, 364, 364, 364, 71, -1000, -1000,
	584, 7840, -1000, 101, -1000, -121, -1000, 419, 382, -1000,
	-1000, -1000, 540, 763, 756, -1000, -1000, 6, -1000, -1000,
	783, -1000, 540, -1000, 598, 73, -1000, 7840, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 202, 698, -1000, 681, -1000,
	-1000, -1000, -22, -1000, 4900, 4900, 380, 19, -156, 8011,
	484, 380, 7840, -1000, -1000, 272, -1000, -1000, 324, -1000,
	7840, 312, 472, -1000, 658, -149, -160, 438, -1000, -1000,
	-1000, -1000, -22, 665, -1000, 657, -1000, -1000, -26, -153,
	-45, -157, 540, -161, 5093, -1000, 1244, 380, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1022, 26, 442, 1021, 1020, 1019, 1017, 1013, 1012,
	1011, 1010, 1009, 1008, 1004, 1000, 999, 998, 997, 996,
	995, 993, 991, 989, 89, 986, 983, 982, 45, 979,
	49, 971, 969, 34, 163, 35, 33, 123, 968, 19,
	82, 79, 967, 37, 966, 965, 964, 963, 44, 959,
	958, 1030, 957, 956, 6, 28, 955, 954, 951, 950,
	51, 5, 940, 939, 938, 936, 935, 934, 39, 3,
	4, 22, 11, 932, 221, 8, 931, 30, 930, 929,
	925, 923, 25, 913, 41, 912, 17, 40, 911, 14,
	53, 29, 16, 10, 910, 47, 900, 282, 899, 86,
	898, 897, 896, 895, 894, 55, 269, 594, 280, 54,
	891, 888, 9, 1203, 46, 50, 15, 886, 24, 36,
	21, 884, 883, 32, 882, 881, 880, 878, 877, 868,
	59, 866, 858, 857, 23, 31, 852, 848, 42, 18,
	846, 845, 844, 842, 43, 841, 38, 840, 839, 832,
	20, 13, 829, 7, 822, 821, 2, 819, 12, 817,
	815, 813, 811, 0, 137, 810, 805, 64,
}
var yyR1 = [...]int{

	0, 161, 162, 162, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 165, 165,
	46, 46, 90, 90, 10, 10, 10, 94, 94, 94,
	111, 111, 121, 121, 11, 11, 11, 11, 11, 160,
	160, 159, 159, 158, 16, 147, 148, 148, 148, 144,
	124, 124, 124, 127, 127, 125, 125, 125, 125, 125,
	125, 125, 126, 126, 126, 126, 126, 128, 128, 128,
	128, 128, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 143, 143, 130, 130,
	138, 138, 139, 139, 139, 136, 136, 137, 137, 140,
	140, 140, 131, 131, 131, 131, 131, 131, 133, 133,
	141, 141, 134, 134, 134, 135, 135, 142, 142, 142,
	142, 142, 132, 132, 145, 152, 152, 152, 152, 146,
	146, 154, 154, 153, 149, 149, 149, 150, 150, 150,
	151, 151, 151, 12, 12, 12, 12, 12, 157, 155,
	155, 156, 156, 13, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 122, 122, 122, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 166, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 110,
	110, 110, 109, 109, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 53, 53, 89, 89, 91, 91, 42,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 117,
	117, 116, 116, 116, 115, 115, 47, 47, 47, 49,
	48, 48, 48, 48, 50, 50, 52, 52, 51, 51,
	54, 54, 54, 54, 55, 55, 37, 37, 37, 37,
	37, 37, 37, 98, 98, 57, 57, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 67, 67, 67,
	67, 67, 67, 58, 58, 58, 58, 58, 58, 58,
	33, 33, 68, 68, 68, 74, 69, 69, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 167,
	167, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	120, 120, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 95, 96, 96,
	99, 99, 100, 100, 97, 97, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 102, 102, 102,
	103, 103, 104, 104, 104, 112, 112, 107, 107, 108,
	108, 113, 113, 114, 114, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	163, 164, 118, 119, 119, 119,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 6, 1, 1,
	1, 3, 0, 4, 3, 4, 5, 1, 2, 1,
	1, 1, 1, 1, 2, 8, 4, 6, 5, 0,
	2, 1, 3, 3, 4, 4, 1, 3, 3, 8,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 5, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 4, 5, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 3, 4, 2, 4, 2, 2,
	2, 2, 3, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -161, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 132, 116, 125, 49, 144, 145,
	147, 148, 25, 126, 127, 130, 131, -163, 8, 207,
	53, -162, 220, -82, 15, -26, 5, -24, -166, -24,
	-24, -24, -24, -24, -147, 53, -104, 119, 70, 140,
	117, 123, -107, 56, -106, 213, 144, 155, 149, 176,
	168, 166, 169, 195, 65, 147, 128, 164, 160, 158,
	27, 181, 218, 159, 196, 153, 154, 180, 32, 215,
	34, 136, 179, 175, 178, 152, 174, 38, 194, 171,
	161, 18, 131, 134, 124, 138, 217, 157, 135, 130,
	148, 197, 37, 185, 151, 145, 142, 172, 137, 162,
	163, 177, 150, 173, 146, 139, 132, 186, 219, 170,
	167, 143, 141, 190, 191, 192, 193, 216, 165, 187,
	-97, 119, 121, 117, 117, 118, 119, 117, -51, -113,
	56, -106, 119, 140, 117, 106, 169, 112, 188, 118,
	32, 138, -122, 117, 189, 141, 190, 191, 192, 193,
	56, 197, 196, -113, 146, -118, -118, -118, -118, -118,
	-2, -86, 17, 16, -5, -3, -163, 6, 20, 21,
	-30, 39, 40, -25, -36, 97, -37, -113, -56, 72,
	-61, 29, 56, -106, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -107, -71, -163, 43, 44, 208, 209, 212, 210,
	75, 33, 198, 206, 205, 204, 202, 203, 200, 201,
	122, 199, 101, 207, -97, -39, -40, -41, -42, -53,
	-74, -163, -51, 11, -46, -51, -93, -121, -94, -95,
	197, 196, 195, 169, 194, -75, -107, -113, -148, -144,
	56, 118, -51, 207, -107, -100, 122, 117, -51, -51,
	-99, 122, 56, -99, -51, 109, -51, 56, 30, 199,
	56, 138, 117, 139, 119, -119, -163, -108, -107, -105,
	71, 22, 24, 183, 74, 106, 16, 75, 105, 208,
	112, 47, 200, 201, 198, 199, 188, 29, 10, 25,
	126, 21, 99, 114, 78, 79, 129, 23, 127, 69,
	19, 50, 11, 13, 14, 122, 121, 90, 118, 45,
	8, 108, 26, 87, 41, 28, 43, 88, 17, 202,
	203, 31, 212, 133, 101, 48, 35, 72, 67, 51,
	70, 15, 46, 89, 115, 207, 44, 6, 211, 30,
	125, 42, 117, 189, 77, 120, 68, 5, 123, 9,
	49, 52, 204, 205, 206, 33, 76, 12, -119, -119,
	-119, 142, 143, -119, -119, 51, -119, -164, 55, -87,
	19, 31, -37, -113, -83, -84, -37, -82, -2, -24,
	35, -28, 21, 64, 11, -110, 71, 70, 87, -109,
	22, -107, 58, 109, -37, -58, 90, 72, 88, 89,
	74, 92, 91, 102, 95, 96, 97, 98, 99, 100,
	101, 93, 94, 105, 80, 81, 82, 83, 84, 85,
	86, -98, -163, -74, -163, 110, 111, -61, -61, -61,
	-61, -61, -61, -61, -163, -2, -69, -37, -163, -163,
	-163, -163, -163, -163, -163, -78, -37, -163, -167, -163,
	-167, -167, -167, -167, -167, -167, -167, -163, -163, -163,
	-163, -52, 26, -51, 30, 54, -47, -49, -48, -50,
	41, 45, 47, 42, 43, 44, 48, -117, 22, -39,
	-163, -116, 134, -115, 22, -113, 58, -51, -165, 54,
	11, 52, 54, -93, -111, -108, 58, 30, 80, 109,
	55, 54, -124, -127, -129, -128, -125, -126, 166, 167,
	106, 170, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 128, 162, 163, 164, 165, 149, 150, 151,
	152, 153, 154, 155, 157, 158, 159, 160, 161, 56,
	-119, 119, -107, -51, 72, -51, -119, 120, -51, 23,
	51, -51, -114, -113, -105, -119, -119, -119, -119, -119,
	-119, -119, -119, -119, -119, -51, 9, 90, 54, 18,
	109, 54, -85, 24, 25, -86, -164, -30, -62, -107,
	59, 62, -29, 42, -51, -37, -37, -67, 67, 72,
	68, 69, -109, 97, -114, -108, -105, -61, -68, -71,
	-74, 63, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -120, 56, 58, 56, -60, -60, -107, -35, 21,
	-34, -36, -164, 54, -164, -2, -34, -34, -37, -37,
	-34, -28, -76, -77, 76, -107, -164, -34, -35, -34,
	-34, -90, 134, -51, -93, -40, -41, -41, -40, -41,
	41, 41, 41, 46, 41, 46, 41, -48, -113, -164,
	-54, 49, 121, 50, -163, -115, -90, -39, -51, -95,
	-118, -37, -108, -114, -149, -150, -151, -108, 58, 59,
	-144, -145, -152, 124, 123, -146, 118, 28, -140, 67,
	72, -136, 186, -130, 53, -130, -130, -130, -130, -134,
	169, -134, -134, -134, 53, -130, -130, -130, -138, 53,
	-138, -138, -139, 53, -139, -112, 52, -51, -160, 216,
	23, -101, 115, -157, 113, 183, 169, 65, 29, 114,
	15, 208, 134, 219, 56, 135, -51, -51, -119, 37,
	-37, -37, -84, -87, -96, 19, 11, 33, 33, -34,
	67, 68, 69, 109, -163, -68, -61, -61, -61, -33,
	129, 71, -164, -164, -34, 54, -37, -164, -164, -164,
	54, 52, 22, -164, -34, -79, -77, 78, -37, -164,
	-164, -164, -164, -164, -59, 30, 33, -2, -163, -163,
	-55, 12, -44, -43, 51, 52, -45, 51, -43, 41,
	41, 118, 118, 118, -91, -107, -55, -55, 109, 54,
	-151, 80, 53, 28, -146, 56, 56, -131, 29, 67,
	-137, 187, 59, -134, -134, -135, 105, 30, -135, -135,
	-135, -143, 58, 59, 59, 51, -107, -119, -159, -158,
	-108, -118, -102, -103, 120, 22, 118, 28, 134, -119,
	38, -51, -38, 11, 97, -108, -35, -33, 71, -61,
	-61, -164, -36, -123, 106, 166, 128, 164, 160, 180,
	171, 185, 162, 186, -120, -123, 213, -82, 79, -37,
	77, -92, 51, -93, -70, -72, -71, -163, -2, -88,
	-107, -91, -82, -37, -37, 53, -37, -163, -163, -163,
	-164, 54, -82, -150, -151, -154, -153, -107, 56, -133,
	51, 58, 59, 60, 67, 198, 55, -135, -135, 56,
	56, 106, 55, 54, 54, 55, 54, -51, 54, 80,
	-51, -118, -107, -55, -39, -164, -61, -164, -130, -130,
	-130, -139, -130, 154, -130, 154, -164, -164, -163, -32,
	211, -37, 27, -92, 54, -164, -164, -164, 54, 109,
	-164, -86, -89, -107, -89, -89, -89, -116, -107, -86,
	55, 54, -130, -141, 183, 9, 58, 59, 59, -119,
	-158, -151, 26, -80, 13, -134, 56, -61, -164, 58,
	28, -72, 33, -2, -163, -107, -107, 54, 55, -164,
	-164, -164, -54, -112, -153, -142, 124, 28, 123, 198,
	55, 55, -163, -81, 14, 16, -31, 90, 216, 9,
	-70, -2, 109, -107, -132, 65, 28, 28, -155, -156,
	134, -37, -69, -164, 214, 48, 217, -93, -164, -107,
	58, -164, 54, -107, 38, 215, 218, -156, 33, 38,
	136, 216, 137, 217, -163, 218, -61, 133, -164, -164,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 442, 0, 217, 217, 217, 217, 217, 217, 0,
	502, 484, 0, 0, 0, 0, 203, 207, 208, 0,
	210, 211, 682, 682, 682, 682, 682, 0, 33, 34,
	680, 1, 3, 450, 0, 0, 221, 224, 219, 0,
	484, 0, 0, 0, 54, 0, 0, 670, 0, 671,
	482, 503, 504, 507, 508, 603, 604, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 672, 673, 674, 675, 676, 677, 678, 679,
	0, 0, 485, 0, 480, 0, 480, 0, 178, 288,
	511, 512, 670, 671, 0, 0, 0, 0, 683, 683,
	683, 683, 0, 683, 683, 196, 198, 199, 200, 201,
	683, 204, 205, 206, 209, 212, 213, 214, 215, 216,
	27, 454, 0, 0, 442, 29, 0, 217, 222, 223,
	227, 225, 226, 218, 0, 235, 239, 0, 296, 0,
	301, 303, -2, -2, 0, 338, 339, 340, 341, 342,
	0, 0, 0, 0, 0, 0, 0, 365, 366, 367,
	368, 427, 428, 429, 430, 431, 432, 433, 434, 305,
	306, 424, 474, 0, 0, 0, 0, 0, 0, 0,
	415, 0, 389, 389, 389, 389, 389, 389, 389, 389,
	0, 0, 0, 0, 0, 0, 246, 248, 249, 250,
	269, 0, 271, 0, 0, 40, 44, 0, 0, 475,
	-2, -2, -2, 610, -2, 0, 424, 0, 0, 66,
	0, 0, 683, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 177, 0, 179, 683, 683, 683,
	683, 683, 683, 683, 683, 188, 684, 685, 509, 510,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 189, 190,
	191, 683, 683, 193, 194, 0, 202, 28, 681, 22,
	0, 0, 451, 0, 443, 444, 447, 450, 27, 224,
	0, 229, 228, 220, 0, 236, 0, 0, 0, 240,
	0, 242, 243, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 323, 324, 325, 326, 327, 328,
	329, 302, 0, 316, 0, 0, 0, 358, 359, 360,
	361, 362, 363, 0, 231, 27, 0, 336, 0, 0,
	0, 0, 0, 0, 227, 0, 416, 0, 381, 0,
	382, 383, 384, 385, 386, 387, 388, 0, 231, 0,
	0, 42, 0, 287, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 279, 0, 0, 0, 0, 270, 0,
	0, 290, 641, 272, 0, 274, 275, 42, 0, 0,
	38, 39, 0, 45, 682, 50, 51, 48, 0, 0,
	154, 0, 119, 115, 71, 72, 108, 74, 108, 108,
	108, 108, 132, 132, 132, 132, 100, 101, 102, 103,
	104, 0, 87, 108, 108, 108, 91, 75, 76, 77,
	78, 79, 80, 81, 110, 110, 110, 112, 112, 505,
	56, 0, 59, 64, 0, 0, 166, 0, 174, 481,
	0, 683, 289, 513, 514, 180, 181, 182, 183, 184,
	185, 186, 187, 192, 195, 197, 455, 0, 0, 0,
	0, 0, 446, 448, 449, 454, 30, 227, 0, 435,
	0, 0, 0, 230, 25, 297, 298, 300, 317, 0,
	319, 321, 241, 237, 0, 425, -2, 307, 308, 332,
	333, 334, 0, 0, 0, 0, 330, 312, 0, 343,
	344, 345, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 357, 400, 401, 0, 355, 356, 364, 0, 0,
	232, 233, 335, 0, 473, 27, 0, 0, 0, 0,
	0, 0, 422, 419, 0, 0, 390, 0, 0, 0,
	0, 0, 0, 286, 294, 247, 265, 267, 0, 262,
	277, 278, 280, 0, 282, 0, 284, 285, 251, 252,
	253, 0, 0, 0, 0, 273, 294, 294, 41, 476,
	46, 477, 425, 0, 65, 155, 157, 160, 161, 162,
	67, 68, 0, 0, 0, 0, 149, 150, 122, 120,
	0, 117, 116, 73, 0, 132, 132, 94, 95, 135,
	0, 135, 135, 135, 0, 88, 89, 90, 82, 0,
	83, 84, 85, 0, 86, 0, 0, 683, 58, 0,
	483, 682, 497, 167, 486, 487, 488, 489, 490, 491,
	492, 493, 494, 495, 496, 0, 173, 683, 176, 0,
	452, 453, 445, 23, 0, 478, 479, 436, 437, 244,
	318, 320, 322, 0, 231, 309, 330, 313, 0, 310,
	0, 0, 304, 369, 0, 0, 337, -2, 372, 373,
	0, 0, 0, 0, 442, 0, 420, 0, 0, 380,
	391, 392, 393, 394, 467, 0, 0, -2, 0, 0,
	442, 0, 259, 266, 0, 0, 260, 0, 261, 281,
	283, 0, 0, 0, 0, 257, 442, 37, 0, 0,
	158, 0, 0, 145, 0, 147, 148, 128, 0, 121,
	70, 118, 0, 135, 135, 96, 0, 0, 97, 98,
	99, 0, 106, 0, 0, 0, 506, 57, 60, 61,
	0, 163, 0, 682, 498, 499, 500, 501, 0, 175,
	456, 24, 294, 0, 238, 426, 0, 311, 0, 331,
	314, 370, 234, 0, 108, 108, 405, 108, 112, 408,
	108, 410, 108, 413, 0, 0, 0, 417, 379, 423,
	0, 31, 0, 467, 457, 469, 471, 0, 27, 0,
	463, 0, 450, 295, 263, 0, 268, 0, 0, 0,
	271, 0, 450, 156, 159, 0, 151, 108, 146, 130,
	0, 123, 124, 125, 126, 127, 109, 92, 93, 136,
	133, 134, 105, 0, 0, 113, 0, 683, 0, 0,
	164, 165, 0, 438, 245, 371, 315, 374, 402, 132,
	406, 407, 409, 411, 412, 414, 376, 375, 0, 0,
	0, 421, 0, 32, 0, 472, -2, 0, 0, 0,
	43, 35, 0, 255, 0, 0, 0, 290, 258, 36,
	505, 0, 153, 137, 131, 0, 107, 0, 0, 55,
	62, 63, 0, 440, 0, 403, 404, 395, 378, 418,
	0, 470, 0, -2, 0, 465, 464, 0, 264, 291,
	292, 293, 254, 144, 152, 142, 0, 139, 141, 129,
	111, 114, 0, 26, 0, 0, 0, 0, 0, 0,
	460, 27, 0, 256, 69, 0, 138, 140, 0, 169,
	0, 441, 439, 377, 0, 0, 0, 468, -2, 466,
	143, 168, 0, 0, 396, 0, 399, 170, 0, 397,
	0, 0, 0, 0, 0, 398, 0, 0, 171, 172,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 220,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:285
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:290
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:291
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:295
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:318
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:326
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:336
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:353
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:359
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:370
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:382
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:394
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:404
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:410
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:414
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:424
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:428
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:433
		{
			yyVAL.partitions = nil
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:437
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].updateExprs}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:451
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:462
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:466
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.str = SessionStr
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:476
		{
			yyVAL.str = GlobalStr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:482
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:487
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:492
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:496
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:500
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:509
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:520
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:531
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:537
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:551
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:556
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:560
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:566
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:587
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:745
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:759
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:763
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:771
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:781
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:789
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:808
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:816
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:821
		{
			yyVAL.optVal = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:825
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:829
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:833
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:841
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:846
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:850
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:864
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:868
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:872
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:877
		{
			yyVAL.str = ""
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:890
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:894
		{
			yyVAL.colKeyOpt = colKey
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:911
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:917
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Using: yyDollar[5].colIdent}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:923
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:931
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:955
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:961
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:966
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:974
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:986
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:990
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:996
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1014
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1019
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 171:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1066
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1074
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1079
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.str = SessionStr
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.str = GlobalStr
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.statement = &Begin{}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.statement = &Begin{}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.statement = &Commit{}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.statement = &Rollback{}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.statement = &OtherRead{}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.statement = &OtherRead{}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.statement = &OtherRead{}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1272
		{
			setAllowComments(yylex, true)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.bytes2 = nil
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.str = UnionStr
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.str = UnionAllStr
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = UnionDistinctStr
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.str = ""
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.str = SQLCacheStr
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = ""
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = DistinctStr
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = ""
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = StraightJoinHint
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.selectExprs = nil
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1492
		{
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1498
		{
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.empty = struct{}{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.empty = struct{}{}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = JoinStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = JoinStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = JoinStr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.str = StraightJoinStr
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = LeftJoinStr
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = LeftJoinStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.str = RightJoinStr
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.str = RightJoinStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = NaturalJoinStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1571
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.indexHints = nil
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.expr = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 315:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.str = IsNullStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.str = IsNotNullStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.str = IsTrueStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.str = IsNotTrueStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.str = IsFalseStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.str = IsNotFalseStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.str = EqualStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.str = LessThanStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.str = GreaterThanStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.str = LessEqualStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.str = GreaterEqualStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.str = NotEqualStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1902
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1910
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1932
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 374:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 375:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 377:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.str = ""
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.str = BooleanModeStr
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = QueryExpansionStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = nil
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.str = string("")
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &NullVal{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.exprs = nil
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.orderBy = nil
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.str = AscScr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.str = AscScr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.str = DescScr
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.limit = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.str = ForUpdateStr
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.str = ShareModeStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2373
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2386
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.updateExprs = nil
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.byt = 0
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.byt = 1
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.str = IgnoreStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2759
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			decNesting(yylex)
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2773
		{
			forceEOF(yylex)
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2778
		{
			forceEOF(yylex)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2782
		{
			forceEOF(yylex)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

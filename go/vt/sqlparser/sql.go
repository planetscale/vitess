// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DISTINCTROW = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const SQL_CALC_FOUND_ROWS = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const UNIQUE = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const INDEXES = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const SEQUENCE = 57493
const BEGIN = 57494
const START = 57495
const TRANSACTION = 57496
const COMMIT = 57497
const ROLLBACK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const GEOMETRY = 57532
const POINT = 57533
const LINESTRING = 57534
const POLYGON = 57535
const GEOMETRYCOLLECTION = 57536
const MULTIPOINT = 57537
const MULTILINESTRING = 57538
const MULTIPOLYGON = 57539
const NULLX = 57540
const AUTO_INCREMENT = 57541
const APPROXNUM = 57542
const SIGNED = 57543
const UNSIGNED = 57544
const ZEROFILL = 57545
const COLLATION = 57546
const DATABASES = 57547
const TABLES = 57548
const VITESS_METADATA = 57549
const VSCHEMA = 57550
const FULL = 57551
const PROCESSLIST = 57552
const COLUMNS = 57553
const FIELDS = 57554
const ENGINES = 57555
const PLUGINS = 57556
const EXTENDED = 57557
const NAMES = 57558
const CHARSET = 57559
const GLOBAL = 57560
const SESSION = 57561
const ISOLATION = 57562
const LEVEL = 57563
const READ = 57564
const WRITE = 57565
const ONLY = 57566
const REPEATABLE = 57567
const COMMITTED = 57568
const UNCOMMITTED = 57569
const SERIALIZABLE = 57570
const CURRENT_TIMESTAMP = 57571
const DATABASE = 57572
const CURRENT_DATE = 57573
const CURRENT_TIME = 57574
const LOCALTIME = 57575
const LOCALTIMESTAMP = 57576
const UTC_DATE = 57577
const UTC_TIME = 57578
const UTC_TIMESTAMP = 57579
const REPLACE = 57580
const CONVERT = 57581
const CAST = 57582
const SUBSTR = 57583
const SUBSTRING = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const TIMESTAMPADD = 57587
const TIMESTAMPDIFF = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const ARRAY = 57597
const CUME_DIST = 57598
const DESCRIPTION = 57599
const DENSE_RANK = 57600
const EMPTY = 57601
const EXCEPT = 57602
const FIRST_VALUE = 57603
const GROUPING = 57604
const GROUPS = 57605
const JSON_TABLE = 57606
const LAG = 57607
const LAST_VALUE = 57608
const LATERAL = 57609
const LEAD = 57610
const MEMBER = 57611
const NTH_VALUE = 57612
const NTILE = 57613
const OF = 57614
const OVER = 57615
const PERCENT_RANK = 57616
const RANK = 57617
const RECURSIVE = 57618
const ROW_NUMBER = 57619
const SYSTEM = 57620
const WINDOW = 57621
const ACTIVE = 57622
const ADMIN = 57623
const BUCKETS = 57624
const CLONE = 57625
const COMPONENT = 57626
const DEFINITION = 57627
const ENFORCED = 57628
const EXCLUDE = 57629
const FOLLOWING = 57630
const GEOMCOLLECTION = 57631
const GET_MASTER_PUBLIC_KEY = 57632
const HISTOGRAM = 57633
const HISTORY = 57634
const INACTIVE = 57635
const INVISIBLE = 57636
const LOCKED = 57637
const MASTER_COMPRESSION_ALGORITHMS = 57638
const MASTER_PUBLIC_KEY_PATH = 57639
const MASTER_TLS_CIPHERSUITES = 57640
const MASTER_ZSTD_COMPRESSION_LEVEL = 57641
const NESTED = 57642
const NETWORK_NAMESPACE = 57643
const NOWAIT = 57644
const NULLS = 57645
const OJ = 57646
const OLD = 57647
const OPTIONAL = 57648
const ORDINALITY = 57649
const ORGANIZATION = 57650
const OTHERS = 57651
const PATH = 57652
const PERSIST = 57653
const PERSIST_ONLY = 57654
const PRECEDING = 57655
const PRIVILEGE_CHECKS_USER = 57656
const PROCESS = 57657
const RANDOM = 57658
const REFERENCE = 57659
const REQUIRE_ROW_FORMAT = 57660
const RESOURCE = 57661
const RESPECT = 57662
const RESTART = 57663
const RETAIN = 57664
const REUSE = 57665
const ROLE = 57666
const SECONDARY = 57667
const SECONDARY_ENGINE = 57668
const SECONDARY_LOAD = 57669
const SECONDARY_UNLOAD = 57670
const SKIP = 57671
const SRID = 57672
const THREAD_PRIORITY = 57673
const TIES = 57674
const UNBOUNDED = 57675
const VCPU = 57676
const VISIBLE = 57677
const FORMAT = 57678
const TREE = 57679
const VITESS = 57680

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 34,
	-2, 4,
	-1, 39,
	33, 300,
	128, 300,
	140, 300,
	165, 314,
	166, 314,
	-2, 302,
	-1, 45,
	1, 971,
	356, 971,
	-2, 323,
	-1, 63,
	37, 346,
	-2, 354,
	-1, 321,
	37, 347,
	-2, 359,
	-1, 322,
	37, 348,
	-2, 360,
	-1, 337,
	116, 676,
	-2, 672,
	-1, 338,
	116, 677,
	-2, 673,
	-1, 407,
	86, 927,
	-2, 67,
	-1, 408,
	86, 844,
	-2, 68,
	-1, 413,
	86, 812,
	-2, 638,
	-1, 415,
	86, 875,
	-2, 640,
	-1, 598,
	5, 34,
	-2, 327,
	-1, 723,
	1, 384,
	5, 384,
	12, 384,
	13, 384,
	14, 384,
	15, 384,
	17, 384,
	19, 384,
	30, 384,
	31, 384,
	44, 384,
	45, 384,
	46, 384,
	47, 384,
	48, 384,
	50, 384,
	51, 384,
	54, 384,
	55, 384,
	57, 384,
	58, 384,
	356, 384,
	-2, 402,
	-1, 726,
	55, 49,
	57, 49,
	-2, 53,
	-1, 885,
	116, 679,
	-2, 675,
	-1, 1120,
	5, 35,
	-2, 470,
	-1, 1151,
	5, 34,
	-2, 611,
	-1, 1398,
	5, 35,
	-2, 612,
	-1, 1451,
	5, 34,
	-2, 614,
	-1, 1526,
	5, 35,
	-2, 615,
}

const yyPrivate = 57344

const yyLast = 16387

var yyAct = [...]int{

	337, 1560, 1358, 1550, 1247, 1516, 1431, 1299, 1464, 1418,
	1154, 1172, 342, 368, 355, 1332, 974, 1001, 310, 1300,
	678, 1044, 1296, 1010, 997, 1198, 677, 3, 567, 1155,
	1306, 1312, 59, 1000, 82, 825, 910, 1271, 272, 917,
	292, 272, 1112, 412, 1224, 844, 725, 1215, 300, 1014,
	1098, 739, 972, 961, 976, 940, 887, 323, 719, 607,
	620, 613, 738, 401, 406, 720, 954, 536, 630, 272,
	82, 728, 1040, 537, 272, 340, 272, 692, 398, 851,
	309, 58, 301, 7, 270, 6, 5, 1553, 1063, 1537,
	556, 1030, 693, 1548, 1524, 302, 303, 304, 305, 63,
	1545, 308, 1062, 1359, 1536, 1523, 1288, 1390, 541, 84,
	85, 86, 1327, 1328, 1326, 400, 268, 264, 265, 266,
	538, 26, 540, 54, 29, 30, 329, 65, 66, 67,
	68, 69, 84, 85, 86, 991, 84, 85, 86, 992,
	993, 596, 740, 1061, 741, 1490, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 307, 380,
	654, 386, 387, 384, 385, 383, 382, 381, 306, 260,
	1206, 56, 258, 1023, 262, 388, 389, 573, 1186, 575,
	1024, 1185, 591, 1249, 1187, 1421, 592, 589, 590, 276,
	1031, 1381, 920, 1058, 1055, 1056, 279, 1054, 576, 298,
	595, 84, 85, 86, 286, 1379, 814, 584, 585, 813,
	594, 572, 574, 1547, 1251, 811, 1544, 1517, 1246, 955,
	1509, 557, 1564, 543, 1015, 1568, 262, 1252, 852, 853,
	1065, 1068, 818, 581, 802, 1243, 1250, 267, 284, 1322,
	1465, 1245, 1473, 546, 291, 812, 1321, 815, 1173, 1175,
	1320, 539, 275, 263, 578, 1467, 666, 667, 987, 272,
	548, 549, 1498, 1401, 272, 1017, 558, 1060, 261, 1075,
	272, 277, 1074, 1129, 1257, 1182, 272, 565, 1139, 1106,
	571, 82, 858, 734, 634, 82, 563, 82, 644, 1059,
	259, 654, 998, 82, 1272, 654, 1126, 570, 288, 280,
	855, 289, 290, 296, 849, 547, 845, 281, 283, 293,
	555, 278, 295, 294, 839, 627, 562, 1491, 1234, 629,
	1522, 1017, 564, 1466, 409, 553, 598, 1174, 580, 1064,
	1017, 629, 82, 1274, 1562, 569, 1031, 1563, 1507, 1561,
	582, 1244, 616, 1242, 1066, 1482, 615, 1474, 1472, 1230,
	1231, 1232, 84, 85, 86, 603, 604, 559, 560, 561,
	1310, 84, 85, 86, 742, 1016, 72, 1276, 602, 1280,
	55, 1275, 1290, 1273, 941, 84, 85, 86, 1278, 666,
	667, 621, 941, 601, 1136, 599, 600, 1277, 861, 862,
	550, 846, 551, 894, 1204, 552, 272, 272, 272, 840,
	1279, 1281, 666, 667, 73, 82, 804, 892, 893, 891,
	1124, 82, 1123, 1125, 542, 1512, 617, 568, 1233, 624,
	1528, 1016, 1427, 1238, 1235, 1226, 1236, 1229, 1345, 1225,
	1016, 628, 627, 1227, 1228, 1013, 1011, 1020, 1012, 1569,
	628, 627, 717, 1021, 726, 1009, 1015, 1237, 629, 718,
	647, 648, 649, 650, 651, 644, 857, 629, 654, 695,
	697, 699, 701, 703, 705, 706, 1426, 628, 627, 737,
	1219, 732, 628, 627, 696, 698, 727, 702, 704, 606,
	707, 1218, 1570, 583, 629, 586, 877, 879, 880, 629,
	1207, 597, 878, 544, 545, 856, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 1530, 1508,
	654, 257, 1445, 619, 628, 627, 1424, 1216, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	1085, 629, 654, 84, 85, 86, 272, 1103, 1104, 1105,
	800, 82, 830, 803, 56, 805, 272, 272, 82, 82,
	82, 1113, 628, 627, 272, 606, 890, 272, 1479, 1292,
	272, 823, 824, 24, 272, 1478, 82, 1297, 535, 629,
	1309, 82, 82, 82, 272, 82, 82, 1341, 395, 396,
	1470, 1546, 750, 1532, 606, 82, 82, 84, 85, 86,
	1018, 912, 806, 807, 1309, 829, 1393, 84, 85, 86,
	816, 1189, 1387, 400, 1470, 1520, 822, 827, 642, 652,
	653, 645, 646, 647, 648, 649, 650, 651, 644, 82,
	835, 654, 84, 85, 86, 314, 272, 1470, 606, 1470,
	1499, 957, 82, 60, 863, 819, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 1470, 1469,
	654, 888, 1416, 1415, 1396, 911, 1403, 606, 958, 409,
	1400, 606, 1351, 1350, 913, 1347, 1348, 1347, 1346, 981,
	883, 729, 873, 870, 606, 870, 82, 26, 885, 872,
	643, 642, 652, 653, 645, 646, 647, 648, 649, 650,
	651, 644, 958, 606, 654, 922, 606, 922, 929, 932,
	881, 1149, 749, 748, 942, 1481, 1150, 924, 1099, 82,
	82, 358, 357, 360, 361, 362, 363, 272, 26, 1349,
	359, 364, 1099, 958, 1190, 272, 272, 56, 56, 272,
	272, 730, 990, 272, 272, 272, 82, 1142, 1141, 801,
	871, 870, 914, 915, 730, 729, 808, 809, 810, 82,
	537, 950, 951, 958, 859, 963, 966, 967, 968, 964,
	338, 965, 969, 956, 828, 1313, 1314, 1309, 56, 832,
	833, 834, 817, 836, 837, 731, 983, 733, 827, 735,
	1538, 982, 316, 841, 842, 984, 870, 1433, 731, 1248,
	729, 26, 1025, 980, 83, 1408, 1045, 985, 273, 989,
	988, 273, 1337, 272, 82, 1193, 82, 1041, 1067, 1313,
	1314, 344, 272, 272, 272, 272, 272, 1005, 272, 272,
	1450, 1046, 272, 82, 1036, 1035, 1434, 1048, 1555, 273,
	83, 1551, 56, 1339, 273, 1316, 273, 1297, 1220, 272,
	850, 56, 821, 1166, 272, 1164, 272, 272, 1167, 1049,
	1165, 272, 1319, 1318, 1163, 1032, 1033, 1034, 1069, 1070,
	1071, 1072, 1073, 1162, 1076, 1077, 1542, 1535, 1078, 1042,
	1043, 324, 272, 1082, 925, 926, 1256, 1087, 931, 934,
	935, 618, 1540, 1097, 325, 1080, 1096, 937, 1266, 884,
	1081, 622, 623, 327, 1090, 326, 1168, 1086, 967, 968,
	938, 1211, 885, 949, 747, 888, 952, 953, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	608, 1091, 654, 1092, 1101, 566, 1203, 1051, 1514, 1394,
	1102, 1100, 609, 1513, 1448, 1201, 1195, 1429, 820, 1026,
	1027, 1028, 1029, 963, 966, 967, 968, 964, 1108, 965,
	969, 971, 317, 318, 311, 1037, 1038, 1039, 1095, 272,
	272, 272, 272, 272, 324, 1370, 1094, 312, 60, 1369,
	1156, 272, 1260, 1099, 272, 593, 1130, 325, 272, 1127,
	843, 1151, 272, 625, 321, 322, 327, 1557, 326, 1495,
	409, 1557, 1556, 1422, 854, 1135, 62, 64, 57, 1188,
	924, 82, 1050, 1002, 1052, 1, 1549, 1360, 1430, 1057,
	1194, 1515, 1463, 1331, 1199, 1199, 1008, 1157, 1191, 273,
	1160, 1079, 999, 1169, 273, 1158, 1159, 1392, 1161, 71,
	273, 1178, 1177, 1180, 1179, 1181, 273, 534, 70, 1506,
	1200, 83, 1183, 838, 579, 83, 1007, 83, 1006, 82,
	82, 1471, 1420, 83, 1019, 1210, 1205, 1212, 1213, 1214,
	1022, 1338, 1196, 1197, 1202, 1511, 755, 643, 642, 652,
	653, 645, 646, 647, 648, 649, 650, 651, 644, 82,
	753, 654, 754, 752, 1217, 757, 756, 751, 285, 404,
	970, 743, 83, 1047, 272, 626, 74, 1241, 1240, 1053,
	1239, 848, 1223, 282, 587, 588, 287, 82, 662, 1093,
	1184, 1117, 1118, 884, 410, 403, 1304, 860, 1208, 1209,
	612, 1368, 1259, 1134, 689, 911, 1254, 1255, 939, 1133,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	1258, 343, 654, 876, 356, 353, 354, 1264, 865, 1148,
	636, 664, 1265, 82, 82, 341, 273, 273, 273, 333,
	1298, 1282, 1156, 1283, 1301, 83, 1289, 722, 715, 962,
	960, 83, 959, 399, 1315, 1090, 1311, 82, 721, 1303,
	869, 320, 1389, 885, 1489, 319, 936, 299, 28, 61,
	328, 82, 1317, 82, 82, 20, 19, 1199, 1199, 18,
	22, 17, 16, 15, 554, 1308, 32, 1323, 723, 23,
	1330, 1324, 1344, 14, 13, 12, 11, 10, 1334, 9,
	8, 272, 1335, 1336, 1329, 4, 21, 313, 25, 2,
	1325, 0, 0, 1342, 1343, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 335, 0, 82, 1222, 1361,
	82, 82, 82, 272, 0, 1002, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 369, 53, 1352, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 1253, 0, 0,
	0, 0, 0, 1366, 1367, 1386, 0, 1355, 1354, 0,
	1356, 0, 0, 0, 0, 0, 273, 0, 1377, 1365,
	0, 83, 0, 0, 0, 0, 273, 273, 83, 83,
	83, 0, 0, 0, 273, 0, 0, 273, 0, 53,
	273, 1395, 1156, 0, 273, 0, 83, 315, 0, 0,
	82, 83, 83, 83, 273, 83, 83, 0, 82, 1405,
	0, 1404, 0, 1414, 0, 83, 83, 1191, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	82, 1263, 0, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 945, 1438, 654, 0, 83,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 1436, 83, 0, 1293, 0, 0, 0, 0, 0,
	0, 82, 82, 0, 82, 0, 0, 0, 1444, 82,
	1301, 82, 82, 82, 272, 0, 1449, 82, 1457, 0,
	1458, 1460, 1461, 1456, 0, 0, 1451, 0, 0, 0,
	1462, 0, 1468, 0, 82, 272, 83, 1475, 1423, 0,
	1425, 0, 0, 1483, 0, 1002, 0, 1002, 1476, 889,
	1477, 0, 0, 1374, 1375, 0, 1376, 0, 1496, 1378,
	0, 1380, 0, 0, 1301, 0, 1505, 1437, 0, 83,
	83, 82, 1504, 367, 1503, 0, 0, 273, 0, 1497,
	0, 1484, 82, 82, 0, 273, 273, 0, 1518, 273,
	273, 0, 0, 273, 273, 273, 83, 0, 0, 82,
	1519, 0, 0, 0, 0, 0, 1525, 81, 1156, 83,
	272, 0, 1263, 0, 1417, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 1541, 1539, 82,
	723, 0, 1385, 411, 723, 0, 577, 0, 1543, 0,
	577, 1428, 577, 1554, 0, 0, 1529, 0, 577, 1565,
	0, 0, 0, 273, 83, 53, 83, 0, 0, 0,
	0, 0, 273, 273, 273, 273, 273, 0, 273, 273,
	0, 53, 273, 83, 1002, 1384, 0, 0, 0, 0,
	0, 668, 669, 670, 671, 672, 673, 674, 675, 273,
	0, 0, 663, 0, 273, 665, 273, 273, 0, 0,
	0, 273, 0, 0, 1432, 0, 0, 0, 0, 0,
	643, 642, 652, 653, 645, 646, 647, 648, 649, 650,
	651, 644, 273, 676, 654, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 0, 691, 694, 694, 694, 700,
	694, 694, 700, 694, 708, 709, 710, 711, 712, 713,
	714, 0, 724, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 0, 0, 654, 0, 0,
	0, 0, 0, 723, 0, 605, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 0, 0,
	654, 0, 0, 889, 645, 646, 647, 648, 649, 650,
	651, 644, 331, 0, 654, 0, 0, 0, 0, 273,
	273, 273, 273, 273, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 273, 0, 1432, 1002, 273, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 0, 411, 0,
	411, 83, 0, 0, 0, 0, 411, 0, 0, 0,
	723, 723, 723, 723, 723, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 632, 577, 0, 0, 83,
	83, 0, 0, 577, 577, 577, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 0, 0,
	654, 577, 0, 0, 0, 0, 577, 577, 577, 83,
	577, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 577, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 0, 886, 0, 744, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 0, 0, 0, 83, 0, 0,
	946, 0, 0, 0, 0, 0, 680, 638, 0, 641,
	0, 83, 0, 83, 83, 655, 656, 657, 658, 659,
	660, 661, 0, 639, 640, 637, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 0, 0,
	654, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 864, 0, 724, 0, 0, 0, 724, 0,
	0, 273, 0, 0, 0, 0, 0, 83, 0, 0,
	83, 83, 83, 273, 411, 0, 0, 0, 83, 0,
	0, 411, 411, 411, 610, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 0, 0, 411, 411, 411, 635, 411, 411,
	0, 0, 0, 921, 923, 0, 0, 0, 411, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 577, 0,
	83, 690, 866, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 632, 0, 0, 411, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 1109, 1110,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 83, 0, 83, 943, 0, 0, 0, 83,
	0, 83, 83, 83, 273, 0, 0, 83, 0, 0,
	0, 0, 947, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1152, 1153, 411, 0, 724, 724, 724, 724, 724, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 1176, 83, 83, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 411, 83, 411,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 1116, 0, 0, 411, 0, 0, 83,
	1120, 1121, 1122, 0, 0, 0, 847, 1128, 0, 0,
	1131, 1132, 0, 0, 0, 577, 0, 0, 1138, 0,
	0, 0, 1140, 0, 0, 1143, 1144, 1145, 1146, 1147,
	0, 0, 411, 0, 0, 0, 0, 0, 0, 0,
	874, 875, 0, 0, 577, 0, 0, 0, 1171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 1285, 0, 1286, 1287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 1295, 0,
	0, 0, 0, 679, 0, 0, 927, 928, 0, 0,
	26, 27, 54, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 53, 46,
	0, 0, 0, 0, 31, 50, 51, 0, 0, 0,
	0, 943, 611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 1340,
	56, 0, 0, 0, 0, 996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 297, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1270, 0, 0, 0, 332, 0,
	0, 402, 0, 0, 0, 0, 271, 0, 271, 0,
	0, 0, 1372, 33, 34, 36, 35, 38, 0, 52,
	0, 0, 1221, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 47, 45, 0, 0, 48, 49, 37,
	0, 0, 411, 0, 1388, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 42, 0, 43, 44, 0, 1088,
	1089, 0, 614, 0, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 0, 0, 0, 1410, 1411, 1412, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 943, 0, 0, 1305, 1307, 0, 0,
	1439, 1440, 1441, 1442, 1443, 1119, 0, 0, 1446, 1447,
	1371, 0, 0, 0, 0, 0, 0, 1373, 0, 55,
	1307, 0, 0, 0, 1137, 0, 0, 0, 1382, 1383,
	0, 0, 1302, 0, 411, 1452, 411, 1333, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 1397, 1398,
	1399, 0, 1402, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 1480, 271, 0, 0, 1413,
	0, 0, 271, 0, 0, 0, 0, 0, 271, 0,
	773, 0, 0, 0, 0, 0, 1302, 0, 53, 0,
	1357, 0, 0, 1362, 1363, 1364, 0, 0, 0, 0,
	0, 411, 0, 786, 789, 790, 791, 792, 793, 794,
	0, 795, 796, 797, 798, 799, 774, 775, 776, 777,
	758, 759, 787, 332, 761, 0, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 778, 779, 780, 781,
	782, 783, 784, 785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1558, 0,
	0, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 1419, 1261, 1552, 0, 1485, 1486, 1487, 1488, 0,
	1492, 0, 1493, 1494, 0, 788, 411, 0, 271, 271,
	271, 0, 0, 411, 1500, 0, 1501, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 0, 0,
	0, 0, 0, 1526, 1453, 1454, 0, 1455, 0, 0,
	0, 0, 1419, 0, 1419, 1419, 1419, 0, 0, 0,
	1333, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1566, 1567, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 411, 411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 943,
	0, 0, 1527, 0, 0, 0, 0, 0, 271, 271,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 271,
	0, 1533, 271, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 1391, 271, 0, 0, 0,
	0, 0, 1419, 0, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 1407, 0, 0, 1409,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 332, 332, 0, 0, 332, 332,
	332, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 332, 332, 332, 332, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 271, 978, 0,
	0, 271, 271, 0, 0, 271, 986, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 271, 271, 271, 271, 0,
	271, 271, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 271, 0, 1083, 1084,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 271, 271, 271, 271, 271, 0, 0, 0, 0,
	0, 0, 0, 1170, 0, 0, 271, 0, 0, 0,
	978, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 509, 0, 466, 524, 439, 456, 532, 457,
	460, 497, 424, 479, 172, 454, 978, 443, 419, 450,
	420, 441, 468, 116, 472, 438, 511, 482, 523, 144,
	444, 530, 146, 488, 0, 218, 160, 271, 0, 0,
	470, 513, 477, 506, 465, 498, 429, 487, 525, 455,
	495, 526, 0, 0, 0, 84, 85, 86, 0, 1003,
	1004, 0, 0, 0, 0, 0, 106, 0, 492, 520,
	452, 494, 496, 418, 489, 0, 422, 425, 531, 516,
	447, 448, 1192, 0, 0, 0, 0, 0, 0, 469,
	478, 503, 463, 0, 0, 0, 0, 0, 944, 0,
	0, 445, 0, 486, 0, 0, 0, 426, 423, 0,
	0, 467, 271, 0, 0, 428, 0, 446, 504, 0,
	416, 125, 508, 515, 464, 274, 519, 462, 461, 522,
	191, 0, 222, 128, 143, 102, 140, 88, 98, 0,
	127, 169, 198, 202, 512, 442, 451, 110, 449, 200,
	179, 238, 485, 181, 199, 147, 228, 192, 237, 247,
	248, 225, 245, 252, 215, 91, 224, 236, 107, 210,
	93, 234, 221, 158, 137, 138, 92, 0, 196, 115,
	123, 112, 171, 231, 232, 111, 255, 99, 244, 95,
	100, 243, 165, 227, 235, 159, 152, 94, 233, 157,
	151, 142, 119, 130, 189, 149, 190, 131, 162, 161,
	163, 0, 421, 0, 219, 241, 256, 104, 437, 226,
	250, 251, 0, 0, 105, 124, 118, 188, 122, 164,
	101, 133, 216, 141, 148, 195, 254, 178, 201, 108,
	240, 217, 433, 436, 431, 432, 480, 481, 527, 528,
	529, 505, 427, 0, 434, 435, 0, 510, 517, 518,
	484, 87, 96, 145, 253, 193, 121, 242, 417, 430,
	114, 440, 0, 0, 453, 458, 459, 471, 473, 474,
	475, 476, 483, 490, 491, 493, 499, 500, 501, 502,
	507, 514, 533, 89, 90, 97, 103, 109, 113, 117,
	120, 126, 129, 132, 134, 135, 136, 139, 150, 153,
	154, 155, 156, 166, 167, 168, 170, 173, 174, 175,
	176, 177, 180, 182, 183, 184, 185, 186, 187, 194,
	197, 203, 204, 205, 206, 207, 208, 209, 211, 212,
	213, 214, 220, 223, 229, 230, 239, 246, 249, 521,
	509, 0, 466, 524, 439, 456, 532, 457, 460, 497,
	424, 479, 172, 454, 0, 443, 419, 450, 420, 441,
	468, 116, 472, 438, 511, 482, 523, 144, 444, 530,
	146, 488, 0, 218, 160, 0, 0, 0, 470, 513,
	477, 506, 465, 498, 429, 487, 525, 455, 495, 526,
	0, 0, 0, 84, 85, 86, 0, 1003, 1004, 0,
	0, 0, 0, 0, 106, 0, 492, 520, 452, 494,
	496, 418, 489, 0, 422, 425, 531, 516, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 469, 478, 503,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	0, 486, 0, 0, 0, 426, 423, 0, 0, 467,
	0, 0, 0, 428, 0, 446, 504, 0, 416, 125,
	508, 515, 464, 274, 519, 462, 461, 522, 191, 0,
	222, 128, 143, 102, 140, 88, 98, 0, 127, 169,
	198, 202, 512, 442, 451, 110, 449, 200, 179, 238,
	485, 181, 199, 147, 228, 192, 237, 247, 248, 225,
	245, 252, 215, 91, 224, 236, 107, 210, 93, 234,
	221, 158, 137, 138, 92, 0, 196, 115, 123, 112,
	171, 231, 232, 111, 255, 99, 244, 95, 100, 243,
	165, 227, 235, 159, 152, 94, 233, 157, 151, 142,
	119, 130, 189, 149, 190, 131, 162, 161, 163, 0,
	421, 0, 219, 241, 256, 104, 437, 226, 250, 251,
	0, 0, 105, 124, 118, 188, 122, 164, 101, 133,
	216, 141, 148, 195, 254, 178, 201, 108, 240, 217,
	433, 436, 431, 432, 480, 481, 527, 528, 529, 505,
	427, 0, 434, 435, 0, 510, 517, 518, 484, 87,
	96, 145, 253, 193, 121, 242, 417, 430, 114, 440,
	0, 0, 453, 458, 459, 471, 473, 474, 475, 476,
	483, 490, 491, 493, 499, 500, 501, 502, 507, 514,
	533, 89, 90, 97, 103, 109, 113, 117, 120, 126,
	129, 132, 134, 135, 136, 139, 150, 153, 154, 155,
	156, 166, 167, 168, 170, 173, 174, 175, 176, 177,
	180, 182, 183, 184, 185, 186, 187, 194, 197, 203,
	204, 205, 206, 207, 208, 209, 211, 212, 213, 214,
	220, 223, 229, 230, 239, 246, 249, 521, 509, 0,
	466, 524, 439, 456, 532, 457, 460, 497, 424, 479,
	172, 454, 0, 443, 419, 450, 420, 441, 468, 116,
	472, 438, 511, 482, 523, 144, 444, 530, 146, 488,
	0, 218, 160, 0, 0, 0, 470, 513, 477, 506,
	465, 498, 429, 487, 525, 455, 495, 526, 56, 0,
	0, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 492, 520, 452, 494, 496, 418,
	489, 0, 422, 425, 531, 516, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 469, 478, 503, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 445, 0, 486,
	0, 0, 0, 426, 423, 0, 0, 467, 0, 0,
	0, 428, 0, 446, 504, 0, 416, 125, 508, 515,
	464, 274, 519, 462, 461, 522, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	512, 442, 451, 110, 449, 200, 179, 238, 485, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 421, 0,
	219, 241, 256, 104, 437, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 433, 436,
	431, 432, 480, 481, 527, 528, 529, 505, 427, 0,
	434, 435, 0, 510, 517, 518, 484, 87, 96, 145,
	253, 193, 121, 242, 417, 430, 114, 440, 0, 0,
	453, 458, 459, 471, 473, 474, 475, 476, 483, 490,
	491, 493, 499, 500, 501, 502, 507, 514, 533, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 521, 509, 0, 466, 524,
	439, 456, 532, 457, 460, 497, 424, 479, 172, 454,
	0, 443, 419, 450, 420, 441, 468, 116, 472, 438,
	511, 482, 523, 144, 444, 530, 146, 488, 0, 218,
	160, 0, 0, 0, 470, 513, 477, 506, 465, 498,
	429, 487, 525, 455, 495, 526, 0, 0, 0, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 492, 520, 452, 494, 496, 418, 489, 0,
	422, 425, 531, 516, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 469, 478, 503, 463, 0, 0, 0,
	0, 0, 0, 1262, 0, 445, 0, 486, 0, 0,
	0, 426, 423, 0, 0, 467, 0, 0, 0, 428,
	0, 446, 504, 0, 416, 125, 508, 515, 464, 274,
	519, 462, 461, 522, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 512, 442,
	451, 110, 449, 200, 179, 238, 485, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 236, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 100, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 421, 0, 219, 241,
	256, 104, 437, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 164, 101, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 433, 436, 431, 432,
	480, 481, 527, 528, 529, 505, 427, 0, 434, 435,
	0, 510, 517, 518, 484, 87, 96, 145, 253, 193,
	121, 242, 417, 430, 114, 440, 0, 0, 453, 458,
	459, 471, 473, 474, 475, 476, 483, 490, 491, 493,
	499, 500, 501, 502, 507, 514, 533, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 521, 509, 0, 466, 524, 439, 456,
	532, 457, 460, 497, 424, 479, 172, 454, 0, 443,
	419, 450, 420, 441, 468, 116, 472, 438, 511, 482,
	523, 144, 444, 530, 146, 488, 0, 218, 160, 0,
	0, 0, 470, 513, 477, 506, 465, 498, 429, 487,
	525, 455, 495, 526, 0, 0, 0, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	492, 520, 452, 494, 496, 418, 489, 0, 422, 425,
	531, 516, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 469, 478, 503, 463, 0, 0, 0, 0, 0,
	0, 987, 0, 445, 0, 486, 0, 0, 0, 426,
	423, 0, 0, 467, 0, 0, 0, 428, 0, 446,
	504, 0, 416, 125, 508, 515, 464, 274, 519, 462,
	461, 522, 191, 0, 222, 128, 143, 102, 140, 88,
	98, 0, 127, 169, 198, 202, 512, 442, 451, 110,
	449, 200, 179, 238, 485, 181, 199, 147, 228, 192,
	237, 247, 248, 225, 245, 252, 215, 91, 224, 236,
	107, 210, 93, 234, 221, 158, 137, 138, 92, 0,
	196, 115, 123, 112, 171, 231, 232, 111, 255, 99,
	244, 95, 100, 243, 165, 227, 235, 159, 152, 94,
	233, 157, 151, 142, 119, 130, 189, 149, 190, 131,
	162, 161, 163, 0, 421, 0, 219, 241, 256, 104,
	437, 226, 250, 251, 0, 0, 105, 124, 118, 188,
	122, 164, 101, 133, 216, 141, 148, 195, 254, 178,
	201, 108, 240, 217, 433, 436, 431, 432, 480, 481,
	527, 528, 529, 505, 427, 0, 434, 435, 0, 510,
	517, 518, 484, 87, 96, 145, 253, 193, 121, 242,
	417, 430, 114, 440, 0, 0, 453, 458, 459, 471,
	473, 474, 475, 476, 483, 490, 491, 493, 499, 500,
	501, 502, 507, 514, 533, 89, 90, 97, 103, 109,
	113, 117, 120, 126, 129, 132, 134, 135, 136, 139,
	150, 153, 154, 155, 156, 166, 167, 168, 170, 173,
	174, 175, 176, 177, 180, 182, 183, 184, 185, 186,
	187, 194, 197, 203, 204, 205, 206, 207, 208, 209,
	211, 212, 213, 214, 220, 223, 229, 230, 239, 246,
	249, 521, 509, 0, 466, 524, 439, 456, 532, 457,
	460, 497, 424, 479, 172, 454, 0, 443, 419, 450,
	420, 441, 468, 116, 472, 438, 511, 482, 523, 144,
	444, 530, 146, 488, 0, 218, 160, 0, 0, 0,
	470, 513, 477, 506, 465, 498, 429, 487, 525, 455,
	495, 526, 0, 0, 0, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 492, 520,
	452, 494, 496, 418, 489, 0, 422, 425, 531, 516,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 469,
	478, 503, 463, 0, 0, 0, 0, 0, 0, 882,
	0, 445, 0, 486, 0, 0, 0, 426, 423, 0,
	0, 467, 0, 0, 0, 428, 0, 446, 504, 0,
	416, 125, 508, 515, 464, 274, 519, 462, 461, 522,
	191, 0, 222, 128, 143, 102, 140, 88, 98, 0,
	127, 169, 198, 202, 512, 442, 451, 110, 449, 200,
	179, 238, 485, 181, 199, 147, 228, 192, 237, 247,
	248, 225, 245, 252, 215, 91, 224, 236, 107, 210,
	93, 234, 221, 158, 137, 138, 92, 0, 196, 115,
	123, 112, 171, 231, 232, 111, 255, 99, 244, 95,
	100, 243, 165, 227, 235, 159, 152, 94, 233, 157,
	151, 142, 119, 130, 189, 149, 190, 131, 162, 161,
	163, 0, 421, 0, 219, 241, 256, 104, 437, 226,
	250, 251, 0, 0, 105, 124, 118, 188, 122, 164,
	101, 133, 216, 141, 148, 195, 254, 178, 201, 108,
	240, 217, 433, 436, 431, 432, 480, 481, 527, 528,
	529, 505, 427, 0, 434, 435, 0, 510, 517, 518,
	484, 87, 96, 145, 253, 193, 121, 242, 417, 430,
	114, 440, 0, 0, 453, 458, 459, 471, 473, 474,
	475, 476, 483, 490, 491, 493, 499, 500, 501, 502,
	507, 514, 533, 89, 90, 97, 103, 109, 113, 117,
	120, 126, 129, 132, 134, 135, 136, 139, 150, 153,
	154, 155, 156, 166, 167, 168, 170, 173, 174, 175,
	176, 177, 180, 182, 183, 184, 185, 186, 187, 194,
	197, 203, 204, 205, 206, 207, 208, 209, 211, 212,
	213, 214, 220, 223, 229, 230, 239, 246, 249, 521,
	509, 0, 466, 524, 439, 456, 532, 457, 460, 497,
	424, 479, 172, 454, 0, 443, 419, 450, 420, 441,
	468, 116, 472, 438, 511, 482, 523, 144, 444, 530,
	146, 488, 0, 218, 160, 0, 0, 0, 470, 513,
	477, 506, 465, 498, 429, 487, 525, 455, 495, 526,
	0, 0, 0, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 492, 520, 452, 494,
	496, 418, 489, 0, 422, 425, 531, 516, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 469, 478, 503,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	0, 486, 0, 0, 0, 426, 423, 0, 0, 467,
	0, 0, 0, 428, 0, 446, 504, 0, 416, 125,
	508, 515, 464, 274, 519, 462, 461, 522, 191, 0,
	222, 128, 143, 102, 140, 88, 98, 0, 127, 169,
	198, 202, 512, 442, 451, 110, 449, 200, 179, 238,
	485, 181, 199, 147, 228, 192, 237, 247, 248, 225,
	245, 252, 215, 91, 224, 236, 107, 210, 93, 234,
	221, 158, 137, 138, 92, 0, 196, 115, 123, 112,
	171, 231, 232, 111, 255, 99, 244, 95, 100, 243,
	165, 227, 235, 159, 152, 94, 233, 157, 151, 142,
	119, 130, 189, 149, 190, 131, 162, 161, 163, 0,
	421, 0, 219, 241, 256, 104, 437, 226, 250, 251,
	0, 0, 105, 124, 118, 188, 122, 164, 101, 133,
	216, 141, 148, 195, 254, 178, 201, 108, 240, 217,
	433, 436, 431, 432, 480, 481, 527, 528, 529, 505,
	427, 0, 434, 435, 0, 510, 517, 518, 484, 87,
	96, 145, 253, 193, 121, 242, 417, 430, 114, 440,
	0, 0, 453, 458, 459, 471, 473, 474, 475, 476,
	483, 490, 491, 493, 499, 500, 501, 502, 507, 514,
	533, 89, 90, 97, 103, 109, 113, 117, 120, 126,
	129, 132, 134, 135, 136, 139, 150, 153, 154, 155,
	156, 166, 167, 168, 170, 173, 174, 175, 176, 177,
	180, 182, 183, 184, 185, 186, 187, 194, 197, 203,
	204, 205, 206, 207, 208, 209, 211, 212, 213, 214,
	220, 223, 229, 230, 239, 246, 249, 521, 509, 0,
	466, 524, 439, 456, 532, 457, 460, 497, 424, 479,
	172, 454, 0, 443, 419, 450, 420, 441, 468, 116,
	472, 438, 511, 482, 523, 144, 444, 530, 146, 488,
	0, 218, 160, 0, 0, 0, 470, 513, 477, 506,
	465, 498, 429, 487, 525, 455, 495, 526, 0, 0,
	0, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 492, 520, 452, 494, 496, 418,
	489, 0, 422, 425, 531, 516, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 469, 478, 503, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 445, 0, 486,
	0, 0, 0, 426, 423, 0, 0, 467, 0, 0,
	0, 428, 0, 446, 504, 0, 416, 125, 508, 515,
	464, 274, 519, 462, 461, 522, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	512, 442, 451, 110, 449, 200, 179, 238, 485, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 414, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 421, 0,
	219, 241, 256, 104, 437, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 415, 413, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 433, 436,
	431, 432, 480, 481, 527, 528, 529, 505, 427, 0,
	434, 435, 0, 510, 517, 518, 484, 87, 96, 145,
	253, 193, 121, 242, 417, 430, 114, 440, 0, 0,
	453, 458, 459, 471, 473, 474, 475, 476, 483, 490,
	491, 493, 499, 500, 501, 502, 507, 514, 533, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 521, 509, 0, 466, 524,
	439, 456, 532, 457, 460, 497, 424, 479, 172, 454,
	0, 443, 419, 450, 420, 441, 468, 116, 472, 438,
	511, 482, 523, 144, 444, 530, 146, 488, 0, 218,
	160, 0, 0, 0, 470, 513, 477, 506, 465, 498,
	429, 487, 525, 455, 495, 526, 0, 0, 0, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 492, 520, 452, 494, 496, 418, 489, 0,
	422, 425, 531, 516, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 469, 478, 503, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 445, 0, 486, 0, 0,
	0, 426, 423, 0, 0, 467, 0, 0, 0, 428,
	0, 446, 504, 0, 416, 125, 508, 515, 464, 274,
	519, 462, 461, 522, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 512, 442,
	451, 110, 449, 200, 179, 238, 485, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 736, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 414, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 421, 0, 219, 241,
	256, 104, 437, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 415, 413, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 433, 436, 431, 432,
	480, 481, 527, 528, 529, 505, 427, 0, 434, 435,
	0, 510, 517, 518, 484, 87, 96, 145, 253, 193,
	121, 242, 417, 430, 114, 440, 0, 0, 453, 458,
	459, 471, 473, 474, 475, 476, 483, 490, 491, 493,
	499, 500, 501, 502, 507, 514, 533, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 521, 509, 0, 466, 524, 439, 456,
	532, 457, 460, 497, 424, 479, 172, 454, 0, 443,
	419, 450, 420, 441, 468, 116, 472, 438, 511, 482,
	523, 144, 444, 530, 146, 488, 0, 218, 160, 0,
	0, 0, 470, 513, 477, 506, 465, 498, 429, 487,
	525, 455, 495, 526, 0, 0, 0, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	492, 520, 452, 494, 496, 418, 489, 0, 422, 425,
	531, 516, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 469, 478, 503, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 445, 0, 486, 0, 0, 0, 426,
	423, 0, 0, 467, 0, 0, 0, 428, 0, 446,
	504, 0, 416, 125, 508, 515, 464, 274, 519, 462,
	461, 522, 191, 0, 222, 128, 143, 102, 140, 88,
	98, 0, 127, 169, 198, 202, 512, 442, 451, 110,
	449, 200, 179, 238, 485, 181, 199, 147, 228, 192,
	237, 247, 248, 225, 245, 252, 215, 91, 224, 405,
	107, 210, 93, 234, 221, 158, 137, 138, 92, 0,
	196, 115, 123, 112, 171, 231, 232, 111, 255, 99,
	244, 95, 414, 243, 165, 227, 235, 159, 152, 94,
	233, 157, 151, 142, 119, 130, 189, 149, 190, 131,
	162, 161, 163, 0, 421, 0, 219, 241, 256, 104,
	437, 226, 250, 251, 0, 0, 105, 124, 118, 188,
	122, 415, 413, 408, 407, 141, 148, 195, 254, 178,
	201, 108, 240, 217, 433, 436, 431, 432, 480, 481,
	527, 528, 529, 505, 427, 0, 434, 435, 0, 510,
	517, 518, 484, 87, 96, 145, 253, 193, 121, 242,
	417, 430, 114, 440, 0, 0, 453, 458, 459, 471,
	473, 474, 475, 476, 483, 490, 491, 493, 499, 500,
	501, 502, 507, 514, 533, 89, 90, 97, 103, 109,
	113, 117, 120, 126, 129, 132, 134, 135, 136, 139,
	150, 153, 154, 155, 156, 166, 167, 168, 170, 173,
	174, 175, 176, 177, 180, 182, 183, 184, 185, 186,
	187, 194, 197, 203, 204, 205, 206, 207, 208, 209,
	211, 212, 213, 214, 220, 223, 229, 230, 239, 246,
	249, 172, 0, 0, 918, 0, 339, 0, 0, 0,
	116, 0, 336, 0, 0, 0, 144, 919, 379, 146,
	0, 0, 218, 160, 0, 0, 0, 0, 0, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 84, 85, 86, 358, 357, 360, 361, 362,
	363, 0, 0, 106, 359, 364, 365, 366, 0, 0,
	0, 334, 351, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 330, 0, 0, 0,
	393, 0, 350, 0, 0, 345, 346, 347, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 392,
	0, 0, 274, 0, 0, 390, 0, 191, 0, 222,
	128, 143, 102, 140, 88, 98, 0, 127, 169, 198,
	202, 0, 0, 0, 110, 0, 200, 179, 238, 0,
	181, 199, 147, 228, 192, 237, 247, 248, 225, 245,
	252, 215, 91, 224, 236, 107, 210, 93, 234, 221,
	158, 137, 138, 92, 0, 196, 115, 123, 112, 171,
	231, 232, 111, 255, 99, 244, 95, 100, 243, 165,
	227, 235, 159, 152, 94, 233, 157, 151, 142, 119,
	130, 189, 149, 190, 131, 162, 161, 163, 0, 0,
	0, 219, 241, 256, 104, 0, 226, 250, 251, 0,
	0, 105, 124, 118, 188, 122, 164, 101, 133, 216,
	141, 148, 195, 254, 178, 201, 108, 240, 217, 380,
	391, 386, 387, 384, 385, 383, 382, 381, 394, 372,
	373, 374, 375, 377, 0, 388, 389, 376, 87, 96,
	145, 253, 193, 121, 242, 0, 0, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 97, 103, 109, 113, 117, 120, 126, 129,
	132, 134, 135, 136, 139, 150, 153, 154, 155, 156,
	166, 167, 168, 170, 173, 174, 175, 176, 177, 180,
	182, 183, 184, 185, 186, 187, 194, 197, 203, 204,
	205, 206, 207, 208, 209, 211, 212, 213, 214, 220,
	223, 229, 230, 239, 246, 249, 172, 0, 0, 0,
	0, 339, 0, 0, 0, 116, 0, 336, 0, 0,
	0, 144, 0, 379, 146, 0, 0, 218, 160, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	0, 0, 994, 0, 56, 0, 0, 84, 85, 86,
	358, 357, 360, 361, 362, 363, 0, 0, 106, 359,
	364, 365, 366, 995, 0, 0, 334, 351, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 0, 0, 0, 0, 393, 0, 350, 0, 0,
	345, 346, 347, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 392, 0, 0, 274, 0, 0,
	390, 0, 191, 0, 222, 128, 143, 102, 140, 88,
	98, 0, 127, 169, 198, 202, 0, 0, 0, 110,
	0, 200, 179, 238, 0, 181, 199, 147, 228, 192,
	237, 247, 248, 225, 245, 252, 215, 91, 224, 236,
	107, 210, 93, 234, 221, 158, 137, 138, 92, 0,
	196, 115, 123, 112, 171, 231, 232, 111, 255, 99,
	244, 95, 100, 243, 165, 227, 235, 159, 152, 94,
	233, 157, 151, 142, 119, 130, 189, 149, 190, 131,
	162, 161, 163, 0, 0, 0, 219, 241, 256, 104,
	0, 226, 250, 251, 0, 0, 105, 124, 118, 188,
	122, 164, 101, 133, 216, 141, 148, 195, 254, 178,
	201, 108, 240, 217, 380, 391, 386, 387, 384, 385,
	383, 382, 381, 394, 372, 373, 374, 375, 377, 0,
	388, 389, 376, 87, 96, 145, 253, 193, 121, 242,
	0, 0, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 97, 103, 109,
	113, 117, 120, 126, 129, 132, 134, 135, 136, 139,
	150, 153, 154, 155, 156, 166, 167, 168, 170, 173,
	174, 175, 176, 177, 180, 182, 183, 184, 185, 186,
	187, 194, 197, 203, 204, 205, 206, 207, 208, 209,
	211, 212, 213, 214, 220, 223, 229, 230, 239, 246,
	249, 172, 0, 0, 0, 0, 339, 0, 0, 0,
	116, 0, 336, 0, 0, 0, 144, 0, 379, 146,
	0, 0, 218, 160, 0, 0, 0, 0, 0, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 606, 84, 85, 86, 358, 357, 360, 361, 362,
	363, 0, 0, 106, 359, 364, 365, 366, 0, 0,
	0, 334, 351, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 0, 0, 0, 0,
	393, 0, 350, 0, 0, 345, 346, 347, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 392,
	0, 0, 274, 0, 0, 390, 0, 191, 0, 222,
	128, 143, 102, 140, 88, 98, 0, 127, 169, 198,
	202, 0, 0, 0, 110, 0, 200, 179, 238, 0,
	181, 199, 147, 228, 192, 237, 247, 248, 225, 245,
	252, 215, 91, 224, 236, 107, 210, 93, 234, 221,
	158, 137, 138, 92, 0, 196, 115, 123, 112, 171,
	231, 232, 111, 255, 99, 244, 95, 100, 243, 165,
	227, 235, 159, 152, 94, 233, 157, 151, 142, 119,
	130, 189, 149, 190, 131, 162, 161, 163, 0, 0,
	0, 219, 241, 256, 104, 0, 226, 250, 251, 0,
	0, 105, 124, 118, 188, 122, 164, 101, 133, 216,
	141, 148, 195, 254, 178, 201, 108, 240, 217, 380,
	391, 386, 387, 384, 385, 383, 382, 381, 394, 372,
	373, 374, 375, 377, 0, 388, 389, 376, 87, 96,
	145, 253, 193, 121, 242, 0, 0, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 97, 103, 109, 113, 117, 120, 126, 129,
	132, 134, 135, 136, 139, 150, 153, 154, 155, 156,
	166, 167, 168, 170, 173, 174, 175, 176, 177, 180,
	182, 183, 184, 185, 186, 187, 194, 197, 203, 204,
	205, 206, 207, 208, 209, 211, 212, 213, 214, 220,
	223, 229, 230, 239, 246, 249, 172, 0, 0, 0,
	0, 339, 0, 0, 0, 116, 0, 336, 0, 0,
	0, 144, 0, 379, 146, 0, 0, 218, 160, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 84, 85, 86,
	358, 357, 360, 361, 362, 363, 0, 0, 106, 359,
	364, 365, 366, 0, 0, 0, 334, 351, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 330, 0, 0, 0, 393, 0, 350, 0, 0,
	345, 346, 347, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 392, 0, 0, 274, 0, 0,
	390, 0, 191, 0, 222, 128, 143, 102, 140, 88,
	98, 0, 127, 169, 198, 202, 0, 0, 0, 110,
	0, 200, 179, 238, 0, 181, 199, 147, 228, 192,
	237, 247, 248, 225, 245, 252, 215, 91, 224, 236,
	107, 210, 93, 234, 221, 158, 137, 138, 92, 0,
	196, 115, 123, 112, 171, 231, 232, 111, 255, 99,
	244, 95, 100, 243, 165, 227, 235, 159, 152, 94,
	233, 157, 151, 142, 119, 130, 189, 149, 190, 131,
	162, 161, 163, 0, 0, 0, 219, 241, 256, 104,
	0, 226, 250, 251, 0, 0, 105, 124, 118, 188,
	122, 164, 101, 133, 216, 141, 148, 195, 254, 178,
	201, 108, 240, 217, 380, 391, 386, 387, 384, 385,
	383, 382, 381, 394, 372, 373, 374, 375, 377, 0,
	388, 389, 376, 87, 96, 145, 253, 193, 121, 242,
	0, 0, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 97, 103, 109,
	113, 117, 120, 126, 129, 132, 134, 135, 136, 139,
	150, 153, 154, 155, 156, 166, 167, 168, 170, 173,
	174, 175, 176, 177, 180, 182, 183, 184, 185, 186,
	187, 194, 197, 203, 204, 205, 206, 207, 208, 209,
	211, 212, 213, 214, 220, 223, 229, 230, 239, 246,
	249, 172, 0, 0, 0, 0, 339, 0, 0, 0,
	116, 0, 336, 0, 0, 0, 144, 0, 379, 146,
	0, 0, 218, 160, 0, 0, 0, 0, 0, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 84, 85, 86, 358, 933, 360, 361, 362,
	363, 0, 0, 106, 359, 364, 365, 366, 0, 0,
	0, 334, 351, 0, 378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 349, 330, 0, 0, 0,
	393, 0, 350, 0, 0, 345, 346, 347, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 392,
	0, 0, 274, 0, 0, 390, 0, 191, 0, 222,
	128, 143, 102, 140, 88, 98, 0, 127, 169, 198,
	202, 0, 0, 0, 110, 0, 200, 179, 238, 0,
	181, 199, 147, 228, 192, 237, 247, 248, 225, 245,
	252, 215, 91, 224, 236, 107, 210, 93, 234, 221,
	158, 137, 138, 92, 0, 196, 115, 123, 112, 171,
	231, 232, 111, 255, 99, 244, 95, 100, 243, 165,
	227, 235, 159, 152, 94, 233, 157, 151, 142, 119,
	130, 189, 149, 190, 131, 162, 161, 163, 0, 0,
	0, 219, 241, 256, 104, 0, 226, 250, 251, 0,
	0, 105, 124, 118, 188, 122, 164, 101, 133, 216,
	141, 148, 195, 254, 178, 201, 108, 240, 217, 380,
	391, 386, 387, 384, 385, 383, 382, 381, 394, 372,
	373, 374, 375, 377, 0, 388, 389, 376, 87, 96,
	145, 253, 193, 121, 242, 0, 0, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 97, 103, 109, 113, 117, 120, 126, 129,
	132, 134, 135, 136, 139, 150, 153, 154, 155, 156,
	166, 167, 168, 170, 173, 174, 175, 176, 177, 180,
	182, 183, 184, 185, 186, 187, 194, 197, 203, 204,
	205, 206, 207, 208, 209, 211, 212, 213, 214, 220,
	223, 229, 230, 239, 246, 249, 172, 0, 0, 0,
	0, 339, 0, 0, 0, 116, 0, 336, 0, 0,
	0, 144, 0, 379, 146, 0, 0, 218, 160, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 84, 85, 86,
	358, 930, 360, 361, 362, 363, 0, 0, 106, 359,
	364, 365, 366, 0, 0, 0, 334, 351, 0, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 330, 0, 0, 0, 393, 0, 350, 0, 0,
	345, 346, 347, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 392, 0, 0, 274, 0, 0,
	390, 0, 191, 0, 222, 128, 143, 102, 140, 88,
	98, 0, 127, 169, 198, 202, 0, 0, 0, 110,
	0, 200, 179, 238, 0, 181, 199, 147, 228, 192,
	237, 247, 248, 225, 245, 252, 215, 91, 224, 236,
	107, 210, 93, 234, 221, 158, 137, 138, 92, 0,
	196, 115, 123, 112, 171, 231, 232, 111, 255, 99,
	244, 95, 100, 243, 165, 227, 235, 159, 152, 94,
	233, 157, 151, 142, 119, 130, 189, 149, 190, 131,
	162, 161, 163, 0, 0, 0, 219, 241, 256, 104,
	0, 226, 250, 251, 0, 0, 105, 124, 118, 188,
	122, 164, 101, 133, 216, 141, 148, 195, 254, 178,
	201, 108, 240, 217, 380, 391, 386, 387, 384, 385,
	383, 382, 381, 394, 372, 373, 374, 375, 377, 0,
	388, 389, 376, 87, 96, 145, 253, 193, 121, 242,
	0, 0, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 97, 103, 109,
	113, 117, 120, 126, 129, 132, 134, 135, 136, 139,
	150, 153, 154, 155, 156, 166, 167, 168, 170, 173,
	174, 175, 176, 177, 180, 182, 183, 184, 185, 186,
	187, 194, 197, 203, 204, 205, 206, 207, 208, 209,
	211, 212, 213, 214, 220, 223, 229, 230, 239, 246,
	249, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 339, 0,
	0, 0, 116, 0, 336, 0, 0, 0, 144, 0,
	379, 146, 0, 0, 218, 160, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 84, 85, 86, 358, 357, 360,
	361, 362, 363, 0, 0, 106, 359, 364, 365, 366,
	0, 0, 0, 334, 351, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 349, 0, 0,
	0, 0, 393, 0, 350, 0, 0, 345, 346, 347,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 392, 0, 0, 274, 0, 0, 390, 0, 191,
	0, 222, 128, 143, 102, 140, 88, 98, 0, 127,
	169, 198, 202, 0, 0, 0, 110, 0, 200, 179,
	238, 0, 181, 199, 147, 228, 192, 237, 247, 248,
	225, 245, 252, 215, 91, 224, 236, 107, 210, 93,
	234, 221, 158, 137, 138, 92, 0, 196, 115, 123,
	112, 171, 231, 232, 111, 255, 99, 244, 95, 100,
	243, 165, 227, 235, 159, 152, 94, 233, 157, 151,
	142, 119, 130, 189, 149, 190, 131, 162, 161, 163,
	0, 0, 0, 219, 241, 256, 104, 0, 226, 250,
	251, 0, 0, 105, 124, 118, 188, 122, 164, 101,
	133, 216, 141, 148, 195, 254, 178, 201, 108, 240,
	217, 380, 391, 386, 387, 384, 385, 383, 382, 381,
	394, 372, 373, 374, 375, 377, 0, 388, 389, 376,
	87, 96, 145, 253, 193, 121, 242, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 97, 103, 109, 113, 117, 120,
	126, 129, 132, 134, 135, 136, 139, 150, 153, 154,
	155, 156, 166, 167, 168, 170, 173, 174, 175, 176,
	177, 180, 182, 183, 184, 185, 186, 187, 194, 197,
	203, 204, 205, 206, 207, 208, 209, 211, 212, 213,
	214, 220, 223, 229, 230, 239, 246, 249, 172, 0,
	0, 0, 0, 339, 0, 0, 0, 116, 0, 336,
	0, 0, 0, 144, 0, 379, 146, 0, 0, 218,
	160, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 0, 84,
	85, 86, 358, 357, 360, 361, 362, 363, 0, 0,
	106, 359, 364, 365, 366, 0, 0, 0, 334, 351,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 0, 0, 0, 0, 393, 0, 350,
	0, 0, 345, 346, 347, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 392, 0, 0, 274,
	0, 0, 390, 0, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 0, 0,
	0, 110, 0, 200, 179, 238, 0, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 236, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 100, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 0, 0, 219, 241,
	256, 104, 0, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 164, 101, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 380, 391, 386, 387,
	384, 385, 383, 382, 381, 394, 372, 373, 374, 375,
	377, 0, 388, 389, 376, 87, 96, 145, 253, 193,
	121, 242, 0, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 144, 0,
	379, 146, 0, 0, 218, 160, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 84, 85, 86, 358, 357, 360,
	361, 362, 363, 0, 0, 106, 359, 364, 365, 366,
	0, 0, 0, 0, 351, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 349, 0, 0,
	0, 0, 393, 0, 350, 0, 0, 345, 346, 347,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 392, 0, 0, 274, 0, 0, 390, 0, 191,
	0, 222, 128, 143, 102, 140, 88, 98, 0, 127,
	169, 198, 202, 0, 0, 0, 110, 0, 200, 179,
	238, 1559, 181, 199, 147, 228, 192, 237, 247, 248,
	225, 245, 252, 215, 91, 224, 236, 107, 210, 93,
	234, 221, 158, 137, 138, 92, 0, 196, 115, 123,
	112, 171, 231, 232, 111, 255, 99, 244, 95, 100,
	243, 165, 227, 235, 159, 152, 94, 233, 157, 151,
	142, 119, 130, 189, 149, 190, 131, 162, 161, 163,
	0, 0, 0, 219, 241, 256, 104, 0, 226, 250,
	251, 0, 0, 105, 124, 118, 188, 122, 164, 101,
	133, 216, 141, 148, 195, 254, 178, 201, 108, 240,
	217, 380, 391, 386, 387, 384, 385, 383, 382, 381,
	394, 372, 373, 374, 375, 377, 0, 388, 389, 376,
	87, 96, 145, 253, 193, 121, 242, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 97, 103, 109, 113, 117, 120,
	126, 129, 132, 134, 135, 136, 139, 150, 153, 154,
	155, 156, 166, 167, 168, 170, 173, 174, 175, 176,
	177, 180, 182, 183, 184, 185, 186, 187, 194, 197,
	203, 204, 205, 206, 207, 208, 209, 211, 212, 213,
	214, 220, 223, 229, 230, 239, 246, 249, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 144, 0, 379, 146, 0, 0, 218,
	160, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 606, 84,
	85, 86, 358, 357, 360, 361, 362, 363, 0, 0,
	106, 359, 364, 365, 366, 0, 0, 0, 0, 351,
	0, 378, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 0, 0, 0, 0, 393, 0, 350,
	0, 0, 345, 346, 347, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 392, 0, 0, 274,
	0, 0, 390, 0, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 0, 0,
	0, 110, 0, 200, 179, 238, 0, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 236, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 100, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 0, 0, 219, 241,
	256, 104, 0, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 164, 101, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 380, 391, 386, 387,
	384, 385, 383, 382, 381, 394, 372, 373, 374, 375,
	377, 0, 388, 389, 376, 87, 96, 145, 253, 193,
	121, 242, 0, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 144, 0,
	379, 146, 0, 0, 218, 160, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 84, 85, 86, 358, 357, 360,
	361, 362, 363, 0, 0, 106, 359, 364, 365, 366,
	0, 0, 0, 0, 351, 0, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 349, 0, 0,
	0, 0, 393, 0, 350, 0, 0, 345, 346, 347,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 392, 0, 0, 274, 0, 0, 390, 0, 191,
	0, 222, 128, 143, 102, 140, 88, 98, 0, 127,
	169, 198, 202, 0, 0, 0, 110, 0, 200, 179,
	238, 0, 181, 199, 147, 228, 192, 237, 247, 248,
	225, 245, 252, 215, 91, 224, 236, 107, 210, 93,
	234, 221, 158, 137, 138, 92, 0, 196, 115, 123,
	112, 171, 231, 232, 111, 255, 99, 244, 95, 100,
	243, 165, 227, 235, 159, 152, 94, 233, 157, 151,
	142, 119, 130, 189, 149, 190, 131, 162, 161, 163,
	0, 0, 0, 219, 241, 256, 104, 0, 226, 250,
	251, 0, 0, 105, 124, 118, 188, 122, 164, 101,
	133, 216, 141, 148, 195, 254, 178, 201, 108, 240,
	217, 380, 391, 386, 387, 384, 385, 383, 382, 381,
	394, 372, 373, 374, 375, 377, 0, 388, 389, 376,
	87, 96, 145, 253, 193, 121, 242, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 97, 103, 109, 113, 117, 120,
	126, 129, 132, 134, 135, 136, 139, 150, 153, 154,
	155, 156, 166, 167, 168, 170, 173, 174, 175, 176,
	177, 180, 182, 183, 184, 185, 186, 187, 194, 197,
	203, 204, 205, 206, 207, 208, 209, 211, 212, 213,
	214, 220, 223, 229, 230, 239, 246, 249, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 144, 0, 0, 146, 0, 0, 218,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 643, 642, 652,
	653, 645, 646, 647, 648, 649, 650, 651, 644, 0,
	0, 654, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 274,
	0, 0, 0, 0, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 0, 0,
	0, 110, 0, 200, 179, 238, 0, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 236, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 100, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 0, 0, 219, 241,
	256, 104, 0, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 164, 101, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 96, 145, 253, 193,
	121, 242, 0, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 172, 0, 0, 0, 631, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 144, 0,
	0, 146, 0, 0, 218, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 86, 0, 633, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 628, 627, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 274, 0, 0, 0, 0, 191,
	0, 222, 128, 143, 102, 140, 88, 98, 0, 127,
	169, 198, 202, 0, 0, 0, 110, 0, 200, 179,
	238, 0, 181, 199, 147, 228, 192, 237, 247, 248,
	225, 245, 252, 215, 91, 224, 236, 107, 210, 93,
	234, 221, 158, 137, 138, 92, 0, 196, 115, 123,
	112, 171, 231, 232, 111, 255, 99, 244, 95, 100,
	243, 165, 227, 235, 159, 152, 94, 233, 157, 151,
	142, 119, 130, 189, 149, 190, 131, 162, 161, 163,
	0, 0, 0, 219, 241, 256, 104, 0, 226, 250,
	251, 0, 0, 105, 124, 118, 188, 122, 164, 101,
	133, 216, 141, 148, 195, 254, 178, 201, 108, 240,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 96, 145, 253, 193, 121, 242, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 97, 103, 109, 113, 117, 120,
	126, 129, 132, 134, 135, 136, 139, 150, 153, 154,
	155, 156, 166, 167, 168, 170, 173, 174, 175, 176,
	177, 180, 182, 183, 184, 185, 186, 187, 194, 197,
	203, 204, 205, 206, 207, 208, 209, 211, 212, 213,
	214, 220, 223, 229, 230, 239, 246, 249, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 144, 0, 0, 146, 0, 0, 218,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 78, 79, 0, 75,
	0, 0, 0, 80, 191, 0, 222, 128, 143, 102,
	140, 88, 98, 0, 127, 169, 198, 202, 0, 0,
	0, 110, 0, 200, 179, 238, 0, 181, 199, 147,
	228, 192, 237, 247, 248, 225, 245, 252, 215, 91,
	224, 236, 107, 210, 93, 234, 221, 158, 137, 138,
	92, 0, 196, 115, 123, 112, 171, 231, 232, 111,
	255, 99, 244, 95, 100, 243, 165, 227, 235, 159,
	152, 94, 233, 157, 151, 142, 119, 130, 189, 149,
	190, 131, 162, 161, 163, 0, 0, 0, 219, 241,
	256, 104, 0, 226, 250, 251, 0, 0, 105, 124,
	118, 188, 122, 164, 101, 133, 216, 141, 148, 195,
	254, 178, 201, 108, 240, 217, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 96, 145, 253, 193,
	121, 242, 0, 0, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 97,
	103, 109, 113, 117, 120, 126, 129, 132, 134, 135,
	136, 139, 150, 153, 154, 155, 156, 166, 167, 168,
	170, 173, 174, 175, 176, 177, 180, 182, 183, 184,
	185, 186, 187, 194, 197, 203, 204, 205, 206, 207,
	208, 209, 211, 212, 213, 214, 220, 223, 229, 230,
	239, 246, 249, 172, 0, 0, 0, 977, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 144, 0,
	0, 146, 0, 0, 218, 160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 86, 0, 979, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 274, 0, 0, 0, 0, 191,
	0, 222, 128, 143, 102, 140, 88, 98, 0, 127,
	169, 198, 202, 0, 0, 0, 110, 0, 200, 179,
	238, 0, 181, 199, 147, 228, 192, 237, 247, 248,
	225, 245, 252, 215, 91, 224, 236, 107, 210, 93,
	234, 221, 158, 137, 138, 92, 0, 196, 115, 123,
	112, 171, 231, 232, 111, 255, 99, 244, 95, 100,
	243, 165, 227, 235, 159, 152, 94, 233, 157, 151,
	142, 119, 130, 189, 149, 190, 131, 162, 161, 163,
	0, 0, 0, 219, 241, 256, 104, 0, 226, 250,
	251, 0, 0, 105, 124, 118, 188, 122, 164, 101,
	133, 216, 141, 148, 195, 254, 178, 201, 108, 240,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 96, 145, 253, 193, 121, 242, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 97, 103, 109, 113, 117, 120,
	126, 129, 132, 134, 135, 136, 139, 150, 153, 154,
	155, 156, 166, 167, 168, 170, 173, 174, 175, 176,
	177, 180, 182, 183, 184, 185, 186, 187, 194, 197,
	203, 204, 205, 206, 207, 208, 209, 211, 212, 213,
	214, 220, 223, 229, 230, 239, 246, 249, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 144, 0, 0, 146, 0,
	0, 218, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 274, 0, 0, 0, 0, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	0, 0, 0, 110, 0, 200, 179, 238, 0, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 0, 0,
	219, 241, 256, 104, 0, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 96, 145,
	253, 193, 121, 242, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 172, 0, 0, 0, 977,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	144, 0, 0, 146, 0, 0, 218, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 86, 0,
	979, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 274, 0, 0, 0,
	0, 191, 0, 222, 128, 143, 102, 140, 88, 98,
	0, 127, 169, 198, 202, 0, 0, 0, 110, 0,
	200, 179, 238, 0, 975, 199, 147, 228, 192, 237,
	247, 248, 225, 245, 252, 215, 91, 224, 236, 107,
	210, 93, 234, 221, 158, 137, 138, 92, 0, 196,
	115, 123, 112, 171, 231, 232, 111, 255, 99, 244,
	95, 100, 243, 165, 227, 235, 159, 152, 94, 233,
	157, 151, 142, 119, 130, 189, 149, 190, 131, 162,
	161, 163, 0, 0, 0, 219, 241, 256, 104, 0,
	226, 250, 251, 0, 0, 105, 124, 118, 188, 122,
	164, 101, 133, 216, 141, 148, 195, 254, 178, 201,
	108, 240, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 96, 145, 253, 193, 121, 242, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 97, 103, 109, 113,
	117, 120, 126, 129, 132, 134, 135, 136, 139, 150,
	153, 154, 155, 156, 166, 167, 168, 170, 173, 174,
	175, 176, 177, 180, 182, 183, 184, 185, 186, 187,
	194, 197, 203, 204, 205, 206, 207, 208, 209, 211,
	212, 213, 214, 220, 223, 229, 230, 239, 246, 249,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 144, 0, 0, 146, 0,
	0, 218, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 86, 0, 0, 867, 0, 0, 868,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 274, 0, 0, 0, 0, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	0, 0, 0, 110, 0, 200, 179, 238, 0, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 0, 0,
	219, 241, 256, 104, 0, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 96, 145,
	253, 193, 121, 242, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 746, 0, 0, 0,
	144, 0, 0, 146, 0, 0, 218, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 86, 0,
	745, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 274, 0, 0, 0,
	0, 191, 0, 222, 128, 143, 102, 140, 88, 98,
	0, 127, 169, 198, 202, 0, 0, 0, 110, 0,
	200, 179, 238, 0, 181, 199, 147, 228, 192, 237,
	247, 248, 225, 245, 252, 215, 91, 224, 236, 107,
	210, 93, 234, 221, 158, 137, 138, 92, 0, 196,
	115, 123, 112, 171, 231, 232, 111, 255, 99, 244,
	95, 100, 243, 165, 227, 235, 159, 152, 94, 233,
	157, 151, 142, 119, 130, 189, 149, 190, 131, 162,
	161, 163, 0, 0, 0, 219, 241, 256, 104, 0,
	226, 250, 251, 0, 0, 105, 124, 118, 188, 122,
	164, 101, 133, 216, 141, 148, 195, 254, 178, 201,
	108, 240, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 96, 145, 253, 193, 121, 242, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 97, 103, 109, 113,
	117, 120, 126, 129, 132, 134, 135, 136, 139, 150,
	153, 154, 155, 156, 166, 167, 168, 170, 173, 174,
	175, 176, 177, 180, 182, 183, 184, 185, 186, 187,
	194, 197, 203, 204, 205, 206, 207, 208, 209, 211,
	212, 213, 214, 220, 223, 229, 230, 239, 246, 249,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 144, 0, 0, 146, 0,
	0, 218, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 274, 0, 0, 0, 0, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	0, 0, 0, 110, 0, 200, 179, 238, 0, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 0, 0,
	219, 241, 256, 104, 0, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 96, 145,
	253, 193, 121, 242, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	144, 0, 0, 146, 0, 0, 218, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 274, 0, 0, 0,
	0, 191, 0, 222, 128, 143, 102, 140, 88, 98,
	0, 127, 169, 198, 202, 0, 0, 0, 110, 0,
	200, 179, 238, 0, 181, 199, 147, 228, 192, 237,
	247, 248, 225, 245, 252, 215, 91, 224, 236, 107,
	210, 93, 234, 221, 158, 137, 138, 92, 0, 196,
	115, 123, 112, 171, 231, 232, 111, 255, 99, 244,
	95, 100, 243, 165, 227, 235, 159, 152, 94, 233,
	157, 151, 142, 119, 130, 189, 149, 190, 131, 162,
	161, 163, 0, 0, 0, 219, 241, 256, 104, 0,
	226, 250, 251, 0, 0, 105, 124, 118, 188, 122,
	164, 101, 133, 216, 141, 148, 195, 254, 178, 201,
	108, 240, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 96, 145, 253, 193, 121, 242, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 97, 103, 109, 113,
	117, 120, 126, 129, 132, 134, 135, 136, 139, 150,
	153, 154, 155, 156, 166, 167, 168, 170, 173, 174,
	175, 176, 177, 180, 182, 183, 184, 185, 186, 187,
	194, 197, 203, 204, 205, 206, 207, 208, 209, 211,
	212, 213, 214, 220, 223, 229, 230, 239, 246, 249,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 144, 0, 0, 146, 0,
	0, 218, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 86, 0, 979, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 274, 0, 0, 0, 0, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	0, 0, 0, 110, 0, 200, 179, 238, 0, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 0, 0,
	219, 241, 256, 104, 0, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 96, 145,
	253, 193, 121, 242, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	144, 0, 0, 146, 0, 0, 218, 160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 86, 0,
	633, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 274, 0, 0, 0,
	0, 191, 0, 222, 128, 143, 102, 140, 88, 98,
	0, 127, 169, 198, 202, 0, 0, 0, 110, 0,
	200, 179, 238, 0, 181, 199, 147, 228, 192, 237,
	247, 248, 225, 245, 252, 215, 91, 224, 236, 107,
	210, 93, 234, 221, 158, 137, 138, 92, 0, 196,
	115, 123, 112, 171, 231, 232, 111, 255, 99, 244,
	95, 100, 243, 165, 227, 235, 159, 152, 94, 233,
	157, 151, 142, 119, 130, 189, 149, 190, 131, 162,
	161, 163, 0, 0, 0, 219, 241, 256, 104, 0,
	226, 250, 251, 0, 0, 105, 124, 118, 188, 122,
	164, 101, 133, 216, 141, 148, 195, 254, 178, 201,
	108, 240, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 96, 145, 253, 193, 121, 242, 0,
	0, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 97, 103, 109, 113,
	117, 120, 126, 129, 132, 134, 135, 136, 139, 150,
	153, 154, 155, 156, 166, 167, 168, 170, 173, 174,
	175, 176, 177, 180, 182, 183, 184, 185, 186, 187,
	194, 197, 203, 204, 205, 206, 207, 208, 209, 211,
	212, 213, 214, 220, 223, 229, 230, 239, 246, 249,
	172, 0, 0, 0, 0, 0, 0, 0, 716, 116,
	0, 0, 0, 0, 0, 144, 0, 0, 146, 0,
	0, 218, 160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 274, 0, 0, 0, 0, 191, 0, 222, 128,
	143, 102, 140, 88, 98, 0, 127, 169, 198, 202,
	0, 0, 0, 110, 0, 200, 179, 238, 0, 181,
	199, 147, 228, 192, 237, 247, 248, 225, 245, 252,
	215, 91, 224, 236, 107, 210, 93, 234, 221, 158,
	137, 138, 92, 0, 196, 115, 123, 112, 171, 231,
	232, 111, 255, 99, 244, 95, 100, 243, 165, 227,
	235, 159, 152, 94, 233, 157, 151, 142, 119, 130,
	189, 149, 190, 131, 162, 161, 163, 0, 0, 0,
	219, 241, 256, 104, 0, 226, 250, 251, 0, 0,
	105, 124, 118, 188, 122, 164, 101, 133, 216, 141,
	148, 195, 254, 178, 201, 108, 240, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 96, 145,
	253, 193, 121, 242, 0, 0, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 97, 103, 109, 113, 117, 120, 126, 129, 132,
	134, 135, 136, 139, 150, 153, 154, 155, 156, 166,
	167, 168, 170, 173, 174, 175, 176, 177, 180, 182,
	183, 184, 185, 186, 187, 194, 197, 203, 204, 205,
	206, 207, 208, 209, 211, 212, 213, 214, 220, 223,
	229, 230, 239, 246, 249, 397, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 144, 0, 0,
	146, 0, 0, 218, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 274, 0, 0, 0, 0, 191, 0,
	222, 128, 143, 102, 140, 88, 98, 0, 127, 169,
	198, 202, 0, 0, 0, 110, 0, 200, 179, 238,
	0, 181, 199, 147, 228, 192, 237, 247, 248, 225,
	245, 252, 215, 91, 224, 236, 107, 210, 93, 234,
	221, 158, 137, 138, 92, 0, 196, 115, 123, 112,
	171, 231, 232, 111, 255, 99, 244, 95, 100, 243,
	165, 227, 235, 159, 152, 94, 233, 157, 151, 142,
	119, 130, 189, 149, 190, 131, 162, 161, 163, 0,
	0, 0, 219, 241, 256, 104, 0, 226, 250, 251,
	0, 0, 105, 124, 118, 188, 122, 164, 101, 133,
	216, 141, 148, 195, 254, 178, 201, 108, 240, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	96, 145, 253, 193, 121, 242, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 97, 103, 109, 113, 117, 120, 126,
	129, 132, 134, 135, 136, 139, 150, 153, 154, 155,
	156, 166, 167, 168, 170, 173, 174, 175, 176, 177,
	180, 182, 183, 184, 185, 186, 187, 194, 197, 203,
	204, 205, 206, 207, 208, 209, 211, 212, 213, 214,
	220, 223, 229, 230, 239, 246, 249, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 144, 0, 0, 146, 0, 0, 218, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 269, 0, 274, 0,
	0, 0, 0, 191, 0, 222, 128, 143, 102, 140,
	88, 98, 0, 127, 169, 198, 202, 0, 0, 0,
	110, 0, 200, 179, 238, 0, 181, 199, 147, 228,
	192, 237, 247, 248, 225, 245, 252, 215, 91, 224,
	236, 107, 210, 93, 234, 221, 158, 137, 138, 92,
	0, 196, 115, 123, 112, 171, 231, 232, 111, 255,
	99, 244, 95, 100, 243, 165, 227, 235, 159, 152,
	94, 233, 157, 151, 142, 119, 130, 189, 149, 190,
	131, 162, 161, 163, 0, 0, 0, 219, 241, 256,
	104, 0, 226, 250, 251, 0, 0, 105, 124, 118,
	188, 122, 164, 101, 133, 216, 141, 148, 195, 254,
	178, 201, 108, 240, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 96, 145, 253, 193, 121,
	242, 0, 0, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 97, 103,
	109, 113, 117, 120, 126, 129, 132, 134, 135, 136,
	139, 150, 153, 154, 155, 156, 166, 167, 168, 170,
	173, 174, 175, 176, 177, 180, 182, 183, 184, 185,
	186, 187, 194, 197, 203, 204, 205, 206, 207, 208,
	209, 211, 212, 213, 214, 220, 223, 229, 230, 239,
	246, 249, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 144, 0, 0,
	146, 0, 0, 218, 160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 274, 0, 0, 0, 0, 191, 0,
	222, 128, 143, 102, 140, 88, 98, 0, 127, 169,
	198, 202, 0, 0, 0, 110, 0, 200, 179, 238,
	0, 181, 199, 147, 228, 192, 237, 247, 248, 225,
	245, 252, 215, 91, 224, 236, 107, 210, 93, 234,
	221, 158, 137, 138, 92, 0, 196, 115, 123, 112,
	171, 231, 232, 111, 255, 99, 244, 95, 100, 243,
	165, 227, 235, 159, 152, 94, 233, 157, 151, 142,
	119, 130, 189, 149, 190, 131, 162, 161, 163, 0,
	0, 0, 219, 241, 256, 104, 0, 226, 250, 251,
	0, 0, 105, 124, 118, 188, 122, 164, 101, 133,
	216, 141, 148, 195, 254, 178, 201, 108, 240, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	96, 145, 253, 193, 121, 242, 0, 0, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 97, 103, 109, 113, 117, 120, 126,
	129, 132, 134, 135, 136, 139, 150, 153, 154, 155,
	156, 166, 167, 168, 170, 173, 174, 175, 176, 177,
	180, 182, 183, 184, 185, 186, 187, 194, 197, 203,
	204, 205, 206, 207, 208, 209, 211, 212, 213, 214,
	220, 223, 229, 230, 239, 246, 249,
}
var yyPact = [...]int{

	2394, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 953, 991, -1000, -1000, -1000, -1000,
	-1000, -1000, 310, 11660, 43, 126, -10, 15699, 125, 77,
	16034, -1000, 28, -1000, -1000, -271, -1000, -1000, -1000, -1000,
	-55, -65, -1000, 712, -1000, -1000, -1000, -1000, -1000, 937,
	951, 776, 932, 943, -1000, 8298, 95, 95, 15364, 6958,
	-1000, -1000, 474, 16034, 123, 16034, -147, 91, 91, 91,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 116, 16034, 563,
	563, 271, -1000, 16034, 89, 563, 89, 89, 89, 16034,
	-1000, 170, -1000, -1000, -1000, 16034, 563, 895, 323, 50,
	4522, -1000, 200, -1000, 4522, 42, 4522, -41, 963, 44,
	-23, -1000, 4522, -1000, -1000, -1000, -1000, -1000, -1000, 115,
	-1000, 282, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 497,
	901, 9650, 9650, 953, -1000, 712, -1000, -1000, -1000, 844,
	8298, -1000, -1000, 850, -1000, -1000, -1000, -1000, 350, 972,
	-1000, 11325, 168, -1000, 9650, 1869, 672, -1000, -1000, 672,
	-1000, -1000, 139, -1000, -1000, 10655, 10655, 10655, 10655, 10655,
	10655, 10655, 10655, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 672, -1000, 9315,
	672, 672, 672, 672, 672, 672, 672, 672, 9650, 672,
	672, 672, 672, 672, 672, 672, 672, 672, 672, 672,
	672, 672, 672, 672, 672, 15022, 14017, 16034, 733, 720,
	-1000, -1000, 167, 722, 6610, -95, -1000, -1000, -1000, 278,
	13347, -1000, -1000, -1000, 874, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 645, 16034, -1000, 2559, -1000, 563,
	4522, 105, 563, 328, 563, 16034, 16034, 4522, 4522, 4522,
	52, 82, 79, 16034, 715, 102, 16034, 915, 788, 16034,
	563, 563, -1000, 5914, -1000, 4522, 323, -1000, 479, 9650,
	4522, 4522, 4522, 16034, 4522, 4522, -1000, -1000, -1000, 303,
	-1000, -1000, -1000, -1000, 4522, 4522, -1000, 969, 295, -1000,
	-1000, -1000, -1000, 9650, 210, -1000, 786, -1000, -1000, -1000,
	-1000, -1000, -126, -1000, -1000, -1000, -1000, -1000, 985, 204,
	438, 166, 697, -1000, 364, 937, 497, 850, 13012, 729,
	-1000, 850, -1000, -1000, -1000, 16034, -1000, 9650, 9650, 414,
	-1000, 14687, -1000, -1000, 5566, 226, 10655, 488, 313, 10655,
	10655, 10655, 10655, 10655, 10655, 10655, 10655, 10655, 10655, 10655,
	10655, 10655, 10655, 10655, 528, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 563, -1000, 712, 649, 649, 184, 184,
	184, 184, 184, 184, 184, 10990, 7293, 497, 638, 396,
	9315, 8298, 8298, 9650, 9650, 8968, 8633, 8298, 866, 292,
	396, 16034, -1000, -1000, 10320, -1000, -1000, -1000, -1000, -1000,
	497, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16034, 16034,
	8298, 8298, 8298, 8298, 8298, 62, 16034, -1000, 601, 899,
	-1000, -1000, -1000, 929, 12342, 12677, 62, 614, 14017, 16034,
	-1000, -1000, 14017, 16034, 5218, 6262, -95, -1000, 675, -1000,
	-103, -101, 7628, 181, -1000, -1000, -1000, -1000, 4174, 302,
	532, 365, -46, -1000, -1000, -1000, 736, -1000, 736, 736,
	736, 736, -4, -4, -4, -4, -1000, -1000, -1000, -1000,
	-1000, 769, 768, -1000, 736, 736, 736, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 751, 751, 751, 740, 740,
	772, -1000, 16034, 4522, 904, 4522, -1000, 73, -1000, -1000,
	-1000, 16034, 16034, 16034, 16034, 16034, 148, 16034, 16034, 688,
	-1000, 16034, 4522, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 396, -1000, -1000, -1000, -1000, -1000, -1000, 16034, -1000,
	-1000, -1000, -1000, 16034, 323, 16034, 16034, 396, -1000, 467,
	16034, -1000, -1000, -1000, -1000, 838, 9650, 9650, 5914, 9650,
	-1000, -1000, -1000, 901, -1000, 947, -1000, 851, 848, 961,
	8298, 14017, 850, -1000, 226, 238, -1000, -1000, 465, -1000,
	-1000, -1000, -1000, 163, 672, -1000, 1589, -1000, -1000, -1000,
	-1000, 488, 10655, 10655, 10655, 399, 1589, 1719, 1031, 510,
	184, 347, 347, 180, 180, 180, 180, 180, 1603, 1603,
	-1000, -1000, -1000, 497, -1000, -1000, -1000, 497, 8298, 8298,
	684, -1000, 9650, -1000, 497, 616, 616, 355, 391, 285,
	968, 616, 262, 965, 616, 616, 8298, -1000, -1000, 300,
	-1000, 9650, 497, -1000, 162, -1000, 421, 681, 680, 616,
	497, 497, 616, 616, 671, 672, -1000, 16034, 14017, 14017,
	14017, 14017, 14017, -1000, 819, 810, -1000, 801, 799, 852,
	16034, -1000, 635, 12342, 196, 672, -1000, 14352, -1000, -1000,
	961, 14017, 696, -1000, 696, -1000, 159, -1000, -1000, 675,
	-95, -61, -1000, -1000, -1000, -1000, 396, -1000, 538, 667,
	3826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 749, 563,
	-1000, 908, 237, 293, 563, 907, -1000, -1000, -1000, 897,
	-1000, 322, -50, -1000, -1000, 426, -4, -4, -1000, -1000,
	181, 871, 181, 181, 181, 454, 454, -1000, -1000, -1000,
	-1000, 417, -1000, -1000, -1000, 406, -1000, 784, 16034, 4522,
	-1000, -1000, -1000, -1000, 290, 290, 213, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61, 734,
	-1000, -1000, -1000, -1000, 20, 51, 97, -1000, 4522, -1000,
	295, 295, -1000, -1000, -1000, -1000, -1000, 836, 396, 396,
	158, -1000, -1000, 16034, -1000, -1000, -1000, -1000, 959, 9650,
	-1000, 666, -1000, -1000, -1000, -1000, 4870, 8298, -1000, 399,
	1589, 811, -1000, 10655, 10655, -1000, -1000, 616, 616, 396,
	-1000, -1000, -1000, 182, 528, 182, 10655, 10655, -1000, 10655,
	10655, -1000, -159, 618, 287, -1000, 9650, 476, -1000, 5914,
	-1000, 10655, 10655, -1000, -1000, -1000, -1000, -1000, 783, 16034,
	672, -1000, 12342, 16034, 710, -1000, 274, 899, 755, 781,
	711, -1000, -1000, -1000, -1000, 809, -1000, 808, -1000, -1000,
	-1000, -1000, -1000, 122, 118, 111, 16034, -1000, 953, 696,
	-1000, -1000, 155, -1000, -1000, -125, -131, -1000, -1000, -1000,
	4174, -1000, 4174, 16034, 80, -1000, 563, 563, -1000, -1000,
	-1000, 746, 779, 10655, -1000, -1000, -1000, 519, 181, 181,
	-1000, 316, -1000, -1000, -1000, 610, -1000, 608, 662, 605,
	16034, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16034, -1000, -1000, -1000, -1000, -1000, 16034, -165, 563, 16034,
	16034, 16034, 16034, -1000, 323, 323, -1000, 5914, -1000, 955,
	949, 396, -1000, -1000, 497, -1000, 10655, 1589, 1589, -1000,
	-1000, 497, 736, 736, -1000, 736, 740, -1000, 736, 26,
	736, 12, 497, 497, 1566, 1523, 1266, 583, 672, -154,
	-1000, 396, 9650, -1000, 970, 539, -1000, 902, 513, 597,
	-1000, -1000, 7963, 497, 603, 147, 599, -1000, 953, 16034,
	9650, -1000, -1000, 9650, 739, -1000, 9650, -1000, -1000, -1000,
	672, 672, 672, 599, 937, -1000, -1000, -1000, -1000, 3826,
	-1000, 595, -1000, 736, -1000, -1000, -1000, 16034, -31, 984,
	1589, -1000, -1000, -1000, -1000, -1000, -4, 453, -4, 402,
	-1000, 358, 4522, -1000, -1000, -1000, -1000, 911, -1000, 5914,
	-1000, -1000, 731, 771, -1000, -1000, -1000, -1000, -1000, 9650,
	9650, -1000, 1589, -1000, -1000, 142, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10655, 10655, 10655, 10655, 10655, 937,
	449, 396, 10655, 10655, 906, -1000, 672, -1000, -1000, 785,
	16034, 16034, -1000, 16034, 937, -1000, 396, 396, 16034, 396,
	13682, 16034, 16034, 11995, -1000, 185, 16034, -1000, 591, -1000,
	214, -1000, -87, 181, -1000, 181, 507, 500, -1000, 672,
	648, -1000, 259, 16034, 16034, 396, 640, -1000, -1000, 421,
	421, 421, 421, 49, 497, -1000, 421, 421, 980, -1000,
	672, -1000, 712, 146, -1000, -1000, -1000, 572, 570, -1000,
	570, 570, 196, 185, -1000, 563, 252, 446, -1000, 74,
	16034, 345, 905, -1000, 900, -1000, -1000, -1000, -1000, -1000,
	60, 5914, 4174, 547, -1000, -1000, -1000, -1000, -1000, 497,
	54, -175, -1000, -1000, -1000, 16034, 597, 497, 16034, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 356, -1000, -1000, 16034,
	-1000, -1000, 445, -1000, -1000, 526, -1000, 16034, -1000, -1000,
	734, -1000, 827, -163, -181, 537, -1000, -1000, -1000, 724,
	-1000, -1000, 60, 847, -165, -1000, 826, -1000, 16034, -1000,
	57, -1000, -168, 523, 53, -176, 777, 672, -183, 774,
	-1000, 982, 9985, -1000, -1000, 978, 192, 192, 421, 497,
	-1000, -1000, -1000, 84, 410, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1229, 26, 563, 1228, 1227, 1226, 1225, 86, 85,
	83, 1220, 1219, 1217, 1216, 1215, 1214, 1213, 1209, 1206,
	1204, 1203, 1202, 1201, 1200, 1199, 1196, 1195, 99, 1190,
	1189, 1188, 1187, 1186, 1185, 1184, 1182, 42, 192, 39,
	60, 1181, 57, 1712, 1180, 52, 58, 65, 1178, 31,
	1176, 1174, 78, 1173, 1172, 53, 1170, 1169, 46, 1168,
	63, 1167, 11, 50, 1159, 1155, 1150, 1149, 75, 1245,
	1148, 1146, 14, 1145, 1144, 92, 1143, 56, 20, 7,
	13, 19, 1141, 811, 12, 1128, 55, 1124, 1123, 1122,
	1121, 32, 1120, 61, 1117, 18, 59, 1116, 9, 66,
	30, 22, 10, 1115, 1114, 29, 64, 51, 62, 1110,
	1109, 511, 1108, 1106, 45, 1105, 1104, 1103, 28, 1101,
	90, 414, 1099, 1098, 1097, 1096, 43, 760, 1473, 254,
	68, 1095, 1093, 1091, 2432, 35, 54, 16, 1090, 48,
	198, 36, 1089, 1088, 37, 1087, 1086, 1085, 1083, 1082,
	1080, 1066, 180, 1065, 1064, 1061, 91, 24, 1060, 1056,
	72, 21, 1054, 1052, 1051, 47, 67, 1048, 1046, 49,
	1044, 1043, 25, 1039, 1038, 1037, 1029, 1022, 33, 17,
	1016, 15, 1013, 8, 1012, 23, 1011, 5, 1009, 6,
	1008, 2, 0, 1007, 4, 44, 1, 1006, 3, 1005,
	998, 1265, 1375, 71, 997, 77,
}
var yyR1 = [...]int{

	0, 199, 200, 200, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 192, 192, 192, 2,
	2, 2, 7, 3, 4, 4, 5, 5, 8, 8,
	31, 31, 9, 10, 10, 10, 10, 203, 203, 52,
	52, 53, 53, 99, 99, 11, 12, 12, 108, 108,
	107, 107, 107, 109, 109, 109, 109, 142, 142, 13,
	13, 13, 13, 13, 13, 13, 194, 194, 193, 191,
	191, 190, 190, 189, 19, 174, 176, 176, 175, 175,
	175, 175, 166, 145, 145, 145, 145, 148, 148, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 147, 147,
	147, 147, 147, 149, 149, 149, 149, 149, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 151, 151, 151, 151, 151, 151, 151,
	151, 165, 165, 152, 152, 160, 160, 161, 161, 161,
	158, 158, 159, 159, 162, 162, 162, 154, 154, 155,
	155, 163, 163, 156, 156, 156, 157, 157, 157, 164,
	164, 164, 164, 164, 153, 153, 167, 167, 184, 184,
	183, 183, 183, 173, 173, 180, 180, 180, 180, 180,
	170, 170, 170, 171, 171, 169, 169, 172, 172, 182,
	182, 181, 168, 168, 185, 185, 185, 185, 197, 198,
	196, 196, 196, 196, 196, 177, 177, 177, 178, 178,
	178, 179, 179, 179, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 188, 186, 186, 187, 187,
	15, 20, 20, 16, 16, 16, 16, 16, 17, 17,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 115, 115,
	117, 117, 113, 113, 116, 116, 114, 114, 114, 118,
	118, 118, 119, 119, 143, 143, 143, 23, 23, 25,
	25, 26, 27, 32, 32, 32, 32, 6, 6, 6,
	6, 24, 24, 24, 24, 24, 24, 24, 18, 204,
	28, 29, 29, 30, 30, 30, 34, 34, 34, 33,
	33, 33, 39, 39, 41, 41, 41, 41, 41, 42,
	42, 42, 42, 42, 42, 38, 38, 40, 40, 40,
	40, 131, 131, 131, 130, 130, 44, 44, 45, 45,
	46, 46, 47, 47, 47, 47, 61, 61, 98, 98,
	100, 100, 48, 48, 48, 48, 49, 49, 50, 50,
	51, 51, 138, 138, 137, 137, 137, 136, 136, 54,
	54, 54, 56, 55, 55, 55, 55, 57, 57, 59,
	59, 58, 58, 60, 62, 62, 62, 62, 62, 63,
	63, 43, 43, 43, 43, 43, 43, 43, 112, 112,
	65, 65, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 76, 76, 76, 76, 76, 76, 66, 66,
	66, 66, 66, 66, 66, 37, 37, 77, 77, 77,
	83, 78, 78, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 73, 73, 73, 73, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 205, 205,
	75, 74, 74, 74, 74, 74, 74, 74, 35, 35,
	35, 35, 35, 141, 141, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 87, 87,
	36, 36, 85, 85, 86, 88, 88, 84, 84, 84,
	68, 68, 68, 68, 68, 68, 68, 68, 70, 70,
	70, 89, 89, 90, 90, 91, 91, 92, 92, 93,
	94, 94, 94, 95, 95, 95, 95, 96, 96, 96,
	67, 67, 67, 67, 67, 67, 97, 97, 97, 97,
	101, 101, 79, 79, 81, 81, 80, 82, 102, 102,
	105, 103, 103, 103, 106, 106, 106, 106, 104, 104,
	104, 133, 133, 133, 110, 110, 120, 120, 121, 121,
	111, 111, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 123, 123, 123, 124, 124, 125, 125, 125,
	132, 132, 128, 128, 129, 129, 134, 134, 135, 135,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 201,
	202, 139, 140, 140, 140,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 4,
	6, 7, 5, 8, 1, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 2, 4, 1, 3,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 0, 2, 0,
	3, 0, 1, 0, 3, 3, 0, 2, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 3, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 0, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 2, 3, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 4, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 5, 6, 4,
	4, 6, 6, 6, 8, 8, 8, 8, 9, 8,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 2, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -199, -1, -2, -7, -8, -9, -10, -11, -12,
	-13, -14, -15, -16, -17, -21, -22, -23, -25, -26,
	-27, -6, -24, -18, -3, -4, 6, 7, -31, 9,
	10, 30, -19, 119, 120, 122, 121, 155, 123, 148,
	52, 169, 170, 172, 173, 150, 25, 149, 153, 154,
	31, 32, 125, -201, 8, 255, 56, -200, 356, -91,
	15, -30, 5, -28, -204, -28, -28, -28, -28, -28,
	-174, -176, 56, 94, -125, 129, 76, 247, 126, 127,
	133, -128, -192, -127, 59, 60, 61, 265, 141, 297,
	298, 169, 180, 174, 201, 193, 266, 299, 142, 191,
	194, 234, 139, 300, 221, 228, 70, 172, 243, 301,
	151, 189, 185, 302, 274, 183, 27, 303, 230, 206,
	304, 270, 232, 184, 229, 125, 305, 144, 137, 306,
	207, 211, 307, 235, 308, 309, 310, 178, 179, 311,
	140, 237, 205, 138, 33, 267, 36, 159, 238, 209,
	312, 204, 200, 313, 314, 315, 316, 203, 177, 199,
	40, 213, 212, 214, 233, 196, 317, 318, 319, 145,
	320, 186, 18, 321, 322, 323, 324, 325, 241, 154,
	326, 157, 327, 328, 329, 330, 331, 332, 231, 208,
	210, 134, 161, 269, 333, 239, 182, 334, 146, 158,
	153, 242, 147, 335, 336, 337, 338, 339, 340, 341,
	173, 342, 343, 344, 345, 168, 236, 245, 39, 218,
	346, 176, 136, 347, 170, 165, 223, 197, 160, 348,
	349, 187, 188, 202, 175, 198, 171, 162, 155, 350,
	244, 219, 271, 195, 192, 166, 351, 163, 164, 352,
	224, 225, 167, 268, 240, 190, 220, -111, 129, 247,
	126, 225, 131, 127, 127, 128, 129, 247, 126, 127,
	-58, -134, -192, -127, 129, 127, 112, 194, 234, 119,
	222, 230, -117, 231, 161, -143, 127, -113, 221, 224,
	225, 167, -192, 232, 236, 235, 226, -134, 171, -32,
	-139, 353, -139, -139, -139, -139, 223, 223, -139, -2,
	-95, 17, 16, -5, -3, -201, 6, 20, 21, -34,
	-41, 41, 42, -42, 21, 34, 45, 43, -29, -40,
	103, -43, -134, -64, 78, -69, 29, -192, -127, 23,
	-68, -65, -84, -82, -83, 112, 113, 114, 101, 102,
	109, 79, 115, -73, -71, -72, -74, 63, 62, 71,
	64, 65, 66, 67, 72, 73, 74, -128, -80, -201,
	46, 47, 256, 257, 258, 259, 264, 260, 81, 35,
	246, 254, 253, 252, 250, 251, 248, 249, 262, 263,
	132, 247, 126, 107, 255, -111, -111, 11, -52, -53,
	-58, -60, -134, -103, -142, 171, -106, 236, 235, -129,
	-104, -128, -126, 234, 194, 233, 124, 272, 77, 22,
	24, 216, 80, 112, 16, 81, 111, 256, 119, 50,
	273, 248, 249, 246, 258, 259, 247, 222, 29, 10,
	275, 25, 149, 21, 34, 105, 121, 84, 85, 152,
	23, 150, 74, 278, 19, 53, 11, 13, 279, 280,
	14, 132, 131, 96, 128, 48, 8, 115, 26, 93,
	44, 281, 28, 282, 283, 284, 285, 46, 94, 17,
	250, 251, 31, 286, 264, 156, 107, 51, 37, 78,
	287, 288, 72, 289, 75, 54, 76, 15, 49, 290,
	291, 292, 293, 95, 122, 255, 47, 294, 126, 6,
	261, 30, 148, 45, 295, 127, 83, 262, 263, 130,
	73, 5, 133, 32, 9, 52, 55, 252, 253, 254,
	35, 82, 12, 296, -175, 94, -166, -192, -58, 128,
	-58, 255, -121, 132, -121, -121, 127, -58, -192, -192,
	119, 121, 124, 54, -20, -58, -120, 132, -192, -120,
	-120, -120, -58, 116, -58, -192, 30, -118, 94, 12,
	247, -192, 161, 127, 162, 129, -140, -201, -129, -170,
	128, 33, 140, -140, 165, 166, -140, -116, -115, 228,
	229, 223, 227, 12, 166, 223, 164, -140, -2, -9,
	-8, -10, 86, -139, -139, -202, 58, -96, 19, 31,
	-43, -134, -92, -93, -43, -91, -2, -28, 37, -38,
	-40, -42, 41, 42, 69, 11, -131, 77, 76, 93,
	-130, 22, -128, 63, 116, -43, -66, 96, 78, 94,
	95, 80, 98, 97, 108, 101, 102, 103, 104, 105,
	106, 107, 99, 100, 111, 86, 87, 88, 89, 90,
	91, 92, -112, -201, -83, -201, 117, 118, -69, -69,
	-69, -69, -69, -69, -69, -69, -201, -2, -78, -43,
	-201, -201, -201, -201, -201, -201, -201, -201, -201, -87,
	-43, -201, -205, -75, -201, -205, -75, -205, -75, -205,
	-201, -205, -75, -205, -75, -205, -205, -75, -201, -201,
	-201, -201, -201, -201, -201, -59, 26, -58, -45, -46,
	-47, -48, -61, -83, -201, -58, -58, -52, -203, 57,
	11, 55, -203, 57, 116, 57, 171, -106, -108, -107,
	237, 239, 86, -133, -128, 63, 29, 30, 58, 57,
	-58, -145, -148, -150, -149, -151, -146, -147, 191, 192,
	112, 195, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 30, 151, 187, 188, 189, 190, 207, 208,
	209, 210, 211, 212, 213, 214, 174, 193, 266, 175,
	176, 177, 178, 179, 180, 182, 183, 184, 185, 186,
	-192, -140, 129, -192, 78, -192, -58, -58, -140, -140,
	-140, 163, 163, 127, 127, 168, -58, 57, 130, -52,
	23, 54, -58, -192, -192, -135, -134, -126, -140, -118,
	63, -43, -140, -140, -140, -58, -140, -140, -171, 11,
	96, -140, -140, 11, -114, 11, 96, -43, -119, 94,
	54, 205, 354, 355, 9, 96, 57, 18, 116, 57,
	-94, 24, 25, -95, -202, -70, -128, 64, 67, -44,
	57, 11, -42, -58, -43, -43, -76, 72, 78, 73,
	74, -130, 103, -135, -129, -126, -69, -77, -80, -83,
	68, 96, 94, 95, 80, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-141, -192, 63, -192, -68, -68, -128, -39, 21, 34,
	-38, -202, 57, -202, -2, -38, -38, -43, -43, -84,
	63, -38, -84, 63, -38, -38, -33, 21, 34, -85,
	-86, 82, -84, -128, -134, -202, -69, -128, -128, -38,
	-39, -39, -38, -38, -99, 157, -58, 30, 57, -54,
	-56, -55, -57, 44, 48, 50, 45, 46, 47, 51,
	-138, 22, -45, -201, -137, 157, -136, 22, -134, 63,
	-99, 55, -45, -58, -45, -60, -134, 103, -106, -108,
	57, 238, 240, 241, 54, 75, -43, -157, 111, -177,
	-178, -179, -129, 63, 64, -166, -167, -168, -180, 143,
	-185, 134, 136, 133, -169, 144, 128, 28, 58, -162,
	72, 78, -158, 219, -152, 56, -152, -152, -152, -152,
	-156, 194, -156, -156, -156, 56, 56, -152, -152, -152,
	-160, 56, -160, -160, -161, 56, -161, -132, 55, -58,
	-140, 23, -140, -122, 124, 121, 122, -188, 120, 216,
	194, 70, 29, 15, 256, 157, 271, -192, 158, -58,
	-58, -58, -58, -58, 124, 121, -58, -58, -58, -140,
	-58, -58, -118, -134, -134, 63, -58, 39, -43, -43,
	-135, -93, -96, -110, 19, 11, 35, 35, -63, 12,
	-40, -45, -42, 72, 73, 74, 116, -201, -77, -69,
	-69, -69, -37, 152, 77, -202, -202, -38, -38, -43,
	-202, -202, -202, 57, 55, 22, 11, 11, -202, 11,
	11, -202, -202, -38, -88, -86, 84, -43, -202, 116,
	-202, 57, 57, -202, -202, -202, -202, -202, -67, 30,
	35, -2, -201, -201, -102, -105, -84, -46, -47, -47,
	-46, -47, 44, 44, 44, 49, 44, 49, 44, -55,
	-134, -202, -62, 52, 131, 53, -201, -136, -63, -45,
	-63, -63, 116, -107, -109, 242, 239, 245, -192, 63,
	57, -179, 86, 56, -192, 28, -169, -169, -172, -192,
	-172, 28, -154, 29, 72, -159, 220, 64, -156, -156,
	-157, 30, -157, -157, -157, -165, 63, -165, 64, 64,
	54, -128, -140, -139, -195, 139, 135, 143, 144, 137,
	59, 60, 61, 128, 28, 134, 136, 157, 133, -195,
	-123, -124, 130, 22, 128, 28, 157, -194, 55, 163,
	216, 163, 130, -140, -114, -114, 40, 116, -58, -89,
	13, -43, 103, -129, -39, -37, 77, -69, -69, -202,
	-202, -144, 112, 191, 151, 189, 185, 205, 196, 218,
	187, 219, -141, -144, -69, -69, -69, -69, 265, -91,
	85, -43, 83, -129, -69, -69, -101, 54, -102, -79,
	-81, -80, -201, -2, -97, -128, -100, -128, -63, 57,
	86, -50, -49, 54, 55, -51, 54, -49, 44, 44,
	128, 128, 128, -100, -91, -63, 239, 243, 244, -178,
	-179, -182, -181, -128, -185, -172, -172, 56, -155, 54,
	-69, 58, -157, -157, -192, 112, 58, 57, 58, 57,
	58, 57, -58, -139, -139, -58, -139, -128, -191, 268,
	-193, -192, -128, -128, -128, -58, -118, -118, -90, 14,
	16, -202, -69, -202, -152, -152, -152, -161, -152, 179,
	-152, 179, -202, -202, 19, 19, 19, 19, -201, -36,
	261, -43, 57, 57, 27, -101, 57, -202, -202, -202,
	57, 116, -202, 57, -91, -105, -43, -43, 56, -43,
	-201, -201, -201, -202, -95, 58, 57, -152, -98, -128,
	-163, 216, 9, -156, 63, -156, 64, 64, -140, 26,
	-190, -189, -129, 56, 55, -43, -78, -156, -192, -69,
	-69, -69, -69, -69, -95, 63, -69, -69, 28, -81,
	35, -2, -201, -128, -128, -128, -95, -98, -98, -202,
	-98, -98, -137, -184, -183, 55, 138, 70, -181, 58,
	57, -164, 134, 28, 133, -72, -157, -157, 58, 58,
	-201, 57, 86, -98, -58, -202, -202, -202, -202, -35,
	96, 268, -202, -202, -202, 9, -79, -2, 116, 58,
	-202, -202, -202, -62, -183, -192, -173, 86, 63, 146,
	-128, -153, 70, 28, 28, -186, -187, 157, -189, -179,
	58, -202, 266, 51, 269, -102, -202, -128, 64, -58,
	63, -202, 57, -128, -194, 40, 267, 270, 56, -187,
	35, -191, 40, -98, 159, 268, 58, 160, 269, -197,
	-198, 54, -201, 270, -198, 54, 10, 9, -69, 156,
	-196, 147, 142, 145, 30, -196, -202, -202, 141, 29,
	72,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 595, 0, 339, 339, 339, 339,
	339, 339, 0, 667, 650, 0, 0, 0, 0, -2,
	318, 319, 0, 321, 322, -2, 971, 971, 971, 971,
	0, 0, 971, 0, 40, 41, 969, 1, 3, 603,
	0, 0, 343, -2, 341, 0, 650, 650, 0, 0,
	69, 70, 0, 0, 0, 958, 0, 648, 648, 648,
	668, 669, 672, 673, 26, 27, 28, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 0, 0, 0,
	0, 0, 651, 0, 646, 0, 646, 646, 646, 0,
	269, 421, 676, 677, 958, 0, 0, 0, 309, 0,
	972, 281, 0, 283, 972, 0, 972, 0, 290, 0,
	0, 296, 972, 301, 315, 316, 303, 317, 320, 0,
	333, 0, 331, 332, 334, 335, 971, 971, 338, 34,
	607, 0, 0, 595, 36, 0, 339, 344, 345, 0,
	0, -2, -2, 355, 361, 362, 363, 364, 340, 0,
	367, 371, 0, 431, 0, 436, 438, -2, -2, 0,
	473, 474, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 502, 503, 504, 580, 581, 582,
	583, 584, 585, 586, 587, 440, 441, 577, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	538, 538, 538, 538, 538, 538, 538, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 51, 421, 55, 0, 947, 631, -2, -2, 0,
	0, 674, 675, -2, 811, -2, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 0, 0, 88, 0, 86, 0,
	972, 0, 0, 0, 0, 0, 0, 972, 972, 972,
	0, 0, 0, 0, 260, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 270, 972, 309, 273, 0, 0,
	972, 972, 972, 0, 972, 972, 280, 973, 974, 0,
	190, 191, 192, 284, 972, 972, 286, 0, 306, 304,
	305, 298, 299, 0, 312, 293, 294, 297, -2, 328,
	329, 330, 0, 336, 337, 35, 970, 29, 0, 0,
	604, 0, 596, 597, 600, 603, 34, 354, 0, 376,
	365, 356, 359, 360, 342, 0, 368, 0, 0, 0,
	372, 0, 374, 375, 0, 434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 458, 459, 460, 461, 462,
	463, 464, 437, 0, 451, 0, 0, 0, 493, 494,
	495, 496, 497, 498, 499, 0, 352, 34, 0, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	569, 0, 522, 530, 0, 523, 531, 524, 532, 525,
	0, 526, 533, 527, 534, 528, 529, 535, 0, 0,
	0, 352, 352, 0, 0, 53, 0, 420, 0, 378,
	380, 381, 382, -2, 0, 404, -2, 0, 0, 0,
	47, 48, 0, 0, 0, 0, 947, 632, 57, 58,
	0, 0, 0, 166, 641, 642, 643, 639, 215, 0,
	0, 154, 150, 94, 95, 96, 143, 98, 143, 143,
	143, 143, 163, 163, 163, 163, 126, 127, 128, 129,
	130, 0, 0, 113, 143, 143, 143, 117, 133, 134,
	135, 136, 137, 138, 139, 140, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 145, 145, 145, 147, 147,
	670, 72, 0, 972, 0, 972, 84, 0, 229, 231,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	647, 0, 972, 266, 267, 422, 678, 679, 271, 272,
	310, 311, 274, 275, 276, 277, 278, 279, 0, 193,
	194, 285, 289, 0, 309, 0, 0, 291, 292, 0,
	0, 324, 325, 326, 608, 0, 0, 0, 0, 0,
	599, 601, 602, 607, 37, 0, 588, 0, 0, 429,
	0, 0, 357, 32, 432, 433, 435, 452, 0, 454,
	456, 373, 369, 0, 578, -2, 442, 443, 467, 468,
	469, 0, 0, 0, 0, 465, 447, 0, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	492, 553, 554, 0, 490, 491, 500, 0, 0, 0,
	353, 470, 0, 626, 34, 0, 0, 0, 0, 475,
	580, 0, 475, 580, 0, 0, 0, 350, 351, 575,
	572, 0, 0, 577, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 409, 0, 0, 412, 0, 0, 0,
	0, 403, 0, 0, 424, 892, 405, 0, 407, 408,
	429, 0, 429, 50, 429, 52, 0, 423, 633, 56,
	0, 0, 61, 62, 634, 635, 636, 637, 0, 85,
	216, 218, 221, 222, 223, 89, 90, 91, 0, 0,
	203, 0, 0, 197, 197, 0, 195, 196, 87, 157,
	155, 0, 152, 151, 97, 0, 163, 163, 120, 121,
	166, 0, 166, 166, 166, 0, 0, 114, 115, 116,
	108, 0, 109, 110, 111, 0, 112, 0, 0, 972,
	74, 649, 75, 971, 0, 0, 662, 230, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 0, 76,
	234, 236, 235, 239, 0, 0, 0, 261, 972, 265,
	306, 306, 288, 307, 308, 313, 295, 0, 605, 606,
	0, 598, 30, 0, 644, 645, 589, 590, 591, 0,
	366, 377, 358, 453, 455, 457, 0, 352, 444, 465,
	448, 0, 445, 0, 0, 439, 505, 0, 0, 472,
	-2, 509, 510, 0, 0, 0, 0, 0, 546, 0,
	0, 547, 0, 595, 0, 573, 0, 0, 521, 0,
	540, 0, 0, 541, 542, 543, 544, 545, 620, 0,
	0, -2, 0, 0, 429, 628, 0, 379, 398, 400,
	0, 395, 410, 411, 413, 0, 415, 0, 417, 418,
	383, 385, 386, 0, 0, 0, 0, 406, 595, 429,
	45, 46, 0, 59, 60, 0, 0, 66, 167, 168,
	0, 219, 0, 0, 0, 185, 197, 197, 188, 198,
	189, 0, 159, 0, 156, 93, 153, 0, 166, 166,
	122, 0, 123, 124, 125, 0, 141, 0, 0, 0,
	0, 671, 73, 224, 971, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 971,
	0, 971, 663, 664, 665, 666, 0, 79, 0, 0,
	0, 0, 0, 264, 309, 309, 609, 0, 31, 593,
	0, 430, 370, 579, 0, 446, 0, 466, 449, 506,
	507, 0, 143, 143, 558, 143, 147, 561, 143, 563,
	143, 566, 0, 0, 0, 0, 0, 0, 0, 570,
	520, 576, 0, 578, 0, 0, 38, 0, 620, 610,
	622, 624, 0, 34, 0, 616, 0, 390, 595, 0,
	0, 392, 399, 0, 0, 393, 0, 394, 414, 416,
	0, 0, 0, 0, 603, 44, 63, 64, 65, 217,
	220, 0, 199, 143, 202, 186, 187, 0, 161, 0,
	158, 144, 118, 119, 164, 165, 163, 0, 163, 0,
	148, 0, 972, 225, 226, 227, 228, 0, 233, 0,
	77, 78, 0, 0, 238, 262, 282, 287, 33, 0,
	0, 508, 450, 511, 555, 163, 559, 560, 562, 564,
	565, 567, 513, 512, 0, 0, 0, 0, 0, 603,
	0, 574, 0, 0, 0, 39, 0, 625, -2, 0,
	0, 0, 54, 0, 603, 629, 630, 396, 0, 401,
	0, 0, 0, 404, 43, 177, 0, 201, 0, 388,
	169, 162, 0, 166, 142, 166, 0, 0, 71, 0,
	80, 81, 0, 0, 0, 594, 592, 556, 557, 0,
	0, 0, 0, 548, 0, 571, 0, 0, 0, 623,
	0, -2, 0, 618, 617, 391, 42, 0, 0, 426,
	0, 0, 424, 176, 178, 0, 183, 0, 200, 0,
	0, 174, 0, 171, 173, 160, 131, 132, 146, 149,
	0, 0, 0, 0, 240, 514, 516, 515, 517, 0,
	0, 0, 519, 536, 537, 0, 613, 34, 0, 397,
	425, 427, 428, 387, 179, 180, 0, 184, 182, 0,
	389, 92, 0, 170, 172, 0, 256, 0, 82, 83,
	76, 518, 0, 0, 0, 621, -2, 619, 181, 0,
	175, 255, 0, 0, 79, 549, 0, 552, 0, 257,
	0, 237, 550, 0, 0, 0, 204, 0, 0, 205,
	206, 0, 0, 551, 207, 0, 0, 0, 0, 0,
	208, 210, 211, 0, 0, 209, 258, 259, 212, 213,
	214,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 106, 98, 3,
	56, 58, 103, 101, 57, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 356,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:335
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:340
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:341
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:369
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:389
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:407
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:435
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:442
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:454
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:466
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:523
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:527
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:539
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:543
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:553
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:563
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = RepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = ReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = ReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = Serializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:595
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:612
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:617
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:621
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:625
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:634
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:638
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:644
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:649
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:654
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:677
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:684
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:695
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:710
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:714
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:720
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:947
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.sqlVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:956
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:961
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:983
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:991
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1023
		{
			yyVAL.optVal = nil
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1045
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1054
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1058
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1080
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.colKeyOpt = colKey
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1097
		{
			yyVAL.sqlVal = nil
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1111
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1131
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1164
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1168
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1234
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1238
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 204:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 206:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1253
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 207:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1257
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1263
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1300
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1316
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1320
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1334
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1352
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1357
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1464
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1470
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 258:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1480
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1484
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1496
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1500
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1508
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1516
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1521
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &OtherRead{}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1559
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1564
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1602
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1624
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1629
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1651
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1698
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = "extended "
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1708
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = "full "
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1728
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1736
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1742
		{
			yyVAL.showFilter = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.showFilter = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = SessionStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = GlobalStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1790
		{
			yyVAL.statement = &Begin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &Begin{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &Commit{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &Rollback{}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1815
		{
			yyVAL.str = JSONStr
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1819
		{
			yyVAL.str = TreeStr
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = VitessStr
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1829
		{
			yyVAL.statement = &Explain{Fmt: yyDollar[2].str, Statement: yyDollar[3].selStmt}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &Explain{Fmt: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1837
		{
			yyVAL.statement = &Explain{Fmt: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.statement = &Explain{Fmt: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &OtherRead{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1851
		{
			yyVAL.statement = &OtherRead{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &OtherRead{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1881
		{
			setAllowComments(yylex, true)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.bytes2 = nil
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = UnionStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = UnionAllStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = UnionDistinctStr
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1914
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
			yyVAL.str = SQLCacheStr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.str = DistinctStr
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = DistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1940
		{
			yyVAL.selectExprs = nil
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1949
		{
			yyVAL.strs = nil
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1965
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = SQLCacheStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = DistinctStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = DistinctStr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = StraightJoinHint
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2011
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2019
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2024
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2028
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2044
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2058
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2092
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2125
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2129
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2133
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2143
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2145
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2149
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2155
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2157
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2160
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.empty = struct{}{}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2173
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.str = JoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = JoinStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = JoinStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = StraightJoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = LeftJoinStr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = LeftJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = RightJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = RightJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.str = NaturalJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2263
		{
			yyVAL.indexHints = nil
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2267
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2271
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2275
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2279
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.str = IsNullStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2390
		{
			yyVAL.str = IsNotNullStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.str = IsTrueStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.str = IsNotTrueStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2402
		{
			yyVAL.str = IsFalseStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.str = IsNotFalseStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2412
		{
			yyVAL.str = EqualStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2416
		{
			yyVAL.str = LessThanStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2420
		{
			yyVAL.str = GreaterThanStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.str = LessEqualStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = GreaterEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.str = NotEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2471
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 518:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2821
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.str = BooleanModeStr
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2829
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 551:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2833
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.str = QueryExpansionStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2869
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2917
		{
			yyVAL.str = string("")
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2931
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2937
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2956
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2960
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &NullVal{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3018
		{
			yyVAL.exprs = nil
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3036
		{
			yyVAL.orderBy = nil
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3040
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3061
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3065
		{
			yyVAL.str = AscScr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = DescScr
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3074
		{
			yyVAL.limit = nil
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3082
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3086
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3091
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = ForUpdateStr
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3099
		{
			yyVAL.str = ShareModeStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3112
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3120
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3125
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3129
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3133
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3144
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3148
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3152
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3157
		{
			yyVAL.updateExprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3161
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3213
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3223
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3228
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3234
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3242
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3246
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3253
		{
			yyVAL.bytes = []byte("charset")
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = &Default{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3277
		{
			yyVAL.byt = 0
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.byt = 1
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3287
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.str = IgnoreStr
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3301
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3303
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3327
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3334
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3336
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3361
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3692
		{
			decNesting(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3697
		{
			skipToEnd(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3702
		{
			skipToEnd(yylex)
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3706
		{
			skipToEnd(yylex)
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3710
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

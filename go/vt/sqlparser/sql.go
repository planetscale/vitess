// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const SQL_CALC_FOUND_ROWS = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const AT_ID = 57401
const AT_AT_ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const BIT_LITERAL = 57412
const NULL = 57413
const TRUE = 57414
const FALSE = 57415
const OFF = 57416
const OR = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const UNARY = 57439
const COLLATE = 57440
const BINARY = 57441
const UNDERSCORE_BINARY = 57442
const UNDERSCORE_UTF8MB4 = 57443
const UNDERSCORE_UTF8 = 57444
const UNDERSCORE_LATIN1 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const INDEX = 57458
const VIEW = 57459
const TO = 57460
const IGNORE = 57461
const IF = 57462
const UNIQUE = 57463
const PRIMARY = 57464
const COLUMN = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const KEY_BLOCK_SIZE = 57468
const CHECK = 57469
const INDEXES = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const BEGIN = 57499
const START = 57500
const TRANSACTION = 57501
const COMMIT = 57502
const ROLLBACK = 57503
const SAVEPOINT = 57504
const RELEASE = 57505
const WORK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const CHAR = 57524
const VARCHAR = 57525
const BOOL = 57526
const CHARACTER = 57527
const VARBINARY = 57528
const NCHAR = 57529
const TEXT = 57530
const TINYTEXT = 57531
const MEDIUMTEXT = 57532
const LONGTEXT = 57533
const BLOB = 57534
const TINYBLOB = 57535
const MEDIUMBLOB = 57536
const LONGBLOB = 57537
const JSON = 57538
const ENUM = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const NULLX = 57548
const AUTO_INCREMENT = 57549
const APPROXNUM = 57550
const SIGNED = 57551
const UNSIGNED = 57552
const ZEROFILL = 57553
const COLLATION = 57554
const DATABASES = 57555
const TABLES = 57556
const VITESS_METADATA = 57557
const VSCHEMA = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const EXTENDED = 57565
const KEYSPACES = 57566
const VITESS_KEYSPACES = 57567
const VITESS_SHARDS = 57568
const VITESS_TABLETS = 57569
const NAMES = 57570
const CHARSET = 57571
const GLOBAL = 57572
const SESSION = 57573
const ISOLATION = 57574
const LEVEL = 57575
const READ = 57576
const WRITE = 57577
const ONLY = 57578
const REPEATABLE = 57579
const COMMITTED = 57580
const UNCOMMITTED = 57581
const SERIALIZABLE = 57582
const CURRENT_TIMESTAMP = 57583
const DATABASE = 57584
const CURRENT_DATE = 57585
const CURRENT_TIME = 57586
const LOCALTIME = 57587
const LOCALTIMESTAMP = 57588
const UTC_DATE = 57589
const UTC_TIME = 57590
const UTC_TIMESTAMP = 57591
const REPLACE = 57592
const CONVERT = 57593
const CAST = 57594
const SUBSTR = 57595
const SUBSTRING = 57596
const GROUP_CONCAT = 57597
const SEPARATOR = 57598
const TIMESTAMPADD = 57599
const TIMESTAMPDIFF = 57600
const MATCH = 57601
const AGAINST = 57602
const BOOLEAN = 57603
const LANGUAGE = 57604
const WITH = 57605
const QUERY = 57606
const EXPANSION = 57607
const UNUSED = 57608
const ARRAY = 57609
const CUME_DIST = 57610
const DESCRIPTION = 57611
const DENSE_RANK = 57612
const EMPTY = 57613
const EXCEPT = 57614
const FIRST_VALUE = 57615
const GROUPING = 57616
const GROUPS = 57617
const JSON_TABLE = 57618
const LAG = 57619
const LAST_VALUE = 57620
const LATERAL = 57621
const LEAD = 57622
const MEMBER = 57623
const NTH_VALUE = 57624
const NTILE = 57625
const OF = 57626
const OVER = 57627
const PERCENT_RANK = 57628
const RANK = 57629
const RECURSIVE = 57630
const ROW_NUMBER = 57631
const SYSTEM = 57632
const WINDOW = 57633
const ACTIVE = 57634
const ADMIN = 57635
const BUCKETS = 57636
const CLONE = 57637
const COMPONENT = 57638
const DEFINITION = 57639
const ENFORCED = 57640
const EXCLUDE = 57641
const FOLLOWING = 57642
const GEOMCOLLECTION = 57643
const GET_MASTER_PUBLIC_KEY = 57644
const HISTOGRAM = 57645
const HISTORY = 57646
const INACTIVE = 57647
const INVISIBLE = 57648
const LOCKED = 57649
const MASTER_COMPRESSION_ALGORITHMS = 57650
const MASTER_PUBLIC_KEY_PATH = 57651
const MASTER_TLS_CIPHERSUITES = 57652
const MASTER_ZSTD_COMPRESSION_LEVEL = 57653
const NESTED = 57654
const NETWORK_NAMESPACE = 57655
const NOWAIT = 57656
const NULLS = 57657
const OJ = 57658
const OLD = 57659
const OPTIONAL = 57660
const ORDINALITY = 57661
const ORGANIZATION = 57662
const OTHERS = 57663
const PATH = 57664
const PERSIST = 57665
const PERSIST_ONLY = 57666
const PRECEDING = 57667
const PRIVILEGE_CHECKS_USER = 57668
const PROCESS = 57669
const RANDOM = 57670
const REFERENCE = 57671
const REQUIRE_ROW_FORMAT = 57672
const RESOURCE = 57673
const RESPECT = 57674
const RESTART = 57675
const RETAIN = 57676
const REUSE = 57677
const ROLE = 57678
const SECONDARY = 57679
const SECONDARY_ENGINE = 57680
const SECONDARY_LOAD = 57681
const SECONDARY_UNLOAD = 57682
const SKIP = 57683
const SRID = 57684
const THREAD_PRIORITY = 57685
const TIES = 57686
const UNBOUNDED = 57687
const VCPU = 57688
const VISIBLE = 57689
const FORMAT = 57690
const TREE = 57691
const VITESS = 57692
const TRADITIONAL = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 312,
	133, 312,
	145, 312,
	170, 326,
	171, 326,
	-2, 314,
	-1, 49,
	135, 336,
	-2, 334,
	-1, 72,
	39, 372,
	-2, 380,
	-1, 400,
	121, 706,
	-2, 702,
	-1, 401,
	121, 707,
	-2, 703,
	-1, 415,
	39, 373,
	-2, 385,
	-1, 416,
	39, 374,
	-2, 386,
	-1, 436,
	89, 961,
	-2, 74,
	-1, 437,
	89, 876,
	-2, 75,
	-1, 442,
	89, 843,
	-2, 665,
	-1, 444,
	89, 908,
	-2, 667,
	-1, 946,
	121, 709,
	-2, 705,
	-1, 1031,
	57, 56,
	59, 56,
	-2, 60,
	-1, 1380,
	5, 624,
	18, 624,
	20, 624,
	32, 624,
	60, 624,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 17911

var yyAct = [...]int{

	400, 1614, 1624, 1422, 1581, 1306, 1053, 1228, 344, 1496,
	1208, 1360, 373, 1530, 1483, 359, 1209, 1025, 743, 1396,
	697, 1062, 1361, 1049, 1082, 1357, 1195, 1096, 1257, 408,
	1022, 1052, 71, 3, 1366, 441, 736, 617, 330, 92,
	598, 1325, 868, 290, 1372, 313, 290, 69, 933, 1066,
	1146, 92, 769, 290, 1274, 1283, 940, 774, 1011, 1004,
	1027, 764, 888, 741, 763, 966, 746, 402, 781, 346,
	417, 28, 910, 780, 1033, 566, 1092, 67, 753, 335,
	92, 771, 778, 567, 290, 615, 290, 607, 72, 711,
	66, 896, 342, 331, 8, 288, 334, 7, 587, 6,
	278, 1617, 1601, 276, 1612, 326, 1589, 1609, 710, 1423,
	1600, 1588, 1342, 1115, 1452, 571, 1390, 438, 1391, 1392,
	74, 75, 76, 77, 78, 79, 630, 1114, 1044, 1045,
	94, 95, 96, 782, 333, 783, 568, 1043, 570, 403,
	30, 423, 427, 60, 34, 35, 332, 385, 1265, 391,
	392, 389, 390, 388, 387, 386, 1075, 1308, 94, 95,
	96, 1486, 435, 393, 394, 286, 282, 283, 284, 1113,
	1556, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 1083, 1245, 670, 1443, 1244, 629, 1076,
	1246, 625, 59, 1441, 323, 626, 623, 624, 94, 95,
	96, 604, 279, 606, 971, 895, 325, 321, 628, 856,
	618, 619, 855, 1309, 1310, 853, 1611, 1608, 1582, 1305,
	429, 1005, 1110, 1107, 1108, 1574, 1106, 1067, 277, 1632,
	588, 1628, 1539, 1326, 1311, 603, 605, 1531, 613, 573,
	861, 633, 844, 943, 897, 898, 899, 1383, 854, 280,
	857, 1069, 1533, 1229, 1231, 1382, 1381, 569, 1069, 1117,
	1120, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 576, 1328, 670, 411, 290, 578, 579,
	293, 1302, 290, 281, 589, 1165, 1127, 1304, 290, 1126,
	94, 95, 96, 285, 290, 596, 583, 1563, 602, 1112,
	682, 683, 1162, 1465, 1389, 92, 1200, 92, 1175, 1154,
	1039, 1330, 757, 1334, 92, 1329, 695, 1327, 1147, 594,
	1050, 1111, 1332, 1532, 1069, 670, 92, 92, 601, 577,
	660, 1331, 1241, 670, 586, 1230, 1587, 612, 983, 1083,
	593, 1540, 1538, 889, 1333, 1335, 595, 1626, 883, 614,
	1627, 1557, 1625, 631, 600, 1068, 94, 95, 96, 917,
	639, 814, 1068, 1161, 580, 1116, 581, 1065, 1063, 582,
	1064, 644, 645, 915, 916, 914, 608, 1061, 1067, 650,
	1118, 649, 647, 590, 591, 592, 1572, 609, 610, 988,
	989, 1303, 620, 1301, 1548, 682, 683, 1370, 650, 632,
	82, 61, 663, 664, 665, 666, 667, 660, 412, 784,
	670, 680, 682, 683, 94, 95, 96, 647, 648, 649,
	647, 733, 642, 643, 967, 640, 92, 641, 1068, 290,
	890, 290, 290, 650, 92, 884, 650, 734, 599, 83,
	92, 846, 648, 649, 647, 802, 698, 1344, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	650, 762, 670, 1263, 1577, 648, 649, 647, 1409, 750,
	1160, 438, 1159, 1449, 1592, 1633, 714, 716, 59, 720,
	722, 761, 725, 650, 773, 967, 815, 1172, 747, 779,
	913, 648, 649, 647, 735, 713, 715, 717, 719, 721,
	723, 724, 1492, 905, 907, 908, 1139, 1140, 1141, 650,
	906, 1594, 828, 831, 832, 833, 834, 835, 836, 1634,
	837, 838, 839, 840, 841, 816, 817, 818, 819, 800,
	801, 829, 428, 803, 572, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 820, 821, 822, 823, 824,
	825, 826, 827, 659, 658, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 1072, 290, 670, 1491, 433,
	842, 92, 1073, 845, 1278, 847, 290, 290, 92, 92,
	92, 648, 649, 647, 290, 94, 95, 96, 290, 1346,
	1573, 290, 866, 867, 1277, 290, 1266, 92, 1509, 650,
	1489, 985, 92, 92, 92, 290, 92, 92, 830, 1275,
	430, 431, 94, 95, 96, 881, 935, 873, 792, 92,
	92, 565, 859, 574, 575, 94, 95, 96, 848, 849,
	870, 94, 95, 96, 584, 1248, 858, 412, 872, 1545,
	773, 984, 1369, 865, 661, 662, 663, 664, 665, 666,
	667, 660, 1536, 1610, 670, 1544, 843, 878, 745, 1405,
	648, 649, 647, 850, 851, 852, 911, 1596, 412, 862,
	68, 934, 1536, 1585, 1536, 412, 1536, 1564, 650, 1035,
	936, 1070, 871, 1536, 1535, 1481, 1480, 875, 876, 877,
	1461, 879, 880, 1196, 92, 1467, 412, 362, 361, 364,
	365, 366, 367, 646, 885, 886, 363, 368, 1464, 412,
	1415, 1414, 955, 958, 1411, 1412, 892, 950, 968, 1411,
	1410, 996, 412, 912, 1036, 412, 1038, 92, 92, 1008,
	412, 946, 1196, 944, 1035, 646, 412, 30, 945, 1008,
	1013, 1016, 1017, 1018, 1014, 92, 1015, 1019, 1547, 425,
	1373, 1374, 290, 698, 30, 92, 791, 790, 997, 290,
	70, 290, 1203, 980, 1358, 1413, 1007, 1369, 1204, 290,
	290, 290, 1008, 990, 947, 937, 938, 92, 1369, 1036,
	92, 1034, 1235, 1249, 1034, 1516, 976, 977, 1042, 59,
	405, 92, 567, 946, 1008, 944, 1178, 1177, 996, 1034,
	1002, 1023, 986, 996, 999, 996, 59, 59, 336, 860,
	776, 1003, 30, 1006, 438, 1602, 1498, 438, 998, 1077,
	1472, 1097, 1401, 1031, 1373, 1374, 1379, 1252, 1054, 1455,
	1084, 1085, 1086, 1000, 1013, 1016, 1017, 1018, 1014, 1093,
	1015, 1019, 59, 1088, 1087, 290, 92, 1037, 92, 1307,
	1119, 1041, 1032, 1499, 290, 290, 290, 290, 290, 1040,
	1100, 290, 290, 1619, 59, 290, 92, 1057, 1615, 1098,
	659, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 1403, 290, 670, 1376, 1358, 1279, 290, 893,
	290, 290, 864, 1220, 290, 92, 1378, 1101, 1221, 1218,
	1217, 948, 949, 1216, 1219, 1606, 1121, 1122, 1123, 1124,
	1125, 1454, 1599, 1128, 1129, 1094, 1095, 1130, 1222, 1350,
	1017, 1018, 1185, 744, 1604, 1194, 1193, 911, 963, 1134,
	1270, 1102, 789, 1104, 597, 1132, 1459, 1262, 737, 981,
	1133, 1579, 964, 951, 952, 1578, 1137, 957, 960, 961,
	738, 1131, 659, 658, 668, 669, 661, 662, 663, 664,
	665, 666, 667, 660, 1514, 1260, 670, 1254, 1494, 1103,
	863, 1021, 975, 1192, 418, 978, 979, 406, 407, 1458,
	1156, 1191, 409, 410, 912, 70, 1457, 1142, 419, 1353,
	1078, 1079, 1080, 1081, 1196, 748, 749, 421, 290, 420,
	627, 1621, 1620, 405, 1166, 1163, 1089, 1090, 1091, 290,
	290, 290, 290, 290, 887, 1155, 1210, 1184, 758, 403,
	751, 290, 418, 1621, 1561, 290, 1487, 1189, 1198, 290,
	1201, 1171, 982, 68, 290, 290, 419, 1205, 290, 290,
	290, 73, 65, 415, 416, 421, 1, 420, 312, 1613,
	1188, 1247, 1424, 92, 401, 1495, 1109, 1227, 1580, 1250,
	1529, 1395, 1253, 1197, 1236, 1060, 1258, 1258, 1238, 1199,
	1051, 1212, 1213, 1211, 1215, 870, 1214, 81, 1223, 564,
	80, 1571, 882, 611, 1059, 1058, 1537, 1237, 651, 1233,
	1054, 1234, 1264, 93, 1074, 1259, 1239, 291, 1485, 1402,
	291, 92, 92, 1267, 1268, 93, 1269, 291, 1271, 1272,
	1273, 1242, 1261, 1576, 1255, 1256, 797, 795, 796, 794,
	799, 798, 793, 305, 336, 894, 322, 1020, 785, 1099,
	752, 92, 84, 708, 93, 1300, 1299, 1105, 291, 1071,
	291, 1149, 302, 1276, 1282, 1150, 621, 622, 307, 275,
	678, 1190, 1243, 439, 432, 92, 1157, 1158, 1364, 739,
	742, 934, 1164, 1298, 987, 1167, 1168, 740, 1456, 1352,
	1170, 707, 965, 1174, 1323, 767, 345, 1176, 904, 360,
	1179, 1180, 1181, 1182, 1183, 1151, 1152, 1281, 1343, 357,
	358, 290, 1322, 1324, 1315, 1313, 1314, 991, 1202, 652,
	343, 92, 337, 1337, 766, 759, 1169, 92, 92, 1336,
	1321, 946, 1210, 1347, 1359, 1012, 1312, 1362, 945, 1010,
	1009, 772, 1375, 1371, 765, 995, 414, 1225, 1226, 962,
	1555, 1356, 1451, 92, 413, 1368, 290, 52, 1322, 33,
	327, 635, 422, 1351, 23, 22, 21, 20, 19, 25,
	92, 18, 92, 92, 17, 16, 1258, 1258, 1394, 1377,
	585, 1385, 37, 1387, 27, 1388, 1386, 1384, 26, 15,
	14, 1408, 13, 12, 11, 1398, 10, 9, 5, 4,
	290, 1393, 638, 24, 1399, 1400, 696, 1054, 2, 1054,
	0, 1406, 1407, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 0, 92, 0, 1425, 92,
	92, 92, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 1416, 0, 0, 0, 291, 1418, 0, 1420,
	0, 0, 291, 0, 0, 0, 0, 0, 291, 0,
	874, 0, 1419, 1434, 1430, 1431, 1319, 1320, 1439, 93,
	0, 93, 0, 0, 1429, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 1210, 0,
	93, 93, 0, 0, 0, 1460, 1469, 1468, 0, 0,
	0, 0, 0, 0, 92, 0, 900, 901, 902, 903,
	1250, 0, 92, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 92, 0, 1316,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 1054, 1380, 0, 0, 1488, 0, 1490, 1502, 659,
	658, 668, 669, 661, 662, 663, 664, 665, 666, 667,
	660, 953, 954, 670, 0, 0, 0, 0, 0, 0,
	0, 1497, 1501, 0, 0, 92, 92, 0, 92, 0,
	0, 1500, 0, 92, 1362, 92, 92, 92, 290, 1513,
	93, 1508, 92, 291, 1515, 291, 291, 1522, 93, 1523,
	1525, 1526, 0, 0, 93, 1527, 1517, 0, 1521, 92,
	290, 1534, 1493, 1541, 0, 0, 0, 0, 1528, 0,
	0, 0, 1542, 1549, 1543, 0, 1436, 1437, 0, 1438,
	0, 0, 1440, 0, 1442, 0, 1433, 0, 1562, 1362,
	1435, 0, 1570, 0, 1048, 1568, 0, 92, 0, 0,
	0, 1444, 1445, 1569, 0, 0, 0, 0, 92, 92,
	0, 0, 1550, 0, 0, 1584, 0, 1583, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 1462, 1463,
	1210, 1466, 1590, 1293, 0, 290, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 1497, 1054, 1482, 0, 1477,
	0, 1598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1603, 1605, 92, 0, 1289, 1290, 1291, 0, 0,
	0, 0, 0, 0, 0, 1618, 0, 1607, 0, 0,
	291, 0, 374, 29, 1629, 93, 0, 1593, 0, 0,
	291, 291, 93, 93, 93, 0, 0, 0, 291, 0,
	0, 0, 291, 0, 0, 291, 0, 0, 0, 291,
	0, 93, 29, 0, 0, 0, 93, 93, 93, 291,
	93, 93, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 93, 93, 670, 0, 1292, 0, 1524,
	0, 0, 1297, 1294, 1285, 1295, 1288, 0, 1284, 0,
	404, 0, 1286, 1287, 0, 668, 669, 661, 662, 663,
	664, 665, 666, 667, 660, 0, 1296, 670, 1551, 1552,
	1553, 1554, 0, 1558, 0, 1559, 1560, 1173, 371, 0,
	30, 31, 32, 60, 34, 35, 0, 0, 1565, 0,
	1566, 1567, 0, 0, 1186, 1187, 742, 0, 0, 0,
	64, 0, 0, 0, 0, 36, 55, 56, 93, 58,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	1586, 0, 0, 0, 0, 0, 1448, 0, 45, 324,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 93, 0, 0, 1595, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 440, 93,
	670, 0, 0, 0, 0, 0, 291, 0, 0, 93,
	0, 0, 0, 291, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 291, 291, 291, 0, 1630, 1631, 0,
	0, 93, 0, 0, 93, 0, 0, 0, 38, 39,
	41, 40, 43, 0, 57, 93, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 0, 0,
	670, 0, 0, 0, 0, 0, 0, 44, 63, 62,
	0, 1447, 53, 54, 42, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 1446, 0, 46, 47,
	0, 48, 49, 50, 51, 0, 0, 0, 0, 291,
	93, 0, 93, 0, 0, 0, 0, 0, 291, 291,
	291, 291, 291, 0, 0, 291, 291, 0, 0, 291,
	93, 0, 1345, 0, 0, 0, 0, 616, 0, 616,
	0, 0, 0, 0, 0, 0, 616, 291, 0, 0,
	0, 0, 291, 0, 291, 291, 1354, 0, 291, 93,
	29, 659, 658, 668, 669, 661, 662, 663, 664, 665,
	666, 667, 660, 679, 681, 670, 659, 658, 668, 669,
	661, 662, 663, 664, 665, 666, 667, 660, 0, 0,
	670, 61, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 699, 700,
	701, 702, 703, 704, 705, 706, 0, 709, 712, 712,
	712, 718, 712, 712, 718, 712, 726, 727, 728, 729,
	730, 731, 732, 440, 0, 440, 0, 29, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 634, 636, 0, 0, 0, 0,
	0, 0, 291, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 291, 291, 291, 291, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 291,
	0, 0, 0, 291, 0, 0, 0, 0, 291, 291,
	0, 0, 291, 291, 291, 0, 1453, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 93, 1148, 0,
	0, 0, 0, 336, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 1471, 0, 0, 1473, 0, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	0, 0, 670, 0, 755, 0, 0, 0, 0, 0,
	0, 0, 440, 294, 0, 93, 93, 0, 786, 0,
	0, 0, 297, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 616, 0, 0, 0, 0, 0, 0,
	616, 616, 616, 0, 304, 0, 0, 1512, 336, 93,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 616, 616, 616, 0, 616, 616,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	295, 616, 616, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 93, 93, 0, 0, 0, 0, 308, 298, 0,
	309, 310, 317, 0, 0, 0, 301, 303, 314, 299,
	300, 319, 318, 0, 296, 316, 315, 93, 0, 440,
	291, 0, 0, 0, 0, 0, 440, 440, 440, 0,
	0, 0, 0, 0, 93, 0, 93, 93, 0, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 0, 0,
	440, 440, 440, 0, 440, 440, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 440, 440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 654,
	93, 657, 0, 93, 93, 93, 291, 671, 672, 673,
	674, 675, 676, 677, 0, 655, 656, 653, 659, 658,
	668, 669, 661, 662, 663, 664, 665, 666, 667, 660,
	0, 1024, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 974, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 0, 0, 616, 0,
	616, 93, 0, 755, 0, 0, 440, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	93, 0, 93, 0, 0, 0, 0, 93, 0, 93,
	93, 93, 291, 0, 0, 909, 93, 0, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 93, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 440, 1153, 0, 0,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 93, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 0, 0, 0, 0, 93, 0,
	768, 0, 0, 0, 0, 0, 0, 1206, 1207, 291,
	0, 768, 768, 768, 768, 768, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1024, 0, 1232,
	0, 0, 0, 0, 0, 0, 768, 93, 0, 0,
	768, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 616, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 426, 0, 0, 0, 0, 0, 0, 0, 289,
	0, 289, 0, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 1144,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	440, 0, 0, 0, 0, 0, 0, 1363, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 969, 0, 0, 1365, 1367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 0, 289, 0, 0,
	0, 1367, 0, 289, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 1450, 0, 0, 440, 0,
	440, 1397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 1426, 1427, 1428,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 1338, 1339, 0, 1340, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 0, 0, 1363, 0, 29, 0, 969, 0,
	0, 0, 0, 0, 289, 0, 289, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 1546, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 0, 1363,
	0, 0, 440, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 1519, 0, 1520, 0, 0, 0,
	0, 1484, 0, 1484, 1484, 1484, 0, 0, 0, 1432,
	1397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 1616, 0, 0, 0, 0, 0,
	0, 289, 289, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 289, 0, 1575, 289, 0, 0, 0,
	869, 0, 0, 0, 0, 0, 440, 440, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 0, 1591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 1503,
	1504, 1505, 1506, 1507, 0, 0, 0, 1510, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 869, 0, 0, 0, 426, 426, 0, 0, 426,
	426, 426, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 426, 426, 426, 426, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 869, 289, 0, 289, 0, 0, 0,
	0, 0, 0, 0, 289, 1029, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	289, 289, 289, 289, 0, 0, 289, 289, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 0, 289, 0, 1135, 1136, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 426, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 289, 289, 289, 289, 289, 0,
	0, 0, 0, 0, 0, 0, 1224, 0, 0, 0,
	289, 0, 0, 0, 1029, 0, 0, 0, 0, 289,
	289, 0, 0, 289, 1240, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 550, 538, 0,
	0, 495, 553, 468, 485, 561, 486, 489, 526, 453,
	508, 184, 483, 1029, 472, 448, 479, 449, 470, 497,
	126, 501, 467, 540, 511, 552, 155, 0, 473, 559,
	158, 517, 0, 231, 172, 289, 0, 0, 499, 542,
	506, 535, 494, 527, 458, 516, 554, 484, 524, 555,
	0, 0, 0, 94, 95, 96, 0, 1055, 1056, 0,
	0, 0, 0, 0, 116, 0, 521, 549, 481, 523,
	525, 563, 447, 518, 0, 451, 454, 560, 545, 476,
	477, 1251, 0, 0, 0, 0, 0, 0, 498, 507,
	532, 492, 0, 0, 0, 0, 0, 970, 0, 0,
	474, 0, 515, 0, 0, 0, 455, 452, 0, 0,
	289, 0, 496, 0, 0, 0, 457, 0, 475, 533,
	0, 445, 135, 537, 544, 493, 292, 548, 491, 490,
	551, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 541, 471, 480, 120, 478,
	213, 191, 252, 514, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 450, 0, 232, 255,
	274, 114, 466, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	462, 465, 460, 461, 509, 510, 556, 557, 558, 534,
	456, 0, 463, 464, 0, 539, 546, 547, 513, 97,
	106, 157, 271, 206, 131, 256, 446, 459, 124, 469,
	0, 0, 482, 487, 488, 500, 502, 503, 504, 505,
	512, 519, 520, 522, 528, 529, 530, 531, 536, 543,
	562, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	550, 538, 0, 0, 495, 553, 468, 485, 561, 486,
	489, 526, 453, 508, 184, 483, 0, 472, 448, 479,
	449, 470, 497, 126, 501, 467, 540, 511, 552, 155,
	0, 473, 559, 158, 517, 0, 231, 172, 0, 0,
	0, 499, 542, 506, 535, 494, 527, 458, 516, 554,
	484, 524, 555, 0, 0, 0, 94, 95, 96, 0,
	1055, 1056, 0, 0, 0, 0, 0, 116, 0, 521,
	549, 481, 523, 525, 563, 447, 518, 0, 451, 454,
	560, 545, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 498, 507, 532, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 0, 515, 0, 0, 0, 455,
	452, 0, 0, 0, 0, 496, 0, 0, 0, 457,
	0, 475, 533, 0, 445, 135, 537, 544, 493, 292,
	548, 491, 490, 551, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 541, 471,
	480, 120, 478, 213, 191, 252, 514, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 450,
	0, 232, 255, 274, 114, 466, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 462, 465, 460, 461, 509, 510, 556,
	557, 558, 534, 456, 0, 463, 464, 0, 539, 546,
	547, 513, 97, 106, 157, 271, 206, 131, 256, 446,
	459, 124, 469, 0, 0, 482, 487, 488, 500, 502,
	503, 504, 505, 512, 519, 520, 522, 528, 529, 530,
	531, 536, 543, 562, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 550, 538, 0, 0, 495, 553, 468,
	485, 561, 486, 489, 526, 453, 508, 184, 483, 0,
	472, 448, 479, 449, 470, 497, 126, 501, 467, 540,
	511, 552, 155, 0, 473, 559, 158, 517, 0, 231,
	172, 0, 0, 0, 499, 542, 506, 535, 494, 527,
	458, 516, 554, 484, 524, 555, 59, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 521, 549, 481, 523, 525, 563, 447, 518,
	0, 451, 454, 560, 545, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 532, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 533, 0, 445, 135, 537,
	544, 493, 292, 548, 491, 490, 551, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 541, 471, 480, 120, 478, 213, 191, 252, 514,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 450, 0, 232, 255, 274, 114, 466, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 462, 465, 460, 461,
	509, 510, 556, 557, 558, 534, 456, 0, 463, 464,
	0, 539, 546, 547, 513, 97, 106, 157, 271, 206,
	131, 256, 446, 459, 124, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	528, 529, 530, 531, 536, 543, 562, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 550, 538, 0, 0,
	495, 553, 468, 485, 561, 486, 489, 526, 453, 508,
	184, 483, 0, 472, 448, 479, 449, 470, 497, 126,
	501, 467, 540, 511, 552, 155, 0, 473, 559, 158,
	517, 0, 231, 172, 0, 0, 0, 499, 542, 506,
	535, 494, 527, 458, 516, 554, 484, 524, 555, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 521, 549, 481, 523, 525,
	563, 447, 518, 0, 451, 454, 560, 545, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 498, 507, 532,
	492, 0, 0, 0, 0, 0, 0, 1355, 0, 474,
	0, 515, 0, 0, 0, 455, 452, 0, 0, 0,
	0, 496, 0, 0, 0, 457, 0, 475, 533, 0,
	445, 135, 537, 544, 493, 292, 548, 491, 490, 551,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 541, 471, 480, 120, 478, 213,
	191, 252, 514, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 450, 0, 232, 255, 274,
	114, 466, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 462,
	465, 460, 461, 509, 510, 556, 557, 558, 534, 456,
	0, 463, 464, 0, 539, 546, 547, 513, 97, 106,
	157, 271, 206, 131, 256, 446, 459, 124, 469, 0,
	0, 482, 487, 488, 500, 502, 503, 504, 505, 512,
	519, 520, 522, 528, 529, 530, 531, 536, 543, 562,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 550,
	538, 0, 0, 495, 553, 468, 485, 561, 486, 489,
	526, 453, 508, 184, 483, 0, 472, 448, 479, 449,
	470, 497, 126, 501, 467, 540, 511, 552, 155, 0,
	473, 559, 158, 517, 0, 231, 172, 0, 0, 0,
	499, 542, 506, 535, 494, 527, 458, 516, 554, 484,
	524, 555, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 521, 549,
	481, 523, 525, 563, 447, 518, 0, 451, 454, 560,
	545, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	498, 507, 532, 492, 0, 0, 0, 0, 0, 0,
	1241, 0, 474, 0, 515, 0, 0, 0, 455, 452,
	0, 0, 0, 0, 496, 0, 0, 0, 457, 0,
	475, 533, 0, 445, 135, 537, 544, 493, 292, 548,
	491, 490, 551, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 541, 471, 480,
	120, 478, 213, 191, 252, 514, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 450, 0,
	232, 255, 274, 114, 466, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 462, 465, 460, 461, 509, 510, 556, 557,
	558, 534, 456, 0, 463, 464, 0, 539, 546, 547,
	513, 97, 106, 157, 271, 206, 131, 256, 446, 459,
	124, 469, 0, 0, 482, 487, 488, 500, 502, 503,
	504, 505, 512, 519, 520, 522, 528, 529, 530, 531,
	536, 543, 562, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 550, 538, 0, 0, 495, 553, 468, 485,
	561, 486, 489, 526, 453, 508, 184, 483, 0, 472,
	448, 479, 449, 470, 497, 126, 501, 467, 540, 511,
	552, 155, 0, 473, 559, 158, 517, 0, 231, 172,
	0, 0, 0, 499, 542, 506, 535, 494, 527, 458,
	516, 554, 484, 524, 555, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 521, 549, 481, 523, 525, 563, 447, 518, 0,
	451, 454, 560, 545, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 498, 507, 532, 492, 0, 0, 0,
	0, 0, 0, 1001, 0, 474, 0, 515, 0, 0,
	0, 455, 452, 0, 0, 0, 0, 496, 0, 0,
	0, 457, 0, 475, 533, 0, 445, 135, 537, 544,
	493, 292, 548, 491, 490, 551, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	541, 471, 480, 120, 478, 213, 191, 252, 514, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 450, 0, 232, 255, 274, 114, 466, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 462, 465, 460, 461, 509,
	510, 556, 557, 558, 534, 456, 0, 463, 464, 0,
	539, 546, 547, 513, 97, 106, 157, 271, 206, 131,
	256, 446, 459, 124, 469, 0, 0, 482, 487, 488,
	500, 502, 503, 504, 505, 512, 519, 520, 522, 528,
	529, 530, 531, 536, 543, 562, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 550, 538, 0, 0, 495,
	553, 468, 485, 561, 486, 489, 526, 453, 508, 184,
	483, 0, 472, 448, 479, 449, 470, 497, 126, 501,
	467, 540, 511, 552, 155, 0, 473, 559, 158, 517,
	0, 231, 172, 0, 0, 0, 499, 542, 506, 535,
	494, 527, 458, 516, 554, 484, 524, 555, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 521, 549, 481, 523, 525, 563,
	447, 518, 0, 451, 454, 560, 545, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 498, 507, 532, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	515, 0, 0, 0, 455, 452, 0, 0, 0, 0,
	496, 0, 0, 0, 457, 0, 475, 533, 0, 445,
	135, 537, 544, 493, 292, 548, 491, 490, 551, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 541, 471, 480, 120, 478, 213, 191,
	252, 514, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 450, 0, 232, 255, 274, 114,
	466, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 462, 465,
	460, 461, 509, 510, 556, 557, 558, 534, 456, 0,
	463, 464, 0, 539, 546, 547, 513, 97, 106, 157,
	271, 206, 131, 256, 446, 459, 124, 469, 0, 0,
	482, 487, 488, 500, 502, 503, 504, 505, 512, 519,
	520, 522, 528, 529, 530, 531, 536, 543, 562, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 550, 538,
	0, 0, 495, 553, 468, 485, 561, 486, 489, 526,
	453, 508, 184, 483, 0, 472, 448, 479, 449, 470,
	497, 126, 501, 467, 540, 511, 552, 155, 0, 473,
	559, 158, 517, 0, 231, 172, 0, 0, 0, 499,
	542, 506, 535, 494, 527, 458, 516, 554, 484, 524,
	555, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 521, 549, 481,
	523, 525, 563, 447, 518, 0, 451, 454, 560, 545,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 498,
	507, 532, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 0, 515, 0, 0, 0, 455, 452, 0,
	0, 0, 0, 496, 0, 0, 0, 457, 0, 475,
	533, 0, 445, 135, 537, 544, 493, 292, 548, 491,
	490, 551, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 541, 471, 480, 120,
	478, 213, 191, 252, 514, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 443, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 450, 0, 232,
	255, 274, 114, 466, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 444, 442,
	437, 436, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 462, 465, 460, 461, 509, 510, 556, 557, 558,
	534, 456, 0, 463, 464, 0, 539, 546, 547, 513,
	97, 106, 157, 271, 206, 131, 256, 446, 459, 124,
	469, 0, 0, 482, 487, 488, 500, 502, 503, 504,
	505, 512, 519, 520, 522, 528, 529, 530, 531, 536,
	543, 562, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 550, 538, 0, 0, 495, 553, 468, 485, 561,
	486, 489, 526, 453, 508, 184, 483, 0, 472, 448,
	479, 449, 470, 497, 126, 501, 467, 540, 511, 552,
	155, 0, 473, 559, 158, 517, 0, 231, 172, 0,
	0, 0, 499, 542, 506, 535, 494, 527, 458, 516,
	554, 484, 524, 555, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	521, 549, 481, 523, 525, 563, 447, 518, 0, 451,
	454, 560, 545, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 498, 507, 532, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 515, 0, 0, 0,
	455, 452, 0, 0, 0, 0, 496, 0, 0, 0,
	457, 0, 475, 533, 0, 445, 135, 537, 544, 493,
	292, 548, 491, 490, 551, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 541,
	471, 480, 120, 478, 213, 191, 252, 514, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 777, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 443, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	450, 0, 232, 255, 274, 114, 466, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 444, 442, 437, 436, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 462, 465, 460, 461, 509, 510,
	556, 557, 558, 534, 456, 0, 463, 464, 0, 539,
	546, 547, 513, 97, 106, 157, 271, 206, 131, 256,
	446, 459, 124, 469, 0, 0, 482, 487, 488, 500,
	502, 503, 504, 505, 512, 519, 520, 522, 528, 529,
	530, 531, 536, 543, 562, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 550, 538, 0, 0, 495, 553,
	468, 485, 561, 486, 489, 526, 453, 508, 184, 483,
	0, 472, 448, 479, 449, 470, 497, 126, 501, 467,
	540, 511, 552, 155, 0, 473, 559, 158, 517, 0,
	231, 172, 0, 0, 0, 499, 542, 506, 535, 494,
	527, 458, 516, 554, 484, 524, 555, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 521, 549, 481, 523, 525, 563, 447,
	518, 0, 451, 454, 560, 545, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 498, 507, 532, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 0, 515,
	0, 0, 0, 455, 452, 0, 0, 0, 0, 496,
	0, 0, 0, 457, 0, 475, 533, 0, 445, 135,
	537, 544, 493, 292, 548, 491, 490, 551, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 541, 471, 480, 120, 478, 213, 191, 252,
	514, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 434, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 443, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 450, 0, 232, 255, 274, 114, 466,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 444, 442, 437, 436, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 462, 465, 460,
	461, 509, 510, 556, 557, 558, 534, 456, 0, 463,
	464, 0, 539, 546, 547, 513, 97, 106, 157, 271,
	206, 131, 256, 446, 459, 124, 469, 0, 0, 482,
	487, 488, 500, 502, 503, 504, 505, 512, 519, 520,
	522, 528, 529, 530, 531, 536, 543, 562, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	941, 0, 341, 0, 0, 0, 126, 0, 340, 0,
	0, 0, 155, 0, 942, 384, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 94,
	95, 96, 362, 361, 364, 365, 366, 367, 0, 0,
	116, 363, 368, 369, 370, 0, 0, 0, 0, 338,
	355, 0, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 353, 424, 0, 0, 0, 398, 0,
	354, 0, 0, 347, 348, 350, 349, 351, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 397,
	0, 0, 292, 0, 0, 395, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 385, 396, 391, 392,
	389, 390, 388, 387, 386, 399, 377, 378, 379, 380,
	382, 0, 393, 394, 381, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 341, 0, 0, 0, 126, 0, 340, 0, 0,
	0, 155, 0, 0, 384, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 375, 376, 0, 0, 0,
	0, 0, 0, 1046, 0, 59, 0, 0, 94, 95,
	96, 362, 361, 364, 365, 366, 367, 0, 0, 116,
	363, 368, 369, 370, 1047, 0, 0, 0, 338, 355,
	0, 383, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 353, 0, 0, 0, 0, 398, 0, 354,
	0, 0, 347, 348, 350, 349, 351, 356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 397, 0,
	0, 292, 0, 0, 395, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 385, 396, 391, 392, 389,
	390, 388, 387, 386, 399, 377, 378, 379, 380, 382,
	0, 393, 394, 381, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	341, 0, 0, 0, 126, 0, 340, 0, 0, 0,
	155, 0, 0, 384, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 412, 94, 95, 96,
	362, 361, 364, 365, 366, 367, 0, 0, 116, 363,
	368, 369, 370, 0, 0, 0, 0, 338, 355, 0,
	383, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 353, 0, 0, 0, 0, 398, 0, 354, 0,
	0, 347, 348, 350, 349, 351, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 397, 0, 0,
	292, 0, 0, 395, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 385, 396, 391, 392, 389, 390,
	388, 387, 386, 399, 377, 378, 379, 380, 382, 0,
	393, 394, 381, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 126, 0, 340, 0, 0, 0, 155,
	0, 0, 384, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 362,
	361, 364, 365, 366, 367, 0, 0, 116, 363, 368,
	369, 370, 0, 0, 0, 0, 338, 355, 0, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 424, 0, 0, 0, 398, 0, 354, 0, 0,
	347, 348, 350, 349, 351, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 397, 0, 0, 292,
	0, 0, 395, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 385, 396, 391, 392, 389, 390, 388,
	387, 386, 399, 377, 378, 379, 380, 382, 0, 393,
	394, 381, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 126, 0, 340, 0, 0, 0, 155, 0,
	0, 384, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 362, 959,
	364, 365, 366, 367, 0, 0, 116, 363, 368, 369,
	370, 0, 0, 0, 0, 338, 355, 0, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	424, 0, 0, 0, 398, 0, 354, 0, 0, 347,
	348, 350, 349, 351, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 397, 0, 0, 292, 0,
	0, 395, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 385, 396, 391, 392, 389, 390, 388, 387,
	386, 399, 377, 378, 379, 380, 382, 0, 393, 394,
	381, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 341, 0, 0,
	0, 126, 0, 340, 0, 0, 0, 155, 0, 0,
	384, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 362, 956, 364,
	365, 366, 367, 0, 0, 116, 363, 368, 369, 370,
	0, 0, 0, 0, 338, 355, 0, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 424,
	0, 0, 0, 398, 0, 354, 0, 0, 347, 348,
	350, 349, 351, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 397, 0, 0, 292, 0, 0,
	395, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 385, 396, 391, 392, 389, 390, 388, 387, 386,
	399, 377, 378, 379, 380, 382, 0, 393, 394, 381,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 341,
	0, 0, 0, 126, 0, 340, 0, 0, 0, 155,
	0, 0, 384, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 362,
	361, 364, 365, 366, 367, 0, 0, 116, 363, 368,
	369, 370, 0, 0, 0, 0, 338, 355, 0, 383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	353, 0, 0, 0, 0, 398, 0, 354, 0, 0,
	347, 348, 350, 349, 351, 356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 397, 0, 0, 292,
	0, 0, 395, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 385, 396, 391, 392, 389, 390, 388,
	387, 386, 399, 377, 378, 379, 380, 382, 0, 393,
	394, 381, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 341, 0,
	0, 0, 126, 0, 340, 0, 0, 0, 155, 0,
	0, 384, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 362, 361,
	364, 365, 366, 367, 0, 0, 116, 363, 368, 369,
	370, 0, 0, 0, 0, 338, 355, 0, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 353,
	0, 0, 0, 0, 398, 0, 354, 0, 0, 347,
	348, 350, 349, 351, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 397, 0, 0, 292, 0,
	0, 395, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 385, 396, 391, 392, 389, 390, 388, 387,
	386, 399, 377, 378, 379, 380, 382, 0, 393, 394,
	381, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	384, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 362, 361, 364,
	365, 366, 367, 0, 0, 116, 363, 368, 369, 370,
	0, 0, 0, 0, 0, 355, 0, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 0,
	0, 0, 0, 398, 0, 354, 0, 0, 347, 348,
	350, 349, 351, 356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 397, 0, 0, 292, 0, 0,
	395, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 1623, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 385, 396, 391, 392, 389, 390, 388, 387, 386,
	399, 377, 378, 379, 380, 382, 0, 393, 394, 381,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 384,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 412, 94, 95, 96, 362, 361, 364, 365,
	366, 367, 0, 0, 116, 363, 368, 369, 370, 0,
	0, 0, 0, 0, 355, 0, 383, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 353, 0, 0,
	0, 0, 398, 0, 354, 0, 0, 347, 348, 350,
	349, 351, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 397, 0, 0, 292, 0, 0, 395,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	385, 396, 391, 392, 389, 390, 388, 387, 386, 399,
	377, 378, 379, 380, 382, 0, 393, 394, 381, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 384, 158,
	0, 0, 231, 172, 0, 0, 0, 0, 0, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 362, 361, 364, 365, 366,
	367, 0, 0, 116, 363, 368, 369, 370, 0, 0,
	0, 0, 0, 355, 0, 383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 353, 0, 0, 0,
	0, 398, 0, 354, 0, 0, 347, 348, 350, 349,
	351, 356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 397, 0, 0, 292, 0, 0, 395, 0,
	203, 0, 235, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 252, 0, 193, 212, 159, 241, 204, 251, 261,
	262, 238, 259, 270, 228, 101, 237, 249, 117, 223,
	0, 0, 0, 103, 247, 234, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 244, 245, 121, 273,
	109, 258, 105, 110, 257, 177, 240, 248, 171, 164,
	104, 246, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 232, 255, 274,
	114, 0, 239, 266, 269, 0, 205, 115, 134, 128,
	200, 132, 156, 265, 267, 268, 176, 111, 144, 229,
	152, 160, 208, 272, 190, 214, 118, 254, 230, 385,
	396, 391, 392, 389, 390, 388, 387, 386, 399, 377,
	378, 379, 380, 382, 0, 393, 394, 381, 97, 106,
	157, 271, 206, 131, 256, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 253, 260, 263, 138, 250, 264, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 158, 0,
	0, 231, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	659, 658, 668, 669, 661, 662, 663, 664, 665, 666,
	667, 660, 0, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 292, 0, 0, 0, 0, 203,
	0, 235, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	252, 0, 193, 212, 159, 241, 204, 251, 261, 262,
	238, 259, 270, 228, 101, 237, 249, 117, 223, 0,
	0, 0, 103, 247, 234, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 244, 245, 121, 273, 109,
	258, 105, 110, 257, 177, 240, 248, 171, 164, 104,
	246, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 232, 255, 274, 114,
	0, 239, 266, 269, 0, 205, 115, 134, 128, 200,
	132, 156, 265, 267, 268, 176, 111, 144, 229, 152,
	160, 208, 272, 190, 214, 118, 254, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	271, 206, 131, 256, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 253, 260, 263, 138, 250, 264, 184, 0,
	0, 0, 754, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 756, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 648, 649, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 292, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 88,
	89, 0, 85, 0, 0, 0, 90, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	1028, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 1030, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 292, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 30, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 158, 0, 0,
	231, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 292, 0, 0, 0, 0, 203, 0,
	235, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 252,
	0, 193, 212, 159, 241, 204, 251, 261, 262, 238,
	259, 270, 228, 101, 237, 249, 117, 223, 0, 0,
	0, 103, 247, 234, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 244, 245, 121, 273, 109, 258,
	105, 110, 257, 177, 240, 248, 171, 164, 104, 246,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 232, 255, 274, 114, 0,
	239, 266, 269, 0, 205, 115, 134, 128, 200, 132,
	156, 265, 267, 268, 176, 111, 144, 229, 152, 160,
	208, 272, 190, 214, 118, 254, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 271,
	206, 131, 256, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 253, 260, 263, 138, 250, 264, 184, 0, 0,
	0, 1028, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 1030, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 292, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	1026, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 993, 0, 0, 994, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 292, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 788, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 787, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	292, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 292,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	138, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 292, 0,
	0, 0, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 1030, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 292, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	158, 0, 0, 231, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 756, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 292, 0, 0, 0,
	0, 203, 0, 235, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 252, 0, 193, 212, 159, 241, 204, 251,
	261, 262, 238, 259, 270, 228, 101, 237, 249, 117,
	223, 0, 0, 0, 103, 247, 234, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 244, 245, 121,
	273, 109, 258, 105, 110, 257, 177, 240, 248, 171,
	164, 104, 246, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 232, 255,
	274, 114, 0, 239, 266, 269, 0, 205, 115, 134,
	128, 200, 132, 156, 265, 267, 268, 176, 111, 144,
	229, 152, 160, 208, 272, 190, 214, 118, 254, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 271, 206, 131, 256, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 253, 260, 263, 138, 250, 264,
	770, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 158, 0, 0, 231,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 292, 0, 0, 0, 0, 203, 0, 235,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 252, 0,
	193, 212, 159, 241, 204, 251, 261, 262, 238, 259,
	270, 228, 101, 237, 249, 117, 223, 0, 0, 0,
	103, 247, 234, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 244, 245, 121, 273, 109, 258, 105,
	110, 257, 177, 240, 248, 171, 164, 104, 246, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 232, 255, 274, 114, 0, 239,
	266, 269, 0, 205, 115, 134, 128, 200, 132, 156,
	265, 267, 268, 176, 111, 144, 229, 152, 160, 208,
	272, 190, 214, 118, 254, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 271, 206,
	131, 256, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	253, 260, 263, 138, 250, 264, 184, 0, 0, 0,
	0, 0, 0, 0, 760, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 158, 0, 0, 231, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 292, 0, 0, 0, 0, 203, 0, 235, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 252, 0, 193,
	212, 159, 241, 204, 251, 261, 262, 238, 259, 270,
	228, 101, 237, 249, 117, 223, 0, 0, 0, 103,
	247, 234, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 244, 245, 121, 273, 109, 258, 105, 110,
	257, 177, 240, 248, 171, 164, 104, 246, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 232, 255, 274, 114, 0, 239, 266,
	269, 0, 205, 115, 134, 128, 200, 132, 156, 265,
	267, 268, 176, 111, 144, 229, 152, 160, 208, 272,
	190, 214, 118, 254, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 271, 206, 131,
	256, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 253,
	260, 263, 138, 250, 264, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 158, 0, 0, 231, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 637, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	292, 0, 0, 0, 0, 203, 0, 235, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 252, 0, 193, 212,
	159, 241, 204, 251, 261, 262, 238, 259, 270, 228,
	101, 237, 249, 117, 223, 0, 0, 0, 103, 247,
	234, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 244, 245, 121, 273, 109, 258, 105, 110, 257,
	177, 240, 248, 171, 164, 104, 246, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 232, 255, 274, 114, 0, 239, 266, 269,
	0, 205, 115, 134, 128, 200, 132, 156, 265, 267,
	268, 176, 111, 144, 229, 152, 160, 208, 272, 190,
	214, 118, 254, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 271, 206, 131, 256,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 253, 260,
	263, 138, 250, 264, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 158, 0, 0, 231, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 135, 0, 0, 0, 292,
	0, 0, 0, 0, 203, 0, 235, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 252, 0, 193, 212, 159,
	241, 204, 251, 261, 262, 238, 259, 270, 228, 101,
	237, 249, 117, 223, 0, 0, 0, 103, 247, 234,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	244, 245, 121, 273, 109, 258, 105, 110, 257, 177,
	240, 248, 171, 164, 104, 246, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 232, 255, 274, 114, 0, 239, 266, 269, 0,
	205, 115, 134, 128, 200, 132, 156, 265, 267, 268,
	176, 111, 144, 229, 152, 160, 208, 272, 190, 214,
	118, 254, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 271, 206, 131, 256, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 253, 260, 263,
	328, 250, 264, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 158, 0, 0, 231, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 287, 0, 292, 0,
	0, 0, 0, 203, 0, 235, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 252, 0, 193, 212, 159, 241,
	204, 251, 261, 262, 238, 259, 270, 228, 101, 237,
	249, 117, 223, 0, 0, 0, 103, 247, 234, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 244,
	245, 121, 273, 109, 258, 105, 110, 257, 177, 240,
	248, 171, 164, 104, 246, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	232, 255, 274, 114, 0, 239, 266, 269, 0, 205,
	115, 134, 128, 200, 132, 156, 265, 267, 268, 176,
	111, 144, 229, 152, 160, 208, 272, 190, 214, 118,
	254, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 271, 206, 131, 256, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 253, 260, 263, 138,
	250, 264, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 158, 0, 0, 231, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 292, 0, 0,
	0, 0, 203, 0, 235, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 252, 0, 193, 212, 159, 241, 204,
	251, 261, 262, 238, 259, 270, 228, 101, 237, 249,
	117, 223, 0, 0, 0, 103, 247, 234, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 244, 245,
	121, 273, 109, 258, 105, 110, 257, 177, 240, 248,
	171, 164, 104, 246, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 232,
	255, 274, 114, 0, 239, 266, 269, 0, 205, 115,
	134, 128, 200, 132, 156, 265, 267, 268, 176, 111,
	144, 229, 152, 160, 208, 272, 190, 214, 118, 254,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 271, 206, 131, 256, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 253, 260, 263, 138, 250,
	264,
}
var yyPact = [...]int{

	1714, -1000, -279, 1028, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 969, 806,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 342, 12288, -31,
	151, 34, 17194, 148, 2038, 17543, -1000, 31, -1000, 13,
	17543, 27, 16845, -1000, -1000, -85, -97, -1000, 10194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 784, 956, 964,
	966, 665, 1000, -1000, 8785, 8785, 84, 84, 84, 7389,
	-1000, -1000, 524, 17543, 124, 17543, -152, 102, 102, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 141, 17543, 564, 564, 240,
	569, 17543, 93, 564, 93, 93, 93, 17543, -1000, 198,
	-1000, -1000, -1000, 17543, 564, 903, 341, 69, 279, 279,
	279, -1000, 204, -1000, 4848, 40, 4848, -40, 987, 37,
	-43, -1000, 341, 4848, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 106, -1000, -1000, 17543, 16496, 134, 334, -1000,
	-1000, -1000, -1000, -1000, -1000, 644, 387, -1000, 10194, 2278,
	749, 749, -1000, -1000, 178, -1000, -1000, 11241, 11241, 11241,
	11241, 11241, 11241, 11241, 11241, 11241, 11241, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 749, 195, -1000, 9845, 749, 749, 749, 749, 749,
	749, 749, 749, 10194, 749, 749, 749, 749, 749, 749,
	749, 749, 749, 749, 749, 749, 749, 749, 749, 749,
	-1000, -1000, 969, -1000, 806, -1000, -1000, -1000, 918, 10194,
	10194, 969, -1000, 884, 8785, -1000, -1000, 952, -1000, -1000,
	-1000, -1000, 398, 1008, -1000, 11939, 191, 1006, 16147, -1000,
	14744, 15798, 751, 7026, -116, -1000, -1000, -1000, 320, 14046,
	-1000, -1000, -1000, 901, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 697, 17543, -1000, 330, -1000, 564,
	4848, 108, 564, 360, 564, 17543, 17543, 4848, 4848, 4848,
	47, 80, 77, 17543, 557, 750, 105, 17543, 946, 836,
	17543, 564, 564, -1000, 6300, -1000, 4848, 341, -1000, 552,
	10194, 4848, 4848, 4848, 17543, 4848, 4848, -1000, 550, -1000,
	-1000, 336, -1000, -1000, -1000, -1000, -1000, -1000, 4848, 4848,
	-1000, 1002, 331, -1000, -1000, -1000, -1000, 10194, 279, -1000,
	833, -1000, -1000, 26, -1000, -1000, -1000, -1000, -1000, 1028,
	-1000, -1000, -1000, -122, -1000, -1000, 10194, 10194, 10194, 10194,
	429, 283, 11241, 420, 276, 11241, 11241, 11241, 11241, 11241,
	11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241,
	551, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 564,
	-1000, 997, 633, 633, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 11590, 7738, 6300, 665, 676, 969, 8785,
	8785, 10194, 10194, 9483, 9134, 8785, 906, 339, 387, 17543,
	-1000, -1000, 10892, -1000, -1000, -1000, -1000, -1000, 577, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17543, 17543, 8785, 8785,
	8785, 8785, 8785, 964, 665, 952, -1000, 1022, 239, 582,
	743, -1000, 364, 964, 13697, 746, -1000, 952, -1000, -1000,
	-1000, 17543, -1000, -1000, 15442, -1000, -1000, 5937, 17543, 59,
	17543, -1000, 735, 788, -1000, -1000, -1000, 948, 12999, 13348,
	17543, 722, 667, -1000, -1000, 189, 6663, -116, -1000, 6663,
	729, -1000, -113, -124, 8087, 206, -1000, -1000, -1000, -1000,
	4485, 229, 621, 491, -71, -1000, -1000, -1000, 761, -1000,
	761, 761, 761, 761, -19, -19, -19, -19, -1000, -1000,
	-1000, -1000, -1000, 786, 785, -1000, 761, 761, 761, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 781, 781, 781,
	763, 763, 803, -1000, 17543, 4848, 945, 4848, -1000, 97,
	-1000, -1000, -1000, 17543, 17543, 17543, 17543, 17543, 160, -1000,
	17543, 17543, 740, -1000, 17543, 4848, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 387, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17543, -1000, -1000, -1000, -1000, 17543, 341, 17543,
	17543, 387, -1000, 17543, 17543, -1000, -1000, -1000, -1000, -1000,
	387, 283, 302, 337, -1000, -1000, 432, -1000, -1000, 1686,
	-1000, -1000, -1000, -1000, 420, 11241, 11241, 11241, 161, 1686,
	2028, 1593, 1561, 211, 296, 296, 219, 219, 219, 219,
	219, 540, 540, -1000, -1000, -1000, 577, -1000, -1000, -1000,
	577, 8785, 8785, 739, 749, 188, -1000, 784, -1000, -1000,
	964, 662, 662, 413, 340, 290, 993, 662, 273, 992,
	662, 662, 8785, -1000, -1000, 400, -1000, 10194, 577, -1000,
	187, -1000, 348, 738, 737, 662, 577, 577, 662, 662,
	918, -1000, -1000, 881, 10194, 10194, 10194, -1000, -1000, -1000,
	918, 961, -1000, 889, 888, 981, 8785, 14744, 952, -1000,
	-1000, -1000, 185, 981, 731, 749, -1000, 17543, 14744, 14744,
	14744, 14744, 14744, -1000, 857, 854, -1000, 853, 847, 872,
	17543, -1000, 670, 665, 12999, 199, 749, -1000, 15093, -1000,
	-1000, 59, 725, 14744, 17543, -1000, -1000, 14744, 17543, 5574,
	-1000, 729, -116, -67, -1000, -1000, -1000, -1000, 387, -1000,
	570, 724, 4122, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	769, 564, -1000, 938, 222, 295, 564, 936, -1000, -1000,
	-1000, 907, -1000, 389, -80, -1000, -1000, 530, -19, -19,
	-1000, -1000, 206, 899, 206, 206, 206, 544, 544, -1000,
	-1000, -1000, -1000, 528, -1000, -1000, -1000, 508, -1000, 831,
	17543, 4848, -1000, -1000, -1000, -1000, 1544, 1544, 258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	57, 792, -1000, -1000, -1000, -1000, -11, 46, 99, -1000,
	4848, -1000, 331, 331, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 161, 1686, 1339, -1000, 11241, 11241, -1000,
	-1000, 662, 662, 8785, 6300, 969, 918, -1000, -1000, 118,
	551, 118, 11241, 11241, -1000, 11241, 11241, -1000, -165, 744,
	359, -1000, 10194, 503, -1000, 6300, -1000, 11241, 11241, -1000,
	-1000, -1000, -1000, -1000, -1000, 877, 387, 387, -1000, -1000,
	17543, -1000, -1000, -1000, -1000, 975, 10194, -1000, 713, -1000,
	5211, 964, 830, 17543, 749, 1028, 12999, 17543, 719, -1000,
	308, 788, 768, 829, 694, -1000, -1000, -1000, -1000, 850,
	-1000, 780, -1000, -1000, -1000, -1000, -1000, 665, -1000, 123,
	122, 114, 17543, -1000, 981, 14744, 680, -1000, 680, -1000,
	183, -1000, -1000, -1000, -135, -137, -1000, -1000, -1000, 4485,
	-1000, 4485, 17543, 78, -1000, 564, 564, -1000, -1000, -1000,
	764, 826, 11241, -1000, -1000, -1000, 599, 206, 206, -1000,
	353, -1000, -1000, -1000, 660, -1000, 655, 706, 651, 17543,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17543,
	-1000, -1000, -1000, -1000, -1000, 17543, -171, 564, 17543, 17543,
	17543, 17543, -1000, 341, 341, -1000, 11241, 1686, 1686, -1000,
	-1000, 577, -1000, 964, -1000, 577, 761, 761, -1000, 761,
	763, -1000, 761, 6, 761, -1, 577, 577, 1866, 1851,
	1746, 453, 749, -159, -1000, 387, 10194, -1000, 852, 770,
	-1000, -1000, 971, 962, 387, -1000, -1000, -1000, 908, 708,
	631, -1000, -1000, 8436, 649, 182, 636, -1000, 969, 17543,
	10194, -1000, -1000, 10194, 762, -1000, 10194, -1000, -1000, -1000,
	969, 749, 749, 749, 636, 969, 680, -1000, -1000, 226,
	-1000, -1000, -1000, 4122, -1000, 626, -1000, 761, -1000, -1000,
	-1000, 17543, -63, 1016, 1686, -1000, -1000, -1000, -1000, -1000,
	-19, 535, -19, 502, -1000, 436, 4848, -1000, -1000, -1000,
	-1000, 941, -1000, 6300, -1000, -1000, 758, 796, -1000, -1000,
	-1000, -1000, 1686, -1000, 918, -1000, -1000, 137, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11241, 11241, 11241, 11241,
	11241, 964, 533, 387, 11241, 11241, -1000, 10194, 10194, 935,
	-1000, 749, -1000, 748, 17543, 17543, -1000, 17543, 964, -1000,
	387, 387, 17543, 387, 14395, 17543, 17543, 12637, 964, -1000,
	180, 17543, -1000, 624, -1000, 203, -1000, -111, 206, -1000,
	206, 595, 579, -1000, 749, 689, -1000, 305, 17543, 17543,
	-1000, -1000, -1000, 348, 348, 348, 348, 71, 577, -1000,
	348, 348, 387, 644, 1014, -1000, 749, 1028, 176, -1000,
	-1000, -1000, 617, 615, -1000, 615, 615, 199, -1000, 180,
	-1000, 564, 297, 525, -1000, 74, 17543, 392, 916, -1000,
	912, -1000, -1000, -1000, -1000, -1000, 56, 6300, 4485, 613,
	-1000, -1000, -1000, -1000, -1000, 577, 58, -175, -1000, -1000,
	-1000, 17543, 631, 17543, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 408, -1000, -1000, 17543, -1000, -1000, 446, -1000, -1000,
	608, -1000, 17543, -1000, -1000, 792, -1000, 870, -169, -180,
	583, -1000, -1000, 757, -1000, -1000, 56, 887, -171, -1000,
	863, -1000, 17543, -1000, 53, -1000, -173, 593, 51, -177,
	812, 749, -181, 807, -1000, 991, 10543, -1000, -1000, 1013,
	200, 200, 348, 577, -1000, -1000, -1000, 83, 445, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1288, 1286, 32, 71, 67, 1283, 1282, 1279, 1278,
	99, 97, 94, 1277, 1276, 1274, 1273, 1272, 1270, 1269,
	1268, 1264, 1262, 1260, 1255, 1254, 1251, 1249, 1248, 1247,
	1246, 1245, 1244, 88, 1242, 1241, 1240, 1239, 77, 1237,
	1234, 1232, 1230, 1229, 50, 243, 56, 66, 1226, 70,
	749, 1225, 30, 64, 61, 1224, 44, 1223, 1222, 81,
	1221, 1220, 58, 1219, 1215, 52, 1205, 57, 1204, 7,
	26, 1202, 1200, 1199, 1198, 92, 1882, 1197, 1190, 15,
	1189, 1179, 89, 1178, 72, 20, 11, 12, 22, 1176,
	69, 1175, 8, 1172, 65, 1171, 1170, 1169, 1168, 18,
	1167, 63, 1164, 29, 36, 1158, 14, 59, 34, 25,
	10, 1154, 1153, 16, 82, 68, 73, 1152, 1151, 1150,
	532, 1149, 1148, 62, 1147, 1146, 1142, 40, 87, 98,
	534, 1139, 1137, 1136, 1135, 1132, 35, 1054, 1718, 37,
	78, 1130, 1129, 1128, 2665, 42, 60, 17, 1127, 1126,
	1125, 38, 85, 48, 489, 1123, 41, 1122, 1121, 1120,
	1119, 1118, 1117, 1116, 189, 1113, 1112, 1099, 24, 23,
	76, 27, 1098, 1094, 1092, 1086, 54, 75, 1085, 1084,
	49, 1083, 1082, 28, 1081, 1080, 1079, 1077, 1070, 31,
	6, 1065, 19, 1061, 13, 1060, 21, 1058, 4, 1056,
	9, 1055, 3, 0, 1052, 5, 55, 2, 1049, 1,
	1048, 1046, 1042, 1622, 204, 74, 1041, 108,
}
var yyR1 = [...]int{

	0, 211, 212, 212, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	203, 203, 203, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 37, 37, 11,
	12, 12, 12, 12, 215, 215, 59, 59, 60, 60,
	107, 107, 13, 14, 14, 116, 116, 115, 115, 115,
	117, 117, 117, 117, 154, 154, 15, 15, 15, 15,
	15, 15, 15, 205, 205, 204, 202, 202, 201, 201,
	200, 22, 185, 187, 187, 186, 186, 186, 186, 177,
	157, 157, 157, 157, 160, 160, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 159, 159, 159, 159, 159,
	161, 161, 161, 161, 161, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 176, 176,
	164, 164, 170, 170, 171, 171, 171, 173, 173, 174,
	174, 131, 131, 131, 166, 166, 167, 167, 172, 172,
	168, 168, 168, 169, 169, 169, 175, 175, 175, 175,
	175, 165, 165, 178, 178, 195, 195, 194, 194, 194,
	184, 184, 191, 191, 191, 191, 191, 181, 181, 181,
	182, 182, 180, 180, 183, 183, 193, 193, 192, 179,
	179, 196, 196, 196, 196, 208, 209, 207, 207, 207,
	207, 207, 188, 188, 188, 189, 189, 189, 190, 190,
	190, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 199, 197, 197, 198, 198, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 124, 124,
	210, 210, 126, 126, 122, 122, 125, 125, 123, 123,
	123, 127, 127, 127, 128, 128, 155, 155, 155, 26,
	26, 28, 28, 29, 30, 30, 149, 149, 150, 150,
	31, 32, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 7, 7, 7, 7, 35, 35, 35, 6, 6,
	27, 27, 27, 27, 20, 216, 33, 34, 34, 38,
	38, 38, 40, 40, 40, 43, 43, 43, 46, 46,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 49,
	49, 45, 45, 47, 47, 47, 47, 141, 141, 141,
	140, 140, 51, 51, 52, 52, 53, 53, 54, 54,
	54, 91, 68, 68, 106, 106, 108, 108, 55, 55,
	55, 55, 56, 56, 57, 57, 58, 58, 148, 148,
	147, 147, 147, 146, 146, 61, 61, 61, 63, 62,
	62, 62, 62, 64, 64, 66, 66, 65, 65, 67,
	69, 69, 69, 69, 69, 70, 70, 50, 50, 50,
	50, 50, 50, 50, 50, 119, 119, 72, 72, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 83, 83, 83, 73, 73, 73, 73, 73,
	73, 73, 44, 44, 84, 84, 84, 90, 85, 85,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 80, 80, 80, 80, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 217, 217, 82,
	81, 81, 81, 81, 81, 81, 81, 42, 42, 42,
	42, 42, 153, 153, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 95, 95, 41,
	41, 93, 93, 94, 96, 96, 92, 92, 92, 75,
	75, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 102,
	102, 102, 103, 103, 103, 103, 104, 104, 104, 74,
	74, 74, 74, 105, 105, 105, 105, 109, 109, 86,
	86, 88, 88, 87, 89, 110, 110, 113, 111, 111,
	114, 114, 114, 114, 114, 112, 112, 112, 143, 143,
	143, 118, 118, 129, 129, 130, 130, 120, 120, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 121,
	121, 121, 133, 133, 133, 134, 134, 135, 135, 135,
	142, 142, 138, 138, 139, 139, 144, 144, 145, 145,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 213, 214,
	151, 152, 152, 152,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 4, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	9, 8, 7, 7, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 5, 4, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 3, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -211, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -213,
	6, 7, 8, -37, 10, 11, 31, -22, 124, 125,
	127, 126, 160, 128, 153, 54, 174, 175, 177, 178,
	179, 180, -39, 158, 159, 32, 33, 130, 35, 58,
	9, 267, 155, 154, 26, -212, 369, -38, 5, -99,
	16, -3, -33, -216, -33, -33, -33, -33, -33, -33,
	-185, -187, 58, 97, -135, 134, 78, 259, 131, 132,
	138, -138, -203, -137, 61, 62, 63, 277, 146, 309,
	310, 174, 188, 182, 209, 201, 278, 311, 147, 199,
	202, 246, 144, 312, 229, 236, 72, 177, 255, 313,
	156, 197, 193, 314, 286, 191, 28, 315, 238, 214,
	316, 282, 240, 192, 237, 130, 317, 149, 365, 142,
	318, 215, 219, 319, 247, 320, 321, 322, 186, 187,
	323, 145, 249, 213, 143, 34, 241, 279, 38, 164,
	250, 217, 324, 212, 208, 325, 326, 327, 328, 211,
	185, 207, 42, 221, 220, 222, 245, 204, 329, 330,
	331, 150, 332, 194, 19, 333, 334, 335, 336, 337,
	253, 159, 338, 162, 339, 340, 341, 342, 343, 344,
	239, 216, 218, 139, 166, 235, 281, 345, 251, 190,
	346, 151, 163, 158, 254, 152, 347, 348, 349, 350,
	351, 352, 353, 178, 354, 355, 356, 357, 173, 248,
	257, 41, 226, 358, 184, 141, 359, 175, 170, 231,
	205, 165, 360, 361, 195, 196, 210, 183, 206, 176,
	366, 167, 160, 362, 256, 227, 283, 203, 200, 171,
	363, 168, 169, 364, 367, 242, 232, 243, 244, 233,
	172, 280, 252, 198, 228, -121, 134, 259, 131, 233,
	280, 132, 132, 133, 134, 259, 131, 132, -65, -144,
	-203, -137, 134, 132, 115, 202, 246, 124, 230, 241,
	242, 238, -126, 239, 166, -155, 132, -122, 229, 232,
	233, 172, -210, -203, 240, 248, 247, 234, 244, 243,
	-144, 176, -149, 181, -138, 179, -65, -36, 365, 128,
	-151, -151, 231, 231, -151, -85, -50, -71, 81, -76,
	30, 24, -75, -72, -92, -89, -90, 115, 116, 118,
	117, 119, 104, 105, 112, 82, 120, -80, -78, -79,
	-81, 65, 64, 73, 66, 67, 68, 69, 74, 75,
	76, -138, -144, -87, -213, 48, 49, 268, 269, 270,
	271, 276, 272, 84, 37, 258, 266, 265, 264, 262,
	263, 260, 261, 274, 275, 137, 259, 131, 110, 267,
	-203, -137, -5, -4, -213, 6, 21, 22, -103, 18,
	17, -214, 60, -40, -48, 43, 44, -49, 22, 36,
	47, 45, -34, -47, 106, -50, -144, -47, -120, 136,
	-120, -120, -111, -154, 176, -114, 248, 247, -139, -112,
	-138, -136, 246, 202, 245, 129, 284, 80, 23, 25,
	224, 83, 115, 17, 84, 114, 268, 124, 52, 285,
	260, 261, 258, 270, 271, 259, 230, 30, 11, 287,
	26, 154, 22, 36, 108, 126, 87, 88, 157, 24,
	155, 76, 290, 20, 55, 12, 14, 291, 292, 15,
	137, 136, 99, 133, 50, 9, 120, 27, 96, 46,
	293, 29, 294, 295, 296, 297, 48, 97, 18, 262,
	263, 32, 298, 276, 161, 110, 53, 39, 81, 299,
	300, 74, 301, 77, 56, 78, 16, 51, 302, 303,
	304, 305, 98, 127, 267, 49, 306, 131, 6, 273,
	31, 153, 47, 307, 132, 86, 274, 275, 135, 75,
	5, 138, 33, 10, 54, 57, 264, 265, 266, 37,
	85, 13, 308, 79, -186, 97, -177, -203, -65, 133,
	-65, 267, -130, 137, -130, -130, 132, -65, -203, -203,
	124, 126, 129, 56, 65, -23, -65, -129, 137, -203,
	-129, -129, -129, -65, 121, -65, -203, 31, -127, 97,
	13, 259, -203, 166, 132, 167, 134, -128, 97, -128,
	-128, -181, 133, 34, 145, -152, -213, -139, 170, 171,
	-152, -125, -124, 236, 237, 231, 235, 13, 171, 231,
	169, -127, -152, 135, -138, -35, -138, 65, -7, -3,
	-11, -10, -12, 89, -151, -151, 59, 80, 78, 79,
	96, -50, -73, 99, 81, 97, 98, 83, 101, 100,
	111, 104, 105, 106, 107, 108, 109, 110, 102, 103,
	114, 89, 90, 91, 92, 93, 94, 95, -119, -213,
	-90, -213, 122, 123, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -213, 121, -2, -85, -4, -213,
	-213, -213, -213, -213, -213, -213, -213, -95, -50, -213,
	-217, -82, -213, -217, -82, -217, -82, -217, -213, -217,
	-82, -217, -82, -217, -217, -82, -213, -213, -213, -213,
	-213, -213, -213, -99, -3, -33, -104, 20, 32, -50,
	-100, -101, -50, -99, 39, -45, -47, -49, 43, 44,
	71, 12, -141, -140, 23, -138, 65, 121, 12, -66,
	27, -65, -52, -53, -54, -55, -68, -91, -213, -65,
	12, -59, -60, -65, -67, -144, 59, 176, -114, -154,
	-116, -115, 249, 251, 89, -143, -138, 65, 30, 31,
	60, 59, -65, -157, -160, -162, -161, -163, -158, -159,
	199, 200, 115, 203, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 31, 156, 195, 196, 197, 198,
	215, 216, 217, 218, 219, 220, 221, 222, 182, 201,
	278, 183, 184, 185, 186, 187, 188, 190, 191, 192,
	193, 194, -203, -152, 134, -203, 81, -203, -65, -65,
	-152, -152, -152, 168, 168, 132, 132, 173, -65, 65,
	59, 135, -59, 24, 56, -65, -203, -203, -145, -144,
	-136, -152, -127, 65, -50, -152, -152, -152, -65, -152,
	-152, 65, -182, 12, 99, -152, -152, 12, -123, 12,
	99, -50, -128, 56, -150, 179, 213, 366, 367, 368,
	-50, -50, -50, -50, -83, 74, 81, 75, 76, -76,
	-84, -87, -90, 70, 99, 97, 98, 83, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -153, -203, 65, -203, -75, -75, -138,
	-46, 22, 36, -45, -139, -145, -136, -38, -214, -214,
	-99, -45, -45, -50, -50, -92, 65, -45, -92, 65,
	-45, -45, -43, 22, 36, -93, -94, 85, -92, -138,
	-144, -214, -76, -138, -138, -45, -46, -46, -45, -45,
	-103, -214, 10, 99, 59, 19, 59, -102, 25, 26,
	-103, -77, -138, 66, 69, -51, 59, 12, -49, -65,
	-140, 106, -145, -65, -107, 162, -65, 31, 59, -61,
	-63, -62, -64, 46, 50, 52, 47, 48, 49, 53,
	-148, 23, -52, -3, -213, -147, 162, -146, 23, -144,
	65, -65, -59, -215, 59, 12, 57, -215, 59, 121,
	-114, -116, 59, 250, 252, 253, 56, 77, -50, -169,
	114, -188, -189, -190, -139, 65, 66, -177, -178, -179,
	-191, 148, -196, 139, 141, 138, -180, 149, 133, 29,
	60, -131, 74, 81, -173, 227, -164, 58, -164, -164,
	-164, -164, -168, 202, -168, -168, -168, 58, 58, -164,
	-164, -164, -170, 58, -170, -170, -171, 58, -171, -142,
	57, -65, -152, 24, -152, -132, 129, 126, 127, -199,
	125, 224, 202, 72, 30, 16, 268, 162, 283, -203,
	163, -65, -65, -65, -65, -65, 129, 126, -65, -65,
	-65, -152, -65, -65, -127, -144, -144, -65, -138, 74,
	75, 76, -84, -76, -76, -76, -44, 157, 80, -214,
	-214, -45, -45, -213, 121, -5, -103, -214, -214, 59,
	57, 23, 12, 12, -214, 12, 12, -214, -214, -45,
	-96, -94, 87, -50, -214, 121, -214, 59, 59, -214,
	-214, -214, -214, -214, -104, 41, -50, -50, -101, -104,
	-118, 20, 12, 37, 37, -70, 13, -47, -52, -49,
	121, -70, -74, 31, 37, -3, -213, -213, -110, -113,
	-92, -53, -54, -54, -53, -54, 46, 46, 46, 51,
	46, 51, 46, -62, -144, -214, -214, -3, -69, 54,
	136, 55, -213, -146, -107, 57, -52, -65, -52, -67,
	-144, 106, -115, -117, 254, 251, 257, -203, 65, 59,
	-190, 89, 58, -203, 29, -180, -180, -183, -203, -183,
	29, -166, 30, 74, -174, 228, 66, -168, -168, -169,
	31, -169, -169, -169, -176, 65, -176, 66, 66, 56,
	-138, -152, -151, -206, 144, 140, 148, 149, 142, 61,
	62, 63, 133, 29, 139, 141, 162, 138, -206, -133,
	-134, 135, 23, 133, 29, 162, -205, 57, 168, 224,
	168, 135, -152, -123, -123, -44, 80, -76, -76, -214,
	-214, -46, -139, -99, -104, -156, 115, 199, 156, 197,
	193, 213, 204, 226, 195, 227, -153, -156, -76, -76,
	-76, -76, 277, -99, 88, -50, 86, -139, -76, -76,
	42, -65, -97, 14, -50, 106, -103, -109, 56, -110,
	-86, -88, -87, -213, -105, -138, -108, -138, -70, 59,
	89, -57, -56, 56, 57, -58, 56, -56, 46, 46,
	-214, 133, 133, 133, -108, -70, -52, -70, -70, 121,
	251, 255, 256, -189, -190, -193, -192, -138, -196, -183,
	-183, 58, -167, 56, -76, 60, -169, -169, -203, 115,
	60, 59, 60, 59, 60, 59, -65, -151, -151, -65,
	-151, -138, -202, 280, -204, -203, -138, -138, -138, -65,
	-127, -127, -76, -214, -103, -214, -164, -164, -164, -171,
	-164, 187, -164, 187, -214, -214, 20, 20, 20, 20,
	-213, -41, 273, -50, 59, 59, -98, 15, 17, 28,
	-109, 59, -214, -214, 59, 121, -214, 59, -99, -113,
	-50, -50, 58, -50, -213, -213, -213, -214, -99, -70,
	60, 59, -164, -106, -138, -172, 224, 10, -168, 65,
	-168, 66, 66, -152, 27, -201, -200, -139, 58, 57,
	-104, -168, -203, -76, -76, -76, -76, -76, -103, 65,
	-76, -76, -50, -85, 29, -88, 37, -3, -138, -138,
	-138, -103, -106, -106, -214, -106, -106, -147, -103, -195,
	-194, 57, 143, 72, -192, 60, 59, -175, 139, 29,
	138, -79, -169, -169, 60, 60, -213, 59, 89, -106,
	-65, -214, -214, -214, -214, -42, 99, 280, -214, -214,
	-214, 10, -86, 121, 60, -214, -214, -214, -69, -194,
	-203, -184, 89, 65, 151, -138, -165, 72, 29, 29,
	-197, -198, 162, -200, -190, 60, -214, 278, 53, 281,
	-110, -138, 66, -65, 65, -214, 59, -138, -205, 42,
	279, 282, 58, -198, 37, -202, 42, -106, 164, 280,
	60, 165, 281, -208, -209, 56, -213, 282, -209, 56,
	11, 10, -76, 161, -207, 152, 147, 150, 31, -207,
	-214, -214, 146, 30, 74,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 624, 0,
	365, 365, 365, 365, 365, 365, 365, 0, 697, 689,
	0, 0, 0, 0, -2, 330, 331, 0, 333, -2,
	0, 0, 342, 1010, 1010, 0, 0, 1010, 0, 1008,
	47, 48, 348, 349, 350, 1, 3, 0, 369, 632,
	0, 0, -2, 367, 0, 0, 677, 677, 677, 0,
	76, 77, 0, 0, 0, 993, 0, 675, 675, 675,
	698, 699, 702, 703, 30, 31, 32, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 0, 0, 0, 0, 0,
	0, 0, 673, 0, 673, 673, 673, 0, 276, 447,
	706, 707, 993, 0, 0, 0, 321, 0, 324, 324,
	324, 290, 0, 292, 1011, 0, 1011, 0, 299, 0,
	0, 305, 321, 1011, 313, 327, 328, 315, 310, 311,
	329, 332, 0, 337, 340, 0, 355, 0, 870, 347,
	360, 361, 1010, 1010, 364, 33, 498, 457, 0, 463,
	465, 0, 500, 501, 502, 503, 504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 531, 532,
	533, 609, 610, 611, 612, 613, 614, 615, 616, 467,
	468, 606, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 567, 567, 567, 567, 567,
	567, 567, 567, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, 624, 43, 0, 365, 370, 371, 636, 0,
	0, 624, 1009, 0, 0, -2, -2, 381, 387, 388,
	389, 390, 366, 0, 393, 397, 0, 0, 0, 678,
	0, 0, 62, 0, 981, 658, -2, -2, 0, 0,
	704, 705, -2, 842, -2, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 0, 0, 95, 0, 93, 0,
	1011, 0, 0, 0, 0, 0, 0, 1011, 1011, 1011,
	0, 0, 0, 0, 690, 267, 0, 0, 0, 0,
	0, 0, 0, 275, 0, 277, 1011, 321, 280, 0,
	0, 1011, 1011, 1011, 0, 1011, 1011, 287, 0, 288,
	289, 0, 197, 198, 199, 293, 1012, 1013, 1011, 1011,
	295, 0, 318, 316, 317, 308, 309, 0, 324, 302,
	303, 306, 307, 338, 341, 358, 356, 357, 359, 351,
	352, 353, 354, 0, 362, 363, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 486, 487, 488, 489, 490, 491, 464, 0,
	478, 0, 0, 0, 520, 521, 522, 523, 524, 525,
	526, 527, 528, 0, 378, 0, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 375, 0, 598, 0,
	551, 559, 0, 552, 560, 553, 561, 554, 0, 555,
	562, 556, 563, 557, 558, 564, 0, 0, 0, 378,
	378, 0, 0, 632, 0, 380, 34, 0, 0, 633,
	625, 626, 629, 632, 0, 402, 391, 382, 385, 386,
	368, 0, 394, 398, 0, 400, 401, 0, 0, 60,
	0, 446, 0, 404, 406, 407, 408, 428, 0, 430,
	0, 0, 0, 56, 58, 447, 0, 981, 664, 0,
	64, 65, 0, 0, 0, 173, 668, 669, 670, 666,
	222, 0, 0, 161, 157, 101, 102, 103, 150, 105,
	150, 150, 150, 150, 170, 170, 170, 170, 133, 134,
	135, 136, 137, 0, 0, 120, 150, 150, 150, 124,
	140, 141, 142, 143, 144, 145, 146, 147, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 152, 152, 152,
	154, 154, 700, 79, 0, 1011, 0, 1011, 91, 0,
	236, 238, 239, 0, 0, 0, 0, 0, 0, 691,
	0, 0, 270, 674, 0, 1011, 273, 274, 448, 708,
	709, 278, 279, 322, 323, 281, 282, 283, 284, 285,
	286, 325, 0, 200, 201, 294, 298, 0, 321, 0,
	0, 300, 301, 0, 0, 339, 343, 344, 345, 346,
	499, 458, 459, 460, 462, 479, 0, 481, 483, 469,
	470, 494, 495, 496, 0, 0, 0, 0, 492, 474,
	0, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 519, 582, 583, 0, 517, 518, 529,
	0, 0, 0, 379, 607, 0, -2, 0, 497, 653,
	632, 0, 0, 0, 0, 502, 609, 0, 502, 609,
	0, 0, 0, 376, 377, 604, 601, 0, 0, 606,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 44, 637, 0, 0, 0, 0, 628, 630, 631,
	636, 0, 617, 0, 0, 455, 0, 0, 383, 40,
	399, 395, 0, 455, 0, 0, 445, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 438, 0, 0, 0,
	0, 429, 0, 0, 0, 450, 925, 431, 0, 433,
	434, -2, 0, 0, 0, 54, 55, 0, 0, 0,
	659, 63, 0, 0, 68, 69, 660, 661, 662, 663,
	0, 92, 223, 225, 228, 229, 230, 96, 97, 98,
	0, 0, 210, 0, 0, 204, 204, 0, 202, 203,
	94, 164, 162, 0, 159, 158, 104, 0, 170, 170,
	127, 128, 173, 0, 173, 173, 173, 0, 0, 121,
	122, 123, 115, 0, 116, 117, 118, 0, 119, 0,
	0, 1011, 81, 676, 82, 1010, 0, 0, 692, 237,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	0, 83, 241, 243, 242, 246, 0, 0, 0, 268,
	1011, 272, 318, 318, 297, 319, 320, 304, 335, 480,
	482, 484, 471, 492, 475, 0, 472, 0, 0, 466,
	534, 0, 0, 378, 0, 624, 636, 538, 539, 0,
	0, 0, 0, 0, 575, 0, 0, 576, 0, 624,
	0, 602, 0, 0, 550, 0, 569, 0, 0, 570,
	571, 572, 573, 574, 36, 0, 634, 635, 627, 35,
	0, 671, 672, 618, 619, 620, 0, 392, 403, 384,
	0, 632, 647, 0, 0, 640, 0, 0, 455, 655,
	0, 405, 424, 426, 0, 421, 436, 437, 439, 0,
	441, 0, 443, 444, 409, 410, 411, 0, 412, 0,
	0, 0, 0, 432, 455, 0, 455, 57, 455, 59,
	0, 449, 66, 67, 0, 0, 73, 174, 175, 0,
	226, 0, 0, 0, 192, 204, 204, 195, 205, 196,
	0, 166, 0, 163, 100, 160, 0, 173, 173, 129,
	0, 130, 131, 132, 0, 148, 0, 0, 0, 0,
	701, 80, 231, 1010, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 1010, 0,
	1010, 693, 694, 695, 696, 0, 86, 0, 0, 0,
	0, 0, 271, 321, 321, 473, 0, 493, 476, 535,
	536, 0, 608, 632, 38, 0, 150, 150, 587, 150,
	154, 590, 150, 592, 150, 595, 0, 0, 0, 0,
	0, 0, 0, 599, 549, 605, 0, 607, 0, 0,
	638, 37, 622, 0, 456, 396, 41, 45, 0, 647,
	639, 649, 651, 0, 0, 643, 0, 416, 624, 0,
	0, 418, 425, 0, 0, 419, 0, 420, 440, 442,
	-2, 0, 0, 0, 0, 624, 455, 52, 53, 0,
	70, 71, 72, 224, 227, 0, 206, 150, 209, 193,
	194, 0, 168, 0, 165, 151, 125, 126, 171, 172,
	170, 0, 170, 0, 155, 0, 1011, 232, 233, 234,
	235, 0, 240, 0, 84, 85, 0, 0, 245, 269,
	291, 296, 477, 537, 636, 540, 584, 170, 588, 589,
	591, 593, 594, 596, 542, 541, 0, 0, 0, 0,
	0, 632, 0, 603, 0, 0, 42, 0, 0, 0,
	46, 0, 652, 0, 0, 0, 61, 0, 632, 656,
	657, 422, 0, 427, 0, 0, 0, 430, 632, 51,
	184, 0, 208, 0, 414, 176, 169, 0, 173, 149,
	173, 0, 0, 78, 0, 87, 88, 0, 0, 0,
	39, 585, 586, 0, 0, 0, 0, 577, 0, 600,
	0, 0, 623, 621, 0, 650, 0, 642, 645, 644,
	417, 49, 0, 0, 452, 0, 0, 450, 50, 183,
	185, 0, 190, 0, 207, 0, 0, 181, 0, 178,
	180, 167, 138, 139, 153, 156, 0, 0, 0, 0,
	247, 543, 545, 544, 546, 0, 0, 0, 548, 565,
	566, 0, 641, 0, 423, 451, 453, 454, 413, 186,
	187, 0, 191, 189, 0, 415, 99, 0, 177, 179,
	0, 263, 0, 89, 90, 83, 547, 0, 0, 0,
	648, 646, 188, 0, 182, 262, 0, 0, 86, 578,
	0, 581, 0, 264, 0, 244, 579, 0, 0, 0,
	211, 0, 0, 212, 213, 0, 0, 580, 214, 0,
	0, 0, 0, 0, 215, 217, 218, 0, 0, 216,
	265, 266, 219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 109, 101, 3,
	58, 60, 106, 104, 59, 105, 121, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	90, 89, 91, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 112,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:359
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:364
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:369
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:397
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:411
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:417
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:423
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:431
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:435
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:439
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:462
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:470
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:490
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:496
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:507
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:519
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
			yyVAL.insertAction = InsertAct
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:547
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:555
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:573
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:588
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:592
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:624
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristic = ReadWrite
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:632
		{
			yyVAL.characteristic = ReadOnly
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:638
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.isolationLevel = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:656
		{
			yyVAL.scope = SessionScope
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.scope = GlobalScope
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:666
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:677
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:682
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:686
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:690
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:694
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:699
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:703
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:714
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:730
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:742
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:749
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:756
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:760
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:771
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:785
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1012
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1021
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1030
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1042
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1048
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1056
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1088
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1097
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1101
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1106
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1128
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1207
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1217
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1221
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1233
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1273
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1287
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1310
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1314
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1318
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1322
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1328
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1334
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1340
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1348
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1352
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1356
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1399
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1405
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1409
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1413
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1417
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1443
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1529
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1535
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1545
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1549
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1561
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1565
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1577
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1661
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1670
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1691
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1696
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1718
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = "extended "
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1790
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.str = "full "
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1810
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1814
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1824
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1828
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1838
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1842
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1848
		{
			yyVAL.scope = ImplicitScope
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.scope = SessionScope
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.scope = GlobalScope
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1862
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1902
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
			yyVAL.explainType = EmptyType
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.explainType = JSONType
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.explainType = TreeType
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.explainType = VitessType
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1936
		{
			yyVAL.explainType = TraditionalType
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.explainType = AnalyzeType
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1964
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1972
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.statement = &OtherRead{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2005
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			setAllowComments(yylex, true)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.bytes2 = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.unionType = UnionBasic
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.unionType = UnionAll
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.unionType = UnionDistinct
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = SQLCacheStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2069
		{
			yyVAL.boolean = false
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.selectExprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
			yyVAL.strs = nil
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2107
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2143
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2149
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2153
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2161
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2166
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2186
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2190
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2234
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2275
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2287
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2291
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2297
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2302
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2307
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2315
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.joinType = NormalJoinType
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.joinType = NormalJoinType
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.joinType = NormalJoinType
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.joinType = StraightJoinType
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.joinType = LeftJoinType
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.joinType = LeftJoinType
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2356
		{
			yyVAL.joinType = RightJoinType
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.joinType = RightJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2370
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2400
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2405
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2409
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2413
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2417
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2421
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2484
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2552
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2715
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2809
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2813
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2817
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2975
		{
			yyVAL.matchExprOption = NoOption
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2979
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2983
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2987
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3037
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3071
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3091
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3110
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3114
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3167
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3172
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3176
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3194
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3204
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3210
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			yyVAL.orderDirection = AscOrder
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.orderDirection = AscOrder
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.orderDirection = DescOrder
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3228
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3236
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3240
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3245
		{
			yyVAL.lock = NoLock
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.lock = ForUpdateLock
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3253
		{
			yyVAL.lock = ShareModeLock
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3274
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3278
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3288
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3292
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3296
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3301
		{
			yyVAL.updateExprs = nil
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3305
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3315
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3321
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3325
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3331
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3351
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3357
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3373
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3377
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3385
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3389
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3397
		{
			yyVAL.bytes = []byte("charset")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &Default{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3421
		{
			yyVAL.boolean = false
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3423
		{
			yyVAL.boolean = true
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3426
		{
			yyVAL.boolean = false
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3428
		{
			yyVAL.boolean = true
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3431
		{
			yyVAL.ignore = false
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3433
		{
			yyVAL.ignore = true
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3459
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3463
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3469
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3477
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3490
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3494
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3497
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3499
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3507
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3864
		{
			decNesting(yylex)
		}
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3869
		{
			skipToEnd(yylex)
		}
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3874
		{
			skipToEnd(yylex)
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3878
		{
			skipToEnd(yylex)
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3882
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

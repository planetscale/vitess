//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const PRIMARY = 57448
const SHOW = 57449
const DESCRIBE = 57450
const EXPLAIN = 57451
const DATE = 57452
const ESCAPE = 57453
const REPAIR = 57454
const OPTIMIZE = 57455
const TRUNCATE = 57456
const MAXVALUE = 57457
const PARTITION = 57458
const REORGANIZE = 57459
const LESS = 57460
const THAN = 57461
const PROCEDURE = 57462
const TRIGGER = 57463
const BIT = 57464
const TINYINT = 57465
const SMALLINT = 57466
const MEDIUMINT = 57467
const INT = 57468
const INTEGER = 57469
const BIGINT = 57470
const INTNUM = 57471
const REAL = 57472
const DOUBLE = 57473
const FLOAT_TYPE = 57474
const DECIMAL = 57475
const NUMERIC = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const NAMES = 57508
const CHARSET = 57509
const CURRENT_TIMESTAMP = 57510
const DATABASE = 57511
const CURRENT_DATE = 57512
const CURRENT_TIME = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const UTC_DATE = 57516
const UTC_TIME = 57517
const UTC_TIMESTAMP = 57518
const REPLACE = 57519
const CONVERT = 57520
const CAST = 57521
const GROUP_CONCAT = 57522
const SEPARATOR = 57523
const MATCH = 57524
const AGAINST = 57525
const BOOLEAN = 57526
const LANGUAGE = 57527
const WITH = 57528
const QUERY = 57529
const EXPANSION = 57530
const UNUSED = 57531

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 188,
	79, 581,
	108, 581,
	-2, 39,
	-1, 190,
	79, 604,
	108, 604,
	-2, 41,
	-1, 195,
	108, 482,
	-2, 478,
	-1, 196,
	108, 483,
	-2, 479,
	-1, 583,
	5, 22,
	-2, 429,
	-1, 618,
	108, 485,
	-2, 481,
	-1, 776,
	5, 23,
	-2, 306,
	-1, 868,
	5, 23,
	-2, 430,
	-1, 942,
	5, 22,
	-2, 432,
	-1, 1013,
	5, 23,
	-2, 433,
}

const yyPrivate = 57344

const yyLast = 7741

var yyAct = [...]int{

	362, 38, 542, 1022, 657, 884, 361, 759, 949, 161,
	225, 335, 187, 621, 760, 411, 644, 609, 919, 322,
	716, 723, 838, 800, 726, 620, 830, 756, 227, 617,
	740, 693, 653, 155, 630, 324, 768, 384, 198, 38,
	390, 191, 400, 415, 44, 333, 170, 166, 177, 554,
	43, 1050, 181, 1041, 1047, 1036, 176, 1045, 412, 3,
	1040, 1035, 932, 980, 202, 192, 999, 175, 156, 157,
	158, 159, 796, 637, 218, 957, 645, 337, 889, 890,
	891, 673, 975, 973, 1044, 1042, 1023, 892, 820, 48,
	208, 209, 1005, 204, 638, 671, 129, 160, 605, 607,
	128, 472, 129, 131, 132, 133, 196, 477, 997, 779,
	50, 51, 52, 53, 817, 778, 777, 200, 205, 140,
	819, 130, 677, 632, 531, 532, 987, 898, 965, 180,
	871, 670, 63, 842, 783, 220, 138, 222, 632, 138,
	541, 430, 213, 801, 519, 224, 224, 224, 224, 224,
	224, 790, 509, 494, 224, 519, 219, 221, 138, 138,
	700, 496, 495, 497, 138, 429, 199, 38, 936, 934,
	606, 474, 741, 794, 698, 699, 697, 899, 497, 667,
	672, 665, 413, 1025, 508, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 645, 425, 519, 1018,
	675, 678, 224, 998, 996, 217, 893, 224, 392, 386,
	818, 495, 816, 631, 961, 1034, 224, 224, 224, 224,
	224, 224, 224, 224, 211, 387, 669, 497, 631, 496,
	495, 849, 960, 629, 628, 138, 741, 138, 854, 634,
	668, 138, 484, 482, 635, 809, 497, 138, 823, 824,
	825, 63, 63, 63, 63, 63, 63, 388, 808, 180,
	63, 797, 674, 517, 518, 510, 511, 512, 513, 514,
	515, 516, 509, 676, 1029, 519, 848, 1008, 847, 496,
	495, 138, 897, 959, 569, 570, 807, 886, 138, 138,
	138, 791, 728, 63, 496, 495, 497, 1026, 323, 510,
	511, 512, 513, 514, 515, 516, 509, 41, 63, 519,
	138, 497, 138, 63, 717, 138, 718, 696, 138, 719,
	138, 470, 63, 63, 63, 63, 63, 63, 63, 63,
	496, 495, 528, 530, 508, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 215, 497, 519, 1031,
	323, 499, 725, 512, 513, 514, 515, 516, 509, 210,
	540, 519, 199, 544, 545, 546, 547, 548, 549, 550,
	323, 553, 555, 555, 555, 555, 555, 555, 555, 555,
	563, 564, 565, 566, 686, 688, 689, 498, 731, 687,
	991, 323, 1001, 223, 584, 1000, 571, 894, 181, 181,
	181, 181, 181, 496, 495, 988, 989, 572, 192, 586,
	529, 954, 953, 427, 413, 836, 323, 904, 903, 359,
	497, 181, 556, 557, 558, 559, 560, 561, 562, 901,
	900, 601, 602, 870, 323, 573, 611, 731, 323, 192,
	866, 616, 622, 397, 323, 61, 757, 588, 589, 427,
	591, 599, 583, 610, 587, 327, 385, 590, 613, 618,
	608, 646, 647, 648, 432, 431, 397, 863, 902, 614,
	396, 625, 603, 193, 659, 180, 180, 180, 180, 180,
	45, 836, 224, 350, 349, 352, 353, 354, 355, 784,
	610, 180, 351, 356, 397, 397, 63, 567, 180, 655,
	656, 138, 19, 422, 138, 138, 138, 138, 138, 694,
	836, 402, 405, 406, 407, 403, 138, 404, 408, 836,
	138, 769, 770, 138, 41, 167, 639, 138, 138, 658,
	19, 38, 427, 874, 640, 641, 642, 643, 63, 316,
	317, 318, 319, 320, 423, 544, 421, 321, 41, 650,
	651, 652, 730, 581, 787, 19, 582, 769, 770, 579,
	654, 649, 732, 55, 226, 226, 226, 226, 226, 226,
	618, 41, 661, 226, 127, 743, 41, 720, 721, 138,
	695, 941, 888, 762, 138, 38, 745, 138, 63, 761,
	775, 738, 810, 192, 758, 471, 772, 757, 480, 774,
	476, 41, 17, 603, 766, 748, 226, 749, 593, 485,
	486, 487, 488, 489, 490, 491, 492, 592, 1043, 596,
	1039, 226, 500, 776, 597, 174, 226, 773, 594, 782,
	822, 622, 682, 595, 785, 226, 226, 226, 226, 226,
	226, 226, 226, 763, 1038, 920, 63, 171, 172, 165,
	330, 391, 754, 753, 780, 543, 802, 798, 799, 428,
	63, 216, 552, 224, 789, 389, 598, 922, 406, 407,
	803, 804, 805, 402, 405, 406, 407, 403, 793, 404,
	408, 224, 1020, 325, 1019, 939, 788, 864, 963, 663,
	924, 63, 928, 479, 923, 326, 921, 410, 813, 168,
	169, 926, 391, 752, 694, 162, 1011, 163, 45, 1010,
	925, 751, 983, 610, 984, 927, 929, 958, 493, 47,
	49, 420, 615, 42, 1, 666, 1021, 63, 883, 826,
	627, 843, 619, 197, 54, 626, 806, 995, 956, 833,
	633, 795, 636, 834, 887, 1017, 792, 435, 436, 434,
	438, 437, 433, 845, 846, 409, 414, 850, 424, 837,
	660, 56, 856, 815, 857, 858, 859, 860, 63, 63,
	853, 814, 664, 203, 527, 695, 750, 186, 876, 877,
	878, 947, 867, 868, 869, 764, 865, 63, 683, 684,
	879, 690, 691, 568, 880, 622, 383, 622, 1009, 982,
	882, 852, 551, 739, 336, 685, 348, 345, 347, 575,
	881, 872, 346, 574, 580, 501, 193, 334, 328, 604,
	179, 393, 895, 896, 401, 399, 398, 184, 771, 767,
	178, 862, 979, 1024, 578, 63, 20, 543, 46, 173,
	735, 736, 16, 15, 14, 13, 24, 193, 12, 907,
	226, 226, 11, 730, 909, 913, 10, 138, 9, 8,
	385, 914, 915, 7, 181, 918, 6, 762, 931, 930,
	943, 618, 917, 761, 5, 681, 4, 164, 18, 938,
	937, 940, 946, 2, 0, 0, 951, 952, 0, 0,
	63, 63, 622, 63, 63, 785, 933, 0, 733, 734,
	0, 226, 737, 781, 0, 0, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 138, 746, 747,
	0, 138, 0, 0, 0, 0, 0, 63, 942, 971,
	0, 755, 0, 978, 0, 0, 0, 0, 966, 967,
	0, 180, 762, 0, 38, 0, 63, 0, 761, 985,
	976, 977, 0, 0, 0, 0, 0, 0, 0, 722,
	994, 226, 0, 0, 1002, 0, 0, 0, 0, 990,
	138, 992, 993, 742, 0, 0, 880, 63, 63, 0,
	955, 63, 0, 63, 63, 63, 1004, 0, 63, 533,
	534, 535, 536, 537, 538, 539, 192, 1012, 0, 1007,
	0, 193, 986, 0, 765, 0, 1013, 0, 0, 0,
	0, 0, 63, 0, 1028, 968, 969, 0, 970, 0,
	0, 972, 0, 974, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 855, 1037, 0, 0, 0, 0,
	226, 1030, 0, 182, 1033, 1046, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 812, 0, 0, 360,
	0, 63, 873, 0, 0, 875, 0, 0, 1051, 1052,
	0, 0, 63, 135, 821, 0, 0, 835, 0, 0,
	0, 811, 226, 0, 0, 0, 0, 0, 0, 136,
	0, 851, 154, 0, 63, 63, 185, 0, 63, 0,
	226, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 136, 194, 0, 0, 0, 136, 507, 517,
	518, 510, 511, 512, 513, 514, 515, 516, 509, 0,
	63, 519, 508, 507, 517, 518, 510, 511, 512, 513,
	514, 515, 516, 509, 0, 0, 519, 935, 840, 0,
	0, 0, 692, 0, 0, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	831, 0, 206, 0, 207, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 214, 0, 0, 0, 136, 0,
	136, 0, 0, 0, 136, 0, 146, 0, 0, 0,
	136, 0, 0, 226, 226, 0, 226, 885, 19, 39,
	21, 22, 0, 0, 0, 0, 0, 0, 395, 0,
	153, 0, 0, 0, 0, 0, 33, 419, 0, 981,
	0, 23, 0, 0, 136, 0, 0, 0, 0, 0,
	908, 136, 417, 136, 0, 0, 0, 473, 0, 475,
	32, 0, 478, 0, 41, 481, 0, 0, 0, 840,
	0, 0, 226, 136, 0, 136, 0, 0, 136, 0,
	141, 136, 0, 483, 0, 0, 143, 0, 0, 0,
	0, 148, 145, 0, 0, 0, 0, 0, 0, 0,
	944, 945, 0, 0, 948, 0, 950, 950, 950, 962,
	0, 226, 147, 1027, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 25, 26, 28, 27, 30, 441, 0,
	0, 0, 0, 0, 142, 226, 31, 34, 35, 0,
	0, 36, 37, 29, 0, 0, 0, 0, 0, 0,
	453, 0, 0, 144, 149, 150, 151, 152, 0, 827,
	828, 829, 458, 459, 460, 461, 462, 463, 464, 0,
	465, 466, 467, 468, 469, 454, 455, 456, 457, 439,
	440, 0, 0, 442, 885, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 452, 226, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 1014, 1015, 0,
	0, 1016, 508, 507, 517, 518, 510, 511, 512, 513,
	514, 515, 516, 509, 0, 0, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 1032, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 194, 136, 136, 136,
	136, 136, 0, 0, 0, 612, 0, 0, 0, 600,
	0, 0, 0, 136, 0, 0, 417, 0, 0, 0,
	136, 136, 911, 912, 503, 0, 506, 194, 0, 0,
	483, 0, 520, 521, 522, 523, 524, 525, 526, 0,
	504, 505, 502, 508, 507, 517, 518, 510, 511, 512,
	513, 514, 515, 516, 509, 0, 662, 519, 0, 0,
	0, 679, 832, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 136, 0, 0,
	136, 0, 508, 507, 517, 518, 510, 511, 512, 513,
	514, 515, 516, 509, 0, 0, 519, 0, 0, 0,
	0, 964, 508, 507, 517, 518, 510, 511, 512, 513,
	514, 515, 516, 509, 0, 0, 519, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	729, 483, 106, 93, 0, 729, 729, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 729, 729, 729, 729, 0, 0, 1006,
	72, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 508, 507, 517, 518,
	510, 511, 512, 513, 514, 515, 516, 509, 0, 0,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 1048, 0, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 126, 0, 0, 121, 122, 123, 94,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 85, 124,
	102, 79, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 483, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 295, 268, 307, 246, 260,
	315, 261, 262, 289, 234, 276, 97, 258, 0, 249,
	229, 255, 230, 247, 270, 77, 273, 245, 297, 279,
	84, 313, 86, 284, 0, 106, 93, 0, 0, 272,
	299, 274, 294, 267, 290, 239, 283, 308, 259, 287,
	309, 0, 0, 0, 62, 0, 623, 624, 0, 0,
	0, 0, 0, 72, 0, 286, 304, 257, 288, 228,
	285, 0, 232, 235, 314, 302, 252, 253, 786, 0,
	0, 0, 0, 0, 0, 271, 275, 291, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 282,
	0, 0, 0, 236, 233, 0, 269, 0, 0, 0,
	238, 0, 251, 292, 194, 300, 266, 139, 303, 264,
	263, 306, 100, 298, 248, 256, 73, 254, 105, 98,
	0, 281, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 231, 0, 107, 117, 126, 244, 301, 121,
	122, 123, 94, 71, 242, 243, 240, 241, 277, 278,
	310, 311, 312, 293, 237, 0, 0, 296, 280, 64,
	0, 85, 124, 102, 79, 118, 305, 295, 268, 307,
	246, 260, 315, 261, 262, 289, 234, 276, 97, 258,
	0, 249, 229, 255, 230, 247, 270, 77, 273, 245,
	297, 279, 84, 313, 86, 284, 0, 106, 93, 0,
	0, 272, 299, 274, 294, 267, 290, 239, 283, 308,
	259, 287, 309, 0, 0, 0, 62, 0, 623, 624,
	0, 0, 0, 0, 0, 72, 0, 286, 304, 257,
	288, 228, 285, 0, 232, 235, 314, 302, 252, 253,
	0, 0, 0, 0, 0, 0, 0, 271, 275, 291,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 282, 0, 0, 0, 236, 233, 0, 269, 0,
	0, 0, 238, 0, 251, 292, 0, 300, 266, 139,
	303, 264, 263, 306, 100, 298, 248, 256, 73, 254,
	105, 98, 0, 281, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 231, 0, 107, 117, 126, 244,
	301, 121, 122, 123, 94, 71, 242, 243, 240, 241,
	277, 278, 310, 311, 312, 293, 237, 0, 0, 296,
	280, 64, 0, 85, 124, 102, 79, 118, 305, 295,
	268, 307, 246, 260, 315, 261, 262, 289, 234, 276,
	97, 258, 0, 249, 229, 255, 230, 247, 270, 77,
	273, 245, 297, 279, 84, 313, 86, 284, 0, 106,
	93, 0, 0, 272, 299, 274, 294, 267, 290, 239,
	283, 308, 259, 287, 309, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 286,
	304, 257, 288, 228, 285, 0, 232, 235, 314, 302,
	252, 253, 0, 0, 0, 0, 0, 0, 0, 271,
	275, 291, 265, 0, 0, 0, 0, 0, 0, 1003,
	0, 250, 0, 282, 0, 0, 0, 236, 233, 0,
	269, 0, 0, 0, 238, 0, 251, 292, 0, 300,
	266, 139, 303, 264, 263, 306, 100, 298, 248, 256,
	73, 254, 105, 98, 0, 281, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 231, 0, 107, 117,
	126, 244, 301, 121, 122, 123, 94, 71, 242, 243,
	240, 241, 277, 278, 310, 311, 312, 293, 237, 0,
	0, 296, 280, 64, 0, 85, 124, 102, 79, 118,
	305, 295, 268, 307, 246, 260, 315, 261, 262, 289,
	234, 276, 97, 258, 0, 249, 229, 255, 230, 247,
	270, 77, 273, 245, 297, 279, 84, 313, 86, 284,
	0, 106, 93, 0, 0, 272, 299, 274, 294, 267,
	290, 239, 283, 308, 259, 287, 309, 41, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 286, 304, 257, 288, 228, 285, 0, 232, 235,
	314, 302, 252, 253, 0, 0, 0, 0, 0, 0,
	0, 271, 275, 291, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 282, 0, 0, 0, 236,
	233, 0, 269, 0, 0, 0, 238, 0, 251, 292,
	0, 300, 266, 139, 303, 264, 263, 306, 100, 298,
	248, 256, 73, 254, 105, 98, 0, 281, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 231, 0,
	107, 117, 126, 244, 301, 121, 122, 123, 94, 71,
	242, 243, 240, 241, 277, 278, 310, 311, 312, 293,
	237, 0, 0, 296, 280, 64, 0, 85, 124, 102,
	79, 118, 305, 295, 268, 307, 246, 260, 315, 261,
	262, 289, 234, 276, 97, 258, 0, 249, 229, 255,
	230, 247, 270, 77, 273, 245, 297, 279, 84, 313,
	86, 284, 0, 106, 93, 0, 0, 272, 299, 274,
	294, 267, 290, 239, 283, 308, 259, 287, 309, 0,
	0, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 286, 304, 257, 288, 228, 285, 0,
	232, 235, 314, 302, 252, 253, 0, 0, 0, 0,
	0, 0, 0, 271, 275, 291, 265, 0, 0, 0,
	0, 0, 0, 916, 0, 250, 0, 282, 0, 0,
	0, 236, 233, 0, 269, 0, 0, 0, 238, 0,
	251, 292, 0, 300, 266, 139, 303, 264, 263, 306,
	100, 298, 248, 256, 73, 254, 105, 98, 0, 281,
	99, 104, 87, 110, 101, 116, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 125, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	231, 0, 107, 117, 126, 244, 301, 121, 122, 123,
	94, 71, 242, 243, 240, 241, 277, 278, 310, 311,
	312, 293, 237, 0, 0, 296, 280, 64, 0, 85,
	124, 102, 79, 118, 305, 295, 268, 307, 246, 260,
	315, 261, 262, 289, 234, 276, 97, 258, 0, 249,
	229, 255, 230, 247, 270, 77, 273, 245, 297, 279,
	84, 313, 86, 284, 0, 106, 93, 0, 0, 272,
	299, 274, 294, 267, 290, 239, 283, 308, 259, 287,
	309, 0, 0, 0, 62, 0, 426, 0, 0, 0,
	0, 0, 0, 72, 0, 286, 304, 257, 288, 228,
	285, 0, 232, 235, 314, 302, 252, 253, 0, 0,
	0, 0, 0, 0, 0, 271, 275, 291, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 282,
	0, 0, 0, 236, 233, 0, 269, 0, 0, 0,
	238, 0, 251, 292, 0, 300, 266, 139, 303, 264,
	263, 306, 100, 298, 248, 256, 73, 254, 105, 98,
	0, 281, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 231, 0, 107, 117, 126, 244, 301, 121,
	122, 123, 94, 71, 242, 243, 240, 241, 277, 278,
	310, 311, 312, 293, 237, 0, 0, 296, 280, 64,
	0, 85, 124, 102, 79, 118, 305, 295, 268, 307,
	246, 260, 315, 261, 262, 289, 234, 276, 97, 258,
	0, 249, 229, 255, 230, 247, 270, 77, 273, 245,
	297, 279, 84, 313, 86, 284, 0, 106, 93, 0,
	0, 272, 299, 274, 294, 267, 290, 239, 283, 308,
	259, 287, 309, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 286, 304, 257,
	288, 228, 285, 0, 232, 235, 314, 302, 252, 253,
	0, 0, 0, 0, 0, 0, 0, 271, 275, 291,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 282, 0, 0, 0, 236, 233, 0, 269, 0,
	0, 0, 238, 0, 251, 292, 0, 300, 266, 139,
	303, 264, 263, 306, 100, 298, 248, 256, 73, 254,
	105, 98, 0, 281, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 231, 0, 107, 117, 126, 244,
	301, 121, 122, 123, 94, 71, 242, 243, 240, 241,
	277, 278, 310, 311, 312, 293, 237, 0, 0, 296,
	280, 64, 0, 85, 124, 102, 79, 118, 305, 295,
	268, 307, 246, 260, 315, 261, 262, 289, 234, 276,
	97, 258, 0, 249, 229, 255, 230, 247, 270, 77,
	273, 245, 297, 279, 84, 313, 86, 284, 0, 106,
	93, 0, 0, 272, 299, 274, 294, 267, 290, 239,
	283, 308, 259, 287, 309, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 286,
	304, 257, 288, 228, 285, 0, 232, 235, 314, 302,
	252, 253, 0, 0, 0, 0, 0, 0, 0, 271,
	275, 291, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 282, 0, 0, 0, 236, 233, 0,
	269, 0, 0, 0, 238, 0, 251, 292, 0, 300,
	266, 139, 303, 264, 263, 306, 100, 298, 248, 256,
	73, 254, 105, 98, 0, 281, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 231, 0, 107, 117,
	126, 244, 301, 121, 122, 123, 94, 71, 242, 243,
	240, 241, 277, 278, 310, 311, 312, 293, 237, 0,
	0, 296, 280, 64, 0, 85, 124, 102, 79, 118,
	305, 295, 268, 307, 246, 260, 315, 261, 262, 289,
	234, 276, 97, 258, 0, 249, 229, 255, 230, 247,
	270, 77, 273, 245, 297, 279, 84, 313, 86, 284,
	0, 106, 93, 0, 0, 272, 299, 274, 294, 267,
	290, 239, 283, 308, 259, 287, 309, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 286, 304, 257, 288, 228, 285, 0, 232, 235,
	314, 302, 252, 253, 0, 0, 0, 0, 0, 0,
	0, 271, 275, 291, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 282, 0, 0, 0, 236,
	233, 0, 269, 0, 0, 0, 238, 0, 251, 292,
	0, 300, 266, 139, 303, 264, 263, 306, 100, 298,
	248, 256, 73, 254, 105, 98, 0, 281, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 231, 0,
	107, 117, 126, 244, 301, 121, 122, 123, 94, 71,
	242, 243, 240, 241, 277, 278, 310, 311, 312, 293,
	237, 0, 0, 296, 280, 64, 0, 85, 124, 102,
	79, 118, 97, 0, 0, 724, 0, 332, 0, 0,
	0, 77, 0, 331, 0, 0, 84, 370, 86, 0,
	0, 106, 93, 0, 0, 0, 0, 363, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	195, 350, 349, 352, 353, 354, 355, 0, 0, 72,
	351, 356, 357, 358, 0, 0, 329, 343, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 727, 0, 0, 0, 381, 0, 342, 0, 0,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 379, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 126, 0, 0, 121, 122, 123, 94, 71,
	371, 380, 377, 378, 375, 376, 374, 373, 372, 382,
	365, 366, 368, 0, 367, 64, 0, 85, 124, 102,
	79, 118, 97, 0, 0, 0, 0, 332, 0, 0,
	0, 77, 0, 331, 0, 0, 84, 370, 86, 0,
	0, 106, 93, 0, 0, 0, 0, 363, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	195, 350, 349, 352, 353, 354, 355, 0, 0, 72,
	351, 356, 357, 358, 0, 0, 329, 343, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 727, 0, 0, 0, 381, 0, 342, 0, 0,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 379, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 126, 0, 0, 121, 122, 123, 94, 71,
	371, 380, 377, 378, 375, 376, 374, 373, 372, 382,
	365, 366, 368, 0, 367, 64, 0, 85, 124, 102,
	79, 118, 97, 0, 0, 0, 0, 332, 0, 0,
	0, 77, 0, 331, 0, 0, 84, 370, 86, 0,
	0, 106, 93, 0, 0, 0, 0, 363, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 323,
	195, 350, 349, 352, 353, 354, 355, 0, 0, 72,
	351, 356, 357, 358, 0, 0, 329, 343, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 381, 0, 342, 0, 0,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 379, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 126, 0, 0, 121, 122, 123, 94, 71,
	371, 380, 377, 378, 375, 376, 374, 373, 372, 382,
	365, 366, 368, 19, 367, 64, 0, 85, 124, 102,
	79, 118, 0, 0, 97, 0, 0, 0, 0, 332,
	0, 0, 0, 77, 0, 331, 0, 0, 84, 370,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 195, 350, 349, 352, 353, 354, 355, 0,
	0, 72, 351, 356, 357, 358, 0, 0, 329, 343,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 381, 0, 342,
	0, 0, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 379, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 125, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 126, 0, 0, 121, 122, 123,
	94, 71, 371, 380, 377, 378, 375, 376, 374, 373,
	372, 382, 365, 366, 368, 0, 367, 64, 0, 85,
	124, 102, 79, 118, 97, 0, 0, 0, 0, 332,
	0, 0, 0, 77, 0, 331, 0, 0, 84, 370,
	86, 0, 0, 106, 93, 0, 0, 0, 0, 363,
	364, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 195, 350, 349, 352, 353, 354, 355, 0,
	0, 72, 351, 356, 357, 358, 0, 0, 329, 343,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 381, 0, 342,
	0, 0, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 379, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 125, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 0,
	0, 0, 107, 117, 126, 0, 0, 121, 122, 123,
	94, 71, 371, 380, 377, 378, 375, 376, 374, 373,
	372, 382, 365, 366, 368, 97, 367, 64, 0, 85,
	124, 102, 79, 118, 77, 0, 0, 0, 0, 84,
	370, 86, 0, 0, 106, 93, 0, 0, 0, 0,
	363, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 195, 350, 349, 352, 353, 354, 355,
	0, 0, 72, 351, 356, 357, 358, 0, 0, 0,
	343, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 0, 0, 0, 0, 381, 0,
	342, 0, 0, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 379,
	0, 100, 0, 0, 0, 73, 0, 105, 98, 0,
	1049, 99, 104, 87, 110, 101, 116, 66, 114, 108,
	91, 81, 82, 65, 0, 103, 76, 80, 75, 96,
	111, 112, 74, 125, 69, 120, 68, 70, 119, 95,
	109, 115, 92, 89, 67, 113, 90, 88, 83, 78,
	0, 0, 0, 107, 117, 126, 0, 0, 121, 122,
	123, 94, 71, 371, 380, 377, 378, 375, 376, 374,
	373, 372, 382, 365, 366, 368, 97, 367, 64, 0,
	85, 124, 102, 79, 118, 77, 0, 0, 0, 0,
	84, 370, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 363, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 195, 350, 349, 352, 353, 354,
	355, 0, 0, 72, 351, 356, 357, 358, 0, 0,
	0, 343, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 0, 0, 0, 0, 381,
	0, 342, 0, 0, 338, 339, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	379, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 0, 0, 121,
	122, 123, 94, 71, 371, 380, 377, 378, 375, 376,
	374, 373, 372, 382, 365, 366, 368, 0, 367, 64,
	0, 85, 124, 102, 79, 118, 97, 0, 0, 0,
	839, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 841, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 496, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 97, 0, 121,
	122, 123, 94, 71, 0, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 64,
	0, 85, 124, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 57, 0,
	0, 0, 60, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 126, 0, 0,
	121, 122, 123, 94, 71, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	64, 0, 85, 124, 102, 79, 118, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 126, 0,
	0, 121, 122, 123, 94, 71, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 64, 0, 85, 124, 102, 79, 118, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 126,
	97, 0, 121, 122, 123, 94, 71, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 64, 0, 85, 124, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 576, 0, 0, 577, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	126, 0, 0, 121, 122, 123, 94, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 85, 124, 102, 79, 118,
	97, 0, 0, 0, 416, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	418, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	126, 97, 0, 121, 122, 123, 94, 71, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 64, 0, 85, 124, 102, 79, 118,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 70, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 97, 0, 121, 122, 123, 94, 71, 0,
	0, 77, 0, 0, 0, 0, 84, 0, 86, 0,
	0, 106, 93, 0, 64, 0, 85, 124, 102, 79,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 841, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 100, 0,
	0, 0, 73, 0, 105, 98, 0, 0, 99, 104,
	87, 110, 101, 116, 66, 114, 108, 91, 81, 82,
	65, 0, 103, 76, 80, 75, 96, 111, 112, 74,
	125, 69, 120, 68, 70, 119, 95, 109, 115, 92,
	89, 67, 113, 90, 88, 83, 78, 0, 0, 0,
	107, 117, 126, 97, 0, 121, 122, 123, 94, 71,
	0, 0, 77, 0, 0, 0, 0, 84, 0, 86,
	0, 0, 106, 93, 0, 64, 0, 85, 124, 102,
	79, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 418, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 100,
	0, 0, 0, 73, 0, 105, 98, 0, 0, 99,
	104, 87, 110, 101, 116, 66, 114, 108, 91, 81,
	82, 65, 0, 103, 76, 80, 75, 96, 111, 112,
	74, 125, 69, 120, 68, 70, 119, 95, 109, 115,
	92, 89, 67, 113, 90, 88, 83, 78, 0, 0,
	0, 107, 117, 126, 97, 0, 121, 122, 123, 94,
	71, 0, 394, 77, 0, 0, 0, 0, 84, 0,
	86, 0, 0, 106, 93, 0, 64, 0, 85, 124,
	102, 79, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	100, 0, 0, 0, 73, 0, 105, 98, 0, 0,
	99, 104, 87, 110, 101, 116, 66, 114, 108, 91,
	81, 82, 65, 0, 103, 76, 80, 75, 96, 111,
	112, 74, 125, 69, 120, 68, 70, 119, 95, 109,
	115, 92, 89, 67, 113, 90, 88, 83, 78, 183,
	0, 0, 107, 117, 126, 0, 97, 121, 122, 123,
	94, 71, 0, 0, 0, 77, 0, 0, 0, 0,
	84, 0, 86, 0, 0, 106, 93, 64, 0, 85,
	124, 102, 79, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 100, 0, 0, 0, 73, 0, 105, 98,
	0, 0, 99, 104, 87, 110, 101, 116, 66, 114,
	108, 91, 81, 82, 65, 0, 103, 76, 80, 75,
	96, 111, 112, 74, 125, 69, 120, 68, 70, 119,
	95, 109, 115, 92, 89, 67, 113, 90, 88, 83,
	78, 0, 0, 0, 107, 117, 126, 97, 0, 121,
	122, 123, 94, 71, 0, 0, 77, 0, 0, 0,
	0, 84, 0, 86, 0, 0, 106, 93, 0, 64,
	0, 85, 124, 102, 79, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 139, 0,
	0, 0, 0, 100, 0, 0, 0, 73, 0, 105,
	98, 0, 0, 99, 104, 87, 110, 101, 116, 66,
	114, 108, 91, 81, 82, 65, 0, 103, 76, 80,
	75, 96, 111, 112, 74, 125, 69, 120, 68, 70,
	119, 95, 109, 115, 92, 89, 67, 113, 90, 88,
	83, 78, 0, 0, 0, 107, 117, 126, 97, 0,
	121, 122, 123, 94, 71, 0, 0, 77, 0, 0,
	0, 0, 84, 0, 86, 0, 0, 106, 93, 0,
	64, 0, 85, 124, 102, 79, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 100, 0, 0, 0, 73, 0,
	105, 98, 0, 0, 99, 104, 87, 110, 101, 116,
	66, 114, 108, 91, 81, 82, 65, 0, 103, 76,
	80, 75, 96, 111, 112, 74, 125, 69, 120, 68,
	70, 119, 95, 109, 115, 92, 89, 67, 113, 90,
	88, 83, 78, 0, 0, 0, 107, 117, 126, 97,
	0, 121, 122, 123, 94, 71, 0, 0, 77, 0,
	0, 0, 0, 84, 0, 86, 0, 0, 106, 93,
	0, 64, 0, 85, 124, 102, 79, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 100, 0, 0, 0, 73,
	0, 105, 98, 0, 0, 99, 104, 87, 110, 101,
	116, 66, 114, 108, 91, 81, 82, 65, 0, 103,
	76, 80, 75, 96, 111, 112, 74, 125, 69, 120,
	68, 70, 119, 95, 109, 115, 92, 89, 67, 113,
	90, 88, 83, 78, 0, 0, 0, 107, 117, 126,
	97, 0, 121, 122, 123, 94, 71, 0, 0, 77,
	0, 0, 0, 0, 84, 0, 86, 0, 0, 106,
	93, 0, 64, 0, 85, 124, 102, 79, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 100, 0, 0, 0,
	73, 0, 105, 98, 0, 0, 99, 104, 87, 110,
	101, 116, 66, 114, 108, 91, 81, 82, 65, 0,
	103, 76, 80, 75, 96, 111, 112, 74, 125, 69,
	120, 68, 70, 119, 95, 109, 115, 92, 89, 67,
	113, 90, 88, 83, 78, 0, 0, 0, 107, 117,
	126, 97, 0, 121, 122, 123, 94, 71, 0, 0,
	77, 0, 0, 0, 0, 84, 0, 86, 0, 0,
	106, 93, 0, 64, 0, 85, 124, 102, 79, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 100, 0, 0,
	0, 73, 0, 105, 98, 0, 0, 99, 104, 87,
	110, 101, 116, 66, 114, 108, 91, 81, 82, 65,
	0, 103, 76, 80, 75, 96, 111, 112, 74, 125,
	69, 120, 68, 189, 119, 95, 109, 115, 92, 89,
	67, 113, 90, 88, 83, 78, 0, 0, 0, 107,
	117, 126, 0, 0, 121, 122, 123, 190, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 85, 124, 102, 79,
	118,
}
var yyPact = [...]int{

	1202, -1000, -157, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 694, 714, -1000,
	-1000, -1000, -1000, -1000, 511, 5210, -18, 5, -13, 6890,
	3, 1165, 7373, -1000, -1000, -1000, -1000, -1000, 496, -1000,
	-1000, -1000, -1000, -1000, 689, 692, 519, 680, 609, -1000,
	-24, 6084, 6729, 7534, -1000, 307, 0, 7373, -130, -28,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2, 7373, -1000,
	7373, -30, 304, -30, 7373, -1000, 34, -1000, -1000, -1000,
	7373, 291, 632, 19, 2535, 2535, 2535, 2535, 2535, 2535,
	-1000, -1000, -1000, 2535, -1000, -1000, -1000, -1000, -1000, -1000,
	316, 665, 4497, 4497, 694, -1000, 496, -1000, -1000, -1000,
	631, -1000, -1000, 145, 6567, 441, 633, -1000, -1000, -1000,
	676, 5572, 5923, 7373, 493, -1000, 2939, 360, -1000, 630,
	-1000, -1000, 86, -1000, 33, -1000, -1000, 411, -1000, 1213,
	266, 2535, -17, 7373, 100, 7373, 2535, -12, 7373, 671,
	548, 7373, -1000, 3545, -1000, 2535, 2535, 2535, 2535, 2535,
	2535, 2535, 2535, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 710, 64, 334, -1000, 4497,
	1413, 472, 472, -1000, -1000, 15, -1000, -1000, 4859, 4859,
	4859, 4859, 4859, 4859, 4859, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 472,
	32, -1000, 4307, 472, 472, 472, 472, 472, 472, 4497,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 444, -1000, 261, 689, 316, 609, 5733,
	518, -1000, -1000, 524, 7373, -1000, 7212, 6084, 6084, 6084,
	6084, 6084, -1000, 577, 568, -1000, 588, 579, 626, 7373,
	-1000, 390, 316, 5572, 50, -1000, 6406, -1000, -1000, 702,
	6084, 7373, -1000, -1000, -1000, -1000, -1000, 7212, -1000, 4497,
	3343, 2131, 111, 173, -103, -1000, -1000, 474, -1000, 474,
	474, 474, 474, -83, -83, -83, -83, -1000, -1000, -1000,
	-1000, -1000, 509, -1000, 474, 474, 474, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 508, 508, 508, 477, 477,
	521, -1000, 7373, -1000, 667, 67, -1000, 7373, -1000, -1000,
	7373, 2535, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 596, 4497, 4497, 318, 4497, 4497,
	77, 4859, 255, 87, 4859, 4859, 4859, 4859, 4859, 4859,
	4859, 4859, 4859, 4859, 4859, 4859, 4859, 4859, 4859, 259,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000,
	496, 427, 427, 40, 40, 40, 40, 40, 40, 1566,
	3735, 3343, 384, 160, 4307, 3925, 3925, 4497, 4497, 3925,
	682, 97, 160, 7051, -1000, 316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3925, 3925, 3925, 3925, 4497, -1000, -1000,
	-1000, 665, -1000, 682, 693, -1000, 621, 620, 3925, -1000,
	547, 7212, 472, -1000, 5391, -1000, 479, 633, 507, 546,
	471, -1000, -1000, -1000, -1000, 559, -1000, 550, -1000, -1000,
	-1000, -1000, -1000, 316, -1000, -1, -2, -8, -1000, 694,
	4497, 442, -1000, -1000, -1000, 160, -1000, 26, -1000, 436,
	1929, -1000, -1000, -1000, -1000, -1000, -1000, 502, 659, 96,
	236, -1000, -1000, 650, -1000, 107, -105, -1000, -1000, 203,
	-83, -83, -1000, -1000, 39, 627, 39, 39, 39, 229,
	-1000, -1000, -1000, -1000, 200, -1000, -1000, -1000, 187, -1000,
	542, 7051, 2535, -1000, -1000, 93, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -45, -1000,
	2535, -1000, 593, 77, 141, -1000, -1000, 182, -1000, -1000,
	160, 160, 1472, -1000, -1000, -1000, -1000, 255, 4859, 4859,
	4859, 1042, 1472, 1452, 171, 1027, 40, 257, 257, 51,
	51, 51, 51, 51, 205, 205, -1000, -1000, -1000, 316,
	-1000, -1000, -1000, 316, 3925, 428, -1000, -1000, 5049, 25,
	472, 4497, -1000, 362, 362, 225, 210, 362, 3925, 161,
	-1000, 4497, 316, -1000, 362, 316, 362, 362, -1000, -1000,
	7373, -1000, -1000, -1000, -1000, 457, -1000, 661, 396, 387,
	-1000, -1000, 4115, 316, 380, 22, 694, -1000, -1000, 4497,
	481, -1000, 4497, -1000, -1000, -1000, -1000, 472, 472, 472,
	689, 160, -1000, 3141, 2131, -1000, 2131, 7051, -1000, 232,
	-1000, -1000, 532, 21, -1000, -1000, -1000, 343, 39, 39,
	-1000, 227, 72, -1000, -1000, -1000, 376, -1000, 415, 364,
	7373, -1000, -1000, -1000, 7373, -1000, -1000, -1000, -1000, -1000,
	7051, -1000, -1000, -1000, -1000, -1000, -1000, 1042, 1472, 1322,
	-1000, 4859, 4859, -1000, -1000, 362, 3925, -1000, -1000, 6245,
	-1000, -1000, 2737, 3925, 160, -1000, -1000, 540, 259, 540,
	-138, 466, 91, -1000, 4497, 92, -1000, -1000, -1000, -1000,
	-1000, -1000, 702, 6084, 658, -1000, 472, -1000, -1000, 549,
	7051, 7051, 689, 160, 7051, 160, 7051, 7051, 7051, -1000,
	-1000, 1929, -1000, 358, -1000, 474, -1000, -98, 709, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 226, 174, -1000, 156, 2535, -1000, -1000, 663, -1000,
	4859, 1472, 1472, -1000, -1000, -1000, -1000, 20, 316, 316,
	474, 474, -1000, 474, 477, -1000, 474, -61, 474, -62,
	316, 316, 472, -135, -1000, 160, 4497, 700, 413, 706,
	-1000, 472, -1000, 496, 18, -1000, -1000, 352, -1000, 337,
	-1000, 337, 337, -1000, 7051, -1000, 81, -1000, -119, -1000,
	341, 338, -1000, 472, 1472, 2333, -1000, -1000, -1000, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4859, 316,
	220, 160, 696, 691, 7212, 387, 316, 7051, 7051, -1000,
	-1000, 7051, -1000, -1000, -1000, 135, 657, -1000, 655, -1000,
	-1000, -1000, -47, -1000, -1000, -1000, 94, -1000, -1000, -1000,
	4497, 4497, 360, -1000, -1000, -1000, -1000, -1000, 217, -1000,
	-1000, 296, -1000, 7051, 316, 14, -149, 160, 335, -1000,
	-1000, -47, 612, -1000, 583, -142, -152, -1000, -50, -1000,
	581, -1000, -52, -146, 472, -150, 4678, -154, 244, 316,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 883, 58, 602, 878, 877, 876, 874, 866, 863,
	859, 858, 856, 852, 848, 846, 845, 844, 843, 842,
	89, 839, 838, 836, 40, 834, 46, 833, 832, 26,
	352, 21, 24, 292, 831, 15, 56, 48, 830, 36,
	829, 828, 827, 826, 42, 825, 824, 1043, 821, 820,
	819, 8, 17, 818, 817, 815, 814, 45, 650, 813,
	812, 808, 807, 806, 805, 31, 2, 7, 6, 14,
	804, 77, 11, 803, 30, 802, 801, 799, 798, 44,
	796, 37, 793, 9, 35, 785, 781, 27, 12, 777,
	41, 776, 574, 774, 90, 773, 772, 771, 763, 761,
	760, 28, 106, 419, 10, 22, 759, 758, 1059, 29,
	43, 756, 755, 33, 393, 20, 18, 752, 751, 750,
	749, 748, 747, 94, 746, 745, 744, 16, 23, 742,
	741, 32, 4, 740, 738, 737, 736, 38, 735, 34,
	734, 733, 732, 25, 13, 730, 5, 728, 726, 3,
	725, 724, 723, 0, 19, 721, 720, 49,
}
var yyR1 = [...]int{

	0, 151, 152, 152, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 155, 155, 42, 42, 9, 9, 89,
	89, 89, 107, 107, 10, 10, 10, 10, 15, 140,
	141, 141, 141, 137, 117, 117, 117, 120, 120, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 121, 121, 121, 121, 121, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	136, 136, 123, 123, 131, 131, 132, 132, 132, 129,
	129, 130, 130, 133, 133, 133, 124, 124, 124, 124,
	124, 124, 126, 126, 134, 134, 127, 127, 127, 128,
	128, 135, 135, 135, 135, 135, 125, 125, 138, 145,
	145, 145, 145, 139, 139, 147, 147, 146, 142, 142,
	142, 143, 143, 143, 144, 144, 144, 11, 11, 11,
	11, 11, 150, 148, 148, 149, 149, 12, 13, 13,
	13, 14, 14, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 18, 18, 19, 19, 19, 19, 19, 156,
	20, 21, 21, 22, 22, 22, 26, 26, 26, 24,
	24, 25, 25, 31, 31, 30, 30, 32, 32, 32,
	32, 106, 106, 106, 105, 105, 34, 34, 35, 35,
	36, 36, 37, 37, 37, 49, 86, 86, 38, 38,
	38, 38, 39, 39, 40, 40, 41, 41, 112, 112,
	111, 111, 111, 110, 110, 43, 43, 43, 45, 44,
	44, 44, 44, 46, 46, 48, 48, 47, 47, 50,
	50, 50, 50, 51, 51, 52, 52, 33, 33, 33,
	33, 33, 33, 33, 93, 93, 54, 54, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 64, 64,
	64, 64, 64, 64, 55, 55, 55, 55, 55, 55,
	55, 29, 29, 65, 65, 65, 71, 66, 66, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	62, 62, 62, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 61, 61, 61, 61, 61, 61, 61, 61,
	157, 157, 63, 63, 63, 63, 27, 27, 27, 27,
	27, 115, 115, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 75, 75, 28, 28,
	73, 73, 74, 76, 76, 72, 72, 72, 57, 57,
	57, 57, 57, 57, 57, 57, 59, 59, 59, 77,
	77, 78, 78, 79, 79, 80, 80, 81, 82, 82,
	82, 83, 83, 83, 83, 84, 84, 84, 56, 56,
	56, 56, 56, 56, 85, 85, 85, 85, 87, 87,
	67, 67, 69, 69, 68, 70, 88, 88, 90, 91,
	91, 94, 94, 95, 95, 92, 92, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 97, 97,
	97, 98, 98, 99, 99, 99, 100, 100, 103, 103,
	104, 104, 108, 108, 109, 109, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 153, 154,
	113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 3, 2, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -151, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 131,
	115, 124, 48, 24, 125, 126, 129, 130, -153, 7,
	194, 52, -152, 207, -79, 14, -22, 5, -20, -156,
	-20, -20, -20, -20, -140, 52, -99, 118, 69, 116,
	122, -103, 55, -102, 200, 145, 139, 166, 158, 156,
	159, 184, 64, 127, 154, 150, 148, 26, 171, 205,
	149, 143, 144, 170, 31, 202, 33, 135, 169, 165,
	168, 142, 164, 37, 183, 161, 151, 17, 130, 133,
	123, 137, 204, 147, 134, 129, 36, 175, 141, 162,
	136, 152, 153, 167, 140, 163, 138, 176, 206, 160,
	157, 180, 181, 182, 203, 155, 177, -92, 118, 120,
	116, 116, 117, 118, 116, -47, -108, 55, -102, 118,
	116, 105, 159, 111, 178, 117, 31, 137, 116, 179,
	180, 181, 182, 55, -108, -113, -113, -113, -113, -113,
	-2, -83, 16, 15, -5, -3, -153, 6, 19, 20,
	-26, 38, 39, -21, -92, -35, -36, -37, -38, -49,
	-71, -153, -47, 10, -42, -47, -89, -88, 184, 159,
	183, -90, -72, -103, -108, 55, -102, -141, -137, 55,
	117, -47, 194, -95, 121, 116, -47, -47, -94, 121,
	55, -94, -47, 108, -47, 55, 29, 186, 55, 137,
	116, 138, 118, -114, -153, -104, -103, -101, 70, 21,
	23, 173, 73, 105, 15, 74, 104, 195, 111, 46,
	187, 188, 185, 186, 178, 28, 9, 24, 125, 20,
	98, 113, 77, 78, 128, 22, 126, 68, 18, 49,
	10, 12, 13, 121, 120, 89, 117, 44, 7, 107,
	25, 86, 40, 27, 42, 87, 16, 189, 190, 30,
	199, 132, 100, 47, 34, 71, 66, 50, 69, 14,
	45, 88, 114, 194, 43, 6, 198, 29, 124, 41,
	116, 179, 76, 119, 67, 5, 122, 8, 48, 51,
	191, 192, 193, 32, 75, 11, -114, -114, -114, -114,
	-114, -114, -154, 54, -84, 18, 30, -33, -53, 71,
	-58, 28, 22, -57, -54, -72, -70, -71, 105, 106,
	94, 95, 102, 72, 107, -62, -60, -61, -63, 57,
	56, 65, 58, 59, 60, 61, 66, 67, 68, -103,
	-108, -68, -153, 42, 43, 195, 196, 199, 197, 74,
	32, 185, 193, 192, 191, 189, 190, 187, 188, 121,
	186, 100, 194, -80, -81, -33, -79, -2, -20, 34,
	-24, 20, 63, -48, 25, -47, 29, 53, -43, -45,
	-44, -46, 40, 44, 46, 41, 42, 43, 47, -112,
	21, -35, -2, -153, -111, -110, 21, -108, 57, -47,
	-155, 53, 10, 51, -107, -104, 57, 53, 29, 79,
	108, 54, 53, -117, -120, -122, -121, -118, -119, 156,
	157, 105, 160, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 127, 152, 153, 154, 155, 139, 140,
	141, 142, 143, 144, 145, 147, 148, 149, 150, 151,
	55, -114, 118, -47, 71, -47, -114, 119, -47, 22,
	50, -47, -109, -108, -101, -114, -114, -114, -114, -114,
	-114, -114, -114, 8, 89, 70, 69, 86, 53, 17,
	-33, -55, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	79, 80, 81, 82, 83, 84, 85, -93, -153, -71,
	-153, 109, 110, -58, -58, -58, -58, -58, -58, -58,
	-153, 108, -66, -33, -153, -153, -153, -153, -153, -153,
	-153, -75, -33, -153, -157, -153, -157, -157, -157, -157,
	-157, -157, -157, -153, -153, -153, -153, 53, -82, 23,
	24, -83, -154, -26, -59, -103, 58, 61, -25, 41,
	-56, 29, 32, -2, -153, -47, -88, -36, -37, -37,
	-36, -37, 40, 40, 40, 45, 40, 45, 40, -44,
	-108, -154, -154, -2, -50, 48, 120, 49, -110, -52,
	11, -35, -47, -113, -90, -33, -104, -109, -101, -142,
	-143, -144, -104, 57, 58, -137, -138, -145, 123, 122,
	-139, 117, 27, -133, 66, 71, -129, 176, -123, 52,
	-123, -123, -123, -123, -127, 159, -127, -127, -127, 52,
	-123, -123, -123, -131, 52, -131, -131, -132, 52, -132,
	-100, 51, -47, 22, -96, 114, -150, 112, 173, 159,
	64, 28, 113, 14, 195, 133, 206, 55, 134, -47,
	-47, -114, 36, -33, -33, -64, 66, 71, 67, 68,
	-33, -33, -58, -65, -68, -71, 62, 89, 87, 88,
	73, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -115, 55, 57, 55,
	-57, -57, -103, -31, 20, -30, -32, 96, -33, -108,
	-104, 53, -154, -30, -30, -33, -33, -30, -24, -73,
	-74, 75, -103, -154, -30, -31, -30, -30, -81, -84,
	-91, 18, 10, 32, 32, -30, -87, 50, -88, -67,
	-69, -68, -153, -2, -85, -103, -52, -40, -39, 50,
	51, -41, 50, -39, 40, 40, -154, 117, 117, 117,
	-79, -33, -52, 108, 53, -144, 79, 52, 27, -139,
	55, 55, -124, 28, 66, -130, 177, 58, -127, -127,
	-128, 104, 29, -128, -128, -128, -136, 57, 58, 58,
	50, -103, -114, -113, -97, -98, 119, 21, 117, 27,
	133, -114, 37, 66, 67, 68, -65, -58, -58, -58,
	-29, 128, 70, -154, -154, -30, 53, -106, -105, 21,
	-103, 57, 108, -153, -33, -154, -154, 53, 51, 21,
	-154, -30, -76, -74, 77, -33, -154, -154, -154, -154,
	-154, -47, -34, 10, 26, -87, 53, -154, -154, -154,
	53, 108, -79, -33, 52, -33, -153, -153, -153, -83,
	-104, -143, -144, -147, -146, -103, 55, -126, 50, 57,
	58, 59, 66, 185, 54, -128, -128, 55, 55, 105,
	54, 53, 53, 54, 53, -47, -47, -113, -103, -29,
	70, -58, -58, -154, -32, -105, 96, -109, -31, -116,
	105, 156, 127, 154, 150, 170, 161, 175, 152, 176,
	-115, -116, 200, -79, 78, -33, 76, -52, -35, 27,
	-69, 32, -2, -153, -103, -103, -83, -86, -103, -51,
	-103, -51, -51, 54, 53, -123, -134, 173, 8, 57,
	58, 58, -114, 25, -58, 108, -154, -154, -123, -123,
	-123, -132, -123, 144, -123, 144, -154, -154, -153, -28,
	198, -33, -77, 12, 8, -67, -2, 108, 53, 54,
	-154, 53, -154, -154, -146, -135, 123, 27, 122, 185,
	54, 54, -153, 96, -127, 55, -58, -154, 57, -78,
	13, 15, -88, -154, -103, -103, -103, -125, 64, 27,
	27, -148, -149, 133, -27, 89, 203, -33, -66, 57,
	-154, 53, -103, -154, 201, 47, 204, -149, 32, 37,
	202, 205, 135, 37, 136, 203, -153, 204, -58, 132,
	205, -154, -154,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 413, 0, 189,
	189, 189, 189, 189, 0, 473, 455, 0, 0, 0,
	0, 0, 183, 640, 640, 640, 640, 640, 0, 28,
	29, 638, 1, 3, 421, 0, 0, 193, 196, 191,
	455, 0, 0, 0, 44, 0, 0, 631, 0, 453,
	474, 475, 478, 479, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 632, 633, 634, 635, 636, 637, 0, 0, 456,
	0, 451, 0, 451, 0, 162, 257, 482, 483, 631,
	0, 0, 0, 0, 641, 641, 641, 641, 641, 641,
	178, 179, 180, 641, 182, 184, 185, 186, 187, 188,
	22, 425, 0, 0, 413, 24, 0, 189, 194, 195,
	199, 197, 198, 190, 0, 0, 218, 220, 221, 222,
	238, 0, 240, 0, 0, 35, 0, 38, -2, 580,
	-2, 446, 0, 395, 0, -2, -2, 0, 50, 0,
	0, 641, 0, 0, 0, 0, 641, 0, 0, 0,
	0, 0, 161, 0, 163, 641, 641, 641, 641, 641,
	641, 641, 641, 172, 642, 643, 480, 481, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 173, 174, 175, 176,
	177, 181, 23, 639, 18, 0, 0, 422, 267, 0,
	272, 274, 0, 309, 310, 311, 312, 313, 0, 0,
	0, 0, 0, 0, 0, 336, 337, 338, 339, 398,
	399, 400, 401, 402, 403, 404, 405, 276, 277, 395,
	0, 445, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 360, 360, 360, 360, 360, 360, 360, 360, 0,
	0, 0, 0, 414, 415, 418, 421, 22, 196, 0,
	201, 200, 192, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 248, 0, 0, 0, 0,
	239, 0, 22, 0, 259, 241, 0, 243, 244, 265,
	0, 0, 33, 34, 640, 42, 43, 0, 40, 0,
	0, 138, 0, 103, 99, 55, 56, 92, 58, 92,
	92, 92, 92, 116, 116, 116, 116, 84, 85, 86,
	87, 88, 0, 71, 92, 92, 92, 75, 59, 60,
	61, 62, 63, 64, 65, 94, 94, 94, 96, 96,
	476, 46, 0, 48, 0, 0, 150, 0, 158, 452,
	0, 641, 258, 484, 485, 164, 165, 166, 167, 168,
	169, 170, 171, 426, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	294, 295, 296, 297, 298, 299, 300, 273, 0, 287,
	0, 0, 0, 329, 330, 331, 332, 333, 334, 0,
	203, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	199, 0, 387, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 359, 0, 203, 0, 0, 0, 417, 419,
	420, 425, 25, 199, 0, 406, 0, 0, 0, 202,
	438, 0, 0, -2, 0, 255, 265, 219, 234, 236,
	0, 231, 246, 247, 249, 0, 251, 0, 253, 254,
	223, 224, 306, 22, 225, 0, 0, 0, 242, 413,
	0, 265, 36, 37, 447, 448, 396, 0, -2, 49,
	139, 141, 144, 145, 146, 51, 52, 0, 0, 0,
	0, 133, 134, 106, 104, 0, 101, 100, 57, 0,
	116, 116, 78, 79, 119, 0, 119, 119, 119, 0,
	72, 73, 74, 66, 0, 67, 68, 69, 0, 70,
	0, 0, 641, 454, 640, 468, 151, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 0, 157,
	641, 160, 0, 268, 269, 271, 288, 0, 290, 292,
	423, 424, 278, 279, 303, 304, 305, 0, 0, 0,
	0, 301, 283, 0, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 328, 371, 372, 0,
	326, 327, 335, 0, 0, 204, 205, 207, 211, 0,
	396, 0, 444, 0, 0, 0, 0, 0, 0, 393,
	390, 0, 0, 361, 0, 0, 0, 0, 416, 19,
	0, 449, 450, 407, 408, 216, 26, 0, 438, 428,
	440, 442, 0, 22, 0, 434, 413, 228, 235, 0,
	0, 229, 0, 230, 250, 252, -2, 0, 0, 0,
	421, 266, 32, 0, 0, 142, 0, 0, 129, 0,
	131, 132, 112, 0, 105, 54, 102, 0, 119, 119,
	80, 0, 0, 81, 82, 83, 0, 90, 0, 0,
	0, 477, 47, 147, 0, 640, 469, 470, 471, 472,
	0, 159, 427, 289, 291, 293, 280, 301, 284, 0,
	281, 0, 0, 275, 340, 0, 0, 208, 212, 0,
	214, 215, 0, 203, 308, 343, 344, 0, 0, 0,
	0, 413, 0, 391, 0, 0, 351, 362, 363, 364,
	365, 20, 265, 0, 0, 27, 0, 443, -2, 0,
	0, 0, 421, 232, 0, 237, 0, 0, 0, 31,
	397, 140, 143, 0, 135, 92, 130, 114, 0, 107,
	108, 109, 110, 111, 93, 76, 77, 120, 117, 118,
	89, 0, 0, 97, 0, 641, 148, 149, 0, 282,
	0, 302, 285, 341, 206, 213, 209, 0, 0, 0,
	92, 92, 376, 92, 96, 379, 92, 381, 92, 384,
	0, 0, 0, 388, 350, 394, 0, 409, 217, 0,
	441, 0, -2, 0, 436, 435, 30, 0, 226, 0,
	263, 0, 0, 128, 0, 137, 121, 115, 0, 91,
	0, 0, 45, 0, 286, 0, 342, 345, 373, 116,
	377, 378, 380, 382, 383, 385, 347, 346, 0, 0,
	0, 392, 411, 0, 0, 431, 22, 0, 0, 233,
	260, 0, 261, 262, 136, 126, 0, 123, 125, 113,
	95, 98, 0, 210, 374, 375, 366, 349, 389, 21,
	0, 0, 439, -2, 437, 227, 264, 53, 0, 122,
	124, 0, 153, 0, 0, 0, 0, 412, 410, 127,
	152, 0, 0, 348, 0, 0, 0, 154, 0, 367,
	0, 370, 0, 368, 0, 0, 0, 0, 0, 0,
	369, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 207,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:274
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:279
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:303
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:311
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:322
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:328
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:349
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:382
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:388
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:397
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:406
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:412
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:416
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:427
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:437
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:442
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:451
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:464
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:476
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:486
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:670
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:674
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:679
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:683
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:691
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:701
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:709
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:722
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:741
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:753
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:761
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:766
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:770
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:775
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:779
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:784
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:788
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:792
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:801
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:806
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:810
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:818
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:827
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:831
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:837
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:847
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:851
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:871
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:875
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:894
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:906
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:910
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:916
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:934
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:939
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:944
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:948
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:954
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:964
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:970
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:974
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:980
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:986
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:994
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:999
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.statement = &OtherRead{}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.statement = &OtherRead{}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &OtherRead{}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1136
		{
			setAllowComments(yylex, true)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.bytes2 = nil
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = UnionStr
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = UnionAllStr
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.str = UnionDistinctStr
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = ""
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = SQLCacheStr
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.str = DistinctStr
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = ""
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = StraightJoinHint
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.selectExprs = nil
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1342
		{
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1348
		{
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.empty = struct{}{}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.empty = struct{}{}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.str = JoinStr
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = JoinStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.str = JoinStr
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.str = StraightJoinStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.str = LeftJoinStr
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.str = LeftJoinStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.str = RightJoinStr
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.str = RightJoinStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.str = NaturalJoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.indexHints = nil
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.str = IsNullStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.str = IsNotNullStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = IsTrueStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.str = IsNotTrueStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.str = IsFalseStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.str = IsNotFalseStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.str = EqualStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.str = LessThanStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.str = GreaterThanStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.str = LessEqualStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.str = GreaterEqualStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.str = NotEqualStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1762
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1770
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1792
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 342:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 345:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 348:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = BooleanModeStr
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.str = QueryExpansionStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.expr = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.str = string("")
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = &NullVal{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.exprs = nil
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.orderBy = nil
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.str = AscScr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.str = AscScr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.str = DescScr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.limit = nil
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.str = ForUpdateStr
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.str = ShareModeStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2233
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2246
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.updateExprs = nil
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.byt = 0
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.byt = 1
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.str = IgnoreStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			decNesting(yylex)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2620
		{
			forceEOF(yylex)
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2625
		{
			forceEOF(yylex)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2629
		{
			forceEOF(yylex)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2633
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     *JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const USING = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const BIT_LITERAL = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const COLLATE = 57429
const BINARY = 57430
const UNDERSCORE_BINARY = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const TABLE = 57440
const INDEX = 57441
const VIEW = 57442
const TO = 57443
const IGNORE = 57444
const IF = 57445
const UNIQUE = 57446
const PRIMARY = 57447
const SHOW = 57448
const DESCRIBE = 57449
const EXPLAIN = 57450
const DATE = 57451
const ESCAPE = 57452
const REPAIR = 57453
const OPTIMIZE = 57454
const TRUNCATE = 57455
const MAXVALUE = 57456
const PARTITION = 57457
const REORGANIZE = 57458
const LESS = 57459
const THAN = 57460
const BIT = 57461
const TINYINT = 57462
const SMALLINT = 57463
const MEDIUMINT = 57464
const INT = 57465
const INTEGER = 57466
const BIGINT = 57467
const INTNUM = 57468
const REAL = 57469
const DOUBLE = 57470
const FLOAT_TYPE = 57471
const DECIMAL = 57472
const NUMERIC = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const NAMES = 57505
const CHARSET = 57506
const CURRENT_TIMESTAMP = 57507
const DATABASE = 57508
const CURRENT_DATE = 57509
const CURRENT_TIME = 57510
const LOCALTIME = 57511
const LOCALTIMESTAMP = 57512
const UTC_DATE = 57513
const UTC_TIME = 57514
const UTC_TIMESTAMP = 57515
const REPLACE = 57516
const CONVERT = 57517
const CAST = 57518
const GROUP_CONCAT = 57519
const SEPARATOR = 57520
const MATCH = 57521
const AGAINST = 57522
const BOOLEAN = 57523
const LANGUAGE = 57524
const WITH = 57525
const QUERY = 57526
const EXPANSION = 57527
const UNUSED = 57528

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 22,
	-2, 4,
	-1, 264,
	78, 565,
	107, 565,
	-2, 39,
	-1, 266,
	78, 587,
	107, 587,
	-2, 41,
	-1, 271,
	107, 466,
	-2, 462,
	-1, 272,
	107, 467,
	-2, 463,
	-1, 549,
	5, 22,
	-2, 413,
	-1, 584,
	107, 469,
	-2, 465,
	-1, 742,
	5, 23,
	-2, 290,
	-1, 834,
	5, 23,
	-2, 414,
	-1, 908,
	5, 22,
	-2, 416,
	-1, 977,
	5, 23,
	-2, 417,
}

const yyPrivate = 57344

const yyLast = 7539

var yyAct = [...]int{

	332, 38, 508, 292, 985, 850, 305, 725, 263, 610,
	914, 623, 445, 726, 331, 575, 730, 682, 381, 237,
	44, 885, 692, 382, 3, 443, 586, 722, 804, 796,
	689, 659, 587, 272, 583, 766, 706, 596, 294, 38,
	231, 734, 360, 354, 303, 274, 267, 242, 43, 385,
	370, 252, 257, 246, 1013, 619, 1004, 1010, 999, 63,
	268, 253, 236, 135, 604, 141, 135, 1008, 1003, 998,
	251, 898, 945, 48, 278, 232, 233, 234, 235, 963,
	855, 856, 857, 762, 639, 135, 135, 398, 603, 858,
	922, 135, 969, 611, 50, 51, 52, 53, 637, 886,
	988, 474, 473, 483, 484, 476, 477, 478, 479, 480,
	481, 482, 475, 940, 520, 485, 938, 1007, 1005, 140,
	986, 888, 786, 284, 643, 961, 571, 573, 598, 300,
	285, 280, 125, 636, 126, 126, 128, 129, 130, 952,
	451, 745, 890, 446, 894, 744, 889, 743, 887, 276,
	783, 281, 137, 892, 127, 275, 785, 598, 930, 135,
	837, 135, 891, 497, 498, 135, 808, 893, 895, 749,
	507, 135, 478, 479, 480, 481, 482, 475, 402, 291,
	485, 633, 638, 631, 756, 289, 767, 475, 329, 864,
	485, 485, 460, 666, 611, 463, 462, 461, 572, 900,
	461, 401, 641, 644, 448, 760, 859, 664, 665, 663,
	535, 536, 989, 463, 61, 707, 463, 597, 981, 962,
	960, 997, 595, 594, 362, 926, 635, 474, 473, 483,
	484, 476, 477, 478, 479, 480, 481, 482, 475, 865,
	634, 485, 269, 38, 600, 784, 597, 782, 707, 601,
	820, 814, 925, 813, 287, 462, 461, 41, 383, 775,
	774, 356, 640, 863, 763, 797, 357, 662, 307, 462,
	461, 992, 463, 642, 683, 395, 684, 972, 444, 852,
	462, 461, 924, 444, 135, 773, 463, 902, 789, 790,
	791, 135, 135, 135, 994, 293, 63, 463, 757, 652,
	654, 655, 494, 496, 653, 955, 293, 293, 450, 685,
	815, 63, 442, 135, 286, 135, 63, 358, 135, 275,
	256, 135, 965, 135, 456, 836, 953, 465, 919, 918,
	506, 802, 293, 510, 511, 512, 513, 514, 515, 516,
	964, 519, 521, 521, 521, 521, 521, 521, 521, 521,
	529, 530, 531, 532, 870, 869, 45, 462, 461, 867,
	866, 538, 464, 697, 550, 836, 293, 860, 257, 257,
	257, 257, 257, 268, 463, 552, 537, 458, 462, 461,
	697, 293, 367, 293, 383, 567, 568, 549, 404, 403,
	399, 257, 392, 63, 802, 463, 723, 832, 135, 399,
	19, 135, 135, 135, 135, 135, 268, 569, 576, 577,
	829, 367, 539, 135, 576, 582, 588, 135, 868, 553,
	135, 802, 556, 19, 135, 135, 612, 613, 614, 565,
	554, 555, 393, 557, 391, 579, 574, 63, 499, 500,
	501, 502, 503, 504, 505, 41, 580, 366, 907, 367,
	591, 397, 802, 625, 750, 399, 444, 522, 523, 524,
	525, 526, 527, 528, 533, 41, 397, 605, 41, 627,
	367, 397, 624, 840, 753, 620, 606, 607, 608, 609,
	135, 647, 243, 660, 615, 135, 735, 736, 135, 63,
	584, 616, 617, 618, 621, 622, 55, 38, 854, 474,
	473, 483, 484, 476, 477, 478, 479, 480, 481, 482,
	475, 510, 698, 485, 320, 319, 322, 323, 324, 325,
	696, 19, 691, 321, 326, 709, 256, 41, 776, 372,
	375, 376, 377, 373, 569, 374, 378, 738, 124, 63,
	723, 454, 686, 687, 547, 562, 548, 17, 541, 728,
	563, 38, 560, 63, 268, 269, 724, 561, 545, 704,
	741, 711, 564, 727, 376, 377, 41, 648, 732, 740,
	559, 495, 558, 742, 729, 1006, 715, 714, 1002, 694,
	247, 248, 788, 1001, 63, 720, 719, 768, 269, 250,
	400, 397, 397, 748, 241, 584, 746, 658, 739, 588,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 759, 764, 765, 983, 751,
	63, 476, 477, 478, 479, 480, 481, 482, 475, 444,
	361, 485, 982, 755, 295, 905, 256, 256, 256, 256,
	256, 754, 928, 359, 397, 830, 296, 444, 769, 770,
	771, 629, 256, 453, 778, 380, 244, 245, 361, 256,
	718, 63, 63, 372, 375, 376, 377, 373, 717, 374,
	378, 779, 787, 735, 736, 238, 975, 239, 660, 45,
	63, 974, 948, 576, 949, 923, 459, 47, 49, 799,
	390, 42, 1, 800, 688, 792, 397, 809, 632, 984,
	849, 593, 585, 811, 812, 273, 54, 816, 708, 592,
	772, 959, 822, 921, 823, 824, 825, 826, 483, 484,
	476, 477, 478, 479, 480, 481, 482, 475, 63, 599,
	485, 761, 833, 834, 835, 602, 269, 661, 853, 731,
	980, 758, 819, 407, 842, 843, 844, 408, 406, 410,
	135, 409, 831, 838, 405, 138, 379, 384, 394, 803,
	626, 56, 846, 588, 781, 588, 845, 780, 630, 279,
	493, 716, 262, 534, 353, 397, 973, 847, 947, 818,
	517, 705, 306, 63, 63, 848, 63, 63, 651, 318,
	315, 317, 316, 540, 793, 794, 795, 546, 330, 467,
	861, 862, 304, 298, 570, 879, 255, 363, 371, 369,
	135, 368, 260, 737, 135, 733, 777, 397, 297, 355,
	63, 696, 873, 875, 254, 880, 828, 944, 133, 987,
	257, 230, 896, 728, 881, 397, 909, 897, 899, 63,
	884, 544, 20, 883, 903, 258, 906, 727, 904, 46,
	133, 133, 270, 249, 916, 917, 133, 913, 912, 908,
	588, 16, 15, 135, 14, 13, 24, 12, 11, 10,
	63, 63, 444, 9, 63, 132, 63, 63, 63, 466,
	751, 63, 8, 806, 7, 6, 5, 4, 931, 932,
	240, 18, 2, 0, 0, 0, 584, 927, 261, 943,
	941, 942, 936, 277, 0, 63, 0, 0, 728, 0,
	38, 0, 509, 0, 0, 950, 920, 0, 954, 518,
	956, 957, 727, 0, 133, 958, 133, 877, 878, 966,
	133, 0, 661, 951, 0, 0, 133, 0, 397, 397,
	0, 397, 851, 846, 968, 0, 0, 0, 971, 0,
	0, 933, 934, 63, 935, 977, 268, 937, 976, 939,
	0, 0, 0, 0, 63, 0, 0, 0, 0, 0,
	0, 282, 0, 283, 0, 874, 0, 288, 991, 0,
	0, 581, 0, 290, 0, 0, 63, 0, 993, 63,
	0, 996, 0, 0, 806, 0, 0, 397, 0, 1000,
	0, 0, 0, 0, 0, 0, 929, 0, 1009, 0,
	0, 0, 0, 0, 0, 1014, 1015, 0, 0, 0,
	63, 0, 0, 0, 0, 910, 911, 0, 0, 731,
	0, 915, 915, 915, 699, 700, 397, 0, 703, 0,
	0, 649, 650, 0, 656, 657, 0, 0, 0, 133,
	0, 0, 710, 0, 712, 713, 133, 387, 133, 0,
	397, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 133, 0,
	133, 0, 0, 133, 0, 0, 133, 0, 457, 0,
	509, 0, 0, 701, 702, 0, 365, 0, 256, 0,
	0, 0, 0, 0, 0, 389, 0, 0, 851, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 397,
	0, 0, 0, 0, 0, 447, 0, 449, 0, 0,
	452, 0, 0, 455, 0, 0, 0, 0, 269, 1011,
	0, 978, 0, 0, 979, 473, 483, 484, 476, 477,
	478, 479, 480, 481, 482, 475, 747, 0, 485, 0,
	0, 0, 0, 133, 0, 270, 133, 133, 133, 133,
	133, 0, 0, 0, 0, 995, 0, 0, 566, 0,
	0, 0, 133, 0, 0, 387, 0, 0, 0, 133,
	133, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 801, 0, 0, 19, 39, 21, 22,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 33, 0, 0, 578, 0, 23,
	0, 0, 0, 0, 0, 133, 0, 96, 0, 0,
	133, 0, 0, 133, 0, 0, 77, 32, 0, 0,
	0, 41, 85, 0, 0, 104, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 821, 0, 0,
	0, 0, 628, 72, 0, 0, 0, 645, 58, 0,
	646, 0, 0, 0, 0, 695, 457, 0, 509, 0,
	695, 695, 0, 0, 695, 839, 0, 0, 841, 0,
	25, 26, 28, 27, 30, 0, 0, 0, 695, 695,
	695, 695, 0, 31, 34, 35, 0, 0, 36, 37,
	29, 0, 0, 695, 0, 59, 270, 57, 0, 0,
	0, 60, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	901, 40, 105, 114, 123, 0, 413, 118, 119, 120,
	93, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 425, 84,
	121, 100, 79, 115, 0, 0, 0, 0, 430, 431,
	432, 433, 434, 435, 436, 0, 437, 438, 439, 440,
	441, 426, 427, 428, 429, 411, 412, 0, 0, 414,
	0, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 0, 0, 0, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 0,
	469, 0, 472, 695, 0, 0, 0, 0, 486, 487,
	488, 489, 490, 491, 492, 133, 470, 471, 468, 474,
	473, 483, 484, 476, 477, 478, 479, 480, 481, 482,
	475, 0, 0, 485, 474, 473, 483, 484, 476, 477,
	478, 479, 480, 481, 482, 475, 0, 0, 485, 0,
	0, 0, 0, 0, 990, 509, 0, 0, 0, 0,
	876, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 133,
	474, 473, 483, 484, 476, 477, 478, 479, 480, 481,
	482, 475, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 457, 695, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 872, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	209, 182, 221, 160, 174, 229, 175, 176, 203, 148,
	190, 96, 172, 0, 163, 143, 169, 144, 161, 184,
	77, 187, 159, 211, 193, 227, 85, 198, 0, 104,
	92, 0, 0, 186, 213, 188, 208, 181, 204, 153,
	197, 222, 173, 201, 223, 0, 0, 0, 62, 0,
	589, 590, 0, 0, 0, 0, 0, 72, 0, 200,
	218, 171, 202, 142, 199, 0, 146, 149, 228, 216,
	166, 167, 752, 0, 0, 0, 0, 0, 0, 185,
	189, 205, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 196, 0, 0, 0, 150, 147, 0,
	183, 0, 0, 0, 152, 0, 165, 206, 270, 214,
	180, 136, 217, 178, 177, 220, 99, 212, 162, 170,
	73, 168, 103, 97, 0, 195, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 145, 0, 105, 114, 123, 158,
	215, 118, 119, 120, 93, 71, 156, 157, 154, 155,
	191, 192, 224, 225, 226, 207, 151, 0, 0, 210,
	194, 64, 0, 84, 121, 100, 79, 115, 219, 209,
	182, 221, 160, 174, 229, 175, 176, 203, 148, 190,
	96, 172, 0, 163, 143, 169, 144, 161, 184, 77,
	187, 159, 211, 193, 227, 85, 198, 0, 104, 92,
	0, 0, 186, 213, 188, 208, 181, 204, 153, 197,
	222, 173, 201, 223, 0, 0, 0, 62, 0, 589,
	590, 0, 0, 0, 0, 0, 72, 0, 200, 218,
	171, 202, 142, 199, 0, 146, 149, 228, 216, 166,
	167, 0, 0, 0, 0, 0, 0, 0, 185, 189,
	205, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 196, 0, 0, 0, 150, 147, 0, 183,
	0, 0, 0, 152, 0, 165, 206, 0, 214, 180,
	136, 217, 178, 177, 220, 99, 212, 162, 170, 73,
	168, 103, 97, 0, 195, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 145, 0, 105, 114, 123, 158, 215,
	118, 119, 120, 93, 71, 156, 157, 154, 155, 191,
	192, 224, 225, 226, 207, 151, 0, 0, 210, 194,
	64, 0, 84, 121, 100, 79, 115, 219, 209, 182,
	221, 160, 174, 229, 175, 176, 203, 148, 190, 96,
	172, 0, 163, 143, 169, 144, 161, 184, 77, 187,
	159, 211, 193, 227, 85, 198, 0, 104, 92, 0,
	0, 186, 213, 188, 208, 181, 204, 153, 197, 222,
	173, 201, 223, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 200, 218, 171,
	202, 142, 199, 0, 146, 149, 228, 216, 166, 167,
	0, 0, 0, 0, 0, 0, 0, 185, 189, 205,
	179, 0, 0, 0, 0, 0, 0, 967, 0, 164,
	0, 196, 0, 0, 0, 150, 147, 0, 183, 0,
	0, 0, 152, 0, 165, 206, 0, 214, 180, 136,
	217, 178, 177, 220, 99, 212, 162, 170, 73, 168,
	103, 97, 0, 195, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 145, 0, 105, 114, 123, 158, 215, 118,
	119, 120, 93, 71, 156, 157, 154, 155, 191, 192,
	224, 225, 226, 207, 151, 0, 0, 210, 194, 64,
	0, 84, 121, 100, 79, 115, 219, 209, 182, 221,
	160, 174, 229, 175, 176, 203, 148, 190, 96, 172,
	0, 163, 143, 169, 144, 161, 184, 77, 187, 159,
	211, 193, 227, 85, 198, 0, 104, 92, 0, 0,
	186, 213, 188, 208, 181, 204, 153, 197, 222, 173,
	201, 223, 41, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 200, 218, 171, 202,
	142, 199, 0, 146, 149, 228, 216, 166, 167, 0,
	0, 0, 0, 0, 0, 0, 185, 189, 205, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	196, 0, 0, 0, 150, 147, 0, 183, 0, 0,
	0, 152, 0, 165, 206, 0, 214, 180, 136, 217,
	178, 177, 220, 99, 212, 162, 170, 73, 168, 103,
	97, 0, 195, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 145, 0, 105, 114, 123, 158, 215, 118, 119,
	120, 93, 71, 156, 157, 154, 155, 191, 192, 224,
	225, 226, 207, 151, 0, 0, 210, 194, 64, 0,
	84, 121, 100, 79, 115, 219, 209, 182, 221, 160,
	174, 229, 175, 176, 203, 148, 190, 96, 172, 0,
	163, 143, 169, 144, 161, 184, 77, 187, 159, 211,
	193, 227, 85, 198, 0, 104, 92, 0, 0, 186,
	213, 188, 208, 181, 204, 153, 197, 222, 173, 201,
	223, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 200, 218, 171, 202, 142,
	199, 0, 146, 149, 228, 216, 166, 167, 0, 0,
	0, 0, 0, 0, 0, 185, 189, 205, 179, 0,
	0, 0, 0, 0, 0, 882, 0, 164, 0, 196,
	0, 0, 0, 150, 147, 0, 183, 0, 0, 0,
	152, 0, 165, 206, 0, 214, 180, 136, 217, 178,
	177, 220, 99, 212, 162, 170, 73, 168, 103, 97,
	0, 195, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	145, 0, 105, 114, 123, 158, 215, 118, 119, 120,
	93, 71, 156, 157, 154, 155, 191, 192, 224, 225,
	226, 207, 151, 0, 0, 210, 194, 64, 0, 84,
	121, 100, 79, 115, 219, 209, 182, 221, 160, 174,
	229, 175, 176, 203, 148, 190, 96, 172, 0, 163,
	143, 169, 144, 161, 184, 77, 187, 159, 211, 193,
	227, 85, 198, 0, 104, 92, 0, 0, 186, 213,
	188, 208, 181, 204, 153, 197, 222, 173, 201, 223,
	0, 0, 0, 62, 0, 396, 0, 0, 0, 0,
	0, 0, 72, 0, 200, 218, 171, 202, 142, 199,
	0, 146, 149, 228, 216, 166, 167, 0, 0, 0,
	0, 0, 0, 0, 185, 189, 205, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 196, 0,
	0, 0, 150, 147, 0, 183, 0, 0, 0, 152,
	0, 165, 206, 0, 214, 180, 136, 217, 178, 177,
	220, 99, 212, 162, 170, 73, 168, 103, 97, 0,
	195, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 145,
	0, 105, 114, 123, 158, 215, 118, 119, 120, 93,
	71, 156, 157, 154, 155, 191, 192, 224, 225, 226,
	207, 151, 0, 0, 210, 194, 64, 0, 84, 121,
	100, 79, 115, 219, 209, 182, 221, 160, 174, 229,
	175, 176, 203, 148, 190, 96, 172, 0, 163, 143,
	169, 144, 161, 184, 77, 187, 159, 211, 193, 227,
	85, 198, 0, 104, 92, 0, 0, 186, 213, 188,
	208, 181, 204, 153, 197, 222, 173, 201, 223, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 200, 218, 171, 202, 142, 199, 0,
	146, 149, 228, 216, 166, 167, 0, 0, 0, 0,
	0, 0, 0, 185, 189, 205, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 196, 0, 0,
	0, 150, 147, 0, 183, 0, 0, 0, 152, 0,
	165, 206, 0, 214, 180, 136, 217, 178, 177, 220,
	99, 212, 162, 170, 73, 168, 103, 97, 0, 195,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 145, 0,
	105, 114, 123, 158, 215, 118, 119, 120, 93, 71,
	156, 157, 154, 155, 191, 192, 224, 225, 226, 207,
	151, 0, 0, 210, 194, 64, 0, 84, 121, 100,
	79, 115, 219, 209, 182, 221, 160, 174, 229, 175,
	176, 203, 148, 190, 96, 172, 0, 163, 143, 169,
	144, 161, 184, 77, 187, 159, 211, 193, 227, 85,
	198, 0, 104, 92, 0, 0, 186, 213, 188, 208,
	181, 204, 153, 197, 222, 173, 201, 223, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 200, 218, 171, 202, 142, 199, 0, 146,
	149, 228, 216, 166, 167, 0, 0, 0, 0, 0,
	0, 0, 185, 189, 205, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 196, 0, 0, 0,
	150, 147, 0, 183, 0, 0, 0, 152, 0, 165,
	206, 0, 214, 180, 136, 217, 178, 177, 220, 99,
	212, 162, 170, 73, 168, 103, 97, 0, 195, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 145, 0, 105,
	114, 123, 158, 215, 118, 119, 120, 93, 71, 156,
	157, 154, 155, 191, 192, 224, 225, 226, 207, 151,
	0, 0, 210, 194, 64, 0, 84, 121, 100, 79,
	115, 219, 209, 182, 221, 160, 174, 229, 175, 176,
	203, 148, 190, 96, 172, 0, 163, 143, 169, 144,
	161, 184, 77, 187, 159, 211, 193, 227, 85, 198,
	0, 104, 92, 0, 0, 186, 213, 188, 208, 181,
	204, 153, 197, 222, 173, 201, 223, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 200, 218, 171, 202, 142, 199, 0, 146, 149,
	228, 216, 166, 167, 0, 0, 0, 0, 0, 0,
	0, 185, 189, 205, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 196, 0, 0, 0, 150,
	147, 0, 183, 0, 0, 0, 152, 0, 165, 206,
	0, 214, 180, 136, 217, 178, 177, 220, 99, 212,
	162, 170, 73, 168, 103, 97, 0, 195, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 145, 0, 105, 114,
	123, 158, 215, 118, 119, 120, 93, 71, 156, 157,
	154, 155, 191, 192, 224, 225, 226, 207, 151, 0,
	0, 210, 194, 64, 0, 84, 121, 100, 79, 115,
	219, 209, 182, 221, 160, 174, 229, 175, 176, 203,
	148, 190, 96, 172, 0, 163, 143, 169, 144, 161,
	184, 77, 187, 159, 211, 193, 227, 85, 198, 0,
	104, 92, 0, 0, 186, 213, 188, 208, 181, 204,
	153, 197, 222, 173, 201, 223, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	200, 218, 171, 202, 142, 199, 0, 146, 149, 228,
	216, 166, 167, 0, 0, 0, 0, 0, 0, 0,
	185, 189, 205, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 196, 0, 0, 0, 150, 147,
	0, 183, 0, 0, 0, 152, 0, 165, 206, 0,
	214, 180, 136, 217, 178, 177, 220, 99, 212, 162,
	170, 73, 168, 103, 97, 0, 195, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 145, 0, 105, 114, 123,
	158, 215, 118, 119, 120, 93, 71, 156, 157, 154,
	155, 191, 192, 224, 225, 226, 207, 151, 0, 0,
	210, 194, 64, 0, 84, 121, 100, 79, 115, 96,
	0, 0, 690, 0, 302, 0, 0, 0, 77, 0,
	301, 0, 0, 340, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 271, 320, 319, 322,
	323, 324, 325, 0, 0, 72, 321, 326, 327, 328,
	0, 0, 299, 313, 0, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 693, 0, 0,
	0, 351, 0, 312, 0, 0, 308, 309, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 349, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 341, 350, 347, 348, 345, 346,
	344, 343, 342, 352, 335, 336, 338, 0, 337, 64,
	0, 84, 121, 100, 79, 115, 96, 0, 0, 0,
	0, 302, 0, 0, 0, 77, 0, 301, 0, 0,
	340, 85, 0, 0, 104, 92, 0, 0, 0, 0,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 271, 320, 319, 322, 323, 324, 325,
	0, 0, 72, 321, 326, 327, 328, 0, 0, 299,
	313, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 693, 0, 0, 0, 351, 0,
	312, 0, 0, 308, 309, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 349,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 0, 0, 118, 119, 120, 93,
	71, 341, 350, 347, 348, 345, 346, 344, 343, 342,
	352, 335, 336, 338, 0, 337, 64, 0, 84, 121,
	100, 79, 115, 96, 0, 0, 0, 0, 302, 0,
	0, 0, 77, 0, 301, 0, 0, 340, 85, 0,
	0, 104, 92, 0, 0, 0, 0, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 293,
	271, 320, 319, 322, 323, 324, 325, 798, 0, 72,
	321, 326, 327, 328, 0, 0, 299, 313, 0, 339,
	0, 0, 0, 0, 0, 0, 0, 474, 473, 483,
	484, 476, 477, 478, 479, 480, 481, 482, 475, 310,
	311, 485, 0, 0, 0, 351, 0, 312, 0, 0,
	308, 309, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 349, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 0, 0, 118, 119, 120, 93, 71, 341, 350,
	347, 348, 345, 346, 344, 343, 342, 352, 335, 336,
	338, 19, 337, 64, 0, 84, 121, 100, 79, 115,
	0, 0, 96, 0, 0, 0, 0, 302, 0, 0,
	0, 77, 0, 301, 0, 0, 340, 85, 0, 0,
	104, 92, 0, 0, 0, 0, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 271,
	320, 319, 322, 323, 324, 325, 0, 0, 72, 321,
	326, 327, 328, 0, 0, 299, 313, 0, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	0, 0, 0, 0, 351, 0, 312, 0, 0, 308,
	309, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 349, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 93, 71, 341, 350, 347,
	348, 345, 346, 344, 343, 342, 352, 335, 336, 338,
	0, 337, 64, 0, 84, 121, 100, 79, 115, 96,
	0, 0, 0, 0, 302, 0, 0, 0, 77, 0,
	301, 0, 0, 340, 85, 0, 0, 104, 92, 0,
	0, 0, 0, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 271, 320, 319, 322,
	323, 324, 325, 0, 0, 72, 321, 326, 327, 328,
	0, 0, 299, 313, 0, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 0, 0, 0,
	0, 351, 0, 312, 0, 0, 308, 309, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 349, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 341, 350, 347, 348, 345, 346,
	344, 343, 342, 352, 335, 336, 338, 96, 337, 64,
	0, 84, 121, 100, 79, 115, 77, 0, 0, 0,
	0, 340, 85, 0, 0, 104, 92, 0, 0, 0,
	0, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 0, 271, 320, 319, 322, 323, 324,
	325, 0, 0, 72, 321, 326, 327, 328, 0, 0,
	0, 313, 0, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 351,
	0, 312, 0, 0, 308, 309, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	349, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 1012, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 0, 0, 118, 119, 120,
	93, 71, 341, 350, 347, 348, 345, 346, 344, 343,
	342, 352, 335, 336, 338, 96, 337, 64, 0, 84,
	121, 100, 79, 115, 77, 0, 0, 0, 0, 340,
	85, 0, 0, 104, 92, 0, 0, 0, 0, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 271, 320, 319, 322, 323, 324, 325, 0,
	0, 72, 321, 326, 327, 328, 0, 0, 0, 313,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 0, 0, 0, 0, 351, 0, 312,
	0, 0, 308, 309, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 349, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 93, 71,
	341, 350, 347, 348, 345, 346, 344, 343, 342, 352,
	335, 336, 338, 96, 337, 64, 0, 84, 121, 100,
	79, 115, 77, 0, 0, 0, 0, 0, 85, 0,
	0, 104, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 473, 483, 484, 476,
	477, 478, 479, 480, 481, 482, 475, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 0, 0, 118, 119, 120, 93, 71, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 805,
	0, 0, 0, 64, 77, 84, 121, 100, 79, 115,
	85, 0, 0, 104, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 807, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 462, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 0, 0, 118, 119, 120, 93, 71,
	0, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 64, 0, 84, 121, 100,
	79, 115, 77, 0, 0, 0, 0, 0, 85, 0,
	0, 104, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 0, 0, 0, 105, 114,
	123, 0, 0, 118, 119, 120, 93, 71, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 64, 0, 84, 121, 100, 79, 115,
	77, 0, 0, 0, 0, 0, 85, 0, 0, 104,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 99, 0, 0, 0,
	73, 0, 103, 97, 0, 0, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 0, 0, 105, 114, 123, 96,
	0, 118, 119, 120, 93, 71, 0, 0, 77, 0,
	0, 0, 0, 0, 85, 0, 0, 104, 92, 0,
	0, 64, 0, 84, 121, 100, 79, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 542,
	0, 0, 543, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 0, 0, 118,
	119, 120, 93, 71, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 386, 0, 0, 0, 64,
	77, 84, 121, 100, 79, 115, 85, 0, 0, 104,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	388, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 99, 0, 0, 0,
	73, 0, 103, 97, 0, 0, 98, 102, 86, 108,
	66, 112, 106, 90, 81, 82, 65, 0, 101, 76,
	80, 75, 95, 109, 110, 74, 122, 69, 117, 68,
	70, 116, 94, 107, 113, 91, 88, 67, 111, 89,
	87, 83, 78, 0, 0, 0, 105, 114, 123, 96,
	0, 118, 119, 120, 93, 71, 0, 0, 77, 0,
	0, 0, 0, 0, 85, 0, 0, 104, 92, 0,
	0, 64, 0, 84, 121, 100, 79, 115, 0, 0,
	0, 0, 0, 41, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 99, 0, 0, 0, 73, 0,
	103, 97, 0, 0, 98, 102, 86, 108, 66, 112,
	106, 90, 81, 82, 65, 0, 101, 76, 80, 75,
	95, 109, 110, 74, 122, 69, 117, 68, 70, 116,
	94, 107, 113, 91, 88, 67, 111, 89, 87, 83,
	78, 0, 0, 0, 105, 114, 123, 96, 0, 118,
	119, 120, 93, 71, 0, 0, 77, 0, 0, 0,
	0, 0, 85, 0, 0, 104, 92, 0, 0, 64,
	0, 84, 121, 100, 79, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 807, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 99, 0, 0, 0, 73, 0, 103, 97,
	0, 0, 98, 102, 86, 108, 66, 112, 106, 90,
	81, 82, 65, 0, 101, 76, 80, 75, 95, 109,
	110, 74, 122, 69, 117, 68, 70, 116, 94, 107,
	113, 91, 88, 67, 111, 89, 87, 83, 78, 0,
	0, 0, 105, 114, 123, 96, 0, 118, 119, 120,
	93, 71, 0, 0, 77, 0, 0, 0, 0, 0,
	85, 0, 0, 104, 92, 0, 0, 64, 0, 84,
	121, 100, 79, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 388, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	99, 0, 0, 0, 73, 0, 103, 97, 0, 0,
	98, 102, 86, 108, 66, 112, 106, 90, 81, 82,
	65, 0, 101, 76, 80, 75, 95, 109, 110, 74,
	122, 69, 117, 68, 70, 116, 94, 107, 113, 91,
	88, 67, 111, 89, 87, 83, 78, 0, 0, 0,
	105, 114, 123, 96, 0, 118, 119, 120, 93, 71,
	0, 364, 77, 0, 0, 0, 0, 0, 85, 0,
	0, 104, 92, 0, 0, 64, 0, 84, 121, 100,
	79, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 99, 0,
	0, 0, 73, 0, 103, 97, 0, 0, 98, 102,
	86, 108, 66, 112, 106, 90, 81, 82, 65, 0,
	101, 76, 80, 75, 95, 109, 110, 74, 122, 69,
	117, 68, 70, 116, 94, 107, 113, 91, 88, 67,
	111, 89, 87, 83, 78, 259, 0, 0, 105, 114,
	123, 0, 96, 118, 119, 120, 93, 71, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 64, 0, 84, 121, 100, 79, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 70, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	96, 0, 118, 119, 120, 93, 71, 0, 0, 77,
	0, 0, 0, 0, 0, 85, 0, 0, 104, 92,
	0, 0, 64, 0, 84, 121, 100, 79, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	136, 0, 0, 0, 0, 99, 0, 0, 0, 73,
	0, 103, 97, 0, 0, 98, 102, 86, 108, 66,
	112, 106, 90, 81, 82, 65, 0, 101, 76, 80,
	75, 95, 109, 110, 74, 122, 69, 117, 68, 70,
	116, 94, 107, 113, 91, 88, 67, 111, 89, 87,
	83, 78, 0, 0, 0, 105, 114, 123, 96, 0,
	118, 119, 120, 93, 71, 0, 0, 77, 0, 0,
	0, 0, 0, 85, 0, 0, 104, 92, 0, 0,
	64, 0, 84, 121, 100, 79, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 99, 0, 0, 0, 73, 0, 103,
	97, 0, 0, 98, 102, 86, 108, 66, 112, 106,
	90, 81, 82, 65, 0, 101, 76, 80, 75, 95,
	109, 110, 74, 122, 69, 117, 68, 70, 116, 94,
	107, 113, 91, 88, 67, 111, 89, 87, 83, 78,
	0, 0, 0, 105, 114, 123, 96, 0, 118, 119,
	120, 93, 71, 0, 0, 77, 0, 0, 0, 0,
	0, 85, 0, 0, 104, 92, 0, 0, 64, 0,
	84, 121, 100, 79, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 99, 0, 0, 0, 73, 0, 103, 97, 0,
	0, 98, 102, 86, 108, 66, 112, 106, 90, 81,
	82, 65, 0, 101, 76, 80, 75, 95, 109, 110,
	74, 122, 69, 117, 68, 70, 116, 94, 107, 113,
	91, 88, 67, 111, 89, 87, 83, 78, 0, 0,
	0, 105, 114, 123, 96, 0, 118, 119, 120, 93,
	71, 0, 0, 77, 0, 0, 0, 0, 0, 85,
	0, 0, 104, 92, 0, 0, 64, 0, 84, 121,
	100, 79, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 99,
	0, 0, 0, 73, 0, 103, 97, 0, 0, 98,
	102, 86, 108, 66, 112, 106, 90, 81, 82, 65,
	0, 101, 76, 80, 75, 95, 109, 110, 74, 122,
	69, 117, 68, 70, 116, 94, 107, 113, 91, 88,
	67, 111, 89, 87, 83, 78, 0, 0, 0, 105,
	114, 123, 96, 0, 118, 119, 120, 93, 71, 0,
	0, 77, 0, 0, 0, 0, 0, 85, 0, 0,
	104, 92, 0, 0, 64, 0, 84, 121, 100, 79,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 99, 0, 0,
	0, 73, 0, 103, 97, 0, 0, 98, 102, 86,
	108, 66, 112, 106, 90, 81, 82, 65, 0, 101,
	76, 80, 75, 95, 109, 110, 74, 122, 69, 117,
	68, 265, 116, 94, 107, 113, 91, 88, 67, 111,
	89, 87, 83, 78, 0, 0, 0, 105, 114, 123,
	0, 0, 118, 119, 120, 266, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 84, 121, 100, 79, 115,
}
var yyPact = [...]int{

	1210, -1000, -156, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 665, 682, -1000,
	-1000, -1000, -1000, -1000, 445, 1230, 15, 39, 21, 6703,
	37, 3425, 7177, -1000, -1000, -1000, -1000, -1000, 394, -1000,
	-1000, -1000, -1000, -1000, 659, 662, 476, 637, 543, -1000,
	16, 5912, 6545, 7335, -1000, 265, 33, 7177, -117, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36, 7177, -1000, 7177, 10, 260,
	10, 7177, -1000, 78, -1000, -1000, -1000, 7177, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 254, 616, 4362, 4362,
	665, -1000, 394, -1000, -1000, -1000, 610, -1000, -1000, 162,
	6386, 418, 490, -1000, -1000, -1000, 634, 5424, 5754, 7177,
	382, -1000, 2629, 338, -1000, 561, -1000, -1000, 123, -1000,
	71, -1000, -1000, 336, -1000, 1302, 258, 2231, 26, 7177,
	134, 7177, 2231, 22, 7177, 631, 492, 7177, -1000, 3226,
	-1000, -1000, -1000, -1000, -1000, 678, 104, 310, -1000, 4362,
	1430, 414, 414, -1000, -1000, 55, -1000, -1000, 4718, 4718,
	4718, 4718, 4718, 4718, 4718, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 414,
	63, -1000, 4175, 414, 414, 414, 414, 414, 414, 4362,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 412, -1000, 187, 659, 254, 543, 5582,
	518, -1000, -1000, 515, 7177, -1000, 7019, 5912, 5912, 5912,
	5912, 5912, -1000, 533, 531, -1000, 513, 506, 523, 7177,
	-1000, 330, 254, 5424, 79, -1000, 6228, -1000, -1000, 672,
	5912, 7177, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7019,
	-1000, 4362, 3027, 1833, 101, 179, -85, -1000, -1000, 416,
	-1000, 416, 416, 416, 416, -63, -63, -63, -63, -1000,
	-1000, -1000, -1000, -1000, 433, -1000, 416, 416, 416, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 424, 424, 424,
	421, 421, 419, -1000, -1000, -1000, 7177, -1000, 629, 70,
	-1000, 7177, -1000, -1000, 7177, 2231, -1000, -1000, -1000, -1000,
	532, 4362, 4362, 234, 4362, 4362, 110, 4718, 206, 121,
	4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718,
	4718, 4718, 4718, 4718, 4718, 220, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 255, -1000, 394, 459, 459, 88,
	88, 88, 88, 88, 88, 4896, 3612, 3027, 328, 128,
	4175, 3799, 3799, 4362, 4362, 3799, 638, 141, 128, 6861,
	-1000, 254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3799,
	3799, 3799, 3799, 4362, -1000, -1000, -1000, 616, -1000, 638,
	650, -1000, 555, 554, 3799, -1000, 491, 7019, 414, -1000,
	5246, -1000, 403, 490, 437, 488, 624, -1000, -1000, -1000,
	-1000, 530, -1000, 521, -1000, -1000, -1000, -1000, -1000, 254,
	-1000, 31, 29, 25, -1000, 665, 4362, 397, -1000, -1000,
	-1000, 128, -1000, 62, -1000, 402, 1634, -1000, -1000, -1000,
	-1000, -1000, -1000, 423, 614, 130, 244, -1000, -1000, 587,
	-1000, 140, -91, -1000, -1000, 207, -63, -63, -1000, -1000,
	83, 558, 83, 83, 83, 229, -1000, -1000, -1000, -1000,
	203, -1000, -1000, -1000, 202, -1000, 479, 6861, 2231, -1000,
	-1000, 129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -10, -1000, 2231, -1000, 546, 110,
	131, -1000, -1000, 223, -1000, -1000, 128, 128, 410, -1000,
	-1000, -1000, -1000, 206, 4718, 4718, 4718, 138, 410, 3978,
	627, 1055, 88, 77, 77, 87, 87, 87, 87, 87,
	528, 528, -1000, -1000, -1000, 254, -1000, -1000, -1000, 254,
	3799, 369, -1000, -1000, 5068, 59, 414, 4362, -1000, 279,
	279, 201, 289, 279, 3799, 174, -1000, 4362, 254, -1000,
	279, 254, 279, 279, -1000, -1000, 7177, -1000, -1000, -1000,
	-1000, 400, -1000, 619, 347, 345, -1000, -1000, 3986, 254,
	313, 53, 665, -1000, -1000, 4362, 422, -1000, 4362, -1000,
	-1000, -1000, -1000, 414, 414, 414, 659, 128, -1000, 2828,
	1833, -1000, 1833, 6861, -1000, 225, -1000, -1000, 449, 24,
	-1000, -1000, -1000, 314, 83, 83, -1000, 209, 135, -1000,
	-1000, -1000, 307, -1000, 366, 302, 7177, -1000, -1000, -1000,
	7177, -1000, -1000, -1000, -1000, -1000, 6861, -1000, -1000, -1000,
	-1000, -1000, -1000, 138, 410, 1491, -1000, 4718, 4718, -1000,
	-1000, 279, 3799, -1000, -1000, 6070, -1000, -1000, 2430, 3799,
	128, -1000, -1000, -5, 220, -5, -126, 342, 122, -1000,
	4362, 212, -1000, -1000, -1000, -1000, -1000, -1000, 672, 5912,
	608, -1000, 414, -1000, -1000, 417, 6861, 6861, 659, 128,
	6861, 128, 6861, 6861, 6861, -1000, -1000, 1634, -1000, 276,
	-1000, 416, -1000, -80, 677, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, 195, -1000,
	168, 2231, -1000, -1000, 617, -1000, 4718, 410, 410, -1000,
	-1000, -1000, -1000, 51, 254, 254, 416, 416, -1000, 416,
	421, -1000, 416, -25, 416, -28, 254, 254, 414, -123,
	-1000, 128, 4362, 670, 359, 676, -1000, 414, -1000, 394,
	32, -1000, -1000, 273, 253, -1000, 253, 253, -1000, 6861,
	-1000, 98, -1000, -103, -1000, 287, 269, -1000, 414, 410,
	2032, -1000, -1000, -1000, 38, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4718, 254, 221, 128, 668, 661, 7019,
	345, 254, 6861, -1000, -1000, 6861, -1000, -1000, -1000, 155,
	605, -1000, 591, -1000, -1000, -1000, -12, -1000, -1000, -1000,
	12, -1000, -1000, -1000, 4362, 4362, 338, -1000, -1000, -1000,
	-1000, 215, -1000, -1000, 242, -1000, 6861, 254, 23, -143,
	128, 311, -1000, -1000, -12, 552, -1000, 542, -131, -146,
	-1000, -16, -1000, 539, -1000, -18, -133, 414, -144, 4540,
	-148, 1445, 254, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 892, 23, 547, 891, 890, 887, 886, 885, 884,
	882, 873, 869, 868, 867, 866, 865, 864, 862, 861,
	73, 853, 849, 842, 42, 841, 53, 829, 827, 29,
	522, 30, 22, 579, 826, 18, 51, 61, 824, 41,
	815, 813, 812, 811, 50, 809, 808, 845, 807, 806,
	804, 10, 15, 803, 802, 799, 797, 44, 129, 793,
	792, 791, 790, 789, 788, 31, 2, 7, 14, 13,
	782, 268, 6, 781, 36, 780, 779, 778, 776, 20,
	774, 43, 773, 19, 38, 16, 27, 8, 772, 46,
	771, 538, 770, 123, 769, 768, 767, 764, 761, 760,
	87, 33, 188, 12, 28, 759, 758, 798, 34, 49,
	757, 756, 40, 25, 17, 21, 755, 754, 751, 749,
	748, 747, 743, 64, 741, 740, 738, 9, 35, 735,
	731, 55, 11, 729, 713, 711, 710, 45, 709, 37,
	706, 705, 702, 26, 32, 701, 5, 700, 699, 4,
	698, 692, 691, 0, 3, 690, 688, 114,
}
var yyR1 = [...]int{

	0, 151, 152, 152, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 5, 5, 6, 6, 23, 23,
	7, 8, 8, 155, 155, 42, 42, 9, 9, 88,
	88, 88, 106, 106, 10, 10, 10, 10, 15, 140,
	141, 141, 141, 137, 117, 117, 117, 120, 120, 118,
	118, 118, 118, 118, 118, 118, 119, 119, 119, 119,
	119, 121, 121, 121, 121, 121, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	136, 136, 123, 123, 131, 131, 132, 132, 132, 129,
	129, 130, 130, 133, 133, 133, 124, 124, 124, 124,
	124, 124, 126, 126, 134, 134, 127, 127, 127, 128,
	128, 135, 135, 135, 135, 135, 125, 125, 138, 145,
	145, 145, 145, 139, 139, 147, 147, 146, 142, 142,
	142, 143, 143, 143, 144, 144, 144, 11, 11, 11,
	11, 11, 150, 148, 148, 149, 149, 12, 13, 13,
	13, 14, 14, 16, 116, 116, 116, 17, 18, 18,
	19, 19, 19, 19, 19, 156, 20, 21, 21, 22,
	22, 22, 26, 26, 26, 24, 24, 25, 25, 31,
	31, 30, 30, 32, 32, 32, 32, 105, 105, 105,
	104, 104, 34, 34, 35, 35, 36, 36, 37, 37,
	37, 49, 38, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 111, 111, 110, 110, 110, 109, 109, 43,
	43, 43, 45, 44, 44, 44, 44, 46, 46, 48,
	48, 47, 47, 50, 50, 50, 50, 51, 51, 52,
	52, 33, 33, 33, 33, 33, 33, 33, 92, 92,
	54, 54, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 64, 64, 64, 64, 64, 64, 55, 55,
	55, 55, 55, 55, 55, 29, 29, 65, 65, 65,
	71, 66, 66, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 62, 62, 62, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 61, 61, 61, 61,
	61, 61, 61, 61, 157, 157, 63, 63, 63, 63,
	27, 27, 27, 27, 27, 114, 114, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	75, 75, 28, 28, 73, 73, 74, 76, 76, 72,
	72, 72, 57, 57, 57, 57, 57, 57, 57, 57,
	59, 59, 59, 77, 77, 78, 78, 79, 79, 80,
	80, 81, 82, 82, 82, 83, 83, 83, 83, 84,
	84, 84, 56, 56, 56, 56, 56, 56, 85, 85,
	85, 85, 86, 86, 67, 67, 69, 69, 68, 70,
	87, 87, 89, 90, 90, 93, 93, 94, 94, 91,
	91, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 96, 96, 96, 97, 97, 98, 98, 98,
	99, 99, 102, 102, 103, 103, 107, 107, 108, 108,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 153,
	154, 112, 113, 113, 113,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 6,
	7, 10, 1, 3, 1, 3, 6, 7, 1, 1,
	8, 7, 6, 1, 1, 1, 3, 5, 3, 1,
	2, 1, 1, 1, 2, 8, 4, 6, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 4,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 4, 2,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	4, 5, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 3, 2, 3, 1, 1, 1, 3, 2, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -151, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 110, 111, 113, 112, 130,
	114, 123, 47, 24, 124, 125, 128, 129, -153, 7,
	191, 51, -152, 204, -79, 14, -22, 5, -20, -156,
	-20, -20, -20, -20, -140, 51, -98, 117, 68, 115,
	121, -102, 54, -101, 197, 142, 136, 163, 155, 153,
	156, 181, 63, 126, 151, 147, 145, 26, 168, 202,
	146, 140, 141, 167, 199, 32, 134, 166, 162, 165,
	139, 161, 36, 180, 158, 148, 17, 129, 132, 122,
	201, 144, 133, 128, 35, 172, 138, 159, 135, 149,
	150, 164, 137, 160, 173, 203, 157, 154, 177, 178,
	179, 200, 152, 174, -91, 117, 119, 115, 115, 116,
	117, 115, -47, -107, 54, -101, 117, 115, -116, 54,
	-100, -101, 69, 21, 23, 170, 72, 104, 15, 73,
	103, 192, 110, 45, 184, 185, 182, 183, 175, 28,
	9, 24, 124, 20, 97, 112, 76, 77, 127, 22,
	125, 67, 18, 48, 10, 12, 13, 120, 119, 88,
	116, 43, 7, 106, 25, 85, 39, 27, 41, 86,
	16, 186, 187, 30, 196, 131, 99, 46, 33, 70,
	65, 49, 68, 14, 44, 87, 113, 191, 42, 6,
	195, 29, 123, 40, 115, 176, 75, 118, 66, 5,
	121, 8, 47, 50, 188, 189, 190, 31, 74, 11,
	-107, -112, -112, -112, -112, -112, -2, -83, 16, 15,
	-5, -3, -153, 6, 19, 20, -26, 37, 38, -21,
	-91, -35, -36, -37, -38, -49, -71, -153, -47, 10,
	-42, -47, -88, -87, 181, 156, 180, -89, -72, -102,
	-107, 54, -101, -141, -137, 54, 116, -47, 191, -94,
	120, 115, -47, -47, -93, 120, 54, -93, -47, 107,
	-47, -112, -154, 53, -84, 18, 30, -33, -53, 70,
	-58, 28, 22, -57, -54, -72, -70, -71, 104, 105,
	93, 94, 101, 71, 106, -62, -60, -61, -63, 56,
	55, 64, 57, 58, 59, 60, 65, 66, 67, -102,
	-107, -68, -153, 41, 42, 192, 193, 196, 194, 73,
	31, 182, 190, 189, 188, 186, 187, 184, 185, 120,
	183, 99, 191, -80, -81, -33, -79, -2, -20, 33,
	-24, 20, 62, -48, 25, -47, 29, 52, -43, -45,
	-44, -46, 39, 43, 45, 40, 41, 42, 46, -111,
	21, -35, -2, -153, -110, -109, 21, -107, 56, -47,
	-155, 52, 10, 50, -106, -103, 56, -102, -100, 52,
	29, 78, 107, 53, 52, -117, -120, -122, -121, -118,
	-119, 153, 154, 104, 157, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 126, 149, 150, 151, 152,
	136, 137, 138, 139, 140, 141, 142, 144, 145, 146,
	147, 148, 54, -113, -153, -103, 117, -47, 70, -47,
	-113, 118, -47, 22, 49, -47, -108, -107, -100, 8,
	88, 69, 68, 85, 52, 17, -33, -55, 88, 70,
	86, 87, 72, 90, 89, 100, 93, 94, 95, 96,
	97, 98, 99, 91, 92, 103, 78, 79, 80, 81,
	82, 83, 84, -92, -153, -71, -153, 108, 109, -58,
	-58, -58, -58, -58, -58, -58, -153, 107, -66, -33,
	-153, -153, -153, -153, -153, -153, -153, -75, -33, -153,
	-157, -153, -157, -157, -157, -157, -157, -157, -157, -153,
	-153, -153, -153, 52, -82, 23, 24, -83, -154, -26,
	-59, -102, 57, 60, -25, 40, -56, 29, 31, -2,
	-153, -47, -87, -36, -37, -37, -36, -37, 39, 39,
	39, 44, 39, 44, 39, -44, -107, -154, -154, -2,
	-50, 47, 119, 48, -109, -52, 11, -35, -47, -112,
	-89, -33, -103, -108, -100, -142, -143, -144, -103, 56,
	57, -137, -138, -145, 122, 121, -139, 116, 27, -133,
	65, 70, -129, 173, -123, 51, -123, -123, -123, -123,
	-127, 156, -127, -127, -127, 51, -123, -123, -123, -131,
	51, -131, -131, -132, 51, -132, -99, 50, -47, 22,
	-95, 113, -150, 111, 170, 156, 63, 28, 112, 14,
	192, 132, 203, 54, 133, -47, -47, -113, 35, -33,
	-33, -64, 65, 70, 66, 67, -33, -33, -58, -65,
	-68, -71, 61, 88, 86, 87, 72, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -114, 54, 56, 54, -57, -57, -102, -31,
	20, -30, -32, 95, -33, -107, -103, 52, -154, -30,
	-30, -33, -33, -30, -24, -73, -74, 74, -102, -154,
	-30, -31, -30, -30, -81, -84, -90, 18, 10, 31,
	31, -30, -86, 49, -87, -67, -69, -68, -153, -2,
	-85, -102, -52, -40, -39, 49, 50, -41, 49, -39,
	39, 39, -154, 116, 116, 116, -79, -33, -52, 107,
	52, -144, 78, 51, 27, -139, 54, 54, -124, 28,
	65, -130, 174, 57, -127, -127, -128, 103, 29, -128,
	-128, -128, -136, 56, 57, 57, 49, -102, -113, -112,
	-96, -97, 118, 21, 116, 27, 132, -113, 36, 65,
	66, 67, -65, -58, -58, -58, -29, 127, 69, -154,
	-154, -30, 52, -105, -104, 21, -102, 56, 107, -153,
	-33, -154, -154, 52, 50, 21, -154, -30, -76, -74,
	76, -33, -154, -154, -154, -154, -154, -47, -34, 10,
	26, -86, 52, -154, -154, -154, 52, 107, -79, -33,
	51, -33, -153, -153, -153, -83, -103, -143, -144, -147,
	-146, -102, 54, -126, 49, 56, 57, 58, 65, 182,
	53, -128, -128, 54, 54, 104, 53, 52, 52, 53,
	52, -47, -47, -112, -102, -29, 69, -58, -58, -154,
	-32, -104, 95, -108, -31, -115, 104, 153, 126, 151,
	147, 167, 158, 172, 149, 173, -114, -115, 197, -79,
	77, -33, 75, -52, -35, 27, -69, 31, -2, -153,
	-102, -102, -83, -85, -51, -102, -51, -51, 53, 52,
	-123, -134, 170, 8, 56, 57, 57, -113, 25, -58,
	107, -154, -154, -123, -123, -123, -132, -123, 141, -123,
	141, -154, -154, -153, -28, 195, -33, -77, 12, 8,
	-67, -2, 107, 53, -154, 52, -154, -154, -146, -135,
	122, 27, 121, 182, 53, 53, -153, 95, -127, 54,
	-58, -154, 56, -78, 13, 15, -87, -154, -102, -102,
	-125, 63, 27, 27, -148, -149, 132, -27, 88, 200,
	-33, -66, 56, -154, 52, -102, -154, 198, 46, 201,
	-149, 31, 36, 199, 202, 134, 36, 135, 200, -153,
	201, -58, 131, 202, -154, -154,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 397, 0, 175,
	175, 175, 175, 175, 0, 457, 439, 0, 0, 0,
	0, 0, 169, 621, 621, 621, 621, 621, 0, 28,
	29, 619, 1, 3, 405, 0, 0, 179, 182, 177,
	439, 0, 0, 0, 44, 0, 0, 612, 0, 437,
	458, 459, 462, 463, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 613, 614,
	615, 616, 617, 618, 0, 0, 440, 0, 435, 0,
	435, 0, 162, 241, 466, 467, 612, 0, 621, 164,
	165, 166, 470, 471, 472, 473, 474, 475, 476, 477,
	478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
	498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	168, 170, 171, 172, 173, 174, 22, 409, 0, 0,
	397, 24, 0, 175, 180, 181, 185, 183, 184, 176,
	0, 0, 204, 206, 207, 208, 222, 0, 224, 0,
	0, 35, 0, 38, -2, 564, -2, 430, 0, 379,
	0, -2, -2, 0, 50, 0, 0, 622, 0, 0,
	0, 0, 622, 0, 0, 0, 0, 0, 161, 0,
	163, 167, 23, 620, 18, 0, 0, 406, 251, 0,
	256, 258, 0, 293, 294, 295, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 320, 321, 322, 323, 382,
	383, 384, 385, 386, 387, 388, 389, 260, 261, 379,
	0, 429, 0, 0, 0, 0, 0, 0, 0, 370,
	0, 344, 344, 344, 344, 344, 344, 344, 344, 0,
	0, 0, 0, 398, 399, 402, 405, 22, 182, 0,
	187, 186, 178, 0, 0, 240, 0, 0, 0, 0,
	0, 0, 229, 0, 0, 232, 0, 0, 0, 0,
	223, 0, 22, 0, 243, 225, 0, 227, 228, 249,
	0, 0, 33, 34, 621, 42, 43, 464, 465, 0,
	40, 0, 0, 138, 0, 103, 99, 55, 56, 92,
	58, 92, 92, 92, 92, 116, 116, 116, 116, 84,
	85, 86, 87, 88, 0, 71, 92, 92, 92, 75,
	59, 60, 61, 62, 63, 64, 65, 94, 94, 94,
	96, 96, 460, 46, 623, 624, 0, 48, 0, 0,
	150, 0, 158, 436, 0, 622, 242, 468, 469, 410,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 281,
	282, 283, 284, 257, 0, 271, 0, 0, 0, 313,
	314, 315, 316, 317, 318, 0, 189, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 185, 0, 371, 0,
	336, 0, 337, 338, 339, 340, 341, 342, 343, 0,
	189, 0, 0, 0, 401, 403, 404, 409, 25, 185,
	0, 390, 0, 0, 0, 188, 422, 0, 0, -2,
	0, 239, 249, 205, 218, 220, 0, 215, 230, 231,
	233, 0, 235, 0, 237, 238, 209, 210, 290, 22,
	211, 0, 0, 0, 226, 397, 0, 249, 36, 37,
	431, 432, 380, 0, -2, 49, 139, 141, 144, 145,
	146, 51, 52, 0, 0, 0, 0, 133, 134, 106,
	104, 0, 101, 100, 57, 0, 116, 116, 78, 79,
	119, 0, 119, 119, 119, 0, 72, 73, 74, 66,
	0, 67, 68, 69, 0, 70, 0, 0, 622, 438,
	621, 452, 151, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 0, 157, 622, 160, 0, 252,
	253, 255, 272, 0, 274, 276, 407, 408, 262, 263,
	287, 288, 289, 0, 0, 0, 0, 285, 267, 0,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 312, 355, 356, 0, 310, 311, 319, 0,
	0, 190, 191, 193, 197, 0, 380, 0, 428, 0,
	0, 0, 0, 0, 0, 377, 374, 0, 0, 345,
	0, 0, 0, 0, 400, 19, 0, 433, 434, 391,
	392, 202, 26, 0, 422, 412, 424, 426, 0, 22,
	0, 418, 397, 212, 219, 0, 0, 213, 0, 214,
	234, 236, -2, 0, 0, 0, 405, 250, 32, 0,
	0, 142, 0, 0, 129, 0, 131, 132, 112, 0,
	105, 54, 102, 0, 119, 119, 80, 0, 0, 81,
	82, 83, 0, 90, 0, 0, 0, 461, 47, 147,
	0, 621, 453, 454, 455, 456, 0, 159, 411, 273,
	275, 277, 264, 285, 268, 0, 265, 0, 0, 259,
	324, 0, 0, 194, 198, 0, 200, 201, 0, 189,
	292, 327, 328, 0, 0, 0, 0, 397, 0, 375,
	0, 0, 335, 346, 347, 348, 349, 20, 249, 0,
	0, 27, 0, 427, -2, 0, 0, 0, 405, 216,
	0, 221, 0, 0, 0, 31, 381, 140, 143, 0,
	135, 92, 130, 114, 0, 107, 108, 109, 110, 111,
	93, 76, 77, 120, 117, 118, 89, 0, 0, 97,
	0, 622, 148, 149, 0, 266, 0, 286, 269, 325,
	192, 199, 195, 0, 0, 0, 92, 92, 360, 92,
	96, 363, 92, 365, 92, 368, 0, 0, 0, 372,
	334, 378, 0, 393, 203, 0, 425, 0, -2, 0,
	420, 419, 30, 0, 0, 247, 0, 0, 128, 0,
	137, 121, 115, 0, 91, 0, 0, 45, 0, 270,
	0, 326, 329, 357, 116, 361, 362, 364, 366, 367,
	369, 331, 330, 0, 0, 0, 376, 395, 0, 0,
	415, 22, 0, 217, 244, 0, 245, 246, 136, 126,
	0, 123, 125, 113, 95, 98, 0, 196, 358, 359,
	350, 333, 373, 21, 0, 0, 423, -2, 421, 248,
	53, 0, 122, 124, 0, 153, 0, 0, 0, 0,
	396, 394, 127, 152, 0, 0, 332, 0, 0, 0,
	154, 0, 351, 0, 354, 0, 352, 0, 0, 0,
	0, 0, 0, 353, 155, 156,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	51, 53, 95, 93, 52, 94, 107, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 204,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:275
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:280
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:281
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:304
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:312
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 20:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:316
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 21:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:333
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:339
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:350
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:361
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.str = InsertStr
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:377
		{
			yyVAL.str = ReplaceStr
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:383
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:389
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:398
		{
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:413
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:428
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:432
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:438
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:443
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:448
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:452
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:465
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:498
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:508
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:661
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:671
		{
			yyVAL.optVal = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:680
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:684
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:692
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:696
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:702
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:742
		{
			yyVAL.optVal = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:758
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:776
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:785
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:789
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:793
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:807
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.colKeyOpt = colKey
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:819
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:828
		{
			yyVAL.optVal = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:838
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:848
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:862
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:876
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:887
		{
			yyVAL.str = ""
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.str = yyDollar[1].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:907
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:931
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:935
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:940
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:945
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:949
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:955
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:965
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 155:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:971
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:975
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:987
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:995
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1000
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1029
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1038
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.statement = &OtherRead{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.statement = &OtherRead{}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.statement = &OtherRead{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1086
		{
			setAllowComments(yylex, true)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.bytes2 = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = UnionStr
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = UnionAllStr
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = UnionDistinctStr
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = SQLCacheStr
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = DistinctStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = StraightJoinHint
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.selectExprs = nil
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.joinCondition = &JoinCondition{On: yyDollar[2].expr}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.joinCondition = &JoinCondition{Using: yyDollar[3].columns}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.joinCondition = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.joinCondition = nil
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.joinCondition = &JoinCondition{On: yyDollar[2].expr}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.empty = struct{}{}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.empty = struct{}{}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = JoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = JoinStr
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = JoinStr
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = StraightJoinStr
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.str = LeftJoinStr
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = LeftJoinStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = RightJoinStr
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = RightJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.str = NaturalJoinStr
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1361
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.indexHints = nil
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.expr = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = IsNullStr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = IsNotNullStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = IsTrueStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = IsNotTrueStr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.str = IsFalseStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.str = IsNotFalseStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = EqualStr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = LessThanStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = GreaterThanStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.str = LessEqualStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.str = GreaterEqualStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.str = NotEqualStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1710
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1732
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 331:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 332:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 333:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = BooleanModeStr
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.str = QueryExpansionStr
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = nil
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = string("")
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.expr = nil
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = &NullVal{}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.exprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.orderBy = nil
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.str = AscScr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.str = AscScr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.str = DescScr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.limit = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.str = ForUpdateStr
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = ShareModeStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2186
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.updateExprs = nil
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.byt = 0
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.byt = 1
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.str = IgnoreStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			decNesting(yylex)
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2557
		{
			forceEOF(yylex)
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2562
		{
			forceEOF(yylex)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			forceEOF(yylex)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const BOOL = 57501
const CHARACTER = 57502
const VARBINARY = 57503
const NCHAR = 57504
const TEXT = 57505
const TINYTEXT = 57506
const MEDIUMTEXT = 57507
const LONGTEXT = 57508
const BLOB = 57509
const TINYBLOB = 57510
const MEDIUMBLOB = 57511
const LONGBLOB = 57512
const JSON = 57513
const ENUM = 57514
const GEOMETRY = 57515
const POINT = 57516
const LINESTRING = 57517
const POLYGON = 57518
const GEOMETRYCOLLECTION = 57519
const MULTIPOINT = 57520
const MULTILINESTRING = 57521
const MULTIPOLYGON = 57522
const NULLX = 57523
const AUTO_INCREMENT = 57524
const APPROXNUM = 57525
const SIGNED = 57526
const UNSIGNED = 57527
const ZEROFILL = 57528
const DATABASES = 57529
const TABLES = 57530
const VITESS_KEYSPACES = 57531
const VITESS_SHARDS = 57532
const VITESS_TABLETS = 57533
const VSCHEMA_TABLES = 57534
const NAMES = 57535
const CHARSET = 57536
const GLOBAL = 57537
const SESSION = 57538
const ISOLATION = 57539
const LEVEL = 57540
const READ = 57541
const WRITE = 57542
const ONLY = 57543
const REPEATABLE = 57544
const COMMITTED = 57545
const UNCOMMITTED = 57546
const SERIALIZABLE = 57547
const CURRENT_TIMESTAMP = 57548
const DATABASE = 57549
const CURRENT_DATE = 57550
const CURRENT_TIME = 57551
const LOCALTIME = 57552
const LOCALTIMESTAMP = 57553
const UTC_DATE = 57554
const UTC_TIME = 57555
const UTC_TIMESTAMP = 57556
const REPLACE = 57557
const CONVERT = 57558
const CAST = 57559
const SUBSTR = 57560
const SUBSTRING = 57561
const GROUP_CONCAT = 57562
const SEPARATOR = 57563
const MATCH = 57564
const AGAINST = 57565
const BOOLEAN = 57566
const LANGUAGE = 57567
const WITH = 57568
const QUERY = 57569
const EXPANSION = 57570
const UNUSED = 57571

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 237,
	109, 575,
	-2, 571,
	-1, 238,
	109, 576,
	-2, 572,
	-1, 307,
	80, 734,
	-2, 58,
	-1, 308,
	80, 695,
	-2, 59,
	-1, 313,
	80, 679,
	-2, 537,
	-1, 315,
	80, 716,
	-2, 539,
	-1, 573,
	52, 41,
	54, 41,
	-2, 43,
	-1, 703,
	109, 578,
	-2, 574,
	-1, 904,
	5, 28,
	-2, 383,
	-1, 929,
	5, 27,
	-2, 512,
	-1, 1146,
	5, 28,
	-2, 513,
	-1, 1190,
	5, 27,
	-2, 515,
	-1, 1252,
	5, 28,
	-2, 516,
}

const yyPrivate = 57344

const yyLast = 10846

var yyAct = [...]int{

	268, 47, 849, 644, 1243, 765, 242, 520, 1201, 1056,
	519, 3, 783, 1084, 267, 1057, 990, 1053, 565, 805,
	843, 1152, 932, 567, 312, 804, 210, 766, 948, 728,
	896, 993, 216, 738, 1030, 981, 53, 583, 937, 815,
	735, 754, 705, 453, 459, 839, 582, 762, 47, 409,
	306, 569, 240, 465, 294, 473, 221, 554, 215, 801,
	225, 303, 298, 878, 301, 534, 52, 1272, 1262, 1270,
	211, 212, 213, 214, 866, 1250, 1268, 850, 1261, 293,
	292, 1048, 1140, 413, 956, 1249, 1210, 955, 865, 1078,
	957, 434, 796, 229, 1079, 1080, 1031, 181, 177, 178,
	179, 829, 1225, 486, 485, 495, 496, 488, 489, 490,
	491, 492, 493, 494, 487, 870, 57, 497, 797, 798,
	451, 584, 972, 585, 864, 822, 1033, 1164, 1090, 1091,
	1092, 422, 1179, 830, 1129, 1127, 1095, 1093, 209, 445,
	446, 59, 60, 61, 62, 63, 1269, 1267, 1244, 1014,
	763, 195, 423, 1202, 436, 416, 438, 174, 1035, 175,
	1039, 175, 1034, 1208, 1032, 817, 1204, 652, 643, 1037,
	784, 786, 861, 858, 859, 205, 857, 947, 1036, 238,
	946, 435, 437, 945, 411, 419, 244, 189, 176, 509,
	510, 1038, 1040, 410, 440, 440, 440, 440, 1230, 440,
	440, 868, 871, 180, 1149, 817, 440, 1017, 912, 1011,
	76, 890, 677, 477, 186, 1013, 429, 186, 817, 802,
	487, 497, 47, 497, 674, 190, 472, 1235, 1109, 935,
	586, 192, 462, 1203, 471, 470, 863, 506, 198, 194,
	508, 186, 186, 76, 785, 1099, 966, 186, 297, 76,
	1050, 472, 737, 830, 755, 1226, 461, 816, 862, 433,
	1209, 1207, 814, 812, 647, 196, 813, 518, 200, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 1248, 533,
	535, 535, 535, 535, 535, 535, 535, 535, 543, 544,
	545, 546, 867, 1094, 909, 1100, 191, 816, 970, 566,
	712, 467, 1001, 470, 755, 869, 919, 1012, 1238, 1010,
	816, 425, 426, 427, 710, 711, 709, 680, 681, 472,
	1254, 1170, 441, 193, 199, 201, 202, 203, 204, 1169,
	999, 207, 206, 490, 491, 492, 493, 494, 487, 463,
	985, 497, 471, 470, 984, 676, 536, 537, 538, 539,
	540, 541, 542, 823, 186, 415, 186, 50, 173, 472,
	973, 1001, 186, 471, 470, 574, 580, 708, 1255, 186,
	471, 470, 1236, 76, 76, 76, 76, 1052, 76, 76,
	472, 675, 887, 888, 889, 76, 309, 472, 908, 999,
	907, 695, 697, 698, 1000, 1186, 696, 471, 470, 1005,
	1002, 995, 996, 1003, 998, 997, 471, 470, 1167, 982,
	819, 76, 1233, 440, 472, 820, 1004, 1087, 729, 291,
	730, 440, 1007, 472, 1258, 452, 507, 417, 418, 1194,
	1241, 452, 440, 440, 440, 440, 440, 440, 440, 440,
	257, 256, 259, 260, 261, 262, 440, 440, 1086, 258,
	263, 1194, 452, 1000, 661, 1194, 1195, 1214, 1005, 1002,
	995, 996, 1003, 998, 997, 967, 556, 559, 560, 561,
	557, 186, 558, 562, 266, 1004, 938, 939, 186, 186,
	186, 994, 1161, 1160, 76, 297, 1075, 452, 1148, 452,
	76, 1025, 958, 659, 682, 706, 1106, 1105, 1102, 1103,
	1102, 1101, 703, 902, 452, 74, 852, 551, 452, 47,
	731, 486, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 522, 684, 497, 740, 452, 1020, 658,
	699, 657, 648, 742, 747, 750, 646, 641, 311, 231,
	756, 701, 593, 592, 414, 577, 23, 431, 424, 410,
	21, 1213, 298, 298, 298, 298, 298, 767, 1054, 1096,
	933, 933, 732, 733, 54, 740, 790, 566, 576, 787,
	927, 902, 550, 928, 1144, 551, 298, 742, 1108, 1104,
	959, 934, 934, 683, 752, 759, 578, 795, 576, 914,
	911, 23, 76, 50, 791, 235, 551, 902, 186, 186,
	76, 579, 186, 902, 678, 186, 220, 769, 770, 186,
	772, 76, 76, 76, 76, 76, 76, 76, 76, 23,
	780, 789, 788, 551, 933, 76, 76, 309, 794, 186,
	793, 768, 913, 910, 771, 222, 50, 1174, 50, 824,
	739, 741, 844, 809, 76, 1069, 1189, 440, 186, 440,
	962, 938, 939, 645, 76, 840, 757, 440, 835, 834,
	65, 845, 847, 1089, 690, 1054, 50, 707, 311, 311,
	311, 311, 986, 311, 311, 452, 941, 655, 449, 944,
	311, 943, 50, 841, 842, 774, 782, 495, 496, 488,
	489, 490, 491, 492, 493, 494, 487, 76, 773, 497,
	777, 1266, 703, 891, 1260, 778, 475, 1016, 831, 832,
	833, 486, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 879, 706, 497, 880, 779, 186, 560,
	561, 186, 186, 186, 186, 186, 226, 227, 297, 297,
	297, 297, 297, 186, 775, 875, 186, 466, 1265, 776,
	186, 885, 892, 297, 884, 186, 186, 456, 460, 76,
	977, 464, 297, 930, 931, 591, 454, 432, 969, 1240,
	1239, 1187, 76, 929, 478, 1142, 743, 744, 455, 311,
	963, 1175, 751, 854, 654, 588, 556, 559, 560, 561,
	557, 298, 558, 562, 564, 918, 758, 466, 760, 761,
	702, 223, 224, 883, 217, 1219, 218, 1218, 521, 951,
	942, 882, 950, 54, 952, 1177, 934, 532, 468, 1227,
	1165, 673, 56, 186, 960, 58, 76, 575, 76, 51,
	1, 851, 186, 953, 989, 186, 76, 860, 1242, 1200,
	1083, 511, 512, 513, 514, 515, 516, 517, 811, 440,
	803, 408, 899, 964, 965, 64, 900, 1234, 810, 1206,
	1163, 818, 971, 904, 905, 906, 821, 1088, 1237, 968,
	598, 983, 915, 596, 440, 597, 595, 921, 600, 922,
	923, 924, 925, 992, 599, 594, 197, 311, 304, 976,
	1006, 978, 979, 980, 563, 311, 707, 587, 846, 469,
	66, 1009, 309, 1008, 856, 505, 311, 311, 311, 311,
	311, 311, 311, 311, 881, 806, 954, 310, 1061, 679,
	311, 311, 458, 1217, 1024, 1176, 917, 974, 975, 1059,
	531, 47, 1023, 1055, 767, 753, 1029, 703, 1041, 686,
	767, 1060, 886, 1058, 1042, 243, 1071, 1072, 1073, 475,
	694, 255, 311, 1049, 252, 825, 826, 827, 828, 254,
	1063, 1065, 253, 685, 926, 479, 241, 76, 233, 1064,
	186, 836, 837, 838, 1077, 296, 547, 297, 555, 553,
	552, 1082, 940, 936, 76, 1081, 295, 1076, 1019, 901,
	1139, 1224, 734, 689, 25, 55, 228, 19, 18, 17,
	702, 20, 748, 748, 16, 916, 15, 14, 748, 29,
	692, 693, 13, 12, 11, 10, 9, 8, 7, 6,
	1110, 298, 1028, 5, 4, 748, 219, 76, 76, 22,
	76, 2, 0, 1112, 1097, 1098, 1115, 0, 0, 1118,
	0, 0, 1117, 0, 0, 0, 0, 0, 0, 1138,
	0, 0, 0, 76, 311, 0, 1125, 0, 0, 0,
	0, 186, 521, 0, 0, 745, 746, 311, 0, 1074,
	76, 0, 0, 1143, 0, 704, 0, 0, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 1154, 1155, 1156, 0, 1151, 1157, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 440, 1159,
	76, 76, 488, 489, 490, 491, 492, 493, 494, 487,
	0, 311, 497, 311, 0, 1172, 800, 806, 0, 1173,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 76, 76, 0, 1119, 1059, 0, 0, 1191, 0,
	0, 1121, 311, 0, 0, 0, 0, 0, 1190, 1058,
	1188, 0, 1130, 1131, 1132, 0, 186, 1135, 0, 0,
	1199, 0, 0, 991, 76, 1205, 1216, 0, 0, 0,
	1145, 1146, 1147, 0, 1150, 0, 0, 76, 186, 0,
	1059, 0, 47, 0, 76, 0, 1215, 76, 0, 1228,
	186, 0, 1229, 1166, 1058, 1168, 0, 297, 0, 1232,
	0, 0, 0, 1022, 0, 876, 877, 0, 460, 439,
	0, 0, 0, 0, 0, 1178, 1211, 1246, 1212, 0,
	0, 0, 0, 1251, 767, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 0, 0, 0, 76,
	0, 76, 76, 76, 186, 76, 0, 0, 0, 1263,
	1185, 76, 949, 1264, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 457, 1196, 1197, 1198, 0, 311,
	903, 0, 806, 0, 806, 0, 0, 76, 76, 76,
	0, 0, 0, 0, 0, 920, 0, 0, 0, 0,
	0, 1220, 1221, 1222, 1223, 0, 893, 894, 895, 184,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 987, 311, 0, 311, 0, 0, 76, 76,
	0, 0, 0, 0, 232, 0, 184, 184, 0, 0,
	1022, 76, 184, 0, 0, 1247, 0, 0, 311, 0,
	1252, 0, 0, 0, 76, 0, 183, 0, 0, 0,
	0, 0, 0, 1257, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 1122, 1123, 311, 1124, 412,
	0, 1126, 0, 1128, 1275, 1276, 0, 0, 0, 0,
	0, 0, 748, 0, 806, 1062, 949, 0, 748, 0,
	76, 0, 0, 0, 442, 443, 444, 0, 447, 448,
	0, 0, 0, 0, 76, 450, 0, 0, 0, 0,
	0, 991, 806, 0, 311, 0, 311, 1085, 0, 1162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 184, 0, 0, 0, 0, 0, 184, 0, 1051,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 1111,
	0, 0, 0, 0, 1066, 1067, 0, 0, 1068, 0,
	0, 1070, 1113, 0, 0, 0, 0, 0, 0, 1116,
	1136, 452, 311, 1026, 1027, 0, 420, 0, 421, 0,
	0, 0, 0, 0, 428, 0, 1043, 1044, 0, 1046,
	1047, 430, 486, 485, 495, 496, 488, 489, 490, 491,
	492, 493, 494, 487, 0, 0, 497, 486, 485, 495,
	496, 488, 489, 490, 491, 492, 493, 494, 487, 0,
	0, 497, 0, 0, 1153, 0, 1153, 1153, 1153, 0,
	1158, 0, 0, 0, 0, 0, 311, 0, 897, 0,
	0, 0, 0, 1133, 452, 0, 184, 0, 0, 0,
	0, 0, 0, 184, 571, 184, 0, 0, 0, 0,
	0, 0, 311, 311, 311, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 521,
	486, 485, 495, 496, 488, 489, 490, 491, 492, 493,
	494, 487, 0, 549, 497, 0, 0, 0, 0, 0,
	0, 1120, 573, 1192, 1193, 0, 0, 0, 0, 0,
	0, 0, 642, 0, 1137, 0, 1085, 0, 0, 0,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 1153,
	0, 662, 663, 664, 665, 666, 667, 668, 669, 0,
	0, 0, 481, 0, 484, 670, 671, 0, 0, 1231,
	498, 499, 500, 501, 502, 503, 504, 0, 482, 483,
	480, 486, 485, 495, 496, 488, 489, 490, 491, 492,
	493, 494, 487, 184, 184, 497, 0, 184, 0, 0,
	184, 0, 748, 0, 660, 1253, 486, 485, 495, 496,
	488, 489, 490, 491, 492, 493, 494, 487, 0, 1259,
	497, 0, 0, 0, 184, 0, 0, 0, 0, 1180,
	1181, 0, 1182, 1183, 1184, 0, 0, 0, 0, 0,
	649, 650, 0, 184, 653, 0, 0, 656, 0, 0,
	0, 0, 660, 23, 24, 48, 26, 27, 1245, 521,
	485, 495, 496, 488, 489, 490, 491, 492, 493, 494,
	487, 672, 42, 497, 0, 0, 0, 28, 486, 485,
	495, 496, 488, 489, 490, 491, 492, 493, 494, 487,
	691, 0, 497, 232, 0, 0, 37, 0, 232, 232,
	50, 0, 749, 749, 232, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 232, 232,
	232, 232, 0, 184, 0, 749, 184, 184, 184, 184,
	184, 0, 0, 1134, 0, 0, 0, 0, 781, 0,
	0, 184, 0, 0, 0, 571, 0, 0, 0, 0,
	184, 184, 0, 0, 0, 0, 0, 0, 0, 30,
	31, 33, 32, 35, 0, 0, 853, 1273, 855, 0,
	764, 0, 0, 0, 0, 0, 874, 0, 0, 0,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 792, 38,
	39, 0, 40, 41, 0, 486, 485, 495, 496, 488,
	489, 490, 491, 492, 493, 494, 487, 898, 184, 497,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	184, 0, 0, 0, 0, 0, 0, 486, 485, 495,
	496, 488, 489, 490, 491, 492, 493, 494, 487, 0,
	0, 497, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 232, 848, 0, 0, 0, 603,
	0, 0, 0, 0, 872, 0, 0, 873, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 630, 631, 632, 633, 634, 635, 232, 636, 637,
	638, 639, 640, 617, 618, 619, 620, 601, 602, 0,
	0, 604, 0, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 621, 622, 623, 624, 625, 626, 627,
	628, 0, 0, 0, 0, 184, 0, 0, 988, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 1018, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	387, 0, 359, 399, 337, 351, 407, 352, 353, 380,
	323, 367, 125, 349, 0, 340, 318, 346, 319, 338,
	361, 93, 364, 336, 389, 370, 107, 405, 109, 375,
	0, 142, 118, 0, 0, 363, 391, 365, 385, 358,
	381, 328, 374, 400, 350, 378, 401, 0, 0, 0,
	75, 0, 807, 808, 0, 0, 0, 0, 0, 86,
	0, 377, 396, 348, 379, 317, 376, 0, 321, 324,
	406, 394, 343, 344, 961, 0, 0, 0, 0, 0,
	0, 362, 366, 382, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 373, 0, 0, 0, 325,
	322, 0, 360, 0, 0, 0, 327, 0, 342, 383,
	0, 316, 386, 392, 357, 187, 395, 355, 354, 398,
	131, 0, 749, 145, 98, 97, 106, 390, 339, 347,
	89, 345, 137, 127, 157, 372, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 320, 0, 143, 159, 172, 335, 393,
	165, 166, 167, 168, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 331, 334, 329,
	330, 368, 369, 402, 403, 404, 384, 326, 0, 332,
	333, 0, 388, 371, 77, 0, 108, 169, 133, 95,
	160, 397, 387, 0, 359, 399, 337, 351, 407, 352,
	353, 380, 323, 367, 125, 349, 0, 340, 318, 346,
	319, 338, 361, 93, 364, 336, 389, 370, 107, 405,
	109, 375, 0, 142, 118, 0, 0, 363, 391, 365,
	385, 358, 381, 328, 374, 400, 350, 378, 401, 0,
	0, 0, 75, 0, 807, 808, 0, 0, 0, 0,
	0, 86, 0, 377, 396, 348, 379, 317, 376, 0,
	321, 324, 406, 394, 343, 344, 0, 0, 0, 0,
	0, 0, 0, 362, 366, 382, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 373, 0, 0,
	0, 325, 322, 0, 360, 0, 0, 0, 327, 0,
	342, 383, 0, 316, 386, 392, 357, 187, 395, 355,
	354, 398, 131, 0, 0, 145, 98, 97, 106, 390,
	339, 347, 89, 345, 137, 127, 157, 372, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 320, 0, 143, 159, 172,
	335, 393, 165, 166, 167, 168, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 331,
	334, 329, 330, 368, 369, 402, 403, 404, 384, 326,
	0, 332, 333, 0, 388, 371, 77, 0, 108, 169,
	133, 95, 160, 397, 387, 0, 359, 399, 337, 351,
	407, 352, 353, 380, 323, 367, 125, 349, 0, 340,
	318, 346, 319, 338, 361, 93, 364, 336, 389, 370,
	107, 405, 109, 375, 0, 142, 118, 0, 0, 363,
	391, 365, 385, 358, 381, 328, 374, 400, 350, 378,
	401, 50, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 377, 396, 348, 379, 317,
	376, 0, 321, 324, 406, 394, 343, 344, 0, 0,
	0, 0, 0, 0, 0, 362, 366, 382, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 373,
	0, 0, 0, 325, 322, 0, 360, 0, 0, 0,
	327, 0, 342, 383, 0, 316, 386, 392, 357, 187,
	395, 355, 354, 398, 131, 0, 0, 145, 98, 97,
	106, 390, 339, 347, 89, 345, 137, 127, 157, 372,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 320, 0, 143,
	159, 172, 335, 393, 165, 166, 167, 168, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 331, 334, 329, 330, 368, 369, 402, 403, 404,
	384, 326, 0, 332, 333, 0, 388, 371, 77, 0,
	108, 169, 133, 95, 160, 397, 387, 0, 359, 399,
	337, 351, 407, 352, 353, 380, 323, 367, 125, 349,
	0, 340, 318, 346, 319, 338, 361, 93, 364, 336,
	389, 370, 107, 405, 109, 375, 0, 142, 118, 0,
	0, 363, 391, 365, 385, 358, 381, 328, 374, 400,
	350, 378, 401, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 377, 396, 348,
	379, 317, 376, 0, 321, 324, 406, 394, 343, 344,
	0, 0, 0, 0, 0, 0, 0, 362, 366, 382,
	356, 0, 0, 0, 0, 0, 0, 1021, 0, 341,
	0, 373, 0, 0, 0, 325, 322, 0, 360, 0,
	0, 0, 327, 0, 342, 383, 0, 316, 386, 392,
	357, 187, 395, 355, 354, 398, 131, 0, 0, 145,
	98, 97, 106, 390, 339, 347, 89, 345, 137, 127,
	157, 372, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 320,
	0, 143, 159, 172, 335, 393, 165, 166, 167, 168,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 331, 334, 329, 330, 368, 369, 402,
	403, 404, 384, 326, 0, 332, 333, 0, 388, 371,
	77, 0, 108, 169, 133, 95, 160, 397, 387, 0,
	359, 399, 337, 351, 407, 352, 353, 380, 323, 367,
	125, 349, 0, 340, 318, 346, 319, 338, 361, 93,
	364, 336, 389, 370, 107, 405, 109, 375, 0, 142,
	118, 0, 0, 363, 391, 365, 385, 358, 381, 328,
	374, 400, 350, 378, 401, 0, 0, 0, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 377,
	396, 348, 379, 317, 376, 0, 321, 324, 406, 394,
	343, 344, 0, 0, 0, 0, 0, 0, 0, 362,
	366, 382, 356, 0, 0, 0, 0, 0, 0, 700,
	0, 341, 0, 373, 0, 0, 0, 325, 322, 0,
	360, 0, 0, 0, 327, 0, 342, 383, 0, 316,
	386, 392, 357, 187, 395, 355, 354, 398, 131, 0,
	0, 145, 98, 97, 106, 390, 339, 347, 89, 345,
	137, 127, 157, 372, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 320, 0, 143, 159, 172, 335, 393, 165, 166,
	167, 168, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 331, 334, 329, 330, 368,
	369, 402, 403, 404, 384, 326, 0, 332, 333, 0,
	388, 371, 77, 0, 108, 169, 133, 95, 160, 397,
	387, 0, 359, 399, 337, 351, 407, 352, 353, 380,
	323, 367, 125, 349, 0, 340, 318, 346, 319, 338,
	361, 93, 364, 336, 389, 370, 107, 405, 109, 375,
	0, 142, 118, 0, 0, 363, 391, 365, 385, 358,
	381, 328, 374, 400, 350, 378, 401, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 377, 396, 348, 379, 317, 376, 0, 321, 324,
	406, 394, 343, 344, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 382, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 373, 0, 0, 0, 325,
	322, 0, 360, 0, 0, 0, 327, 0, 342, 383,
	0, 316, 386, 392, 357, 187, 395, 355, 354, 398,
	131, 0, 0, 145, 98, 97, 106, 390, 339, 347,
	89, 345, 137, 127, 157, 372, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 320, 0, 143, 159, 172, 335, 393,
	165, 166, 167, 168, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 331, 334, 329,
	330, 368, 369, 402, 403, 404, 384, 326, 0, 332,
	333, 0, 388, 371, 77, 0, 108, 169, 133, 95,
	160, 397, 387, 0, 359, 399, 337, 351, 407, 352,
	353, 380, 323, 367, 125, 349, 0, 340, 318, 346,
	319, 338, 361, 93, 364, 336, 389, 370, 107, 405,
	109, 375, 0, 142, 118, 0, 0, 363, 391, 365,
	385, 358, 381, 328, 374, 400, 350, 378, 401, 0,
	0, 0, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 377, 396, 348, 379, 317, 376, 0,
	321, 324, 406, 394, 343, 344, 0, 0, 0, 0,
	0, 0, 0, 362, 366, 382, 356, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 0, 373, 0, 0,
	0, 325, 322, 0, 360, 0, 0, 0, 327, 0,
	342, 383, 0, 316, 386, 392, 357, 187, 395, 355,
	354, 398, 131, 0, 0, 145, 98, 97, 106, 390,
	339, 347, 89, 345, 137, 127, 157, 372, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 320, 0, 143, 159, 172,
	335, 393, 165, 166, 167, 168, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 331,
	334, 329, 330, 368, 369, 402, 403, 404, 384, 326,
	0, 332, 333, 0, 388, 371, 77, 0, 108, 169,
	133, 95, 160, 397, 387, 0, 359, 399, 337, 351,
	407, 352, 353, 380, 323, 367, 125, 349, 0, 340,
	318, 346, 319, 338, 361, 93, 364, 336, 389, 370,
	107, 405, 109, 375, 0, 142, 118, 0, 0, 363,
	391, 365, 385, 358, 381, 328, 374, 400, 350, 378,
	401, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 377, 396, 348, 379, 317,
	376, 0, 321, 324, 406, 394, 343, 344, 0, 0,
	0, 0, 0, 0, 0, 362, 366, 382, 356, 0,
	0, 0, 0, 0, 0, 0, 0, 341, 0, 373,
	0, 0, 0, 325, 322, 0, 360, 0, 0, 0,
	327, 0, 342, 383, 0, 316, 386, 392, 357, 187,
	395, 355, 354, 398, 131, 0, 0, 145, 98, 97,
	106, 390, 339, 347, 89, 345, 137, 127, 157, 372,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 314, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 320, 0, 143,
	159, 172, 335, 393, 165, 166, 167, 168, 315, 313,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 331, 334, 329, 330, 368, 369, 402, 403, 404,
	384, 326, 0, 332, 333, 0, 388, 371, 77, 0,
	108, 169, 133, 95, 160, 397, 387, 0, 359, 399,
	337, 351, 407, 352, 353, 380, 323, 367, 125, 349,
	0, 340, 318, 346, 319, 338, 361, 93, 364, 336,
	389, 370, 107, 405, 109, 375, 0, 142, 118, 0,
	0, 363, 391, 365, 385, 358, 381, 328, 374, 400,
	350, 378, 401, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 377, 396, 348,
	379, 317, 376, 0, 321, 324, 406, 394, 343, 344,
	0, 0, 0, 0, 0, 0, 0, 362, 366, 382,
	356, 0, 0, 0, 0, 0, 0, 0, 0, 341,
	0, 373, 0, 0, 0, 325, 322, 0, 360, 0,
	0, 0, 327, 0, 342, 383, 0, 316, 386, 392,
	357, 187, 395, 355, 354, 398, 131, 0, 0, 145,
	98, 97, 106, 390, 339, 347, 89, 345, 137, 127,
	157, 372, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 320,
	0, 143, 159, 172, 335, 393, 165, 166, 167, 168,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 331, 334, 329, 330, 368, 369, 402,
	403, 404, 384, 326, 0, 332, 333, 0, 388, 371,
	77, 0, 108, 169, 133, 95, 160, 397, 387, 0,
	359, 399, 337, 351, 407, 352, 353, 380, 323, 367,
	125, 349, 0, 340, 318, 346, 319, 338, 361, 93,
	364, 336, 389, 370, 107, 405, 109, 375, 0, 142,
	118, 0, 0, 363, 391, 365, 385, 358, 381, 328,
	374, 400, 350, 378, 401, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 377,
	396, 348, 379, 317, 376, 0, 321, 324, 406, 394,
	343, 344, 0, 0, 0, 0, 0, 0, 0, 362,
	366, 382, 356, 0, 0, 0, 0, 0, 0, 0,
	0, 341, 0, 373, 0, 0, 0, 325, 322, 0,
	360, 0, 0, 0, 327, 0, 342, 383, 0, 316,
	386, 392, 357, 187, 395, 355, 354, 398, 131, 0,
	0, 145, 98, 97, 106, 390, 339, 347, 89, 345,
	137, 127, 157, 372, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 581, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 314,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 320, 0, 143, 159, 172, 335, 393, 165, 166,
	167, 168, 315, 313, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 331, 334, 329, 330, 368,
	369, 402, 403, 404, 384, 326, 0, 332, 333, 0,
	388, 371, 77, 0, 108, 169, 133, 95, 160, 397,
	387, 0, 359, 399, 337, 351, 407, 352, 353, 380,
	323, 367, 125, 349, 0, 340, 318, 346, 319, 338,
	361, 93, 364, 336, 389, 370, 107, 405, 109, 375,
	0, 142, 118, 0, 0, 363, 391, 365, 385, 358,
	381, 328, 374, 400, 350, 378, 401, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 377, 396, 348, 379, 317, 376, 0, 321, 324,
	406, 394, 343, 344, 0, 0, 0, 0, 0, 0,
	0, 362, 366, 382, 356, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 0, 373, 0, 0, 0, 325,
	322, 0, 360, 0, 0, 0, 327, 0, 342, 383,
	0, 316, 386, 392, 357, 187, 395, 355, 354, 398,
	131, 0, 0, 145, 98, 97, 106, 390, 339, 347,
	89, 345, 137, 127, 157, 372, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 305, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 314, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 320, 0, 143, 159, 172, 335, 393,
	165, 166, 167, 168, 315, 313, 308, 307, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 331, 334, 329,
	330, 368, 369, 402, 403, 404, 384, 326, 0, 332,
	333, 0, 388, 371, 77, 0, 108, 169, 133, 95,
	160, 125, 0, 0, 736, 0, 239, 0, 0, 0,
	93, 0, 236, 0, 0, 107, 278, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 269, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 237,
	257, 256, 259, 260, 261, 262, 0, 0, 86, 258,
	263, 264, 265, 0, 0, 234, 250, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	230, 0, 0, 0, 289, 0, 249, 0, 0, 245,
	246, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 287, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 172, 0, 0, 165,
	166, 167, 168, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 279, 288, 285, 286,
	283, 284, 282, 281, 280, 290, 271, 272, 273, 274,
	276, 0, 275, 77, 0, 108, 169, 133, 95, 160,
	125, 0, 0, 0, 0, 239, 0, 0, 0, 93,
	0, 236, 0, 0, 107, 278, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 452, 237, 257,
	256, 259, 260, 261, 262, 0, 0, 86, 258, 263,
	264, 265, 0, 0, 234, 250, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 0,
	0, 0, 0, 289, 0, 249, 0, 0, 245, 246,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 287, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 279, 288, 285, 286, 283,
	284, 282, 281, 280, 290, 271, 272, 273, 274, 276,
	0, 275, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 239, 0, 0, 0, 93, 0,
	236, 0, 0, 107, 278, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 237, 257, 256,
	259, 260, 261, 262, 0, 0, 86, 258, 263, 264,
	265, 0, 0, 234, 250, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 230, 0,
	0, 0, 289, 0, 249, 0, 0, 245, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 287, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 279, 288, 285, 286, 283, 284,
	282, 281, 280, 290, 271, 272, 273, 274, 276, 0,
	275, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 0, 239, 0, 0, 0, 93, 0, 236,
	0, 0, 107, 278, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 269, 270, 0, 0, 0, 0, 0,
	0, 799, 0, 50, 0, 0, 237, 257, 256, 259,
	260, 261, 262, 0, 0, 86, 258, 263, 264, 265,
	0, 0, 234, 250, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 0, 0, 0,
	0, 289, 0, 249, 0, 0, 245, 246, 251, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 287, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 279, 288, 285, 286, 283, 284, 282,
	281, 280, 290, 271, 272, 273, 274, 276, 23, 275,
	77, 0, 108, 169, 133, 95, 160, 0, 0, 0,
	125, 0, 0, 0, 0, 239, 0, 0, 0, 93,
	0, 236, 0, 0, 107, 278, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 269, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 237, 257,
	256, 259, 260, 261, 262, 0, 0, 86, 258, 263,
	264, 265, 0, 0, 234, 250, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 0,
	0, 0, 0, 289, 0, 249, 0, 0, 245, 246,
	251, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 287, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 172, 0, 0, 165, 166,
	167, 168, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 279, 288, 285, 286, 283,
	284, 282, 281, 280, 290, 271, 272, 273, 274, 276,
	0, 275, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 239, 0, 0, 0, 93, 0,
	236, 0, 0, 107, 278, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 237, 257, 256,
	259, 260, 261, 262, 0, 0, 86, 258, 263, 264,
	265, 0, 0, 234, 250, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 289, 0, 249, 0, 0, 245, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 287, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 279, 288, 285, 286, 283, 284,
	282, 281, 280, 290, 271, 272, 273, 274, 276, 125,
	275, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 278, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 237, 257, 256,
	259, 260, 261, 262, 0, 0, 86, 258, 263, 264,
	265, 0, 0, 0, 250, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 289, 0, 249, 0, 0, 245, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 287, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 1274, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 279, 288, 285, 286, 283, 284,
	282, 281, 280, 290, 271, 272, 273, 274, 276, 125,
	275, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 278, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 269, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 237, 257, 256,
	259, 260, 261, 262, 0, 0, 86, 258, 263, 264,
	265, 0, 0, 0, 250, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 0, 0,
	0, 0, 289, 0, 249, 0, 0, 245, 246, 251,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 287, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 279, 288, 285, 286, 283, 284,
	282, 281, 280, 290, 271, 272, 273, 274, 276, 125,
	275, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 486, 485, 495, 496, 488, 489, 490, 491,
	492, 493, 494, 487, 0, 0, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 172, 0, 0, 165, 166, 167,
	168, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 474, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 476, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	471, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	0, 67, 0, 0, 0, 73, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 69, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 570, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 572, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 687, 0,
	0, 688, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 590, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 589, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	570, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 572, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	568, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 572, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 476, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 77, 0,
	108, 169, 133, 95, 160, 548, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	300, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160,
}
var yyPact = [...]int{

	1747, -1000, -181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 798, 817, -1000, -1000, -1000, -1000, -1000, -1000, 607,
	7280, 36, 69, -21, 9939, 68, 119, 10599, -1000, -16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 585, -1000, -1000,
	-1000, -1000, -1000, 787, 790, 629, 781, 697, -1000, 5481,
	38, 8838, 9719, 4794, -1000, 493, 64, 10599, -149, 10159,
	31, 31, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66, 10599, -1000, 10599, 28, 492, 28,
	28, 28, 10599, -1000, 107, -1000, -1000, -1000, -1000, 10599,
	491, 737, 35, 2858, 2858, 2858, 2858, -11, 2858, 2858,
	627, -1000, -1000, -1000, -1000, 2858, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 376, 747, 6171, 6171, 798,
	-1000, 585, -1000, -1000, -1000, 726, -1000, -1000, 237, 807,
	-1000, 7060, 104, -1000, 6171, 1590, 583, -1000, -1000, 583,
	-1000, -1000, 79, -1000, -1000, 6611, 6611, 6611, 6611, 6611,
	6611, 6611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 583, -1000, 5942, 583,
	583, 583, 583, 583, 583, 583, 583, 6171, 583, 583,
	583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
	583, 9499, 542, 745, -1000, -1000, -1000, 772, 7949, 8618,
	10599, 534, -1000, 547, 4552, -93, -1000, -1000, -1000, 150,
	8389, -1000, -1000, -1000, 735, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 488, -1000,
	1863, 481, 2858, 47, 601, 480, 192, 476, 10599, 10599,
	2858, 45, 10599, 761, 626, 10599, 475, 473, -1000, 4310,
	-1000, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, -1000,
	-1000, -1000, -1000, -1000, -1000, 2858, 2858, -1000, -1000, 10599,
	-1000, -1000, -1000, -1000, 812, 134, 327, 103, 550, -1000,
	293, 787, 376, 697, 8169, 622, -1000, -1000, 10599, -1000,
	6171, 6171, 324, -1000, 9278, -1000, -1000, 3342, 139, 6611,
	304, 226, 6611, 6611, 6611, 6611, 6611, 6611, 6611, 6611,
	6611, 6611, 6611, 6611, 6611, 6611, 6611, 362, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 454, -1000, 585, 383,
	383, 116, 116, 116, 116, 116, 116, 6831, 5023, 376,
	472, 164, 5942, 5481, 5481, 6171, 6171, 10379, 10379, 5481,
	776, 178, 164, 10379, -1000, 376, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5481, 5481, 5481, 5481, 8, 10599, -1000,
	10379, 8838, 8838, 8838, 8838, 8838, -1000, 657, 644, -1000,
	703, 659, 686, 10599, -1000, 453, 7949, 121, 583, -1000,
	9058, -1000, -1000, 8, 514, 8838, 10599, -1000, -1000, 4068,
	547, -93, 533, -1000, -123, -99, 5710, 114, -1000, -1000,
	-1000, -1000, 2616, 137, 343, -77, -1000, -1000, -1000, 586,
	-1000, 586, 586, 586, 586, -44, -44, -44, -44, -1000,
	-1000, -1000, -1000, -1000, 606, 605, -1000, 586, 586, 586,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 602, 602, 602, 589,
	589, 610, -1000, 10599, -166, 450, 2858, 760, 2858, -1000,
	59, -1000, 10599, -1000, -1000, 10599, 2858, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 708, 6171, 6171, 3826, 6171, -1000,
	-1000, -1000, 747, -1000, 776, 792, -1000, 721, 718, 5481,
	-1000, -1000, 139, 232, -1000, -1000, 315, -1000, -1000, -1000,
	-1000, 102, 583, -1000, 1687, -1000, -1000, -1000, -1000, 304,
	6611, 6611, 6611, 1421, 1687, 1846, 594, 1668, 116, 236,
	236, 118, 118, 118, 118, 118, 1017, 1017, -1000, -1000,
	-1000, 376, -1000, -1000, -1000, 376, 5481, 543, -1000, -1000,
	6171, -1000, 376, 449, 449, 336, 272, 579, -1000, 99,
	578, 449, 5481, 228, -1000, 6171, 376, -1000, 449, 376,
	449, 449, 540, 583, -1000, 570, -1000, 149, 745, 600,
	625, 425, -1000, -1000, -1000, -1000, 640, -1000, 638, -1000,
	-1000, -1000, -1000, -1000, 63, 60, 57, 10159, -1000, 804,
	8838, 569, -1000, -1000, 533, -93, -132, -1000, -1000, -1000,
	164, -1000, 436, 526, 2374, -1000, -1000, -1000, -1000, -1000,
	-1000, 597, 752, 177, 190, 409, -1000, -1000, 739, -1000,
	231, -81, -1000, -1000, 301, -44, -44, -1000, -1000, 114,
	730, 114, 114, 114, 351, 351, -1000, -1000, -1000, -1000,
	285, -1000, -1000, -1000, 281, -1000, 621, 10159, 2858, -1000,
	3584, -1000, -1000, -1000, -1000, -1000, -1000, 333, 274, 187,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7, -1000, 2858, -1000, 669, 164, 164, 98, -1000,
	-1000, 10599, -1000, -1000, -1000, -1000, 517, -1000, -1000, -1000,
	3100, 5481, -1000, 1421, 1687, 420, -1000, 6611, 6611, -1000,
	-1000, 449, 5481, 164, -1000, -1000, -1000, -10, 362, -10,
	6611, 6611, 3826, 6611, 6611, -159, 549, 171, -1000, 6171,
	300, -1000, -1000, -1000, -1000, -1000, 614, 10379, 583, -1000,
	7729, 10159, 798, 10379, 6171, 6171, -1000, -1000, 6171, 592,
	-1000, 6171, -1000, -1000, -1000, 583, 583, 583, 432, -1000,
	798, 569, -1000, -1000, -1000, -127, -126, -1000, -1000, 2616,
	-1000, 2616, 10159, -1000, 392, 361, -1000, -1000, 612, 70,
	-1000, -1000, -1000, 504, 114, 114, -1000, 189, -1000, -1000,
	-1000, 446, -1000, 444, 525, 442, 10599, -1000, -1000, 524,
	-1000, 148, -1000, -1000, 10159, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10159, 10599, -1000,
	-1000, -1000, -1000, -1000, 10159, -1000, -1000, 3584, -1000, 804,
	8838, -1000, -1000, 376, -1000, 6611, 1687, 1687, -1000, -1000,
	376, 586, 586, -1000, 586, 589, -1000, 586, -27, 586,
	-28, 376, 376, 1509, 1814, -1000, 1436, 1615, 583, -156,
	-1000, 164, 6171, -1000, 748, 507, 520, -1000, -1000, 5252,
	376, 434, 95, 432, 787, -1000, 164, 164, 164, 10159,
	164, 10159, 10159, 10159, 7509, 10159, 787, -1000, -1000, -1000,
	-1000, 2374, -1000, 428, -1000, 586, -1000, -1000, -72, 811,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -44, 350, -44, 270, -1000, 262, 2858, 3584, 2616,
	-1000, 584, -1000, -1000, -1000, -1000, 755, 802, 521, -1000,
	1687, -1000, -1000, 76, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6611, 6611, -1000, 6611, 6611, 6611, 376,
	337, 164, 743, -1000, 583, -1000, -1000, 613, 10159, 10159,
	-1000, -1000, 401, -1000, 397, 397, 397, 121, -1000, -1000,
	101, 10159, -1000, 135, -1000, -137, 114, -1000, 114, 496,
	402, -1000, -1000, -1000, 10159, 583, 793, 789, -1000, -1000,
	620, 620, 620, 620, 12, -1000, -1000, 810, -1000, 583,
	-1000, 585, 89, -1000, 10159, -1000, -1000, -1000, -1000, -1000,
	101, -1000, 356, 147, 314, -1000, 243, 742, -1000, 741,
	-1000, -1000, -1000, -1000, -1000, 375, 6, -1000, 6171, 6171,
	-1000, -1000, -1000, -1000, 376, 37, -169, 10379, 520, 376,
	10159, -1000, -1000, -1000, 261, -1000, -1000, -1000, 310, -1000,
	-1000, 601, 370, -1000, 10159, 164, 511, -1000, 666, -164,
	-177, 506, -1000, -1000, -1000, -1000, -166, -1000, 6, 715,
	-1000, 663, -1000, -1000, -1000, 3, -167, 1, -175, 583,
	-178, 6391, -1000, 620, 376, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1031, 10, 550, 1029, 1026, 1024, 1023, 1019, 1018,
	1017, 1016, 1015, 1014, 1013, 1012, 1009, 1007, 1006, 1004,
	1001, 999, 998, 997, 116, 996, 995, 994, 53, 993,
	60, 991, 990, 30, 252, 40, 33, 539, 988, 18,
	79, 54, 986, 38, 983, 982, 64, 980, 57, 979,
	978, 1321, 976, 975, 12, 22, 968, 966, 965, 964,
	52, 595, 963, 962, 959, 954, 951, 950, 42, 7,
	9, 14, 15, 945, 186, 6, 935, 41, 930, 926,
	925, 923, 36, 922, 44, 919, 32, 43, 918, 21,
	47, 28, 17, 5, 61, 46, 917, 27, 50, 37,
	916, 914, 358, 905, 131, 355, 904, 903, 901, 900,
	24, 179, 474, 322, 55, 899, 898, 897, 1274, 63,
	51, 23, 894, 26, 1219, 29, 888, 886, 34, 885,
	884, 878, 876, 875, 873, 870, 353, 869, 868, 867,
	101, 59, 866, 862, 45, 20, 861, 860, 859, 35,
	49, 858, 39, 857, 855, 851, 850, 25, 19, 848,
	13, 840, 8, 839, 838, 4, 837, 16, 834, 2,
	831, 3, 31, 830, 829, 0, 120, 827, 825, 65,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 177,
	177, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 126, 126,
	11, 11, 11, 11, 11, 11, 11, 171, 171, 170,
	169, 169, 168, 168, 167, 16, 154, 155, 155, 155,
	150, 129, 129, 129, 129, 132, 132, 130, 130, 130,
	130, 130, 130, 130, 131, 131, 131, 131, 131, 133,
	133, 133, 133, 133, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 135, 135, 135, 149, 149, 136,
	136, 144, 144, 145, 145, 145, 142, 142, 143, 143,
	146, 146, 146, 137, 137, 137, 137, 137, 137, 137,
	139, 139, 147, 147, 140, 140, 140, 141, 141, 148,
	148, 148, 148, 148, 138, 138, 151, 151, 163, 163,
	162, 162, 162, 153, 153, 159, 159, 159, 159, 159,
	152, 152, 161, 161, 160, 156, 156, 156, 157, 157,
	157, 158, 158, 158, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 166, 164, 164, 165, 165, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 127, 127, 127, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 178, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 115, 115, 115,
	114, 114, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 122, 122, 121,
	121, 121, 120, 120, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 103, 103, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 179, 179, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 125, 125, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	117, 117, 117, 101, 101, 104, 104, 105, 105, 102,
	102, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 107, 107, 107, 108, 108, 109, 109, 109, 116,
	116, 112, 112, 113, 113, 118, 118, 119, 119, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 175,
	176, 123, 124, 124, 124,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 3, 4, 2, 4, 2, 2, 2, 2,
	3, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -175, 8, 232,
	53, -174, 247, -82, 15, -26, 5, -24, -178, -24,
	-24, -24, -24, -24, -154, 53, -109, 121, 70, 148,
	224, 118, 119, 125, -112, 56, -111, 240, 152, 163,
	157, 184, 176, 174, 177, 211, 65, 155, 220, 136,
	172, 168, 166, 27, 189, 245, 167, 131, 130, 190,
	194, 212, 161, 162, 214, 188, 132, 32, 242, 34,
	144, 215, 192, 187, 183, 186, 160, 182, 38, 196,
	195, 197, 210, 179, 169, 18, 218, 139, 142, 191,
	193, 126, 146, 244, 216, 165, 143, 138, 219, 156,
	213, 222, 37, 201, 159, 129, 153, 150, 180, 145,
	170, 171, 185, 158, 181, 154, 147, 140, 221, 202,
	246, 178, 175, 151, 149, 206, 207, 208, 209, 243,
	217, 173, 203, -102, 121, 123, 119, 119, 120, 121,
	224, 118, 119, -51, -118, 56, -111, 121, 148, 119,
	106, 177, 112, 204, 120, 32, 146, -127, 119, 205,
	149, 206, 207, 208, 209, 56, 213, 212, -118, 154,
	-123, -123, -123, -123, -123, -2, -86, 17, 16, -5,
	-3, -175, 6, 20, 21, -30, 39, 40, -25, -36,
	97, -37, -118, -56, 72, -61, 29, 56, -111, 23,
	-60, -57, -75, -73, -74, 106, 107, 95, 96, 103,
	73, 108, -65, -63, -64, -66, 58, 57, 66, 59,
	60, 61, 62, 67, 68, 69, -112, -71, -175, 43,
	44, 233, 234, 235, 236, 239, 237, 75, 33, 223,
	231, 230, 229, 227, 228, 225, 226, 124, 224, 101,
	232, -102, -39, -40, -41, -42, -53, -74, -175, -51,
	11, -46, -51, -94, -126, 154, -98, 213, 212, -113,
	-96, -112, -110, 211, 177, 210, 117, 71, 22, 24,
	199, 74, 106, 16, 75, 105, 233, 112, 47, 225,
	226, 223, 235, 236, 224, 204, 29, 10, 25, 134,
	21, 99, 114, 78, 79, 137, 23, 135, 69, 19,
	50, 11, 13, 14, 124, 123, 90, 120, 45, 8,
	108, 26, 87, 41, 28, 43, 88, 17, 227, 228,
	31, 239, 141, 101, 48, 35, 72, 67, 51, 70,
	15, 46, 89, 115, 232, 44, 118, 6, 238, 30,
	133, 42, 119, 205, 77, 122, 68, 5, 125, 9,
	49, 52, 229, 230, 231, 33, 76, 12, -155, -150,
	56, 120, -51, 232, -112, -105, 124, -105, -105, 119,
	-51, -51, -104, 124, 56, -104, -104, -104, -51, 109,
	-51, 56, 30, 224, 56, 146, 119, 147, 121, -124,
	-175, -113, -124, -124, -124, 150, 151, -124, -124, 51,
	-124, -176, 55, -87, 19, 31, -37, -118, -83, -84,
	-37, -82, -2, -24, 35, -28, 21, 64, 11, -115,
	71, 70, 87, -114, 22, -112, 58, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 80, 81,
	82, 83, 84, 85, 86, -103, -175, -74, -175, 110,
	111, -61, -61, -61, -61, -61, -61, -61, -175, -2,
	-69, -37, -175, -175, -175, -175, -175, -175, -175, -175,
	-175, -78, -37, -175, -179, -175, -179, -179, -179, -179,
	-179, -179, -179, -175, -175, -175, -175, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -122, 22, -39, -175, -121, 142, -120,
	22, -118, 58, -51, -46, -177, 54, 11, 52, 54,
	-94, 154, -95, -99, 214, 216, 80, -117, -112, 58,
	29, 30, 55, 54, -129, -132, -134, -133, -135, -130,
	-131, 174, 175, 106, 178, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 30, 136, 170, 171, 172,
	173, 190, 191, 192, 193, 194, 195, 196, 197, 157,
	158, 159, 160, 161, 162, 163, 165, 166, 167, 168,
	169, 56, -124, 121, -171, 52, 56, 72, 56, -51,
	-51, -124, 122, -51, 23, 51, -51, 56, 56, -119,
	-118, -110, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -51, 9, 90, 54, 18, 109, 54, -85,
	24, 25, -86, -176, -30, -62, -112, 59, 62, -29,
	42, -51, -37, -37, -67, 67, 72, 68, 69, -114,
	97, -119, -113, -110, -61, -68, -71, -74, 63, 90,
	88, 89, 74, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -125, 56,
	58, 56, -60, -60, -112, -35, 21, -34, -36, -176,
	54, -176, -2, -34, -34, -37, -37, -75, -112, -118,
	-75, -34, -28, -76, -77, 76, -75, -176, -34, -35,
	-34, -34, -90, 142, -51, -93, -97, -75, -40, -41,
	-41, -40, -41, 41, 41, 41, 46, 41, 46, 41,
	-48, -118, -176, -54, 49, 123, 50, -175, -120, -90,
	52, -39, -51, -98, -95, 54, 215, 217, 218, 51,
	-37, -141, 105, -156, -157, -158, -113, 58, 59, -150,
	-151, -159, 126, 129, 125, -152, 120, 28, -146, 67,
	72, -142, 202, -136, 53, -136, -136, -136, -136, -140,
	177, -140, -140, -140, 53, 53, -136, -136, -136, -144,
	53, -144, -144, -145, 53, -145, -116, 52, -51, -169,
	243, -170, 56, -124, 23, -124, -106, 117, 114, 115,
	-166, 113, 199, 177, 65, 29, 15, 233, 142, 246,
	56, 143, -51, -51, -124, 37, -37, -37, -119, -84,
	-87, -101, 19, 11, 33, 33, -34, 67, 68, 69,
	109, -175, -68, -61, -61, -61, -33, 137, 71, -176,
	-176, -34, 54, -37, -176, -176, -176, 54, 52, 22,
	54, 11, 109, 54, 11, -176, -34, -79, -77, 78,
	-37, -176, -176, -176, -176, -176, -59, 30, 33, -2,
	-175, -175, -55, 54, 12, 80, -44, -43, 51, 52,
	-45, 51, -43, 41, 41, 120, 120, 120, -91, -112,
	-55, -39, -55, -99, -100, 219, 216, 222, 56, 54,
	-158, 80, 53, 28, -152, -152, 56, 56, -137, 29,
	67, -143, 203, 59, -140, -140, -141, 30, -141, -141,
	-141, -149, 58, -149, 59, 59, 51, -112, -124, -168,
	-167, -113, -123, -172, 148, 127, 128, 131, 130, 56,
	120, 28, 126, 129, 142, 125, -172, 148, -107, -108,
	122, 22, 120, 28, 142, -124, 38, 109, -51, -38,
	11, 97, -113, -35, -33, 71, -61, -61, -176, -36,
	-128, 106, 174, 136, 172, 168, 188, 179, 201, 170,
	202, -125, -128, -61, -61, -113, -61, -61, 240, -82,
	79, -37, 77, -92, 51, -93, -70, -72, -71, -175,
	-2, -88, -112, -91, -82, -97, -37, -37, -37, 53,
	-37, -175, -175, -175, -176, 54, -82, -55, 216, 220,
	221, -157, -158, -161, -160, -112, 56, 56, -139, 51,
	58, 59, 60, 67, 223, 66, 55, -141, -141, 56,
	106, 55, 54, 55, 54, 55, 54, -51, 54, 80,
	-123, -112, -123, -112, -51, -123, -112, -55, -39, -176,
	-61, -176, -136, -136, -136, -145, -136, 162, -136, 162,
	-176, -176, -176, 54, 19, -176, 54, 19, -175, -32,
	238, -37, 27, -92, 54, -176, -176, -176, 54, 109,
	-176, -86, -89, -112, -89, -89, -89, -121, -112, -86,
	55, 54, -136, -147, 199, 9, -140, 58, -140, 59,
	59, -124, -167, -158, 53, 26, -80, 13, -140, 56,
	-61, -61, -61, -61, -61, -176, 58, 28, -72, 33,
	-2, -175, -112, -112, 54, 55, -176, -176, -176, -54,
	-163, -162, 52, 132, 65, -160, -148, 126, 28, 125,
	223, -141, -141, 55, 55, -89, -175, -81, 14, 16,
	-176, -176, -176, -176, -31, 90, 243, 9, -70, -2,
	109, -112, -162, 56, -153, 80, 58, -138, 65, 28,
	28, 55, -164, -165, 142, -37, -69, -176, 241, 48,
	244, -93, -176, -112, 59, 58, -171, -176, 54, -112,
	38, 242, 245, -169, -165, 33, 38, 144, 243, 145,
	244, -175, 245, -61, 141, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 496, 0, 265, 265, 265, 265, 265, 265, 0,
	566, 549, 0, 0, 0, 0, 251, 255, 256, 0,
	258, 259, 771, 771, 771, 771, 771, 0, 33, 34,
	769, 1, 3, 504, 0, 0, 269, 272, 267, 0,
	549, 0, 0, 0, 60, 0, 0, 758, 0, 759,
	547, 547, 547, 567, 568, 571, 572, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 0, 0, 550, 0, 545, 0, 545,
	545, 545, 0, 226, 336, 575, 576, 758, 759, 0,
	0, 0, 0, 772, 772, 772, 772, 0, 772, 772,
	244, 246, 247, 248, 249, 772, 252, 253, 254, 257,
	260, 261, 262, 263, 264, 27, 508, 0, 0, 496,
	29, 0, 265, 270, 271, 275, 273, 274, 266, 0,
	283, 287, 0, 344, 0, 349, 351, -2, -2, 0,
	386, 387, 388, 389, 390, 0, 0, 0, 0, 0,
	0, 0, 413, 414, 415, 416, 481, 482, 483, 484,
	485, 486, 487, 488, 353, 354, 478, 528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 469, 0, 443,
	443, 443, 443, 443, 443, 443, 443, 0, 0, 0,
	0, 0, 0, 294, 296, 297, 298, 317, 0, 319,
	0, 0, 41, 45, 0, 749, 532, -2, -2, 0,
	0, 573, 574, -2, 678, -2, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 0, 77,
	0, 0, 772, 0, 67, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	227, 772, 772, 772, 772, 772, 772, 772, 772, 236,
	773, 774, 237, 238, 239, 772, 772, 241, 242, 0,
	250, 28, 770, 22, 0, 0, 505, 0, 497, 498,
	501, 504, 27, 272, 0, 277, 276, 268, 0, 284,
	0, 0, 0, 288, 0, 290, 291, 0, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 371, 372,
	373, 374, 375, 376, 377, 350, 0, 364, 0, 0,
	0, 406, 407, 408, 409, 410, 411, 0, 279, 27,
	0, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	275, 0, 470, 0, 435, 0, 436, 437, 438, 439,
	440, 441, 442, 0, 279, 0, 0, 43, 0, 335,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 327,
	0, 0, 0, 0, 318, 0, 0, 338, 722, 320,
	0, 322, 323, -2, 0, 0, 0, 39, 40, 0,
	46, 749, 48, 49, 0, 0, 0, 157, 540, 541,
	542, 538, 185, 0, 140, 136, 82, 83, 84, 129,
	86, 129, 129, 129, 129, 154, 154, 154, 154, 112,
	113, 114, 115, 116, 0, 0, 99, 129, 129, 129,
	103, 119, 120, 121, 122, 123, 124, 125, 126, 87,
	88, 89, 90, 91, 92, 93, 131, 131, 131, 133,
	133, 569, 62, 0, 70, 0, 772, 0, 772, 75,
	0, 201, 0, 220, 546, 0, 772, 223, 224, 337,
	577, 578, 228, 229, 230, 231, 232, 233, 234, 235,
	240, 243, 245, 509, 0, 0, 0, 0, 0, 500,
	502, 503, 508, 30, 275, 0, 489, 0, 0, 0,
	278, 25, 345, 346, 348, 365, 0, 367, 369, 289,
	285, 0, 479, -2, 355, 356, 380, 381, 382, 0,
	0, 0, 0, 378, 360, 0, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 405, 454,
	455, 0, 403, 404, 412, 0, 0, 280, 281, 383,
	0, 527, 27, 0, 0, 0, 0, 0, 478, 0,
	0, 0, 0, 476, 473, 0, 0, 444, 0, 0,
	0, 0, 0, 0, 334, 342, 529, 0, 295, 313,
	315, 0, 310, 325, 326, 328, 0, 330, 0, 332,
	333, 299, 300, 301, 0, 0, 0, 0, 321, 342,
	0, 342, 42, 533, 47, 0, 0, 52, 53, 534,
	535, 536, 0, 76, 186, 188, 191, 192, 193, 78,
	79, 0, 0, 0, 0, 0, 180, 181, 143, 141,
	0, 138, 137, 85, 0, 154, 154, 106, 107, 157,
	0, 157, 157, 157, 0, 0, 100, 101, 102, 94,
	0, 95, 96, 97, 0, 98, 0, 0, 772, 64,
	0, 68, 69, 65, 548, 66, 771, 0, 0, 561,
	202, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 0, 219, 772, 222, 0, 506, 507, 0, 499,
	23, 0, 543, 544, 490, 491, 292, 366, 368, 370,
	0, 279, 357, 378, 361, 0, 358, 0, 0, 352,
	417, 0, 0, 385, -2, 420, 421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 0, 474, 0,
	0, 434, 445, 446, 447, 448, 521, 0, 0, -2,
	0, 0, 496, 0, 0, 0, 307, 314, 0, 0,
	308, 0, 309, 329, 331, 0, 0, 0, 0, 305,
	496, 342, 38, 50, 51, 0, 0, 57, 158, 0,
	189, 0, 0, 175, 0, 0, 178, 179, 150, 0,
	142, 81, 139, 0, 157, 157, 108, 0, 109, 110,
	111, 0, 127, 0, 0, 0, 0, 570, 63, 71,
	72, 0, 194, 771, 0, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 771, 0, 0, 771,
	562, 563, 564, 565, 0, 221, 510, 0, 24, 342,
	0, 286, 480, 0, 359, 0, 379, 362, 418, 282,
	0, 129, 129, 459, 129, 133, 462, 129, 464, 129,
	467, 0, 0, 0, 0, 479, 0, 0, 0, 471,
	433, 477, 0, 31, 0, 521, 511, 523, 525, 0,
	27, 0, 517, 0, 504, 530, 343, 531, 311, 0,
	316, 0, 0, 0, 319, 0, 504, 37, 54, 55,
	56, 187, 190, 0, 182, 129, 176, 177, 152, 0,
	144, 145, 146, 147, 148, 149, 130, 104, 105, 155,
	156, 154, 0, 154, 0, 134, 0, 772, 0, 0,
	195, 0, 196, 198, 199, 200, 0, 492, 293, 419,
	363, 422, 456, 154, 460, 461, 463, 465, 466, 468,
	424, 423, 425, 0, 0, 428, 0, 0, 0, 0,
	0, 475, 0, 32, 0, 526, -2, 0, 0, 0,
	44, 35, 0, 303, 0, 0, 0, 338, 306, 36,
	167, 0, 184, 159, 153, 0, 157, 128, 157, 0,
	0, 61, 73, 74, 0, 0, 494, 0, 457, 458,
	0, 0, 0, 0, 449, 432, 472, 0, 524, 0,
	-2, 0, 519, 518, 0, 312, 339, 340, 341, 302,
	166, 168, 0, 173, 0, 183, 164, 0, 161, 163,
	151, 117, 118, 132, 135, 0, 0, 26, 0, 0,
	426, 427, 429, 430, 0, 0, 0, 0, 514, 27,
	0, 304, 169, 170, 0, 174, 172, 80, 0, 160,
	162, 67, 0, 215, 0, 495, 493, 431, 0, 0,
	0, 522, -2, 520, 171, 165, 70, 214, 0, 0,
	450, 0, 453, 197, 216, 0, 451, 0, 0, 0,
	0, 0, 452, 0, 0, 217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 247,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:299
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:304
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:305
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:309
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:332
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:340
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:344
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:350
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:357
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:384
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:396
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:424
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:446
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:451
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:455
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:479
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:483
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:489
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:493
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:503
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:521
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:531
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:536
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:541
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:545
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:549
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:557
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:561
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:566
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:570
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:576
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:581
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:586
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:597
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:603
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:609
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:616
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:628
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:632
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:638
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:857
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:862
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:866
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:871
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:875
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:883
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:887
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:893
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:901
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:910
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:914
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:920
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:928
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:937
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:941
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:945
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:953
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:957
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:962
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:966
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:980
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:984
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:988
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:993
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:997
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1033
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1057
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1204
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1209
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1269
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1277
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1282
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = SessionStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.str = GlobalStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.statement = &Begin{}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.statement = &Begin{}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.statement = &Commit{}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.statement = &Rollback{}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &OtherRead{}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.statement = &OtherRead{}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &OtherRead{}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1483
		{
			setAllowComments(yylex, true)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.bytes2 = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = UnionStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = UnionAllStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1511
		{
			yyVAL.str = UnionDistinctStr
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.str = SQLCacheStr
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = DistinctStr
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.str = StraightJoinHint
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.selectExprs = nil
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.str = JoinStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.str = JoinStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.str = JoinStr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.str = StraightJoinStr
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.str = LeftJoinStr
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.str = LeftJoinStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.str = RightJoinStr
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.str = RightJoinStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.str = NaturalJoinStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.indexHints = nil
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.str = IsNullStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = IsNotNullStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = IsTrueStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = IsNotTrueStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.str = IsFalseStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.str = IsNotFalseStr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.str = EqualStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.str = LessThanStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.str = GreaterThanStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.str = LessEqualStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.str = GreaterEqualStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.str = NotEqualStr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2121
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 423:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 426:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 427:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 429:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 430:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 431:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.str = BooleanModeStr
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.str = QueryExpansionStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = nil
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.str = string("")
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.expr = nil
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.expr = &NullVal{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2488
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.exprs = nil
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.orderBy = nil
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.str = AscScr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.str = AscScr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.str = DescScr
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.limit = nil
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.str = ForUpdateStr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.str = ShareModeStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2608
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2621
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.updateExprs = nil
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2681
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.bytes = []byte("charset")
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.expr = &Default{}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.byt = 0
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.byt = 1
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.str = ""
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			yyVAL.str = IgnoreStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.empty = struct{}{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.empty = struct{}{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.empty = struct{}{}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.empty = struct{}{}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.empty = struct{}{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.empty = struct{}{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.empty = struct{}{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.empty = struct{}{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.empty = struct{}{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.empty = struct{}{}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2801
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2823
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3063
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3072
		{
			decNesting(yylex)
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3077
		{
			forceEOF(yylex)
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3082
		{
			forceEOF(yylex)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3086
		{
			forceEOF(yylex)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3090
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

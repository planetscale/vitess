// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const DATA = 57381
const LOAD = 57382
const LINES = 57383
const TERMINATED = 57384
const ESCAPED = 57385
const ENCLOSED = 57386
const DUMPFILE = 57387
const CSV = 57388
const HEADER = 57389
const MANIFEST = 57390
const OVERWRITE = 57391
const STARTING = 57392
const OPTIONALLY = 57393
const VALUES = 57394
const LAST_INSERT_ID = 57395
const NEXT = 57396
const VALUE = 57397
const SHARE = 57398
const MODE = 57399
const SQL_NO_CACHE = 57400
const SQL_CACHE = 57401
const SQL_CALC_FOUND_ROWS = 57402
const JOIN = 57403
const STRAIGHT_JOIN = 57404
const LEFT = 57405
const RIGHT = 57406
const INNER = 57407
const OUTER = 57408
const CROSS = 57409
const NATURAL = 57410
const USE = 57411
const FORCE = 57412
const ON = 57413
const USING = 57414
const ID = 57415
const AT_ID = 57416
const AT_AT_ID = 57417
const HEX = 57418
const STRING = 57419
const INTEGRAL = 57420
const FLOAT = 57421
const HEXNUM = 57422
const VALUE_ARG = 57423
const LIST_ARG = 57424
const COMMENT = 57425
const COMMENT_KEYWORD = 57426
const BIT_LITERAL = 57427
const NULL = 57428
const TRUE = 57429
const FALSE = 57430
const OFF = 57431
const OR = 57432
const XOR = 57433
const AND = 57434
const NOT = 57435
const BETWEEN = 57436
const CASE = 57437
const WHEN = 57438
const THEN = 57439
const ELSE = 57440
const END = 57441
const LE = 57442
const GE = 57443
const NE = 57444
const NULL_SAFE_EQUAL = 57445
const IS = 57446
const LIKE = 57447
const REGEXP = 57448
const IN = 57449
const SHIFT_LEFT = 57450
const SHIFT_RIGHT = 57451
const DIV = 57452
const MOD = 57453
const UNARY = 57454
const COLLATE = 57455
const BINARY = 57456
const UNDERSCORE_BINARY = 57457
const UNDERSCORE_UTF8MB4 = 57458
const UNDERSCORE_UTF8 = 57459
const UNDERSCORE_LATIN1 = 57460
const INTERVAL = 57461
const JSON_EXTRACT_OP = 57462
const JSON_UNQUOTE_EXTRACT_OP = 57463
const CREATE = 57464
const ALTER = 57465
const DROP = 57466
const RENAME = 57467
const ANALYZE = 57468
const ADD = 57469
const FLUSH = 57470
const SCHEMA = 57471
const TABLE = 57472
const INDEX = 57473
const VIEW = 57474
const TO = 57475
const IGNORE = 57476
const IF = 57477
const UNIQUE = 57478
const PRIMARY = 57479
const COLUMN = 57480
const SPATIAL = 57481
const FULLTEXT = 57482
const KEY_BLOCK_SIZE = 57483
const CHECK = 57484
const INDEXES = 57485
const ACTION = 57486
const CASCADE = 57487
const CONSTRAINT = 57488
const FOREIGN = 57489
const NO = 57490
const REFERENCES = 57491
const RESTRICT = 57492
const SHOW = 57493
const DESCRIBE = 57494
const EXPLAIN = 57495
const DATE = 57496
const ESCAPE = 57497
const REPAIR = 57498
const OPTIMIZE = 57499
const TRUNCATE = 57500
const MAXVALUE = 57501
const PARTITION = 57502
const REORGANIZE = 57503
const LESS = 57504
const THAN = 57505
const PROCEDURE = 57506
const TRIGGER = 57507
const VINDEX = 57508
const VINDEXES = 57509
const STATUS = 57510
const VARIABLES = 57511
const WARNINGS = 57512
const SEQUENCE = 57513
const BEGIN = 57514
const START = 57515
const TRANSACTION = 57516
const COMMIT = 57517
const ROLLBACK = 57518
const SAVEPOINT = 57519
const RELEASE = 57520
const WORK = 57521
const BIT = 57522
const TINYINT = 57523
const SMALLINT = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const BIGINT = 57528
const INTNUM = 57529
const REAL = 57530
const DOUBLE = 57531
const FLOAT_TYPE = 57532
const DECIMAL = 57533
const NUMERIC = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const CHAR = 57539
const VARCHAR = 57540
const BOOL = 57541
const CHARACTER = 57542
const VARBINARY = 57543
const NCHAR = 57544
const TEXT = 57545
const TINYTEXT = 57546
const MEDIUMTEXT = 57547
const LONGTEXT = 57548
const BLOB = 57549
const TINYBLOB = 57550
const MEDIUMBLOB = 57551
const LONGBLOB = 57552
const JSON = 57553
const ENUM = 57554
const GEOMETRY = 57555
const POINT = 57556
const LINESTRING = 57557
const POLYGON = 57558
const GEOMETRYCOLLECTION = 57559
const MULTIPOINT = 57560
const MULTILINESTRING = 57561
const MULTIPOLYGON = 57562
const NULLX = 57563
const AUTO_INCREMENT = 57564
const APPROXNUM = 57565
const SIGNED = 57566
const UNSIGNED = 57567
const ZEROFILL = 57568
const COLLATION = 57569
const DATABASES = 57570
const TABLES = 57571
const VITESS_METADATA = 57572
const VSCHEMA = 57573
const FULL = 57574
const PROCESSLIST = 57575
const COLUMNS = 57576
const FIELDS = 57577
const ENGINES = 57578
const PLUGINS = 57579
const EXTENDED = 57580
const KEYSPACES = 57581
const VITESS_KEYSPACES = 57582
const VITESS_SHARDS = 57583
const VITESS_TABLETS = 57584
const NAMES = 57585
const CHARSET = 57586
const GLOBAL = 57587
const SESSION = 57588
const ISOLATION = 57589
const LEVEL = 57590
const READ = 57591
const WRITE = 57592
const ONLY = 57593
const REPEATABLE = 57594
const COMMITTED = 57595
const UNCOMMITTED = 57596
const SERIALIZABLE = 57597
const CURRENT_TIMESTAMP = 57598
const DATABASE = 57599
const CURRENT_DATE = 57600
const CURRENT_TIME = 57601
const LOCALTIME = 57602
const LOCALTIMESTAMP = 57603
const UTC_DATE = 57604
const UTC_TIME = 57605
const UTC_TIMESTAMP = 57606
const REPLACE = 57607
const CONVERT = 57608
const CAST = 57609
const SUBSTR = 57610
const SUBSTRING = 57611
const GROUP_CONCAT = 57612
const SEPARATOR = 57613
const TIMESTAMPADD = 57614
const TIMESTAMPDIFF = 57615
const MATCH = 57616
const AGAINST = 57617
const BOOLEAN = 57618
const LANGUAGE = 57619
const WITH = 57620
const QUERY = 57621
const EXPANSION = 57622
const UNUSED = 57623
const ARRAY = 57624
const CUME_DIST = 57625
const DESCRIPTION = 57626
const DENSE_RANK = 57627
const EMPTY = 57628
const EXCEPT = 57629
const FIRST_VALUE = 57630
const GROUPING = 57631
const GROUPS = 57632
const JSON_TABLE = 57633
const LAG = 57634
const LAST_VALUE = 57635
const LATERAL = 57636
const LEAD = 57637
const MEMBER = 57638
const NTH_VALUE = 57639
const NTILE = 57640
const OF = 57641
const OVER = 57642
const PERCENT_RANK = 57643
const RANK = 57644
const RECURSIVE = 57645
const ROW_NUMBER = 57646
const SYSTEM = 57647
const WINDOW = 57648
const ACTIVE = 57649
const ADMIN = 57650
const BUCKETS = 57651
const CLONE = 57652
const COMPONENT = 57653
const DEFINITION = 57654
const ENFORCED = 57655
const EXCLUDE = 57656
const FOLLOWING = 57657
const GEOMCOLLECTION = 57658
const GET_MASTER_PUBLIC_KEY = 57659
const HISTOGRAM = 57660
const HISTORY = 57661
const INACTIVE = 57662
const INVISIBLE = 57663
const LOCKED = 57664
const MASTER_COMPRESSION_ALGORITHMS = 57665
const MASTER_PUBLIC_KEY_PATH = 57666
const MASTER_TLS_CIPHERSUITES = 57667
const MASTER_ZSTD_COMPRESSION_LEVEL = 57668
const NESTED = 57669
const NETWORK_NAMESPACE = 57670
const NOWAIT = 57671
const NULLS = 57672
const OJ = 57673
const OLD = 57674
const OPTIONAL = 57675
const ORDINALITY = 57676
const ORGANIZATION = 57677
const OTHERS = 57678
const PATH = 57679
const PERSIST = 57680
const PERSIST_ONLY = 57681
const PRECEDING = 57682
const PRIVILEGE_CHECKS_USER = 57683
const PROCESS = 57684
const RANDOM = 57685
const REFERENCE = 57686
const REQUIRE_ROW_FORMAT = 57687
const RESOURCE = 57688
const RESPECT = 57689
const RESTART = 57690
const RETAIN = 57691
const REUSE = 57692
const ROLE = 57693
const SECONDARY = 57694
const SECONDARY_ENGINE = 57695
const SECONDARY_LOAD = 57696
const SECONDARY_UNLOAD = 57697
const SKIP = 57698
const SRID = 57699
const THREAD_PRIORITY = 57700
const TIES = 57701
const UNBOUNDED = 57702
const VCPU = 57703
const VISIBLE = 57704
const FORMAT = 57705
const TREE = 57706
const VITESS = 57707
const TRADITIONAL = 57708

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	34, 324,
	148, 324,
	160, 324,
	185, 338,
	186, 338,
	-2, 326,
	-1, 50,
	150, 348,
	-2, 346,
	-1, 74,
	54, 384,
	-2, 392,
	-1, 416,
	136, 749,
	-2, 745,
	-1, 417,
	136, 750,
	-2, 746,
	-1, 432,
	54, 385,
	-2, 397,
	-1, 433,
	54, 386,
	-2, 398,
	-1, 453,
	104, 1017,
	-2, 76,
	-1, 454,
	104, 925,
	-2, 77,
	-1, 459,
	104, 887,
	-2, 708,
	-1, 461,
	104, 961,
	-2, 710,
	-1, 972,
	136, 752,
	-2, 748,
	-1, 1059,
	72, 58,
	74, 58,
	-2, 62,
	-1, 1424,
	5, 636,
	18, 636,
	20, 636,
	32, 636,
	75, 636,
	-2, 423,
	-1, 1623,
	44, 679,
	-2, 677,
}

const yyPrivate = 57344

const yyLast = 19650

var yyAct = [...]int{

	416, 1719, 1709, 1471, 997, 1346, 1645, 1566, 1535, 1623,
	360, 1677, 1245, 1081, 1588, 1549, 639, 1265, 375, 1053,
	1400, 1440, 1403, 620, 1077, 73, 3, 1246, 1296, 1404,
	766, 1080, 1127, 719, 588, 1112, 1090, 389, 1410, 1232,
	94, 1416, 1365, 1050, 306, 893, 329, 306, 1313, 912,
	959, 458, 94, 966, 306, 1181, 1323, 637, 804, 797,
	71, 1095, 585, 1032, 792, 1055, 1039, 759, 764, 1106,
	425, 434, 362, 992, 787, 936, 769, 29, 428, 1123,
	786, 1061, 94, 584, 803, 94, 306, 419, 306, 346,
	794, 776, 801, 351, 69, 629, 358, 907, 455, 74,
	922, 68, 1620, 1464, 1545, 1568, 609, 1712, 304, 8,
	7, 732, 6, 1674, 1707, 1653, 294, 1700, 342, 292,
	733, 1472, 1673, 1652, 1382, 1501, 593, 1434, 302, 298,
	299, 300, 76, 77, 78, 79, 80, 81, 1071, 31,
	32, 33, 62, 35, 36, 347, 1304, 420, 350, 805,
	590, 806, 592, 440, 444, 1149, 349, 31, 652, 66,
	62, 35, 36, 348, 37, 56, 57, 1105, 59, 1148,
	1435, 1436, 1348, 60, 452, 1072, 1073, 1614, 681, 680,
	690, 691, 683, 684, 685, 686, 687, 688, 689, 682,
	1538, 401, 692, 407, 408, 405, 406, 404, 403, 402,
	645, 646, 46, 1655, 1113, 647, 61, 409, 410, 648,
	645, 646, 1492, 1490, 339, 96, 97, 98, 295, 1282,
	651, 921, 1281, 341, 61, 1283, 1147, 337, 1349, 96,
	97, 98, 640, 641, 650, 969, 881, 642, 1706, 1350,
	878, 1699, 1646, 1345, 293, 1033, 880, 1638, 1723, 635,
	1131, 1727, 1131, 923, 924, 925, 301, 1443, 610, 1131,
	96, 97, 98, 587, 1597, 296, 595, 1266, 1268, 1589,
	446, 1351, 39, 40, 42, 41, 44, 882, 58, 1144,
	1141, 1142, 879, 1140, 1591, 886, 655, 1099, 598, 869,
	1427, 1342, 1426, 306, 600, 601, 1425, 1344, 306, 309,
	611, 45, 65, 64, 306, 297, 54, 55, 43, 1099,
	306, 618, 1366, 591, 624, 1161, 1151, 1154, 1160, 1200,
	1078, 94, 47, 48, 1627, 49, 50, 51, 52, 1517,
	94, 626, 605, 628, 96, 97, 98, 1463, 1197, 704,
	705, 1433, 94, 94, 1237, 1210, 1189, 1067, 1651, 1267,
	1333, 692, 653, 1368, 780, 1590, 1146, 599, 1615, 717,
	616, 1278, 608, 634, 682, 625, 627, 692, 615, 661,
	1113, 837, 622, 1011, 617, 636, 630, 1656, 1145, 1721,
	672, 1636, 1722, 1606, 1720, 913, 908, 654, 1598, 1596,
	1370, 1414, 1374, 84, 1369, 807, 1367, 1329, 1330, 1331,
	602, 1372, 603, 665, 1384, 604, 1098, 612, 613, 614,
	1371, 631, 632, 993, 871, 63, 1343, 1641, 1341, 96,
	97, 98, 1150, 1373, 1375, 993, 943, 1207, 1098, 643,
	702, 1728, 85, 63, 1302, 1016, 1017, 1152, 666, 667,
	941, 942, 940, 94, 704, 705, 306, 757, 306, 306,
	756, 94, 1102, 664, 662, 773, 663, 94, 623, 1103,
	1195, 1665, 1194, 704, 705, 1544, 1543, 455, 720, 1332,
	825, 621, 1704, 1455, 1337, 1334, 1325, 1335, 1328, 1317,
	1324, 670, 671, 669, 1326, 1327, 669, 914, 909, 61,
	1729, 785, 685, 686, 687, 688, 689, 682, 1336, 672,
	692, 939, 672, 670, 671, 669, 770, 1701, 755, 1693,
	784, 838, 802, 796, 735, 737, 739, 741, 743, 745,
	746, 672, 758, 736, 738, 1316, 742, 744, 1702, 747,
	1694, 1174, 1175, 1176, 1305, 1703, 1390, 851, 854, 855,
	856, 857, 858, 859, 594, 860, 861, 862, 863, 864,
	839, 840, 841, 842, 823, 824, 852, 1695, 826, 1685,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	843, 844, 845, 846, 847, 848, 849, 850, 1391, 1013,
	931, 933, 934, 1667, 306, 445, 1637, 932, 865, 670,
	671, 669, 867, 94, 450, 870, 1562, 872, 306, 306,
	94, 94, 94, 670, 671, 669, 306, 672, 1196, 1541,
	306, 1386, 1505, 306, 891, 892, 429, 306, 1392, 94,
	1318, 672, 1314, 906, 94, 94, 94, 306, 94, 94,
	671, 669, 898, 853, 1012, 596, 597, 884, 670, 671,
	669, 94, 94, 897, 96, 97, 98, 672, 815, 606,
	868, 1594, 1705, 670, 671, 669, 672, 875, 876, 877,
	1063, 1413, 873, 874, 1603, 447, 448, 768, 895, 1602,
	883, 672, 1669, 429, 796, 70, 896, 890, 670, 671,
	669, 900, 901, 902, 1451, 904, 905, 31, 96, 97,
	98, 903, 961, 960, 916, 1272, 672, 1062, 910, 911,
	887, 1100, 962, 690, 691, 683, 684, 685, 686, 687,
	688, 689, 682, 937, 1512, 692, 94, 96, 97, 98,
	1064, 1285, 1066, 974, 975, 683, 684, 685, 686, 687,
	688, 689, 682, 1573, 970, 692, 981, 984, 1594, 1649,
	668, 915, 994, 1594, 429, 429, 918, 1063, 938, 94,
	94, 976, 1594, 1628, 61, 378, 377, 380, 381, 382,
	383, 1025, 1007, 971, 379, 384, 1594, 1593, 94, 972,
	1533, 1532, 1519, 429, 31, 306, 1515, 429, 94, 1461,
	1460, 720, 306, 1233, 306, 1457, 1458, 1457, 1456, 1024,
	429, 1035, 306, 306, 306, 1036, 429, 970, 1233, 1240,
	94, 963, 964, 94, 72, 1002, 1003, 1064, 1605, 1062,
	668, 429, 1459, 973, 94, 94, 455, 1051, 1036, 455,
	1241, 814, 813, 1024, 1286, 1401, 1030, 1006, 1413, 1070,
	1082, 1213, 972, 1212, 1036, 422, 1024, 1018, 1062, 1027,
	1014, 61, 1026, 885, 1036, 799, 1031, 61, 1034, 1097,
	1041, 1044, 1045, 1046, 1042, 31, 1043, 1047, 1059, 1413,
	1417, 1418, 1024, 1686, 1114, 1115, 1116, 1551, 1107, 1028,
	306, 94, 1524, 94, 1128, 1153, 1447, 1065, 866, 306,
	306, 306, 306, 306, 1060, 1069, 306, 306, 1417, 1418,
	306, 94, 1068, 1108, 1109, 1110, 1111, 1129, 1085, 1290,
	1130, 1124, 61, 1118, 1117, 1347, 1552, 1134, 306, 1119,
	1120, 1121, 1122, 1714, 306, 306, 306, 1710, 1449, 1420,
	306, 94, 61, 1401, 1319, 919, 889, 1257, 1136, 1423,
	1138, 1422, 1258, 1255, 1135, 1254, 1167, 1253, 1256, 435,
	1171, 1125, 1126, 1155, 1156, 1157, 1158, 1159, 1165, 1690,
	1162, 1163, 1672, 436, 1164, 1393, 1222, 977, 978, 1688,
	767, 983, 986, 987, 1516, 1231, 1259, 1184, 1045, 1046,
	1230, 1185, 1166, 1661, 1658, 771, 772, 438, 937, 437,
	1170, 1692, 1192, 1193, 1172, 1676, 1001, 1678, 1199, 1004,
	1005, 1202, 1203, 1684, 1041, 1044, 1045, 1046, 1042, 1209,
	1043, 1047, 1683, 1211, 1220, 1624, 1214, 1215, 1216, 1217,
	1218, 1622, 1221, 938, 418, 989, 1177, 1309, 760, 812,
	619, 1301, 1697, 1643, 1642, 1571, 306, 1547, 1299, 990,
	761, 1292, 1510, 1009, 1137, 888, 1049, 306, 306, 306,
	306, 306, 423, 424, 1229, 426, 1247, 1191, 1696, 306,
	1681, 420, 1228, 306, 1662, 1262, 1263, 306, 1242, 1509,
	427, 1190, 306, 306, 417, 1206, 306, 306, 306, 1235,
	72, 1238, 1508, 1396, 1219, 1233, 649, 1201, 1264, 1284,
	1198, 94, 781, 1225, 1716, 1715, 1226, 774, 1716, 1625,
	1291, 1539, 1010, 422, 1287, 1297, 1297, 1082, 1236, 70,
	75, 1234, 67, 1, 95, 1273, 328, 1708, 307, 1275,
	1473, 307, 1249, 1250, 1260, 1252, 95, 1248, 307, 895,
	1251, 1548, 1270, 1271, 1298, 1143, 1276, 1274, 1644, 1279,
	1587, 1439, 1088, 1079, 83, 94, 94, 1308, 582, 1310,
	1311, 1312, 82, 1635, 1306, 1307, 95, 435, 1289, 95,
	307, 633, 307, 1087, 1293, 1294, 1295, 1086, 1595, 1303,
	1104, 436, 1537, 1448, 1300, 94, 1640, 1315, 681, 680,
	690, 691, 683, 684, 685, 686, 687, 688, 689, 682,
	820, 818, 692, 432, 433, 438, 819, 437, 817, 822,
	94, 1359, 1360, 1321, 821, 816, 960, 321, 1338, 920,
	338, 1048, 808, 1186, 1187, 1133, 1362, 775, 86, 1340,
	1339, 1139, 1462, 1101, 318, 644, 1353, 323, 291, 700,
	1354, 1363, 1352, 1227, 1204, 1182, 1280, 1387, 306, 1322,
	456, 449, 1407, 1682, 1355, 1383, 1659, 1657, 94, 1377,
	1621, 1567, 1361, 1660, 94, 94, 1376, 1619, 1408, 1691,
	1675, 1247, 1008, 1402, 1362, 1015, 971, 763, 1507, 1364,
	1395, 1205, 972, 729, 991, 790, 361, 930, 376, 1424,
	94, 373, 374, 306, 1019, 1239, 674, 359, 353, 1405,
	789, 782, 1040, 1038, 1037, 1412, 795, 94, 1419, 94,
	1415, 94, 1394, 1421, 1297, 1297, 1297, 788, 1023, 431,
	988, 1613, 1438, 1082, 1500, 1082, 430, 53, 1428, 1399,
	1454, 1429, 34, 1431, 343, 1432, 1430, 657, 1437, 439,
	306, 28, 1444, 1445, 1446, 23, 1097, 22, 1442, 21,
	20, 1452, 1453, 19, 25, 18, 17, 16, 607, 38,
	306, 27, 26, 15, 14, 13, 94, 12, 1474, 94,
	94, 94, 306, 11, 10, 9, 5, 307, 4, 660,
	24, 718, 307, 2, 0, 0, 1482, 0, 307, 0,
	1484, 0, 0, 0, 307, 0, 0, 1479, 1480, 1498,
	0, 1493, 1494, 0, 1465, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 390, 30, 0, 0, 0,
	0, 0, 0, 1488, 1468, 0, 95, 95, 0, 0,
	0, 1513, 1514, 1466, 0, 1518, 1478, 0, 0, 0,
	0, 0, 0, 1511, 1247, 0, 30, 1506, 1467, 0,
	1469, 0, 0, 1529, 1483, 0, 1485, 1486, 94, 1487,
	0, 1521, 1489, 1520, 1491, 0, 0, 0, 94, 0,
	0, 1287, 0, 0, 1082, 429, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 421, 94, 0, 0, 0,
	1531, 0, 0, 94, 681, 680, 690, 691, 683, 684,
	685, 686, 687, 688, 689, 682, 0, 1555, 692, 1550,
	0, 0, 1540, 0, 1542, 681, 680, 690, 691, 683,
	684, 685, 686, 687, 688, 689, 682, 95, 0, 692,
	307, 1534, 307, 307, 442, 95, 94, 0, 94, 0,
	94, 95, 1554, 1546, 0, 94, 0, 94, 94, 94,
	306, 1582, 0, 1580, 94, 1581, 1583, 1584, 0, 1576,
	1574, 1565, 1572, 1570, 0, 0, 0, 387, 0, 1585,
	1405, 1553, 94, 306, 1405, 1592, 0, 0, 1599, 0,
	1607, 1609, 1610, 1611, 1612, 1600, 1616, 1601, 1617, 1618,
	0, 1561, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 93, 1630, 1631,
	1634, 1579, 0, 0, 0, 94, 1626, 0, 0, 340,
	0, 1586, 1633, 1632, 0, 0, 94, 94, 0, 0,
	0, 1405, 0, 0, 0, 0, 0, 1608, 1650, 0,
	1648, 1647, 1550, 1082, 0, 0, 0, 1654, 94, 457,
	0, 0, 586, 0, 0, 0, 1247, 0, 1663, 306,
	0, 0, 0, 0, 0, 0, 0, 94, 307, 1668,
	0, 0, 0, 0, 0, 1671, 0, 95, 0, 0,
	0, 0, 307, 307, 95, 95, 95, 1680, 1679, 0,
	307, 0, 0, 0, 307, 1689, 1687, 307, 0, 0,
	0, 307, 0, 95, 0, 1504, 0, 94, 95, 95,
	95, 307, 95, 95, 0, 1698, 0, 0, 0, 0,
	0, 0, 0, 1666, 0, 95, 95, 0, 0, 0,
	0, 1713, 0, 0, 0, 0, 638, 0, 1724, 0,
	0, 0, 1725, 1726, 0, 638, 681, 680, 690, 691,
	683, 684, 685, 686, 687, 688, 689, 682, 0, 30,
	692, 0, 0, 0, 0, 0, 676, 0, 679, 0,
	0, 0, 701, 703, 693, 694, 695, 696, 697, 698,
	699, 0, 677, 678, 675, 681, 680, 690, 691, 683,
	684, 685, 686, 687, 688, 689, 682, 0, 1503, 692,
	95, 0, 0, 716, 0, 0, 0, 721, 722, 723,
	724, 725, 726, 727, 728, 0, 731, 734, 734, 734,
	740, 734, 734, 740, 734, 748, 749, 750, 751, 752,
	753, 754, 0, 95, 95, 0, 0, 30, 0, 681,
	680, 690, 691, 683, 684, 685, 686, 687, 688, 689,
	682, 0, 95, 692, 0, 0, 0, 0, 0, 307,
	0, 0, 95, 791, 0, 0, 307, 0, 307, 0,
	0, 0, 0, 0, 0, 0, 307, 307, 307, 0,
	0, 0, 0, 0, 95, 0, 0, 95, 457, 673,
	0, 0, 0, 0, 0, 0, 0, 457, 95, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 656,
	658, 0, 0, 0, 96, 97, 98, 1356, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 681, 680, 690,
	691, 683, 684, 685, 686, 687, 688, 689, 682, 0,
	0, 692, 0, 0, 307, 95, 0, 95, 0, 0,
	0, 762, 765, 307, 307, 307, 307, 307, 310, 1497,
	307, 307, 0, 0, 307, 95, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 307, 307,
	307, 0, 0, 0, 307, 95, 0, 0, 638, 0,
	778, 0, 0, 0, 0, 638, 638, 638, 457, 320,
	0, 0, 0, 0, 809, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 0, 0, 638,
	638, 638, 0, 638, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 638, 638, 0, 0,
	0, 0, 0, 0, 681, 680, 690, 691, 683, 684,
	685, 686, 687, 688, 689, 682, 1496, 0, 692, 0,
	0, 0, 324, 314, 0, 325, 326, 333, 0, 0,
	0, 317, 319, 330, 315, 316, 335, 334, 0, 312,
	332, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 307, 307, 307, 307, 1495, 0, 0, 0,
	0, 0, 0, 307, 0, 355, 0, 307, 0, 0,
	0, 307, 0, 0, 0, 0, 307, 307, 0, 0,
	307, 307, 307, 0, 0, 0, 0, 899, 0, 0,
	457, 0, 0, 0, 0, 95, 0, 457, 457, 457,
	0, 681, 680, 690, 691, 683, 684, 685, 686, 687,
	688, 689, 682, 0, 917, 692, 457, 0, 0, 0,
	0, 457, 457, 457, 0, 457, 457, 0, 0, 0,
	0, 0, 0, 926, 927, 928, 929, 1052, 457, 457,
	0, 0, 0, 0, 0, 0, 1183, 0, 0, 95,
	95, 681, 680, 690, 691, 683, 684, 685, 686, 687,
	688, 689, 682, 0, 0, 692, 681, 680, 690, 691,
	683, 684, 685, 686, 687, 688, 689, 682, 0, 95,
	692, 0, 0, 0, 0, 0, 0, 0, 979, 980,
	0, 681, 680, 690, 691, 683, 684, 685, 686, 687,
	688, 689, 682, 0, 95, 692, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 457, 638, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 638, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 999, 1000, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 95, 95,
	0, 0, 0, 0, 0, 1020, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 778, 0, 0, 457, 0,
	0, 0, 0, 0, 95, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 457, 0, 0,
	457, 95, 0, 95, 0, 95, 0, 0, 0, 0,
	0, 457, 586, 0, 0, 0, 1188, 0, 0, 421,
	680, 690, 691, 683, 684, 685, 686, 687, 688, 689,
	682, 1132, 0, 692, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 0,
	95, 0, 0, 95, 95, 95, 307, 0, 457, 0,
	457, 791, 0, 0, 0, 0, 0, 0, 1243, 1244,
	0, 0, 791, 791, 791, 791, 791, 0, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	1269, 0, 0, 0, 0, 0, 0, 791, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 1208, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1223, 1224, 765,
	95, 638, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 95, 995, 95, 0, 0, 0, 0, 95,
	0, 95, 95, 95, 307, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 307, 0, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 1406, 0, 30,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 305, 0, 0, 336, 791, 0,
	95, 95, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 1320, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 443, 443, 0,
	0, 0, 0, 307, 0, 0, 305, 0, 305, 0,
	0, 95, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 995, 0,
	935, 1409, 1411, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 0, 0,
	0, 1526, 1527, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 457, 0, 457, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 1475, 1476, 1477, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 1406, 0,
	30, 0, 1406, 305, 0, 0, 0, 0, 305, 0,
	0, 352, 0, 0, 305, 0, 0, 0, 0, 1522,
	305, 0, 1523, 0, 0, 1525, 0, 0, 0, 0,
	0, 0, 0, 1604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 995, 0, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1536, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 0, 0,
	457, 0, 0, 1569, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 0, 0, 0, 0, 1178, 1179, 1180,
	0, 0, 0, 1575, 0, 1577, 305, 1578, 305, 798,
	0, 0, 1536, 0, 1536, 1536, 1536, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 1711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 457, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 995, 0, 1664, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 305,
	0, 0, 0, 0, 0, 0, 305, 0, 0, 0,
	305, 0, 0, 305, 1536, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1357, 1358,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1378, 1379, 0, 1380, 1381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1388, 1389,
	0, 0, 0, 0, 0, 0, 0, 443, 894, 0,
	0, 0, 443, 443, 0, 0, 443, 443, 443, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 443, 443, 443, 443, 443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 305, 0, 0, 0, 0,
	0, 894, 305, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 305, 1057, 305, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 305,
	305, 305, 305, 305, 0, 0, 305, 305, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 0, 0, 0, 1168, 1169, 305, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	0, 1556, 1557, 1558, 1559, 1560, 0, 0, 0, 1563,
	1564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 305, 305, 305,
	305, 305, 0, 0, 0, 0, 0, 0, 0, 1261,
	0, 0, 0, 305, 0, 0, 0, 1057, 0, 0,
	0, 0, 305, 305, 0, 0, 305, 1277, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1717, 0, 0,
	0, 894, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 305, 0, 0, 568, 556, 0, 0,
	512, 571, 485, 502, 579, 503, 506, 543, 470, 525,
	195, 500, 0, 489, 465, 496, 466, 487, 514, 131,
	518, 484, 558, 528, 570, 163, 0, 490, 545, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 577, 166, 534, 0, 245, 183, 0,
	0, 0, 516, 560, 523, 553, 511, 544, 475, 533,
	572, 501, 541, 573, 0, 0, 996, 96, 97, 98,
	0, 1083, 1084, 0, 0, 0, 0, 0, 118, 305,
	538, 567, 498, 540, 542, 581, 464, 535, 0, 468,
	471, 578, 563, 493, 494, 1288, 0, 0, 0, 0,
	0, 0, 515, 524, 550, 509, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 532, 0, 0, 0,
	472, 469, 0, 0, 0, 0, 513, 0, 0, 0,
	474, 0, 492, 551, 0, 462, 142, 555, 562, 510,
	308, 566, 508, 507, 569, 216, 0, 249, 146, 162,
	114, 159, 100, 110, 0, 144, 192, 224, 228, 559,
	488, 497, 124, 495, 226, 203, 268, 531, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	467, 0, 246, 271, 290, 116, 483, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 479, 482, 477, 478, 526, 527,
	574, 575, 576, 552, 473, 0, 480, 481, 0, 557,
	564, 565, 530, 99, 108, 165, 287, 219, 138, 272,
	463, 476, 128, 486, 0, 0, 499, 504, 505, 517,
	519, 520, 521, 522, 529, 536, 537, 539, 546, 547,
	548, 549, 554, 561, 580, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 568, 556, 0, 0, 512, 571,
	485, 502, 579, 503, 506, 543, 470, 525, 195, 500,
	0, 489, 465, 496, 466, 487, 514, 131, 518, 484,
	558, 528, 570, 163, 0, 490, 545, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 577, 166, 534, 0, 245, 183, 0, 0, 0,
	516, 560, 523, 553, 511, 544, 475, 533, 572, 501,
	541, 573, 0, 0, 0, 96, 97, 98, 0, 1083,
	1084, 0, 0, 0, 0, 0, 118, 0, 538, 567,
	498, 540, 542, 581, 464, 535, 0, 468, 471, 578,
	563, 493, 494, 0, 0, 0, 0, 0, 0, 0,
	515, 524, 550, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 532, 0, 0, 0, 472, 469,
	0, 0, 0, 0, 513, 0, 0, 0, 474, 0,
	492, 551, 0, 462, 142, 555, 562, 510, 308, 566,
	508, 507, 569, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 559, 488, 497,
	124, 495, 226, 203, 268, 531, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 467, 0,
	246, 271, 290, 116, 483, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 479, 482, 477, 478, 526, 527, 574, 575,
	576, 552, 473, 0, 480, 481, 0, 557, 564, 565,
	530, 99, 108, 165, 287, 219, 138, 272, 463, 476,
	128, 486, 0, 0, 499, 504, 505, 517, 519, 520,
	521, 522, 529, 536, 537, 539, 546, 547, 548, 549,
	554, 561, 580, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 568, 556, 0, 0, 512, 571, 485, 502,
	579, 503, 506, 543, 470, 525, 195, 500, 0, 489,
	465, 496, 466, 487, 514, 131, 518, 484, 558, 528,
	570, 163, 0, 490, 545, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 577,
	166, 534, 0, 245, 183, 0, 0, 0, 516, 560,
	523, 553, 511, 544, 475, 533, 572, 501, 541, 573,
	61, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 538, 567, 498, 540,
	542, 581, 464, 535, 0, 468, 471, 578, 563, 493,
	494, 0, 0, 0, 0, 0, 0, 0, 515, 524,
	550, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 532, 0, 0, 0, 472, 469, 0, 0,
	0, 0, 513, 0, 0, 0, 474, 0, 492, 551,
	0, 462, 142, 555, 562, 510, 308, 566, 508, 507,
	569, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 559, 488, 497, 124, 495,
	226, 203, 268, 531, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 467, 0, 246, 271,
	290, 116, 483, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	479, 482, 477, 478, 526, 527, 574, 575, 576, 552,
	473, 0, 480, 481, 0, 557, 564, 565, 530, 99,
	108, 165, 287, 219, 138, 272, 463, 476, 128, 486,
	0, 0, 499, 504, 505, 517, 519, 520, 521, 522,
	529, 536, 537, 539, 546, 547, 548, 549, 554, 561,
	580, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	568, 556, 0, 0, 512, 571, 485, 502, 579, 503,
	506, 543, 470, 525, 195, 500, 0, 489, 465, 496,
	466, 487, 514, 131, 518, 484, 558, 528, 570, 163,
	0, 490, 545, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 577, 166, 534,
	0, 245, 183, 0, 0, 0, 516, 560, 523, 553,
	511, 544, 475, 533, 572, 501, 541, 573, 0, 0,
	0, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 538, 567, 498, 540, 542, 581,
	464, 535, 0, 468, 471, 578, 563, 493, 494, 0,
	0, 0, 0, 0, 0, 0, 515, 524, 550, 509,
	0, 0, 0, 0, 0, 0, 1398, 0, 491, 0,
	532, 0, 0, 0, 472, 469, 0, 0, 0, 0,
	513, 0, 0, 0, 474, 0, 492, 551, 0, 462,
	142, 555, 562, 510, 308, 566, 508, 507, 569, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 559, 488, 497, 124, 495, 226, 203,
	268, 531, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 467, 0, 246, 271, 290, 116,
	483, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 479, 482,
	477, 478, 526, 527, 574, 575, 576, 552, 473, 0,
	480, 481, 0, 557, 564, 565, 530, 99, 108, 165,
	287, 219, 138, 272, 463, 476, 128, 486, 0, 0,
	499, 504, 505, 517, 519, 520, 521, 522, 529, 536,
	537, 539, 546, 547, 548, 549, 554, 561, 580, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 568, 556,
	0, 0, 512, 571, 485, 502, 579, 503, 506, 543,
	470, 525, 195, 500, 0, 489, 465, 496, 466, 487,
	514, 131, 518, 484, 558, 528, 570, 163, 0, 490,
	545, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 577, 166, 534, 0, 245,
	183, 0, 0, 0, 516, 560, 523, 553, 511, 544,
	475, 533, 572, 501, 541, 573, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 538, 567, 498, 540, 542, 581, 464, 535,
	0, 468, 471, 578, 563, 493, 494, 0, 0, 0,
	0, 0, 0, 0, 515, 524, 550, 509, 0, 0,
	0, 0, 0, 0, 1278, 0, 491, 0, 532, 0,
	0, 0, 472, 469, 0, 0, 0, 0, 513, 0,
	0, 0, 474, 0, 492, 551, 0, 462, 142, 555,
	562, 510, 308, 566, 508, 507, 569, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 559, 488, 497, 124, 495, 226, 203, 268, 531,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 467, 0, 246, 271, 290, 116, 483, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 479, 482, 477, 478,
	526, 527, 574, 575, 576, 552, 473, 0, 480, 481,
	0, 557, 564, 565, 530, 99, 108, 165, 287, 219,
	138, 272, 463, 476, 128, 486, 0, 0, 499, 504,
	505, 517, 519, 520, 521, 522, 529, 536, 537, 539,
	546, 547, 548, 549, 554, 561, 580, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 568, 556, 0, 0,
	512, 571, 485, 502, 579, 503, 506, 543, 470, 525,
	195, 500, 0, 489, 465, 496, 466, 487, 514, 131,
	518, 484, 558, 528, 570, 163, 0, 490, 545, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 577, 166, 534, 0, 245, 183, 0,
	0, 0, 516, 560, 523, 553, 511, 544, 475, 533,
	572, 501, 541, 573, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	538, 567, 498, 540, 542, 581, 464, 535, 0, 468,
	471, 578, 563, 493, 494, 0, 0, 0, 0, 0,
	0, 0, 515, 524, 550, 509, 0, 0, 0, 0,
	0, 0, 1029, 0, 491, 0, 532, 0, 0, 0,
	472, 469, 0, 0, 0, 0, 513, 0, 0, 0,
	474, 0, 492, 551, 0, 462, 142, 555, 562, 510,
	308, 566, 508, 507, 569, 216, 0, 249, 146, 162,
	114, 159, 100, 110, 0, 144, 192, 224, 228, 559,
	488, 497, 124, 495, 226, 203, 268, 531, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	467, 0, 246, 271, 290, 116, 483, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 479, 482, 477, 478, 526, 527,
	574, 575, 576, 552, 473, 0, 480, 481, 0, 557,
	564, 565, 530, 99, 108, 165, 287, 219, 138, 272,
	463, 476, 128, 486, 0, 0, 499, 504, 505, 517,
	519, 520, 521, 522, 529, 536, 537, 539, 546, 547,
	548, 549, 554, 561, 580, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 568, 556, 0, 0, 512, 571,
	485, 502, 579, 503, 506, 543, 470, 525, 195, 500,
	0, 489, 465, 496, 466, 487, 514, 131, 518, 484,
	558, 528, 570, 163, 0, 490, 545, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 577, 166, 534, 0, 245, 183, 0, 0, 0,
	516, 560, 523, 553, 511, 544, 475, 533, 572, 501,
	541, 573, 0, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 538, 567,
	498, 540, 542, 581, 464, 535, 0, 468, 471, 578,
	563, 493, 494, 0, 0, 0, 0, 0, 0, 0,
	515, 524, 550, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 532, 0, 0, 0, 472, 469,
	0, 0, 0, 0, 513, 0, 0, 0, 474, 0,
	492, 551, 0, 462, 142, 555, 562, 510, 308, 566,
	508, 507, 569, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 559, 488, 497,
	124, 495, 226, 203, 268, 531, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 467, 0,
	246, 271, 290, 116, 483, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 479, 482, 477, 478, 526, 527, 574, 575,
	576, 552, 473, 0, 480, 481, 0, 557, 564, 565,
	530, 99, 108, 165, 287, 219, 138, 272, 463, 476,
	128, 486, 0, 0, 499, 504, 505, 517, 519, 520,
	521, 522, 529, 536, 537, 539, 546, 547, 548, 549,
	554, 561, 580, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 568, 556, 0, 0, 512, 571, 485, 502,
	579, 503, 506, 543, 470, 525, 195, 500, 0, 489,
	465, 496, 466, 487, 514, 131, 518, 484, 558, 528,
	570, 163, 0, 490, 545, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 577,
	166, 534, 0, 245, 183, 0, 0, 0, 516, 560,
	523, 553, 511, 544, 475, 533, 572, 501, 541, 573,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 538, 567, 498, 540,
	542, 581, 464, 535, 0, 468, 471, 578, 563, 493,
	494, 0, 0, 0, 0, 0, 0, 0, 515, 524,
	550, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 532, 0, 0, 0, 472, 469, 0, 0,
	0, 0, 513, 0, 0, 0, 474, 0, 492, 551,
	0, 462, 142, 555, 562, 510, 308, 566, 508, 507,
	569, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 559, 488, 497, 124, 495,
	226, 203, 268, 531, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 460, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 467, 0, 246, 271,
	290, 116, 483, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 461, 459, 454,
	453, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	479, 482, 477, 478, 526, 527, 574, 575, 576, 552,
	473, 0, 480, 481, 0, 557, 564, 565, 530, 99,
	108, 165, 287, 219, 138, 272, 463, 476, 128, 486,
	0, 0, 499, 504, 505, 517, 519, 520, 521, 522,
	529, 536, 537, 539, 546, 547, 548, 549, 554, 561,
	580, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	568, 556, 0, 0, 512, 571, 485, 502, 579, 503,
	506, 543, 470, 525, 195, 500, 0, 489, 465, 496,
	466, 487, 514, 131, 518, 484, 558, 528, 570, 163,
	0, 490, 545, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 577, 166, 534,
	0, 245, 183, 0, 0, 0, 516, 560, 523, 553,
	511, 544, 475, 533, 572, 501, 541, 573, 0, 0,
	0, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 538, 567, 498, 540, 542, 581,
	464, 535, 0, 468, 471, 578, 563, 493, 494, 0,
	0, 0, 0, 0, 0, 0, 515, 524, 550, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 491, 0,
	532, 0, 0, 0, 472, 469, 0, 0, 0, 0,
	513, 0, 0, 0, 474, 0, 492, 551, 0, 462,
	142, 555, 562, 510, 308, 566, 508, 507, 569, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 559, 488, 497, 124, 495, 226, 203,
	268, 531, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 800, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 460, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 467, 0, 246, 271, 290, 116,
	483, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 461, 459, 454, 453, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 479, 482,
	477, 478, 526, 527, 574, 575, 576, 552, 473, 0,
	480, 481, 0, 557, 564, 565, 530, 99, 108, 165,
	287, 219, 138, 272, 463, 476, 128, 486, 0, 0,
	499, 504, 505, 517, 519, 520, 521, 522, 529, 536,
	537, 539, 546, 547, 548, 549, 554, 561, 580, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 568, 556,
	0, 0, 512, 571, 485, 502, 579, 503, 506, 543,
	470, 525, 195, 500, 0, 489, 465, 496, 466, 487,
	514, 131, 518, 484, 558, 528, 570, 163, 0, 490,
	545, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 577, 166, 534, 0, 245,
	183, 0, 0, 0, 516, 560, 523, 553, 511, 544,
	475, 533, 572, 501, 541, 573, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 538, 567, 498, 540, 542, 581, 464, 535,
	0, 468, 471, 578, 563, 493, 494, 0, 0, 0,
	0, 0, 0, 0, 515, 524, 550, 509, 0, 0,
	0, 0, 0, 0, 0, 0, 491, 0, 532, 0,
	0, 0, 472, 469, 0, 0, 0, 0, 513, 0,
	0, 0, 474, 0, 492, 551, 0, 462, 142, 555,
	562, 510, 308, 566, 508, 507, 569, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 559, 488, 497, 124, 495, 226, 203, 268, 531,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 451, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	460, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 467, 0, 246, 271, 290, 116, 483, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 461, 459, 454, 453, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 479, 482, 477, 478,
	526, 527, 574, 575, 576, 552, 473, 0, 480, 481,
	0, 557, 564, 565, 530, 99, 108, 165, 287, 219,
	138, 272, 463, 476, 128, 486, 0, 0, 499, 504,
	505, 517, 519, 520, 521, 522, 529, 536, 537, 539,
	546, 547, 548, 549, 554, 561, 580, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 0, 967,
	0, 357, 0, 0, 0, 131, 0, 356, 0, 0,
	0, 163, 0, 968, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 400,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 96, 97, 98, 378, 377, 380, 381,
	382, 383, 0, 0, 118, 379, 384, 385, 386, 0,
	0, 0, 0, 354, 371, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 441, 0,
	0, 0, 414, 0, 370, 0, 0, 363, 364, 366,
	365, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 413, 0, 0, 308, 0, 0, 411,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	401, 412, 407, 408, 405, 406, 404, 403, 402, 415,
	393, 394, 395, 396, 398, 0, 409, 410, 397, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 0, 0, 0, 357, 0, 0, 0, 131,
	0, 356, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 400, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 391, 392, 0, 0, 0, 0,
	0, 0, 1074, 0, 61, 0, 0, 96, 97, 98,
	378, 377, 380, 381, 382, 383, 0, 0, 118, 379,
	384, 385, 386, 1075, 0, 0, 0, 354, 371, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 0, 0, 0, 0, 414, 0, 370, 0,
	0, 363, 364, 366, 365, 367, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 413, 0, 0,
	308, 0, 0, 411, 0, 216, 0, 249, 146, 162,
	114, 159, 100, 110, 0, 144, 192, 224, 228, 0,
	0, 0, 124, 0, 226, 203, 268, 0, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	0, 0, 246, 271, 290, 116, 0, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 401, 412, 407, 408, 405, 406,
	404, 403, 402, 415, 393, 394, 395, 396, 398, 0,
	409, 410, 397, 99, 108, 165, 287, 219, 138, 272,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 195, 0, 0, 0, 0, 357,
	0, 0, 0, 131, 0, 356, 0, 0, 0, 163,
	0, 0, 0, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 400, 166, 0,
	0, 245, 183, 0, 0, 0, 0, 0, 391, 392,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	429, 96, 97, 98, 378, 377, 380, 381, 382, 383,
	0, 0, 118, 379, 384, 385, 386, 0, 0, 0,
	0, 354, 371, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 0, 0, 0, 0,
	414, 0, 370, 0, 0, 363, 364, 366, 365, 367,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 413, 0, 0, 308, 0, 0, 411, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 401, 412,
	407, 408, 405, 406, 404, 403, 402, 415, 393, 394,
	395, 396, 398, 0, 409, 410, 397, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	0, 0, 0, 357, 0, 0, 0, 131, 0, 356,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 400, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 391, 392, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 96, 97, 98, 378, 377,
	380, 381, 382, 383, 0, 0, 118, 379, 384, 385,
	386, 0, 0, 0, 0, 354, 371, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	441, 0, 0, 0, 414, 0, 370, 0, 0, 363,
	364, 366, 365, 367, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 413, 0, 0, 308, 0,
	0, 411, 0, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 0, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 401, 412, 407, 408, 405, 406, 404, 403,
	402, 415, 393, 394, 395, 396, 398, 0, 409, 410,
	397, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 195, 0, 0, 0, 0, 357, 0, 0,
	0, 131, 0, 356, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 400, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 391, 392, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 96,
	97, 98, 378, 985, 380, 381, 382, 383, 0, 0,
	118, 379, 384, 385, 386, 0, 0, 0, 0, 354,
	371, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 441, 0, 0, 0, 414, 0,
	370, 0, 0, 363, 364, 366, 365, 367, 372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 413,
	0, 0, 308, 0, 0, 411, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 401, 412, 407, 408,
	405, 406, 404, 403, 402, 415, 393, 394, 395, 396,
	398, 0, 409, 410, 397, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 0, 0,
	0, 357, 0, 0, 0, 131, 0, 356, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 400,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 96, 97, 98, 378, 982, 380, 381,
	382, 383, 0, 0, 118, 379, 384, 385, 386, 0,
	0, 0, 0, 354, 371, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 441, 0,
	0, 0, 414, 0, 370, 0, 0, 363, 364, 366,
	365, 367, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 413, 0, 0, 308, 0, 0, 411,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	401, 412, 407, 408, 405, 406, 404, 403, 402, 415,
	393, 394, 395, 396, 398, 0, 409, 410, 397, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 357, 0,
	0, 0, 131, 0, 356, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 400, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 391, 392, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	96, 97, 98, 378, 377, 380, 381, 382, 383, 0,
	0, 118, 379, 384, 385, 386, 0, 0, 0, 0,
	354, 371, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 0, 0, 0, 0, 414,
	0, 370, 0, 0, 363, 364, 366, 365, 367, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	413, 0, 0, 308, 0, 0, 411, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 401, 412, 407,
	408, 405, 406, 404, 403, 402, 415, 393, 394, 395,
	396, 398, 0, 409, 410, 397, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 195, 0, 0,
	0, 0, 357, 0, 0, 0, 131, 0, 356, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	400, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 391, 392, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 97, 98, 378, 377, 380,
	381, 382, 383, 0, 0, 118, 379, 384, 385, 386,
	0, 0, 0, 0, 354, 371, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 0,
	0, 0, 0, 414, 0, 370, 0, 0, 363, 364,
	366, 365, 367, 372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 413, 0, 0, 308, 0, 0,
	411, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 401, 412, 407, 408, 405, 406, 404, 403, 402,
	415, 393, 394, 395, 396, 398, 0, 409, 410, 397,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 400, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 391, 392, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 96, 97,
	98, 378, 377, 380, 381, 382, 383, 0, 0, 118,
	379, 384, 385, 386, 0, 0, 0, 0, 0, 371,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 0, 0, 0, 0, 414, 0, 370,
	0, 0, 363, 364, 366, 365, 367, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 413, 0,
	0, 308, 0, 0, 411, 0, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 1718, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 401, 412, 407, 408, 405,
	406, 404, 403, 402, 415, 393, 394, 395, 396, 398,
	0, 409, 410, 397, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 400, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 391,
	392, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 429, 96, 97, 98, 378, 377, 380, 381, 382,
	383, 0, 0, 118, 379, 384, 385, 386, 0, 0,
	0, 0, 0, 371, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 0, 0, 0,
	0, 414, 0, 370, 0, 0, 363, 364, 366, 365,
	367, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 413, 0, 0, 308, 0, 0, 411, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 401,
	412, 407, 408, 405, 406, 404, 403, 402, 415, 393,
	394, 395, 396, 398, 0, 409, 410, 397, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 400, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 391, 392, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 96, 97, 98, 378,
	377, 380, 381, 382, 383, 0, 0, 118, 379, 384,
	385, 386, 0, 0, 0, 0, 0, 371, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 0, 0, 0, 0, 414, 0, 370, 0, 0,
	363, 364, 366, 365, 367, 372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 413, 0, 0, 308,
	0, 0, 411, 0, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 0, 0,
	0, 124, 0, 226, 203, 268, 0, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 0,
	0, 246, 271, 290, 116, 0, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 401, 412, 407, 408, 405, 406, 404,
	403, 402, 415, 393, 394, 395, 396, 398, 0, 409,
	410, 397, 99, 108, 165, 287, 219, 138, 272, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 0, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	680, 690, 691, 683, 684, 685, 686, 687, 688, 689,
	682, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 308, 0, 0, 0, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 195, 0, 0,
	0, 777, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	0, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 779, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 670, 671, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 308, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 0, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 90, 91,
	0, 87, 0, 0, 0, 92, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 0, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 1099, 0, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 0, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 1098, 308, 0, 0, 0, 1094,
	1091, 0, 1092, 1093, 162, 589, 159, 100, 110, 1089,
	1096, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 0, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 429, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 308, 0, 0, 0, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 0, 0,
	1056, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 1058, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 308, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 0, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 308, 0, 0, 0, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 195, 0, 0,
	0, 1056, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	0, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 1058, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 308, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 1054, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 0, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 0, 1021, 0, 0, 1022, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 308, 0, 0, 0, 0, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 0, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 811, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 0, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 810, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 308, 0, 0, 0, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 0, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 308,
	0, 0, 0, 0, 216, 0, 249, 146, 162, 589,
	159, 100, 110, 587, 144, 192, 224, 228, 0, 0,
	0, 124, 0, 226, 203, 268, 0, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 0,
	0, 246, 271, 290, 116, 0, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 165, 287, 219, 138, 272, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 0, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 429,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 308, 0, 0, 0, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	0, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 308, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 0, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 1058, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 308, 0, 0, 0, 0, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 0, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 0, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 779, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 308, 0, 0, 0, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 793,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 308, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 0, 0, 0, 0, 0, 0, 783, 131,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 0, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	308, 0, 0, 0, 0, 216, 0, 249, 146, 162,
	114, 159, 100, 110, 0, 144, 192, 224, 228, 0,
	0, 0, 124, 0, 226, 203, 268, 0, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	0, 0, 246, 271, 290, 116, 0, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 165, 287, 219, 138, 272,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 0, 166, 0,
	0, 245, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 659, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 308, 0, 0, 0, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 0, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 0, 142, 0, 0, 0, 308, 0,
	0, 0, 0, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 0, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 344,
	266, 280, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 0, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	303, 0, 308, 0, 0, 0, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 308, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
}
var yyPact = [...]int{

	133, -1000, -283, 1094, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1054,
	849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320, 12682,
	-30, 158, -18, 18903, 152, 1818, 19267, -1000, 36, -1000,
	18, 19267, 29, 18539, -1000, -1000, -83, -90, -1000, 10498,
	975, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 829,
	1021, 1027, 1043, 670, 1125, -1000, 9029, 9029, 119, 119,
	119, 7573, -1000, -1000, 15620, 19267, 165, 19267, -156, 114,
	114, 114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 141, 19267, 568, 568, 261, 569, 19267, 106, 568,
	106, 106, 106, 19267, -1000, 224, -1000, -1000, -1000, 19267,
	568, 989, 359, 184, 264, 264, 264, -1000, 215, -1000,
	4927, 47, 52, -41, 1063, 48, -26, -1000, 359, 4927,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 136, -1000,
	-1000, 19267, 18175, 151, 299, -1000, -1000, -1000, -1000, -1000,
	-1000, 666, 496, -1000, 10498, 1650, 774, 774, -1000, -1000,
	202, -1000, -1000, 11590, 11590, 11590, 11590, 11590, 11590, 11590,
	11590, 11590, 11590, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 774, 223, -1000,
	10134, 774, 774, 774, 774, 774, 774, 774, 774, 10498,
	774, 774, 774, 774, 774, 774, 774, 774, 774, 774,
	774, 774, 774, 774, 774, 774, -1000, -1000, -1000, 1054,
	-1000, 849, -1000, -1000, -1000, 998, 10498, 10498, 1054, -1000,
	906, 9029, -1000, -1000, 917, -1000, -1000, -1000, -1000, 369,
	1075, -1000, 12318, 218, 1070, 17811, -1000, 16348, 17447, 771,
	7195, -115, -1000, -1000, -1000, 291, 15256, -1000, -1000, -1000,
	988, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 747, 19267, -1000, -1000, 340, 568, -1000, 805,
	-1000, 568, 4927, 140, 568, 318, 568, 19267, 19267, 4927,
	4927, 4927, 57, 99, 89, 19267, 557, 769, 135, 19267,
	1011, 855, 19267, 568, 568, -1000, 6439, -1000, 4927, 359,
	-1000, 552, 10498, 4927, 4927, 4927, 19267, 4927, 4927, -1000,
	543, -1000, -1000, 374, -1000, -1000, -1000, -1000, -1000, -1000,
	4927, 4927, 373, 374, 373, -1000, -1000, -1000, -1000, 10498,
	264, -1000, 854, -1000, -1000, 27, -1000, -1000, -1000, -1000,
	-1000, 1094, -1000, -1000, -1000, -128, -1000, -1000, 10498, 10498,
	10498, 10498, 491, 269, 11590, 416, 328, 11590, 11590, 11590,
	11590, 11590, 11590, 11590, 11590, 11590, 11590, 11590, 11590, 11590,
	11590, 11590, 612, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 568, -1000, 1087, 676, 676, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 11954, 7937, 6439, 670, 736,
	1054, 9029, 9029, 10498, 10498, 9757, 9393, 9029, 993, 313,
	496, 19267, -1000, -1000, 11226, -1000, -1000, -1000, -1000, -1000,
	541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19267, 19267,
	9029, 9029, 9029, 9029, 9029, -1000, 1027, 670, 917, 1006,
	1082, 259, 560, 766, -1000, 410, 1027, 14892, 749, -1000,
	917, -1000, -1000, -1000, 19267, -1000, -1000, 17076, -1000, -1000,
	6061, 19267, 68, 19267, -1000, 760, 933, -1000, -1000, -1000,
	1013, 14164, 14528, 19267, 735, 648, -1000, -1000, 211, 6817,
	-115, -1000, 6817, 755, -1000, -127, -92, 8301, 191, -1000,
	-1000, -1000, -1000, 4549, 13046, 626, 363, -75, -1000, -1000,
	-1000, 795, -1000, 795, 795, 795, 795, -13, -13, -13,
	-13, -1000, -1000, -1000, -1000, -1000, 831, 830, -1000, 795,
	795, 795, 795, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	828, 828, 828, 801, 801, 91, 10498, 835, -1000, 19267,
	4927, 1010, 4927, -1000, 139, -1000, -1000, -1000, 19267, 19267,
	19267, 19267, 19267, 174, -1000, 19267, 19267, 764, -1000, 19267,
	4927, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 496,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19267, -1000, -1000,
	-1000, -1000, 359, 19267, 19267, 19267, 359, 496, -1000, 19267,
	19267, -1000, -1000, -1000, -1000, -1000, 496, 269, 536, 391,
	-1000, -1000, 442, -1000, -1000, 2126, -1000, -1000, -1000, -1000,
	416, 11590, 11590, 11590, 1053, 2126, 2101, 586, 2254, 222,
	371, 371, 238, 238, 238, 238, 238, 606, 606, -1000,
	-1000, -1000, 541, -1000, -1000, -1000, 541, 9029, 9029, 762,
	774, 210, -1000, 829, -1000, -1000, 1027, 715, 715, 388,
	585, 326, 1068, 715, 307, 1065, 715, 715, 9029, -1000,
	-1000, 325, -1000, 10498, 541, -1000, 209, -1000, 1380, 759,
	757, 715, 541, 541, 715, 715, 998, -1000, -1000, 967,
	-1000, 900, 10498, 10498, 10498, -1000, -1000, -1000, 998, 1032,
	-1000, 918, 913, 1062, 9029, 16348, 917, -1000, -1000, -1000,
	208, 1062, 768, 774, -1000, 19267, 16348, 16348, 16348, 16348,
	16348, -1000, 876, 874, -1000, 872, 866, 905, 19267, -1000,
	721, 670, 14164, 198, 774, -1000, 16712, -1000, -1000, 68,
	623, 16348, 19267, -1000, -1000, 16348, 19267, 5683, -1000, 755,
	-115, -47, -1000, -1000, -1000, -1000, 496, -1000, 641, 750,
	4171, -1000, -1000, -1000, -1000, 100, -1000, -1000, 826, 568,
	-1000, 1002, 280, 280, 258, 568, 999, -1000, -1000, -1000,
	-1000, 991, -1000, 345, -97, -1000, -1000, 453, -13, -13,
	-1000, -1000, 191, 986, 191, 191, 191, 542, 542, -1000,
	-1000, -1000, -1000, -1000, 444, -1000, -1000, -1000, 398, -1000,
	-1000, 805, 545, 853, 19267, 4927, -1000, -1000, -1000, -1000,
	321, 321, 268, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 66, 833, -1000, -1000, -1000, -1000,
	-11, 56, 121, -1000, 4927, -1000, 373, -1000, -1000, -1000,
	373, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1053, 2126,
	1802, -1000, 11590, 11590, -1000, -1000, 715, 715, 9029, 6439,
	1054, 998, -1000, -1000, 182, 612, 182, 11590, 11590, -1000,
	11590, 11590, -1000, -168, 788, 301, -1000, 10498, 510, -1000,
	6439, -1000, 11590, 11590, -1000, -1000, -1000, -1000, -1000, -1000,
	498, 538, 898, 496, 496, -1000, -1000, 19267, -1000, -1000,
	-1000, -1000, 1059, 10498, -1000, 744, -1000, 5305, 1027, 852,
	19267, 774, 1094, 13423, 19267, 785, -1000, 287, 933, 817,
	848, 789, -1000, -1000, -1000, -1000, 870, -1000, 868, -1000,
	-1000, -1000, -1000, -1000, 670, -1000, 148, 144, 142, 19267,
	-1000, 1062, 16348, 770, -1000, 770, -1000, 205, -1000, -1000,
	-1000, -139, -100, -1000, -1000, -1000, 4549, -1000, 4549, -1000,
	19267, 93, -1000, 568, 568, 568, -1000, -1000, -1000, 803,
	847, 11590, -1000, -1000, -1000, 609, 191, 191, -1000, 343,
	-1000, -1000, -1000, 713, -1000, 711, 738, 705, 7, 19267,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19267,
	-1000, -1000, -1000, -1000, -1000, 19267, -174, 568, 19267, 19267,
	19267, 19267, -1000, 359, 359, -1000, 11590, 2126, 2126, -1000,
	-1000, 541, -1000, 1027, -1000, 541, 795, 795, -1000, 795,
	801, -1000, 795, 11, 795, 10, 541, 541, 2086, 2036,
	1929, 1359, 774, -163, -1000, 496, 10498, -1000, 1704, 1611,
	532, -13, -1000, -1000, -1000, 1057, 1042, 496, -1000, -1000,
	-1000, 1004, 754, 640, -1000, -1000, 8665, 702, 912, 193,
	698, -1000, 1054, 19267, 10498, -1000, -1000, 10498, 799, -1000,
	10498, -1000, -1000, -1000, 1054, 774, 774, 774, 698, 1054,
	770, -1000, -1000, 240, -1000, -1000, -1000, 4171, -1000, 696,
	-1000, 795, -1000, 999, -1000, -1000, -1000, 19267, -49, 1081,
	2126, -1000, -1000, -1000, -1000, -1000, -13, 529, -13, 385,
	-1000, 384, -1000, -1000, -226, 4927, -1000, -1000, -1000, -1000,
	1000, -1000, 6439, -1000, -1000, 794, 834, -1000, -1000, -1000,
	-1000, 2126, -1000, 998, -1000, -1000, 153, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11590, 11590, 11590, 11590, 11590,
	1027, 516, 496, 11590, 11590, -13, -51, -1000, 10498, 10498,
	996, -1000, 774, -1000, 681, 19267, 774, 19267, -1000, 19267,
	1027, -1000, 496, 496, 19267, 496, 15984, 19267, 19267, 13787,
	1027, -1000, 197, 19267, -1000, 692, -1000, 235, -1000, -82,
	191, -1000, 191, 594, 589, -1000, -1000, 774, 734, -1000,
	279, 19267, 19267, -1000, -1000, -1000, 1380, 1380, 1380, 1380,
	63, 541, -1000, 1380, 1380, -278, -1000, 970, 963, 496,
	666, 1079, -1000, 774, 1094, 188, 640, -1000, -1000, -1000,
	678, 669, -1000, 669, 669, 198, -1000, 197, -1000, 568,
	277, 506, -1000, 81, 19267, 330, 995, -1000, 994, -1000,
	-1000, -1000, -1000, -1000, 65, 6439, 4549, 664, -1000, -1000,
	-1000, -1000, -1000, 541, 55, -181, -1000, -1000, -1000, -51,
	157, -1000, 924, 922, 1037, 19267, 640, 19267, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 380, -1000, -1000, 19267, -1000,
	-1000, 503, -1000, -1000, 598, -1000, 19267, -1000, -1000, 833,
	-1000, 895, -172, -184, 937, 940, 940, 963, 1033, 959,
	949, -1000, 479, 587, -1000, -1000, 790, -1000, -1000, 65,
	907, -174, -1000, 892, -1000, 932, 438, -1000, -1000, -1000,
	-1000, 477, -1000, 1031, 1005, -1000, 19267, -1000, 62, -1000,
	-178, -1000, 436, -1000, -1000, -1000, 455, 392, 577, 58,
	-182, -1000, -1000, -1000, -1000, 846, 774, -190, 842, -1000,
	1074, 10862, -1000, -1000, 1078, 217, 217, 1380, 541, -1000,
	-1000, -1000, 90, 401, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1363, 1361, 25, 77, 87, 1360, 1359, 1358, 1356,
	112, 110, 109, 1355, 1354, 1353, 1347, 1345, 1344, 1343,
	1342, 1341, 1339, 1338, 1337, 1336, 1335, 1334, 1333, 1330,
	1329, 1327, 1325, 1321, 99, 1319, 1317, 1314, 1312, 94,
	1307, 1306, 1304, 1301, 1300, 55, 235, 53, 76, 1299,
	71, 1514, 1298, 43, 80, 74, 1297, 41, 1290, 1288,
	90, 1286, 1284, 66, 1283, 1282, 64, 1281, 59, 1280,
	17, 39, 1278, 1277, 1276, 1275, 96, 2115, 1274, 1272,
	18, 1271, 1268, 120, 1267, 75, 33, 22, 37, 29,
	1266, 72, 1265, 10, 1264, 73, 1263, 1261, 1260, 1258,
	30, 1257, 68, 1255, 70, 1252, 11, 7, 1250, 1249,
	1247, 1243, 1241, 1240, 9, 1237, 1236, 1233, 67, 1232,
	8, 63, 38, 20, 12, 1231, 1230, 27, 92, 58,
	84, 1226, 1223, 1219, 585, 1218, 1217, 49, 1215, 105,
	1214, 23, 95, 106, 544, 1213, 1212, 1211, 1210, 1209,
	1208, 51, 1064, 1547, 16, 91, 1207, 1205, 1202, 2620,
	45, 65, 19, 1201, 1200, 1199, 89, 57, 50, 512,
	1197, 42, 1195, 1194, 1189, 1188, 1186, 1181, 1180, 69,
	1166, 1164, 1163, 35, 24, 79, 32, 1162, 1160, 1159,
	1158, 48, 83, 1157, 1153, 62, 61, 1151, 97, 28,
	1143, 1142, 1138, 1134, 1133, 31, 13, 1132, 21, 1131,
	14, 1130, 36, 34, 1128, 6, 1125, 15, 1121, 3,
	0, 1110, 5, 56, 1, 1107, 2, 1106, 1103, 1102,
	1395, 4, 81, 1100, 111,
}
var yyR1 = [...]int{

	0, 228, 229, 229, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 220, 220, 220, 21, 33, 3, 3, 3, 3,
	2, 2, 8, 9, 4, 5, 5, 10, 10, 38,
	38, 11, 12, 12, 12, 12, 232, 232, 60, 60,
	61, 61, 121, 121, 13, 14, 14, 130, 130, 129,
	129, 129, 131, 131, 131, 131, 169, 169, 15, 15,
	15, 15, 15, 15, 15, 222, 222, 221, 219, 219,
	218, 218, 217, 22, 201, 203, 203, 202, 202, 202,
	202, 202, 202, 192, 172, 172, 172, 172, 175, 175,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 174,
	174, 174, 174, 174, 176, 176, 176, 176, 176, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 178, 178, 178, 178, 178, 178,
	178, 178, 191, 191, 179, 179, 185, 185, 186, 186,
	186, 188, 188, 189, 189, 145, 145, 145, 181, 181,
	182, 182, 187, 187, 183, 183, 183, 184, 184, 184,
	190, 190, 190, 190, 190, 180, 180, 193, 193, 211,
	211, 210, 210, 210, 200, 200, 207, 207, 207, 207,
	207, 207, 197, 197, 197, 198, 198, 196, 196, 199,
	199, 209, 209, 208, 194, 194, 195, 195, 212, 212,
	212, 212, 212, 213, 225, 226, 224, 224, 224, 224,
	224, 146, 146, 146, 204, 204, 204, 205, 205, 205,
	206, 206, 206, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 216, 214, 214, 215, 215, 17,
	23, 23, 18, 18, 18, 18, 18, 19, 19, 24,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	138, 138, 227, 227, 140, 140, 136, 136, 139, 139,
	137, 137, 137, 141, 141, 141, 142, 142, 170, 170,
	170, 26, 26, 28, 28, 29, 30, 30, 164, 164,
	165, 165, 31, 32, 37, 37, 37, 37, 37, 37,
	40, 40, 40, 7, 7, 7, 7, 36, 36, 36,
	6, 6, 27, 27, 27, 27, 20, 233, 34, 35,
	35, 39, 39, 39, 41, 41, 41, 44, 44, 44,
	47, 47, 49, 49, 49, 49, 49, 50, 50, 50,
	50, 50, 50, 46, 46, 48, 48, 48, 48, 156,
	156, 156, 155, 155, 52, 52, 53, 53, 54, 54,
	55, 55, 55, 92, 69, 69, 120, 120, 122, 122,
	56, 56, 56, 56, 57, 57, 58, 58, 59, 59,
	163, 163, 162, 162, 162, 161, 161, 62, 62, 62,
	64, 63, 63, 63, 63, 65, 65, 67, 67, 66,
	66, 68, 70, 70, 70, 70, 70, 71, 71, 51,
	51, 51, 51, 51, 51, 51, 51, 133, 133, 73,
	73, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 84, 84, 84, 84, 84, 84, 74, 74, 74,
	74, 74, 74, 74, 45, 45, 85, 85, 85, 91,
	86, 86, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 81, 81, 81, 81,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 234,
	234, 83, 82, 82, 82, 82, 82, 82, 82, 43,
	43, 43, 43, 43, 168, 168, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 96,
	96, 42, 42, 94, 94, 95, 97, 97, 93, 93,
	93, 76, 76, 76, 76, 76, 76, 76, 76, 78,
	78, 78, 98, 98, 99, 99, 100, 100, 101, 101,
	102, 103, 103, 103, 104, 104, 104, 104, 118, 118,
	118, 105, 105, 105, 105, 110, 110, 110, 106, 106,
	108, 108, 108, 109, 109, 109, 107, 113, 113, 115,
	115, 114, 114, 112, 112, 117, 117, 116, 116, 111,
	111, 75, 75, 75, 75, 75, 119, 119, 119, 119,
	123, 123, 87, 87, 89, 89, 88, 90, 124, 124,
	127, 125, 125, 128, 128, 128, 128, 128, 126, 126,
	126, 158, 158, 158, 132, 132, 143, 143, 144, 144,
	134, 134, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 135, 135, 135, 148, 148, 148, 149, 149,
	150, 150, 150, 157, 157, 153, 153, 154, 154, 159,
	159, 160, 160, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 230, 231, 166, 167,
	167, 167,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 3, 5, 6, 6, 7,
	4, 6, 5, 7, 8, 1, 3, 7, 8, 1,
	1, 9, 9, 8, 7, 7, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 1, 3,
	4, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 3, 1, 10, 11,
	11, 12, 1, 5, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 7, 7, 7, 7, 4, 5,
	4, 4, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 2, 7, 2, 3, 4, 5, 7, 5,
	4, 2, 4, 4, 3, 3, 5, 2, 3, 3,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 5, 0, 1,
	0, 1, 2, 3, 0, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 3, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 2, 3, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 4, 5, 5, 0, 2, 1,
	3, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	8, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 0, 9, 3, 5, 0, 3, 3, 0, 1,
	0, 2, 2, 0, 2, 2, 2, 0, 3, 0,
	3, 0, 3, 0, 4, 0, 3, 0, 4, 0,
	1, 2, 1, 5, 4, 4, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 3, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -228, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -33, -4,
	-230, 6, 7, 8, -38, 10, 11, 31, -22, 139,
	140, 142, 141, 175, 143, 168, 69, 189, 190, 192,
	193, 194, 195, -40, 173, 174, 32, 33, 145, 35,
	40, 73, 9, 282, 170, 169, 26, -229, 384, -39,
	5, -100, 16, -3, -34, -233, -34, -34, -34, -34,
	-34, -34, -201, -203, 73, 112, -150, 149, 93, 274,
	146, 147, 153, -153, -220, -152, 76, 77, 78, 292,
	161, 324, 325, 189, 203, 197, 224, 216, 293, 326,
	162, 214, 217, 261, 159, 327, 244, 251, 87, 192,
	270, 328, 46, 39, 171, 212, 208, 329, 301, 206,
	45, 28, 44, 330, 253, 229, 43, 331, 297, 255,
	207, 252, 145, 332, 164, 380, 157, 333, 230, 234,
	334, 262, 47, 335, 336, 337, 201, 202, 338, 160,
	264, 228, 158, 34, 256, 294, 53, 179, 265, 41,
	232, 40, 339, 227, 223, 48, 340, 341, 342, 343,
	226, 200, 222, 57, 236, 235, 237, 260, 219, 344,
	345, 346, 165, 347, 209, 19, 348, 349, 350, 51,
	351, 352, 268, 174, 353, 49, 177, 354, 355, 356,
	357, 358, 359, 254, 231, 233, 154, 181, 250, 296,
	360, 266, 205, 361, 166, 178, 173, 269, 167, 362,
	363, 364, 365, 366, 367, 368, 193, 38, 369, 370,
	371, 372, 188, 263, 272, 56, 241, 373, 199, 156,
	374, 190, 50, 185, 246, 42, 220, 180, 375, 376,
	210, 211, 225, 198, 221, 191, 381, 182, 175, 377,
	271, 242, 298, 218, 215, 186, 378, 183, 184, 379,
	382, 257, 247, 258, 259, 248, 187, 295, 267, 213,
	243, -135, 149, 274, 146, 248, 295, 147, 147, 148,
	149, 274, 146, 147, -66, -159, -220, -152, 149, 147,
	130, 217, 261, 139, 245, 256, 257, 253, -140, 254,
	181, -170, 147, -136, 244, 247, 248, 187, -227, -220,
	255, 263, 262, 249, 259, 258, -159, 191, -164, 196,
	-153, 194, -66, -37, 380, 143, -166, -166, 246, 246,
	-166, -86, -51, -72, 96, -77, 30, 24, -76, -73,
	-93, -90, -91, 130, 131, 133, 132, 134, 119, 120,
	127, 97, 135, -81, -79, -80, -82, 80, 79, 88,
	81, 82, 83, 84, 89, 90, 91, -153, -159, -88,
	-230, 63, 64, 283, 284, 285, 286, 291, 287, 99,
	52, 273, 281, 280, 279, 277, 278, 275, 276, 289,
	290, 152, 274, 146, 125, 282, -220, -152, 39, -5,
	-4, -230, 6, 21, 22, -104, 18, 17, -231, 75,
	-41, -49, 58, 59, -50, 22, 36, 62, 60, -35,
	-48, 121, -51, -159, -48, -134, 151, -134, -134, -125,
	-169, 191, -128, 263, 262, -154, -126, -153, -151, 261,
	217, 260, 144, 299, 95, 23, 25, 239, 98, 130,
	17, 99, 129, 283, 139, 67, 300, 275, 276, 273,
	285, 286, 274, 245, 30, 11, 302, 26, 169, 22,
	36, 123, 141, 102, 103, 172, 24, 170, 91, 305,
	20, 70, 12, 14, 306, 307, 15, 152, 151, 114,
	148, 65, 9, 135, 27, 111, 61, 308, 29, 309,
	310, 311, 312, 63, 112, 18, 277, 278, 32, 313,
	291, 176, 125, 68, 54, 96, 314, 315, 89, 316,
	92, 71, 93, 16, 66, 37, 317, 318, 319, 320,
	113, 142, 282, 64, 321, 146, 6, 288, 31, 168,
	62, 322, 147, 101, 289, 290, 150, 90, 5, 153,
	33, 10, 69, 72, 279, 280, 281, 52, 100, 13,
	323, 94, -202, 112, -192, -195, -153, 163, -213, 159,
	-66, 148, -66, 282, -144, 152, -144, -144, 147, -66,
	-220, -220, 139, 141, 144, 71, 80, -23, -66, -143,
	152, -220, -143, -143, -143, -66, 136, -66, -220, 31,
	-141, 112, 13, 274, -220, 181, 147, 182, 149, -142,
	112, -142, -142, -197, 148, 34, 160, -167, -230, -154,
	185, 186, 185, -139, -138, 251, 252, 246, 250, 13,
	186, 246, 184, -141, -167, 150, -153, -36, -153, 80,
	-7, -3, -11, -10, -12, 104, -166, -166, 74, 95,
	93, 94, 111, -51, -74, 114, 96, 112, 113, 98,
	116, 115, 126, 119, 120, 121, 122, 123, 124, 125,
	117, 118, 129, 104, 105, 106, 107, 108, 109, 110,
	-133, -230, -91, -230, 137, 138, -77, -77, -77, -77,
	-77, -77, -77, -77, -77, -77, -230, 136, -2, -86,
	-4, -230, -230, -230, -230, -230, -230, -230, -230, -96,
	-51, -230, -234, -83, -230, -234, -83, -234, -83, -234,
	-230, -234, -83, -234, -83, -234, -234, -83, -230, -230,
	-230, -230, -230, -230, -230, -166, -100, -3, -34, -118,
	20, 32, -51, -101, -102, -51, -100, 54, -46, -48,
	-50, 58, 59, 86, 12, -156, -155, 23, -153, 80,
	136, 12, -67, 27, -66, -53, -54, -55, -56, -69,
	-92, -230, -66, 12, -60, -61, -66, -68, -159, 74,
	191, -128, -169, -130, -129, 264, 266, 104, -158, -153,
	80, 30, 31, 75, 74, -66, -172, -175, -177, -176,
	-178, -173, -174, 214, 215, 130, 218, 220, 221, 222,
	223, 224, 225, 226, 227, 228, 229, 31, 171, 210,
	211, 212, 213, 230, 231, 232, 233, 234, 235, 236,
	237, 197, 216, 293, 198, 199, 200, 201, 202, 203,
	205, 206, 207, 208, 209, -220, 73, -220, -167, 149,
	-220, 96, -220, -66, -66, -167, -167, -167, 183, 183,
	147, 147, 188, -66, 80, 74, 150, -60, 24, 71,
	-66, -220, -220, -160, -159, -151, -167, -141, 80, -51,
	-167, -167, -167, -66, -167, -167, 80, -198, 12, 114,
	-167, -167, -137, 12, 114, -198, -137, -51, -142, 71,
	-165, 194, 228, 381, 382, 383, -51, -51, -51, -51,
	-84, 89, 96, 90, 91, -77, -85, -88, -91, 85,
	114, 112, 113, 98, -77, -77, -77, -77, -77, -77,
	-77, -77, -77, -77, -77, -77, -77, -77, -77, -168,
	-220, 80, -220, -76, -76, -153, -47, 22, 36, -46,
	-154, -160, -151, -39, -231, -231, -100, -46, -46, -51,
	-51, -93, 80, -46, -93, 80, -46, -46, -44, 22,
	36, -94, -95, 100, -93, -153, -159, -231, -77, -153,
	-153, -46, -47, -47, -46, -46, -104, -231, -105, 27,
	10, 114, 74, 19, 74, -103, 25, 26, -104, -78,
	-153, 81, 84, -52, 74, 12, -50, -66, -155, 121,
	-160, -66, -121, 177, -66, 31, 74, -62, -64, -63,
	-65, 61, 65, 67, 62, 63, 64, 68, -163, 23,
	-53, -3, -230, -162, 177, -161, 23, -159, 80, -66,
	-60, -232, 74, 12, 72, -232, 74, 136, -128, -130,
	74, 265, 267, 268, 71, 92, -51, -184, 129, -204,
	-205, -206, -154, 80, 81, -192, -193, -194, -207, 163,
	-212, 154, 156, 157, 153, -196, 164, -213, 148, 29,
	75, -145, 89, 96, -188, 242, -179, 73, -179, -179,
	-179, -179, -183, 217, -183, -183, -183, 73, 73, -179,
	-179, -179, -179, -185, 73, -185, -185, -186, 73, -186,
	-213, 159, -51, -157, 72, -66, -167, 24, -167, -147,
	144, 141, 142, -216, 140, 239, 217, 87, 30, 16,
	283, 177, 298, -220, 178, -66, -66, -66, -66, -66,
	144, 141, -66, -66, -66, -167, -66, -141, -159, -159,
	-66, -141, -66, -153, 89, 90, 91, -85, -77, -77,
	-77, -45, 172, 95, -231, -231, -46, -46, -230, 136,
	-5, -104, -231, -231, 74, 72, 23, 12, 12, -231,
	12, 12, -231, -231, -46, -97, -95, 102, -51, -231,
	136, -231, 74, 74, -231, -231, -231, -231, -231, -118,
	37, 45, 56, -51, -51, -102, -118, -132, 20, 12,
	52, 52, -71, 13, -48, -53, -50, 136, -71, -75,
	31, 52, -3, -230, -230, -124, -127, -93, -54, -55,
	-55, -54, -55, 61, 61, 61, 66, 61, 66, 61,
	-63, -159, -231, -231, -3, -70, 69, 151, 70, -230,
	-161, -121, 72, -53, -66, -53, -68, -159, 121, -129,
	-131, 269, 266, 272, -220, 80, 74, -206, 104, -195,
	73, -220, 29, -196, -196, -196, -199, -220, -199, 29,
	-181, 30, 89, -189, 243, 81, -183, -183, -184, 31,
	-184, -184, -184, -191, 80, -191, 81, 81, 75, 71,
	-153, -167, -166, -223, 159, 155, 163, 164, 157, 76,
	77, 78, 148, 29, 154, 156, 177, 153, -223, -148,
	-149, 150, 23, 148, 29, 177, -222, 72, 183, 239,
	183, 150, -167, -137, -137, -45, 95, -77, -77, -231,
	-231, -47, -154, -100, -118, -171, 130, 214, 171, 212,
	208, 228, 219, 241, 210, 242, -168, -171, -77, -77,
	-77, -77, 292, -100, 103, -51, 101, -154, -77, -77,
	38, 80, 80, 57, -66, -98, 14, -51, 121, -104,
	-123, 71, -124, -87, -89, -88, -230, -119, -231, -153,
	-122, -153, -71, 74, 104, -58, -57, 71, 72, -59,
	71, -57, 61, 61, -231, 148, 148, 148, -122, -71,
	-53, -71, -71, 136, 266, 270, 271, -205, -206, -209,
	-208, -153, -212, 164, -199, -199, -199, 73, -182, 71,
	-77, 75, -184, -184, -220, 130, 75, 74, 75, 74,
	75, 74, -146, 330, 96, -66, -166, -166, -66, -166,
	-153, -219, 295, -221, -220, -153, -153, -153, -66, -141,
	-141, -77, -231, -104, -231, -179, -179, -179, -186, -179,
	202, -179, 202, -231, -231, 20, 20, 20, 20, -230,
	-42, 288, -51, 74, 74, 80, -183, -99, 15, 17,
	28, -123, 74, -231, -231, 74, 52, 136, -231, 74,
	-100, -127, -51, -51, 73, -51, -230, -230, -230, -231,
	-100, -71, 75, 74, -179, -120, -153, -187, 239, 10,
	-183, 80, -183, 81, 81, 330, -167, 27, -218, -217,
	-154, 73, 72, -118, -183, -220, -77, -77, -77, -77,
	-77, -104, 80, -77, -77, -183, -107, -112, -139, -51,
	-86, 29, -89, 52, -3, -153, -87, -153, -153, -104,
	-120, -120, -231, -120, -120, -162, -104, -211, -210, 72,
	158, 87, -208, 75, 74, -190, 154, 29, 153, -80,
	-184, -184, 75, 75, -230, 74, 104, -120, -66, -231,
	-231, -231, -231, -43, 114, 295, -231, -231, -231, -110,
	380, -113, 41, -114, 42, 10, -87, 136, 75, -231,
	-231, -231, -70, -210, -220, -200, 104, 80, 166, -153,
	-180, 87, 29, 29, -214, -215, 177, -217, -206, 75,
	-231, 293, 68, 296, -107, 46, 220, -115, 50, -116,
	-111, 51, 17, -124, -153, 81, -66, 80, -231, 74,
	-153, -222, 57, 294, 297, -108, 48, -106, 47, -106,
	-114, 17, -117, 43, 44, 80, 73, -215, 52, -219,
	57, -109, 49, 71, 92, 80, 17, 17, -120, 179,
	295, 71, 92, 80, 80, 75, 180, 296, -225, -226,
	71, -230, 297, -226, 71, 11, 10, -77, 176, -224,
	167, 162, 165, 31, -224, -231, -231, 161, 30, 89,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 636,
	0, 377, 377, 377, 377, 377, 377, 377, 0, 740,
	732, 0, 0, 0, 0, -2, 342, 343, 0, 345,
	-2, 0, 0, 354, 1068, 1068, 0, 0, 1068, 0,
	0, 1066, 49, 50, 360, 361, 362, 1, 3, 0,
	381, 644, 0, 0, -2, 379, 0, 0, 720, 720,
	720, 0, 78, 79, 0, 0, 0, 1051, 0, 718,
	718, 718, 741, 742, 745, 746, 31, 32, 33, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	716, 716, 716, 0, 288, 459, 749, 750, 1051, 0,
	0, 0, 333, 0, 336, 336, 336, 302, 0, 304,
	1069, 0, 0, 0, 311, 0, 0, 317, 333, 1069,
	325, 339, 340, 327, 322, 323, 341, 344, 0, 349,
	352, 0, 367, 0, 919, 359, 372, 373, 1068, 1068,
	376, 34, 510, 469, 0, 475, 477, 0, 512, 513,
	514, 515, 516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 543, 544, 545, 621, 622, 623,
	624, 625, 626, 627, 628, 479, 480, 618, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 609,
	0, 579, 579, 579, 579, 579, 579, 579, 579, 0,
	0, 0, 0, 0, 0, 0, -2, -2, 1068, 636,
	45, 0, 377, 382, 383, 648, 0, 0, 636, 1067,
	0, 0, -2, -2, 393, 399, 400, 401, 402, 378,
	0, 405, 409, 0, 0, 0, 721, 0, 0, 64,
	0, 1039, 701, -2, -2, 0, 0, 747, 748, -2,
	886, -2, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 0, 0, 97, 98, 0, 0, 217, 888,
	95, 0, 1069, 0, 0, 0, 0, 0, 0, 1069,
	1069, 1069, 0, 0, 0, 0, 733, 279, 0, 0,
	0, 0, 0, 0, 0, 287, 0, 289, 1069, 333,
	292, 0, 0, 1069, 1069, 1069, 0, 1069, 1069, 299,
	0, 300, 301, 0, 202, 203, 204, 305, 1070, 1071,
	1069, 1069, 330, 0, 330, 328, 329, 320, 321, 0,
	336, 314, 315, 318, 319, 350, 353, 370, 368, 369,
	371, 363, 364, 365, 366, 0, 374, 375, 0, 0,
	0, 0, 0, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 497, 498, 499, 500, 501, 502, 503,
	476, 0, 490, 0, 0, 0, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 0, 390, 0, 0, 0,
	636, 0, 0, 0, 0, 0, 0, 0, 387, 0,
	610, 0, 563, 571, 0, 564, 572, 565, 573, 566,
	0, 567, 574, 568, 575, 569, 570, 576, 0, 0,
	0, 390, 390, 0, 0, 35, 644, 0, 392, 651,
	0, 0, 645, 637, 638, 641, 644, 0, 414, 403,
	394, 397, 398, 380, 0, 406, 410, 0, 412, 413,
	0, 0, 62, 0, 458, 0, 416, 418, 419, 420,
	440, 0, 442, 0, 0, 0, 58, 60, 459, 0,
	1039, 707, 0, 66, 67, 0, 0, 0, 177, 711,
	712, 713, 709, 234, 0, 0, 165, 161, 105, 106,
	107, 154, 109, 154, 154, 154, 154, 174, 174, 174,
	174, 137, 138, 139, 140, 141, 0, 0, 124, 154,
	154, 154, 154, 144, 145, 146, 147, 148, 149, 150,
	151, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	156, 156, 156, 158, 158, 0, 0, 743, 81, 0,
	1069, 0, 1069, 93, 0, 248, 250, 251, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 282, 717, 0,
	1069, 285, 286, 460, 751, 752, 290, 291, 334, 335,
	293, 294, 295, 296, 297, 298, 337, 0, 205, 206,
	306, 310, 333, 0, 0, 0, 333, 312, 313, 0,
	0, 351, 355, 356, 357, 358, 511, 470, 471, 472,
	474, 491, 0, 493, 495, 481, 482, 506, 507, 508,
	0, 0, 0, 0, 504, 486, 0, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 531,
	594, 595, 0, 529, 530, 541, 0, 0, 0, 391,
	619, 0, -2, 0, 509, 696, 644, 0, 0, 0,
	0, 514, 621, 0, 514, 621, 0, 0, 0, 388,
	389, 616, 613, 0, 0, 618, 0, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 46, 36, 0,
	649, 0, 0, 0, 0, 640, 642, 643, 648, 0,
	629, 0, 0, 467, 0, 0, 395, 42, 411, 407,
	0, 467, 0, 0, 457, 0, 0, 0, 0, 0,
	0, 447, 0, 0, 450, 0, 0, 0, 0, 441,
	0, 0, 0, 462, 980, 443, 0, 445, 446, -2,
	0, 0, 0, 56, 57, 0, 0, 0, 702, 65,
	0, 0, 70, 71, 703, 704, 705, 706, 0, 94,
	235, 237, 240, 241, 242, 99, 101, 102, 0, 0,
	215, 990, 1023, 920, 209, 209, 918, 222, 207, 208,
	96, 168, 166, 0, 163, 162, 108, 0, 174, 174,
	131, 132, 177, 0, 177, 177, 177, 0, 0, 125,
	126, 127, 128, 119, 0, 120, 121, 122, 0, 123,
	216, 0, 0, 0, 0, 1069, 83, 719, 84, 1068,
	0, 0, 735, 249, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 0, 85, 253, 255, 254, 258,
	0, 0, 0, 280, 1069, 284, 330, 307, 331, 332,
	330, 309, 316, 347, 492, 494, 496, 483, 504, 487,
	0, 484, 0, 0, 478, 546, 0, 0, 390, 0,
	636, 648, 550, 551, 0, 0, 0, 0, 0, 587,
	0, 0, 588, 0, 636, 0, 614, 0, 0, 562,
	0, 581, 0, 0, 582, 583, 584, 585, 586, 38,
	0, 0, 0, 646, 647, 639, 37, 0, 714, 715,
	630, 631, 632, 0, 404, 415, 396, 0, 644, 690,
	0, 0, 682, 0, 0, 467, 698, 0, 417, 436,
	438, 0, 433, 448, 449, 451, 0, 453, 0, 455,
	456, 421, 422, 423, 0, 424, 0, 0, 0, 0,
	444, 467, 0, 467, 59, 467, 61, 0, 461, 68,
	69, 0, 0, 75, 178, 179, 0, 238, 0, 100,
	0, 0, 196, 209, 209, 209, 200, 210, 201, 0,
	170, 0, 167, 104, 164, 0, 177, 177, 133, 0,
	134, 135, 136, 0, 152, 0, 0, 0, 231, 0,
	744, 82, 243, 1068, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 1068, 0,
	1068, 736, 737, 738, 739, 0, 88, 0, 0, 0,
	0, 0, 283, 333, 333, 485, 0, 505, 488, 547,
	548, 0, 620, 644, 40, 0, 154, 154, 599, 154,
	158, 602, 154, 604, 154, 607, 0, 0, 0, 0,
	0, 0, 0, 611, 561, 617, 0, 619, 0, 0,
	0, 174, 653, 650, 39, 634, 0, 468, 408, 43,
	47, 0, 690, 681, 692, 694, 0, 0, 0, 686,
	0, 428, 636, 0, 0, 430, 437, 0, 0, 431,
	0, 432, 452, 454, -2, 0, 0, 0, 0, 636,
	467, 54, 55, 0, 72, 73, 74, 236, 239, 0,
	211, 154, 214, 0, 197, 198, 199, 0, 172, 0,
	169, 155, 129, 130, 175, 176, 174, 0, 174, 0,
	159, 0, 223, 232, 0, 1069, 244, 245, 246, 247,
	0, 252, 0, 86, 87, 0, 0, 257, 281, 303,
	308, 489, 549, 648, 552, 596, 174, 600, 601, 603,
	605, 606, 608, 554, 553, 0, 0, 0, 0, 0,
	644, 0, 615, 0, 0, 174, 673, 44, 0, 0,
	0, 48, 0, 695, 0, 0, 0, 0, 63, 0,
	644, 699, 700, 434, 0, 439, 0, 0, 0, 442,
	644, 53, 188, 0, 213, 0, 426, 180, 173, 0,
	177, 153, 177, 0, 0, 233, 80, 0, 89, 90,
	0, 0, 0, 41, 597, 598, 0, 0, 0, 0,
	589, 0, 612, 0, 0, 655, 654, 667, 671, 635,
	633, 0, 693, 0, 685, 688, 684, 687, 429, 51,
	0, 0, 464, 0, 0, 462, 52, 187, 189, 0,
	194, 0, 212, 0, 0, 185, 0, 182, 184, 171,
	142, 143, 157, 160, 0, 0, 0, 0, 259, 555,
	557, 556, 558, 0, 0, 0, 560, 577, 578, 673,
	0, 666, 669, -2, 0, 0, 683, 0, 435, 463,
	465, 466, 425, 190, 191, 0, 195, 193, 0, 427,
	103, 0, 181, 183, 0, 275, 0, 91, 92, 85,
	559, 0, 0, 0, 660, 658, 658, 671, 0, 675,
	0, 680, 0, 691, 689, 192, 0, 186, 274, 0,
	0, 88, 590, 0, 593, 663, 0, 656, 659, 657,
	668, 0, 674, 0, 0, 672, 0, 276, 0, 256,
	591, 652, 0, 661, 662, 670, 0, 0, 0, 0,
	0, 664, 665, 676, 678, 218, 0, 0, 219, 220,
	0, 0, 592, 221, 0, 0, 0, 0, 0, 224,
	226, 227, 0, 0, 225, 277, 278, 228, 229, 230,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 97, 3, 3, 3, 124, 116, 3,
	73, 75, 121, 119, 74, 120, 136, 122, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 384,
	105, 104, 106, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 126, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 115, 3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 98, 99, 100, 101, 102, 103, 107, 108,
	109, 110, 111, 112, 113, 114, 117, 118, 123, 125,
	128, 129, 130, 131, 132, 133, 134, 135, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:365
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:404
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:424
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:430
		{
			yyVAL.statement = &Load{}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:436
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:476
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:496
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:504
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:521
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:533
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.insertAction = InsertAct
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:549
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:555
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:573
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:578
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:602
		{
			yyVAL.partitions = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:606
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.characteristic = ReadWrite
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.characteristic = ReadOnly
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:660
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.isolationLevel = Serializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.scope = SessionScope
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.scope = GlobalScope
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:680
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:691
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:700
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:704
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:708
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:713
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:728
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:750
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:756
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:763
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:774
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:780
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:799
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:803
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:809
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.literal = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1054
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1072
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.boolean = true
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			yyVAL.boolean = false
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1093
		{
			yyVAL.boolean = true
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1099
		{
			yyVAL.boolean = false
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.boolean = false
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.boolean = true
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1112
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolean = false
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.boolean = true
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1152
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.colKeyOpt = colKey
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1186
		{
			yyVAL.literal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1200
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1245
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1249
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1253
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1261
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1311
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1321
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1331
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1337
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1341
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 218:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1347
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 219:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1351
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 220:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1355
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 221:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1359
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1369
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1395
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1403
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1408
		{
			yyVAL.boolean = true
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.boolean = true
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1416
		{
			yyVAL.boolean = false
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1421
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.str = yyDollar[1].str
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1441
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1465
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1477
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1482
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1589
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 277:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1605
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1609
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1625
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1637
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1676
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1681
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1699
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1711
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1730
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1743
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 308:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1755
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1777
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1790
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1799
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1819
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = "extended "
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = "full "
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.showFilter = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.showFilter = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1907
		{
			yyVAL.scope = ImplicitScope
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.scope = SessionScope
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.scope = GlobalScope
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1925
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Begin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Begin{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.statement = &Commit{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Rollback{}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1956
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1961
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1974
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1979
		{
			yyVAL.explainType = EmptyType
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.explainType = JSONType
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.explainType = TreeType
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.explainType = VitessType
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.explainType = TraditionalType
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.explainType = AnalyzeType
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2050
		{
			yyVAL.statement = &OtherRead{}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			setAllowComments(yylex, true)
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2092
		{
			yyVAL.bytes2 = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2096
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.unionType = UnionBasic
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.unionType = UnionAll
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.unionType = UnionDistinct
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolean = false
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.boolean = true
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.boolean = true
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2141
		{
			yyVAL.selectExprs = nil
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.strs = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2166
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = SQLCacheStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = DistinctStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = DistinctStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = StraightJoinHint
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2220
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2225
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2245
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2249
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2259
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2277
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2283
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2293
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2313
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2326
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2330
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2334
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2338
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2346
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2350
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2356
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2358
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2361
		{
			yyVAL.empty = struct{}{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2366
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2374
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2381
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.joinType = NormalJoinType
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2391
		{
			yyVAL.joinType = NormalJoinType
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2395
		{
			yyVAL.joinType = NormalJoinType
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.joinType = StraightJoinType
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.joinType = LeftJoinType
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.joinType = LeftJoinType
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2415
		{
			yyVAL.joinType = RightJoinType
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.joinType = RightJoinType
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2425
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2464
		{
			yyVAL.indexHints = nil
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2468
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2476
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2480
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2515
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = nil
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2664
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2794
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 555:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 556:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 557:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2984
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3004
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3034
		{
			yyVAL.matchExprOption = NoOption
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3042
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3046
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = nil
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = string("")
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3140
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3150
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3169
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3173
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = &NullVal{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3226
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.exprs = nil
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = nil
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.orderBy = nil
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3253
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3269
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3274
		{
			yyVAL.orderDirection = AscOrder
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.orderDirection = AscOrder
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.orderDirection = DescOrder
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3287
		{
			yyVAL.limit = nil
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3295
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3299
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3304
		{
			yyVAL.lock = NoLock
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3308
		{
			yyVAL.lock = ForUpdateLock
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3312
		{
			yyVAL.lock = ShareModeLock
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3317
		{
			yyVAL.selectInto = nil
		}
	case 652:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3321
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3325
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3329
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3334
		{
			yyVAL.str = ""
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3338
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3342
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = ""
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.str = " header"
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3356
		{
			yyVAL.str = ""
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.str = " manifest on"
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3364
		{
			yyVAL.str = " manifest off"
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3369
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3373
		{
			yyVAL.str = " overwrite on"
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = " overwrite off"
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3383
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3388
		{
			yyVAL.str = ""
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3397
		{
			yyVAL.str = ""
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3401
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3406
		{
			yyVAL.str = ""
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3415
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3419
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.str = ""
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3428
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3433
		{
			yyVAL.str = ""
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3437
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3442
		{
			yyVAL.str = ""
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3446
		{
			yyVAL.str = " optionally"
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3467
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3471
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3475
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3485
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3489
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3493
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3498
		{
			yyVAL.updateExprs = nil
		}
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3502
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3508
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3512
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3518
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3522
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3544
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3548
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3564
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3570
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3574
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3578
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3582
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3586
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3594
		{
			yyVAL.bytes = []byte("charset")
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = &Default{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3618
		{
			yyVAL.boolean = false
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3620
		{
			yyVAL.boolean = true
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3623
		{
			yyVAL.boolean = false
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3625
		{
			yyVAL.boolean = true
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3628
		{
			yyVAL.ignore = false
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3630
		{
			yyVAL.ignore = true
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3636
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3638
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3640
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3642
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3644
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3646
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3648
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3650
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3652
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3656
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3660
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3666
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3674
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3676
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3678
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3682
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3684
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3687
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3689
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3694
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3696
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3700
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3717
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3721
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4067
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4076
		{
			decNesting(yylex)
		}
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4081
		{
			skipToEnd(yylex)
		}
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4086
		{
			skipToEnd(yylex)
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4090
		{
			skipToEnd(yylex)
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4094
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

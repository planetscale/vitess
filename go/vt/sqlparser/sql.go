//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const UNDERSCORE_UTF8MB4 = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const PRIMARY = 57452
const COLUMN = 57453
const CONSTRAINT = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const COLLATION = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const FULL = 57537
const PROCESSLIST = 57538
const COLUMNS = 57539
const NAMES = 57540
const CHARSET = 57541
const GLOBAL = 57542
const SESSION = 57543
const ISOLATION = 57544
const LEVEL = 57545
const READ = 57546
const WRITE = 57547
const ONLY = 57548
const REPEATABLE = 57549
const COMMITTED = 57550
const UNCOMMITTED = 57551
const SERIALIZABLE = 57552
const CURRENT_TIMESTAMP = 57553
const DATABASE = 57554
const CURRENT_DATE = 57555
const CURRENT_TIME = 57556
const LOCALTIME = 57557
const LOCALTIMESTAMP = 57558
const UTC_DATE = 57559
const UTC_TIME = 57560
const UTC_TIMESTAMP = 57561
const REPLACE = 57562
const CONVERT = 57563
const CAST = 57564
const SUBSTR = 57565
const SUBSTRING = 57566
const GROUP_CONCAT = 57567
const SEPARATOR = 57568
const MATCH = 57569
const AGAINST = 57570
const BOOLEAN = 57571
const LANGUAGE = 57572
const WITH = 57573
const QUERY = 57574
const EXPANSION = 57575
const UNUSED = 57576

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 264,
	152, 264,
	-2, 256,
	-1, 241,
	110, 589,
	-2, 585,
	-1, 242,
	110, 590,
	-2, 586,
	-1, 312,
	80, 750,
	-2, 58,
	-1, 313,
	80, 711,
	-2, 59,
	-1, 318,
	80, 693,
	-2, 551,
	-1, 320,
	80, 732,
	-2, 553,
	-1, 583,
	52, 41,
	54, 41,
	-2, 43,
	-1, 718,
	110, 592,
	-2, 588,
	-1, 925,
	5, 28,
	-2, 396,
	-1, 950,
	5, 27,
	-2, 526,
	-1, 1171,
	5, 28,
	-2, 527,
	-1, 1215,
	5, 27,
	-2, 529,
	-1, 1277,
	5, 28,
	-2, 530,
}

const yyPrivate = 57344

const yyLast = 11046

var yyAct = [...]int{

	273, 47, 1268, 864, 654, 780, 530, 1108, 246, 1177,
	1226, 1011, 1081, 577, 1077, 798, 891, 820, 858, 781,
	844, 220, 819, 529, 3, 575, 1080, 1054, 917, 214,
	1014, 444, 317, 53, 743, 969, 953, 683, 593, 1002,
	272, 753, 750, 958, 720, 769, 414, 462, 47, 468,
	830, 816, 592, 564, 299, 854, 225, 311, 777, 579,
	298, 899, 303, 474, 244, 482, 229, 308, 306, 52,
	1297, 219, 1287, 215, 216, 217, 218, 544, 1295, 881,
	1275, 1293, 865, 1286, 1072, 1274, 1165, 297, 418, 1114,
	1115, 1116, 1235, 880, 1103, 1104, 977, 1119, 1117, 976,
	1102, 233, 978, 812, 813, 183, 179, 180, 181, 248,
	57, 594, 455, 595, 811, 993, 837, 1189, 456, 453,
	885, 1204, 845, 427, 1154, 439, 1152, 213, 1294, 879,
	450, 451, 1292, 1269, 1035, 59, 60, 61, 62, 63,
	778, 428, 421, 177, 832, 752, 799, 801, 1233, 662,
	242, 1250, 495, 494, 504, 505, 497, 498, 499, 500,
	501, 502, 503, 496, 1227, 832, 506, 1032, 176, 653,
	177, 302, 987, 1034, 446, 968, 967, 1229, 876, 873,
	874, 76, 872, 966, 416, 188, 424, 191, 188, 441,
	178, 443, 518, 519, 1255, 1174, 445, 445, 445, 445,
	1041, 445, 933, 911, 692, 486, 434, 883, 886, 445,
	838, 1123, 188, 188, 76, 182, 440, 442, 188, 496,
	76, 800, 506, 832, 817, 689, 47, 506, 447, 448,
	449, 684, 452, 481, 1055, 893, 1260, 831, 314, 727,
	459, 515, 878, 845, 517, 1228, 1234, 1232, 1133, 471,
	956, 415, 596, 725, 726, 724, 1074, 470, 831, 1118,
	770, 1124, 940, 770, 877, 1057, 1033, 991, 1031, 657,
	1263, 930, 528, 476, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 1273, 543, 545, 545, 545, 545, 545,
	545, 545, 545, 553, 554, 555, 556, 1059, 438, 1063,
	420, 1058, 882, 1056, 576, 430, 431, 432, 1061, 1251,
	685, 892, 1279, 834, 50, 884, 831, 1060, 835, 480,
	479, 829, 827, 1195, 723, 828, 929, 188, 928, 188,
	1062, 1064, 1194, 480, 479, 188, 481, 472, 695, 696,
	1076, 479, 188, 1280, 480, 479, 76, 76, 76, 76,
	481, 76, 1006, 516, 480, 479, 1005, 481, 175, 76,
	744, 481, 745, 546, 547, 548, 549, 550, 551, 552,
	994, 481, 422, 423, 584, 1261, 691, 590, 23, 24,
	48, 26, 27, 1211, 480, 479, 76, 504, 505, 497,
	498, 499, 500, 501, 502, 503, 496, 42, 1192, 506,
	1038, 481, 28, 1003, 497, 498, 499, 500, 501, 502,
	503, 496, 690, 302, 506, 710, 712, 713, 445, 296,
	711, 37, 908, 909, 910, 50, 445, 1258, 480, 479,
	460, 1283, 461, 461, 271, 1219, 1266, 445, 445, 445,
	445, 445, 445, 445, 445, 481, 1111, 188, 1110, 652,
	988, 445, 445, 979, 188, 188, 188, 661, 1219, 461,
	76, 1219, 1220, 1186, 1185, 74, 76, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 1099, 461, 1173, 461,
	1130, 1129, 680, 681, 314, 30, 31, 33, 32, 35,
	1126, 1127, 697, 1126, 1125, 21, 669, 867, 316, 923,
	461, 561, 461, 1239, 419, 746, 36, 43, 44, 755,
	461, 45, 46, 34, 668, 667, 658, 656, 47, 718,
	651, 603, 602, 23, 436, 38, 39, 429, 40, 41,
	721, 415, 1238, 532, 566, 569, 570, 571, 567, 699,
	568, 572, 1120, 54, 959, 960, 762, 765, 716, 714,
	1214, 224, 771, 955, 1078, 587, 757, 954, 954, 805,
	1044, 586, 303, 303, 303, 303, 303, 935, 76, 782,
	50, 955, 932, 755, 188, 188, 76, 576, 188, 802,
	1169, 188, 923, 747, 748, 188, 303, 76, 76, 76,
	76, 76, 76, 76, 76, 561, 588, 774, 586, 722,
	757, 76, 76, 923, 767, 560, 23, 561, 188, 49,
	934, 806, 1132, 954, 1128, 931, 980, 784, 785, 810,
	787, 23, 783, 923, 76, 786, 795, 589, 188, 561,
	316, 316, 316, 316, 76, 316, 693, 846, 847, 848,
	803, 50, 804, 316, 809, 948, 226, 808, 949, 1199,
	824, 839, 859, 50, 1093, 983, 855, 445, 850, 445,
	849, 717, 959, 960, 1113, 65, 655, 445, 50, 860,
	484, 302, 302, 302, 302, 302, 862, 1078, 76, 758,
	759, 1007, 1022, 962, 665, 766, 302, 457, 868, 792,
	870, 790, 965, 50, 793, 302, 791, 705, 889, 773,
	964, 775, 776, 856, 857, 794, 789, 570, 571, 188,
	1020, 788, 188, 188, 188, 188, 188, 1291, 912, 230,
	231, 1285, 1040, 896, 188, 718, 1290, 188, 475, 239,
	906, 188, 905, 998, 463, 601, 188, 188, 437, 990,
	76, 1265, 473, 900, 316, 901, 464, 1264, 1212, 984,
	598, 1167, 1200, 76, 499, 500, 501, 502, 503, 496,
	869, 664, 506, 574, 314, 721, 227, 228, 475, 913,
	221, 1244, 222, 54, 1243, 1021, 1202, 821, 951, 952,
	1026, 1023, 1016, 1017, 1024, 1019, 1018, 904, 682, 262,
	261, 264, 265, 266, 267, 903, 955, 1025, 263, 268,
	458, 950, 477, 1028, 188, 1252, 303, 76, 1190, 76,
	688, 56, 58, 188, 939, 585, 188, 76, 51, 1,
	866, 1010, 840, 841, 842, 843, 875, 1267, 1225, 1107,
	963, 972, 826, 188, 722, 188, 188, 981, 851, 852,
	853, 971, 818, 973, 413, 64, 1259, 825, 1231, 974,
	907, 1188, 316, 833, 992, 836, 1112, 1262, 989, 608,
	316, 995, 996, 606, 445, 607, 605, 717, 610, 609,
	604, 316, 316, 316, 316, 316, 316, 316, 316, 985,
	986, 199, 309, 573, 597, 316, 316, 861, 478, 445,
	1004, 66, 1030, 1029, 871, 1009, 997, 922, 999, 1000,
	1001, 1013, 698, 454, 1027, 201, 514, 902, 701, 975,
	315, 1085, 694, 937, 467, 302, 1242, 1201, 484, 938,
	1036, 316, 541, 768, 247, 709, 260, 257, 1037, 259,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 258, 1048, 506, 700, 947, 488, 245, 237,
	1083, 301, 47, 76, 1079, 1047, 188, 782, 1066, 557,
	754, 756, 749, 782, 1065, 1053, 718, 1095, 1096, 1097,
	76, 1073, 763, 763, 1089, 1084, 772, 918, 763, 520,
	521, 522, 523, 524, 525, 526, 527, 1088, 1087, 565,
	1082, 563, 562, 961, 821, 763, 957, 300, 1043, 1164,
	1106, 1249, 704, 1105, 25, 1100, 797, 55, 232, 1101,
	19, 18, 17, 76, 76, 20, 76, 16, 15, 14,
	29, 13, 12, 11, 316, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 10, 316, 506, 76,
	1012, 9, 8, 7, 1134, 303, 6, 1121, 1122, 5,
	4, 223, 22, 188, 1141, 2, 0, 1136, 0, 0,
	1139, 0, 76, 0, 0, 566, 569, 570, 571, 567,
	1143, 568, 572, 1163, 0, 0, 0, 0, 1150, 0,
	1142, 0, 0, 0, 0, 0, 1046, 0, 0, 0,
	0, 316, 0, 316, 1168, 0, 0, 0, 0, 0,
	0, 316, 76, 76, 0, 1179, 1180, 1181, 1069, 0,
	1176, 0, 1182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1184, 981, 0, 0, 0, 316, 0, 0,
	0, 76, 445, 76, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1197, 0, 1191, 0, 1193, 0,
	0, 1198, 0, 0, 302, 821, 0, 821, 188, 0,
	0, 0, 0, 1196, 0, 0, 76, 0, 0, 1203,
	1083, 0, 0, 1216, 0, 0, 0, 920, 0, 76,
	188, 921, 1213, 0, 0, 0, 76, 0, 925, 926,
	927, 0, 76, 0, 1230, 188, 1215, 936, 1224, 0,
	0, 1241, 942, 0, 943, 944, 945, 946, 0, 1240,
	1082, 0, 0, 0, 0, 1083, 1046, 47, 719, 0,
	0, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 1257, 970, 235, 0,
	1254, 1253, 304, 1236, 76, 1237, 76, 76, 76, 188,
	76, 1271, 0, 466, 316, 1082, 76, 0, 1276, 1022,
	0, 782, 0, 0, 0, 0, 1147, 1148, 0, 1149,
	0, 1281, 1151, 0, 1153, 0, 0, 185, 0, 0,
	821, 0, 76, 76, 76, 1288, 1289, 1020, 186, 0,
	0, 212, 0, 0, 0, 1296, 0, 1008, 316, 0,
	316, 0, 0, 0, 0, 307, 0, 1012, 821, 0,
	417, 0, 0, 236, 0, 186, 186, 0, 0, 0,
	1187, 186, 0, 316, 76, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	76, 0, 1021, 1052, 0, 0, 0, 1026, 1023, 1016,
	1017, 1024, 1019, 1018, 0, 0, 0, 0, 316, 0,
	76, 0, 0, 0, 1025, 0, 0, 0, 0, 0,
	1015, 0, 0, 763, 0, 0, 1086, 970, 0, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 197, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 316, 1109, 425,
	76, 426, 0, 0, 0, 0, 0, 433, 0, 208,
	186, 0, 186, 0, 435, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	1135, 0, 0, 0, 0, 914, 915, 916, 0, 0,
	465, 469, 0, 1137, 0, 0, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 316, 487, 1144, 192,
	0, 0, 0, 0, 0, 1146, 194, 0, 0, 0,
	0, 0, 0, 200, 196, 0, 1155, 1156, 1157, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 0, 1170, 1171, 1172, 0, 1175, 0,
	198, 542, 0, 202, 0, 0, 0, 0, 1178, 0,
	1178, 1178, 1178, 0, 1183, 0, 0, 0, 0, 559,
	316, 0, 0, 0, 0, 0, 0, 0, 583, 0,
	186, 193, 0, 0, 0, 0, 0, 186, 581, 186,
	0, 0, 0, 0, 0, 0, 316, 316, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 195,
	0, 204, 205, 206, 207, 211, 0, 0, 0, 0,
	210, 209, 0, 0, 0, 1210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1217, 1218,
	1221, 1222, 1223, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1178, 0, 1245, 1246, 1247, 1248,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1051,
	0, 0, 0, 0, 1256, 0, 0, 0, 0, 0,
	0, 1067, 1068, 0, 1070, 1071, 659, 660, 0, 0,
	663, 0, 0, 666, 0, 0, 0, 186, 186, 0,
	1272, 186, 0, 0, 186, 1277, 0, 763, 670, 0,
	1278, 0, 0, 0, 0, 0, 0, 687, 1282, 0,
	686, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 186, 0, 625, 0, 0, 0, 0, 707, 708,
	706, 0, 1161, 461, 0, 490, 0, 493, 0, 1300,
	1301, 186, 0, 507, 508, 509, 510, 511, 512, 513,
	670, 491, 492, 489, 495, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 0, 0, 506, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 531, 0, 506, 760, 761, 0, 0, 0, 1145,
	0, 0, 236, 0, 0, 0, 0, 236, 236, 613,
	0, 764, 764, 236, 0, 0, 0, 764, 0, 0,
	0, 779, 0, 0, 0, 0, 0, 236, 236, 236,
	236, 0, 186, 0, 764, 186, 186, 186, 186, 186,
	626, 0, 0, 0, 0, 0, 0, 796, 0, 807,
	186, 0, 0, 0, 581, 815, 0, 0, 0, 186,
	186, 639, 640, 641, 642, 643, 644, 645, 0, 646,
	647, 648, 649, 650, 627, 628, 629, 630, 611, 612,
	0, 0, 614, 0, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 631, 632, 633, 634, 635, 636,
	637, 638, 0, 0, 0, 0, 0, 0, 1205, 1206,
	0, 1207, 1208, 1209, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 887, 0, 186, 888, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 186,
	0, 0, 1158, 461, 0, 890, 0, 0, 0, 897,
	898, 0, 469, 0, 0, 0, 186, 0, 894, 895,
	461, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 0, 0, 236, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 1159, 0, 506, 0, 0, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 0, 924, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 236, 0, 0, 0, 0, 1298, 495, 494, 504,
	505, 497, 498, 499, 500, 501, 502, 503, 496, 0,
	1049, 506, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 919, 0, 506, 0, 186,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 0, 0, 506, 495, 494, 504, 505, 497,
	498, 499, 500, 501, 502, 503, 496, 0, 0, 506,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 0, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 236, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 1090, 1091, 0, 0, 1092, 0,
	0, 1094, 764, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1166, 0, 0, 0, 0,
	0, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 127, 354, 0,
	345, 323, 351, 324, 343, 366, 95, 369, 341, 394,
	375, 109, 410, 111, 380, 0, 144, 120, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 0, 0, 0, 75, 0, 822, 823, 0,
	0, 0, 0, 0, 88, 0, 382, 401, 353, 384,
	322, 381, 0, 326, 329, 411, 399, 348, 349, 982,
	0, 0, 0, 0, 0, 0, 367, 371, 387, 361,
	0, 0, 1270, 531, 0, 0, 0, 0, 346, 0,
	378, 0, 0, 0, 330, 327, 0, 0, 365, 0,
	0, 0, 332, 0, 347, 388, 764, 321, 391, 397,
	362, 189, 400, 360, 359, 403, 133, 0, 0, 147,
	100, 99, 108, 395, 344, 352, 91, 350, 139, 129,
	159, 377, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 325,
	0, 145, 161, 174, 86, 340, 398, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 336, 339, 334,
	335, 373, 374, 407, 408, 409, 389, 331, 0, 337,
	338, 0, 393, 376, 77, 0, 110, 171, 135, 97,
	162, 402, 392, 0, 364, 404, 342, 356, 412, 357,
	358, 385, 328, 372, 127, 354, 0, 345, 323, 351,
	324, 343, 366, 95, 369, 341, 394, 375, 109, 410,
	111, 380, 0, 144, 120, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 75, 0, 822, 823, 0, 0, 0, 0,
	0, 88, 0, 382, 401, 353, 384, 322, 381, 0,
	326, 329, 411, 399, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 367, 371, 387, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 378, 0, 0,
	0, 330, 327, 0, 0, 365, 0, 0, 0, 332,
	0, 347, 388, 0, 321, 391, 397, 362, 189, 400,
	360, 359, 403, 133, 0, 0, 147, 100, 99, 108,
	395, 344, 352, 91, 350, 139, 129, 159, 377, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 78,
	148, 157, 89, 141, 80, 155, 146, 118, 104, 105,
	79, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 83, 164, 82, 84, 163, 125, 150, 156, 119,
	116, 81, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 325, 0, 145, 161,
	174, 86, 340, 398, 167, 168, 169, 170, 0, 0,
	87, 124, 85, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 336, 339, 334, 335, 373, 374,
	407, 408, 409, 389, 331, 0, 337, 338, 0, 393,
	376, 77, 0, 110, 171, 135, 97, 162, 402, 392,
	0, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 127, 354, 0, 345, 323, 351, 324, 343, 366,
	95, 369, 341, 394, 375, 109, 410, 111, 380, 0,
	144, 120, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 50, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	382, 401, 353, 384, 322, 381, 0, 326, 329, 411,
	399, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	367, 371, 387, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 378, 0, 0, 0, 330, 327,
	0, 0, 365, 0, 0, 0, 332, 0, 347, 388,
	0, 321, 391, 397, 362, 189, 400, 360, 359, 403,
	133, 0, 0, 147, 100, 99, 108, 395, 344, 352,
	91, 350, 139, 129, 159, 377, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 78, 148, 157, 89,
	141, 80, 155, 146, 118, 104, 105, 79, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 83, 164,
	82, 84, 163, 125, 150, 156, 119, 116, 81, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 325, 0, 145, 161, 174, 86, 340,
	398, 167, 168, 169, 170, 0, 0, 87, 124, 85,
	103, 142, 106, 113, 136, 172, 128, 140, 90, 160,
	143, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 77, 0,
	110, 171, 135, 97, 162, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 127, 354,
	0, 345, 323, 351, 324, 343, 366, 95, 369, 341,
	394, 375, 109, 410, 111, 380, 0, 144, 120, 0,
	0, 368, 396, 370, 390, 363, 386, 333, 379, 405,
	355, 383, 406, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 382, 401, 353,
	384, 322, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 1045, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 0, 365,
	0, 0, 0, 332, 0, 347, 388, 0, 321, 391,
	397, 362, 189, 400, 360, 359, 403, 133, 0, 0,
	147, 100, 99, 108, 395, 344, 352, 91, 350, 139,
	129, 159, 377, 130, 138, 112, 151, 134, 158, 190,
	166, 149, 165, 78, 148, 157, 89, 141, 80, 155,
	146, 118, 104, 105, 79, 0, 137, 94, 98, 93,
	126, 152, 153, 92, 173, 83, 164, 82, 84, 163,
	125, 150, 156, 119, 116, 81, 154, 117, 115, 107,
	96, 101, 131, 114, 132, 102, 122, 121, 123, 0,
	325, 0, 145, 161, 174, 86, 340, 398, 167, 168,
	169, 170, 0, 0, 87, 124, 85, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 336, 339,
	334, 335, 373, 374, 407, 408, 409, 389, 331, 0,
	337, 338, 0, 393, 376, 77, 0, 110, 171, 135,
	97, 162, 402, 392, 0, 364, 404, 342, 356, 412,
	357, 358, 385, 328, 372, 127, 354, 0, 345, 323,
	351, 324, 343, 366, 95, 369, 341, 394, 375, 109,
	410, 111, 380, 0, 144, 120, 0, 0, 368, 396,
	370, 390, 363, 386, 333, 379, 405, 355, 383, 406,
	0, 0, 0, 241, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 382, 401, 353, 384, 322, 381,
	0, 326, 329, 411, 399, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 367, 371, 387, 361, 0, 0,
	0, 0, 0, 0, 715, 0, 346, 0, 378, 0,
	0, 0, 330, 327, 0, 0, 365, 0, 0, 0,
	332, 0, 347, 388, 0, 321, 391, 397, 362, 189,
	400, 360, 359, 403, 133, 0, 0, 147, 100, 99,
	108, 395, 344, 352, 91, 350, 139, 129, 159, 377,
	130, 138, 112, 151, 134, 158, 190, 166, 149, 165,
	78, 148, 157, 89, 141, 80, 155, 146, 118, 104,
	105, 79, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 83, 164, 82, 84, 163, 125, 150, 156,
	119, 116, 81, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 325, 0, 145,
	161, 174, 86, 340, 398, 167, 168, 169, 170, 0,
	0, 87, 124, 85, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 336, 339, 334, 335, 373,
	374, 407, 408, 409, 389, 331, 0, 337, 338, 0,
	393, 376, 77, 0, 110, 171, 135, 97, 162, 402,
	392, 0, 364, 404, 342, 356, 412, 357, 358, 385,
	328, 372, 127, 354, 0, 345, 323, 351, 324, 343,
	366, 95, 369, 341, 394, 375, 109, 410, 111, 380,
	0, 144, 120, 0, 0, 368, 396, 370, 390, 363,
	386, 333, 379, 405, 355, 383, 406, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 382, 401, 353, 384, 322, 381, 0, 326, 329,
	411, 399, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 367, 371, 387, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 378, 0, 0, 0, 330,
	327, 0, 0, 365, 0, 0, 0, 332, 0, 347,
	388, 0, 321, 391, 397, 362, 189, 400, 360, 359,
	403, 133, 0, 0, 147, 100, 99, 108, 395, 344,
	352, 91, 350, 139, 129, 159, 377, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 325, 0, 145, 161, 174, 86,
	340, 398, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 336, 339, 334, 335, 373, 374, 407, 408,
	409, 389, 331, 0, 337, 338, 0, 393, 376, 77,
	0, 110, 171, 135, 97, 162, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 127,
	354, 0, 345, 323, 351, 324, 343, 366, 95, 369,
	341, 394, 375, 109, 410, 111, 380, 0, 144, 120,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 382, 401,
	353, 384, 322, 381, 0, 326, 329, 411, 399, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 367, 371,
	387, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 378, 0, 0, 0, 330, 327, 0, 0,
	365, 0, 0, 0, 332, 0, 347, 388, 0, 321,
	391, 397, 362, 189, 400, 360, 359, 403, 133, 0,
	0, 147, 100, 99, 108, 395, 344, 352, 91, 350,
	139, 129, 159, 377, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 78, 148, 157, 89, 141, 80,
	155, 146, 118, 104, 105, 79, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 83, 164, 82, 84,
	163, 125, 150, 156, 119, 116, 81, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 325, 0, 145, 161, 174, 86, 340, 398, 167,
	168, 169, 170, 0, 0, 87, 124, 85, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 336,
	339, 334, 335, 373, 374, 407, 408, 409, 389, 331,
	0, 337, 338, 0, 393, 376, 77, 0, 110, 171,
	135, 97, 162, 402, 392, 0, 364, 404, 342, 356,
	412, 357, 358, 385, 328, 372, 127, 354, 0, 345,
	323, 351, 324, 343, 366, 95, 369, 341, 394, 375,
	109, 410, 111, 380, 0, 144, 120, 0, 0, 368,
	396, 370, 390, 363, 386, 333, 379, 405, 355, 383,
	406, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 382, 401, 353, 384, 322,
	381, 0, 326, 329, 411, 399, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 367, 371, 387, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 378,
	0, 0, 0, 330, 327, 0, 0, 365, 0, 0,
	0, 332, 0, 347, 388, 0, 321, 391, 397, 362,
	189, 400, 360, 359, 403, 133, 0, 0, 147, 100,
	99, 108, 395, 344, 352, 91, 350, 139, 129, 159,
	377, 130, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 78, 148, 157, 89, 141, 80, 155, 146, 118,
	104, 105, 79, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 83, 164, 82, 319, 163, 125, 150,
	156, 119, 116, 81, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 325, 0,
	145, 161, 174, 86, 340, 398, 167, 168, 169, 170,
	0, 0, 87, 320, 318, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 77, 0, 110, 171, 135, 97, 162,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 127, 354, 0, 345, 323, 351, 324,
	343, 366, 95, 369, 341, 394, 375, 109, 410, 111,
	380, 0, 144, 120, 0, 0, 368, 396, 370, 390,
	363, 386, 333, 379, 405, 355, 383, 406, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 382, 401, 353, 384, 322, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 0, 365, 0, 0, 0, 332, 0,
	347, 388, 0, 321, 391, 397, 362, 189, 400, 360,
	359, 403, 133, 0, 0, 147, 100, 99, 108, 395,
	344, 352, 91, 350, 139, 129, 159, 377, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 78, 148,
	157, 89, 141, 80, 155, 146, 118, 104, 105, 79,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	83, 164, 82, 84, 163, 125, 150, 156, 119, 116,
	81, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 325, 0, 145, 161, 174,
	86, 340, 398, 167, 168, 169, 170, 0, 0, 87,
	124, 85, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 336, 339, 334, 335, 373, 374, 407,
	408, 409, 389, 331, 0, 337, 338, 0, 393, 376,
	77, 0, 110, 171, 135, 97, 162, 402, 392, 0,
	364, 404, 342, 356, 412, 357, 358, 385, 328, 372,
	127, 354, 0, 345, 323, 351, 324, 343, 366, 95,
	369, 341, 394, 375, 109, 410, 111, 380, 0, 144,
	120, 0, 0, 368, 396, 370, 390, 363, 386, 333,
	379, 405, 355, 383, 406, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 382,
	401, 353, 384, 322, 381, 0, 326, 329, 411, 399,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 367,
	371, 387, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 378, 0, 0, 0, 330, 327, 0,
	0, 365, 0, 0, 0, 332, 0, 347, 388, 0,
	321, 391, 397, 362, 189, 400, 360, 359, 403, 133,
	0, 0, 147, 100, 99, 108, 395, 344, 352, 91,
	350, 139, 129, 159, 377, 130, 138, 112, 151, 134,
	158, 190, 166, 149, 165, 78, 148, 591, 89, 141,
	80, 155, 146, 118, 104, 105, 79, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 83, 164, 82,
	319, 163, 125, 150, 156, 119, 116, 81, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 325, 0, 145, 161, 174, 86, 340, 398,
	167, 168, 169, 170, 0, 0, 87, 320, 318, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	336, 339, 334, 335, 373, 374, 407, 408, 409, 389,
	331, 0, 337, 338, 0, 393, 376, 77, 0, 110,
	171, 135, 97, 162, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 127, 354, 0,
	345, 323, 351, 324, 343, 366, 95, 369, 341, 394,
	375, 109, 410, 111, 380, 0, 144, 120, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 382, 401, 353, 384,
	322, 381, 0, 326, 329, 411, 399, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 367, 371, 387, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	378, 0, 0, 0, 330, 327, 0, 0, 365, 0,
	0, 0, 332, 0, 347, 388, 0, 321, 391, 397,
	362, 189, 400, 360, 359, 403, 133, 0, 0, 147,
	100, 99, 108, 395, 344, 352, 91, 350, 139, 129,
	159, 377, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 310, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 319, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 325,
	0, 145, 161, 174, 86, 340, 398, 167, 168, 169,
	170, 0, 0, 87, 320, 318, 313, 312, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 336, 339, 334,
	335, 373, 374, 407, 408, 409, 389, 331, 0, 337,
	338, 0, 393, 376, 77, 0, 110, 171, 135, 97,
	162, 127, 0, 0, 751, 0, 243, 0, 0, 0,
	95, 0, 240, 0, 0, 109, 283, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 274, 275, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	262, 261, 264, 265, 266, 267, 0, 0, 88, 263,
	268, 269, 270, 0, 0, 238, 255, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	234, 0, 0, 0, 294, 0, 254, 0, 0, 249,
	250, 251, 256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 292, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 78, 148, 157, 89,
	141, 80, 155, 146, 118, 104, 105, 79, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 83, 164,
	82, 84, 163, 125, 150, 156, 119, 116, 81, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 0, 0, 145, 161, 174, 86, 0,
	0, 167, 168, 169, 170, 0, 0, 87, 124, 85,
	103, 142, 106, 113, 136, 172, 128, 140, 90, 160,
	143, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 276, 277, 278, 279, 281, 0, 280, 77, 0,
	110, 171, 135, 97, 162, 127, 0, 0, 0, 0,
	243, 0, 0, 0, 95, 0, 240, 0, 0, 109,
	283, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 461, 241, 262, 261, 264, 265, 266, 267,
	0, 0, 88, 263, 268, 269, 270, 0, 0, 238,
	255, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 0, 0, 0, 0, 294, 0,
	254, 0, 0, 249, 250, 251, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 292, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 190, 166, 149, 165,
	78, 148, 157, 89, 141, 80, 155, 146, 118, 104,
	105, 79, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 83, 164, 82, 84, 163, 125, 150, 156,
	119, 116, 81, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 145,
	161, 174, 86, 0, 0, 167, 168, 169, 170, 0,
	0, 87, 124, 85, 103, 142, 106, 113, 136, 172,
	128, 140, 90, 160, 143, 284, 293, 290, 291, 288,
	289, 287, 286, 285, 295, 276, 277, 278, 279, 281,
	0, 280, 77, 0, 110, 171, 135, 97, 162, 127,
	0, 0, 0, 0, 243, 0, 0, 0, 95, 0,
	240, 0, 0, 109, 283, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 262, 261,
	264, 265, 266, 267, 0, 0, 88, 263, 268, 269,
	270, 0, 0, 238, 255, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 234, 0,
	0, 0, 294, 0, 254, 0, 0, 249, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 292, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 78, 148, 157, 89, 141, 80,
	155, 146, 118, 104, 105, 79, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 83, 164, 82, 84,
	163, 125, 150, 156, 119, 116, 81, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 86, 0, 0, 167,
	168, 169, 170, 0, 0, 87, 124, 85, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 284,
	293, 290, 291, 288, 289, 287, 286, 285, 295, 276,
	277, 278, 279, 281, 0, 280, 77, 0, 110, 171,
	135, 97, 162, 127, 0, 0, 0, 0, 243, 0,
	0, 0, 95, 0, 240, 0, 0, 109, 283, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 0, 0, 814, 0, 50, 0,
	0, 241, 262, 261, 264, 265, 266, 267, 0, 0,
	88, 263, 268, 269, 270, 0, 0, 238, 255, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 0, 0, 0, 0, 294, 0, 254, 0,
	0, 249, 250, 251, 256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	292, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 78, 148,
	157, 89, 141, 80, 155, 146, 118, 104, 105, 79,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	83, 164, 82, 84, 163, 125, 150, 156, 119, 116,
	81, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 145, 161, 174,
	86, 0, 0, 167, 168, 169, 170, 0, 0, 87,
	124, 85, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 276, 277, 278, 279, 281, 23, 280,
	77, 0, 110, 171, 135, 97, 162, 0, 0, 0,
	127, 0, 0, 0, 0, 243, 0, 0, 0, 95,
	0, 240, 0, 0, 109, 283, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 274, 275, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 241, 262,
	261, 264, 265, 266, 267, 0, 0, 88, 263, 268,
	269, 270, 0, 0, 238, 255, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 294, 0, 254, 0, 0, 249, 250,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 0, 292, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 190, 166, 149, 165, 78, 148, 157, 89, 141,
	80, 155, 146, 118, 104, 105, 79, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 83, 164, 82,
	84, 163, 125, 150, 156, 119, 116, 81, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 145, 161, 174, 86, 0, 0,
	167, 168, 169, 170, 0, 0, 87, 124, 85, 103,
	142, 106, 113, 136, 172, 128, 140, 90, 160, 143,
	284, 293, 290, 291, 288, 289, 287, 286, 285, 295,
	276, 277, 278, 279, 281, 0, 280, 77, 0, 110,
	171, 135, 97, 162, 127, 0, 0, 0, 0, 243,
	0, 0, 0, 95, 0, 240, 0, 0, 109, 283,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 241, 262, 261, 264, 265, 266, 267, 0,
	0, 88, 263, 268, 269, 270, 0, 0, 238, 255,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 0, 0, 0, 0, 294, 0, 254,
	0, 0, 249, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 292, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 78,
	148, 157, 89, 141, 80, 155, 146, 118, 104, 105,
	79, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 83, 164, 82, 84, 163, 125, 150, 156, 119,
	116, 81, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 145, 161,
	174, 86, 0, 0, 167, 168, 169, 170, 0, 0,
	87, 124, 85, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 276, 277, 278, 279, 281, 127,
	280, 77, 0, 110, 171, 135, 97, 162, 95, 0,
	0, 0, 0, 109, 283, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 241, 262, 261,
	264, 265, 266, 267, 0, 0, 88, 263, 268, 269,
	270, 0, 0, 0, 255, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 0, 0,
	0, 0, 294, 0, 254, 0, 0, 249, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 292, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 1299, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 78, 148, 157, 89, 141, 80,
	155, 146, 118, 104, 105, 79, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 83, 164, 82, 84,
	163, 125, 150, 156, 119, 116, 81, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 86, 0, 0, 167,
	168, 169, 170, 0, 0, 87, 124, 85, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 284,
	293, 290, 291, 288, 289, 287, 286, 285, 295, 276,
	277, 278, 279, 281, 127, 280, 77, 0, 110, 171,
	135, 97, 162, 95, 0, 0, 0, 0, 109, 283,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 241, 262, 261, 264, 265, 266, 267, 0,
	0, 88, 263, 268, 269, 270, 0, 0, 0, 255,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 0, 0, 0, 0, 294, 0, 254,
	0, 0, 249, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 292, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 78,
	148, 157, 89, 141, 80, 155, 146, 118, 104, 105,
	79, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 83, 164, 82, 84, 163, 125, 150, 156, 119,
	116, 81, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 145, 161,
	174, 86, 0, 0, 167, 168, 169, 170, 0, 0,
	87, 124, 85, 103, 142, 106, 113, 136, 172, 128,
	140, 90, 160, 143, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 276, 277, 278, 279, 281, 127,
	280, 77, 0, 110, 171, 135, 97, 162, 95, 0,
	0, 0, 0, 109, 0, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 495, 494, 504, 505, 497, 498, 499, 500,
	501, 502, 503, 496, 0, 0, 506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 78, 148, 157, 89, 141, 80,
	155, 146, 118, 104, 105, 79, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 83, 164, 82, 84,
	163, 125, 150, 156, 119, 116, 81, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 145, 161, 174, 86, 0, 0, 167,
	168, 169, 170, 0, 0, 87, 124, 85, 103, 142,
	106, 113, 136, 172, 128, 140, 90, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 110, 171,
	135, 97, 162, 127, 0, 0, 0, 483, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 109, 0, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 485, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 480, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 78, 148,
	157, 89, 141, 80, 155, 146, 118, 104, 105, 79,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	83, 164, 82, 84, 163, 125, 150, 156, 119, 116,
	81, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 145, 161, 174,
	86, 0, 0, 167, 168, 169, 170, 0, 0, 87,
	124, 85, 103, 142, 106, 113, 136, 172, 128, 140,
	90, 160, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	77, 0, 110, 171, 135, 97, 162, 95, 0, 0,
	0, 0, 109, 0, 111, 0, 0, 144, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 67, 0, 0, 0, 73, 133, 0, 0,
	147, 100, 99, 108, 0, 0, 0, 91, 0, 139,
	129, 159, 0, 130, 138, 112, 151, 134, 158, 69,
	166, 149, 165, 78, 148, 157, 89, 141, 80, 155,
	146, 118, 104, 105, 79, 0, 137, 94, 98, 93,
	126, 152, 153, 92, 173, 83, 164, 82, 84, 163,
	125, 150, 156, 119, 116, 81, 154, 117, 115, 107,
	96, 101, 131, 114, 132, 102, 122, 121, 123, 0,
	0, 0, 145, 161, 174, 86, 0, 0, 167, 168,
	169, 170, 0, 0, 87, 124, 85, 103, 142, 106,
	113, 136, 172, 128, 140, 90, 160, 143, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 110, 171, 135,
	97, 162, 127, 0, 0, 0, 580, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 582, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 77,
	0, 110, 171, 135, 97, 162, 95, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 86, 0, 0, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 77, 0, 110, 171, 135, 97,
	162, 95, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 77,
	0, 110, 171, 135, 97, 162, 95, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 702, 0,
	0, 703, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 86, 0, 0, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 77, 0, 110, 171, 135, 97,
	162, 95, 0, 600, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 599, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 110, 171, 135, 97, 162, 127, 0, 0, 0,
	580, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	109, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 582, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 578, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 78, 148, 157, 89, 141, 80, 155, 146, 118,
	104, 105, 79, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 83, 164, 82, 84, 163, 125, 150,
	156, 119, 116, 81, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 86, 0, 0, 167, 168, 169, 170,
	0, 0, 87, 124, 85, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 77, 0, 110, 171, 135, 97, 162,
	95, 0, 0, 0, 0, 109, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 78, 148, 157, 89,
	141, 80, 155, 146, 118, 104, 105, 79, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 83, 164,
	82, 84, 163, 125, 150, 156, 119, 116, 81, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 0, 0, 145, 161, 174, 86, 0,
	0, 167, 168, 169, 170, 0, 0, 87, 124, 85,
	103, 142, 106, 113, 136, 172, 128, 140, 90, 160,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 77, 0,
	110, 171, 135, 97, 162, 95, 0, 0, 0, 0,
	109, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 582, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 0, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 78, 148, 157, 89, 141, 80, 155, 146, 118,
	104, 105, 79, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 83, 164, 82, 84, 163, 125, 150,
	156, 119, 116, 81, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 0, 0, 0,
	145, 161, 174, 86, 0, 0, 167, 168, 169, 170,
	0, 0, 87, 124, 85, 103, 142, 106, 113, 136,
	172, 128, 140, 90, 160, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 77, 0, 110, 171, 135, 97, 162,
	95, 0, 0, 0, 0, 109, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 485, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 78, 148, 157, 89,
	141, 80, 155, 146, 118, 104, 105, 79, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 83, 164,
	82, 84, 163, 125, 150, 156, 119, 116, 81, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 0, 0, 0, 145, 161, 174, 86, 0,
	0, 167, 168, 169, 170, 0, 0, 87, 124, 85,
	103, 142, 106, 113, 136, 172, 128, 140, 90, 160,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 77, 0,
	110, 171, 135, 97, 162, 558, 95, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 86, 0, 0, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 305, 0, 0, 0, 0,
	0, 0, 127, 0, 77, 0, 110, 171, 135, 97,
	162, 95, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 77,
	0, 110, 171, 135, 97, 162, 95, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 189, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 86, 0, 0, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 77, 0, 110, 171, 135, 97,
	162, 95, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 77,
	0, 110, 171, 135, 97, 162, 95, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 78, 148, 157, 89, 141, 80, 155, 146,
	118, 104, 105, 79, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 83, 164, 82, 84, 163, 125,
	150, 156, 119, 116, 81, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 0, 0,
	0, 145, 161, 174, 86, 0, 0, 167, 168, 169,
	170, 0, 0, 87, 124, 85, 103, 142, 106, 113,
	136, 172, 128, 140, 90, 160, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 77, 0, 110, 171, 135, 97,
	162, 95, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 78, 148, 157,
	89, 141, 80, 155, 146, 118, 104, 105, 79, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 83,
	164, 82, 84, 163, 125, 150, 156, 119, 116, 81,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 0, 0, 0, 145, 161, 174, 86,
	0, 0, 167, 168, 169, 170, 0, 0, 87, 124,
	85, 103, 142, 106, 113, 136, 172, 128, 140, 90,
	160, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 110, 171, 135, 97, 162,
}
var yyPact = [...]int{

	372, -1000, -183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 758, 806, -1000, -1000, -1000, -1000, -1000, -1000, 612,
	7400, 46, 70, -14, 10119, 67, 1373, 10794, -1000, -28,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 600, -1000, -1000,
	-1000, -1000, -1000, 753, 756, 640, 746, 680, -1000, 5561,
	19, 8993, 9894, 4859, -1000, 475, 63, 10794, -149, 10344,
	17, 17, 17, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66, 10794, -1000, 10794, 16,
	471, 16, 16, 16, 10794, -1000, 96, -1000, -1000, -1000,
	-1000, 10794, 468, 708, 69, 2883, 2883, 2883, 2883, -21,
	2883, -95, 636, 788, -1000, -1000, -1000, -1000, 2883, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 378,
	715, 6266, 6266, 758, -1000, 600, -1000, -1000, -1000, 707,
	-1000, -1000, 209, 791, -1000, 7175, 95, -1000, 6266, 1653,
	588, -1000, -1000, 588, -1000, -1000, 81, -1000, -1000, 6716,
	6716, 6716, 6716, 6716, 6716, 6716, 6716, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 588, -1000, 6032, 588, 588, 588, 588, 588, 588,
	588, 588, 6266, 588, 588, 588, 588, 588, 588, 588,
	588, 588, 588, 588, 588, 588, 9669, 575, 1024, -1000,
	-1000, -1000, 741, 8084, 8768, 10794, 544, -1000, 573, 4612,
	-108, -1000, -1000, -1000, 172, 8534, -1000, -1000, -1000, 705,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 467, -1000, 1683, 464, 2883, 47, 614,
	461, 197, 460, 10794, 10794, 2883, 26, 10794, 738, 633,
	10794, 459, 458, -1000, 4365, -1000, 2883, 2883, 2883, 2883,
	2883, 2883, 2883, 2883, -1000, -1000, -1000, -1000, -1000, -1000,
	2883, 2883, -1000, 777, 220, -1000, -1000, 10794, 6266, -1000,
	-1000, -1000, -1000, 801, 135, 358, 94, 582, -1000, 314,
	753, 378, 680, 8309, 655, -1000, -1000, 10794, -1000, 6266,
	6266, 348, -1000, 9443, -1000, -1000, 3377, 146, 6716, 261,
	165, 6716, 6716, 6716, 6716, 6716, 6716, 6716, 6716, 6716,
	6716, 6716, 6716, 6716, 6716, 6716, 304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 449, -1000, 600, 732, 732,
	122, 122, 122, 122, 122, 122, 122, 6941, 5093, 378,
	455, 284, 6032, 5561, 5561, 6266, 6266, 10569, 10569, 5561,
	747, 187, 284, 10569, -1000, 378, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5561, 5561, 5561, 5561, -3, 10794, -1000,
	10569, 8993, 8993, 8993, 8993, 8993, -1000, 670, 665, -1000,
	650, 648, 664, 10794, -1000, 447, 8084, 97, 588, -1000,
	9218, -1000, -1000, -3, 507, 8993, 10794, -1000, -1000, 4118,
	573, -108, 565, -1000, -106, -119, 5795, 119, -1000, -1000,
	-1000, -1000, 2636, 195, 246, -87, -1000, -1000, -1000, 598,
	-1000, 598, 598, 598, 598, -56, -56, -56, -56, -1000,
	-1000, -1000, -1000, -1000, 607, 605, -1000, 598, 598, 598,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 603, 603, 603, 599,
	599, 624, -1000, 10794, -166, 441, 2883, 737, 2883, -1000,
	64, -1000, 10794, -1000, -1000, 10794, 2883, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10794, 223, 10794, 10794, -1000, 284, -1000, 686,
	6266, 6266, 3871, 6266, -1000, -1000, -1000, 715, -1000, 747,
	776, -1000, 699, 697, 5561, -1000, -1000, 146, 270, -1000,
	-1000, 355, -1000, -1000, -1000, -1000, 93, 588, -1000, 1999,
	-1000, -1000, -1000, -1000, 261, 6716, 6716, 6716, 839, 1999,
	1984, 294, 933, 122, 657, 657, 117, 117, 117, 117,
	117, 309, 309, -1000, -1000, -1000, 378, -1000, -1000, -1000,
	378, 5561, 569, -1000, -1000, 6266, -1000, 378, 445, 445,
	274, 249, 561, -1000, 92, 556, 445, 5561, 184, -1000,
	6266, 378, -1000, 445, 378, 445, 445, 615, 588, -1000,
	559, -1000, 170, 1024, 611, 632, 493, -1000, -1000, -1000,
	-1000, 659, -1000, 651, -1000, -1000, -1000, -1000, -1000, 62,
	55, 54, 10344, -1000, 784, 8993, 541, -1000, -1000, 565,
	-108, -125, -1000, -1000, -1000, 284, -1000, 397, 562, 2389,
	-1000, -1000, -1000, -1000, -1000, -1000, 602, 721, 137, 116,
	394, -1000, -1000, 710, -1000, 200, -89, -1000, -1000, 311,
	-56, -56, -1000, -1000, 119, 703, 119, 119, 119, 345,
	345, -1000, -1000, -1000, -1000, 297, -1000, -1000, -1000, 293,
	-1000, 630, 10344, 2883, -1000, 3624, -1000, -1000, -1000, -1000,
	-1000, -1000, 1231, 654, 145, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -9, -1000, 2883, -1000,
	220, -1000, 342, 6266, -1000, -1000, 684, 284, 284, 90,
	-1000, -1000, 10794, -1000, -1000, -1000, -1000, 549, -1000, -1000,
	-1000, 3130, 5561, -1000, 839, 1999, 1969, -1000, 6716, 6716,
	-1000, -1000, 445, 5561, 284, -1000, -1000, -1000, 128, 304,
	128, 6716, 6716, 3871, 6716, 6716, -161, 528, 177, -1000,
	6266, 263, -1000, -1000, -1000, -1000, -1000, 626, 10569, 588,
	-1000, 7859, 10344, 758, 10569, 6266, 6266, -1000, -1000, 6266,
	601, -1000, 6266, -1000, -1000, -1000, 588, 588, 588, 422,
	-1000, 758, 541, -1000, -1000, -1000, -121, -131, -1000, -1000,
	2636, -1000, 2636, 10344, -1000, 392, 390, -1000, -1000, 613,
	31, -1000, -1000, -1000, 487, 119, 119, -1000, 155, -1000,
	-1000, -1000, 439, -1000, 436, 560, 426, 10794, -1000, -1000,
	558, -1000, 168, -1000, -1000, 10344, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10344, 10794,
	-1000, -1000, -1000, -1000, -1000, 10344, -1000, 223, -1000, 284,
	-1000, 3624, -1000, 784, 8993, -1000, -1000, 378, -1000, 6716,
	1999, 1999, -1000, -1000, 378, 598, 598, -1000, 598, 599,
	-1000, 598, -37, 598, -39, 378, 378, 1868, 1952, -1000,
	1668, 1936, 588, -157, -1000, 284, 6266, -1000, 724, 503,
	526, -1000, -1000, 5327, 378, 424, 85, 422, 753, -1000,
	284, 284, 284, 10344, 284, 10344, 10344, 10344, 7634, 10344,
	753, -1000, -1000, -1000, -1000, 2389, -1000, 409, -1000, 598,
	-1000, -1000, -83, 799, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -56, 340, -56, 273, -1000,
	264, 2883, 3624, 2636, -1000, 596, -1000, -1000, -1000, -1000,
	726, -1000, 763, 553, -1000, 1999, -1000, -1000, 65, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6716, 6716,
	-1000, 6716, 6716, 6716, 378, 325, 284, 720, -1000, 588,
	-1000, -1000, 517, 10344, 10344, -1000, -1000, 407, -1000, 404,
	404, 404, 97, -1000, -1000, 112, 10344, -1000, 120, -1000,
	-136, 119, -1000, 119, 477, 448, -1000, -1000, -1000, 10344,
	588, 760, 755, -1000, -1000, 1885, 1885, 1885, 1885, 61,
	-1000, -1000, 796, -1000, 588, -1000, 600, 84, -1000, 10344,
	-1000, -1000, -1000, -1000, -1000, 112, -1000, 371, 156, 317,
	-1000, 205, 719, -1000, 713, -1000, -1000, -1000, -1000, -1000,
	381, -10, -1000, 6266, 6266, -1000, -1000, -1000, -1000, 378,
	37, -169, 10569, 526, 378, 10344, -1000, -1000, -1000, 253,
	-1000, -1000, -1000, 285, -1000, -1000, 614, 377, -1000, 10344,
	284, 519, -1000, 683, -164, -178, 504, -1000, -1000, -1000,
	-1000, -166, -1000, -10, 693, -1000, 679, -1000, -1000, -1000,
	-13, -167, -18, -171, 588, -180, 6491, -1000, 1885, 378,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1055, 23, 495, 1052, 1051, 1050, 1049, 1046, 1043,
	1042, 1041, 1036, 1023, 1022, 1021, 1020, 1019, 1018, 1017,
	1015, 1012, 1011, 1010, 110, 1008, 1007, 1004, 63, 1002,
	66, 1001, 999, 28, 145, 42, 41, 1238, 998, 25,
	60, 54, 997, 43, 996, 993, 68, 992, 53, 991,
	989, 1242, 959, 951, 15, 36, 949, 948, 947, 946,
	64, 729, 945, 942, 929, 927, 926, 925, 44, 6,
	26, 40, 12, 924, 109, 8, 923, 45, 922, 919,
	917, 916, 33, 914, 49, 912, 21, 47, 911, 9,
	58, 35, 14, 5, 67, 52, 910, 19, 57, 38,
	909, 907, 358, 906, 905, 37, 903, 16, 123, 300,
	894, 893, 892, 891, 32, 150, 434, 174, 65, 888,
	887, 884, 1253, 61, 59, 13, 883, 29, 31, 34,
	882, 881, 27, 870, 869, 868, 866, 865, 863, 859,
	210, 858, 857, 856, 20, 51, 855, 854, 55, 18,
	853, 851, 848, 39, 46, 847, 50, 846, 845, 844,
	842, 22, 17, 832, 7, 829, 10, 828, 827, 2,
	826, 11, 821, 3, 820, 4, 30, 819, 818, 0,
	430, 815, 812, 77,
}
var yyR1 = [...]int{

	0, 177, 178, 178, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 181,
	181, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 175, 175, 174,
	173, 173, 172, 172, 171, 16, 158, 159, 159, 159,
	154, 133, 133, 133, 133, 136, 136, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 153, 153, 140,
	140, 148, 148, 149, 149, 149, 146, 146, 147, 147,
	150, 150, 150, 141, 141, 141, 141, 141, 141, 141,
	143, 143, 151, 151, 144, 144, 144, 145, 145, 152,
	152, 152, 152, 152, 142, 142, 155, 155, 167, 167,
	166, 166, 166, 157, 157, 163, 163, 163, 163, 163,
	156, 156, 165, 165, 164, 160, 160, 160, 161, 161,
	161, 162, 162, 162, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 170, 168, 168, 169, 169, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 106, 106, 104, 104, 105, 105,
	105, 107, 107, 107, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 182, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 65, 65, 65, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 64,
	64, 64, 64, 64, 64, 64, 64, 183, 183, 66,
	66, 66, 66, 31, 31, 31, 31, 31, 129, 129,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 96, 96, 96, 121, 121, 121, 101, 101, 108,
	108, 109, 109, 102, 102, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 112, 112,
	113, 113, 113, 120, 120, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 179, 180, 127, 128, 128,
	128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 7, 5, 4, 2, 2, 4, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 6,
	8, 8, 6, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -177, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	113, 114, 116, 115, 141, 117, 134, 49, 153, 154,
	156, 157, 25, 135, 136, 139, 140, -179, 8, 237,
	53, -178, 252, -82, 15, -26, 5, -24, -182, -24,
	-24, -24, -24, -24, -158, 53, -113, 122, 70, 149,
	229, 119, 120, 126, -116, 56, -115, 245, 153, 164,
	158, 185, 177, 175, 178, 216, 205, 214, 65, 156,
	225, 137, 173, 169, 167, 27, 190, 250, 168, 132,
	131, 191, 195, 217, 162, 163, 219, 189, 133, 32,
	247, 34, 145, 220, 193, 188, 184, 187, 161, 183,
	38, 197, 196, 198, 215, 180, 170, 18, 223, 140,
	143, 192, 194, 127, 147, 249, 221, 166, 144, 139,
	224, 157, 218, 227, 37, 202, 160, 130, 154, 151,
	181, 146, 171, 172, 186, 159, 182, 155, 148, 141,
	226, 203, 251, 179, 176, 152, 150, 208, 209, 210,
	211, 248, 222, 174, 204, -102, 122, 124, 120, 120,
	121, 122, 229, 119, 120, -51, -122, 56, -115, 122,
	149, 120, 106, 178, 113, 206, 121, 32, 147, -131,
	120, -104, 150, 205, 208, 209, 210, 211, 56, 218,
	217, 212, -122, 155, -127, -127, -127, -127, -127, -2,
	-86, 17, 16, -5, -3, -179, 6, 20, 21, -30,
	39, 40, -25, -36, 97, -37, -122, -56, 72, -61,
	29, 56, -115, 23, -60, -57, -75, -73, -74, 106,
	107, 108, 95, 96, 103, 73, 109, -65, -63, -64,
	-66, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -116, -71, -179, 43, 44, 238, 239, 240, 241,
	244, 242, 75, 33, 228, 236, 235, 234, 232, 233,
	230, 231, 125, 229, 101, 237, -102, -39, -40, -41,
	-42, -53, -74, -179, -51, 11, -46, -51, -94, -130,
	155, -98, 218, 217, -117, -96, -116, -114, 216, 178,
	215, 118, 71, 22, 24, 200, 74, 106, 16, 75,
	105, 238, 113, 47, 230, 231, 228, 240, 241, 229,
	206, 29, 10, 25, 135, 21, 99, 115, 78, 79,
	138, 23, 136, 69, 19, 50, 11, 13, 14, 125,
	124, 90, 121, 45, 8, 109, 26, 87, 41, 28,
	43, 88, 17, 232, 233, 31, 244, 142, 101, 48,
	35, 72, 67, 51, 70, 15, 46, 89, 116, 237,
	44, 119, 6, 243, 30, 134, 42, 120, 207, 77,
	123, 68, 5, 126, 9, 49, 52, 234, 235, 236,
	33, 76, 12, -159, -154, 56, 121, -51, 237, -116,
	-109, 125, -109, -109, 120, -51, -51, -108, 125, 56,
	-108, -108, -108, -51, 110, -51, 56, 30, 229, 56,
	147, 120, 148, 122, -128, -179, -117, -128, -128, -128,
	151, 152, -128, 214, -106, 207, 213, 51, 12, -128,
	-180, 55, -87, 19, 31, -37, -122, -83, -84, -37,
	-82, -2, -24, 35, -28, 21, 64, 11, -119, 71,
	70, 87, -118, 22, -116, 58, 110, -37, -58, 90,
	72, 88, 89, 74, 92, 91, 102, 95, 96, 97,
	98, 99, 100, 101, 93, 94, 105, 80, 81, 82,
	83, 84, 85, 86, -103, -179, -74, -179, 111, 112,
	-61, -61, -61, -61, -61, -61, -61, -61, -179, -2,
	-69, -37, -179, -179, -179, -179, -179, -179, -179, -179,
	-179, -78, -37, -179, -183, -179, -183, -183, -183, -183,
	-183, -183, -183, -179, -179, -179, -179, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -126, 22, -39, -179, -125, 143, -124,
	22, -122, 58, -51, -46, -181, 54, 11, 52, 54,
	-94, 155, -95, -99, 219, 221, 80, -121, -116, 58,
	29, 30, 55, 54, -133, -136, -138, -137, -139, -134,
	-135, 175, 176, 106, 179, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 30, 137, 171, 172, 173,
	174, 191, 192, 193, 194, 195, 196, 197, 198, 158,
	159, 160, 161, 162, 163, 164, 166, 167, 168, 169,
	170, 56, -128, 122, -175, 52, 56, 72, 56, -51,
	-51, -128, 123, -51, 23, 51, -51, 56, 56, -123,
	-122, -114, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, 11, -105, 11, 90, -51, -37, 9, 90,
	54, 18, 110, 54, -85, 24, 25, -86, -180, -30,
	-62, -116, 59, 62, -29, 42, -51, -37, -37, -67,
	67, 72, 68, 69, -118, 97, -123, -117, -114, -61,
	-68, -71, -74, 63, 90, 88, 89, 74, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -129, 56, 58, 56, -60, -60, -116,
	-35, 21, -34, -36, -180, 54, -180, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	76, -75, -180, -34, -35, -34, -34, -90, 143, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 41, 41,
	41, 46, 41, 46, 41, -48, -122, -180, -54, 49,
	124, 50, -179, -124, -90, 52, -39, -51, -98, -95,
	54, 220, 222, 223, 51, -37, -145, 105, -160, -161,
	-162, -117, 58, 59, -154, -155, -163, 127, 130, 126,
	-156, 121, 28, -150, 67, 72, -146, 203, -140, 53,
	-140, -140, -140, -140, -144, 178, -144, -144, -144, 53,
	53, -140, -140, -140, -148, 53, -148, -148, -149, 53,
	-149, -120, 52, -51, -173, 248, -174, 56, -128, 23,
	-128, -110, 118, 115, 116, -170, 114, 200, 178, 65,
	29, 15, 238, 143, 251, 56, 144, -51, -51, -128,
	-51, -107, 88, 12, -122, -122, 37, -37, -37, -123,
	-84, -87, -101, 19, 11, 33, 33, -34, 67, 68,
	69, 110, -179, -68, -61, -61, -61, -33, 138, 71,
	-180, -180, -34, 54, -37, -180, -180, -180, 54, 52,
	22, 54, 11, 110, 54, 11, -180, -34, -79, -77,
	78, -37, -180, -180, -180, -180, -180, -59, 30, 33,
	-2, -179, -179, -55, 54, 12, 80, -44, -43, 51,
	52, -45, 51, -43, 41, 41, 121, 121, 121, -91,
	-116, -55, -39, -55, -99, -100, 224, 221, 227, 56,
	54, -162, 80, 53, 28, -156, -156, 56, 56, -141,
	29, 67, -147, 204, 59, -144, -144, -145, 30, -145,
	-145, -145, -153, 58, -153, 59, 59, 51, -116, -128,
	-172, -171, -117, -127, -176, 149, 128, 129, 132, 131,
	56, 121, 28, 127, 130, 143, 126, -176, 149, -111,
	-112, 123, 22, 121, 28, 143, -128, -105, 58, -37,
	38, 110, -51, -38, 11, 97, -117, -35, -33, 71,
	-61, -61, -180, -36, -132, 106, 175, 137, 173, 169,
	189, 180, 202, 171, 203, -129, -132, -61, -61, -117,
	-61, -61, 245, -82, 79, -37, 77, -92, 51, -93,
	-70, -72, -71, -179, -2, -88, -116, -91, -82, -97,
	-37, -37, -37, 53, -37, -179, -179, -179, -180, 54,
	-82, -55, 221, 225, 226, -161, -162, -165, -164, -116,
	56, 56, -143, 51, 58, 59, 60, 67, 228, 66,
	55, -145, -145, 56, 106, 55, 54, 55, 54, 55,
	54, -51, 54, 80, -127, -116, -127, -116, -51, -127,
	-116, -107, -55, -39, -180, -61, -180, -140, -140, -140,
	-149, -140, 163, -140, 163, -180, -180, -180, 54, 19,
	-180, 54, 19, -179, -32, 243, -37, 27, -92, 54,
	-180, -180, -180, 54, 110, -180, -86, -89, -116, -89,
	-89, -89, -125, -116, -86, 55, 54, -140, -151, 200,
	9, -144, 58, -144, 59, 59, -128, -171, -162, 53,
	26, -80, 13, -144, 56, -61, -61, -61, -61, -61,
	-180, 58, 28, -72, 33, -2, -179, -116, -116, 54,
	55, -180, -180, -180, -54, -167, -166, 52, 133, 65,
	-164, -152, 127, 28, 126, 228, -145, -145, 55, 55,
	-89, -179, -81, 14, 16, -180, -180, -180, -180, -31,
	90, 248, 9, -70, -2, 110, -116, -166, 56, -157,
	80, 58, -142, 65, 28, 28, 55, -168, -169, 143,
	-37, -69, -180, 246, 48, 249, -93, -180, -116, 59,
	58, -175, -180, 54, -116, 38, 247, 250, -173, -169,
	33, 38, 145, 248, 146, 249, -179, 250, -61, 142,
	-180, -180,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 510, 0, 278, 278, 278, 278, 278, 278, 0,
	580, 563, 0, 0, 0, 0, -2, 268, 269, 0,
	271, 272, 787, 787, 787, 787, 787, 0, 33, 34,
	785, 1, 3, 518, 0, 0, 282, 285, 280, 0,
	563, 0, 0, 0, 60, 0, 0, 774, 0, 775,
	561, 561, 561, 581, 582, 585, 586, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 0, 0, 564, 0, 559,
	0, 559, 559, 559, 0, 226, 349, 589, 590, 774,
	775, 0, 0, 0, 0, 788, 788, 788, 788, 0,
	788, 0, 245, 246, 249, 250, 251, 252, 788, 265,
	266, 257, 267, 270, 273, 274, 275, 276, 277, 27,
	522, 0, 0, 510, 29, 0, 278, 283, 284, 288,
	286, 287, 279, 0, 296, 300, 0, 357, 0, 362,
	364, -2, -2, 0, 399, 400, 401, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 429,
	430, 495, 496, 497, 498, 499, 500, 501, 502, 366,
	367, 492, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 483, 0, 457, 457, 457, 457, 457, 457,
	457, 457, 0, 0, 0, 0, 0, 0, 307, 309,
	310, 311, 330, 0, 332, 0, 0, 41, 45, 0,
	765, 546, -2, -2, 0, 0, 587, 588, -2, 692,
	-2, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 0, 77, 0, 0, 788, 0, 67,
	0, 0, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 227, 788, 788, 788, 788,
	788, 788, 788, 788, 236, 789, 790, 237, 238, 239,
	788, 788, 241, 0, 258, 254, 255, 0, 0, 253,
	28, 786, 22, 0, 0, 519, 0, 511, 512, 515,
	518, 27, 285, 0, 290, 289, 281, 0, 297, 0,
	0, 0, 301, 0, 303, 304, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 386,
	387, 388, 389, 390, 363, 0, 377, 0, 0, 0,
	419, 420, 421, 422, 423, 424, 425, 0, 292, 27,
	0, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 484, 0, 449, 0, 450, 451, 452, 453,
	454, 455, 456, 0, 292, 0, 0, 43, 0, 348,
	0, 0, 0, 0, 0, 0, 337, 0, 0, 340,
	0, 0, 0, 0, 331, 0, 0, 351, 738, 333,
	0, 335, 336, -2, 0, 0, 0, 39, 40, 0,
	46, 765, 48, 49, 0, 0, 0, 157, 554, 555,
	556, 552, 185, 0, 140, 136, 82, 83, 84, 129,
	86, 129, 129, 129, 129, 154, 154, 154, 154, 112,
	113, 114, 115, 116, 0, 0, 99, 129, 129, 129,
	103, 119, 120, 121, 122, 123, 124, 125, 126, 87,
	88, 89, 90, 91, 92, 93, 131, 131, 131, 133,
	133, 583, 62, 0, 70, 0, 788, 0, 788, 75,
	0, 201, 0, 220, 560, 0, 788, 223, 224, 350,
	591, 592, 228, 229, 230, 231, 232, 233, 234, 235,
	240, 244, 0, 261, 0, 0, 248, 247, 523, 0,
	0, 0, 0, 0, 514, 516, 517, 522, 30, 288,
	0, 503, 0, 0, 0, 291, 25, 358, 359, 361,
	378, 0, 380, 382, 302, 298, 0, 493, -2, 368,
	369, 393, 394, 395, 0, 0, 0, 0, 391, 373,
	0, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 418, 468, 469, 0, 416, 417, 426,
	0, 0, 293, 294, 396, 0, 541, 27, 0, 0,
	0, 0, 0, 492, 0, 0, 0, 0, 490, 487,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 347,
	355, 543, 0, 308, 326, 328, 0, 323, 338, 339,
	341, 0, 343, 0, 345, 346, 312, 313, 314, 0,
	0, 0, 0, 334, 355, 0, 355, 42, 547, 47,
	0, 0, 52, 53, 548, 549, 550, 0, 76, 186,
	188, 191, 192, 193, 78, 79, 0, 0, 0, 0,
	0, 180, 181, 143, 141, 0, 138, 137, 85, 0,
	154, 154, 106, 107, 157, 0, 157, 157, 157, 0,
	0, 100, 101, 102, 94, 0, 95, 96, 97, 0,
	98, 0, 0, 788, 64, 0, 68, 69, 65, 562,
	66, 787, 0, 0, 575, 202, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 0, 219, 788, 222,
	258, 243, 0, 0, 259, 260, 0, 520, 521, 0,
	513, 23, 0, 557, 558, 504, 505, 305, 379, 381,
	383, 0, 292, 370, 391, 374, 0, 371, 0, 0,
	365, 431, 0, 0, 398, -2, 434, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 0, 488,
	0, 0, 448, 459, 460, 461, 462, 535, 0, 0,
	-2, 0, 0, 510, 0, 0, 0, 320, 327, 0,
	0, 321, 0, 322, 342, 344, 0, 0, 0, 0,
	318, 510, 355, 38, 50, 51, 0, 0, 57, 158,
	0, 189, 0, 0, 175, 0, 0, 178, 179, 150,
	0, 142, 81, 139, 0, 157, 157, 108, 0, 109,
	110, 111, 0, 127, 0, 0, 0, 0, 584, 63,
	71, 72, 0, 194, 787, 0, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 787, 0, 0,
	787, 576, 577, 578, 579, 0, 221, 261, 262, 263,
	524, 0, 24, 355, 0, 299, 494, 0, 372, 0,
	392, 375, 432, 295, 0, 129, 129, 473, 129, 133,
	476, 129, 478, 129, 481, 0, 0, 0, 0, 493,
	0, 0, 0, 485, 447, 491, 0, 31, 0, 535,
	525, 537, 539, 0, 27, 0, 531, 0, 518, 544,
	356, 545, 324, 0, 329, 0, 0, 0, 332, 0,
	518, 37, 54, 55, 56, 187, 190, 0, 182, 129,
	176, 177, 152, 0, 144, 145, 146, 147, 148, 149,
	130, 104, 105, 155, 156, 154, 0, 154, 0, 134,
	0, 788, 0, 0, 195, 0, 196, 198, 199, 200,
	0, 242, 506, 306, 433, 376, 436, 470, 154, 474,
	475, 477, 479, 480, 482, 438, 437, 439, 0, 0,
	442, 0, 0, 0, 0, 0, 489, 0, 32, 0,
	540, -2, 0, 0, 0, 44, 35, 0, 316, 0,
	0, 0, 351, 319, 36, 167, 0, 184, 159, 153,
	0, 157, 128, 157, 0, 0, 61, 73, 74, 0,
	0, 508, 0, 471, 472, 0, 0, 0, 0, 463,
	446, 486, 0, 538, 0, -2, 0, 533, 532, 0,
	325, 352, 353, 354, 315, 166, 168, 0, 173, 0,
	183, 164, 0, 161, 163, 151, 117, 118, 132, 135,
	0, 0, 26, 0, 0, 440, 441, 443, 444, 0,
	0, 0, 0, 528, 27, 0, 317, 169, 170, 0,
	174, 172, 80, 0, 160, 162, 67, 0, 215, 0,
	509, 507, 445, 0, 0, 0, 536, -2, 534, 171,
	165, 70, 214, 0, 0, 464, 0, 467, 197, 216,
	0, 465, 0, 0, 0, 0, 0, 466, 0, 0,
	217, 218,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 110, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 252,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:335
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:353
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:399
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:440
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:539
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:548
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:564
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:584
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:600
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:606
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:612
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:619
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:641
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:860
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:865
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:869
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:874
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:878
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:886
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:904
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:908
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:923
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:936
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:940
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:965
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:969
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:974
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:983
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:996
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1060
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1158
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1207
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1212
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1272
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1280
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1285
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1375
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1380
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.str = "full "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.showFilter = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = SessionStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.str = GlobalStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.statement = &Commit{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Rollback{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1553
		{
			setAllowComments(yylex, true)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.bytes2 = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = UnionStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = UnionAllStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.str = UnionDistinctStr
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = SQLCacheStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.str = DistinctStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = StraightJoinHint
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.selectExprs = nil
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = JoinStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.str = StraightJoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.str = LeftJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = RightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = NaturalJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.indexHints = nil
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.expr = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.str = IsNullStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.str = IsNotNullStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.str = IsTrueStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.str = IsNotTrueStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.str = IsFalseStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.str = IsNotFalseStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.str = EqualStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.str = LessThanStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.str = GreaterThanStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.str = LessEqualStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.str = GreaterEqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.str = NotEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2217
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 443:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.str = BooleanModeStr
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 466:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.str = QueryExpansionStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = nil
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.str = string("")
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.expr = nil
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.expr = &NullVal{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.exprs = nil
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.orderBy = nil
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.str = AscScr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.str = AscScr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.str = DescScr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.limit = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.str = ""
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.str = ForUpdateStr
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.str = ShareModeStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2682
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2695
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.updateExprs = nil
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2755
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2791
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.bytes = []byte("charset")
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.expr = &Default{}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.byt = 0
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.byt = 1
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2835
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.empty = struct{}{}
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.str = ""
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.str = IgnoreStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.empty = struct{}{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3139
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3148
		{
			decNesting(yylex)
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3153
		{
			forceEOF(yylex)
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3158
		{
			forceEOF(yylex)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3162
		{
			forceEOF(yylex)
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3166
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

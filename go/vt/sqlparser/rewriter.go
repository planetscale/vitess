/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

func replaceRefOfAddColumnsColumns(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*AddColumns).Columns[idx] = newNode.(*ColumnDefinition)
	}
}
func replaceRefOfAddColumnsFirst(newNode, parent SQLNode) {
	parent.(*AddColumns).First = newNode.(*ColName)
}
func replaceRefOfAddColumnsAfter(newNode, parent SQLNode) {
	parent.(*AddColumns).After = newNode.(*ColName)
}
func replaceRefOfAddConstraintDefinitionConstraintDefinition(newNode, parent SQLNode) {
	parent.(*AddConstraintDefinition).ConstraintDefinition = newNode.(*ConstraintDefinition)
}
func replaceRefOfAddIndexDefinitionIndexDefinition(newNode, parent SQLNode) {
	parent.(*AddIndexDefinition).IndexDefinition = newNode.(*IndexDefinition)
}
func replaceRefOfAliasedExprExpr(newNode, parent SQLNode) {
	parent.(*AliasedExpr).Expr = newNode.(Expr)
}
func replaceRefOfAliasedExprAs(newNode, parent SQLNode) {
	parent.(*AliasedExpr).As = newNode.(ColIdent)
}
func replaceRefOfAliasedTableExprExpr(newNode, parent SQLNode) {
	parent.(*AliasedTableExpr).Expr = newNode.(SimpleTableExpr)
}
func replaceRefOfAliasedTableExprPartitions(newNode, parent SQLNode) {
	parent.(*AliasedTableExpr).Partitions = newNode.(Partitions)
}
func replaceRefOfAliasedTableExprAs(newNode, parent SQLNode) {
	parent.(*AliasedTableExpr).As = newNode.(TableIdent)
}
func replaceRefOfAliasedTableExprHints(newNode, parent SQLNode) {
	parent.(*AliasedTableExpr).Hints = newNode.(*IndexHints)
}
func replaceRefOfAlterColumnColumn(newNode, parent SQLNode) {
	parent.(*AlterColumn).Column = newNode.(*ColName)
}
func replaceRefOfAlterColumnDefaultVal(newNode, parent SQLNode) {
	parent.(*AlterColumn).DefaultVal = newNode.(Expr)
}
func replaceRefOfAlterTableTable(newNode, parent SQLNode) {
	parent.(*AlterTable).Table = newNode.(TableName)
}
func replaceRefOfAlterTableAlterOptions(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*AlterTable).AlterOptions[idx] = newNode.(AlterOption)
	}
}
func replaceRefOfAlterTablePartitionSpec(newNode, parent SQLNode) {
	parent.(*AlterTable).PartitionSpec = newNode.(*PartitionSpec)
}
func replaceRefOfAlterViewViewName(newNode, parent SQLNode) {
	parent.(*AlterView).ViewName = newNode.(TableName)
}
func replaceRefOfAlterViewColumns(newNode, parent SQLNode) {
	parent.(*AlterView).Columns = newNode.(Columns)
}
func replaceRefOfAlterViewSelect(newNode, parent SQLNode) {
	parent.(*AlterView).Select = newNode.(SelectStatement)
}
func replaceRefOfAlterVschemaTable(newNode, parent SQLNode) {
	parent.(*AlterVschema).Table = newNode.(TableName)
}
func replaceRefOfAlterVschemaVindexSpec(newNode, parent SQLNode) {
	parent.(*AlterVschema).VindexSpec = newNode.(*VindexSpec)
}
func replaceRefOfAlterVschemaVindexCols(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*AlterVschema).VindexCols[idx] = newNode.(ColIdent)
	}
}
func replaceRefOfAlterVschemaAutoIncSpec(newNode, parent SQLNode) {
	parent.(*AlterVschema).AutoIncSpec = newNode.(*AutoIncSpec)
}
func replaceRefOfAndExprLeft(newNode, parent SQLNode) {
	parent.(*AndExpr).Left = newNode.(Expr)
}
func replaceRefOfAndExprRight(newNode, parent SQLNode) {
	parent.(*AndExpr).Right = newNode.(Expr)
}
func replaceRefOfAutoIncSpecColumn(newNode, parent SQLNode) {
	parent.(*AutoIncSpec).Column = newNode.(ColIdent)
}
func replaceRefOfAutoIncSpecSequence(newNode, parent SQLNode) {
	parent.(*AutoIncSpec).Sequence = newNode.(TableName)
}
func replaceRefOfBinaryExprLeft(newNode, parent SQLNode) {
	parent.(*BinaryExpr).Left = newNode.(Expr)
}
func replaceRefOfBinaryExprRight(newNode, parent SQLNode) {
	parent.(*BinaryExpr).Right = newNode.(Expr)
}
func replaceRefOfCallProcName(newNode, parent SQLNode) {
	parent.(*CallProc).Name = newNode.(TableName)
}
func replaceRefOfCallProcParams(newNode, parent SQLNode) {
	parent.(*CallProc).Params = newNode.(Exprs)
}
func replaceRefOfCaseExprExpr(newNode, parent SQLNode) {
	parent.(*CaseExpr).Expr = newNode.(Expr)
}
func replaceRefOfCaseExprWhens(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*CaseExpr).Whens[idx] = newNode.(*When)
	}
}
func replaceRefOfCaseExprElse(newNode, parent SQLNode) {
	parent.(*CaseExpr).Else = newNode.(Expr)
}
func replaceRefOfChangeColumnOldColumn(newNode, parent SQLNode) {
	parent.(*ChangeColumn).OldColumn = newNode.(*ColName)
}
func replaceRefOfChangeColumnNewColDefinition(newNode, parent SQLNode) {
	parent.(*ChangeColumn).NewColDefinition = newNode.(*ColumnDefinition)
}
func replaceRefOfChangeColumnFirst(newNode, parent SQLNode) {
	parent.(*ChangeColumn).First = newNode.(*ColName)
}
func replaceRefOfChangeColumnAfter(newNode, parent SQLNode) {
	parent.(*ChangeColumn).After = newNode.(*ColName)
}
func replaceRefOfCheckConstraintDefinitionExpr(newNode, parent SQLNode) {
	parent.(*CheckConstraintDefinition).Expr = newNode.(Expr)
}
func replaceRefOfColNameName(newNode, parent SQLNode) {
	parent.(*ColName).Name = newNode.(ColIdent)
}
func replaceRefOfColNameQualifier(newNode, parent SQLNode) {
	parent.(*ColName).Qualifier = newNode.(TableName)
}
func replaceRefOfCollateExprExpr(newNode, parent SQLNode) {
	parent.(*CollateExpr).Expr = newNode.(Expr)
}
func replaceRefOfColumnDefinitionName(newNode, parent SQLNode) {
	parent.(*ColumnDefinition).Name = newNode.(ColIdent)
}
func replaceRefOfColumnTypeLength(newNode, parent SQLNode) {
	parent.(*ColumnType).Length = newNode.(*Literal)
}
func replaceRefOfColumnTypeScale(newNode, parent SQLNode) {
	parent.(*ColumnType).Scale = newNode.(*Literal)
}
func replaceColumns(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(Columns)[idx] = newNode.(ColIdent)
	}
}
func replaceRefOfComparisonExprLeft(newNode, parent SQLNode) {
	parent.(*ComparisonExpr).Left = newNode.(Expr)
}
func replaceRefOfComparisonExprRight(newNode, parent SQLNode) {
	parent.(*ComparisonExpr).Right = newNode.(Expr)
}
func replaceRefOfComparisonExprEscape(newNode, parent SQLNode) {
	parent.(*ComparisonExpr).Escape = newNode.(Expr)
}
func replaceRefOfConstraintDefinitionDetails(newNode, parent SQLNode) {
	parent.(*ConstraintDefinition).Details = newNode.(ConstraintInfo)
}
func replaceRefOfConvertExprExpr(newNode, parent SQLNode) {
	parent.(*ConvertExpr).Expr = newNode.(Expr)
}
func replaceRefOfConvertExprType(newNode, parent SQLNode) {
	parent.(*ConvertExpr).Type = newNode.(*ConvertType)
}
func replaceRefOfConvertTypeLength(newNode, parent SQLNode) {
	parent.(*ConvertType).Length = newNode.(*Literal)
}
func replaceRefOfConvertTypeScale(newNode, parent SQLNode) {
	parent.(*ConvertType).Scale = newNode.(*Literal)
}
func replaceRefOfConvertUsingExprExpr(newNode, parent SQLNode) {
	parent.(*ConvertUsingExpr).Expr = newNode.(Expr)
}
func replaceRefOfCreateTableTable(newNode, parent SQLNode) {
	parent.(*CreateTable).Table = newNode.(TableName)
}
func replaceRefOfCreateTableTableSpec(newNode, parent SQLNode) {
	parent.(*CreateTable).TableSpec = newNode.(*TableSpec)
}
func replaceRefOfCreateTableOptLike(newNode, parent SQLNode) {
	parent.(*CreateTable).OptLike = newNode.(*OptLike)
}
func replaceRefOfCreateViewViewName(newNode, parent SQLNode) {
	parent.(*CreateView).ViewName = newNode.(TableName)
}
func replaceRefOfCreateViewColumns(newNode, parent SQLNode) {
	parent.(*CreateView).Columns = newNode.(Columns)
}
func replaceRefOfCreateViewSelect(newNode, parent SQLNode) {
	parent.(*CreateView).Select = newNode.(SelectStatement)
}
func replaceRefOfCurTimeFuncExprName(newNode, parent SQLNode) {
	parent.(*CurTimeFuncExpr).Name = newNode.(ColIdent)
}
func replaceRefOfCurTimeFuncExprFsp(newNode, parent SQLNode) {
	parent.(*CurTimeFuncExpr).Fsp = newNode.(Expr)
}
func replaceRefOfDeleteComments(newNode, parent SQLNode) {
	parent.(*Delete).Comments = newNode.(Comments)
}
func replaceRefOfDeleteTargets(newNode, parent SQLNode) {
	parent.(*Delete).Targets = newNode.(TableNames)
}
func replaceRefOfDeleteTableExprs(newNode, parent SQLNode) {
	parent.(*Delete).TableExprs = newNode.(TableExprs)
}
func replaceRefOfDeletePartitions(newNode, parent SQLNode) {
	parent.(*Delete).Partitions = newNode.(Partitions)
}
func replaceRefOfDeleteWhere(newNode, parent SQLNode) {
	parent.(*Delete).Where = newNode.(*Where)
}
func replaceRefOfDeleteOrderBy(newNode, parent SQLNode) {
	parent.(*Delete).OrderBy = newNode.(OrderBy)
}
func replaceRefOfDeleteLimit(newNode, parent SQLNode) {
	parent.(*Delete).Limit = newNode.(*Limit)
}
func replaceRefOfDerivedTableSelect(newNode, parent SQLNode) {
	parent.(*DerivedTable).Select = newNode.(SelectStatement)
}
func replaceRefOfDropColumnName(newNode, parent SQLNode) {
	parent.(*DropColumn).Name = newNode.(*ColName)
}
func replaceRefOfDropTableFromTables(newNode, parent SQLNode) {
	parent.(*DropTable).FromTables = newNode.(TableNames)
}
func replaceRefOfDropViewFromTables(newNode, parent SQLNode) {
	parent.(*DropView).FromTables = newNode.(TableNames)
}
func replaceRefOfExistsExprSubquery(newNode, parent SQLNode) {
	parent.(*ExistsExpr).Subquery = newNode.(*Subquery)
}
func replaceRefOfExplainStmtStatement(newNode, parent SQLNode) {
	parent.(*ExplainStmt).Statement = newNode.(Statement)
}
func replaceRefOfExplainTabTable(newNode, parent SQLNode) {
	parent.(*ExplainTab).Table = newNode.(TableName)
}
func replaceExprs(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(Exprs)[idx] = newNode.(Expr)
	}
}
func replaceRefOfFlushTableNames(newNode, parent SQLNode) {
	parent.(*Flush).TableNames = newNode.(TableNames)
}
func replaceRefOfForeignKeyDefinitionSource(newNode, parent SQLNode) {
	parent.(*ForeignKeyDefinition).Source = newNode.(Columns)
}
func replaceRefOfForeignKeyDefinitionReferencedTable(newNode, parent SQLNode) {
	parent.(*ForeignKeyDefinition).ReferencedTable = newNode.(TableName)
}
func replaceRefOfForeignKeyDefinitionReferencedColumns(newNode, parent SQLNode) {
	parent.(*ForeignKeyDefinition).ReferencedColumns = newNode.(Columns)
}
func replaceRefOfForeignKeyDefinitionOnDelete(newNode, parent SQLNode) {
	parent.(*ForeignKeyDefinition).OnDelete = newNode.(ReferenceAction)
}
func replaceRefOfForeignKeyDefinitionOnUpdate(newNode, parent SQLNode) {
	parent.(*ForeignKeyDefinition).OnUpdate = newNode.(ReferenceAction)
}
func replaceRefOfFuncExprQualifier(newNode, parent SQLNode) {
	parent.(*FuncExpr).Qualifier = newNode.(TableIdent)
}
func replaceRefOfFuncExprName(newNode, parent SQLNode) {
	parent.(*FuncExpr).Name = newNode.(ColIdent)
}
func replaceRefOfFuncExprExprs(newNode, parent SQLNode) {
	parent.(*FuncExpr).Exprs = newNode.(SelectExprs)
}
func replaceGroupBy(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(GroupBy)[idx] = newNode.(Expr)
	}
}
func replaceRefOfGroupConcatExprExprs(newNode, parent SQLNode) {
	parent.(*GroupConcatExpr).Exprs = newNode.(SelectExprs)
}
func replaceRefOfGroupConcatExprOrderBy(newNode, parent SQLNode) {
	parent.(*GroupConcatExpr).OrderBy = newNode.(OrderBy)
}
func replaceRefOfGroupConcatExprLimit(newNode, parent SQLNode) {
	parent.(*GroupConcatExpr).Limit = newNode.(*Limit)
}
func replaceRefOfIndexDefinitionInfo(newNode, parent SQLNode) {
	parent.(*IndexDefinition).Info = newNode.(*IndexInfo)
}
func replaceRefOfIndexHintsIndexes(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*IndexHints).Indexes[idx] = newNode.(ColIdent)
	}
}
func replaceRefOfIndexInfoName(newNode, parent SQLNode) {
	parent.(*IndexInfo).Name = newNode.(ColIdent)
}
func replaceRefOfIndexInfoConstraintName(newNode, parent SQLNode) {
	parent.(*IndexInfo).ConstraintName = newNode.(ColIdent)
}
func replaceRefOfInsertComments(newNode, parent SQLNode) {
	parent.(*Insert).Comments = newNode.(Comments)
}
func replaceRefOfInsertTable(newNode, parent SQLNode) {
	parent.(*Insert).Table = newNode.(TableName)
}
func replaceRefOfInsertPartitions(newNode, parent SQLNode) {
	parent.(*Insert).Partitions = newNode.(Partitions)
}
func replaceRefOfInsertColumns(newNode, parent SQLNode) {
	parent.(*Insert).Columns = newNode.(Columns)
}
func replaceRefOfInsertRows(newNode, parent SQLNode) {
	parent.(*Insert).Rows = newNode.(InsertRows)
}
func replaceRefOfInsertOnDup(newNode, parent SQLNode) {
	parent.(*Insert).OnDup = newNode.(OnDup)
}
func replaceRefOfIntervalExprExpr(newNode, parent SQLNode) {
	parent.(*IntervalExpr).Expr = newNode.(Expr)
}
func replaceRefOfIsExprExpr(newNode, parent SQLNode) {
	parent.(*IsExpr).Expr = newNode.(Expr)
}
func replaceRefOfJoinConditionOn(newNode, parent SQLNode) {
	parent.(*JoinCondition).On = newNode.(Expr)
}
func replaceRefOfJoinConditionUsing(newNode, parent SQLNode) {
	parent.(*JoinCondition).Using = newNode.(Columns)
}
func replaceRefOfJoinTableExprLeftExpr(newNode, parent SQLNode) {
	parent.(*JoinTableExpr).LeftExpr = newNode.(TableExpr)
}
func replaceRefOfJoinTableExprRightExpr(newNode, parent SQLNode) {
	parent.(*JoinTableExpr).RightExpr = newNode.(TableExpr)
}
func replaceRefOfJoinTableExprCondition(newNode, parent SQLNode) {
	parent.(*JoinTableExpr).Condition = newNode.(JoinCondition)
}
func replaceRefOfLimitOffset(newNode, parent SQLNode) {
	parent.(*Limit).Offset = newNode.(Expr)
}
func replaceRefOfLimitRowcount(newNode, parent SQLNode) {
	parent.(*Limit).Rowcount = newNode.(Expr)
}
func replaceRefOfMatchExprColumns(newNode, parent SQLNode) {
	parent.(*MatchExpr).Columns = newNode.(SelectExprs)
}
func replaceRefOfMatchExprExpr(newNode, parent SQLNode) {
	parent.(*MatchExpr).Expr = newNode.(Expr)
}
func replaceRefOfModifyColumnNewColDefinition(newNode, parent SQLNode) {
	parent.(*ModifyColumn).NewColDefinition = newNode.(*ColumnDefinition)
}
func replaceRefOfModifyColumnFirst(newNode, parent SQLNode) {
	parent.(*ModifyColumn).First = newNode.(*ColName)
}
func replaceRefOfModifyColumnAfter(newNode, parent SQLNode) {
	parent.(*ModifyColumn).After = newNode.(*ColName)
}
func replaceRefOfNextvalExpr(newNode, parent SQLNode) {
	parent.(*Nextval).Expr = newNode.(Expr)
}
func replaceRefOfNotExprExpr(newNode, parent SQLNode) {
	parent.(*NotExpr).Expr = newNode.(Expr)
}
func replaceOnDup(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(OnDup)[idx] = newNode.(*UpdateExpr)
	}
}
func replaceRefOfOptLikeLikeTable(newNode, parent SQLNode) {
	parent.(*OptLike).LikeTable = newNode.(TableName)
}
func replaceRefOfOrExprLeft(newNode, parent SQLNode) {
	parent.(*OrExpr).Left = newNode.(Expr)
}
func replaceRefOfOrExprRight(newNode, parent SQLNode) {
	parent.(*OrExpr).Right = newNode.(Expr)
}
func replaceRefOfOrderExpr(newNode, parent SQLNode) {
	parent.(*Order).Expr = newNode.(Expr)
}
func replaceOrderBy(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(OrderBy)[idx] = newNode.(*Order)
	}
}
func replaceRefOfOrderByOptionCols(newNode, parent SQLNode) {
	parent.(*OrderByOption).Cols = newNode.(Columns)
}
func replaceRefOfParenSelectSelect(newNode, parent SQLNode) {
	parent.(*ParenSelect).Select = newNode.(SelectStatement)
}
func replaceRefOfParenTableExprExprs(newNode, parent SQLNode) {
	parent.(*ParenTableExpr).Exprs = newNode.(TableExprs)
}
func replaceRefOfPartitionDefinitionName(newNode, parent SQLNode) {
	parent.(*PartitionDefinition).Name = newNode.(ColIdent)
}
func replaceRefOfPartitionDefinitionLimit(newNode, parent SQLNode) {
	parent.(*PartitionDefinition).Limit = newNode.(Expr)
}
func replaceRefOfPartitionSpecNames(newNode, parent SQLNode) {
	parent.(*PartitionSpec).Names = newNode.(Partitions)
}
func replaceRefOfPartitionSpecNumber(newNode, parent SQLNode) {
	parent.(*PartitionSpec).Number = newNode.(*Literal)
}
func replaceRefOfPartitionSpecTableName(newNode, parent SQLNode) {
	parent.(*PartitionSpec).TableName = newNode.(TableName)
}
func replaceRefOfPartitionSpecDefinitions(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*PartitionSpec).Definitions[idx] = newNode.(*PartitionDefinition)
	}
}
func replacePartitions(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(Partitions)[idx] = newNode.(ColIdent)
	}
}
func replaceRefOfRangeCondLeft(newNode, parent SQLNode) {
	parent.(*RangeCond).Left = newNode.(Expr)
}
func replaceRefOfRangeCondFrom(newNode, parent SQLNode) {
	parent.(*RangeCond).From = newNode.(Expr)
}
func replaceRefOfRangeCondTo(newNode, parent SQLNode) {
	parent.(*RangeCond).To = newNode.(Expr)
}
func replaceRefOfReleaseName(newNode, parent SQLNode) {
	parent.(*Release).Name = newNode.(ColIdent)
}
func replaceRefOfRenameTableNameTable(newNode, parent SQLNode) {
	parent.(*RenameTableName).Table = newNode.(TableName)
}
func replaceRefOfSRollbackName(newNode, parent SQLNode) {
	parent.(*SRollback).Name = newNode.(ColIdent)
}
func replaceRefOfSavepointName(newNode, parent SQLNode) {
	parent.(*Savepoint).Name = newNode.(ColIdent)
}
func replaceRefOfSelectComments(newNode, parent SQLNode) {
	parent.(*Select).Comments = newNode.(Comments)
}
func replaceRefOfSelectSelectExprs(newNode, parent SQLNode) {
	parent.(*Select).SelectExprs = newNode.(SelectExprs)
}
func replaceRefOfSelectFrom(newNode, parent SQLNode) {
	parent.(*Select).From = newNode.(TableExprs)
}
func replaceRefOfSelectWhere(newNode, parent SQLNode) {
	parent.(*Select).Where = newNode.(*Where)
}
func replaceRefOfSelectGroupBy(newNode, parent SQLNode) {
	parent.(*Select).GroupBy = newNode.(GroupBy)
}
func replaceRefOfSelectHaving(newNode, parent SQLNode) {
	parent.(*Select).Having = newNode.(*Where)
}
func replaceRefOfSelectOrderBy(newNode, parent SQLNode) {
	parent.(*Select).OrderBy = newNode.(OrderBy)
}
func replaceRefOfSelectLimit(newNode, parent SQLNode) {
	parent.(*Select).Limit = newNode.(*Limit)
}
func replaceRefOfSelectInto(newNode, parent SQLNode) {
	parent.(*Select).Into = newNode.(*SelectInto)
}
func replaceSelectExprs(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(SelectExprs)[idx] = newNode.(SelectExpr)
	}
}
func replaceRefOfSetComments(newNode, parent SQLNode) {
	parent.(*Set).Comments = newNode.(Comments)
}
func replaceRefOfSetExprs(newNode, parent SQLNode) {
	parent.(*Set).Exprs = newNode.(SetExprs)
}
func replaceRefOfSetExprName(newNode, parent SQLNode) {
	parent.(*SetExpr).Name = newNode.(ColIdent)
}
func replaceRefOfSetExprExpr(newNode, parent SQLNode) {
	parent.(*SetExpr).Expr = newNode.(Expr)
}
func replaceSetExprs(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(SetExprs)[idx] = newNode.(*SetExpr)
	}
}
func replaceRefOfSetTransactionSQLNode(newNode, parent SQLNode) {
	parent.(*SetTransaction).SQLNode = newNode.(SQLNode)
}
func replaceRefOfSetTransactionComments(newNode, parent SQLNode) {
	parent.(*SetTransaction).Comments = newNode.(Comments)
}
func replaceRefOfSetTransactionCharacteristics(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*SetTransaction).Characteristics[idx] = newNode.(Characteristic)
	}
}
func replaceRefOfShowInternal(newNode, parent SQLNode) {
	parent.(*Show).Internal = newNode.(ShowInternal)
}
func replaceRefOfShowBasicTbl(newNode, parent SQLNode) {
	parent.(*ShowBasic).Tbl = newNode.(TableName)
}
func replaceRefOfShowBasicFilter(newNode, parent SQLNode) {
	parent.(*ShowBasic).Filter = newNode.(*ShowFilter)
}
func replaceRefOfShowCreateOp(newNode, parent SQLNode) {
	parent.(*ShowCreate).Op = newNode.(TableName)
}
func replaceRefOfShowFilterFilter(newNode, parent SQLNode) {
	parent.(*ShowFilter).Filter = newNode.(Expr)
}
func replaceRefOfShowLegacyOnTable(newNode, parent SQLNode) {
	parent.(*ShowLegacy).OnTable = newNode.(TableName)
}
func replaceRefOfShowLegacyTable(newNode, parent SQLNode) {
	parent.(*ShowLegacy).Table = newNode.(TableName)
}
func replaceRefOfShowLegacyShowCollationFilterOpt(newNode, parent SQLNode) {
	parent.(*ShowLegacy).ShowCollationFilterOpt = newNode.(Expr)
}
func replaceRefOfStarExprTableName(newNode, parent SQLNode) {
	parent.(*StarExpr).TableName = newNode.(TableName)
}
func replaceRefOfStreamComments(newNode, parent SQLNode) {
	parent.(*Stream).Comments = newNode.(Comments)
}
func replaceRefOfStreamSelectExpr(newNode, parent SQLNode) {
	parent.(*Stream).SelectExpr = newNode.(SelectExpr)
}
func replaceRefOfStreamTable(newNode, parent SQLNode) {
	parent.(*Stream).Table = newNode.(TableName)
}
func replaceRefOfSubquerySelect(newNode, parent SQLNode) {
	parent.(*Subquery).Select = newNode.(SelectStatement)
}
func replaceRefOfSubstrExprName(newNode, parent SQLNode) {
	parent.(*SubstrExpr).Name = newNode.(*ColName)
}
func replaceRefOfSubstrExprStrVal(newNode, parent SQLNode) {
	parent.(*SubstrExpr).StrVal = newNode.(*Literal)
}
func replaceRefOfSubstrExprFrom(newNode, parent SQLNode) {
	parent.(*SubstrExpr).From = newNode.(Expr)
}
func replaceRefOfSubstrExprTo(newNode, parent SQLNode) {
	parent.(*SubstrExpr).To = newNode.(Expr)
}
func replaceTableExprs(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(TableExprs)[idx] = newNode.(TableExpr)
	}
}
func replaceRefOfTableNameName(newNode, parent SQLNode) {
	parent.(*TableName).Name = newNode.(TableIdent)
}
func replaceRefOfTableNameQualifier(newNode, parent SQLNode) {
	parent.(*TableName).Qualifier = newNode.(TableIdent)
}
func replaceTableNames(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(TableNames)[idx] = newNode.(TableName)
	}
}
func replaceRefOfTableSpecColumns(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*TableSpec).Columns[idx] = newNode.(*ColumnDefinition)
	}
}
func replaceRefOfTableSpecIndexes(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*TableSpec).Indexes[idx] = newNode.(*IndexDefinition)
	}
}
func replaceRefOfTableSpecConstraints(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*TableSpec).Constraints[idx] = newNode.(*ConstraintDefinition)
	}
}
func replaceRefOfTableSpecOptions(newNode, parent SQLNode) {
	parent.(*TableSpec).Options = newNode.(TableOptions)
}
func replaceRefOfTimestampFuncExprExpr1(newNode, parent SQLNode) {
	parent.(*TimestampFuncExpr).Expr1 = newNode.(Expr)
}
func replaceRefOfTimestampFuncExprExpr2(newNode, parent SQLNode) {
	parent.(*TimestampFuncExpr).Expr2 = newNode.(Expr)
}
func replaceRefOfTruncateTableTable(newNode, parent SQLNode) {
	parent.(*TruncateTable).Table = newNode.(TableName)
}
func replaceRefOfUnaryExprExpr(newNode, parent SQLNode) {
	parent.(*UnaryExpr).Expr = newNode.(Expr)
}
func replaceRefOfUnionFirstStatement(newNode, parent SQLNode) {
	parent.(*Union).FirstStatement = newNode.(SelectStatement)
}
func replaceRefOfUnionUnionSelects(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*Union).UnionSelects[idx] = newNode.(*UnionSelect)
	}
}
func replaceRefOfUnionOrderBy(newNode, parent SQLNode) {
	parent.(*Union).OrderBy = newNode.(OrderBy)
}
func replaceRefOfUnionLimit(newNode, parent SQLNode) {
	parent.(*Union).Limit = newNode.(*Limit)
}
func replaceRefOfUnionSelectStatement(newNode, parent SQLNode) {
	parent.(*UnionSelect).Statement = newNode.(SelectStatement)
}
func replaceRefOfUpdateComments(newNode, parent SQLNode) {
	parent.(*Update).Comments = newNode.(Comments)
}
func replaceRefOfUpdateTableExprs(newNode, parent SQLNode) {
	parent.(*Update).TableExprs = newNode.(TableExprs)
}
func replaceRefOfUpdateExprs(newNode, parent SQLNode) {
	parent.(*Update).Exprs = newNode.(UpdateExprs)
}
func replaceRefOfUpdateWhere(newNode, parent SQLNode) {
	parent.(*Update).Where = newNode.(*Where)
}
func replaceRefOfUpdateOrderBy(newNode, parent SQLNode) {
	parent.(*Update).OrderBy = newNode.(OrderBy)
}
func replaceRefOfUpdateLimit(newNode, parent SQLNode) {
	parent.(*Update).Limit = newNode.(*Limit)
}
func replaceRefOfUpdateExprName(newNode, parent SQLNode) {
	parent.(*UpdateExpr).Name = newNode.(*ColName)
}
func replaceRefOfUpdateExprExpr(newNode, parent SQLNode) {
	parent.(*UpdateExpr).Expr = newNode.(Expr)
}
func replaceUpdateExprs(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(UpdateExprs)[idx] = newNode.(*UpdateExpr)
	}
}
func replaceRefOfUseDBName(newNode, parent SQLNode) {
	parent.(*Use).DBName = newNode.(TableIdent)
}
func replaceRefOfVStreamComments(newNode, parent SQLNode) {
	parent.(*VStream).Comments = newNode.(Comments)
}
func replaceRefOfVStreamSelectExpr(newNode, parent SQLNode) {
	parent.(*VStream).SelectExpr = newNode.(SelectExpr)
}
func replaceRefOfVStreamTable(newNode, parent SQLNode) {
	parent.(*VStream).Table = newNode.(TableName)
}
func replaceRefOfVStreamWhere(newNode, parent SQLNode) {
	parent.(*VStream).Where = newNode.(*Where)
}
func replaceRefOfVStreamLimit(newNode, parent SQLNode) {
	parent.(*VStream).Limit = newNode.(*Limit)
}
func replaceValTuple(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(ValTuple)[idx] = newNode.(Expr)
	}
}
func replaceValues(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(Values)[idx] = newNode.(ValTuple)
	}
}
func replaceRefOfValuesFuncExprName(newNode, parent SQLNode) {
	parent.(*ValuesFuncExpr).Name = newNode.(*ColName)
}
func replaceRefOfVindexParamKey(newNode, parent SQLNode) {
	parent.(*VindexParam).Key = newNode.(ColIdent)
}
func replaceRefOfVindexSpecName(newNode, parent SQLNode) {
	parent.(*VindexSpec).Name = newNode.(ColIdent)
}
func replaceRefOfVindexSpecType(newNode, parent SQLNode) {
	parent.(*VindexSpec).Type = newNode.(ColIdent)
}
func replaceRefOfVindexSpecParams(idx int) func(SQLNode, SQLNode) {
	return func(newNode, container SQLNode) {
		container.(*VindexSpec).Params[idx] = newNode.(VindexParam)
	}
}
func replaceRefOfWhenCond(newNode, parent SQLNode) {
	parent.(*When).Cond = newNode.(Expr)
}
func replaceRefOfWhenVal(newNode, parent SQLNode) {
	parent.(*When).Val = newNode.(Expr)
}
func replaceRefOfWhereExpr(newNode, parent SQLNode) {
	parent.(*Where).Expr = newNode.(Expr)
}
func replaceRefOfXorExprLeft(newNode, parent SQLNode) {
	parent.(*XorExpr).Left = newNode.(Expr)
}
func replaceRefOfXorExprRight(newNode, parent SQLNode) {
	parent.(*XorExpr).Right = newNode.(Expr)
}
func (a *application) apply(parent, node SQLNode, replacer replacerFunc) {
	if node == nil || isNilValue(node) {
		return
	}
	saved := a.cursor
	a.cursor.replacer = replacer
	a.cursor.node = node
	a.cursor.parent = parent
	if a.pre != nil && !a.pre(&a.cursor) {
		a.cursor = saved
		return
	}
	switch n := node.(type) {
	case *AddColumns:
		for x, el := range n.Columns {
			a.apply(node, el, replaceRefOfAddColumnsColumns(x))
		}
		a.apply(node, n.First, replaceRefOfAddColumnsFirst)
		a.apply(node, n.After, replaceRefOfAddColumnsAfter)
	case *AddConstraintDefinition:
		a.apply(node, n.ConstraintDefinition, replaceRefOfAddConstraintDefinitionConstraintDefinition)
	case *AddIndexDefinition:
		a.apply(node, n.IndexDefinition, replaceRefOfAddIndexDefinitionIndexDefinition)
	case *AliasedExpr:
		a.apply(node, n.Expr, replaceRefOfAliasedExprExpr)
		a.apply(node, n.As, replaceRefOfAliasedExprAs)
	case *AliasedTableExpr:
		a.apply(node, n.Expr, replaceRefOfAliasedTableExprExpr)
		a.apply(node, n.Partitions, replaceRefOfAliasedTableExprPartitions)
		a.apply(node, n.As, replaceRefOfAliasedTableExprAs)
		a.apply(node, n.Hints, replaceRefOfAliasedTableExprHints)
	case *AlterCharset:
	case *AlterColumn:
		a.apply(node, n.Column, replaceRefOfAlterColumnColumn)
		a.apply(node, n.DefaultVal, replaceRefOfAlterColumnDefaultVal)
	case *AlterDatabase:
	case *AlterTable:
		a.apply(node, n.Table, replaceRefOfAlterTableTable)
		for x, el := range n.AlterOptions {
			a.apply(node, el, replaceRefOfAlterTableAlterOptions(x))
		}
		a.apply(node, n.PartitionSpec, replaceRefOfAlterTablePartitionSpec)
	case *AlterView:
		a.apply(node, n.ViewName, replaceRefOfAlterViewViewName)
		a.apply(node, n.Columns, replaceRefOfAlterViewColumns)
		a.apply(node, n.Select, replaceRefOfAlterViewSelect)
	case *AlterVschema:
		a.apply(node, n.Table, replaceRefOfAlterVschemaTable)
		a.apply(node, n.VindexSpec, replaceRefOfAlterVschemaVindexSpec)
		for x, el := range n.VindexCols {
			a.apply(node, el, replaceRefOfAlterVschemaVindexCols(x))
		}
		a.apply(node, n.AutoIncSpec, replaceRefOfAlterVschemaAutoIncSpec)
	case *AndExpr:
		a.apply(node, n.Left, replaceRefOfAndExprLeft)
		a.apply(node, n.Right, replaceRefOfAndExprRight)
	case Argument:
	case *AutoIncSpec:
		a.apply(node, n.Column, replaceRefOfAutoIncSpecColumn)
		a.apply(node, n.Sequence, replaceRefOfAutoIncSpecSequence)
	case *Begin:
	case *BinaryExpr:
		a.apply(node, n.Left, replaceRefOfBinaryExprLeft)
		a.apply(node, n.Right, replaceRefOfBinaryExprRight)
	case *CallProc:
		a.apply(node, n.Name, replaceRefOfCallProcName)
		a.apply(node, n.Params, replaceRefOfCallProcParams)
	case *CaseExpr:
		a.apply(node, n.Expr, replaceRefOfCaseExprExpr)
		for x, el := range n.Whens {
			a.apply(node, el, replaceRefOfCaseExprWhens(x))
		}
		a.apply(node, n.Else, replaceRefOfCaseExprElse)
	case *ChangeColumn:
		a.apply(node, n.OldColumn, replaceRefOfChangeColumnOldColumn)
		a.apply(node, n.NewColDefinition, replaceRefOfChangeColumnNewColDefinition)
		a.apply(node, n.First, replaceRefOfChangeColumnFirst)
		a.apply(node, n.After, replaceRefOfChangeColumnAfter)
	case *CheckConstraintDefinition:
		a.apply(node, n.Expr, replaceRefOfCheckConstraintDefinitionExpr)
	case ColIdent:
	case *ColIdent:
	case *ColName:
		a.apply(node, n.Name, replaceRefOfColNameName)
		a.apply(node, n.Qualifier, replaceRefOfColNameQualifier)
	case *CollateExpr:
		a.apply(node, n.Expr, replaceRefOfCollateExprExpr)
	case *ColumnDefinition:
		a.apply(node, n.Name, replaceRefOfColumnDefinitionName)
	case *ColumnType:
		a.apply(node, n.Length, replaceRefOfColumnTypeLength)
		a.apply(node, n.Scale, replaceRefOfColumnTypeScale)
	case Columns:
		for x, el := range n {
			a.apply(node, el, replaceColumns(x))
		}
	case Comments:
	case *Commit:
	case *ComparisonExpr:
		a.apply(node, n.Left, replaceRefOfComparisonExprLeft)
		a.apply(node, n.Right, replaceRefOfComparisonExprRight)
		a.apply(node, n.Escape, replaceRefOfComparisonExprEscape)
	case *ConstraintDefinition:
		a.apply(node, n.Details, replaceRefOfConstraintDefinitionDetails)
	case *ConvertExpr:
		a.apply(node, n.Expr, replaceRefOfConvertExprExpr)
		a.apply(node, n.Type, replaceRefOfConvertExprType)
	case *ConvertType:
		a.apply(node, n.Length, replaceRefOfConvertTypeLength)
		a.apply(node, n.Scale, replaceRefOfConvertTypeScale)
	case *ConvertUsingExpr:
		a.apply(node, n.Expr, replaceRefOfConvertUsingExprExpr)
	case *CreateDatabase:
	case *CreateTable:
		a.apply(node, n.Table, replaceRefOfCreateTableTable)
		a.apply(node, n.TableSpec, replaceRefOfCreateTableTableSpec)
		a.apply(node, n.OptLike, replaceRefOfCreateTableOptLike)
	case *CreateView:
		a.apply(node, n.ViewName, replaceRefOfCreateViewViewName)
		a.apply(node, n.Columns, replaceRefOfCreateViewColumns)
		a.apply(node, n.Select, replaceRefOfCreateViewSelect)
	case *CurTimeFuncExpr:
		a.apply(node, n.Name, replaceRefOfCurTimeFuncExprName)
		a.apply(node, n.Fsp, replaceRefOfCurTimeFuncExprFsp)
	case *Default:
	case *Delete:
		a.apply(node, n.Comments, replaceRefOfDeleteComments)
		a.apply(node, n.Targets, replaceRefOfDeleteTargets)
		a.apply(node, n.TableExprs, replaceRefOfDeleteTableExprs)
		a.apply(node, n.Partitions, replaceRefOfDeletePartitions)
		a.apply(node, n.Where, replaceRefOfDeleteWhere)
		a.apply(node, n.OrderBy, replaceRefOfDeleteOrderBy)
		a.apply(node, n.Limit, replaceRefOfDeleteLimit)
	case *DerivedTable:
		a.apply(node, n.Select, replaceRefOfDerivedTableSelect)
	case *DropColumn:
		a.apply(node, n.Name, replaceRefOfDropColumnName)
	case *DropDatabase:
	case *DropKey:
	case *DropTable:
		a.apply(node, n.FromTables, replaceRefOfDropTableFromTables)
	case *DropView:
		a.apply(node, n.FromTables, replaceRefOfDropViewFromTables)
	case *ExistsExpr:
		a.apply(node, n.Subquery, replaceRefOfExistsExprSubquery)
	case *ExplainStmt:
		a.apply(node, n.Statement, replaceRefOfExplainStmtStatement)
	case *ExplainTab:
		a.apply(node, n.Table, replaceRefOfExplainTabTable)
	case Exprs:
		for x, el := range n {
			a.apply(node, el, replaceExprs(x))
		}
	case *Flush:
		a.apply(node, n.TableNames, replaceRefOfFlushTableNames)
	case *Force:
	case *ForeignKeyDefinition:
		a.apply(node, n.Source, replaceRefOfForeignKeyDefinitionSource)
		a.apply(node, n.ReferencedTable, replaceRefOfForeignKeyDefinitionReferencedTable)
		a.apply(node, n.ReferencedColumns, replaceRefOfForeignKeyDefinitionReferencedColumns)
		a.apply(node, n.OnDelete, replaceRefOfForeignKeyDefinitionOnDelete)
		a.apply(node, n.OnUpdate, replaceRefOfForeignKeyDefinitionOnUpdate)
	case *FuncExpr:
		a.apply(node, n.Qualifier, replaceRefOfFuncExprQualifier)
		a.apply(node, n.Name, replaceRefOfFuncExprName)
		a.apply(node, n.Exprs, replaceRefOfFuncExprExprs)
	case GroupBy:
		for x, el := range n {
			a.apply(node, el, replaceGroupBy(x))
		}
	case *GroupConcatExpr:
		a.apply(node, n.Exprs, replaceRefOfGroupConcatExprExprs)
		a.apply(node, n.OrderBy, replaceRefOfGroupConcatExprOrderBy)
		a.apply(node, n.Limit, replaceRefOfGroupConcatExprLimit)
	case *IndexDefinition:
		a.apply(node, n.Info, replaceRefOfIndexDefinitionInfo)
	case *IndexHints:
		for x, el := range n.Indexes {
			a.apply(node, el, replaceRefOfIndexHintsIndexes(x))
		}
	case *IndexInfo:
		a.apply(node, n.Name, replaceRefOfIndexInfoName)
		a.apply(node, n.ConstraintName, replaceRefOfIndexInfoConstraintName)
	case *Insert:
		a.apply(node, n.Comments, replaceRefOfInsertComments)
		a.apply(node, n.Table, replaceRefOfInsertTable)
		a.apply(node, n.Partitions, replaceRefOfInsertPartitions)
		a.apply(node, n.Columns, replaceRefOfInsertColumns)
		a.apply(node, n.Rows, replaceRefOfInsertRows)
		a.apply(node, n.OnDup, replaceRefOfInsertOnDup)
	case *IntervalExpr:
		a.apply(node, n.Expr, replaceRefOfIntervalExprExpr)
	case *IsExpr:
		a.apply(node, n.Expr, replaceRefOfIsExprExpr)
	case JoinCondition:
		a.apply(node, n.On, replacePanic("JoinCondition On"))
		a.apply(node, n.Using, replacePanic("JoinCondition Using"))
	case *JoinCondition:
		a.apply(node, n.On, replaceRefOfJoinConditionOn)
		a.apply(node, n.Using, replaceRefOfJoinConditionUsing)
	case *JoinTableExpr:
		a.apply(node, n.LeftExpr, replaceRefOfJoinTableExprLeftExpr)
		a.apply(node, n.RightExpr, replaceRefOfJoinTableExprRightExpr)
		a.apply(node, n.Condition, replaceRefOfJoinTableExprCondition)
	case *KeyState:
	case *Limit:
		a.apply(node, n.Offset, replaceRefOfLimitOffset)
		a.apply(node, n.Rowcount, replaceRefOfLimitRowcount)
	case ListArg:
	case *Literal:
	case *Load:
	case *LockOption:
	case *LockTables:
	case *MatchExpr:
		a.apply(node, n.Columns, replaceRefOfMatchExprColumns)
		a.apply(node, n.Expr, replaceRefOfMatchExprExpr)
	case *ModifyColumn:
		a.apply(node, n.NewColDefinition, replaceRefOfModifyColumnNewColDefinition)
		a.apply(node, n.First, replaceRefOfModifyColumnFirst)
		a.apply(node, n.After, replaceRefOfModifyColumnAfter)
	case Nextval:
		a.apply(node, n.Expr, replacePanic("Nextval Expr"))
	case *Nextval:
		a.apply(node, n.Expr, replaceRefOfNextvalExpr)
	case *NotExpr:
		a.apply(node, n.Expr, replaceRefOfNotExprExpr)
	case *NullVal:
	case OnDup:
		for x, el := range n {
			a.apply(node, el, replaceOnDup(x))
		}
	case *OptLike:
		a.apply(node, n.LikeTable, replaceRefOfOptLikeLikeTable)
	case *OrExpr:
		a.apply(node, n.Left, replaceRefOfOrExprLeft)
		a.apply(node, n.Right, replaceRefOfOrExprRight)
	case *Order:
		a.apply(node, n.Expr, replaceRefOfOrderExpr)
	case OrderBy:
		for x, el := range n {
			a.apply(node, el, replaceOrderBy(x))
		}
	case *OrderByOption:
		a.apply(node, n.Cols, replaceRefOfOrderByOptionCols)
	case *OtherAdmin:
	case *OtherRead:
	case *ParenSelect:
		a.apply(node, n.Select, replaceRefOfParenSelectSelect)
	case *ParenTableExpr:
		a.apply(node, n.Exprs, replaceRefOfParenTableExprExprs)
	case *PartitionDefinition:
		a.apply(node, n.Name, replaceRefOfPartitionDefinitionName)
		a.apply(node, n.Limit, replaceRefOfPartitionDefinitionLimit)
	case *PartitionSpec:
		a.apply(node, n.Names, replaceRefOfPartitionSpecNames)
		a.apply(node, n.Number, replaceRefOfPartitionSpecNumber)
		a.apply(node, n.TableName, replaceRefOfPartitionSpecTableName)
		for x, el := range n.Definitions {
			a.apply(node, el, replaceRefOfPartitionSpecDefinitions(x))
		}
	case Partitions:
		for x, el := range n {
			a.apply(node, el, replacePartitions(x))
		}
	case *RangeCond:
		a.apply(node, n.Left, replaceRefOfRangeCondLeft)
		a.apply(node, n.From, replaceRefOfRangeCondFrom)
		a.apply(node, n.To, replaceRefOfRangeCondTo)
	case *Release:
		a.apply(node, n.Name, replaceRefOfReleaseName)
	case *RenameIndex:
	case *RenameTable:
	case *RenameTableName:
		a.apply(node, n.Table, replaceRefOfRenameTableNameTable)
	case *Rollback:
	case *SRollback:
		a.apply(node, n.Name, replaceRefOfSRollbackName)
	case *Savepoint:
		a.apply(node, n.Name, replaceRefOfSavepointName)
	case *Select:
		a.apply(node, n.Comments, replaceRefOfSelectComments)
		a.apply(node, n.SelectExprs, replaceRefOfSelectSelectExprs)
		a.apply(node, n.From, replaceRefOfSelectFrom)
		a.apply(node, n.Where, replaceRefOfSelectWhere)
		a.apply(node, n.GroupBy, replaceRefOfSelectGroupBy)
		a.apply(node, n.Having, replaceRefOfSelectHaving)
		a.apply(node, n.OrderBy, replaceRefOfSelectOrderBy)
		a.apply(node, n.Limit, replaceRefOfSelectLimit)
		a.apply(node, n.Into, replaceRefOfSelectInto)
	case SelectExprs:
		for x, el := range n {
			a.apply(node, el, replaceSelectExprs(x))
		}
	case *SelectInto:
	case *Set:
		a.apply(node, n.Comments, replaceRefOfSetComments)
		a.apply(node, n.Exprs, replaceRefOfSetExprs)
	case *SetExpr:
		a.apply(node, n.Name, replaceRefOfSetExprName)
		a.apply(node, n.Expr, replaceRefOfSetExprExpr)
	case SetExprs:
		for x, el := range n {
			a.apply(node, el, replaceSetExprs(x))
		}
	case *SetTransaction:
		a.apply(node, n.SQLNode, replaceRefOfSetTransactionSQLNode)
		a.apply(node, n.Comments, replaceRefOfSetTransactionComments)
		for x, el := range n.Characteristics {
			a.apply(node, el, replaceRefOfSetTransactionCharacteristics(x))
		}
	case *Show:
		a.apply(node, n.Internal, replaceRefOfShowInternal)
	case *ShowBasic:
		a.apply(node, n.Tbl, replaceRefOfShowBasicTbl)
		a.apply(node, n.Filter, replaceRefOfShowBasicFilter)
	case *ShowCreate:
		a.apply(node, n.Op, replaceRefOfShowCreateOp)
	case *ShowFilter:
		a.apply(node, n.Filter, replaceRefOfShowFilterFilter)
	case *ShowLegacy:
		a.apply(node, n.OnTable, replaceRefOfShowLegacyOnTable)
		a.apply(node, n.Table, replaceRefOfShowLegacyTable)
		a.apply(node, n.ShowCollationFilterOpt, replaceRefOfShowLegacyShowCollationFilterOpt)
	case *StarExpr:
		a.apply(node, n.TableName, replaceRefOfStarExprTableName)
	case *Stream:
		a.apply(node, n.Comments, replaceRefOfStreamComments)
		a.apply(node, n.SelectExpr, replaceRefOfStreamSelectExpr)
		a.apply(node, n.Table, replaceRefOfStreamTable)
	case *Subquery:
		a.apply(node, n.Select, replaceRefOfSubquerySelect)
	case *SubstrExpr:
		a.apply(node, n.Name, replaceRefOfSubstrExprName)
		a.apply(node, n.StrVal, replaceRefOfSubstrExprStrVal)
		a.apply(node, n.From, replaceRefOfSubstrExprFrom)
		a.apply(node, n.To, replaceRefOfSubstrExprTo)
	case TableExprs:
		for x, el := range n {
			a.apply(node, el, replaceTableExprs(x))
		}
	case TableIdent:
	case *TableIdent:
	case TableName:
		a.apply(node, n.Name, replacePanic("TableName Name"))
		a.apply(node, n.Qualifier, replacePanic("TableName Qualifier"))
	case *TableName:
		a.apply(node, n.Name, replaceRefOfTableNameName)
		a.apply(node, n.Qualifier, replaceRefOfTableNameQualifier)
	case TableNames:
		for x, el := range n {
			a.apply(node, el, replaceTableNames(x))
		}
	case TableOptions:
	case *TableSpec:
		for x, el := range n.Columns {
			a.apply(node, el, replaceRefOfTableSpecColumns(x))
		}
		for x, el := range n.Indexes {
			a.apply(node, el, replaceRefOfTableSpecIndexes(x))
		}
		for x, el := range n.Constraints {
			a.apply(node, el, replaceRefOfTableSpecConstraints(x))
		}
		a.apply(node, n.Options, replaceRefOfTableSpecOptions)
	case *TablespaceOperation:
	case *TimestampFuncExpr:
		a.apply(node, n.Expr1, replaceRefOfTimestampFuncExprExpr1)
		a.apply(node, n.Expr2, replaceRefOfTimestampFuncExprExpr2)
	case *TruncateTable:
		a.apply(node, n.Table, replaceRefOfTruncateTableTable)
	case *UnaryExpr:
		a.apply(node, n.Expr, replaceRefOfUnaryExprExpr)
	case *Union:
		a.apply(node, n.FirstStatement, replaceRefOfUnionFirstStatement)
		for x, el := range n.UnionSelects {
			a.apply(node, el, replaceRefOfUnionUnionSelects(x))
		}
		a.apply(node, n.OrderBy, replaceRefOfUnionOrderBy)
		a.apply(node, n.Limit, replaceRefOfUnionLimit)
	case *UnionSelect:
		a.apply(node, n.Statement, replaceRefOfUnionSelectStatement)
	case *UnlockTables:
	case *Update:
		a.apply(node, n.Comments, replaceRefOfUpdateComments)
		a.apply(node, n.TableExprs, replaceRefOfUpdateTableExprs)
		a.apply(node, n.Exprs, replaceRefOfUpdateExprs)
		a.apply(node, n.Where, replaceRefOfUpdateWhere)
		a.apply(node, n.OrderBy, replaceRefOfUpdateOrderBy)
		a.apply(node, n.Limit, replaceRefOfUpdateLimit)
	case *UpdateExpr:
		a.apply(node, n.Name, replaceRefOfUpdateExprName)
		a.apply(node, n.Expr, replaceRefOfUpdateExprExpr)
	case UpdateExprs:
		for x, el := range n {
			a.apply(node, el, replaceUpdateExprs(x))
		}
	case *Use:
		a.apply(node, n.DBName, replaceRefOfUseDBName)
	case *VStream:
		a.apply(node, n.Comments, replaceRefOfVStreamComments)
		a.apply(node, n.SelectExpr, replaceRefOfVStreamSelectExpr)
		a.apply(node, n.Table, replaceRefOfVStreamTable)
		a.apply(node, n.Where, replaceRefOfVStreamWhere)
		a.apply(node, n.Limit, replaceRefOfVStreamLimit)
	case ValTuple:
		for x, el := range n {
			a.apply(node, el, replaceValTuple(x))
		}
	case *Validation:
	case Values:
		for x, el := range n {
			a.apply(node, el, replaceValues(x))
		}
	case *ValuesFuncExpr:
		a.apply(node, n.Name, replaceRefOfValuesFuncExprName)
	case VindexParam:
		a.apply(node, n.Key, replacePanic("VindexParam Key"))
	case *VindexParam:
		a.apply(node, n.Key, replaceRefOfVindexParamKey)
	case *VindexSpec:
		a.apply(node, n.Name, replaceRefOfVindexSpecName)
		a.apply(node, n.Type, replaceRefOfVindexSpecType)
		for x, el := range n.Params {
			a.apply(node, el, replaceRefOfVindexSpecParams(x))
		}
	case *When:
		a.apply(node, n.Cond, replaceRefOfWhenCond)
		a.apply(node, n.Val, replaceRefOfWhenVal)
	case *Where:
		a.apply(node, n.Expr, replaceRefOfWhereExpr)
	case *XorExpr:
		a.apply(node, n.Left, replaceRefOfXorExprLeft)
		a.apply(node, n.Right, replaceRefOfXorExprRight)
	}
	if a.post != nil && !a.post(&a.cursor) {
		panic(abort)
	}
	a.cursor = saved
}

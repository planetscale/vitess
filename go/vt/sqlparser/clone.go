/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

func CloneAlterOption(in AlterOption) AlterOption {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AddColumns:
		return CloneRefOfAddColumns(in)
	case *AddConstraintDefinition:
		return CloneRefOfAddConstraintDefinition(in)
	case *AddIndexDefinition:
		return CloneRefOfAddIndexDefinition(in)
	case AlgorithmValue:
		return in
	case *AlterCharset:
		return CloneRefOfAlterCharset(in)
	case *AlterColumn:
		return CloneRefOfAlterColumn(in)
	case *ChangeColumn:
		return CloneRefOfChangeColumn(in)
	case *DropColumn:
		return CloneRefOfDropColumn(in)
	case *DropKey:
		return CloneRefOfDropKey(in)
	case *Force:
		return CloneRefOfForce(in)
	case *KeyState:
		return CloneRefOfKeyState(in)
	case *LockOption:
		return CloneRefOfLockOption(in)
	case *ModifyColumn:
		return CloneRefOfModifyColumn(in)
	case *OrderByOption:
		return CloneRefOfOrderByOption(in)
	case *RenameIndex:
		return CloneRefOfRenameIndex(in)
	case *RenameTableName:
		return CloneRefOfRenameTableName(in)
	case TableOptions:
		return CloneTableOptions(in)
	case *TablespaceOperation:
		return CloneRefOfTablespaceOperation(in)
	case *Validation:
		return CloneRefOfValidation(in)
	}
	// this should never happen
	return nil
}
func CloneCharacteristic(in Characteristic) Characteristic {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case AccessMode:
		return in
	case IsolationLevel:
		return in
	}
	// this should never happen
	return nil
}
func CloneColTuple(in ColTuple) ColTuple {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case ListArg:
		return CloneListArg(in)
	case *Subquery:
		return CloneRefOfSubquery(in)
	case ValTuple:
		return CloneValTuple(in)
	}
	// this should never happen
	return nil
}
func CloneConstraintInfo(in ConstraintInfo) ConstraintInfo {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *CheckConstraintDefinition:
		return CloneRefOfCheckConstraintDefinition(in)
	case *ForeignKeyDefinition:
		return CloneRefOfForeignKeyDefinition(in)
	}
	// this should never happen
	return nil
}
func CloneDBDDLStatement(in DBDDLStatement) DBDDLStatement {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return CloneRefOfAlterDatabase(in)
	case *CreateDatabase:
		return CloneRefOfCreateDatabase(in)
	case *DropDatabase:
		return CloneRefOfDropDatabase(in)
	}
	// this should never happen
	return nil
}
func CloneDDLStatement(in DDLStatement) DDLStatement {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterTable:
		return CloneRefOfAlterTable(in)
	case *AlterView:
		return CloneRefOfAlterView(in)
	case *CreateTable:
		return CloneRefOfCreateTable(in)
	case *CreateView:
		return CloneRefOfCreateView(in)
	case *DropTable:
		return CloneRefOfDropTable(in)
	case *DropView:
		return CloneRefOfDropView(in)
	case *RenameTable:
		return CloneRefOfRenameTable(in)
	case *TruncateTable:
		return CloneRefOfTruncateTable(in)
	}
	// this should never happen
	return nil
}
func CloneExplain(in Explain) Explain {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ExplainStmt:
		return CloneRefOfExplainStmt(in)
	case *ExplainTab:
		return CloneRefOfExplainTab(in)
	}
	// this should never happen
	return nil
}
func CloneExpr(in Expr) Expr {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AndExpr:
		return CloneRefOfAndExpr(in)
	case Argument:
		return CloneArgument(in)
	case *BinaryExpr:
		return CloneRefOfBinaryExpr(in)
	case BoolVal:
		return in
	case *CaseExpr:
		return CloneRefOfCaseExpr(in)
	case *ColName:
		return CloneRefOfColName(in)
	case *CollateExpr:
		return CloneRefOfCollateExpr(in)
	case *ComparisonExpr:
		return CloneRefOfComparisonExpr(in)
	case *ConvertExpr:
		return CloneRefOfConvertExpr(in)
	case *ConvertUsingExpr:
		return CloneRefOfConvertUsingExpr(in)
	case *CurTimeFuncExpr:
		return CloneRefOfCurTimeFuncExpr(in)
	case *Default:
		return CloneRefOfDefault(in)
	case *ExistsExpr:
		return CloneRefOfExistsExpr(in)
	case *FuncExpr:
		return CloneRefOfFuncExpr(in)
	case *GroupConcatExpr:
		return CloneRefOfGroupConcatExpr(in)
	case *IntervalExpr:
		return CloneRefOfIntervalExpr(in)
	case *IsExpr:
		return CloneRefOfIsExpr(in)
	case ListArg:
		return CloneListArg(in)
	case *Literal:
		return CloneRefOfLiteral(in)
	case *MatchExpr:
		return CloneRefOfMatchExpr(in)
	case *NotExpr:
		return CloneRefOfNotExpr(in)
	case *NullVal:
		return CloneRefOfNullVal(in)
	case *OrExpr:
		return CloneRefOfOrExpr(in)
	case *RangeCond:
		return CloneRefOfRangeCond(in)
	case *Subquery:
		return CloneRefOfSubquery(in)
	case *SubstrExpr:
		return CloneRefOfSubstrExpr(in)
	case *TimestampFuncExpr:
		return CloneRefOfTimestampFuncExpr(in)
	case *UnaryExpr:
		return CloneRefOfUnaryExpr(in)
	case ValTuple:
		return CloneValTuple(in)
	case *ValuesFuncExpr:
		return CloneRefOfValuesFuncExpr(in)
	case *XorExpr:
		return CloneRefOfXorExpr(in)
	}
	// this should never happen
	return nil
}
func CloneInsertRows(in InsertRows) InsertRows {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ParenSelect:
		return CloneRefOfParenSelect(in)
	case *Select:
		return CloneRefOfSelect(in)
	case *Union:
		return CloneRefOfUnion(in)
	case Values:
		return CloneValues(in)
	}
	// this should never happen
	return nil
}
func CloneSQLNode(in SQLNode) SQLNode {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case AccessMode:
		return in
	case *AddColumns:
		return CloneRefOfAddColumns(in)
	case *AddConstraintDefinition:
		return CloneRefOfAddConstraintDefinition(in)
	case *AddIndexDefinition:
		return CloneRefOfAddIndexDefinition(in)
	case AlgorithmValue:
		return in
	case *AliasedExpr:
		return CloneRefOfAliasedExpr(in)
	case *AliasedTableExpr:
		return CloneRefOfAliasedTableExpr(in)
	case *AlterCharset:
		return CloneRefOfAlterCharset(in)
	case *AlterColumn:
		return CloneRefOfAlterColumn(in)
	case *AlterDatabase:
		return CloneRefOfAlterDatabase(in)
	case *AlterTable:
		return CloneRefOfAlterTable(in)
	case *AlterView:
		return CloneRefOfAlterView(in)
	case *AlterVschema:
		return CloneRefOfAlterVschema(in)
	case *AndExpr:
		return CloneRefOfAndExpr(in)
	case Argument:
		return CloneArgument(in)
	case *AutoIncSpec:
		return CloneRefOfAutoIncSpec(in)
	case *Begin:
		return CloneRefOfBegin(in)
	case *BinaryExpr:
		return CloneRefOfBinaryExpr(in)
	case BoolVal:
		return in
	case *CallProc:
		return CloneRefOfCallProc(in)
	case *CaseExpr:
		return CloneRefOfCaseExpr(in)
	case *ChangeColumn:
		return CloneRefOfChangeColumn(in)
	case *CheckConstraintDefinition:
		return CloneRefOfCheckConstraintDefinition(in)
	case ColIdent:
		return CloneColIdent(in)
	case *ColName:
		return CloneRefOfColName(in)
	case *CollateExpr:
		return CloneRefOfCollateExpr(in)
	case *ColumnDefinition:
		return CloneRefOfColumnDefinition(in)
	case *ColumnType:
		return CloneRefOfColumnType(in)
	case Columns:
		return CloneColumns(in)
	case Comments:
		return CloneComments(in)
	case *Commit:
		return CloneRefOfCommit(in)
	case *ComparisonExpr:
		return CloneRefOfComparisonExpr(in)
	case *ConstraintDefinition:
		return CloneRefOfConstraintDefinition(in)
	case *ConvertExpr:
		return CloneRefOfConvertExpr(in)
	case *ConvertType:
		return CloneRefOfConvertType(in)
	case *ConvertUsingExpr:
		return CloneRefOfConvertUsingExpr(in)
	case *CreateDatabase:
		return CloneRefOfCreateDatabase(in)
	case *CreateTable:
		return CloneRefOfCreateTable(in)
	case *CreateView:
		return CloneRefOfCreateView(in)
	case *CurTimeFuncExpr:
		return CloneRefOfCurTimeFuncExpr(in)
	case *Default:
		return CloneRefOfDefault(in)
	case *Delete:
		return CloneRefOfDelete(in)
	case *DerivedTable:
		return CloneRefOfDerivedTable(in)
	case *DropColumn:
		return CloneRefOfDropColumn(in)
	case *DropDatabase:
		return CloneRefOfDropDatabase(in)
	case *DropKey:
		return CloneRefOfDropKey(in)
	case *DropTable:
		return CloneRefOfDropTable(in)
	case *DropView:
		return CloneRefOfDropView(in)
	case *ExistsExpr:
		return CloneRefOfExistsExpr(in)
	case *ExplainStmt:
		return CloneRefOfExplainStmt(in)
	case *ExplainTab:
		return CloneRefOfExplainTab(in)
	case Exprs:
		return CloneExprs(in)
	case *Flush:
		return CloneRefOfFlush(in)
	case *Force:
		return CloneRefOfForce(in)
	case *ForeignKeyDefinition:
		return CloneRefOfForeignKeyDefinition(in)
	case *FuncExpr:
		return CloneRefOfFuncExpr(in)
	case GroupBy:
		return CloneGroupBy(in)
	case *GroupConcatExpr:
		return CloneRefOfGroupConcatExpr(in)
	case *IndexDefinition:
		return CloneRefOfIndexDefinition(in)
	case *IndexHints:
		return CloneRefOfIndexHints(in)
	case *IndexInfo:
		return CloneRefOfIndexInfo(in)
	case *Insert:
		return CloneRefOfInsert(in)
	case *IntervalExpr:
		return CloneRefOfIntervalExpr(in)
	case *IsExpr:
		return CloneRefOfIsExpr(in)
	case IsolationLevel:
		return in
	case JoinCondition:
		return CloneJoinCondition(in)
	case *JoinTableExpr:
		return CloneRefOfJoinTableExpr(in)
	case *KeyState:
		return CloneRefOfKeyState(in)
	case *Limit:
		return CloneRefOfLimit(in)
	case ListArg:
		return CloneListArg(in)
	case *Literal:
		return CloneRefOfLiteral(in)
	case *Load:
		return CloneRefOfLoad(in)
	case *LockOption:
		return CloneRefOfLockOption(in)
	case *LockTables:
		return CloneRefOfLockTables(in)
	case *MatchExpr:
		return CloneRefOfMatchExpr(in)
	case *ModifyColumn:
		return CloneRefOfModifyColumn(in)
	case Nextval:
		return CloneNextval(in)
	case *NotExpr:
		return CloneRefOfNotExpr(in)
	case *NullVal:
		return CloneRefOfNullVal(in)
	case OnDup:
		return CloneOnDup(in)
	case *OptLike:
		return CloneRefOfOptLike(in)
	case *OrExpr:
		return CloneRefOfOrExpr(in)
	case *Order:
		return CloneRefOfOrder(in)
	case OrderBy:
		return CloneOrderBy(in)
	case *OrderByOption:
		return CloneRefOfOrderByOption(in)
	case *OtherAdmin:
		return CloneRefOfOtherAdmin(in)
	case *OtherRead:
		return CloneRefOfOtherRead(in)
	case *ParenSelect:
		return CloneRefOfParenSelect(in)
	case *ParenTableExpr:
		return CloneRefOfParenTableExpr(in)
	case *PartitionDefinition:
		return CloneRefOfPartitionDefinition(in)
	case *PartitionSpec:
		return CloneRefOfPartitionSpec(in)
	case Partitions:
		return ClonePartitions(in)
	case *RangeCond:
		return CloneRefOfRangeCond(in)
	case ReferenceAction:
		return in
	case *Release:
		return CloneRefOfRelease(in)
	case *RenameIndex:
		return CloneRefOfRenameIndex(in)
	case *RenameTable:
		return CloneRefOfRenameTable(in)
	case *RenameTableName:
		return CloneRefOfRenameTableName(in)
	case *Rollback:
		return CloneRefOfRollback(in)
	case *SRollback:
		return CloneRefOfSRollback(in)
	case *Savepoint:
		return CloneRefOfSavepoint(in)
	case *Select:
		return CloneRefOfSelect(in)
	case SelectExprs:
		return CloneSelectExprs(in)
	case *SelectInto:
		return CloneRefOfSelectInto(in)
	case *Set:
		return CloneRefOfSet(in)
	case *SetExpr:
		return CloneRefOfSetExpr(in)
	case SetExprs:
		return CloneSetExprs(in)
	case *SetTransaction:
		return CloneRefOfSetTransaction(in)
	case *Show:
		return CloneRefOfShow(in)
	case *ShowBasic:
		return CloneRefOfShowBasic(in)
	case *ShowCreate:
		return CloneRefOfShowCreate(in)
	case *ShowFilter:
		return CloneRefOfShowFilter(in)
	case *ShowLegacy:
		return CloneRefOfShowLegacy(in)
	case *StarExpr:
		return CloneRefOfStarExpr(in)
	case *Stream:
		return CloneRefOfStream(in)
	case *Subquery:
		return CloneRefOfSubquery(in)
	case *SubstrExpr:
		return CloneRefOfSubstrExpr(in)
	case TableExprs:
		return CloneTableExprs(in)
	case TableIdent:
		return CloneTableIdent(in)
	case TableName:
		return CloneTableName(in)
	case TableNames:
		return CloneTableNames(in)
	case TableOptions:
		return CloneTableOptions(in)
	case *TableSpec:
		return CloneRefOfTableSpec(in)
	case *TablespaceOperation:
		return CloneRefOfTablespaceOperation(in)
	case *TimestampFuncExpr:
		return CloneRefOfTimestampFuncExpr(in)
	case *TruncateTable:
		return CloneRefOfTruncateTable(in)
	case *UnaryExpr:
		return CloneRefOfUnaryExpr(in)
	case *Union:
		return CloneRefOfUnion(in)
	case *UnionSelect:
		return CloneRefOfUnionSelect(in)
	case *UnlockTables:
		return CloneRefOfUnlockTables(in)
	case *Update:
		return CloneRefOfUpdate(in)
	case *UpdateExpr:
		return CloneRefOfUpdateExpr(in)
	case UpdateExprs:
		return CloneUpdateExprs(in)
	case *Use:
		return CloneRefOfUse(in)
	case *VStream:
		return CloneRefOfVStream(in)
	case ValTuple:
		return CloneValTuple(in)
	case *Validation:
		return CloneRefOfValidation(in)
	case Values:
		return CloneValues(in)
	case *ValuesFuncExpr:
		return CloneRefOfValuesFuncExpr(in)
	case VindexParam:
		return CloneVindexParam(in)
	case *VindexSpec:
		return CloneRefOfVindexSpec(in)
	case *When:
		return CloneRefOfWhen(in)
	case *Where:
		return CloneRefOfWhere(in)
	case *XorExpr:
		return CloneRefOfXorExpr(in)
	}
	// this should never happen
	return nil
}
func CloneSelectExpr(in SelectExpr) SelectExpr {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedExpr:
		return CloneRefOfAliasedExpr(in)
	case Nextval:
		return CloneNextval(in)
	case *StarExpr:
		return CloneRefOfStarExpr(in)
	}
	// this should never happen
	return nil
}
func CloneSelectStatement(in SelectStatement) SelectStatement {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ParenSelect:
		return CloneRefOfParenSelect(in)
	case *Select:
		return CloneRefOfSelect(in)
	case *Union:
		return CloneRefOfUnion(in)
	}
	// this should never happen
	return nil
}
func CloneShowInternal(in ShowInternal) ShowInternal {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ShowBasic:
		return CloneRefOfShowBasic(in)
	case *ShowCreate:
		return CloneRefOfShowCreate(in)
	case *ShowLegacy:
		return CloneRefOfShowLegacy(in)
	}
	// this should never happen
	return nil
}
func CloneSimpleTableExpr(in SimpleTableExpr) SimpleTableExpr {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *DerivedTable:
		return CloneRefOfDerivedTable(in)
	case TableName:
		return CloneTableName(in)
	}
	// this should never happen
	return nil
}
func CloneStatement(in Statement) Statement {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return CloneRefOfAlterDatabase(in)
	case *AlterTable:
		return CloneRefOfAlterTable(in)
	case *AlterView:
		return CloneRefOfAlterView(in)
	case *AlterVschema:
		return CloneRefOfAlterVschema(in)
	case *Begin:
		return CloneRefOfBegin(in)
	case *CallProc:
		return CloneRefOfCallProc(in)
	case *Commit:
		return CloneRefOfCommit(in)
	case *CreateDatabase:
		return CloneRefOfCreateDatabase(in)
	case *CreateTable:
		return CloneRefOfCreateTable(in)
	case *CreateView:
		return CloneRefOfCreateView(in)
	case *Delete:
		return CloneRefOfDelete(in)
	case *DropDatabase:
		return CloneRefOfDropDatabase(in)
	case *DropTable:
		return CloneRefOfDropTable(in)
	case *DropView:
		return CloneRefOfDropView(in)
	case *ExplainStmt:
		return CloneRefOfExplainStmt(in)
	case *ExplainTab:
		return CloneRefOfExplainTab(in)
	case *Flush:
		return CloneRefOfFlush(in)
	case *Insert:
		return CloneRefOfInsert(in)
	case *Load:
		return CloneRefOfLoad(in)
	case *LockTables:
		return CloneRefOfLockTables(in)
	case *OtherAdmin:
		return CloneRefOfOtherAdmin(in)
	case *OtherRead:
		return CloneRefOfOtherRead(in)
	case *ParenSelect:
		return CloneRefOfParenSelect(in)
	case *Release:
		return CloneRefOfRelease(in)
	case *RenameTable:
		return CloneRefOfRenameTable(in)
	case *Rollback:
		return CloneRefOfRollback(in)
	case *SRollback:
		return CloneRefOfSRollback(in)
	case *Savepoint:
		return CloneRefOfSavepoint(in)
	case *Select:
		return CloneRefOfSelect(in)
	case *Set:
		return CloneRefOfSet(in)
	case *SetTransaction:
		return CloneRefOfSetTransaction(in)
	case *Show:
		return CloneRefOfShow(in)
	case *Stream:
		return CloneRefOfStream(in)
	case *TruncateTable:
		return CloneRefOfTruncateTable(in)
	case *Union:
		return CloneRefOfUnion(in)
	case *UnlockTables:
		return CloneRefOfUnlockTables(in)
	case *Update:
		return CloneRefOfUpdate(in)
	case *Use:
		return CloneRefOfUse(in)
	case *VStream:
		return CloneRefOfVStream(in)
	}
	// this should never happen
	return nil
}
func CloneTableExpr(in TableExpr) TableExpr {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedTableExpr:
		return CloneRefOfAliasedTableExpr(in)
	case *JoinTableExpr:
		return CloneRefOfJoinTableExpr(in)
	case *ParenTableExpr:
		return CloneRefOfParenTableExpr(in)
	}
	// this should never happen
	return nil
}
func CloneRefOfAddColumns(n *AddColumns) *AddColumns {
	if n == nil {
		return nil
	}
	out := CloneAddColumns(*n)
	return &out
}
func CloneRefOfAddConstraintDefinition(n *AddConstraintDefinition) *AddConstraintDefinition {
	if n == nil {
		return nil
	}
	out := CloneAddConstraintDefinition(*n)
	return &out
}
func CloneRefOfAddIndexDefinition(n *AddIndexDefinition) *AddIndexDefinition {
	if n == nil {
		return nil
	}
	out := CloneAddIndexDefinition(*n)
	return &out
}
func CloneRefOfAlterCharset(n *AlterCharset) *AlterCharset {
	if n == nil {
		return nil
	}
	out := CloneAlterCharset(*n)
	return &out
}
func CloneRefOfAlterColumn(n *AlterColumn) *AlterColumn {
	if n == nil {
		return nil
	}
	out := CloneAlterColumn(*n)
	return &out
}
func CloneRefOfChangeColumn(n *ChangeColumn) *ChangeColumn {
	if n == nil {
		return nil
	}
	out := CloneChangeColumn(*n)
	return &out
}
func CloneRefOfDropColumn(n *DropColumn) *DropColumn {
	if n == nil {
		return nil
	}
	out := CloneDropColumn(*n)
	return &out
}
func CloneRefOfDropKey(n *DropKey) *DropKey {
	if n == nil {
		return nil
	}
	out := CloneDropKey(*n)
	return &out
}
func CloneRefOfForce(n *Force) *Force {
	if n == nil {
		return nil
	}
	out := CloneForce(*n)
	return &out
}
func CloneRefOfKeyState(n *KeyState) *KeyState {
	if n == nil {
		return nil
	}
	out := CloneKeyState(*n)
	return &out
}
func CloneRefOfLockOption(n *LockOption) *LockOption {
	if n == nil {
		return nil
	}
	out := CloneLockOption(*n)
	return &out
}
func CloneRefOfModifyColumn(n *ModifyColumn) *ModifyColumn {
	if n == nil {
		return nil
	}
	out := CloneModifyColumn(*n)
	return &out
}
func CloneRefOfOrderByOption(n *OrderByOption) *OrderByOption {
	if n == nil {
		return nil
	}
	out := CloneOrderByOption(*n)
	return &out
}
func CloneRefOfRenameIndex(n *RenameIndex) *RenameIndex {
	if n == nil {
		return nil
	}
	out := CloneRenameIndex(*n)
	return &out
}
func CloneRefOfRenameTableName(n *RenameTableName) *RenameTableName {
	if n == nil {
		return nil
	}
	out := CloneRenameTableName(*n)
	return &out
}
func CloneTableOptions(n TableOptions) TableOptions {
	res := make(TableOptions, len(n))
	for i, x := range n {
		res[i] = CloneRefOfTableOption(x)
	}
	return res
}
func CloneRefOfTablespaceOperation(n *TablespaceOperation) *TablespaceOperation {
	if n == nil {
		return nil
	}
	out := CloneTablespaceOperation(*n)
	return &out
}
func CloneRefOfValidation(n *Validation) *Validation {
	if n == nil {
		return nil
	}
	out := CloneValidation(*n)
	return &out
}
func CloneListArg(n ListArg) ListArg {
	res := make(ListArg, len(n))
	copy(res, n)
	return res
}
func CloneRefOfSubquery(n *Subquery) *Subquery {
	if n == nil {
		return nil
	}
	out := CloneSubquery(*n)
	return &out
}
func CloneValTuple(n ValTuple) ValTuple {
	res := make(ValTuple, len(n))
	for i, x := range n {
		res[i] = CloneExpr(x)
	}
	return res
}
func CloneRefOfCheckConstraintDefinition(n *CheckConstraintDefinition) *CheckConstraintDefinition {
	if n == nil {
		return nil
	}
	out := CloneCheckConstraintDefinition(*n)
	return &out
}
func CloneRefOfForeignKeyDefinition(n *ForeignKeyDefinition) *ForeignKeyDefinition {
	if n == nil {
		return nil
	}
	out := CloneForeignKeyDefinition(*n)
	return &out
}
func CloneRefOfAlterDatabase(n *AlterDatabase) *AlterDatabase {
	if n == nil {
		return nil
	}
	out := CloneAlterDatabase(*n)
	return &out
}
func CloneRefOfCreateDatabase(n *CreateDatabase) *CreateDatabase {
	if n == nil {
		return nil
	}
	out := CloneCreateDatabase(*n)
	return &out
}
func CloneRefOfDropDatabase(n *DropDatabase) *DropDatabase {
	if n == nil {
		return nil
	}
	out := CloneDropDatabase(*n)
	return &out
}
func CloneRefOfAlterTable(n *AlterTable) *AlterTable {
	if n == nil {
		return nil
	}
	out := CloneAlterTable(*n)
	return &out
}
func CloneRefOfAlterView(n *AlterView) *AlterView {
	if n == nil {
		return nil
	}
	out := CloneAlterView(*n)
	return &out
}
func CloneRefOfCreateTable(n *CreateTable) *CreateTable {
	if n == nil {
		return nil
	}
	out := CloneCreateTable(*n)
	return &out
}
func CloneRefOfCreateView(n *CreateView) *CreateView {
	if n == nil {
		return nil
	}
	out := CloneCreateView(*n)
	return &out
}
func CloneRefOfDropTable(n *DropTable) *DropTable {
	if n == nil {
		return nil
	}
	out := CloneDropTable(*n)
	return &out
}
func CloneRefOfDropView(n *DropView) *DropView {
	if n == nil {
		return nil
	}
	out := CloneDropView(*n)
	return &out
}
func CloneRefOfRenameTable(n *RenameTable) *RenameTable {
	if n == nil {
		return nil
	}
	out := CloneRenameTable(*n)
	return &out
}
func CloneRefOfTruncateTable(n *TruncateTable) *TruncateTable {
	if n == nil {
		return nil
	}
	out := CloneTruncateTable(*n)
	return &out
}
func CloneRefOfExplainStmt(n *ExplainStmt) *ExplainStmt {
	if n == nil {
		return nil
	}
	out := CloneExplainStmt(*n)
	return &out
}
func CloneRefOfExplainTab(n *ExplainTab) *ExplainTab {
	if n == nil {
		return nil
	}
	out := CloneExplainTab(*n)
	return &out
}
func CloneRefOfAndExpr(n *AndExpr) *AndExpr {
	if n == nil {
		return nil
	}
	out := CloneAndExpr(*n)
	return &out
}
func CloneArgument(n Argument) Argument {
	res := make(Argument, len(n))
	copy(res, n)
	return res
}
func CloneRefOfBinaryExpr(n *BinaryExpr) *BinaryExpr {
	if n == nil {
		return nil
	}
	out := CloneBinaryExpr(*n)
	return &out
}
func CloneRefOfCaseExpr(n *CaseExpr) *CaseExpr {
	if n == nil {
		return nil
	}
	out := CloneCaseExpr(*n)
	return &out
}
func CloneRefOfColName(n *ColName) *ColName {
	if n == nil {
		return nil
	}
	out := CloneColName(*n)
	return &out
}
func CloneRefOfCollateExpr(n *CollateExpr) *CollateExpr {
	if n == nil {
		return nil
	}
	out := CloneCollateExpr(*n)
	return &out
}
func CloneRefOfComparisonExpr(n *ComparisonExpr) *ComparisonExpr {
	if n == nil {
		return nil
	}
	out := CloneComparisonExpr(*n)
	return &out
}
func CloneRefOfConvertExpr(n *ConvertExpr) *ConvertExpr {
	if n == nil {
		return nil
	}
	out := CloneConvertExpr(*n)
	return &out
}
func CloneRefOfConvertUsingExpr(n *ConvertUsingExpr) *ConvertUsingExpr {
	if n == nil {
		return nil
	}
	out := CloneConvertUsingExpr(*n)
	return &out
}
func CloneRefOfCurTimeFuncExpr(n *CurTimeFuncExpr) *CurTimeFuncExpr {
	if n == nil {
		return nil
	}
	out := CloneCurTimeFuncExpr(*n)
	return &out
}
func CloneRefOfDefault(n *Default) *Default {
	if n == nil {
		return nil
	}
	out := CloneDefault(*n)
	return &out
}
func CloneRefOfExistsExpr(n *ExistsExpr) *ExistsExpr {
	if n == nil {
		return nil
	}
	out := CloneExistsExpr(*n)
	return &out
}
func CloneRefOfFuncExpr(n *FuncExpr) *FuncExpr {
	if n == nil {
		return nil
	}
	out := CloneFuncExpr(*n)
	return &out
}
func CloneRefOfGroupConcatExpr(n *GroupConcatExpr) *GroupConcatExpr {
	if n == nil {
		return nil
	}
	out := CloneGroupConcatExpr(*n)
	return &out
}
func CloneRefOfIntervalExpr(n *IntervalExpr) *IntervalExpr {
	if n == nil {
		return nil
	}
	out := CloneIntervalExpr(*n)
	return &out
}
func CloneRefOfIsExpr(n *IsExpr) *IsExpr {
	if n == nil {
		return nil
	}
	out := CloneIsExpr(*n)
	return &out
}
func CloneRefOfLiteral(n *Literal) *Literal {
	if n == nil {
		return nil
	}
	out := CloneLiteral(*n)
	return &out
}
func CloneRefOfMatchExpr(n *MatchExpr) *MatchExpr {
	if n == nil {
		return nil
	}
	out := CloneMatchExpr(*n)
	return &out
}
func CloneRefOfNotExpr(n *NotExpr) *NotExpr {
	if n == nil {
		return nil
	}
	out := CloneNotExpr(*n)
	return &out
}
func CloneRefOfNullVal(n *NullVal) *NullVal {
	if n == nil {
		return nil
	}
	out := CloneNullVal(*n)
	return &out
}
func CloneRefOfOrExpr(n *OrExpr) *OrExpr {
	if n == nil {
		return nil
	}
	out := CloneOrExpr(*n)
	return &out
}
func CloneRefOfRangeCond(n *RangeCond) *RangeCond {
	if n == nil {
		return nil
	}
	out := CloneRangeCond(*n)
	return &out
}
func CloneRefOfSubstrExpr(n *SubstrExpr) *SubstrExpr {
	if n == nil {
		return nil
	}
	out := CloneSubstrExpr(*n)
	return &out
}
func CloneRefOfTimestampFuncExpr(n *TimestampFuncExpr) *TimestampFuncExpr {
	if n == nil {
		return nil
	}
	out := CloneTimestampFuncExpr(*n)
	return &out
}
func CloneRefOfUnaryExpr(n *UnaryExpr) *UnaryExpr {
	if n == nil {
		return nil
	}
	out := CloneUnaryExpr(*n)
	return &out
}
func CloneRefOfValuesFuncExpr(n *ValuesFuncExpr) *ValuesFuncExpr {
	if n == nil {
		return nil
	}
	out := CloneValuesFuncExpr(*n)
	return &out
}
func CloneRefOfXorExpr(n *XorExpr) *XorExpr {
	if n == nil {
		return nil
	}
	out := CloneXorExpr(*n)
	return &out
}
func CloneRefOfParenSelect(n *ParenSelect) *ParenSelect {
	if n == nil {
		return nil
	}
	out := CloneParenSelect(*n)
	return &out
}
func CloneRefOfSelect(n *Select) *Select {
	if n == nil {
		return nil
	}
	out := CloneSelect(*n)
	return &out
}
func CloneRefOfUnion(n *Union) *Union {
	if n == nil {
		return nil
	}
	out := CloneUnion(*n)
	return &out
}
func CloneValues(n Values) Values {
	res := make(Values, len(n))
	for i, x := range n {
		res[i] = CloneValTuple(x)
	}
	return res
}
func CloneRefOfAliasedExpr(n *AliasedExpr) *AliasedExpr {
	if n == nil {
		return nil
	}
	out := CloneAliasedExpr(*n)
	return &out
}
func CloneRefOfAliasedTableExpr(n *AliasedTableExpr) *AliasedTableExpr {
	if n == nil {
		return nil
	}
	out := CloneAliasedTableExpr(*n)
	return &out
}
func CloneRefOfAlterVschema(n *AlterVschema) *AlterVschema {
	if n == nil {
		return nil
	}
	out := CloneAlterVschema(*n)
	return &out
}
func CloneRefOfAutoIncSpec(n *AutoIncSpec) *AutoIncSpec {
	if n == nil {
		return nil
	}
	out := CloneAutoIncSpec(*n)
	return &out
}
func CloneRefOfBegin(n *Begin) *Begin {
	if n == nil {
		return nil
	}
	out := CloneBegin(*n)
	return &out
}
func CloneRefOfCallProc(n *CallProc) *CallProc {
	if n == nil {
		return nil
	}
	out := CloneCallProc(*n)
	return &out
}
func CloneColIdent(n ColIdent) ColIdent {
	return ColIdent{
		at:      n.at,
		lowered: n.lowered,
		val:     n.val,
	}
}
func CloneRefOfColumnDefinition(n *ColumnDefinition) *ColumnDefinition {
	if n == nil {
		return nil
	}
	out := CloneColumnDefinition(*n)
	return &out
}
func CloneRefOfColumnType(n *ColumnType) *ColumnType {
	if n == nil {
		return nil
	}
	out := CloneColumnType(*n)
	return &out
}
func CloneColumns(n Columns) Columns {
	res := make(Columns, len(n))
	for i, x := range n {
		res[i] = CloneColIdent(x)
	}
	return res
}
func CloneComments(n Comments) Comments {
	res := make(Comments, len(n))
	for i, x := range n {
		res[i] = CloneSliceOfbyte(x)
	}
	return res
}
func CloneRefOfCommit(n *Commit) *Commit {
	if n == nil {
		return nil
	}
	out := CloneCommit(*n)
	return &out
}
func CloneRefOfConstraintDefinition(n *ConstraintDefinition) *ConstraintDefinition {
	if n == nil {
		return nil
	}
	out := CloneConstraintDefinition(*n)
	return &out
}
func CloneRefOfConvertType(n *ConvertType) *ConvertType {
	if n == nil {
		return nil
	}
	out := CloneConvertType(*n)
	return &out
}
func CloneRefOfDelete(n *Delete) *Delete {
	if n == nil {
		return nil
	}
	out := CloneDelete(*n)
	return &out
}
func CloneRefOfDerivedTable(n *DerivedTable) *DerivedTable {
	if n == nil {
		return nil
	}
	out := CloneDerivedTable(*n)
	return &out
}
func CloneExprs(n Exprs) Exprs {
	res := make(Exprs, len(n))
	for i, x := range n {
		res[i] = CloneExpr(x)
	}
	return res
}
func CloneRefOfFlush(n *Flush) *Flush {
	if n == nil {
		return nil
	}
	out := CloneFlush(*n)
	return &out
}
func CloneGroupBy(n GroupBy) GroupBy {
	res := make(GroupBy, len(n))
	for i, x := range n {
		res[i] = CloneExpr(x)
	}
	return res
}
func CloneRefOfIndexDefinition(n *IndexDefinition) *IndexDefinition {
	if n == nil {
		return nil
	}
	out := CloneIndexDefinition(*n)
	return &out
}
func CloneRefOfIndexHints(n *IndexHints) *IndexHints {
	if n == nil {
		return nil
	}
	out := CloneIndexHints(*n)
	return &out
}
func CloneRefOfIndexInfo(n *IndexInfo) *IndexInfo {
	if n == nil {
		return nil
	}
	out := CloneIndexInfo(*n)
	return &out
}
func CloneRefOfInsert(n *Insert) *Insert {
	if n == nil {
		return nil
	}
	out := CloneInsert(*n)
	return &out
}
func CloneJoinCondition(n JoinCondition) JoinCondition {
	return JoinCondition{
		On:    CloneExpr(n.On),
		Using: CloneColumns(n.Using),
	}
}
func CloneRefOfJoinTableExpr(n *JoinTableExpr) *JoinTableExpr {
	if n == nil {
		return nil
	}
	out := CloneJoinTableExpr(*n)
	return &out
}
func CloneRefOfLimit(n *Limit) *Limit {
	if n == nil {
		return nil
	}
	out := CloneLimit(*n)
	return &out
}
func CloneRefOfLoad(n *Load) *Load {
	if n == nil {
		return nil
	}
	out := CloneLoad(*n)
	return &out
}
func CloneRefOfLockTables(n *LockTables) *LockTables {
	if n == nil {
		return nil
	}
	out := CloneLockTables(*n)
	return &out
}
func CloneNextval(n Nextval) Nextval {
	return Nextval{Expr: CloneExpr(n.Expr)}
}
func CloneOnDup(n OnDup) OnDup {
	res := make(OnDup, len(n))
	for i, x := range n {
		res[i] = CloneRefOfUpdateExpr(x)
	}
	return res
}
func CloneRefOfOptLike(n *OptLike) *OptLike {
	if n == nil {
		return nil
	}
	out := CloneOptLike(*n)
	return &out
}
func CloneRefOfOrder(n *Order) *Order {
	if n == nil {
		return nil
	}
	out := CloneOrder(*n)
	return &out
}
func CloneOrderBy(n OrderBy) OrderBy {
	res := make(OrderBy, len(n))
	for i, x := range n {
		res[i] = CloneRefOfOrder(x)
	}
	return res
}
func CloneRefOfOtherAdmin(n *OtherAdmin) *OtherAdmin {
	if n == nil {
		return nil
	}
	out := CloneOtherAdmin(*n)
	return &out
}
func CloneRefOfOtherRead(n *OtherRead) *OtherRead {
	if n == nil {
		return nil
	}
	out := CloneOtherRead(*n)
	return &out
}
func CloneRefOfParenTableExpr(n *ParenTableExpr) *ParenTableExpr {
	if n == nil {
		return nil
	}
	out := CloneParenTableExpr(*n)
	return &out
}
func CloneRefOfPartitionDefinition(n *PartitionDefinition) *PartitionDefinition {
	if n == nil {
		return nil
	}
	out := ClonePartitionDefinition(*n)
	return &out
}
func CloneRefOfPartitionSpec(n *PartitionSpec) *PartitionSpec {
	if n == nil {
		return nil
	}
	out := ClonePartitionSpec(*n)
	return &out
}
func ClonePartitions(n Partitions) Partitions {
	res := make(Partitions, len(n))
	for i, x := range n {
		res[i] = CloneColIdent(x)
	}
	return res
}
func CloneRefOfRelease(n *Release) *Release {
	if n == nil {
		return nil
	}
	out := CloneRelease(*n)
	return &out
}
func CloneRefOfRollback(n *Rollback) *Rollback {
	if n == nil {
		return nil
	}
	out := CloneRollback(*n)
	return &out
}
func CloneRefOfSRollback(n *SRollback) *SRollback {
	if n == nil {
		return nil
	}
	out := CloneSRollback(*n)
	return &out
}
func CloneRefOfSavepoint(n *Savepoint) *Savepoint {
	if n == nil {
		return nil
	}
	out := CloneSavepoint(*n)
	return &out
}
func CloneSelectExprs(n SelectExprs) SelectExprs {
	res := make(SelectExprs, len(n))
	for i, x := range n {
		res[i] = CloneSelectExpr(x)
	}
	return res
}
func CloneRefOfSelectInto(n *SelectInto) *SelectInto {
	if n == nil {
		return nil
	}
	out := CloneSelectInto(*n)
	return &out
}
func CloneRefOfSet(n *Set) *Set {
	if n == nil {
		return nil
	}
	out := CloneSet(*n)
	return &out
}
func CloneRefOfSetExpr(n *SetExpr) *SetExpr {
	if n == nil {
		return nil
	}
	out := CloneSetExpr(*n)
	return &out
}
func CloneSetExprs(n SetExprs) SetExprs {
	res := make(SetExprs, len(n))
	for i, x := range n {
		res[i] = CloneRefOfSetExpr(x)
	}
	return res
}
func CloneRefOfSetTransaction(n *SetTransaction) *SetTransaction {
	if n == nil {
		return nil
	}
	out := CloneSetTransaction(*n)
	return &out
}
func CloneRefOfShow(n *Show) *Show {
	if n == nil {
		return nil
	}
	out := CloneShow(*n)
	return &out
}
func CloneRefOfShowBasic(n *ShowBasic) *ShowBasic {
	if n == nil {
		return nil
	}
	out := CloneShowBasic(*n)
	return &out
}
func CloneRefOfShowCreate(n *ShowCreate) *ShowCreate {
	if n == nil {
		return nil
	}
	out := CloneShowCreate(*n)
	return &out
}
func CloneRefOfShowFilter(n *ShowFilter) *ShowFilter {
	if n == nil {
		return nil
	}
	out := CloneShowFilter(*n)
	return &out
}
func CloneRefOfShowLegacy(n *ShowLegacy) *ShowLegacy {
	if n == nil {
		return nil
	}
	out := CloneShowLegacy(*n)
	return &out
}
func CloneRefOfStarExpr(n *StarExpr) *StarExpr {
	if n == nil {
		return nil
	}
	out := CloneStarExpr(*n)
	return &out
}
func CloneRefOfStream(n *Stream) *Stream {
	if n == nil {
		return nil
	}
	out := CloneStream(*n)
	return &out
}
func CloneTableExprs(n TableExprs) TableExprs {
	res := make(TableExprs, len(n))
	for i, x := range n {
		res[i] = CloneTableExpr(x)
	}
	return res
}
func CloneTableIdent(n TableIdent) TableIdent {
	return TableIdent{v: n.v}
}
func CloneTableName(n TableName) TableName {
	return TableName{
		Name:      CloneTableIdent(n.Name),
		Qualifier: CloneTableIdent(n.Qualifier),
	}
}
func CloneTableNames(n TableNames) TableNames {
	res := make(TableNames, len(n))
	for i, x := range n {
		res[i] = CloneTableName(x)
	}
	return res
}
func CloneRefOfTableSpec(n *TableSpec) *TableSpec {
	if n == nil {
		return nil
	}
	out := CloneTableSpec(*n)
	return &out
}
func CloneRefOfUnionSelect(n *UnionSelect) *UnionSelect {
	if n == nil {
		return nil
	}
	out := CloneUnionSelect(*n)
	return &out
}
func CloneRefOfUnlockTables(n *UnlockTables) *UnlockTables {
	if n == nil {
		return nil
	}
	out := CloneUnlockTables(*n)
	return &out
}
func CloneRefOfUpdate(n *Update) *Update {
	if n == nil {
		return nil
	}
	out := CloneUpdate(*n)
	return &out
}
func CloneRefOfUpdateExpr(n *UpdateExpr) *UpdateExpr {
	if n == nil {
		return nil
	}
	out := CloneUpdateExpr(*n)
	return &out
}
func CloneUpdateExprs(n UpdateExprs) UpdateExprs {
	res := make(UpdateExprs, len(n))
	for i, x := range n {
		res[i] = CloneRefOfUpdateExpr(x)
	}
	return res
}
func CloneRefOfUse(n *Use) *Use {
	if n == nil {
		return nil
	}
	out := CloneUse(*n)
	return &out
}
func CloneRefOfVStream(n *VStream) *VStream {
	if n == nil {
		return nil
	}
	out := CloneVStream(*n)
	return &out
}
func CloneVindexParam(n VindexParam) VindexParam {
	return VindexParam{
		Key: CloneColIdent(n.Key),
		Val: n.Val,
	}
}
func CloneRefOfVindexSpec(n *VindexSpec) *VindexSpec {
	if n == nil {
		return nil
	}
	out := CloneVindexSpec(*n)
	return &out
}
func CloneRefOfWhen(n *When) *When {
	if n == nil {
		return nil
	}
	out := CloneWhen(*n)
	return &out
}
func CloneRefOfWhere(n *Where) *Where {
	if n == nil {
		return nil
	}
	out := CloneWhere(*n)
	return &out
}
func CloneAddColumns(n AddColumns) AddColumns {
	return AddColumns{
		After:   CloneRefOfColName(n.After),
		Columns: CloneSliceOfRefOfColumnDefinition(n.Columns),
		First:   CloneRefOfColName(n.First),
	}
}
func CloneAddConstraintDefinition(n AddConstraintDefinition) AddConstraintDefinition {
	return AddConstraintDefinition{ConstraintDefinition: CloneRefOfConstraintDefinition(n.ConstraintDefinition)}
}
func CloneAddIndexDefinition(n AddIndexDefinition) AddIndexDefinition {
	return AddIndexDefinition{IndexDefinition: CloneRefOfIndexDefinition(n.IndexDefinition)}
}
func CloneAlterCharset(n AlterCharset) AlterCharset {
	return AlterCharset{
		CharacterSet: n.CharacterSet,
		Collate:      n.Collate,
	}
}
func CloneAlterColumn(n AlterColumn) AlterColumn {
	return AlterColumn{
		Column:      CloneRefOfColName(n.Column),
		DefaultVal:  CloneExpr(n.DefaultVal),
		DropDefault: n.DropDefault,
	}
}
func CloneChangeColumn(n ChangeColumn) ChangeColumn {
	return ChangeColumn{
		After:            CloneRefOfColName(n.After),
		First:            CloneRefOfColName(n.First),
		NewColDefinition: CloneRefOfColumnDefinition(n.NewColDefinition),
		OldColumn:        CloneRefOfColName(n.OldColumn),
	}
}
func CloneDropColumn(n DropColumn) DropColumn {
	return DropColumn{Name: CloneRefOfColName(n.Name)}
}
func CloneDropKey(n DropKey) DropKey {
	return DropKey{
		Name: n.Name,
		Type: n.Type,
	}
}
func CloneForce(n Force) Force {
	return Force{}
}
func CloneKeyState(n KeyState) KeyState {
	return KeyState{Enable: n.Enable}
}
func CloneLockOption(n LockOption) LockOption {
	return LockOption{Type: n.Type}
}
func CloneModifyColumn(n ModifyColumn) ModifyColumn {
	return ModifyColumn{
		After:            CloneRefOfColName(n.After),
		First:            CloneRefOfColName(n.First),
		NewColDefinition: CloneRefOfColumnDefinition(n.NewColDefinition),
	}
}
func CloneOrderByOption(n OrderByOption) OrderByOption {
	return OrderByOption{Cols: CloneColumns(n.Cols)}
}
func CloneRenameIndex(n RenameIndex) RenameIndex {
	return RenameIndex{
		NewName: n.NewName,
		OldName: n.OldName,
	}
}
func CloneRenameTableName(n RenameTableName) RenameTableName {
	return RenameTableName{Table: CloneTableName(n.Table)}
}
func CloneRefOfTableOption(n *TableOption) *TableOption {
	if n == nil {
		return nil
	}
	out := CloneTableOption(*n)
	return &out
}
func CloneTablespaceOperation(n TablespaceOperation) TablespaceOperation {
	return TablespaceOperation{Import: n.Import}
}
func CloneValidation(n Validation) Validation {
	return Validation{With: n.With}
}
func CloneSubquery(n Subquery) Subquery {
	return Subquery{Select: CloneSelectStatement(n.Select)}
}
func CloneCheckConstraintDefinition(n CheckConstraintDefinition) CheckConstraintDefinition {
	return CheckConstraintDefinition{
		Enforced: n.Enforced,
		Expr:     CloneExpr(n.Expr),
	}
}
func CloneForeignKeyDefinition(n ForeignKeyDefinition) ForeignKeyDefinition {
	return ForeignKeyDefinition{
		OnDelete:          n.OnDelete,
		OnUpdate:          n.OnUpdate,
		ReferencedColumns: CloneColumns(n.ReferencedColumns),
		ReferencedTable:   CloneTableName(n.ReferencedTable),
		Source:            CloneColumns(n.Source),
	}
}
func CloneAlterDatabase(n AlterDatabase) AlterDatabase {
	return AlterDatabase{
		AlterOptions:        CloneSliceOfCollateAndCharset(n.AlterOptions),
		DBName:              n.DBName,
		FullyParsed:         n.FullyParsed,
		UpdateDataDirectory: n.UpdateDataDirectory,
	}
}
func CloneCreateDatabase(n CreateDatabase) CreateDatabase {
	return CreateDatabase{
		CreateOptions: CloneSliceOfCollateAndCharset(n.CreateOptions),
		DBName:        n.DBName,
		FullyParsed:   n.FullyParsed,
		IfNotExists:   n.IfNotExists,
	}
}
func CloneDropDatabase(n DropDatabase) DropDatabase {
	return DropDatabase{
		DBName:   n.DBName,
		IfExists: n.IfExists,
	}
}
func CloneAlterTable(n AlterTable) AlterTable {
	return AlterTable{
		AlterOptions:  CloneSliceOfAlterOption(n.AlterOptions),
		FullyParsed:   n.FullyParsed,
		PartitionSpec: CloneRefOfPartitionSpec(n.PartitionSpec),
		Table:         CloneTableName(n.Table),
	}
}
func CloneAlterView(n AlterView) AlterView {
	return AlterView{
		Algorithm:   n.Algorithm,
		CheckOption: n.CheckOption,
		Columns:     CloneColumns(n.Columns),
		Definer:     n.Definer,
		Security:    n.Security,
		Select:      CloneSelectStatement(n.Select),
		ViewName:    CloneTableName(n.ViewName),
	}
}
func CloneCreateTable(n CreateTable) CreateTable {
	return CreateTable{
		FullyParsed: n.FullyParsed,
		IfNotExists: n.IfNotExists,
		OptLike:     CloneRefOfOptLike(n.OptLike),
		Table:       CloneTableName(n.Table),
		TableSpec:   CloneRefOfTableSpec(n.TableSpec),
		Temp:        n.Temp,
	}
}
func CloneCreateView(n CreateView) CreateView {
	return CreateView{
		Algorithm:   n.Algorithm,
		CheckOption: n.CheckOption,
		Columns:     CloneColumns(n.Columns),
		Definer:     n.Definer,
		IsReplace:   n.IsReplace,
		Security:    n.Security,
		Select:      CloneSelectStatement(n.Select),
		ViewName:    CloneTableName(n.ViewName),
	}
}
func CloneDropTable(n DropTable) DropTable {
	return DropTable{
		FromTables: CloneTableNames(n.FromTables),
		IfExists:   n.IfExists,
		Temp:       n.Temp,
	}
}
func CloneDropView(n DropView) DropView {
	return DropView{
		FromTables: CloneTableNames(n.FromTables),
		IfExists:   n.IfExists,
	}
}
func CloneRenameTable(n RenameTable) RenameTable {
	return RenameTable{TablePairs: CloneSliceOfRefOfRenameTablePair(n.TablePairs)}
}
func CloneTruncateTable(n TruncateTable) TruncateTable {
	return TruncateTable{Table: CloneTableName(n.Table)}
}
func CloneExplainStmt(n ExplainStmt) ExplainStmt {
	return ExplainStmt{
		Statement: CloneStatement(n.Statement),
		Type:      n.Type,
	}
}
func CloneExplainTab(n ExplainTab) ExplainTab {
	return ExplainTab{
		Table: CloneTableName(n.Table),
		Wild:  n.Wild,
	}
}
func CloneAndExpr(n AndExpr) AndExpr {
	return AndExpr{
		Left:  CloneExpr(n.Left),
		Right: CloneExpr(n.Right),
	}
}
func CloneBinaryExpr(n BinaryExpr) BinaryExpr {
	return BinaryExpr{
		Left:     CloneExpr(n.Left),
		Operator: n.Operator,
		Right:    CloneExpr(n.Right),
	}
}
func CloneCaseExpr(n CaseExpr) CaseExpr {
	return CaseExpr{
		Else:  CloneExpr(n.Else),
		Expr:  CloneExpr(n.Expr),
		Whens: CloneSliceOfRefOfWhen(n.Whens),
	}
}
func CloneColName(n ColName) ColName {
	return ColName{
		Metadata:  n.Metadata,
		Name:      CloneColIdent(n.Name),
		Qualifier: CloneTableName(n.Qualifier),
	}
}
func CloneCollateExpr(n CollateExpr) CollateExpr {
	return CollateExpr{
		Charset: n.Charset,
		Expr:    CloneExpr(n.Expr),
	}
}
func CloneComparisonExpr(n ComparisonExpr) ComparisonExpr {
	return ComparisonExpr{
		Escape:   CloneExpr(n.Escape),
		Left:     CloneExpr(n.Left),
		Operator: n.Operator,
		Right:    CloneExpr(n.Right),
	}
}
func CloneConvertExpr(n ConvertExpr) ConvertExpr {
	return ConvertExpr{
		Expr: CloneExpr(n.Expr),
		Type: CloneRefOfConvertType(n.Type),
	}
}
func CloneConvertUsingExpr(n ConvertUsingExpr) ConvertUsingExpr {
	return ConvertUsingExpr{
		Expr: CloneExpr(n.Expr),
		Type: n.Type,
	}
}
func CloneCurTimeFuncExpr(n CurTimeFuncExpr) CurTimeFuncExpr {
	return CurTimeFuncExpr{
		Fsp:  CloneExpr(n.Fsp),
		Name: CloneColIdent(n.Name),
	}
}
func CloneDefault(n Default) Default {
	return Default{ColName: n.ColName}
}
func CloneExistsExpr(n ExistsExpr) ExistsExpr {
	return ExistsExpr{Subquery: CloneRefOfSubquery(n.Subquery)}
}
func CloneFuncExpr(n FuncExpr) FuncExpr {
	return FuncExpr{
		Distinct:  n.Distinct,
		Exprs:     CloneSelectExprs(n.Exprs),
		Name:      CloneColIdent(n.Name),
		Qualifier: CloneTableIdent(n.Qualifier),
	}
}
func CloneGroupConcatExpr(n GroupConcatExpr) GroupConcatExpr {
	return GroupConcatExpr{
		Distinct:  n.Distinct,
		Exprs:     CloneSelectExprs(n.Exprs),
		Limit:     CloneRefOfLimit(n.Limit),
		OrderBy:   CloneOrderBy(n.OrderBy),
		Separator: n.Separator,
	}
}
func CloneIntervalExpr(n IntervalExpr) IntervalExpr {
	return IntervalExpr{
		Expr: CloneExpr(n.Expr),
		Unit: n.Unit,
	}
}
func CloneIsExpr(n IsExpr) IsExpr {
	return IsExpr{
		Expr:     CloneExpr(n.Expr),
		Operator: n.Operator,
	}
}
func CloneLiteral(n Literal) Literal {
	return Literal{
		Type: n.Type,
		Val:  CloneSliceOfbyte(n.Val),
	}
}
func CloneMatchExpr(n MatchExpr) MatchExpr {
	return MatchExpr{
		Columns: CloneSelectExprs(n.Columns),
		Expr:    CloneExpr(n.Expr),
		Option:  n.Option,
	}
}
func CloneNotExpr(n NotExpr) NotExpr {
	return NotExpr{Expr: CloneExpr(n.Expr)}
}
func CloneNullVal(n NullVal) NullVal {
	return NullVal{}
}
func CloneOrExpr(n OrExpr) OrExpr {
	return OrExpr{
		Left:  CloneExpr(n.Left),
		Right: CloneExpr(n.Right),
	}
}
func CloneRangeCond(n RangeCond) RangeCond {
	return RangeCond{
		From:     CloneExpr(n.From),
		Left:     CloneExpr(n.Left),
		Operator: n.Operator,
		To:       CloneExpr(n.To),
	}
}
func CloneSubstrExpr(n SubstrExpr) SubstrExpr {
	return SubstrExpr{
		From:   CloneExpr(n.From),
		Name:   CloneRefOfColName(n.Name),
		StrVal: CloneRefOfLiteral(n.StrVal),
		To:     CloneExpr(n.To),
	}
}
func CloneTimestampFuncExpr(n TimestampFuncExpr) TimestampFuncExpr {
	return TimestampFuncExpr{
		Expr1: CloneExpr(n.Expr1),
		Expr2: CloneExpr(n.Expr2),
		Name:  n.Name,
		Unit:  n.Unit,
	}
}
func CloneUnaryExpr(n UnaryExpr) UnaryExpr {
	return UnaryExpr{
		Expr:     CloneExpr(n.Expr),
		Operator: n.Operator,
	}
}
func CloneValuesFuncExpr(n ValuesFuncExpr) ValuesFuncExpr {
	return ValuesFuncExpr{Name: CloneRefOfColName(n.Name)}
}
func CloneXorExpr(n XorExpr) XorExpr {
	return XorExpr{
		Left:  CloneExpr(n.Left),
		Right: CloneExpr(n.Right),
	}
}
func CloneParenSelect(n ParenSelect) ParenSelect {
	return ParenSelect{Select: CloneSelectStatement(n.Select)}
}
func CloneSelect(n Select) Select {
	return Select{
		Cache:            n.Cache,
		Comments:         CloneComments(n.Comments),
		Distinct:         n.Distinct,
		From:             CloneTableExprs(n.From),
		GroupBy:          CloneGroupBy(n.GroupBy),
		Having:           CloneRefOfWhere(n.Having),
		Into:             CloneRefOfSelectInto(n.Into),
		Limit:            CloneRefOfLimit(n.Limit),
		Lock:             n.Lock,
		OrderBy:          CloneOrderBy(n.OrderBy),
		SQLCalcFoundRows: n.SQLCalcFoundRows,
		SelectExprs:      CloneSelectExprs(n.SelectExprs),
		StraightJoinHint: n.StraightJoinHint,
		Where:            CloneRefOfWhere(n.Where),
	}
}
func CloneUnion(n Union) Union {
	return Union{
		FirstStatement: CloneSelectStatement(n.FirstStatement),
		Limit:          CloneRefOfLimit(n.Limit),
		Lock:           n.Lock,
		OrderBy:        CloneOrderBy(n.OrderBy),
		UnionSelects:   CloneSliceOfRefOfUnionSelect(n.UnionSelects),
	}
}
func CloneAliasedExpr(n AliasedExpr) AliasedExpr {
	return AliasedExpr{
		As:   CloneColIdent(n.As),
		Expr: CloneExpr(n.Expr),
	}
}
func CloneAliasedTableExpr(n AliasedTableExpr) AliasedTableExpr {
	return AliasedTableExpr{
		As:         CloneTableIdent(n.As),
		Expr:       CloneSimpleTableExpr(n.Expr),
		Hints:      CloneRefOfIndexHints(n.Hints),
		Partitions: ClonePartitions(n.Partitions),
	}
}
func CloneAlterVschema(n AlterVschema) AlterVschema {
	return AlterVschema{
		Action:      n.Action,
		AutoIncSpec: CloneRefOfAutoIncSpec(n.AutoIncSpec),
		Table:       CloneTableName(n.Table),
		VindexCols:  CloneSliceOfColIdent(n.VindexCols),
		VindexSpec:  CloneRefOfVindexSpec(n.VindexSpec),
	}
}
func CloneAutoIncSpec(n AutoIncSpec) AutoIncSpec {
	return AutoIncSpec{
		Column:   CloneColIdent(n.Column),
		Sequence: CloneTableName(n.Sequence),
	}
}
func CloneBegin(n Begin) Begin {
	return Begin{}
}
func CloneCallProc(n CallProc) CallProc {
	return CallProc{
		Name:   CloneTableName(n.Name),
		Params: CloneExprs(n.Params),
	}
}
func CloneColumnDefinition(n ColumnDefinition) ColumnDefinition {
	return ColumnDefinition{
		Name: CloneColIdent(n.Name),
		Type: n.Type,
	}
}
func CloneColumnType(n ColumnType) ColumnType {
	return ColumnType{
		Charset:    n.Charset,
		Collate:    n.Collate,
		EnumValues: CloneSliceOfstring(n.EnumValues),
		Length:     CloneRefOfLiteral(n.Length),
		Options:    n.Options,
		Scale:      CloneRefOfLiteral(n.Scale),
		Type:       n.Type,
		Unsigned:   n.Unsigned,
		Zerofill:   n.Zerofill,
	}
}
func CloneSliceOfbyte(n []byte) []byte {
	res := make([]byte, len(n))
	copy(res, n)
	return res
}
func CloneCommit(n Commit) Commit {
	return Commit{}
}
func CloneConstraintDefinition(n ConstraintDefinition) ConstraintDefinition {
	return ConstraintDefinition{
		Details: CloneConstraintInfo(n.Details),
		Name:    n.Name,
	}
}
func CloneConvertType(n ConvertType) ConvertType {
	return ConvertType{
		Charset:  n.Charset,
		Length:   CloneRefOfLiteral(n.Length),
		Operator: n.Operator,
		Scale:    CloneRefOfLiteral(n.Scale),
		Type:     n.Type,
	}
}
func CloneDelete(n Delete) Delete {
	return Delete{
		Comments:   CloneComments(n.Comments),
		Ignore:     n.Ignore,
		Limit:      CloneRefOfLimit(n.Limit),
		OrderBy:    CloneOrderBy(n.OrderBy),
		Partitions: ClonePartitions(n.Partitions),
		TableExprs: CloneTableExprs(n.TableExprs),
		Targets:    CloneTableNames(n.Targets),
		Where:      CloneRefOfWhere(n.Where),
	}
}
func CloneDerivedTable(n DerivedTable) DerivedTable {
	return DerivedTable{Select: CloneSelectStatement(n.Select)}
}
func CloneFlush(n Flush) Flush {
	return Flush{
		FlushOptions: CloneSliceOfstring(n.FlushOptions),
		ForExport:    n.ForExport,
		IsLocal:      n.IsLocal,
		TableNames:   CloneTableNames(n.TableNames),
		WithLock:     n.WithLock,
	}
}
func CloneIndexDefinition(n IndexDefinition) IndexDefinition {
	return IndexDefinition{
		Columns: CloneSliceOfRefOfIndexColumn(n.Columns),
		Info:    CloneRefOfIndexInfo(n.Info),
		Options: CloneSliceOfRefOfIndexOption(n.Options),
	}
}
func CloneIndexHints(n IndexHints) IndexHints {
	return IndexHints{
		Indexes: CloneSliceOfColIdent(n.Indexes),
		Type:    n.Type,
	}
}
func CloneIndexInfo(n IndexInfo) IndexInfo {
	return IndexInfo{
		ConstraintName: CloneColIdent(n.ConstraintName),
		Fulltext:       n.Fulltext,
		Name:           CloneColIdent(n.Name),
		Primary:        n.Primary,
		Spatial:        n.Spatial,
		Type:           n.Type,
		Unique:         n.Unique,
	}
}
func CloneInsert(n Insert) Insert {
	return Insert{
		Action:     n.Action,
		Columns:    CloneColumns(n.Columns),
		Comments:   CloneComments(n.Comments),
		Ignore:     n.Ignore,
		OnDup:      CloneOnDup(n.OnDup),
		Partitions: ClonePartitions(n.Partitions),
		Rows:       CloneInsertRows(n.Rows),
		Table:      CloneTableName(n.Table),
	}
}
func CloneJoinTableExpr(n JoinTableExpr) JoinTableExpr {
	return JoinTableExpr{
		Condition: CloneJoinCondition(n.Condition),
		Join:      n.Join,
		LeftExpr:  CloneTableExpr(n.LeftExpr),
		RightExpr: CloneTableExpr(n.RightExpr),
	}
}
func CloneLimit(n Limit) Limit {
	return Limit{
		Offset:   CloneExpr(n.Offset),
		Rowcount: CloneExpr(n.Rowcount),
	}
}
func CloneLoad(n Load) Load {
	return Load{}
}
func CloneLockTables(n LockTables) LockTables {
	return LockTables{Tables: CloneTableAndLockTypes(n.Tables)}
}
func CloneOptLike(n OptLike) OptLike {
	return OptLike{LikeTable: CloneTableName(n.LikeTable)}
}
func CloneOrder(n Order) Order {
	return Order{
		Direction: n.Direction,
		Expr:      CloneExpr(n.Expr),
	}
}
func CloneOtherAdmin(n OtherAdmin) OtherAdmin {
	return OtherAdmin{}
}
func CloneOtherRead(n OtherRead) OtherRead {
	return OtherRead{}
}
func CloneParenTableExpr(n ParenTableExpr) ParenTableExpr {
	return ParenTableExpr{Exprs: CloneTableExprs(n.Exprs)}
}
func ClonePartitionDefinition(n PartitionDefinition) PartitionDefinition {
	return PartitionDefinition{
		Limit:    CloneExpr(n.Limit),
		Maxvalue: n.Maxvalue,
		Name:     CloneColIdent(n.Name),
	}
}
func ClonePartitionSpec(n PartitionSpec) PartitionSpec {
	return PartitionSpec{
		Action:            n.Action,
		Definitions:       CloneSliceOfRefOfPartitionDefinition(n.Definitions),
		IsAll:             n.IsAll,
		Names:             ClonePartitions(n.Names),
		Number:            CloneRefOfLiteral(n.Number),
		TableName:         CloneTableName(n.TableName),
		WithoutValidation: n.WithoutValidation,
	}
}
func CloneRelease(n Release) Release {
	return Release{Name: CloneColIdent(n.Name)}
}
func CloneRollback(n Rollback) Rollback {
	return Rollback{}
}
func CloneSRollback(n SRollback) SRollback {
	return SRollback{Name: CloneColIdent(n.Name)}
}
func CloneSavepoint(n Savepoint) Savepoint {
	return Savepoint{Name: CloneColIdent(n.Name)}
}
func CloneSelectInto(n SelectInto) SelectInto {
	return SelectInto{
		Charset:      n.Charset,
		ExportOption: n.ExportOption,
		FileName:     n.FileName,
		FormatOption: n.FormatOption,
		Manifest:     n.Manifest,
		Overwrite:    n.Overwrite,
		Type:         n.Type,
	}
}
func CloneSet(n Set) Set {
	return Set{
		Comments: CloneComments(n.Comments),
		Exprs:    CloneSetExprs(n.Exprs),
	}
}
func CloneSetExpr(n SetExpr) SetExpr {
	return SetExpr{
		Expr:  CloneExpr(n.Expr),
		Name:  CloneColIdent(n.Name),
		Scope: n.Scope,
	}
}
func CloneSetTransaction(n SetTransaction) SetTransaction {
	return SetTransaction{
		Characteristics: CloneSliceOfCharacteristic(n.Characteristics),
		Comments:        CloneComments(n.Comments),
		SQLNode:         CloneSQLNode(n.SQLNode),
		Scope:           n.Scope,
	}
}
func CloneShow(n Show) Show {
	return Show{Internal: CloneShowInternal(n.Internal)}
}
func CloneShowBasic(n ShowBasic) ShowBasic {
	return ShowBasic{
		Command: n.Command,
		DbName:  n.DbName,
		Filter:  CloneRefOfShowFilter(n.Filter),
		Full:    n.Full,
		Tbl:     CloneTableName(n.Tbl),
	}
}
func CloneShowCreate(n ShowCreate) ShowCreate {
	return ShowCreate{
		Command: n.Command,
		Op:      CloneTableName(n.Op),
	}
}
func CloneShowFilter(n ShowFilter) ShowFilter {
	return ShowFilter{
		Filter: CloneExpr(n.Filter),
		Like:   n.Like,
	}
}
func CloneShowLegacy(n ShowLegacy) ShowLegacy {
	return ShowLegacy{
		Extended:               n.Extended,
		OnTable:                CloneTableName(n.OnTable),
		Scope:                  n.Scope,
		ShowCollationFilterOpt: CloneExpr(n.ShowCollationFilterOpt),
		ShowTablesOpt:          n.ShowTablesOpt,
		Table:                  CloneTableName(n.Table),
		Type:                   n.Type,
	}
}
func CloneStarExpr(n StarExpr) StarExpr {
	return StarExpr{TableName: CloneTableName(n.TableName)}
}
func CloneStream(n Stream) Stream {
	return Stream{
		Comments:   CloneComments(n.Comments),
		SelectExpr: CloneSelectExpr(n.SelectExpr),
		Table:      CloneTableName(n.Table),
	}
}
func CloneTableSpec(n TableSpec) TableSpec {
	return TableSpec{
		Columns:     CloneSliceOfRefOfColumnDefinition(n.Columns),
		Constraints: CloneSliceOfRefOfConstraintDefinition(n.Constraints),
		Indexes:     CloneSliceOfRefOfIndexDefinition(n.Indexes),
		Options:     CloneTableOptions(n.Options),
	}
}
func CloneUnionSelect(n UnionSelect) UnionSelect {
	return UnionSelect{
		Distinct:  n.Distinct,
		Statement: CloneSelectStatement(n.Statement),
	}
}
func CloneUnlockTables(n UnlockTables) UnlockTables {
	return UnlockTables{}
}
func CloneUpdate(n Update) Update {
	return Update{
		Comments:   CloneComments(n.Comments),
		Exprs:      CloneUpdateExprs(n.Exprs),
		Ignore:     n.Ignore,
		Limit:      CloneRefOfLimit(n.Limit),
		OrderBy:    CloneOrderBy(n.OrderBy),
		TableExprs: CloneTableExprs(n.TableExprs),
		Where:      CloneRefOfWhere(n.Where),
	}
}
func CloneUpdateExpr(n UpdateExpr) UpdateExpr {
	return UpdateExpr{
		Expr: CloneExpr(n.Expr),
		Name: CloneRefOfColName(n.Name),
	}
}
func CloneUse(n Use) Use {
	return Use{DBName: CloneTableIdent(n.DBName)}
}
func CloneVStream(n VStream) VStream {
	return VStream{
		Comments:   CloneComments(n.Comments),
		Limit:      CloneRefOfLimit(n.Limit),
		SelectExpr: CloneSelectExpr(n.SelectExpr),
		Table:      CloneTableName(n.Table),
		Where:      CloneRefOfWhere(n.Where),
	}
}
func CloneVindexSpec(n VindexSpec) VindexSpec {
	return VindexSpec{
		Name:   CloneColIdent(n.Name),
		Params: CloneSliceOfVindexParam(n.Params),
		Type:   CloneColIdent(n.Type),
	}
}
func CloneWhen(n When) When {
	return When{
		Cond: CloneExpr(n.Cond),
		Val:  CloneExpr(n.Val),
	}
}
func CloneWhere(n Where) Where {
	return Where{
		Expr: CloneExpr(n.Expr),
		Type: n.Type,
	}
}
func CloneSliceOfRefOfColumnDefinition(n []*ColumnDefinition) []*ColumnDefinition {
	res := make([]*ColumnDefinition, len(n))
	for i, x := range n {
		res[i] = CloneRefOfColumnDefinition(x)
	}
	return res
}
func CloneTableOption(n TableOption) TableOption {
	return TableOption{
		Name:   n.Name,
		String: n.String,
		Tables: CloneTableNames(n.Tables),
		Value:  CloneRefOfLiteral(n.Value),
	}
}
func CloneSliceOfCollateAndCharset(n []CollateAndCharset) []CollateAndCharset {
	res := make([]CollateAndCharset, len(n))
	for i, x := range n {
		res[i] = CloneCollateAndCharset(x)
	}
	return res
}
func CloneSliceOfAlterOption(n []AlterOption) []AlterOption {
	res := make([]AlterOption, len(n))
	for i, x := range n {
		res[i] = CloneAlterOption(x)
	}
	return res
}
func CloneSliceOfRefOfRenameTablePair(n []*RenameTablePair) []*RenameTablePair {
	res := make([]*RenameTablePair, len(n))
	for i, x := range n {
		res[i] = CloneRefOfRenameTablePair(x)
	}
	return res
}
func CloneSliceOfRefOfWhen(n []*When) []*When {
	res := make([]*When, len(n))
	for i, x := range n {
		res[i] = CloneRefOfWhen(x)
	}
	return res
}
func CloneSliceOfRefOfUnionSelect(n []*UnionSelect) []*UnionSelect {
	res := make([]*UnionSelect, len(n))
	for i, x := range n {
		res[i] = CloneRefOfUnionSelect(x)
	}
	return res
}
func CloneSliceOfColIdent(n []ColIdent) []ColIdent {
	res := make([]ColIdent, len(n))
	for i, x := range n {
		res[i] = CloneColIdent(x)
	}
	return res
}
func CloneSliceOfstring(n []string) []string {
	res := make([]string, len(n))
	copy(res, n)
	return res
}
func CloneSliceOfRefOfIndexColumn(n []*IndexColumn) []*IndexColumn {
	res := make([]*IndexColumn, len(n))
	for i, x := range n {
		res[i] = CloneRefOfIndexColumn(x)
	}
	return res
}
func CloneSliceOfRefOfIndexOption(n []*IndexOption) []*IndexOption {
	res := make([]*IndexOption, len(n))
	for i, x := range n {
		res[i] = CloneRefOfIndexOption(x)
	}
	return res
}
func CloneTableAndLockTypes(n TableAndLockTypes) TableAndLockTypes {
	res := make(TableAndLockTypes, len(n))
	for i, x := range n {
		res[i] = CloneRefOfTableAndLockType(x)
	}
	return res
}
func CloneSliceOfRefOfPartitionDefinition(n []*PartitionDefinition) []*PartitionDefinition {
	res := make([]*PartitionDefinition, len(n))
	for i, x := range n {
		res[i] = CloneRefOfPartitionDefinition(x)
	}
	return res
}
func CloneSliceOfCharacteristic(n []Characteristic) []Characteristic {
	res := make([]Characteristic, len(n))
	for i, x := range n {
		res[i] = CloneCharacteristic(x)
	}
	return res
}
func CloneSliceOfRefOfIndexDefinition(n []*IndexDefinition) []*IndexDefinition {
	res := make([]*IndexDefinition, len(n))
	for i, x := range n {
		res[i] = CloneRefOfIndexDefinition(x)
	}
	return res
}
func CloneSliceOfRefOfConstraintDefinition(n []*ConstraintDefinition) []*ConstraintDefinition {
	res := make([]*ConstraintDefinition, len(n))
	for i, x := range n {
		res[i] = CloneRefOfConstraintDefinition(x)
	}
	return res
}
func CloneSliceOfVindexParam(n []VindexParam) []VindexParam {
	res := make([]VindexParam, len(n))
	for i, x := range n {
		res[i] = CloneVindexParam(x)
	}
	return res
}
func CloneCollateAndCharset(n CollateAndCharset) CollateAndCharset {
	return CollateAndCharset{
		IsDefault: n.IsDefault,
		Type:      n.Type,
		Value:     n.Value,
	}
}
func CloneRefOfRenameTablePair(n *RenameTablePair) *RenameTablePair {
	if n == nil {
		return nil
	}
	out := CloneRenameTablePair(*n)
	return &out
}
func CloneRefOfIndexColumn(n *IndexColumn) *IndexColumn {
	if n == nil {
		return nil
	}
	out := CloneIndexColumn(*n)
	return &out
}
func CloneRefOfIndexOption(n *IndexOption) *IndexOption {
	if n == nil {
		return nil
	}
	out := CloneIndexOption(*n)
	return &out
}
func CloneRefOfTableAndLockType(n *TableAndLockType) *TableAndLockType {
	if n == nil {
		return nil
	}
	out := CloneTableAndLockType(*n)
	return &out
}
func CloneRenameTablePair(n RenameTablePair) RenameTablePair {
	return RenameTablePair{
		FromTable: CloneTableName(n.FromTable),
		ToTable:   CloneTableName(n.ToTable),
	}
}
func CloneIndexColumn(n IndexColumn) IndexColumn {
	return IndexColumn{
		Column:    CloneColIdent(n.Column),
		Direction: n.Direction,
		Length:    CloneRefOfLiteral(n.Length),
	}
}
func CloneIndexOption(n IndexOption) IndexOption {
	return IndexOption{
		Name:   n.Name,
		String: n.String,
		Value:  CloneRefOfLiteral(n.Value),
	}
}
func CloneTableAndLockType(n TableAndLockType) TableAndLockType {
	return TableAndLockType{
		Lock:  n.Lock,
		Table: CloneTableExpr(n.Table),
	}
}

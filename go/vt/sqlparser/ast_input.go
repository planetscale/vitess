/*
Copyright 2023 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package sqlparser

func InputSQLNode(in SQLNode) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AddColumns:
		return InputRefOfAddColumns(in)
	case *AddConstraintDefinition:
		return InputRefOfAddConstraintDefinition(in)
	case *AddIndexDefinition:
		return InputRefOfAddIndexDefinition(in)
	case AlgorithmValue:
		return InputAlgorithmValue(in)
	case *AliasedExpr:
		return InputRefOfAliasedExpr(in)
	case *AliasedTableExpr:
		return InputRefOfAliasedTableExpr(in)
	case *AlterCharset:
		return InputRefOfAlterCharset(in)
	case *AlterCheck:
		return InputRefOfAlterCheck(in)
	case *AlterColumn:
		return InputRefOfAlterColumn(in)
	case *AlterDatabase:
		return InputRefOfAlterDatabase(in)
	case *AlterIndex:
		return InputRefOfAlterIndex(in)
	case *AlterMigration:
		return InputRefOfAlterMigration(in)
	case *AlterTable:
		return InputRefOfAlterTable(in)
	case *AlterView:
		return InputRefOfAlterView(in)
	case *AlterVschema:
		return InputRefOfAlterVschema(in)
	case *Analyze:
		return InputRefOfAnalyze(in)
	case *AndExpr:
		return InputRefOfAndExpr(in)
	case *AnyValue:
		return InputRefOfAnyValue(in)
	case *Argument:
		return InputRefOfArgument(in)
	case *ArgumentLessWindowExpr:
		return InputRefOfArgumentLessWindowExpr(in)
	case *AssignmentExpr:
		return InputRefOfAssignmentExpr(in)
	case *AutoIncSpec:
		return InputRefOfAutoIncSpec(in)
	case *Avg:
		return InputRefOfAvg(in)
	case *Begin:
		return InputRefOfBegin(in)
	case *BetweenExpr:
		return InputRefOfBetweenExpr(in)
	case *BinaryExpr:
		return InputRefOfBinaryExpr(in)
	case *BitAnd:
		return InputRefOfBitAnd(in)
	case *BitOr:
		return InputRefOfBitOr(in)
	case *BitXor:
		return InputRefOfBitXor(in)
	case BoolVal:
		return InputBoolVal(in)
	case *CallProc:
		return InputRefOfCallProc(in)
	case *CaseExpr:
		return InputRefOfCaseExpr(in)
	case *CastExpr:
		return InputRefOfCastExpr(in)
	case *ChangeColumn:
		return InputRefOfChangeColumn(in)
	case *CharExpr:
		return InputRefOfCharExpr(in)
	case *CheckConstraintDefinition:
		return InputRefOfCheckConstraintDefinition(in)
	case *ColName:
		return InputRefOfColName(in)
	case *CollateExpr:
		return InputRefOfCollateExpr(in)
	case *ColumnDefinition:
		return InputRefOfColumnDefinition(in)
	case *ColumnType:
		return InputRefOfColumnType(in)
	case Columns:
		return InputColumns(in)
	case *CommentOnly:
		return InputRefOfCommentOnly(in)
	case *Commit:
		return InputRefOfCommit(in)
	case *CommonTableExpr:
		return InputRefOfCommonTableExpr(in)
	case *ComparisonExpr:
		return InputRefOfComparisonExpr(in)
	case *ConstraintDefinition:
		return InputRefOfConstraintDefinition(in)
	case *ConvertExpr:
		return InputRefOfConvertExpr(in)
	case *ConvertType:
		return InputRefOfConvertType(in)
	case *ConvertUsingExpr:
		return InputRefOfConvertUsingExpr(in)
	case *Count:
		return InputRefOfCount(in)
	case *CountStar:
		return InputRefOfCountStar(in)
	case *CreateDatabase:
		return InputRefOfCreateDatabase(in)
	case *CreateTable:
		return InputRefOfCreateTable(in)
	case *CreateView:
		return InputRefOfCreateView(in)
	case *CurTimeFuncExpr:
		return InputRefOfCurTimeFuncExpr(in)
	case *DeallocateStmt:
		return InputRefOfDeallocateStmt(in)
	case *Default:
		return InputRefOfDefault(in)
	case *Definer:
		return InputRefOfDefiner(in)
	case *Delete:
		return InputRefOfDelete(in)
	case *DerivedTable:
		return InputRefOfDerivedTable(in)
	case *DropColumn:
		return InputRefOfDropColumn(in)
	case *DropDatabase:
		return InputRefOfDropDatabase(in)
	case *DropKey:
		return InputRefOfDropKey(in)
	case *DropTable:
		return InputRefOfDropTable(in)
	case *DropView:
		return InputRefOfDropView(in)
	case *ExecuteStmt:
		return InputRefOfExecuteStmt(in)
	case *ExistsExpr:
		return InputRefOfExistsExpr(in)
	case *ExplainStmt:
		return InputRefOfExplainStmt(in)
	case *ExplainTab:
		return InputRefOfExplainTab(in)
	case Exprs:
		return InputExprs(in)
	case *ExtractFuncExpr:
		return InputRefOfExtractFuncExpr(in)
	case *ExtractValueExpr:
		return InputRefOfExtractValueExpr(in)
	case *FirstOrLastValueExpr:
		return InputRefOfFirstOrLastValueExpr(in)
	case *Flush:
		return InputRefOfFlush(in)
	case *Force:
		return InputRefOfForce(in)
	case *ForeignKeyDefinition:
		return InputRefOfForeignKeyDefinition(in)
	case *FrameClause:
		return InputRefOfFrameClause(in)
	case *FramePoint:
		return InputRefOfFramePoint(in)
	case *FromFirstLastClause:
		return InputRefOfFromFirstLastClause(in)
	case *FuncExpr:
		return InputRefOfFuncExpr(in)
	case *GTIDFuncExpr:
		return InputRefOfGTIDFuncExpr(in)
	case *GeoHashFromLatLongExpr:
		return InputRefOfGeoHashFromLatLongExpr(in)
	case *GeoHashFromPointExpr:
		return InputRefOfGeoHashFromPointExpr(in)
	case *GeoJSONFromGeomExpr:
		return InputRefOfGeoJSONFromGeomExpr(in)
	case *GeomCollPropertyFuncExpr:
		return InputRefOfGeomCollPropertyFuncExpr(in)
	case *GeomFormatExpr:
		return InputRefOfGeomFormatExpr(in)
	case *GeomFromGeoHashExpr:
		return InputRefOfGeomFromGeoHashExpr(in)
	case *GeomFromGeoJSONExpr:
		return InputRefOfGeomFromGeoJSONExpr(in)
	case *GeomFromTextExpr:
		return InputRefOfGeomFromTextExpr(in)
	case *GeomFromWKBExpr:
		return InputRefOfGeomFromWKBExpr(in)
	case *GeomPropertyFuncExpr:
		return InputRefOfGeomPropertyFuncExpr(in)
	case GroupBy:
		return InputGroupBy(in)
	case *GroupConcatExpr:
		return InputRefOfGroupConcatExpr(in)
	case IdentifierCI:
		return InputIdentifierCI(in)
	case IdentifierCS:
		return InputIdentifierCS(in)
	case *IndexDefinition:
		return InputRefOfIndexDefinition(in)
	case *IndexHint:
		return InputRefOfIndexHint(in)
	case IndexHints:
		return InputIndexHints(in)
	case *IndexInfo:
		return InputRefOfIndexInfo(in)
	case *Insert:
		return InputRefOfInsert(in)
	case *InsertExpr:
		return InputRefOfInsertExpr(in)
	case *IntervalDateExpr:
		return InputRefOfIntervalDateExpr(in)
	case *IntervalFuncExpr:
		return InputRefOfIntervalFuncExpr(in)
	case *IntroducerExpr:
		return InputRefOfIntroducerExpr(in)
	case *IsExpr:
		return InputRefOfIsExpr(in)
	case *JSONArrayExpr:
		return InputRefOfJSONArrayExpr(in)
	case *JSONAttributesExpr:
		return InputRefOfJSONAttributesExpr(in)
	case *JSONContainsExpr:
		return InputRefOfJSONContainsExpr(in)
	case *JSONContainsPathExpr:
		return InputRefOfJSONContainsPathExpr(in)
	case *JSONExtractExpr:
		return InputRefOfJSONExtractExpr(in)
	case *JSONKeysExpr:
		return InputRefOfJSONKeysExpr(in)
	case *JSONObjectExpr:
		return InputRefOfJSONObjectExpr(in)
	case *JSONObjectParam:
		return InputRefOfJSONObjectParam(in)
	case *JSONOverlapsExpr:
		return InputRefOfJSONOverlapsExpr(in)
	case *JSONPrettyExpr:
		return InputRefOfJSONPrettyExpr(in)
	case *JSONQuoteExpr:
		return InputRefOfJSONQuoteExpr(in)
	case *JSONRemoveExpr:
		return InputRefOfJSONRemoveExpr(in)
	case *JSONSchemaValidFuncExpr:
		return InputRefOfJSONSchemaValidFuncExpr(in)
	case *JSONSchemaValidationReportFuncExpr:
		return InputRefOfJSONSchemaValidationReportFuncExpr(in)
	case *JSONSearchExpr:
		return InputRefOfJSONSearchExpr(in)
	case *JSONStorageFreeExpr:
		return InputRefOfJSONStorageFreeExpr(in)
	case *JSONStorageSizeExpr:
		return InputRefOfJSONStorageSizeExpr(in)
	case *JSONTableExpr:
		return InputRefOfJSONTableExpr(in)
	case *JSONUnquoteExpr:
		return InputRefOfJSONUnquoteExpr(in)
	case *JSONValueExpr:
		return InputRefOfJSONValueExpr(in)
	case *JSONValueMergeExpr:
		return InputRefOfJSONValueMergeExpr(in)
	case *JSONValueModifierExpr:
		return InputRefOfJSONValueModifierExpr(in)
	case *JoinCondition:
		return InputRefOfJoinCondition(in)
	case *JoinTableExpr:
		return InputRefOfJoinTableExpr(in)
	case *JtColumnDefinition:
		return InputRefOfJtColumnDefinition(in)
	case *JtOnResponse:
		return InputRefOfJtOnResponse(in)
	case *KeyState:
		return InputRefOfKeyState(in)
	case *Kill:
		return InputRefOfKill(in)
	case *LagLeadExpr:
		return InputRefOfLagLeadExpr(in)
	case *Limit:
		return InputRefOfLimit(in)
	case *LineStringExpr:
		return InputRefOfLineStringExpr(in)
	case *LinestrPropertyFuncExpr:
		return InputRefOfLinestrPropertyFuncExpr(in)
	case ListArg:
		return InputListArg(in)
	case *Literal:
		return InputRefOfLiteral(in)
	case *Load:
		return InputRefOfLoad(in)
	case *LocateExpr:
		return InputRefOfLocateExpr(in)
	case *LockOption:
		return InputRefOfLockOption(in)
	case *LockTables:
		return InputRefOfLockTables(in)
	case *LockingFunc:
		return InputRefOfLockingFunc(in)
	case MatchAction:
		return InputMatchAction(in)
	case *MatchExpr:
		return InputRefOfMatchExpr(in)
	case *Max:
		return InputRefOfMax(in)
	case *MemberOfExpr:
		return InputRefOfMemberOfExpr(in)
	case *Min:
		return InputRefOfMin(in)
	case *ModifyColumn:
		return InputRefOfModifyColumn(in)
	case *MultiLinestringExpr:
		return InputRefOfMultiLinestringExpr(in)
	case *MultiPointExpr:
		return InputRefOfMultiPointExpr(in)
	case *MultiPolygonExpr:
		return InputRefOfMultiPolygonExpr(in)
	case *NTHValueExpr:
		return InputRefOfNTHValueExpr(in)
	case *NamedWindow:
		return InputRefOfNamedWindow(in)
	case NamedWindows:
		return InputNamedWindows(in)
	case *Nextval:
		return InputRefOfNextval(in)
	case *NotExpr:
		return InputRefOfNotExpr(in)
	case *NtileExpr:
		return InputRefOfNtileExpr(in)
	case *NullTreatmentClause:
		return InputRefOfNullTreatmentClause(in)
	case *NullVal:
		return InputRefOfNullVal(in)
	case *Offset:
		return InputRefOfOffset(in)
	case OnDup:
		return InputOnDup(in)
	case *OptLike:
		return InputRefOfOptLike(in)
	case *OrExpr:
		return InputRefOfOrExpr(in)
	case *Order:
		return InputRefOfOrder(in)
	case OrderBy:
		return InputOrderBy(in)
	case *OrderByOption:
		return InputRefOfOrderByOption(in)
	case *OtherAdmin:
		return InputRefOfOtherAdmin(in)
	case *OverClause:
		return InputRefOfOverClause(in)
	case *ParenTableExpr:
		return InputRefOfParenTableExpr(in)
	case *ParsedComments:
		return InputRefOfParsedComments(in)
	case *PartitionDefinition:
		return InputRefOfPartitionDefinition(in)
	case *PartitionDefinitionOptions:
		return InputRefOfPartitionDefinitionOptions(in)
	case *PartitionEngine:
		return InputRefOfPartitionEngine(in)
	case *PartitionOption:
		return InputRefOfPartitionOption(in)
	case *PartitionSpec:
		return InputRefOfPartitionSpec(in)
	case *PartitionValueRange:
		return InputRefOfPartitionValueRange(in)
	case Partitions:
		return InputPartitions(in)
	case *PerformanceSchemaFuncExpr:
		return InputRefOfPerformanceSchemaFuncExpr(in)
	case *PointExpr:
		return InputRefOfPointExpr(in)
	case *PointPropertyFuncExpr:
		return InputRefOfPointPropertyFuncExpr(in)
	case *PolygonExpr:
		return InputRefOfPolygonExpr(in)
	case *PolygonPropertyFuncExpr:
		return InputRefOfPolygonPropertyFuncExpr(in)
	case *PrepareStmt:
		return InputRefOfPrepareStmt(in)
	case *PurgeBinaryLogs:
		return InputRefOfPurgeBinaryLogs(in)
	case ReferenceAction:
		return InputReferenceAction(in)
	case *ReferenceDefinition:
		return InputRefOfReferenceDefinition(in)
	case *RegexpInstrExpr:
		return InputRefOfRegexpInstrExpr(in)
	case *RegexpLikeExpr:
		return InputRefOfRegexpLikeExpr(in)
	case *RegexpReplaceExpr:
		return InputRefOfRegexpReplaceExpr(in)
	case *RegexpSubstrExpr:
		return InputRefOfRegexpSubstrExpr(in)
	case *Release:
		return InputRefOfRelease(in)
	case *RenameColumn:
		return InputRefOfRenameColumn(in)
	case *RenameIndex:
		return InputRefOfRenameIndex(in)
	case *RenameTable:
		return InputRefOfRenameTable(in)
	case *RenameTableName:
		return InputRefOfRenameTableName(in)
	case *RevertMigration:
		return InputRefOfRevertMigration(in)
	case *Rollback:
		return InputRefOfRollback(in)
	case RootNode:
		return InputRootNode(in)
	case *SRollback:
		return InputRefOfSRollback(in)
	case *Savepoint:
		return InputRefOfSavepoint(in)
	case *Select:
		return InputRefOfSelect(in)
	case SelectExprs:
		return InputSelectExprs(in)
	case *SelectInto:
		return InputRefOfSelectInto(in)
	case *Set:
		return InputRefOfSet(in)
	case *SetExpr:
		return InputRefOfSetExpr(in)
	case SetExprs:
		return InputSetExprs(in)
	case *Show:
		return InputRefOfShow(in)
	case *ShowBasic:
		return InputRefOfShowBasic(in)
	case *ShowCreate:
		return InputRefOfShowCreate(in)
	case *ShowFilter:
		return InputRefOfShowFilter(in)
	case *ShowMigrationLogs:
		return InputRefOfShowMigrationLogs(in)
	case *ShowOther:
		return InputRefOfShowOther(in)
	case *ShowThrottledApps:
		return InputRefOfShowThrottledApps(in)
	case *ShowThrottlerStatus:
		return InputRefOfShowThrottlerStatus(in)
	case *StarExpr:
		return InputRefOfStarExpr(in)
	case *Std:
		return InputRefOfStd(in)
	case *StdDev:
		return InputRefOfStdDev(in)
	case *StdPop:
		return InputRefOfStdPop(in)
	case *StdSamp:
		return InputRefOfStdSamp(in)
	case *Stream:
		return InputRefOfStream(in)
	case *SubPartition:
		return InputRefOfSubPartition(in)
	case *SubPartitionDefinition:
		return InputRefOfSubPartitionDefinition(in)
	case *SubPartitionDefinitionOptions:
		return InputRefOfSubPartitionDefinitionOptions(in)
	case SubPartitionDefinitions:
		return InputSubPartitionDefinitions(in)
	case *Subquery:
		return InputRefOfSubquery(in)
	case *SubstrExpr:
		return InputRefOfSubstrExpr(in)
	case *Sum:
		return InputRefOfSum(in)
	case TableExprs:
		return InputTableExprs(in)
	case TableName:
		return InputTableName(in)
	case TableNames:
		return InputTableNames(in)
	case TableOptions:
		return InputTableOptions(in)
	case *TableSpec:
		return InputRefOfTableSpec(in)
	case *TablespaceOperation:
		return InputRefOfTablespaceOperation(in)
	case *TimestampDiffExpr:
		return InputRefOfTimestampDiffExpr(in)
	case *TrimFuncExpr:
		return InputRefOfTrimFuncExpr(in)
	case *TruncateTable:
		return InputRefOfTruncateTable(in)
	case *UnaryExpr:
		return InputRefOfUnaryExpr(in)
	case *Union:
		return InputRefOfUnion(in)
	case *UnlockTables:
		return InputRefOfUnlockTables(in)
	case *Update:
		return InputRefOfUpdate(in)
	case *UpdateExpr:
		return InputRefOfUpdateExpr(in)
	case UpdateExprs:
		return InputUpdateExprs(in)
	case *UpdateXMLExpr:
		return InputRefOfUpdateXMLExpr(in)
	case *Use:
		return InputRefOfUse(in)
	case *VExplainStmt:
		return InputRefOfVExplainStmt(in)
	case *VStream:
		return InputRefOfVStream(in)
	case ValTuple:
		return InputValTuple(in)
	case *Validation:
		return InputRefOfValidation(in)
	case Values:
		return InputValues(in)
	case *ValuesFuncExpr:
		return InputRefOfValuesFuncExpr(in)
	case *VarPop:
		return InputRefOfVarPop(in)
	case *VarSamp:
		return InputRefOfVarSamp(in)
	case *Variable:
		return InputRefOfVariable(in)
	case *Variance:
		return InputRefOfVariance(in)
	case VindexParam:
		return InputVindexParam(in)
	case *VindexSpec:
		return InputRefOfVindexSpec(in)
	case *WeightStringFuncExpr:
		return InputRefOfWeightStringFuncExpr(in)
	case *When:
		return InputRefOfWhen(in)
	case *Where:
		return InputRefOfWhere(in)
	case *WindowDefinition:
		return InputRefOfWindowDefinition(in)
	case WindowDefinitions:
		return InputWindowDefinitions(in)
	case *WindowSpecification:
		return InputRefOfWindowSpecification(in)
	case *With:
		return InputRefOfWith(in)
	case *XorExpr:
		return InputRefOfXorExpr(in)
	default:
		// this should never happen
		return nil
	}
}
func InputRefOfAddColumns(in *AddColumns) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfColumnDefinition(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAddConstraintDefinition(in *AddConstraintDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfConstraintDefinition(in.ConstraintDefinition, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAddIndexDefinition(in *AddIndexDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfIndexDefinition(in.IndexDefinition, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAliasedExpr(in *AliasedExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.As, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAliasedTableExpr(in *AliasedTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSimpleTableExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.As, f); err != nil {
		return err
	}
	if err := VisitIndexHints(in.Hints, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterCharset(in *AlterCharset) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfAlterCheck(in *AlterCheck) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterColumn(in *AlterColumn) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Column, f); err != nil {
		return err
	}
	if err := VisitExpr(in.DefaultVal, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterDatabase(in *AlterDatabase) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCS(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterIndex(in *AlterIndex) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterMigration(in *AlterMigration) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Ratio, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterTable(in *AlterTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	for _, el := range in.AlterOptions {
		if err := VisitAlterOption(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfPartitionSpec(in.PartitionSpec, f); err != nil {
		return err
	}
	if err := VisitRefOfPartitionOption(in.PartitionOption, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterView(in *AlterView) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.ViewName, f); err != nil {
		return err
	}
	if err := VisitRefOfDefiner(in.Definer, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAlterVschema(in *AlterVschema) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfVindexSpec(in.VindexSpec, f); err != nil {
		return err
	}
	for _, el := range in.VindexCols {
		if err := VisitIdentifierCI(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfAutoIncSpec(in.AutoIncSpec, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAnalyze(in *Analyze) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAndExpr(in *AndExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAnyValue(in *AnyValue) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfArgument(in *Argument) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfArgumentLessWindowExpr(in *ArgumentLessWindowExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfOverClause(in.OverClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAssignmentExpr(in *AssignmentExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAutoIncSpec(in *AutoIncSpec) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Column, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Sequence, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfAvg(in *Avg) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfBegin(in *Begin) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfBetweenExpr(in *BetweenExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.From, f); err != nil {
		return err
	}
	if err := VisitExpr(in.To, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfBinaryExpr(in *BinaryExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfBitAnd(in *BitAnd) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfBitOr(in *BitOr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfBitXor(in *BitXor) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCallProc(in *CallProc) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Name, f); err != nil {
		return err
	}
	if err := VisitExprs(in.Params, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCaseExpr(in *CaseExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	for _, el := range in.Whens {
		if err := VisitRefOfWhen(el, f); err != nil {
			return err
		}
	}
	if err := VisitExpr(in.Else, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCastExpr(in *CastExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfConvertType(in.Type, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfChangeColumn(in *ChangeColumn) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.OldColumn, f); err != nil {
		return err
	}
	if err := VisitRefOfColumnDefinition(in.NewColDefinition, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCharExpr(in *CharExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCheckConstraintDefinition(in *CheckConstraintDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfColName(in *ColName) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Qualifier, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCollateExpr(in *CollateExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfColumnDefinition(in *ColumnDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfColumnType(in.Type, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfColumnType(in *ColumnType) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Length, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Scale, f); err != nil {
		return err
	}
	return nil
}
func InputColumns(in Columns) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitIdentifierCI(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfCommentOnly(in *CommentOnly) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfCommit(in *Commit) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfCommonTableExpr(in *CommonTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCS(in.ID, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitRefOfSubquery(in.Subquery, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfComparisonExpr(in *ComparisonExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Escape, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfConstraintDefinition(in *ConstraintDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitConstraintInfo(in.Details, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfConvertExpr(in *ConvertExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfConvertType(in.Type, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfConvertType(in *ConvertType) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Length, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Scale, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfConvertUsingExpr(in *ConvertUsingExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCount(in *Count) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.Args, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCountStar(in *CountStar) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfCreateDatabase(in *CreateDatabase) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCreateTable(in *CreateTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfTableSpec(in.TableSpec, f); err != nil {
		return err
	}
	if err := VisitRefOfOptLike(in.OptLike, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCreateView(in *CreateView) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.ViewName, f); err != nil {
		return err
	}
	if err := VisitRefOfDefiner(in.Definer, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfCurTimeFuncExpr(in *CurTimeFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDeallocateStmt(in *DeallocateStmt) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDefault(in *Default) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfDefiner(in *Definer) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfDelete(in *Delete) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfWith(in.With, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableNames(in.Targets, f); err != nil {
		return err
	}
	if err := VisitTableExprs(in.TableExprs, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDerivedTable(in *DerivedTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDropColumn(in *DropColumn) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDropDatabase(in *DropDatabase) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDropKey(in *DropKey) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDropTable(in *DropTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.FromTables, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfDropView(in *DropView) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.FromTables, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfExecuteStmt(in *ExecuteStmt) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	for _, el := range in.Arguments {
		if err := VisitRefOfVariable(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfExistsExpr(in *ExistsExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfSubquery(in.Subquery, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfExplainStmt(in *ExplainStmt) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitStatement(in.Statement, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfExplainTab(in *ExplainTab) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func InputExprs(in Exprs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfExtractFuncExpr(in *ExtractFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfExtractValueExpr(in *ExtractValueExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Fragment, f); err != nil {
		return err
	}
	if err := VisitExpr(in.XPathExpr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfFirstOrLastValueExpr(in *FirstOrLastValueExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfNullTreatmentClause(in.NullTreatmentClause, f); err != nil {
		return err
	}
	if err := VisitRefOfOverClause(in.OverClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfFlush(in *Flush) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableNames(in.TableNames, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfForce(in *Force) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfForeignKeyDefinition(in *ForeignKeyDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.Source, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.IndexName, f); err != nil {
		return err
	}
	if err := VisitRefOfReferenceDefinition(in.ReferenceDefinition, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfFrameClause(in *FrameClause) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfFramePoint(in.Start, f); err != nil {
		return err
	}
	if err := VisitRefOfFramePoint(in.End, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfFramePoint(in *FramePoint) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfFromFirstLastClause(in *FromFirstLastClause) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfFuncExpr(in *FuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCS(in.Qualifier, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitSelectExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGTIDFuncExpr(in *GTIDFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Set1, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Set2, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Timeout, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Channel, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeoHashFromLatLongExpr(in *GeoHashFromLatLongExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Latitude, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Longitude, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MaxLength, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeoHashFromPointExpr(in *GeoHashFromPointExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Point, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MaxLength, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeoJSONFromGeomExpr(in *GeoJSONFromGeomExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Geom, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MaxDecimalDigits, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Bitmask, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomCollPropertyFuncExpr(in *GeomCollPropertyFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.GeomColl, f); err != nil {
		return err
	}
	if err := VisitExpr(in.PropertyDefArg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomFormatExpr(in *GeomFormatExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Geom, f); err != nil {
		return err
	}
	if err := VisitExpr(in.AxisOrderOpt, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomFromGeoHashExpr(in *GeomFromGeoHashExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.GeoHash, f); err != nil {
		return err
	}
	if err := VisitExpr(in.SridOpt, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomFromGeoJSONExpr(in *GeomFromGeoJSONExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.GeoJSON, f); err != nil {
		return err
	}
	if err := VisitExpr(in.HigherDimHandlerOpt, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Srid, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomFromTextExpr(in *GeomFromTextExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.WktText, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Srid, f); err != nil {
		return err
	}
	if err := VisitExpr(in.AxisOrderOpt, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomFromWKBExpr(in *GeomFromWKBExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.WkbBlob, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Srid, f); err != nil {
		return err
	}
	if err := VisitExpr(in.AxisOrderOpt, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfGeomPropertyFuncExpr(in *GeomPropertyFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Geom, f); err != nil {
		return err
	}
	return nil
}
func InputGroupBy(in GroupBy) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfGroupConcatExpr(in *GroupConcatExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.Exprs, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func InputIdentifierCI(in IdentifierCI) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputIdentifierCS(in IdentifierCS) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfIndexDefinition(in *IndexDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfIndexInfo(in.Info, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfIndexHint(in *IndexHint) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Indexes {
		if err := VisitIdentifierCI(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputIndexHints(in IndexHints) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfIndexHint(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfIndexInfo(in *IndexInfo) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.ConstraintName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfInsert(in *Insert) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitRefOfAliasedTableExpr(in.Table, f); err != nil {
		return err
	}
	if err := VisitPartitions(in.Partitions, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Columns, f); err != nil {
		return err
	}
	if err := VisitInsertRows(in.Rows, f); err != nil {
		return err
	}
	if err := VisitOnDup(in.OnDup, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfInsertExpr(in *InsertExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Str, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pos, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Len, f); err != nil {
		return err
	}
	if err := VisitExpr(in.NewStr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfIntervalDateExpr(in *IntervalDateExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Date, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Interval, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfIntervalFuncExpr(in *IntervalFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfIntroducerExpr(in *IntroducerExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfIsExpr(in *IsExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONArrayExpr(in *JSONArrayExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.Params, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONAttributesExpr(in *JSONAttributesExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Path, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONContainsExpr(in *JSONContainsExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Target, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Candidate, f); err != nil {
		return err
	}
	for _, el := range in.PathList {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONContainsPathExpr(in *JSONContainsPathExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExpr(in.OneOrAll, f); err != nil {
		return err
	}
	for _, el := range in.PathList {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONExtractExpr(in *JSONExtractExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	for _, el := range in.PathList {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONKeysExpr(in *JSONKeysExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Path, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONObjectExpr(in *JSONObjectExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Params {
		if err := VisitRefOfJSONObjectParam(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONObjectParam(in *JSONObjectParam) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Key, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Value, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONOverlapsExpr(in *JSONOverlapsExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc1, f); err != nil {
		return err
	}
	if err := VisitExpr(in.JSONDoc2, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONPrettyExpr(in *JSONPrettyExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONVal, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONQuoteExpr(in *JSONQuoteExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.StringArg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONRemoveExpr(in *JSONRemoveExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExprs(in.PathList, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONSchemaValidFuncExpr(in *JSONSchemaValidFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Schema, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Document, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONSchemaValidationReportFuncExpr(in *JSONSchemaValidationReportFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Schema, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Document, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONSearchExpr(in *JSONSearchExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExpr(in.OneOrAll, f); err != nil {
		return err
	}
	if err := VisitExpr(in.SearchStr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.EscapeChar, f); err != nil {
		return err
	}
	for _, el := range in.PathList {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONStorageFreeExpr(in *JSONStorageFreeExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONVal, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONStorageSizeExpr(in *JSONStorageSizeExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONVal, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONTableExpr(in *JSONTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.Alias, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Filter, f); err != nil {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfJtColumnDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJSONUnquoteExpr(in *JSONUnquoteExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONValue, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONValueExpr(in *JSONValueExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Path, f); err != nil {
		return err
	}
	if err := VisitRefOfConvertType(in.ReturningType, f); err != nil {
		return err
	}
	if err := VisitRefOfJtOnResponse(in.EmptyOnResponse, f); err != nil {
		return err
	}
	if err := VisitRefOfJtOnResponse(in.ErrorOnResponse, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONValueMergeExpr(in *JSONValueMergeExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	if err := VisitExprs(in.JSONDocList, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJSONValueModifierExpr(in *JSONValueModifierExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.JSONDoc, f); err != nil {
		return err
	}
	for _, el := range in.Params {
		if err := VisitRefOfJSONObjectParam(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfJoinCondition(in *JoinCondition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.On, f); err != nil {
		return err
	}
	if err := VisitColumns(in.Using, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJoinTableExpr(in *JoinTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableExpr(in.LeftExpr, f); err != nil {
		return err
	}
	if err := VisitTableExpr(in.RightExpr, f); err != nil {
		return err
	}
	if err := VisitRefOfJoinCondition(in.Condition, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfJtColumnDefinition(in *JtColumnDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfJtOnResponse(in *JtOnResponse) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfKeyState(in *KeyState) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfKill(in *Kill) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfLagLeadExpr(in *LagLeadExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.N, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Default, f); err != nil {
		return err
	}
	if err := VisitRefOfOverClause(in.OverClause, f); err != nil {
		return err
	}
	if err := VisitRefOfNullTreatmentClause(in.NullTreatmentClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfLimit(in *Limit) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Offset, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Rowcount, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfLineStringExpr(in *LineStringExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.PointParams, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfLinestrPropertyFuncExpr(in *LinestrPropertyFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Linestring, f); err != nil {
		return err
	}
	if err := VisitExpr(in.PropertyDefArg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfLiteral(in *Literal) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfLoad(in *Load) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfLocateExpr(in *LocateExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.SubStr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Str, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pos, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfLockOption(in *LockOption) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfLockTables(in *LockTables) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfLockingFunc(in *LockingFunc) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Timeout, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMatchExpr(in *MatchExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfColName(el, f); err != nil {
			return err
		}
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMax(in *Max) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMemberOfExpr(in *MemberOfExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Value, f); err != nil {
		return err
	}
	if err := VisitExpr(in.JSONArr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMin(in *Min) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfModifyColumn(in *ModifyColumn) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColumnDefinition(in.NewColDefinition, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.After, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMultiLinestringExpr(in *MultiLinestringExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.LinestringParams, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMultiPointExpr(in *MultiPointExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.PointParams, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfMultiPolygonExpr(in *MultiPolygonExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.PolygonParams, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfNTHValueExpr(in *NTHValueExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.N, f); err != nil {
		return err
	}
	if err := VisitRefOfOverClause(in.OverClause, f); err != nil {
		return err
	}
	if err := VisitRefOfFromFirstLastClause(in.FromFirstLastClause, f); err != nil {
		return err
	}
	if err := VisitRefOfNullTreatmentClause(in.NullTreatmentClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfNamedWindow(in *NamedWindow) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitWindowDefinitions(in.Windows, f); err != nil {
		return err
	}
	return nil
}
func InputNamedWindows(in NamedWindows) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfNamedWindow(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfNextval(in *Nextval) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfNotExpr(in *NotExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfNtileExpr(in *NtileExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.N, f); err != nil {
		return err
	}
	if err := VisitRefOfOverClause(in.OverClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfNullTreatmentClause(in *NullTreatmentClause) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfNullVal(in *NullVal) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfOffset(in *Offset) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Original, f); err != nil {
		return err
	}
	return nil
}
func InputOnDup(in OnDup) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfUpdateExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfOptLike(in *OptLike) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.LikeTable, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfOrExpr(in *OrExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfOrder(in *Order) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputOrderBy(in OrderBy) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfOrder(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfOrderByOption(in *OrderByOption) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.Cols, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfOtherAdmin(in *OtherAdmin) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfOverClause(in *OverClause) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.WindowName, f); err != nil {
		return err
	}
	if err := VisitRefOfWindowSpecification(in.WindowSpec, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfParenTableExpr(in *ParenTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfParsedComments(in *ParsedComments) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfPartitionDefinition(in *PartitionDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfPartitionDefinitionOptions(in.Options, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPartitionDefinitionOptions(in *PartitionDefinitionOptions) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfPartitionValueRange(in.ValueRange, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Comment, f); err != nil {
		return err
	}
	if err := VisitRefOfPartitionEngine(in.Engine, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.DataDirectory, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.IndexDirectory, f); err != nil {
		return err
	}
	if err := VisitSubPartitionDefinitions(in.SubPartitionDefinitions, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPartitionEngine(in *PartitionEngine) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfPartitionOption(in *PartitionOption) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.ColList, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfSubPartition(in.SubPartition, f); err != nil {
		return err
	}
	for _, el := range in.Definitions {
		if err := VisitRefOfPartitionDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfPartitionSpec(in *PartitionSpec) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitPartitions(in.Names, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.Number, f); err != nil {
		return err
	}
	if err := VisitTableName(in.TableName, f); err != nil {
		return err
	}
	for _, el := range in.Definitions {
		if err := VisitRefOfPartitionDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfPartitionValueRange(in *PartitionValueRange) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitValTuple(in.Range, f); err != nil {
		return err
	}
	return nil
}
func InputPartitions(in Partitions) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitIdentifierCI(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfPerformanceSchemaFuncExpr(in *PerformanceSchemaFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Argument, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPointExpr(in *PointExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.XCordinate, f); err != nil {
		return err
	}
	if err := VisitExpr(in.YCordinate, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPointPropertyFuncExpr(in *PointPropertyFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Point, f); err != nil {
		return err
	}
	if err := VisitExpr(in.ValueToSet, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPolygonExpr(in *PolygonExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExprs(in.LinestringParams, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPolygonPropertyFuncExpr(in *PolygonPropertyFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Polygon, f); err != nil {
		return err
	}
	if err := VisitExpr(in.PropertyDefArg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPrepareStmt(in *PrepareStmt) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Statement, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfPurgeBinaryLogs(in *PurgeBinaryLogs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfReferenceDefinition(in *ReferenceDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.ReferencedTable, f); err != nil {
		return err
	}
	if err := VisitColumns(in.ReferencedColumns, f); err != nil {
		return err
	}
	if err := VisitMatchAction(in.Match, f); err != nil {
		return err
	}
	if err := VisitReferenceAction(in.OnDelete, f); err != nil {
		return err
	}
	if err := VisitReferenceAction(in.OnUpdate, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRegexpInstrExpr(in *RegexpInstrExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pattern, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Position, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Occurrence, f); err != nil {
		return err
	}
	if err := VisitExpr(in.ReturnOption, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MatchType, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRegexpLikeExpr(in *RegexpLikeExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pattern, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MatchType, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRegexpReplaceExpr(in *RegexpReplaceExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pattern, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Repl, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Occurrence, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Position, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MatchType, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRegexpSubstrExpr(in *RegexpSubstrExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Pattern, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Occurrence, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Position, f); err != nil {
		return err
	}
	if err := VisitExpr(in.MatchType, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRelease(in *Release) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRenameColumn(in *RenameColumn) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.OldName, f); err != nil {
		return err
	}
	if err := VisitRefOfColName(in.NewName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRenameIndex(in *RenameIndex) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.OldName, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.NewName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRenameTable(in *RenameTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfRenameTableName(in *RenameTableName) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRevertMigration(in *RevertMigration) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfRollback(in *Rollback) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRootNode(in RootNode) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	inputs := append(inputs, in.SQLNode)
	return nil
}
func InputRefOfSRollback(in *SRollback) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSavepoint(in *Savepoint) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSelect(in *Select) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfWith(in.With, f); err != nil {
		return err
	}
	for _, el := range in.From {
		if err := VisitTableExpr(el, f); err != nil {
			return err
		}
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExprs(in.SelectExprs, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitGroupBy(in.GroupBy, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Having, f); err != nil {
		return err
	}
	if err := VisitNamedWindows(in.Windows, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	if err := VisitRefOfSelectInto(in.Into, f); err != nil {
		return err
	}
	return nil
}
func InputSelectExprs(in SelectExprs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitSelectExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfSelectInto(in *SelectInto) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfSet(in *Set) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSetExprs(in.Exprs, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSetExpr(in *SetExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfVariable(in.Var, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputSetExprs(in SetExprs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfSetExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfShow(in *Show) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitShowInternal(in.Internal, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfShowBasic(in *ShowBasic) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Tbl, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.DbName, f); err != nil {
		return err
	}
	if err := VisitRefOfShowFilter(in.Filter, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfShowCreate(in *ShowCreate) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Op, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfShowFilter(in *ShowFilter) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Filter, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfShowMigrationLogs(in *ShowMigrationLogs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfShowOther(in *ShowOther) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfShowThrottledApps(in *ShowThrottledApps) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfShowThrottlerStatus(in *ShowThrottlerStatus) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfStarExpr(in *StarExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.TableName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfStd(in *Std) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfStdDev(in *StdDev) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfStdPop(in *StdPop) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfStdSamp(in *StdSamp) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfStream(in *Stream) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExpr(in.SelectExpr, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSubPartition(in *SubPartition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitColumns(in.ColList, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSubPartitionDefinition(in *SubPartitionDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfSubPartitionDefinitionOptions(in.Options, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSubPartitionDefinitionOptions(in *SubPartitionDefinitionOptions) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfLiteral(in.Comment, f); err != nil {
		return err
	}
	if err := VisitRefOfPartitionEngine(in.Engine, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.DataDirectory, f); err != nil {
		return err
	}
	if err := VisitRefOfLiteral(in.IndexDirectory, f); err != nil {
		return err
	}
	return nil
}
func InputSubPartitionDefinitions(in SubPartitionDefinitions) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfSubPartitionDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfSubquery(in *Subquery) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSelectStatement(in.Select, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSubstrExpr(in *SubstrExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.From, f); err != nil {
		return err
	}
	if err := VisitExpr(in.To, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfSum(in *Sum) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputTableExprs(in TableExprs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitTableExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputTableName(in TableName) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	inputs := append(inputs, in.Name)
	inputs := append(inputs, in.Qualifier)
	return nil
}
func InputTableNames(in TableNames) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitTableName(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputTableOptions(in TableOptions) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputRefOfTableSpec(in *TableSpec) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.Columns {
		if err := VisitRefOfColumnDefinition(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.Indexes {
		if err := VisitRefOfIndexDefinition(el, f); err != nil {
			return err
		}
	}
	for _, el := range in.Constraints {
		if err := VisitRefOfConstraintDefinition(el, f); err != nil {
			return err
		}
	}
	if err := VisitTableOptions(in.Options, f); err != nil {
		return err
	}
	if err := VisitRefOfPartitionOption(in.PartitionOption, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfTablespaceOperation(in *TablespaceOperation) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfTimestampDiffExpr(in *TimestampDiffExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr1, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr2, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfTrimFuncExpr(in *TrimFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.TrimArg, f); err != nil {
		return err
	}
	if err := VisitExpr(in.StringArg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfTruncateTable(in *TruncateTable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfUnaryExpr(in *UnaryExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfUnion(in *Union) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfWith(in.With, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Left, f); err != nil {
		return err
	}
	if err := VisitSelectStatement(in.Right, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	if err := VisitRefOfSelectInto(in.Into, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfUnlockTables(in *UnlockTables) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfUpdate(in *Update) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfWith(in.With, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitTableExprs(in.TableExprs, f); err != nil {
		return err
	}
	if err := VisitUpdateExprs(in.Exprs, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderBy, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfUpdateExpr(in *UpdateExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputUpdateExprs(in UpdateExprs) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfUpdateExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfUpdateXMLExpr(in *UpdateXMLExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Target, f); err != nil {
		return err
	}
	if err := VisitExpr(in.XPathExpr, f); err != nil {
		return err
	}
	if err := VisitExpr(in.NewXML, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfUse(in *Use) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCS(in.DBName, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVExplainStmt(in *VExplainStmt) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitStatement(in.Statement, f); err != nil {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVStream(in *VStream) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfParsedComments(in.Comments, f); err != nil {
		return err
	}
	if err := VisitSelectExpr(in.SelectExpr, f); err != nil {
		return err
	}
	if err := VisitTableName(in.Table, f); err != nil {
		return err
	}
	if err := VisitRefOfWhere(in.Where, f); err != nil {
		return err
	}
	if err := VisitRefOfLimit(in.Limit, f); err != nil {
		return err
	}
	return nil
}
func InputValTuple(in ValTuple) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfValidation(in *Validation) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputValues(in Values) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitValTuple(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfValuesFuncExpr(in *ValuesFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitRefOfColName(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVarPop(in *VarPop) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVarSamp(in *VarSamp) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVariable(in *Variable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVariance(in *Variance) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Arg, f); err != nil {
		return err
	}
	return nil
}
func InputVindexParam(in VindexParam) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	inputs := append(inputs, in.Key)
	return nil
}
func InputRefOfVindexSpec(in *VindexSpec) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitIdentifierCI(in.Type, f); err != nil {
		return err
	}
	for _, el := range in.Params {
		if err := VisitVindexParam(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfWeightStringFuncExpr(in *WeightStringFuncExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	if err := VisitRefOfConvertType(in.As, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfWhen(in *When) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Cond, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Val, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfWhere(in *Where) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Expr, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfWindowDefinition(in *WindowDefinition) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitRefOfWindowSpecification(in.WindowSpec, f); err != nil {
		return err
	}
	return nil
}
func InputWindowDefinitions(in WindowDefinitions) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in {
		if err := VisitRefOfWindowDefinition(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfWindowSpecification(in *WindowSpecification) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Name, f); err != nil {
		return err
	}
	if err := VisitExprs(in.PartitionClause, f); err != nil {
		return err
	}
	if err := VisitOrderBy(in.OrderClause, f); err != nil {
		return err
	}
	if err := VisitRefOfFrameClause(in.FrameClause, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfWith(in *With) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	for _, el := range in.CTEs {
		if err := VisitRefOfCommonTableExpr(el, f); err != nil {
			return err
		}
	}
	return nil
}
func InputRefOfXorExpr(in *XorExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitExpr(in.Left, f); err != nil {
		return err
	}
	if err := VisitExpr(in.Right, f); err != nil {
		return err
	}
	return nil
}
func InputAggrFunc(in AggrFunc) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AnyValue:
		return InputRefOfAnyValue(in)
	case *Avg:
		return InputRefOfAvg(in)
	case *BitAnd:
		return InputRefOfBitAnd(in)
	case *BitOr:
		return InputRefOfBitOr(in)
	case *BitXor:
		return InputRefOfBitXor(in)
	case *Count:
		return InputRefOfCount(in)
	case *CountStar:
		return InputRefOfCountStar(in)
	case *GroupConcatExpr:
		return InputRefOfGroupConcatExpr(in)
	case *Max:
		return InputRefOfMax(in)
	case *Min:
		return InputRefOfMin(in)
	case *Std:
		return InputRefOfStd(in)
	case *StdDev:
		return InputRefOfStdDev(in)
	case *StdPop:
		return InputRefOfStdPop(in)
	case *StdSamp:
		return InputRefOfStdSamp(in)
	case *Sum:
		return InputRefOfSum(in)
	case *VarPop:
		return InputRefOfVarPop(in)
	case *VarSamp:
		return InputRefOfVarSamp(in)
	case *Variance:
		return InputRefOfVariance(in)
	default:
		// this should never happen
		return nil
	}
}
func InputAlterOption(in AlterOption) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AddColumns:
		return InputRefOfAddColumns(in)
	case *AddConstraintDefinition:
		return InputRefOfAddConstraintDefinition(in)
	case *AddIndexDefinition:
		return InputRefOfAddIndexDefinition(in)
	case AlgorithmValue:
		return InputAlgorithmValue(in)
	case *AlterCharset:
		return InputRefOfAlterCharset(in)
	case *AlterCheck:
		return InputRefOfAlterCheck(in)
	case *AlterColumn:
		return InputRefOfAlterColumn(in)
	case *AlterIndex:
		return InputRefOfAlterIndex(in)
	case *ChangeColumn:
		return InputRefOfChangeColumn(in)
	case *DropColumn:
		return InputRefOfDropColumn(in)
	case *DropKey:
		return InputRefOfDropKey(in)
	case *Force:
		return InputRefOfForce(in)
	case *KeyState:
		return InputRefOfKeyState(in)
	case *LockOption:
		return InputRefOfLockOption(in)
	case *ModifyColumn:
		return InputRefOfModifyColumn(in)
	case *OrderByOption:
		return InputRefOfOrderByOption(in)
	case *RenameColumn:
		return InputRefOfRenameColumn(in)
	case *RenameIndex:
		return InputRefOfRenameIndex(in)
	case *RenameTableName:
		return InputRefOfRenameTableName(in)
	case TableOptions:
		return InputTableOptions(in)
	case *TablespaceOperation:
		return InputRefOfTablespaceOperation(in)
	case *Validation:
		return InputRefOfValidation(in)
	default:
		// this should never happen
		return nil
	}
}
func InputCallable(in Callable) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AnyValue:
		return InputRefOfAnyValue(in)
	case *ArgumentLessWindowExpr:
		return InputRefOfArgumentLessWindowExpr(in)
	case *Avg:
		return InputRefOfAvg(in)
	case *CharExpr:
		return InputRefOfCharExpr(in)
	case *ConvertExpr:
		return InputRefOfConvertExpr(in)
	case *ConvertUsingExpr:
		return InputRefOfConvertUsingExpr(in)
	case *Count:
		return InputRefOfCount(in)
	case *CountStar:
		return InputRefOfCountStar(in)
	case *CurTimeFuncExpr:
		return InputRefOfCurTimeFuncExpr(in)
	case *ExtractFuncExpr:
		return InputRefOfExtractFuncExpr(in)
	case *ExtractValueExpr:
		return InputRefOfExtractValueExpr(in)
	case *FirstOrLastValueExpr:
		return InputRefOfFirstOrLastValueExpr(in)
	case *FuncExpr:
		return InputRefOfFuncExpr(in)
	case *GTIDFuncExpr:
		return InputRefOfGTIDFuncExpr(in)
	case *GeoHashFromLatLongExpr:
		return InputRefOfGeoHashFromLatLongExpr(in)
	case *GeoHashFromPointExpr:
		return InputRefOfGeoHashFromPointExpr(in)
	case *GeoJSONFromGeomExpr:
		return InputRefOfGeoJSONFromGeomExpr(in)
	case *GeomCollPropertyFuncExpr:
		return InputRefOfGeomCollPropertyFuncExpr(in)
	case *GeomFormatExpr:
		return InputRefOfGeomFormatExpr(in)
	case *GeomFromGeoHashExpr:
		return InputRefOfGeomFromGeoHashExpr(in)
	case *GeomFromGeoJSONExpr:
		return InputRefOfGeomFromGeoJSONExpr(in)
	case *GeomFromTextExpr:
		return InputRefOfGeomFromTextExpr(in)
	case *GeomFromWKBExpr:
		return InputRefOfGeomFromWKBExpr(in)
	case *GeomPropertyFuncExpr:
		return InputRefOfGeomPropertyFuncExpr(in)
	case *GroupConcatExpr:
		return InputRefOfGroupConcatExpr(in)
	case *InsertExpr:
		return InputRefOfInsertExpr(in)
	case *IntervalDateExpr:
		return InputRefOfIntervalDateExpr(in)
	case *IntervalFuncExpr:
		return InputRefOfIntervalFuncExpr(in)
	case *JSONArrayExpr:
		return InputRefOfJSONArrayExpr(in)
	case *JSONAttributesExpr:
		return InputRefOfJSONAttributesExpr(in)
	case *JSONContainsExpr:
		return InputRefOfJSONContainsExpr(in)
	case *JSONContainsPathExpr:
		return InputRefOfJSONContainsPathExpr(in)
	case *JSONExtractExpr:
		return InputRefOfJSONExtractExpr(in)
	case *JSONKeysExpr:
		return InputRefOfJSONKeysExpr(in)
	case *JSONObjectExpr:
		return InputRefOfJSONObjectExpr(in)
	case *JSONOverlapsExpr:
		return InputRefOfJSONOverlapsExpr(in)
	case *JSONPrettyExpr:
		return InputRefOfJSONPrettyExpr(in)
	case *JSONQuoteExpr:
		return InputRefOfJSONQuoteExpr(in)
	case *JSONRemoveExpr:
		return InputRefOfJSONRemoveExpr(in)
	case *JSONSchemaValidFuncExpr:
		return InputRefOfJSONSchemaValidFuncExpr(in)
	case *JSONSchemaValidationReportFuncExpr:
		return InputRefOfJSONSchemaValidationReportFuncExpr(in)
	case *JSONSearchExpr:
		return InputRefOfJSONSearchExpr(in)
	case *JSONStorageFreeExpr:
		return InputRefOfJSONStorageFreeExpr(in)
	case *JSONStorageSizeExpr:
		return InputRefOfJSONStorageSizeExpr(in)
	case *JSONUnquoteExpr:
		return InputRefOfJSONUnquoteExpr(in)
	case *JSONValueExpr:
		return InputRefOfJSONValueExpr(in)
	case *JSONValueMergeExpr:
		return InputRefOfJSONValueMergeExpr(in)
	case *JSONValueModifierExpr:
		return InputRefOfJSONValueModifierExpr(in)
	case *LagLeadExpr:
		return InputRefOfLagLeadExpr(in)
	case *LineStringExpr:
		return InputRefOfLineStringExpr(in)
	case *LinestrPropertyFuncExpr:
		return InputRefOfLinestrPropertyFuncExpr(in)
	case *LocateExpr:
		return InputRefOfLocateExpr(in)
	case *MatchExpr:
		return InputRefOfMatchExpr(in)
	case *Max:
		return InputRefOfMax(in)
	case *MemberOfExpr:
		return InputRefOfMemberOfExpr(in)
	case *Min:
		return InputRefOfMin(in)
	case *MultiLinestringExpr:
		return InputRefOfMultiLinestringExpr(in)
	case *MultiPointExpr:
		return InputRefOfMultiPointExpr(in)
	case *MultiPolygonExpr:
		return InputRefOfMultiPolygonExpr(in)
	case *NTHValueExpr:
		return InputRefOfNTHValueExpr(in)
	case *NamedWindow:
		return InputRefOfNamedWindow(in)
	case *NtileExpr:
		return InputRefOfNtileExpr(in)
	case *PerformanceSchemaFuncExpr:
		return InputRefOfPerformanceSchemaFuncExpr(in)
	case *PointExpr:
		return InputRefOfPointExpr(in)
	case *PointPropertyFuncExpr:
		return InputRefOfPointPropertyFuncExpr(in)
	case *PolygonExpr:
		return InputRefOfPolygonExpr(in)
	case *PolygonPropertyFuncExpr:
		return InputRefOfPolygonPropertyFuncExpr(in)
	case *RegexpInstrExpr:
		return InputRefOfRegexpInstrExpr(in)
	case *RegexpLikeExpr:
		return InputRefOfRegexpLikeExpr(in)
	case *RegexpReplaceExpr:
		return InputRefOfRegexpReplaceExpr(in)
	case *RegexpSubstrExpr:
		return InputRefOfRegexpSubstrExpr(in)
	case *SubstrExpr:
		return InputRefOfSubstrExpr(in)
	case *Sum:
		return InputRefOfSum(in)
	case *TimestampDiffExpr:
		return InputRefOfTimestampDiffExpr(in)
	case *TrimFuncExpr:
		return InputRefOfTrimFuncExpr(in)
	case *UpdateXMLExpr:
		return InputRefOfUpdateXMLExpr(in)
	case *ValuesFuncExpr:
		return InputRefOfValuesFuncExpr(in)
	case *WeightStringFuncExpr:
		return InputRefOfWeightStringFuncExpr(in)
	default:
		// this should never happen
		return nil
	}
}
func InputColTuple(in ColTuple) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case ListArg:
		return InputListArg(in)
	case *Subquery:
		return InputRefOfSubquery(in)
	case ValTuple:
		return InputValTuple(in)
	default:
		// this should never happen
		return nil
	}
}
func InputConstraintInfo(in ConstraintInfo) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *CheckConstraintDefinition:
		return InputRefOfCheckConstraintDefinition(in)
	case *ForeignKeyDefinition:
		return InputRefOfForeignKeyDefinition(in)
	default:
		// this should never happen
		return nil
	}
}
func InputDBDDLStatement(in DBDDLStatement) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return InputRefOfAlterDatabase(in)
	case *CreateDatabase:
		return InputRefOfCreateDatabase(in)
	case *DropDatabase:
		return InputRefOfDropDatabase(in)
	default:
		// this should never happen
		return nil
	}
}
func InputDDLStatement(in DDLStatement) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterTable:
		return InputRefOfAlterTable(in)
	case *AlterView:
		return InputRefOfAlterView(in)
	case *CreateTable:
		return InputRefOfCreateTable(in)
	case *CreateView:
		return InputRefOfCreateView(in)
	case *DropTable:
		return InputRefOfDropTable(in)
	case *DropView:
		return InputRefOfDropView(in)
	case *RenameTable:
		return InputRefOfRenameTable(in)
	case *TruncateTable:
		return InputRefOfTruncateTable(in)
	default:
		// this should never happen
		return nil
	}
}
func InputExplain(in Explain) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ExplainStmt:
		return InputRefOfExplainStmt(in)
	case *ExplainTab:
		return InputRefOfExplainTab(in)
	default:
		// this should never happen
		return nil
	}
}
func InputExpr(in Expr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AndExpr:
		return InputRefOfAndExpr(in)
	case *AnyValue:
		return InputRefOfAnyValue(in)
	case *Argument:
		return InputRefOfArgument(in)
	case *ArgumentLessWindowExpr:
		return InputRefOfArgumentLessWindowExpr(in)
	case *AssignmentExpr:
		return InputRefOfAssignmentExpr(in)
	case *Avg:
		return InputRefOfAvg(in)
	case *BetweenExpr:
		return InputRefOfBetweenExpr(in)
	case *BinaryExpr:
		return InputRefOfBinaryExpr(in)
	case *BitAnd:
		return InputRefOfBitAnd(in)
	case *BitOr:
		return InputRefOfBitOr(in)
	case *BitXor:
		return InputRefOfBitXor(in)
	case BoolVal:
		return InputBoolVal(in)
	case *CaseExpr:
		return InputRefOfCaseExpr(in)
	case *CastExpr:
		return InputRefOfCastExpr(in)
	case *CharExpr:
		return InputRefOfCharExpr(in)
	case *ColName:
		return InputRefOfColName(in)
	case *CollateExpr:
		return InputRefOfCollateExpr(in)
	case *ComparisonExpr:
		return InputRefOfComparisonExpr(in)
	case *ConvertExpr:
		return InputRefOfConvertExpr(in)
	case *ConvertUsingExpr:
		return InputRefOfConvertUsingExpr(in)
	case *Count:
		return InputRefOfCount(in)
	case *CountStar:
		return InputRefOfCountStar(in)
	case *CurTimeFuncExpr:
		return InputRefOfCurTimeFuncExpr(in)
	case *Default:
		return InputRefOfDefault(in)
	case *ExistsExpr:
		return InputRefOfExistsExpr(in)
	case *ExtractFuncExpr:
		return InputRefOfExtractFuncExpr(in)
	case *ExtractValueExpr:
		return InputRefOfExtractValueExpr(in)
	case *FirstOrLastValueExpr:
		return InputRefOfFirstOrLastValueExpr(in)
	case *FuncExpr:
		return InputRefOfFuncExpr(in)
	case *GTIDFuncExpr:
		return InputRefOfGTIDFuncExpr(in)
	case *GeoHashFromLatLongExpr:
		return InputRefOfGeoHashFromLatLongExpr(in)
	case *GeoHashFromPointExpr:
		return InputRefOfGeoHashFromPointExpr(in)
	case *GeoJSONFromGeomExpr:
		return InputRefOfGeoJSONFromGeomExpr(in)
	case *GeomCollPropertyFuncExpr:
		return InputRefOfGeomCollPropertyFuncExpr(in)
	case *GeomFormatExpr:
		return InputRefOfGeomFormatExpr(in)
	case *GeomFromGeoHashExpr:
		return InputRefOfGeomFromGeoHashExpr(in)
	case *GeomFromGeoJSONExpr:
		return InputRefOfGeomFromGeoJSONExpr(in)
	case *GeomFromTextExpr:
		return InputRefOfGeomFromTextExpr(in)
	case *GeomFromWKBExpr:
		return InputRefOfGeomFromWKBExpr(in)
	case *GeomPropertyFuncExpr:
		return InputRefOfGeomPropertyFuncExpr(in)
	case *GroupConcatExpr:
		return InputRefOfGroupConcatExpr(in)
	case *InsertExpr:
		return InputRefOfInsertExpr(in)
	case *IntervalDateExpr:
		return InputRefOfIntervalDateExpr(in)
	case *IntervalFuncExpr:
		return InputRefOfIntervalFuncExpr(in)
	case *IntroducerExpr:
		return InputRefOfIntroducerExpr(in)
	case *IsExpr:
		return InputRefOfIsExpr(in)
	case *JSONArrayExpr:
		return InputRefOfJSONArrayExpr(in)
	case *JSONAttributesExpr:
		return InputRefOfJSONAttributesExpr(in)
	case *JSONContainsExpr:
		return InputRefOfJSONContainsExpr(in)
	case *JSONContainsPathExpr:
		return InputRefOfJSONContainsPathExpr(in)
	case *JSONExtractExpr:
		return InputRefOfJSONExtractExpr(in)
	case *JSONKeysExpr:
		return InputRefOfJSONKeysExpr(in)
	case *JSONObjectExpr:
		return InputRefOfJSONObjectExpr(in)
	case *JSONOverlapsExpr:
		return InputRefOfJSONOverlapsExpr(in)
	case *JSONPrettyExpr:
		return InputRefOfJSONPrettyExpr(in)
	case *JSONQuoteExpr:
		return InputRefOfJSONQuoteExpr(in)
	case *JSONRemoveExpr:
		return InputRefOfJSONRemoveExpr(in)
	case *JSONSchemaValidFuncExpr:
		return InputRefOfJSONSchemaValidFuncExpr(in)
	case *JSONSchemaValidationReportFuncExpr:
		return InputRefOfJSONSchemaValidationReportFuncExpr(in)
	case *JSONSearchExpr:
		return InputRefOfJSONSearchExpr(in)
	case *JSONStorageFreeExpr:
		return InputRefOfJSONStorageFreeExpr(in)
	case *JSONStorageSizeExpr:
		return InputRefOfJSONStorageSizeExpr(in)
	case *JSONUnquoteExpr:
		return InputRefOfJSONUnquoteExpr(in)
	case *JSONValueExpr:
		return InputRefOfJSONValueExpr(in)
	case *JSONValueMergeExpr:
		return InputRefOfJSONValueMergeExpr(in)
	case *JSONValueModifierExpr:
		return InputRefOfJSONValueModifierExpr(in)
	case *LagLeadExpr:
		return InputRefOfLagLeadExpr(in)
	case *LineStringExpr:
		return InputRefOfLineStringExpr(in)
	case *LinestrPropertyFuncExpr:
		return InputRefOfLinestrPropertyFuncExpr(in)
	case ListArg:
		return InputListArg(in)
	case *Literal:
		return InputRefOfLiteral(in)
	case *LocateExpr:
		return InputRefOfLocateExpr(in)
	case *LockingFunc:
		return InputRefOfLockingFunc(in)
	case *MatchExpr:
		return InputRefOfMatchExpr(in)
	case *Max:
		return InputRefOfMax(in)
	case *MemberOfExpr:
		return InputRefOfMemberOfExpr(in)
	case *Min:
		return InputRefOfMin(in)
	case *MultiLinestringExpr:
		return InputRefOfMultiLinestringExpr(in)
	case *MultiPointExpr:
		return InputRefOfMultiPointExpr(in)
	case *MultiPolygonExpr:
		return InputRefOfMultiPolygonExpr(in)
	case *NTHValueExpr:
		return InputRefOfNTHValueExpr(in)
	case *NamedWindow:
		return InputRefOfNamedWindow(in)
	case *NotExpr:
		return InputRefOfNotExpr(in)
	case *NtileExpr:
		return InputRefOfNtileExpr(in)
	case *NullVal:
		return InputRefOfNullVal(in)
	case *Offset:
		return InputRefOfOffset(in)
	case *OrExpr:
		return InputRefOfOrExpr(in)
	case *PerformanceSchemaFuncExpr:
		return InputRefOfPerformanceSchemaFuncExpr(in)
	case *PointExpr:
		return InputRefOfPointExpr(in)
	case *PointPropertyFuncExpr:
		return InputRefOfPointPropertyFuncExpr(in)
	case *PolygonExpr:
		return InputRefOfPolygonExpr(in)
	case *PolygonPropertyFuncExpr:
		return InputRefOfPolygonPropertyFuncExpr(in)
	case *RegexpInstrExpr:
		return InputRefOfRegexpInstrExpr(in)
	case *RegexpLikeExpr:
		return InputRefOfRegexpLikeExpr(in)
	case *RegexpReplaceExpr:
		return InputRefOfRegexpReplaceExpr(in)
	case *RegexpSubstrExpr:
		return InputRefOfRegexpSubstrExpr(in)
	case *Std:
		return InputRefOfStd(in)
	case *StdDev:
		return InputRefOfStdDev(in)
	case *StdPop:
		return InputRefOfStdPop(in)
	case *StdSamp:
		return InputRefOfStdSamp(in)
	case *Subquery:
		return InputRefOfSubquery(in)
	case *SubstrExpr:
		return InputRefOfSubstrExpr(in)
	case *Sum:
		return InputRefOfSum(in)
	case *TimestampDiffExpr:
		return InputRefOfTimestampDiffExpr(in)
	case *TrimFuncExpr:
		return InputRefOfTrimFuncExpr(in)
	case *UnaryExpr:
		return InputRefOfUnaryExpr(in)
	case *UpdateXMLExpr:
		return InputRefOfUpdateXMLExpr(in)
	case ValTuple:
		return InputValTuple(in)
	case *ValuesFuncExpr:
		return InputRefOfValuesFuncExpr(in)
	case *VarPop:
		return InputRefOfVarPop(in)
	case *VarSamp:
		return InputRefOfVarSamp(in)
	case *Variable:
		return InputRefOfVariable(in)
	case *Variance:
		return InputRefOfVariance(in)
	case *WeightStringFuncExpr:
		return InputRefOfWeightStringFuncExpr(in)
	case *XorExpr:
		return InputRefOfXorExpr(in)
	default:
		// this should never happen
		return nil
	}
}
func InputInsertRows(in InsertRows) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *Select:
		return InputRefOfSelect(in)
	case *Union:
		return InputRefOfUnion(in)
	case Values:
		return InputValues(in)
	default:
		// this should never happen
		return nil
	}
}
func InputSelectExpr(in SelectExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedExpr:
		return InputRefOfAliasedExpr(in)
	case *Nextval:
		return InputRefOfNextval(in)
	case *StarExpr:
		return InputRefOfStarExpr(in)
	default:
		// this should never happen
		return nil
	}
}
func InputSelectStatement(in SelectStatement) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *Select:
		return InputRefOfSelect(in)
	case *Union:
		return InputRefOfUnion(in)
	default:
		// this should never happen
		return nil
	}
}
func InputShowInternal(in ShowInternal) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *ShowBasic:
		return InputRefOfShowBasic(in)
	case *ShowCreate:
		return InputRefOfShowCreate(in)
	case *ShowOther:
		return InputRefOfShowOther(in)
	default:
		// this should never happen
		return nil
	}
}
func InputSimpleTableExpr(in SimpleTableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *DerivedTable:
		return InputRefOfDerivedTable(in)
	case TableName:
		return InputTableName(in)
	default:
		// this should never happen
		return nil
	}
}
func InputStatement(in Statement) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AlterDatabase:
		return InputRefOfAlterDatabase(in)
	case *AlterMigration:
		return InputRefOfAlterMigration(in)
	case *AlterTable:
		return InputRefOfAlterTable(in)
	case *AlterView:
		return InputRefOfAlterView(in)
	case *AlterVschema:
		return InputRefOfAlterVschema(in)
	case *Analyze:
		return InputRefOfAnalyze(in)
	case *Begin:
		return InputRefOfBegin(in)
	case *CallProc:
		return InputRefOfCallProc(in)
	case *CommentOnly:
		return InputRefOfCommentOnly(in)
	case *Commit:
		return InputRefOfCommit(in)
	case *CreateDatabase:
		return InputRefOfCreateDatabase(in)
	case *CreateTable:
		return InputRefOfCreateTable(in)
	case *CreateView:
		return InputRefOfCreateView(in)
	case *DeallocateStmt:
		return InputRefOfDeallocateStmt(in)
	case *Delete:
		return InputRefOfDelete(in)
	case *DropDatabase:
		return InputRefOfDropDatabase(in)
	case *DropTable:
		return InputRefOfDropTable(in)
	case *DropView:
		return InputRefOfDropView(in)
	case *ExecuteStmt:
		return InputRefOfExecuteStmt(in)
	case *ExplainStmt:
		return InputRefOfExplainStmt(in)
	case *ExplainTab:
		return InputRefOfExplainTab(in)
	case *Flush:
		return InputRefOfFlush(in)
	case *Insert:
		return InputRefOfInsert(in)
	case *Kill:
		return InputRefOfKill(in)
	case *Load:
		return InputRefOfLoad(in)
	case *LockTables:
		return InputRefOfLockTables(in)
	case *OtherAdmin:
		return InputRefOfOtherAdmin(in)
	case *PrepareStmt:
		return InputRefOfPrepareStmt(in)
	case *PurgeBinaryLogs:
		return InputRefOfPurgeBinaryLogs(in)
	case *Release:
		return InputRefOfRelease(in)
	case *RenameTable:
		return InputRefOfRenameTable(in)
	case *RevertMigration:
		return InputRefOfRevertMigration(in)
	case *Rollback:
		return InputRefOfRollback(in)
	case *SRollback:
		return InputRefOfSRollback(in)
	case *Savepoint:
		return InputRefOfSavepoint(in)
	case *Select:
		return InputRefOfSelect(in)
	case *Set:
		return InputRefOfSet(in)
	case *Show:
		return InputRefOfShow(in)
	case *ShowMigrationLogs:
		return InputRefOfShowMigrationLogs(in)
	case *ShowThrottledApps:
		return InputRefOfShowThrottledApps(in)
	case *ShowThrottlerStatus:
		return InputRefOfShowThrottlerStatus(in)
	case *Stream:
		return InputRefOfStream(in)
	case *TruncateTable:
		return InputRefOfTruncateTable(in)
	case *Union:
		return InputRefOfUnion(in)
	case *UnlockTables:
		return InputRefOfUnlockTables(in)
	case *Update:
		return InputRefOfUpdate(in)
	case *Use:
		return InputRefOfUse(in)
	case *VExplainStmt:
		return InputRefOfVExplainStmt(in)
	case *VStream:
		return InputRefOfVStream(in)
	default:
		// this should never happen
		return nil
	}
}
func InputTableExpr(in TableExpr) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	switch in := in.(type) {
	case *AliasedTableExpr:
		return InputRefOfAliasedTableExpr(in)
	case *JSONTableExpr:
		return InputRefOfJSONTableExpr(in)
	case *JoinTableExpr:
		return InputRefOfJoinTableExpr(in)
	case *ParenTableExpr:
		return InputRefOfParenTableExpr(in)
	default:
		// this should never happen
		return nil
	}
}
func InputAlgorithmValue(in AlgorithmValue) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputBoolVal(in BoolVal) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputListArg(in ListArg) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputMatchAction(in MatchAction) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputReferenceAction(in ReferenceAction) (inputs []SQLNode) {
	_, err := f(in)
	return err
}
func InputColumnCharset(in ColumnCharset) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfIdentifierCI(in *IdentifierCI) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfIdentifierCS(in *IdentifierCS) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}
func InputRefOfRootNode(in *RootNode) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitSQLNode(in.SQLNode, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfTableName(in *TableName) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCS(in.Name, f); err != nil {
		return err
	}
	if err := VisitIdentifierCS(in.Qualifier, f); err != nil {
		return err
	}
	return nil
}
func InputRefOfVindexParam(in *VindexParam) (inputs []SQLNode) {
	if in == nil {
		return nil
	}
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	if err := VisitIdentifierCI(in.Key, f); err != nil {
		return err
	}
	return nil
}
func InputDatabaseOption(in DatabaseOption) (inputs []SQLNode) {
	if cont, err := f(in); err != nil || !cont {
		return err
	}
	return nil
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dataflow.proto

package dataflow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sharding_Mode int32

const (
	Sharding_None       Sharding_Mode = 0
	Sharding_ForcedNone Sharding_Mode = 1
	Sharding_Random     Sharding_Mode = 2
	Sharding_ByColumn   Sharding_Mode = 3
)

var Sharding_Mode_name = map[int32]string{
	0: "None",
	1: "ForcedNone",
	2: "Random",
	3: "ByColumn",
}

var Sharding_Mode_value = map[string]int32{
	"None":       0,
	"ForcedNone": 1,
	"Random":     2,
	"ByColumn":   3,
}

func (x Sharding_Mode) String() string {
	return proto.EnumName(Sharding_Mode_name, int32(x))
}

func (Sharding_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56ab49d353539b1b, []int{2, 0}
}

type IndexPair struct {
	Global NodeIdx      `protobuf:"varint,1,opt,name=global,proto3,casttype=NodeIdx" json:"global,omitempty"`
	Local  LocalNodeIdx `protobuf:"varint,2,opt,name=local,proto3,casttype=LocalNodeIdx" json:"local,omitempty"`
}

func (m *IndexPair) Reset()         { *m = IndexPair{} }
func (m *IndexPair) String() string { return proto.CompactTextString(m) }
func (*IndexPair) ProtoMessage()    {}
func (*IndexPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ab49d353539b1b, []int{0}
}
func (m *IndexPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexPair.Merge(m, src)
}
func (m *IndexPair) XXX_Size() int {
	return m.Size()
}
func (m *IndexPair) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexPair.DiscardUnknown(m)
}

var xxx_messageInfo_IndexPair proto.InternalMessageInfo

type DomainAddr struct {
	Domain DomainIdx `protobuf:"varint,1,opt,name=domain,proto3,casttype=DomainIdx" json:"domain,omitempty"`
	Shard  uint      `protobuf:"varint,2,opt,name=shard,proto3,casttype=uint" json:"shard,omitempty"`
}

func (m *DomainAddr) Reset()         { *m = DomainAddr{} }
func (m *DomainAddr) String() string { return proto.CompactTextString(m) }
func (*DomainAddr) ProtoMessage()    {}
func (*DomainAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ab49d353539b1b, []int{1}
}
func (m *DomainAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainAddr.Merge(m, src)
}
func (m *DomainAddr) XXX_Size() int {
	return m.Size()
}
func (m *DomainAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainAddr.DiscardUnknown(m)
}

var xxx_messageInfo_DomainAddr proto.InternalMessageInfo

type Sharding struct {
	Mode   Sharding_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=dataflow.Sharding_Mode" json:"mode,omitempty"`
	Col    int           `protobuf:"varint,2,opt,name=col,proto3,casttype=int" json:"col,omitempty"`
	Shards uint          `protobuf:"varint,3,opt,name=shards,proto3,casttype=uint" json:"shards,omitempty"`
}

func (m *Sharding) Reset()         { *m = Sharding{} }
func (m *Sharding) String() string { return proto.CompactTextString(m) }
func (*Sharding) ProtoMessage()    {}
func (*Sharding) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ab49d353539b1b, []int{2}
}
func (m *Sharding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sharding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sharding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sharding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sharding.Merge(m, src)
}
func (m *Sharding) XXX_Size() int {
	return m.Size()
}
func (m *Sharding) XXX_DiscardUnknown() {
	xxx_messageInfo_Sharding.DiscardUnknown(m)
}

var xxx_messageInfo_Sharding proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dataflow.Sharding_Mode", Sharding_Mode_name, Sharding_Mode_value)
	proto.RegisterType((*IndexPair)(nil), "dataflow.IndexPair")
	proto.RegisterType((*DomainAddr)(nil), "dataflow.DomainAddr")
	proto.RegisterType((*Sharding)(nil), "dataflow.Sharding")
}

func init() { proto.RegisterFile("dataflow.proto", fileDescriptor_56ab49d353539b1b) }

var fileDescriptor_56ab49d353539b1b = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4e, 0xa3, 0x50,
	0x14, 0xc7, 0xa1, 0x50, 0x4a, 0xcf, 0xb4, 0x0d, 0xb9, 0x99, 0x64, 0x3a, 0xb3, 0xb8, 0x34, 0x4c,
	0x34, 0x26, 0x26, 0x90, 0xe8, 0xce, 0x95, 0xa2, 0x31, 0x69, 0xa2, 0x8d, 0xa1, 0x1b, 0xe3, 0xee,
	0xb6, 0x17, 0x91, 0x04, 0x38, 0x06, 0xa8, 0xd6, 0xb7, 0xf0, 0x51, 0x7c, 0x8c, 0x2e, 0xbb, 0x74,
	0x45, 0xb4, 0x7d, 0x0b, 0x56, 0x86, 0x4b, 0x71, 0xe1, 0xee, 0xff, 0x95, 0x1f, 0x9c, 0x5c, 0x18,
	0x70, 0x96, 0xb3, 0xfb, 0x08, 0x9f, 0xed, 0xc7, 0x14, 0x73, 0x24, 0x7a, 0xe3, 0xff, 0xfd, 0x0e,
	0x30, 0x40, 0x11, 0x3a, 0x95, 0xaa, 0x7b, 0xeb, 0x16, 0xba, 0xe3, 0x84, 0xfb, 0xcb, 0x1b, 0x16,
	0xa6, 0xe4, 0x3f, 0x68, 0x41, 0x84, 0x33, 0x16, 0x0d, 0xe5, 0x91, 0x7c, 0xd0, 0x77, 0x7f, 0x95,
	0x85, 0xd9, 0x99, 0x20, 0xf7, 0xc7, 0x7c, 0xe9, 0xed, 0x2a, 0xb2, 0x0f, 0xed, 0x08, 0xe7, 0x2c,
	0x1a, 0xb6, 0xc4, 0xc6, 0x28, 0x0b, 0xb3, 0x77, 0x55, 0x05, 0xcd, 0xb0, 0xae, 0xad, 0x29, 0xc0,
	0x05, 0xc6, 0x2c, 0x4c, 0xce, 0x38, 0x4f, 0xc9, 0x1e, 0x68, 0x5c, 0x38, 0x81, 0x56, 0xdd, 0x7e,
	0x59, 0x98, 0xdd, 0xba, 0x17, 0xf0, 0xba, 0x24, 0x14, 0xda, 0xd9, 0x03, 0x4b, 0xb9, 0x80, 0xab,
	0xae, 0x5e, 0x16, 0xa6, 0xba, 0x08, 0x93, 0xdc, 0xab, 0x63, 0xeb, 0x4d, 0x06, 0x7d, 0x5a, 0xa9,
	0x30, 0x09, 0xc8, 0x21, 0xa8, 0x31, 0x72, 0x5f, 0x10, 0x07, 0x47, 0x7f, 0xec, 0xef, 0xd3, 0x9b,
	0x85, 0x7d, 0x8d, 0xdc, 0xf7, 0xc4, 0x88, 0xfc, 0x05, 0x65, 0x8e, 0xf5, 0x4f, 0x2b, 0x6e, 0xa7,
	0x2c, 0x4c, 0xa5, 0xc2, 0x56, 0x19, 0x19, 0x81, 0x26, 0xe8, 0xd9, 0x50, 0xf9, 0xf1, 0xd5, 0x5d,
	0x6e, 0x9d, 0x80, 0x5a, 0xa1, 0x88, 0x0e, 0xea, 0x04, 0x13, 0xdf, 0x90, 0xc8, 0x00, 0xe0, 0x12,
	0xd3, 0xb9, 0xcf, 0x85, 0x97, 0x09, 0x80, 0xe6, 0xb1, 0x84, 0x63, 0x6c, 0xb4, 0x48, 0x0f, 0x74,
	0xf7, 0xe5, 0x1c, 0xa3, 0x45, 0x9c, 0x18, 0x8a, 0x7b, 0xba, 0xfa, 0xa4, 0xd2, 0x6a, 0x43, 0xe5,
	0xf5, 0x86, 0xca, 0x1f, 0x1b, 0x2a, 0xbf, 0x6e, 0xa9, 0xb4, 0xde, 0x52, 0xe9, 0x7d, 0x4b, 0xa5,
	0x3b, 0xeb, 0x29, 0xcc, 0xfd, 0x2c, 0xb3, 0x43, 0x74, 0x6a, 0xe5, 0x04, 0xe8, 0xcc, 0x10, 0xb3,
	0xdc, 0x69, 0xce, 0x99, 0x69, 0xe2, 0xa9, 0x8e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xc1,
	0x37, 0x62, 0xdc, 0x01, 0x00, 0x00,
}

func (m *IndexPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Local != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Local))
		i--
		dAtA[i] = 0x10
	}
	if m.Global != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Global))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DomainAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shard != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if m.Domain != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Domain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sharding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sharding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sharding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shards != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Shards))
		i--
		dAtA[i] = 0x18
	}
	if m.Col != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Col))
		i--
		dAtA[i] = 0x10
	}
	if m.Mode != 0 {
		i = encodeVarintDataflow(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataflow(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataflow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Global != 0 {
		n += 1 + sovDataflow(uint64(m.Global))
	}
	if m.Local != 0 {
		n += 1 + sovDataflow(uint64(m.Local))
	}
	return n
}

func (m *DomainAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != 0 {
		n += 1 + sovDataflow(uint64(m.Domain))
	}
	if m.Shard != 0 {
		n += 1 + sovDataflow(uint64(m.Shard))
	}
	return n
}

func (m *Sharding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovDataflow(uint64(m.Mode))
	}
	if m.Col != 0 {
		n += 1 + sovDataflow(uint64(m.Col))
	}
	if m.Shards != 0 {
		n += 1 + sovDataflow(uint64(m.Shards))
	}
	return n
}

func sovDataflow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataflow(x uint64) (n int) {
	return sovDataflow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			m.Global = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Global |= NodeIdx(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			m.Local = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Local |= LocalNodeIdx(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			m.Domain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Domain |= DomainIdx(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sharding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sharding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sharding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= Sharding_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Col", wireType)
			}
			m.Col = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Col |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataflow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataflow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataflow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataflow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataflow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataflow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataflow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataflow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataflow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataflow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataflow = fmt.Errorf("proto: unexpected end of group")
)

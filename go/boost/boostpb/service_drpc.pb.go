// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: service.proto

package boostpb

import (
	context "context"
	errors "errors"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	drpccodec "vitess.io/vitess/go/boost/boostpb/drpccodec"
)

type drpcEncoding_File_service_proto struct{}

func (drpcEncoding_File_service_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return drpccodec.Marshal(msg)
}

func (drpcEncoding_File_service_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return drpccodec.Unmarshal(buf, msg)
}

func (drpcEncoding_File_service_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return drpccodec.JSONMarshal(msg)
}

func (drpcEncoding_File_service_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return drpccodec.JSONUnmarshal(buf, msg)
}

type DRPCWorkerServiceClient interface {
	DRPCConn() drpc.Conn

	AssignDomain(ctx context.Context, in *AssignDomainRequest) (*AssignDomainResponse, error)
	AssignStream(ctx context.Context, in *AssignStreamRequest) (*AssignStreamResponse, error)
	DomainBooted(ctx context.Context, in *DomainBootedRequest) (*DomainBootedResponse, error)
	MemoryStats(ctx context.Context, in *MemoryStatsRequest) (*MemoryStatsResponse, error)
}

type drpcWorkerServiceClient struct {
	cc drpc.Conn
}

func NewDRPCWorkerServiceClient(cc drpc.Conn) DRPCWorkerServiceClient {
	return &drpcWorkerServiceClient{cc}
}

func (c *drpcWorkerServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcWorkerServiceClient) AssignDomain(ctx context.Context, in *AssignDomainRequest) (*AssignDomainResponse, error) {
	out := new(AssignDomainResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/AssignDomain", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWorkerServiceClient) AssignStream(ctx context.Context, in *AssignStreamRequest) (*AssignStreamResponse, error) {
	out := new(AssignStreamResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/AssignStream", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWorkerServiceClient) DomainBooted(ctx context.Context, in *DomainBootedRequest) (*DomainBootedResponse, error) {
	out := new(DomainBootedResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/DomainBooted", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWorkerServiceClient) MemoryStats(ctx context.Context, in *MemoryStatsRequest) (*MemoryStatsResponse, error) {
	out := new(MemoryStatsResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/MemoryStats", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCWorkerServiceServer interface {
	AssignDomain(context.Context, *AssignDomainRequest) (*AssignDomainResponse, error)
	AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error)
	DomainBooted(context.Context, *DomainBootedRequest) (*DomainBootedResponse, error)
	MemoryStats(context.Context, *MemoryStatsRequest) (*MemoryStatsResponse, error)
}

type DRPCWorkerServiceUnimplementedServer struct{}

func (s *DRPCWorkerServiceUnimplementedServer) AssignDomain(context.Context, *AssignDomainRequest) (*AssignDomainResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWorkerServiceUnimplementedServer) AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWorkerServiceUnimplementedServer) DomainBooted(context.Context, *DomainBootedRequest) (*DomainBootedResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWorkerServiceUnimplementedServer) MemoryStats(context.Context, *MemoryStatsRequest) (*MemoryStatsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCWorkerServiceDescription struct{}

func (DRPCWorkerServiceDescription) NumMethods() int { return 4 }

func (DRPCWorkerServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/service.WorkerService/AssignDomain", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWorkerServiceServer).
					AssignDomain(
						ctx,
						in1.(*AssignDomainRequest),
					)
			}, DRPCWorkerServiceServer.AssignDomain, true
	case 1:
		return "/service.WorkerService/AssignStream", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWorkerServiceServer).
					AssignStream(
						ctx,
						in1.(*AssignStreamRequest),
					)
			}, DRPCWorkerServiceServer.AssignStream, true
	case 2:
		return "/service.WorkerService/DomainBooted", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWorkerServiceServer).
					DomainBooted(
						ctx,
						in1.(*DomainBootedRequest),
					)
			}, DRPCWorkerServiceServer.DomainBooted, true
	case 3:
		return "/service.WorkerService/MemoryStats", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWorkerServiceServer).
					MemoryStats(
						ctx,
						in1.(*MemoryStatsRequest),
					)
			}, DRPCWorkerServiceServer.MemoryStats, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterWorkerService(mux drpc.Mux, impl DRPCWorkerServiceServer) error {
	return mux.Register(impl, DRPCWorkerServiceDescription{})
}

type DRPCWorkerService_AssignDomainStream interface {
	drpc.Stream
	SendAndClose(*AssignDomainResponse) error
}

type drpcWorkerService_AssignDomainStream struct {
	drpc.Stream
}

func (x *drpcWorkerService_AssignDomainStream) SendAndClose(m *AssignDomainResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWorkerService_AssignStreamStream interface {
	drpc.Stream
	SendAndClose(*AssignStreamResponse) error
}

type drpcWorkerService_AssignStreamStream struct {
	drpc.Stream
}

func (x *drpcWorkerService_AssignStreamStream) SendAndClose(m *AssignStreamResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWorkerService_DomainBootedStream interface {
	drpc.Stream
	SendAndClose(*DomainBootedResponse) error
}

type drpcWorkerService_DomainBootedStream struct {
	drpc.Stream
}

func (x *drpcWorkerService_DomainBootedStream) SendAndClose(m *DomainBootedResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWorkerService_MemoryStatsStream interface {
	drpc.Stream
	SendAndClose(*MemoryStatsResponse) error
}

type drpcWorkerService_MemoryStatsStream struct {
	drpc.Stream
}

func (x *drpcWorkerService_MemoryStatsStream) SendAndClose(m *MemoryStatsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInnerDomainClient interface {
	DRPCConn() drpc.Conn

	ProcessAsync(ctx context.Context, in *Packet) (*PacketResponse, error)
	ProcessSync(ctx context.Context, in *SyncPacket) (*PacketResponse, error)
}

type drpcInnerDomainClient struct {
	cc drpc.Conn
}

func NewDRPCInnerDomainClient(cc drpc.Conn) DRPCInnerDomainClient {
	return &drpcInnerDomainClient{cc}
}

func (c *drpcInnerDomainClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInnerDomainClient) ProcessAsync(ctx context.Context, in *Packet) (*PacketResponse, error) {
	out := new(PacketResponse)
	err := c.cc.Invoke(ctx, "/service.InnerDomain/ProcessAsync", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInnerDomainClient) ProcessSync(ctx context.Context, in *SyncPacket) (*PacketResponse, error) {
	out := new(PacketResponse)
	err := c.cc.Invoke(ctx, "/service.InnerDomain/ProcessSync", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCInnerDomainServer interface {
	ProcessAsync(context.Context, *Packet) (*PacketResponse, error)
	ProcessSync(context.Context, *SyncPacket) (*PacketResponse, error)
}

type DRPCInnerDomainUnimplementedServer struct{}

func (s *DRPCInnerDomainUnimplementedServer) ProcessAsync(context.Context, *Packet) (*PacketResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInnerDomainUnimplementedServer) ProcessSync(context.Context, *SyncPacket) (*PacketResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInnerDomainDescription struct{}

func (DRPCInnerDomainDescription) NumMethods() int { return 2 }

func (DRPCInnerDomainDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/service.InnerDomain/ProcessAsync", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInnerDomainServer).
					ProcessAsync(
						ctx,
						in1.(*Packet),
					)
			}, DRPCInnerDomainServer.ProcessAsync, true
	case 1:
		return "/service.InnerDomain/ProcessSync", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInnerDomainServer).
					ProcessSync(
						ctx,
						in1.(*SyncPacket),
					)
			}, DRPCInnerDomainServer.ProcessSync, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInnerDomain(mux drpc.Mux, impl DRPCInnerDomainServer) error {
	return mux.Register(impl, DRPCInnerDomainDescription{})
}

type DRPCInnerDomain_ProcessAsyncStream interface {
	drpc.Stream
	SendAndClose(*PacketResponse) error
}

type drpcInnerDomain_ProcessAsyncStream struct {
	drpc.Stream
}

func (x *drpcInnerDomain_ProcessAsyncStream) SendAndClose(m *PacketResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInnerDomain_ProcessSyncStream interface {
	drpc.Stream
	SendAndClose(*PacketResponse) error
}

type drpcInnerDomain_ProcessSyncStream struct {
	drpc.Stream
}

func (x *drpcInnerDomain_ProcessSyncStream) SendAndClose(m *PacketResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCReaderClient interface {
	DRPCConn() drpc.Conn

	ViewRead(ctx context.Context, in *ViewReadRequest) (*ViewReadResponse, error)
	ViewReadMany(ctx context.Context, in *ViewReadManyRequest) (*ViewReadResponse, error)
	ViewSize(ctx context.Context, in *ViewSizeRequest) (*ViewSizeResponse, error)
}

type drpcReaderClient struct {
	cc drpc.Conn
}

func NewDRPCReaderClient(cc drpc.Conn) DRPCReaderClient {
	return &drpcReaderClient{cc}
}

func (c *drpcReaderClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcReaderClient) ViewRead(ctx context.Context, in *ViewReadRequest) (*ViewReadResponse, error) {
	out := new(ViewReadResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewRead", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcReaderClient) ViewReadMany(ctx context.Context, in *ViewReadManyRequest) (*ViewReadResponse, error) {
	out := new(ViewReadResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewReadMany", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcReaderClient) ViewSize(ctx context.Context, in *ViewSizeRequest) (*ViewSizeResponse, error) {
	out := new(ViewSizeResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewSize", drpcEncoding_File_service_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCReaderServer interface {
	ViewRead(context.Context, *ViewReadRequest) (*ViewReadResponse, error)
	ViewReadMany(context.Context, *ViewReadManyRequest) (*ViewReadResponse, error)
	ViewSize(context.Context, *ViewSizeRequest) (*ViewSizeResponse, error)
}

type DRPCReaderUnimplementedServer struct{}

func (s *DRPCReaderUnimplementedServer) ViewRead(context.Context, *ViewReadRequest) (*ViewReadResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCReaderUnimplementedServer) ViewReadMany(context.Context, *ViewReadManyRequest) (*ViewReadResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCReaderUnimplementedServer) ViewSize(context.Context, *ViewSizeRequest) (*ViewSizeResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCReaderDescription struct{}

func (DRPCReaderDescription) NumMethods() int { return 3 }

func (DRPCReaderDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/service.Reader/ViewRead", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCReaderServer).
					ViewRead(
						ctx,
						in1.(*ViewReadRequest),
					)
			}, DRPCReaderServer.ViewRead, true
	case 1:
		return "/service.Reader/ViewReadMany", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCReaderServer).
					ViewReadMany(
						ctx,
						in1.(*ViewReadManyRequest),
					)
			}, DRPCReaderServer.ViewReadMany, true
	case 2:
		return "/service.Reader/ViewSize", drpcEncoding_File_service_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCReaderServer).
					ViewSize(
						ctx,
						in1.(*ViewSizeRequest),
					)
			}, DRPCReaderServer.ViewSize, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterReader(mux drpc.Mux, impl DRPCReaderServer) error {
	return mux.Register(impl, DRPCReaderDescription{})
}

type DRPCReader_ViewReadStream interface {
	drpc.Stream
	SendAndClose(*ViewReadResponse) error
}

type drpcReader_ViewReadStream struct {
	drpc.Stream
}

func (x *drpcReader_ViewReadStream) SendAndClose(m *ViewReadResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCReader_ViewReadManyStream interface {
	drpc.Stream
	SendAndClose(*ViewReadResponse) error
}

type drpcReader_ViewReadManyStream struct {
	drpc.Stream
}

func (x *drpcReader_ViewReadManyStream) SendAndClose(m *ViewReadResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCReader_ViewSizeStream interface {
	drpc.Stream
	SendAndClose(*ViewSizeResponse) error
}

type drpcReader_ViewSizeStream struct {
	drpc.Stream
}

func (x *drpcReader_ViewSizeStream) SendAndClose(m *ViewSizeResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_service_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

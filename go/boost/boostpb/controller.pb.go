// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

package boostpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrontierStrategyType int32

const (
	FrontierStrategyType_NONE        FrontierStrategyType = 0
	FrontierStrategyType_ALL_PARTIAL FrontierStrategyType = 1
	FrontierStrategyType_READERS     FrontierStrategyType = 2
	FrontierStrategyType_MATCH       FrontierStrategyType = 3
)

var FrontierStrategyType_name = map[int32]string{
	0: "NONE",
	1: "ALL_PARTIAL",
	2: "READERS",
	3: "MATCH",
}

var FrontierStrategyType_value = map[string]int32{
	"NONE":        0,
	"ALL_PARTIAL": 1,
	"READERS":     2,
	"MATCH":       3,
}

func (x FrontierStrategyType) String() string {
	return proto.EnumName(FrontierStrategyType_name, int32(x))
}

func (FrontierStrategyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

type ReuseType int32

const (
	ReuseType_FINKELSTEIN ReuseType = 0
	ReuseType_RELAXED     ReuseType = 1
	ReuseType_FULL        ReuseType = 2
	ReuseType_NO_REUSE    ReuseType = 3
)

var ReuseType_name = map[int32]string{
	0: "FINKELSTEIN",
	1: "RELAXED",
	2: "FULL",
	3: "NO_REUSE",
}

var ReuseType_value = map[string]int32{
	"FINKELSTEIN": 0,
	"RELAXED":     1,
	"FULL":        2,
	"NO_REUSE":    3,
}

func (x ReuseType) String() string {
	return proto.EnumName(ReuseType_name, int32(x))
}

func (ReuseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}

type UpqueryMode int32

const (
	UpqueryMode_SELECT_GTID UpqueryMode = 0
	UpqueryMode_TRACK_GTID  UpqueryMode = 1
)

var UpqueryMode_name = map[int32]string{
	0: "SELECT_GTID",
	1: "TRACK_GTID",
}

var UpqueryMode_value = map[string]int32{
	"SELECT_GTID": 0,
	"TRACK_GTID":  1,
}

func (x UpqueryMode) String() string {
	return proto.EnumName(UpqueryMode_name, int32(x))
}

func (UpqueryMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}

type FrontierStrategy struct {
	Type  FrontierStrategyType `protobuf:"varint,1,opt,name=type,proto3,enum=controller.FrontierStrategyType" json:"type,omitempty"`
	Match string               `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
}

func (m *FrontierStrategy) Reset()         { *m = FrontierStrategy{} }
func (m *FrontierStrategy) String() string { return proto.CompactTextString(m) }
func (*FrontierStrategy) ProtoMessage()    {}
func (*FrontierStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}
func (m *FrontierStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontierStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontierStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontierStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontierStrategy.Merge(m, src)
}
func (m *FrontierStrategy) XXX_Size() int {
	return m.Size()
}
func (m *FrontierStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontierStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_FrontierStrategy proto.InternalMessageInfo

type DomainConfig struct {
	ConcurrentReplays  int           `protobuf:"varint,1,opt,name=concurrent_replays,json=concurrentReplays,proto3,casttype=int" json:"concurrent_replays,omitempty"`
	ReplayBatchTimeout time.Duration `protobuf:"bytes,2,opt,name=replay_batch_timeout,json=replayBatchTimeout,proto3,stdduration" json:"replay_batch_timeout"`
	UpqueryMode        UpqueryMode   `protobuf:"varint,3,opt,name=upquery_mode,json=upqueryMode,proto3,enum=controller.UpqueryMode" json:"upquery_mode,omitempty"`
}

func (m *DomainConfig) Reset()         { *m = DomainConfig{} }
func (m *DomainConfig) String() string { return proto.CompactTextString(m) }
func (*DomainConfig) ProtoMessage()    {}
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}
func (m *DomainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DomainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DomainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DomainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainConfig.Merge(m, src)
}
func (m *DomainConfig) XXX_Size() int {
	return m.Size()
}
func (m *DomainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DomainConfig proto.InternalMessageInfo

type Config struct {
	Shards           uint              `protobuf:"varint,1,opt,name=shards,proto3,casttype=uint" json:"shards,omitempty"`
	PartialEnabled   bool              `protobuf:"varint,2,opt,name=partial_enabled,json=partialEnabled,proto3" json:"partial_enabled,omitempty"`
	FrontierStrategy *FrontierStrategy `protobuf:"bytes,3,opt,name=frontier_strategy,json=frontierStrategy,proto3" json:"frontier_strategy,omitempty"`
	DomainConfig     *DomainConfig     `protobuf:"bytes,4,opt,name=domain_config,json=domainConfig,proto3" json:"domain_config,omitempty"`
	// persistence = 5;
	HeartbeatEvery   time.Duration `protobuf:"bytes,6,opt,name=heartbeat_every,json=heartbeatEvery,proto3,stdduration" json:"heartbeat_every"`
	HealthcheckEvery time.Duration `protobuf:"bytes,7,opt,name=healthcheck_every,json=healthcheckEvery,proto3,stdduration" json:"healthcheck_every"`
	Quorum           uint          `protobuf:"varint,8,opt,name=quorum,proto3,casttype=uint" json:"quorum,omitempty"`
	Reuse            ReuseType     `protobuf:"varint,9,opt,name=reuse,proto3,enum=controller.ReuseType" json:"reuse,omitempty"`
	EvictEvery       time.Duration `protobuf:"bytes,10,opt,name=evict_every,json=evictEvery,proto3,stdduration" json:"evict_every"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("controller.FrontierStrategyType", FrontierStrategyType_name, FrontierStrategyType_value)
	proto.RegisterEnum("controller.ReuseType", ReuseType_name, ReuseType_value)
	proto.RegisterEnum("controller.UpqueryMode", UpqueryMode_name, UpqueryMode_value)
	proto.RegisterType((*FrontierStrategy)(nil), "controller.FrontierStrategy")
	proto.RegisterType((*DomainConfig)(nil), "controller.DomainConfig")
	proto.RegisterType((*Config)(nil), "controller.Config")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6b, 0xdb, 0x4a,
	0x10, 0x96, 0x62, 0xc7, 0xb1, 0xc7, 0x7e, 0x8e, 0xb2, 0xf8, 0xf1, 0xf4, 0xc2, 0x43, 0xf6, 0xcb,
	0xa5, 0x21, 0x05, 0x1b, 0xd2, 0xd2, 0x43, 0xa1, 0x14, 0xd9, 0x56, 0x5a, 0x13, 0xc5, 0x09, 0x6b,
	0x19, 0x4a, 0x0f, 0x15, 0xb2, 0xbc, 0xb6, 0x45, 0x6d, 0xad, 0xb3, 0x5a, 0x05, 0xfc, 0x2f, 0x4a,
	0x4f, 0xfd, 0x49, 0x39, 0xe6, 0xd8, 0x5e, 0xd2, 0x36, 0xf9, 0x17, 0x39, 0x15, 0xed, 0x2a, 0x89,
	0x08, 0xa5, 0xe4, 0x22, 0x76, 0x66, 0xbf, 0xef, 0x9b, 0xf9, 0x66, 0x56, 0xa0, 0xf9, 0x34, 0xe4,
	0x8c, 0xce, 0xe7, 0x84, 0x35, 0x97, 0x8c, 0x72, 0x8a, 0xe0, 0x3e, 0xb3, 0x5d, 0x9b, 0xd2, 0x29,
	0x15, 0xe9, 0x56, 0x72, 0x92, 0x88, 0x6d, 0x63, 0x4a, 0xe9, 0x74, 0x4e, 0x5a, 0x22, 0x1a, 0xc5,
	0x93, 0xd6, 0x38, 0x66, 0x1e, 0x0f, 0x68, 0x28, 0xef, 0x77, 0x3e, 0x80, 0x76, 0xc0, 0x68, 0xc8,
	0x03, 0xc2, 0x06, 0x9c, 0x79, 0x9c, 0x4c, 0x57, 0xe8, 0x39, 0xe4, 0xf9, 0x6a, 0x49, 0x74, 0xb5,
	0xa1, 0xee, 0x56, 0xf7, 0x1b, 0xcd, 0x4c, 0xd9, 0x87, 0x58, 0x67, 0xb5, 0x24, 0x58, 0xa0, 0x51,
	0x0d, 0xd6, 0x17, 0x1e, 0xf7, 0x67, 0xfa, 0x5a, 0x43, 0xdd, 0x2d, 0x61, 0x19, 0xec, 0x7c, 0x53,
	0xa1, 0xd2, 0xa5, 0x0b, 0x2f, 0x08, 0x3b, 0x34, 0x9c, 0x04, 0x53, 0xf4, 0x02, 0x90, 0x4f, 0x43,
	0x3f, 0x66, 0x8c, 0x84, 0xdc, 0x65, 0x64, 0x39, 0xf7, 0x56, 0x91, 0x28, 0x95, 0x6b, 0x6f, 0xdc,
	0x5c, 0xd6, 0x73, 0x41, 0xc8, 0xf1, 0xd6, 0x3d, 0x04, 0x4b, 0x04, 0x1a, 0x42, 0x4d, 0x82, 0xdd,
	0x51, 0x22, 0xec, 0xf2, 0x60, 0x41, 0x68, 0xcc, 0x45, 0xb5, 0xf2, 0xfe, 0xbf, 0x4d, 0xe9, 0xb3,
	0x79, 0xeb, 0xb3, 0xd9, 0x4d, 0x7d, 0xb6, 0x8b, 0xe7, 0x97, 0x75, 0xe5, 0xcb, 0xf7, 0xba, 0x8a,
	0x91, 0x14, 0x68, 0x27, 0x7c, 0x47, 0xd2, 0xd1, 0x4b, 0xa8, 0xc4, 0xcb, 0xd3, 0x98, 0xb0, 0x95,
	0xbb, 0xa0, 0x63, 0xa2, 0xe7, 0x84, 0xe7, 0x7f, 0xb2, 0x9e, 0x87, 0xf2, 0xfe, 0x88, 0x8e, 0x09,
	0x2e, 0xc7, 0xf7, 0xc1, 0xce, 0xe7, 0x3c, 0x14, 0x52, 0x57, 0x0d, 0x28, 0x44, 0x33, 0x8f, 0x8d,
	0xa5, 0x93, 0x7c, 0xbb, 0x78, 0x73, 0x59, 0xcf, 0xc7, 0x89, 0x95, 0x34, 0x8f, 0x9e, 0xc0, 0xe6,
	0xd2, 0x63, 0x3c, 0xf0, 0xe6, 0x2e, 0x09, 0xbd, 0xd1, 0x9c, 0x8c, 0x45, 0xeb, 0x45, 0x5c, 0x4d,
	0xd3, 0x96, 0xcc, 0xa2, 0x1e, 0x6c, 0x4d, 0xd2, 0x29, 0xbb, 0x51, 0x3a, 0x66, 0xd1, 0x56, 0x79,
	0xff, 0xbf, 0x3f, 0xad, 0x02, 0x6b, 0x93, 0x87, 0x8b, 0x7c, 0x05, 0x7f, 0x8d, 0xc5, 0xec, 0x5d,
	0x5f, 0xb4, 0xa9, 0xe7, 0x85, 0x8c, 0x9e, 0x95, 0xc9, 0x2e, 0x07, 0x57, 0xc6, 0xd9, 0x55, 0xd9,
	0xb0, 0x39, 0x23, 0x1e, 0xe3, 0x23, 0xe2, 0x71, 0x97, 0x9c, 0x11, 0xb6, 0xd2, 0x0b, 0x8f, 0x9f,
	0x76, 0xf5, 0x8e, 0x6b, 0x25, 0x54, 0x74, 0x02, 0x5b, 0x33, 0xe2, 0xcd, 0xf9, 0xcc, 0x9f, 0x11,
	0xff, 0x63, 0xaa, 0xb7, 0xf1, 0x78, 0x3d, 0x2d, 0xc3, 0x96, 0x8a, 0x0d, 0x28, 0x9c, 0xc6, 0x94,
	0xc5, 0x0b, 0xbd, 0xf8, 0x70, 0xe8, 0x32, 0x8f, 0x9e, 0xc2, 0x3a, 0x23, 0x71, 0x44, 0xf4, 0x92,
	0x58, 0xeb, 0xdf, 0x59, 0xe3, 0x38, 0xb9, 0x10, 0xef, 0x57, 0x62, 0x50, 0x17, 0xca, 0xe4, 0x2c,
	0xf0, 0x6f, 0xad, 0xc2, 0xe3, 0x5b, 0x03, 0xc1, 0x13, 0x4d, 0xed, 0xf5, 0xa0, 0xf6, 0xbb, 0x9f,
	0x04, 0x15, 0x21, 0xdf, 0x3f, 0xee, 0x5b, 0x9a, 0x82, 0x36, 0xa1, 0x6c, 0xda, 0xb6, 0x7b, 0x62,
	0x62, 0xa7, 0x67, 0xda, 0x9a, 0x8a, 0xca, 0xb0, 0x81, 0x2d, 0xb3, 0x6b, 0xe1, 0x81, 0xb6, 0x86,
	0x4a, 0xb0, 0x7e, 0x64, 0x3a, 0x9d, 0xb7, 0x5a, 0x6e, 0xcf, 0x84, 0xd2, 0x5d, 0x93, 0x09, 0xeb,
	0xa0, 0xd7, 0x3f, 0xb4, 0xec, 0x81, 0x63, 0xf5, 0xfa, 0x9a, 0x22, 0x59, 0xb6, 0xf9, 0xce, 0xea,
	0x6a, 0x6a, 0xa2, 0x7e, 0x30, 0xb4, 0x6d, 0x6d, 0x0d, 0x55, 0xa0, 0xd8, 0x3f, 0x76, 0xb1, 0x35,
	0x1c, 0x58, 0x5a, 0x6e, 0xaf, 0x09, 0xe5, 0xcc, 0xf3, 0x4d, 0x44, 0x06, 0x96, 0x6d, 0x75, 0x1c,
	0xf7, 0x8d, 0xd3, 0xeb, 0x6a, 0x0a, 0xaa, 0x02, 0x38, 0xd8, 0xec, 0x1c, 0xca, 0x58, 0x6d, 0xbf,
	0x3e, 0xff, 0x69, 0x28, 0xe7, 0x57, 0x86, 0x7a, 0x71, 0x65, 0xa8, 0x3f, 0xae, 0x0c, 0xf5, 0xd3,
	0xb5, 0xa1, 0x5c, 0x5c, 0x1b, 0xca, 0xd7, 0x6b, 0x43, 0x79, 0xff, 0xff, 0x59, 0xc0, 0x49, 0x14,
	0x35, 0x03, 0xda, 0x92, 0xa7, 0xd6, 0x94, 0xb6, 0x46, 0x94, 0x46, 0x5c, 0x7e, 0x97, 0xa3, 0x51,
	0x41, 0xcc, 0xe9, 0xd9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0xcf, 0x86, 0x20, 0xac, 0x04,
	0x00, 0x00,
}

func (m *FrontierStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontierStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontierStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Match) > 0 {
		i -= len(m.Match)
		copy(dAtA[i:], m.Match)
		i = encodeVarintController(dAtA, i, uint64(len(m.Match)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DomainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DomainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DomainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpqueryMode != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.UpqueryMode))
		i--
		dAtA[i] = 0x18
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ReplayBatchTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplayBatchTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintController(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.ConcurrentReplays != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.ConcurrentReplays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EvictEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EvictEvery):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintController(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	if m.Reuse != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Reuse))
		i--
		dAtA[i] = 0x48
	}
	if m.Quorum != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x40
	}
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.HealthcheckEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.HealthcheckEvery):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintController(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.HeartbeatEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.HeartbeatEvery):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintController(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if m.DomainConfig != nil {
		{
			size, err := m.DomainConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FrontierStrategy != nil {
		{
			size, err := m.FrontierStrategy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PartialEnabled {
		i--
		if m.PartialEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Shards != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Shards))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrontierStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovController(uint64(m.Type))
	}
	l = len(m.Match)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *DomainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConcurrentReplays != 0 {
		n += 1 + sovController(uint64(m.ConcurrentReplays))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplayBatchTimeout)
	n += 1 + l + sovController(uint64(l))
	if m.UpqueryMode != 0 {
		n += 1 + sovController(uint64(m.UpqueryMode))
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shards != 0 {
		n += 1 + sovController(uint64(m.Shards))
	}
	if m.PartialEnabled {
		n += 2
	}
	if m.FrontierStrategy != nil {
		l = m.FrontierStrategy.Size()
		n += 1 + l + sovController(uint64(l))
	}
	if m.DomainConfig != nil {
		l = m.DomainConfig.Size()
		n += 1 + l + sovController(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.HeartbeatEvery)
	n += 1 + l + sovController(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.HealthcheckEvery)
	n += 1 + l + sovController(uint64(l))
	if m.Quorum != 0 {
		n += 1 + sovController(uint64(m.Quorum))
	}
	if m.Reuse != 0 {
		n += 1 + sovController(uint64(m.Reuse))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EvictEvery)
	n += 1 + l + sovController(uint64(l))
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FrontierStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontierStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontierStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FrontierStrategyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DomainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DomainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DomainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcurrentReplays", wireType)
			}
			m.ConcurrentReplays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConcurrentReplays |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayBatchTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ReplayBatchTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpqueryMode", wireType)
			}
			m.UpqueryMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpqueryMode |= UpqueryMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialEnabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontierStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrontierStrategy == nil {
				m.FrontierStrategy = &FrontierStrategy{}
			}
			if err := m.FrontierStrategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainConfig == nil {
				m.DomainConfig = &DomainConfig{}
			}
			if err := m.DomainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.HeartbeatEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthcheckEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.HealthcheckEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reuse", wireType)
			}
			m.Reuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reuse |= ReuseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EvictEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupController
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthController
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthController        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupController = fmt.Errorf("proto: unexpected end of group")
)

package memory

// class  bytes/obj  tail waste  max waste  min align
//     1          8           0     87.50%          8
//     2         16           0     43.75%         16
//     3         24           8     29.24%          8
//     4         32           0     21.88%         32
//     5         48          32     31.52%         16
//     6         64           0     23.44%         64
//     7         80          32     19.07%         16
//     8         96          32     15.95%         32
//     9        112          16     13.56%         16
//    10        128           0     11.72%        128
//    11        144         128     11.82%         16
//    12        160          32      9.73%         32
//    13        176          96      9.59%         16
//    14        192         128      9.25%         64
//    15        208          80      8.12%         16
//    16        224         128      8.15%         32
//    17        240          32      6.62%         16
//    18        256           0      5.86%        256
//    19        288         128     12.16%         32
//    20        320         192     11.80%         64
//    21        352          96      9.88%         32
//    22        384         128      9.51%        128
//    23        416         288     10.71%         32
//    24        448         128      8.37%         64
//    25        480          32      6.82%         32
//    26        512           0      6.05%        512
//    27        576         128     12.33%         64
//    28        640         512     15.48%        128
//    29        704         448     13.93%         64
//    30        768         512     13.94%        256
//    31        896         128     15.52%        128
//    32       1024           0     12.40%       1024
//    33       1152         128     12.41%        128
//    34       1280         512     15.55%        256
//    35       1408         896     14.00%        128
//    36       1536         512     14.00%        512
//    37       1792         256     15.57%        256
//    38       2048           0     12.45%       2048
//    39       2304         256     12.46%        256
//    40       2688         128     15.59%        128
//    41       3072           0     12.47%       1024
//    42       3200         384      6.22%        128
//    43       3456         384      8.83%        128
//    44       4096           0     15.60%       4096
//    45       4864         256     16.65%        256
//    46       5376         256     10.92%        256
//    47       6144           0     12.48%       2048
//    48       6528         128      6.23%        128
//    49       6784         256      4.36%        128
//    50       6912         768      3.37%        256
//    51       8192           0     15.61%       8192
//    52       9472         512     14.28%        256
//    53       9728         512      3.64%        512
//    54      10240           0      4.99%       2048
//    55      10880         128      6.24%        128
//    56      12288           0     11.45%       4096
//    57      13568         256      9.99%        256
//    58      14336           0      5.35%       2048
//    59      16384           0     12.49%       8192
//    60      18432           0     11.11%       2048
//    61      19072         128      3.57%        128
//    62      20480           0      6.87%       4096
//    63      21760         256      6.25%        256
//    64      24576           0     11.45%       8192
//    65      27264         128     10.00%        128
//    66      28672           0      4.91%       4096
//    67      32768           0     12.50%       8192
//    68      36864           0     11.11%       4096
//    69      40960           0     10.00%       8192
//    70      45056           0      9.09%       4096
//    71      49152           0      8.33%       8192
//    72      53248           0      7.69%       4096
//    73      57344           0      7.14%       8192
//    74      65536           0     12.50%       8192
//    75      73728           0     11.11%       8192
//    76      81920           0     10.00%       8192
//    77      90112           0      9.09%       8192
//    78      98304           0      8.33%       8192
//    79     106496           0      7.69%       8192
//    80     114688           0      7.14%       8192
//    81     122880           0      6.67%       8192
//    82     131072           0      6.25%       8192

func classSize(class uint8) int {
	return classToSize[class]
}

func sizeClass(size int) uint8 {
	size = (size + int(mallocAllign) - 1) & ^int(mallocAllign-1)
	var sc uint8
	if size <= smallSizeMax-8 {
		sc = sizeToClass8[divRoundUp(size, smallSizeDiv)]
	} else {
		sc = sizeToClass128[divRoundUp(size-smallSizeMax, largeSizeDiv)]
	}
	return sc
}

const (
	maxSmallSize = 128 << 10
	smallSizeDiv = 8
	smallSizeMax = 1024
	largeSizeDiv = 128
)

var classToSize = [...]int{0, 8, 16, 24, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 352, 384, 416, 448, 480, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1792, 2048, 2304, 2688, 3072, 3200, 3456, 4096, 4864, 5376, 6144, 6528, 6784, 6912, 8192, 9472, 9728, 10240, 10880, 12288, 13568, 14336, 16384, 18432, 19072, 20480, 21760, 24576, 27264, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, 122880, 131072}
var sizeToClass8 = [...]uint8{0, 1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}
var sizeToClass128 = [...]uint8{32, 33, 34, 35, 36, 37, 37, 38, 38, 39, 39, 40, 40, 40, 41, 41, 41, 42, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 49, 49, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82}

// divRoundUp returns ceil(n / a).
func divRoundUp(n, a int) int {
	// a is generally a power of two. This will get inlined and
	// the compiler will optimize the division.
	return (n + a - 1) / a
}

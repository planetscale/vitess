package common

import (
	"encoding/binary"
	"unsafe"

	"vitess.io/vitess/go/hack"
)

type ColumnSet string

func NewColumnSet(cols []int) ColumnSet {
	var buf []byte
	for _, col := range cols {
		buf = appendUvarint(buf, uint64(col))
	}
	return *(*ColumnSet)(unsafe.Pointer(&buf))
}

func (c ColumnSet) ToSlice() (out []int) {
	buf := hack.StringBytes(string(c))
	for {
		val, n := binary.Uvarint(buf)
		if n == 0 {
			return
		}
		if n < 0 {
			panic("invalid varint")
		}
		out = append(out, int(val))
		buf = buf[n:]
	}
}

// appendUvarint appends the varint-encoded form of x,
// as generated by PutUvarint, to buf and returns the extended buffer.
// TODO: We can move to the upstream 1.19 version of this once we upgrade to go 1.19.
func appendUvarint(buf []byte, x uint64) []byte {
	for x >= 0x80 {
		buf = append(buf, byte(x)|0x80)
		x >>= 7
	}
	return append(buf, byte(x))
}

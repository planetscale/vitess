package common

import (
	"encoding/binary"
	"unsafe"

	"vitess.io/vitess/go/hack"
)

type Columns string

func ColumnsFrom(cols []int) Columns {
	var buf []byte
	for _, col := range cols {
		buf = appendUvarint(buf, uint64(col))
	}
	return *(*Columns)(unsafe.Pointer(&buf))
}

func (c Columns) ForEach(yield func(int)) {
	buf := hack.StringBytes(string(c))
	for {
		val, n := binary.Uvarint(buf)
		if n <= 0 {
			if n < 0 {
				panic("invalid encoding for Columns")
			}
			return
		}
		yield(int(val))
		buf = buf[n:]
	}
}

func (c Columns) Contains(target int) bool {
	buf := hack.StringBytes(string(c))
	for {
		val, n := binary.Uvarint(buf)
		if n <= 0 {
			return false
		}
		if int(val) == target {
			return true
		}
		buf = buf[n:]
	}
}

func (c Columns) ToSlice() (out []int) {
	c.ForEach(func(i int) {
		out = append(out, i)
	})
	return
}

// appendUvarint appends the varint-encoded form of x,
// as generated by PutUvarint, to buf and returns the extended buffer.
// TODO: We can move to the upstream 1.19 version of this once we upgrade to go 1.19.
func appendUvarint(buf []byte, x uint64) []byte {
	for x >= 0x80 {
		buf = append(buf, byte(x)|0x80)
		x >>= 7
	}
	return append(buf, byte(x))
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config.proto

package config

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReuseType int32

const (
	ReuseType_FINKELSTEIN ReuseType = 0
	ReuseType_RELAXED     ReuseType = 1
	ReuseType_FULL        ReuseType = 2
	ReuseType_NO_REUSE    ReuseType = 3
)

var ReuseType_name = map[int32]string{
	0: "FINKELSTEIN",
	1: "RELAXED",
	2: "FULL",
	3: "NO_REUSE",
}

var ReuseType_value = map[string]int32{
	"FINKELSTEIN": 0,
	"RELAXED":     1,
	"FULL":        2,
	"NO_REUSE":    3,
}

func (x ReuseType) String() string {
	return proto.EnumName(ReuseType_name, int32(x))
}

func (ReuseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

type UpqueryMode int32

const (
	UpqueryMode_SELECT_GTID UpqueryMode = 0
	UpqueryMode_TRACK_GTID  UpqueryMode = 1
)

var UpqueryMode_name = map[int32]string{
	0: "SELECT_GTID",
	1: "TRACK_GTID",
}

var UpqueryMode_value = map[string]int32{
	"SELECT_GTID": 0,
	"TRACK_GTID":  1,
}

func (x UpqueryMode) String() string {
	return proto.EnumName(UpqueryMode_name, int32(x))
}

func (UpqueryMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

type UpqueryGenerationMode int32

const (
	UpqueryGenerationMode_NO_MIDFLOW_UPQUERIES        UpqueryGenerationMode = 0
	UpqueryGenerationMode_FULL_MIDFLOW_UPQUERIES      UpqueryGenerationMode = 1
	UpqueryGenerationMode_NO_READER_MIDFLOW_UPQUERIES UpqueryGenerationMode = 2
)

var UpqueryGenerationMode_name = map[int32]string{
	0: "NO_MIDFLOW_UPQUERIES",
	1: "FULL_MIDFLOW_UPQUERIES",
	2: "NO_READER_MIDFLOW_UPQUERIES",
}

var UpqueryGenerationMode_value = map[string]int32{
	"NO_MIDFLOW_UPQUERIES":        0,
	"FULL_MIDFLOW_UPQUERIES":      1,
	"NO_READER_MIDFLOW_UPQUERIES": 2,
}

func (x UpqueryGenerationMode) String() string {
	return proto.EnumName(UpqueryGenerationMode_name, int32(x))
}

func (UpqueryGenerationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

type Domain struct {
	ConcurrentReplays  int           `protobuf:"varint,1,opt,name=concurrent_replays,json=concurrentReplays,proto3,casttype=int" json:"concurrent_replays,omitempty"`
	ReplayBatchTimeout time.Duration `protobuf:"bytes,2,opt,name=replay_batch_timeout,json=replayBatchTimeout,proto3,stdduration" json:"replay_batch_timeout"`
	UpqueryMode        UpqueryMode   `protobuf:"varint,3,opt,name=upquery_mode,json=upqueryMode,proto3,enum=config.UpqueryMode" json:"upquery_mode,omitempty"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

type Config struct {
	Shards              uint             `protobuf:"varint,1,opt,name=shards,proto3,casttype=uint" json:"shards,omitempty"`
	Materialization     *Materialization `protobuf:"bytes,2,opt,name=materialization,proto3" json:"materialization,omitempty"`
	Domain              *Domain          `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	HeartbeatEvery      time.Duration    `protobuf:"bytes,6,opt,name=heartbeat_every,json=heartbeatEvery,proto3,stdduration" json:"heartbeat_every"`
	HealthcheckEvery    time.Duration    `protobuf:"bytes,7,opt,name=healthcheck_every,json=healthcheckEvery,proto3,stdduration" json:"healthcheck_every"`
	Quorum              uint             `protobuf:"varint,8,opt,name=quorum,proto3,casttype=uint" json:"quorum,omitempty"`
	Reuse               ReuseType        `protobuf:"varint,9,opt,name=reuse,proto3,enum=config.ReuseType" json:"reuse,omitempty"`
	EvictEvery          time.Duration    `protobuf:"bytes,10,opt,name=evict_every,json=evictEvery,proto3,stdduration" json:"evict_every"`
	WorkerReadTimeout   time.Duration    `protobuf:"bytes,11,opt,name=worker_read_timeout,json=workerReadTimeout,proto3,stdduration" json:"worker_read_timeout"`
	VstreamStartTimeout time.Duration    `protobuf:"bytes,12,opt,name=vstream_start_timeout,json=vstreamStartTimeout,proto3,stdduration" json:"vstream_start_timeout"`
	VstreamStartRetries int              `protobuf:"varint,13,opt,name=vstream_start_retries,json=vstreamStartRetries,proto3,casttype=int" json:"vstream_start_retries,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

type Materialization struct {
	PartialEnabled bool                  `protobuf:"varint,1,opt,name=partial_enabled,json=partialEnabled,proto3" json:"partial_enabled,omitempty"`
	UpqueryMode    UpqueryGenerationMode `protobuf:"varint,2,opt,name=upquery_mode,json=upqueryMode,proto3,enum=config.UpqueryGenerationMode" json:"upquery_mode,omitempty"`
}

func (m *Materialization) Reset()         { *m = Materialization{} }
func (m *Materialization) String() string { return proto.CompactTextString(m) }
func (*Materialization) ProtoMessage()    {}
func (*Materialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}
func (m *Materialization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Materialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Materialization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Materialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Materialization.Merge(m, src)
}
func (m *Materialization) XXX_Size() int {
	return m.Size()
}
func (m *Materialization) XXX_DiscardUnknown() {
	xxx_messageInfo_Materialization.DiscardUnknown(m)
}

var xxx_messageInfo_Materialization proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("config.ReuseType", ReuseType_name, ReuseType_value)
	proto.RegisterEnum("config.UpqueryMode", UpqueryMode_name, UpqueryMode_value)
	proto.RegisterEnum("config.UpqueryGenerationMode", UpqueryGenerationMode_name, UpqueryGenerationMode_value)
	proto.RegisterType((*Domain)(nil), "config.Domain")
	proto.RegisterType((*Config)(nil), "config.Config")
	proto.RegisterType((*Materialization)(nil), "config.Materialization")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xea, 0x46,
	0x14, 0xb6, 0x81, 0x38, 0xdc, 0x03, 0xe5, 0x67, 0x92, 0xdb, 0xba, 0xa9, 0x6a, 0x50, 0x16, 0xbd,
	0x28, 0x0b, 0x2c, 0xa5, 0xd2, 0xdd, 0x74, 0x53, 0x08, 0xce, 0x15, 0xba, 0x84, 0xa4, 0x03, 0xe8,
	0x56, 0xdd, 0x58, 0x83, 0x3d, 0x01, 0x2b, 0xc6, 0x43, 0xc6, 0x63, 0x2a, 0xaa, 0x3e, 0x44, 0x97,
	0x7d, 0x8d, 0xbe, 0x45, 0x76, 0xcd, 0xb2, 0xab, 0xb4, 0x4d, 0xde, 0x22, 0xab, 0xca, 0x1e, 0x43,
	0x12, 0x9a, 0x05, 0xbb, 0x99, 0x73, 0xbe, 0xef, 0x9b, 0xef, 0x9c, 0x39, 0x07, 0x8a, 0x0e, 0x0b,
	0x2e, 0xbd, 0x49, 0x73, 0xce, 0x99, 0x60, 0x48, 0x93, 0xb7, 0x83, 0xfd, 0x09, 0x9b, 0xb0, 0x24,
	0x64, 0xc6, 0x27, 0x99, 0x3d, 0x30, 0x26, 0x8c, 0x4d, 0x7c, 0x6a, 0x26, 0xb7, 0x71, 0x74, 0x69,
	0xba, 0x11, 0x27, 0xc2, 0x63, 0x81, 0xcc, 0x1f, 0xfe, 0xa9, 0x82, 0xd6, 0x61, 0x33, 0xe2, 0x05,
	0xe8, 0x3d, 0x20, 0x87, 0x05, 0x4e, 0xc4, 0x39, 0x0d, 0x84, 0xcd, 0xe9, 0xdc, 0x27, 0xcb, 0x50,
	0x57, 0xeb, 0x6a, 0x23, 0xdb, 0xde, 0x7d, 0xbc, 0xab, 0x65, 0xbd, 0x40, 0xe0, 0xea, 0x13, 0x04,
	0x4b, 0x04, 0x1a, 0xc1, 0xbe, 0x04, 0xdb, 0x63, 0x22, 0x9c, 0xa9, 0x2d, 0xbc, 0x19, 0x65, 0x91,
	0xd0, 0x33, 0x75, 0xb5, 0x51, 0x38, 0xfe, 0xb2, 0x29, 0x1d, 0x34, 0x57, 0x0e, 0x9a, 0x9d, 0xd4,
	0x41, 0x3b, 0x7f, 0x73, 0x57, 0x53, 0x7e, 0xff, 0xbb, 0xa6, 0x62, 0x24, 0x05, 0xda, 0x31, 0x7f,
	0x28, 0xe9, 0xe8, 0x3d, 0x14, 0xa3, 0xf9, 0x75, 0x44, 0xf9, 0xd2, 0x9e, 0x31, 0x97, 0xea, 0xd9,
	0xba, 0xda, 0x28, 0x1d, 0xef, 0x35, 0xd3, 0xe2, 0x47, 0x32, 0x77, 0xc6, 0x5c, 0x8a, 0x0b, 0xd1,
	0xd3, 0xe5, 0xf0, 0x8f, 0x1d, 0xd0, 0x4e, 0x12, 0x0c, 0xaa, 0x83, 0x16, 0x4e, 0x09, 0x77, 0x65,
	0x15, 0xb9, 0x76, 0xfe, 0xf1, 0xae, 0x96, 0x8b, 0xe2, 0x32, 0xd2, 0x38, 0x6a, 0x41, 0x79, 0x46,
	0x04, 0xe5, 0x1e, 0xf1, 0xbd, 0x5f, 0x12, 0x57, 0xa9, 0xed, 0x2f, 0x56, 0xef, 0x9c, 0xbd, 0x4c,
	0xe3, 0x4d, 0x3c, 0xfa, 0x06, 0x34, 0x37, 0x69, 0xa0, 0x9e, 0x4b, 0x98, 0xa5, 0x15, 0x53, 0xb6,
	0x15, 0xa7, 0x59, 0xd4, 0x83, 0xf2, 0x94, 0x12, 0x2e, 0xc6, 0x94, 0x08, 0x9b, 0x2e, 0x28, 0x5f,
	0xea, 0xda, 0xf6, 0x1d, 0x2a, 0xad, 0xb9, 0x56, 0x4c, 0x45, 0x17, 0x50, 0x9d, 0x52, 0xe2, 0x8b,
	0xa9, 0x33, 0xa5, 0xce, 0x55, 0xaa, 0xb7, 0xbb, 0xbd, 0x5e, 0xe5, 0x19, 0x5b, 0x2a, 0xd6, 0x41,
	0xbb, 0x8e, 0x18, 0x8f, 0x66, 0x7a, 0x7e, 0xb3, 0x59, 0x32, 0x8e, 0xde, 0xc1, 0x0e, 0xa7, 0x51,
	0x48, 0xf5, 0x37, 0xc9, 0x57, 0x54, 0x57, 0x85, 0xe2, 0x38, 0x38, 0x5c, 0xce, 0x29, 0x96, 0x79,
	0xd4, 0x81, 0x02, 0x5d, 0x78, 0xce, 0xaa, 0x4c, 0xd8, 0xde, 0x16, 0x24, 0x3c, 0x69, 0x68, 0x00,
	0x7b, 0x3f, 0x33, 0x7e, 0x45, 0xb9, 0xcd, 0x29, 0x71, 0xd7, 0x63, 0x55, 0xd8, 0x5e, 0xad, 0x2a,
	0xf9, 0x98, 0x12, 0x77, 0x35, 0x55, 0x9f, 0xe0, 0xed, 0x22, 0x14, 0x9c, 0x92, 0x99, 0x1d, 0x0a,
	0xc2, 0xc5, 0x5a, 0xb6, 0xb8, 0xbd, 0xec, 0x5e, 0xaa, 0x30, 0x88, 0x05, 0x56, 0xc2, 0xdf, 0x6d,
	0x0a, 0x73, 0x2a, 0xb8, 0x47, 0x43, 0xfd, 0xb3, 0xba, 0xda, 0xd8, 0x79, 0x5a, 0xa0, 0x17, 0x64,
	0x2c, 0x31, 0x87, 0xbf, 0x42, 0x79, 0x63, 0xce, 0xd0, 0x3b, 0x28, 0xcf, 0x09, 0x17, 0x1e, 0xf1,
	0x6d, 0x1a, 0x90, 0xb1, 0x4f, 0xdd, 0x64, 0x88, 0xf3, 0xb8, 0x94, 0x86, 0x2d, 0x19, 0x45, 0xdf,
	0x6f, 0xec, 0x49, 0x26, 0xf9, 0x9c, 0xaf, 0x37, 0xf6, 0xe4, 0x03, 0x0d, 0xa8, 0x2c, 0xe4, 0x7f,
	0x1b, 0x73, 0xd4, 0x82, 0x37, 0xeb, 0x2f, 0x44, 0x65, 0x28, 0x9c, 0x76, 0xfb, 0x1f, 0xad, 0xde,
	0x60, 0x68, 0x75, 0xfb, 0x15, 0x05, 0x15, 0x60, 0x17, 0x5b, 0xbd, 0xd6, 0x8f, 0x56, 0xa7, 0xa2,
	0xa2, 0x3c, 0xe4, 0x4e, 0x47, 0xbd, 0x5e, 0x25, 0x83, 0x8a, 0x90, 0xef, 0x9f, 0xdb, 0xd8, 0x1a,
	0x0d, 0xac, 0x4a, 0xf6, 0xa8, 0x09, 0x85, 0x67, 0x0b, 0x19, 0x8b, 0x0c, 0xac, 0x9e, 0x75, 0x32,
	0xb4, 0x3f, 0x0c, 0xbb, 0x9d, 0x8a, 0x82, 0x4a, 0x00, 0x43, 0xdc, 0x3a, 0xf9, 0x28, 0xef, 0xea,
	0x51, 0x00, 0x6f, 0x5f, 0x35, 0x86, 0x74, 0xd8, 0xef, 0x9f, 0xdb, 0x67, 0xdd, 0xce, 0x69, 0xef,
	0xfc, 0x93, 0x3d, 0xba, 0xf8, 0x61, 0x64, 0xe1, 0xae, 0x35, 0xa8, 0x28, 0xe8, 0x00, 0x3e, 0x8f,
	0x9f, 0x7e, 0x25, 0xa7, 0xa2, 0x1a, 0x7c, 0x95, 0x98, 0x69, 0x75, 0x2c, 0xfc, 0x0a, 0x20, 0xd3,
	0xbe, 0xb8, 0xf9, 0xd7, 0x50, 0x6e, 0xee, 0x0d, 0xf5, 0xf6, 0xde, 0x50, 0xff, 0xb9, 0x37, 0xd4,
	0xdf, 0x1e, 0x0c, 0xe5, 0xf6, 0xc1, 0x50, 0xfe, 0x7a, 0x30, 0x94, 0x9f, 0x8e, 0x17, 0x9e, 0xa0,
	0x61, 0xd8, 0xf4, 0x98, 0x29, 0x4f, 0xe6, 0x84, 0x99, 0x63, 0xc6, 0x42, 0x61, 0x86, 0x94, 0x2f,
	0x28, 0x37, 0x1d, 0x16, 0x08, 0xce, 0x7c, 0x5f, 0x1e, 0x2f, 0xbd, 0xc9, 0x58, 0x4b, 0x26, 0xe4,
	0xdb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x05, 0x9b, 0x99, 0xb4, 0x8d, 0x05, 0x00, 0x00,
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpqueryMode != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.UpqueryMode))
		i--
		dAtA[i] = 0x18
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ReplayBatchTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplayBatchTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintConfig(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.ConcurrentReplays != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ConcurrentReplays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VstreamStartRetries != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.VstreamStartRetries))
		i--
		dAtA[i] = 0x68
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VstreamStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VstreamStartTimeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintConfig(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x62
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.WorkerReadTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.WorkerReadTimeout):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintConfig(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x5a
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EvictEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EvictEvery):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintConfig(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x52
	if m.Reuse != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Reuse))
		i--
		dAtA[i] = 0x48
	}
	if m.Quorum != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x40
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.HealthcheckEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.HealthcheckEvery):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintConfig(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x3a
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.HeartbeatEvery, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.HeartbeatEvery):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintConfig(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Materialization != nil {
		{
			size, err := m.Materialization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shards != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Shards))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Materialization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Materialization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Materialization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpqueryMode != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.UpqueryMode))
		i--
		dAtA[i] = 0x10
	}
	if m.PartialEnabled {
		i--
		if m.PartialEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConcurrentReplays != 0 {
		n += 1 + sovConfig(uint64(m.ConcurrentReplays))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReplayBatchTimeout)
	n += 1 + l + sovConfig(uint64(l))
	if m.UpqueryMode != 0 {
		n += 1 + sovConfig(uint64(m.UpqueryMode))
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shards != 0 {
		n += 1 + sovConfig(uint64(m.Shards))
	}
	if m.Materialization != nil {
		l = m.Materialization.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.HeartbeatEvery)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.HealthcheckEvery)
	n += 1 + l + sovConfig(uint64(l))
	if m.Quorum != 0 {
		n += 1 + sovConfig(uint64(m.Quorum))
	}
	if m.Reuse != 0 {
		n += 1 + sovConfig(uint64(m.Reuse))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EvictEvery)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.WorkerReadTimeout)
	n += 1 + l + sovConfig(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VstreamStartTimeout)
	n += 1 + l + sovConfig(uint64(l))
	if m.VstreamStartRetries != 0 {
		n += 1 + sovConfig(uint64(m.VstreamStartRetries))
	}
	return n
}

func (m *Materialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartialEnabled {
		n += 2
	}
	if m.UpqueryMode != 0 {
		n += 1 + sovConfig(uint64(m.UpqueryMode))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcurrentReplays", wireType)
			}
			m.ConcurrentReplays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConcurrentReplays |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayBatchTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ReplayBatchTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpqueryMode", wireType)
			}
			m.UpqueryMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpqueryMode |= UpqueryMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Materialization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Materialization == nil {
				m.Materialization = &Materialization{}
			}
			if err := m.Materialization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Domain == nil {
				m.Domain = &Domain{}
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.HeartbeatEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthcheckEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.HealthcheckEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reuse", wireType)
			}
			m.Reuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reuse |= ReuseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictEvery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EvictEvery, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerReadTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.WorkerReadTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VstreamStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VstreamStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VstreamStartRetries", wireType)
			}
			m.VstreamStartRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VstreamStartRetries |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Materialization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Materialization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Materialization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PartialEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpqueryMode", wireType)
			}
			m.UpqueryMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpqueryMode |= UpqueryGenerationMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	AssignDomain(ctx context.Context, in *AssignDomainRequest, opts ...grpc.CallOption) (*AssignDomainResponse, error)
	AssignStream(ctx context.Context, in *AssignStreamRequest, opts ...grpc.CallOption) (*AssignStreamResponse, error)
	DomainBooted(ctx context.Context, in *DomainBootedRequest, opts ...grpc.CallOption) (*DomainBootedResponse, error)
	MemoryStats(ctx context.Context, in *MemoryStatsRequest, opts ...grpc.CallOption) (*MemoryStatsResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) AssignDomain(ctx context.Context, in *AssignDomainRequest, opts ...grpc.CallOption) (*AssignDomainResponse, error) {
	out := new(AssignDomainResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/AssignDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) AssignStream(ctx context.Context, in *AssignStreamRequest, opts ...grpc.CallOption) (*AssignStreamResponse, error) {
	out := new(AssignStreamResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/AssignStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) DomainBooted(ctx context.Context, in *DomainBootedRequest, opts ...grpc.CallOption) (*DomainBootedResponse, error) {
	out := new(DomainBootedResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/DomainBooted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) MemoryStats(ctx context.Context, in *MemoryStatsRequest, opts ...grpc.CallOption) (*MemoryStatsResponse, error) {
	out := new(MemoryStatsResponse)
	err := c.cc.Invoke(ctx, "/service.WorkerService/MemoryStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	AssignDomain(context.Context, *AssignDomainRequest) (*AssignDomainResponse, error)
	AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error)
	DomainBooted(context.Context, *DomainBootedRequest) (*DomainBootedResponse, error)
	MemoryStats(context.Context, *MemoryStatsRequest) (*MemoryStatsResponse, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) AssignDomain(context.Context, *AssignDomainRequest) (*AssignDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDomain not implemented")
}
func (UnimplementedWorkerServiceServer) AssignStream(context.Context, *AssignStreamRequest) (*AssignStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignStream not implemented")
}
func (UnimplementedWorkerServiceServer) DomainBooted(context.Context, *DomainBootedRequest) (*DomainBootedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainBooted not implemented")
}
func (UnimplementedWorkerServiceServer) MemoryStats(context.Context, *MemoryStatsRequest) (*MemoryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemoryStats not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_AssignDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AssignDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.WorkerService/AssignDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AssignDomain(ctx, req.(*AssignDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_AssignStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AssignStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.WorkerService/AssignStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AssignStream(ctx, req.(*AssignStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_DomainBooted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainBootedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).DomainBooted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.WorkerService/DomainBooted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).DomainBooted(ctx, req.(*DomainBootedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_MemoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).MemoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.WorkerService/MemoryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).MemoryStats(ctx, req.(*MemoryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignDomain",
			Handler:    _WorkerService_AssignDomain_Handler,
		},
		{
			MethodName: "AssignStream",
			Handler:    _WorkerService_AssignStream_Handler,
		},
		{
			MethodName: "DomainBooted",
			Handler:    _WorkerService_DomainBooted_Handler,
		},
		{
			MethodName: "MemoryStats",
			Handler:    _WorkerService_MemoryStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ReaderClient is the client API for Reader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderClient interface {
	ViewRead(ctx context.Context, in *ViewReadRequest, opts ...grpc.CallOption) (*ViewReadResponse, error)
	ViewReadMany(ctx context.Context, in *ViewReadManyRequest, opts ...grpc.CallOption) (*ViewReadResponse, error)
	ViewSize(ctx context.Context, in *ViewSizeRequest, opts ...grpc.CallOption) (*ViewSizeResponse, error)
}

type readerClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderClient(cc grpc.ClientConnInterface) ReaderClient {
	return &readerClient{cc}
}

func (c *readerClient) ViewRead(ctx context.Context, in *ViewReadRequest, opts ...grpc.CallOption) (*ViewReadResponse, error) {
	out := new(ViewReadResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerClient) ViewReadMany(ctx context.Context, in *ViewReadManyRequest, opts ...grpc.CallOption) (*ViewReadResponse, error) {
	out := new(ViewReadResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewReadMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerClient) ViewSize(ctx context.Context, in *ViewSizeRequest, opts ...grpc.CallOption) (*ViewSizeResponse, error) {
	out := new(ViewSizeResponse)
	err := c.cc.Invoke(ctx, "/service.Reader/ViewSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderServer is the server API for Reader service.
// All implementations must embed UnimplementedReaderServer
// for forward compatibility
type ReaderServer interface {
	ViewRead(context.Context, *ViewReadRequest) (*ViewReadResponse, error)
	ViewReadMany(context.Context, *ViewReadManyRequest) (*ViewReadResponse, error)
	ViewSize(context.Context, *ViewSizeRequest) (*ViewSizeResponse, error)
	mustEmbedUnimplementedReaderServer()
}

// UnimplementedReaderServer must be embedded to have forward compatible implementations.
type UnimplementedReaderServer struct {
}

func (UnimplementedReaderServer) ViewRead(context.Context, *ViewReadRequest) (*ViewReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewRead not implemented")
}
func (UnimplementedReaderServer) ViewReadMany(context.Context, *ViewReadManyRequest) (*ViewReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewReadMany not implemented")
}
func (UnimplementedReaderServer) ViewSize(context.Context, *ViewSizeRequest) (*ViewSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewSize not implemented")
}
func (UnimplementedReaderServer) mustEmbedUnimplementedReaderServer() {}

// UnsafeReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderServer will
// result in compilation errors.
type UnsafeReaderServer interface {
	mustEmbedUnimplementedReaderServer()
}

func RegisterReaderServer(s grpc.ServiceRegistrar, srv ReaderServer) {
	s.RegisterService(&Reader_ServiceDesc, srv)
}

func _Reader_ViewRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServer).ViewRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Reader/ViewRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServer).ViewRead(ctx, req.(*ViewReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reader_ViewReadMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReadManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServer).ViewReadMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Reader/ViewReadMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServer).ViewReadMany(ctx, req.(*ViewReadManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reader_ViewSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServer).ViewSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Reader/ViewSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServer).ViewSize(ctx, req.(*ViewSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reader_ServiceDesc is the grpc.ServiceDesc for Reader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Reader",
	HandlerType: (*ReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewRead",
			Handler:    _Reader_ViewRead_Handler,
		},
		{
			MethodName: "ViewReadMany",
			Handler:    _Reader_ViewReadMany_Handler,
		},
		{
			MethodName: "ViewSize",
			Handler:    _Reader_ViewSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

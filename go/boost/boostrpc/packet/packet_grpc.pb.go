// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: packet.proto

package packet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomainClient is the client API for Domain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainClient interface {
	SendInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Async, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Async, error)
	SendReplayPiece(ctx context.Context, in *ReplayPiece, opts ...grpc.CallOption) (*Async, error)
	Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*Async, error)
	EvictKeys(ctx context.Context, in *EvictKeysRequest, opts ...grpc.CallOption) (*Async, error)
	StartPartialReplay(ctx context.Context, in *PartialReplayRequest, opts ...grpc.CallOption) (*Async, error)
	StartReaderReplay(ctx context.Context, in *ReaderReplayRequest, opts ...grpc.CallOption) (*Async, error)
	StartReplay(ctx context.Context, in *StartReplayRequest, opts ...grpc.CallOption) (*Async, error)
	FinishReplay(ctx context.Context, in *FinishReplayRequest, opts ...grpc.CallOption) (*Async, error)
	AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*Async, error)
	RemoveNodes(ctx context.Context, in *RemoveNodesRequest, opts ...grpc.CallOption) (*Async, error)
	UpdateEgress(ctx context.Context, in *UpdateEgressRequest, opts ...grpc.CallOption) (*Async, error)
	UpdateSharder(ctx context.Context, in *UpdateSharderRequest, opts ...grpc.CallOption) (*Async, error)
	PrepareState(ctx context.Context, in *PrepareStateRequest, opts ...grpc.CallOption) (*Async, error)
	SetupReplayPath(ctx context.Context, in *SetupReplayPathRequest, opts ...grpc.CallOption) (*Sync, error)
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*Sync, error)
	WaitForReplay(ctx context.Context, in *WaitForReplayRequest, opts ...grpc.CallOption) (*Sync, error)
}

type domainClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainClient(cc grpc.ClientConnInterface) DomainClient {
	return &domainClient{cc}
}

func (c *domainClient) SendInput(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) SendReplayPiece(ctx context.Context, in *ReplayPiece, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendReplayPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Evict(ctx context.Context, in *EvictRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/Evict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) EvictKeys(ctx context.Context, in *EvictKeysRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/EvictKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) StartPartialReplay(ctx context.Context, in *PartialReplayRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartPartialReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) StartReaderReplay(ctx context.Context, in *ReaderReplayRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartReaderReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) StartReplay(ctx context.Context, in *StartReplayRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) FinishReplay(ctx context.Context, in *FinishReplayRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/FinishReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) AddNode(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) RemoveNodes(ctx context.Context, in *RemoveNodesRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/RemoveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) UpdateEgress(ctx context.Context, in *UpdateEgressRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/UpdateEgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) UpdateSharder(ctx context.Context, in *UpdateSharderRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/UpdateSharder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) PrepareState(ctx context.Context, in *PrepareStateRequest, opts ...grpc.CallOption) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/PrepareState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) SetupReplayPath(ctx context.Context, in *SetupReplayPathRequest, opts ...grpc.CallOption) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/SetupReplayPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainClient) WaitForReplay(ctx context.Context, in *WaitForReplayRequest, opts ...grpc.CallOption) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/WaitForReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServer is the server API for Domain service.
// All implementations must embed UnimplementedDomainServer
// for forward compatibility
type DomainServer interface {
	SendInput(context.Context, *Input) (*Async, error)
	SendMessage(context.Context, *Message) (*Async, error)
	SendReplayPiece(context.Context, *ReplayPiece) (*Async, error)
	Evict(context.Context, *EvictRequest) (*Async, error)
	EvictKeys(context.Context, *EvictKeysRequest) (*Async, error)
	StartPartialReplay(context.Context, *PartialReplayRequest) (*Async, error)
	StartReaderReplay(context.Context, *ReaderReplayRequest) (*Async, error)
	StartReplay(context.Context, *StartReplayRequest) (*Async, error)
	FinishReplay(context.Context, *FinishReplayRequest) (*Async, error)
	AddNode(context.Context, *AddNodeRequest) (*Async, error)
	RemoveNodes(context.Context, *RemoveNodesRequest) (*Async, error)
	UpdateEgress(context.Context, *UpdateEgressRequest) (*Async, error)
	UpdateSharder(context.Context, *UpdateSharderRequest) (*Async, error)
	PrepareState(context.Context, *PrepareStateRequest) (*Async, error)
	SetupReplayPath(context.Context, *SetupReplayPathRequest) (*Sync, error)
	Ready(context.Context, *ReadyRequest) (*Sync, error)
	WaitForReplay(context.Context, *WaitForReplayRequest) (*Sync, error)
	mustEmbedUnimplementedDomainServer()
}

// UnimplementedDomainServer must be embedded to have forward compatible implementations.
type UnimplementedDomainServer struct {
}

func (UnimplementedDomainServer) SendInput(context.Context, *Input) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInput not implemented")
}
func (UnimplementedDomainServer) SendMessage(context.Context, *Message) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDomainServer) SendReplayPiece(context.Context, *ReplayPiece) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReplayPiece not implemented")
}
func (UnimplementedDomainServer) Evict(context.Context, *EvictRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evict not implemented")
}
func (UnimplementedDomainServer) EvictKeys(context.Context, *EvictKeysRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictKeys not implemented")
}
func (UnimplementedDomainServer) StartPartialReplay(context.Context, *PartialReplayRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPartialReplay not implemented")
}
func (UnimplementedDomainServer) StartReaderReplay(context.Context, *ReaderReplayRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReaderReplay not implemented")
}
func (UnimplementedDomainServer) StartReplay(context.Context, *StartReplayRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplay not implemented")
}
func (UnimplementedDomainServer) FinishReplay(context.Context, *FinishReplayRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishReplay not implemented")
}
func (UnimplementedDomainServer) AddNode(context.Context, *AddNodeRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedDomainServer) RemoveNodes(context.Context, *RemoveNodesRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodes not implemented")
}
func (UnimplementedDomainServer) UpdateEgress(context.Context, *UpdateEgressRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEgress not implemented")
}
func (UnimplementedDomainServer) UpdateSharder(context.Context, *UpdateSharderRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharder not implemented")
}
func (UnimplementedDomainServer) PrepareState(context.Context, *PrepareStateRequest) (*Async, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareState not implemented")
}
func (UnimplementedDomainServer) SetupReplayPath(context.Context, *SetupReplayPathRequest) (*Sync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupReplayPath not implemented")
}
func (UnimplementedDomainServer) Ready(context.Context, *ReadyRequest) (*Sync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedDomainServer) WaitForReplay(context.Context, *WaitForReplayRequest) (*Sync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForReplay not implemented")
}
func (UnimplementedDomainServer) mustEmbedUnimplementedDomainServer() {}

// UnsafeDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainServer will
// result in compilation errors.
type UnsafeDomainServer interface {
	mustEmbedUnimplementedDomainServer()
}

func RegisterDomainServer(s grpc.ServiceRegistrar, srv DomainServer) {
	s.RegisterService(&Domain_ServiceDesc, srv)
}

func _Domain_SendInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).SendInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/SendInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).SendInput(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_SendReplayPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayPiece)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).SendReplayPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/SendReplayPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).SendReplayPiece(ctx, req.(*ReplayPiece))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Evict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Evict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/Evict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Evict(ctx, req.(*EvictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_EvictKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).EvictKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/EvictKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).EvictKeys(ctx, req.(*EvictKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_StartPartialReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).StartPartialReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/StartPartialReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).StartPartialReplay(ctx, req.(*PartialReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_StartReaderReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaderReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).StartReaderReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/StartReaderReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).StartReaderReplay(ctx, req.(*ReaderReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_StartReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).StartReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/StartReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).StartReplay(ctx, req.(*StartReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_FinishReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).FinishReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/FinishReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).FinishReplay(ctx, req.(*FinishReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).AddNode(ctx, req.(*AddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_RemoveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).RemoveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/RemoveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).RemoveNodes(ctx, req.(*RemoveNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_UpdateEgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).UpdateEgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/UpdateEgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).UpdateEgress(ctx, req.(*UpdateEgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_UpdateSharder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).UpdateSharder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/UpdateSharder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).UpdateSharder(ctx, req.(*UpdateSharderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_PrepareState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).PrepareState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/PrepareState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).PrepareState(ctx, req.(*PrepareStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_SetupReplayPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupReplayPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).SetupReplayPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/SetupReplayPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).SetupReplayPath(ctx, req.(*SetupReplayPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domain_WaitForReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServer).WaitForReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packet.Domain/WaitForReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServer).WaitForReplay(ctx, req.(*WaitForReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Domain_ServiceDesc is the grpc.ServiceDesc for Domain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Domain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packet.Domain",
	HandlerType: (*DomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInput",
			Handler:    _Domain_SendInput_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Domain_SendMessage_Handler,
		},
		{
			MethodName: "SendReplayPiece",
			Handler:    _Domain_SendReplayPiece_Handler,
		},
		{
			MethodName: "Evict",
			Handler:    _Domain_Evict_Handler,
		},
		{
			MethodName: "EvictKeys",
			Handler:    _Domain_EvictKeys_Handler,
		},
		{
			MethodName: "StartPartialReplay",
			Handler:    _Domain_StartPartialReplay_Handler,
		},
		{
			MethodName: "StartReaderReplay",
			Handler:    _Domain_StartReaderReplay_Handler,
		},
		{
			MethodName: "StartReplay",
			Handler:    _Domain_StartReplay_Handler,
		},
		{
			MethodName: "FinishReplay",
			Handler:    _Domain_FinishReplay_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Domain_AddNode_Handler,
		},
		{
			MethodName: "RemoveNodes",
			Handler:    _Domain_RemoveNodes_Handler,
		},
		{
			MethodName: "UpdateEgress",
			Handler:    _Domain_UpdateEgress_Handler,
		},
		{
			MethodName: "UpdateSharder",
			Handler:    _Domain_UpdateSharder_Handler,
		},
		{
			MethodName: "PrepareState",
			Handler:    _Domain_PrepareState_Handler,
		},
		{
			MethodName: "SetupReplayPath",
			Handler:    _Domain_SetupReplayPath_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Domain_Ready_Handler,
		},
		{
			MethodName: "WaitForReplay",
			Handler:    _Domain_WaitForReplay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packet.proto",
}

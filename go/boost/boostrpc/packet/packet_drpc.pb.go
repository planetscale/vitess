// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: packet.proto

package packet

import (
	context "context"
	errors "errors"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	codec "vitess.io/vitess/go/boost/boostrpc/codec"
)

type drpcEncoding_File_packet_proto struct{}

func (drpcEncoding_File_packet_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return codec.Marshal(msg)
}

func (drpcEncoding_File_packet_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return codec.Unmarshal(buf, msg)
}

func (drpcEncoding_File_packet_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return codec.JSONMarshal(msg)
}

func (drpcEncoding_File_packet_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return codec.JSONUnmarshal(buf, msg)
}

type DRPCDomainClient interface {
	DRPCConn() drpc.Conn

	SendInput(ctx context.Context, in *Input) (*Async, error)
	SendMessage(ctx context.Context, in *Message) (*Async, error)
	SendReplayPiece(ctx context.Context, in *ReplayPiece) (*Async, error)
	Evict(ctx context.Context, in *EvictRequest) (*Async, error)
	EvictKeys(ctx context.Context, in *EvictKeysRequest) (*Async, error)
	StartPartialReplay(ctx context.Context, in *PartialReplayRequest) (*Async, error)
	StartReaderReplay(ctx context.Context, in *ReaderReplayRequest) (*Async, error)
	StartReplay(ctx context.Context, in *StartReplayRequest) (*Async, error)
	FinishReplay(ctx context.Context, in *FinishReplayRequest) (*Async, error)
	AddNode(ctx context.Context, in *AddNodeRequest) (*Async, error)
	RemoveNodes(ctx context.Context, in *RemoveNodesRequest) (*Async, error)
	UpdateEgress(ctx context.Context, in *UpdateEgressRequest) (*Async, error)
	UpdateSharder(ctx context.Context, in *UpdateSharderRequest) (*Async, error)
	PrepareState(ctx context.Context, in *PrepareStateRequest) (*Async, error)
	SetupReplayPath(ctx context.Context, in *SetupReplayPathRequest) (*Sync, error)
	Ready(ctx context.Context, in *ReadyRequest) (*Sync, error)
	WaitForReplay(ctx context.Context, in *WaitForReplayRequest) (*Sync, error)
}

type drpcDomainClient struct {
	cc drpc.Conn
}

func NewDRPCDomainClient(cc drpc.Conn) DRPCDomainClient {
	return &drpcDomainClient{cc}
}

func (c *drpcDomainClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcDomainClient) SendInput(ctx context.Context, in *Input) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendInput", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) SendMessage(ctx context.Context, in *Message) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendMessage", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) SendReplayPiece(ctx context.Context, in *ReplayPiece) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/SendReplayPiece", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) Evict(ctx context.Context, in *EvictRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/Evict", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) EvictKeys(ctx context.Context, in *EvictKeysRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/EvictKeys", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) StartPartialReplay(ctx context.Context, in *PartialReplayRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartPartialReplay", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) StartReaderReplay(ctx context.Context, in *ReaderReplayRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartReaderReplay", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) StartReplay(ctx context.Context, in *StartReplayRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/StartReplay", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) FinishReplay(ctx context.Context, in *FinishReplayRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/FinishReplay", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) AddNode(ctx context.Context, in *AddNodeRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/AddNode", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) RemoveNodes(ctx context.Context, in *RemoveNodesRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/RemoveNodes", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) UpdateEgress(ctx context.Context, in *UpdateEgressRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/UpdateEgress", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) UpdateSharder(ctx context.Context, in *UpdateSharderRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/UpdateSharder", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) PrepareState(ctx context.Context, in *PrepareStateRequest) (*Async, error) {
	out := new(Async)
	err := c.cc.Invoke(ctx, "/packet.Domain/PrepareState", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) SetupReplayPath(ctx context.Context, in *SetupReplayPathRequest) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/SetupReplayPath", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) Ready(ctx context.Context, in *ReadyRequest) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/Ready", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDomainClient) WaitForReplay(ctx context.Context, in *WaitForReplayRequest) (*Sync, error) {
	out := new(Sync)
	err := c.cc.Invoke(ctx, "/packet.Domain/WaitForReplay", drpcEncoding_File_packet_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCDomainServer interface {
	SendInput(context.Context, *Input) (*Async, error)
	SendMessage(context.Context, *Message) (*Async, error)
	SendReplayPiece(context.Context, *ReplayPiece) (*Async, error)
	Evict(context.Context, *EvictRequest) (*Async, error)
	EvictKeys(context.Context, *EvictKeysRequest) (*Async, error)
	StartPartialReplay(context.Context, *PartialReplayRequest) (*Async, error)
	StartReaderReplay(context.Context, *ReaderReplayRequest) (*Async, error)
	StartReplay(context.Context, *StartReplayRequest) (*Async, error)
	FinishReplay(context.Context, *FinishReplayRequest) (*Async, error)
	AddNode(context.Context, *AddNodeRequest) (*Async, error)
	RemoveNodes(context.Context, *RemoveNodesRequest) (*Async, error)
	UpdateEgress(context.Context, *UpdateEgressRequest) (*Async, error)
	UpdateSharder(context.Context, *UpdateSharderRequest) (*Async, error)
	PrepareState(context.Context, *PrepareStateRequest) (*Async, error)
	SetupReplayPath(context.Context, *SetupReplayPathRequest) (*Sync, error)
	Ready(context.Context, *ReadyRequest) (*Sync, error)
	WaitForReplay(context.Context, *WaitForReplayRequest) (*Sync, error)
}

type DRPCDomainUnimplementedServer struct{}

func (s *DRPCDomainUnimplementedServer) SendInput(context.Context, *Input) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) SendMessage(context.Context, *Message) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) SendReplayPiece(context.Context, *ReplayPiece) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) Evict(context.Context, *EvictRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) EvictKeys(context.Context, *EvictKeysRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) StartPartialReplay(context.Context, *PartialReplayRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) StartReaderReplay(context.Context, *ReaderReplayRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) StartReplay(context.Context, *StartReplayRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) FinishReplay(context.Context, *FinishReplayRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) AddNode(context.Context, *AddNodeRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) RemoveNodes(context.Context, *RemoveNodesRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) UpdateEgress(context.Context, *UpdateEgressRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) UpdateSharder(context.Context, *UpdateSharderRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) PrepareState(context.Context, *PrepareStateRequest) (*Async, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) SetupReplayPath(context.Context, *SetupReplayPathRequest) (*Sync, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) Ready(context.Context, *ReadyRequest) (*Sync, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDomainUnimplementedServer) WaitForReplay(context.Context, *WaitForReplayRequest) (*Sync, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCDomainDescription struct{}

func (DRPCDomainDescription) NumMethods() int { return 17 }

func (DRPCDomainDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/packet.Domain/SendInput", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					SendInput(
						ctx,
						in1.(*Input),
					)
			}, DRPCDomainServer.SendInput, true
	case 1:
		return "/packet.Domain/SendMessage", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					SendMessage(
						ctx,
						in1.(*Message),
					)
			}, DRPCDomainServer.SendMessage, true
	case 2:
		return "/packet.Domain/SendReplayPiece", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					SendReplayPiece(
						ctx,
						in1.(*ReplayPiece),
					)
			}, DRPCDomainServer.SendReplayPiece, true
	case 3:
		return "/packet.Domain/Evict", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					Evict(
						ctx,
						in1.(*EvictRequest),
					)
			}, DRPCDomainServer.Evict, true
	case 4:
		return "/packet.Domain/EvictKeys", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					EvictKeys(
						ctx,
						in1.(*EvictKeysRequest),
					)
			}, DRPCDomainServer.EvictKeys, true
	case 5:
		return "/packet.Domain/StartPartialReplay", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					StartPartialReplay(
						ctx,
						in1.(*PartialReplayRequest),
					)
			}, DRPCDomainServer.StartPartialReplay, true
	case 6:
		return "/packet.Domain/StartReaderReplay", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					StartReaderReplay(
						ctx,
						in1.(*ReaderReplayRequest),
					)
			}, DRPCDomainServer.StartReaderReplay, true
	case 7:
		return "/packet.Domain/StartReplay", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					StartReplay(
						ctx,
						in1.(*StartReplayRequest),
					)
			}, DRPCDomainServer.StartReplay, true
	case 8:
		return "/packet.Domain/FinishReplay", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					FinishReplay(
						ctx,
						in1.(*FinishReplayRequest),
					)
			}, DRPCDomainServer.FinishReplay, true
	case 9:
		return "/packet.Domain/AddNode", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					AddNode(
						ctx,
						in1.(*AddNodeRequest),
					)
			}, DRPCDomainServer.AddNode, true
	case 10:
		return "/packet.Domain/RemoveNodes", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					RemoveNodes(
						ctx,
						in1.(*RemoveNodesRequest),
					)
			}, DRPCDomainServer.RemoveNodes, true
	case 11:
		return "/packet.Domain/UpdateEgress", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					UpdateEgress(
						ctx,
						in1.(*UpdateEgressRequest),
					)
			}, DRPCDomainServer.UpdateEgress, true
	case 12:
		return "/packet.Domain/UpdateSharder", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					UpdateSharder(
						ctx,
						in1.(*UpdateSharderRequest),
					)
			}, DRPCDomainServer.UpdateSharder, true
	case 13:
		return "/packet.Domain/PrepareState", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					PrepareState(
						ctx,
						in1.(*PrepareStateRequest),
					)
			}, DRPCDomainServer.PrepareState, true
	case 14:
		return "/packet.Domain/SetupReplayPath", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					SetupReplayPath(
						ctx,
						in1.(*SetupReplayPathRequest),
					)
			}, DRPCDomainServer.SetupReplayPath, true
	case 15:
		return "/packet.Domain/Ready", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					Ready(
						ctx,
						in1.(*ReadyRequest),
					)
			}, DRPCDomainServer.Ready, true
	case 16:
		return "/packet.Domain/WaitForReplay", drpcEncoding_File_packet_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDomainServer).
					WaitForReplay(
						ctx,
						in1.(*WaitForReplayRequest),
					)
			}, DRPCDomainServer.WaitForReplay, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterDomain(mux drpc.Mux, impl DRPCDomainServer) error {
	return mux.Register(impl, DRPCDomainDescription{})
}

type DRPCDomain_SendInputStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_SendInputStream struct {
	drpc.Stream
}

func (x *drpcDomain_SendInputStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_SendMessageStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_SendMessageStream struct {
	drpc.Stream
}

func (x *drpcDomain_SendMessageStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_SendReplayPieceStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_SendReplayPieceStream struct {
	drpc.Stream
}

func (x *drpcDomain_SendReplayPieceStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_EvictStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_EvictStream struct {
	drpc.Stream
}

func (x *drpcDomain_EvictStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_EvictKeysStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_EvictKeysStream struct {
	drpc.Stream
}

func (x *drpcDomain_EvictKeysStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_StartPartialReplayStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_StartPartialReplayStream struct {
	drpc.Stream
}

func (x *drpcDomain_StartPartialReplayStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_StartReaderReplayStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_StartReaderReplayStream struct {
	drpc.Stream
}

func (x *drpcDomain_StartReaderReplayStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_StartReplayStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_StartReplayStream struct {
	drpc.Stream
}

func (x *drpcDomain_StartReplayStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_FinishReplayStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_FinishReplayStream struct {
	drpc.Stream
}

func (x *drpcDomain_FinishReplayStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_AddNodeStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_AddNodeStream struct {
	drpc.Stream
}

func (x *drpcDomain_AddNodeStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_RemoveNodesStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_RemoveNodesStream struct {
	drpc.Stream
}

func (x *drpcDomain_RemoveNodesStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_UpdateEgressStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_UpdateEgressStream struct {
	drpc.Stream
}

func (x *drpcDomain_UpdateEgressStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_UpdateSharderStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_UpdateSharderStream struct {
	drpc.Stream
}

func (x *drpcDomain_UpdateSharderStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_PrepareStateStream interface {
	drpc.Stream
	SendAndClose(*Async) error
}

type drpcDomain_PrepareStateStream struct {
	drpc.Stream
}

func (x *drpcDomain_PrepareStateStream) SendAndClose(m *Async) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_SetupReplayPathStream interface {
	drpc.Stream
	SendAndClose(*Sync) error
}

type drpcDomain_SetupReplayPathStream struct {
	drpc.Stream
}

func (x *drpcDomain_SetupReplayPathStream) SendAndClose(m *Sync) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_ReadyStream interface {
	drpc.Stream
	SendAndClose(*Sync) error
}

type drpcDomain_ReadyStream struct {
	drpc.Stream
}

func (x *drpcDomain_ReadyStream) SendAndClose(m *Sync) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDomain_WaitForReplayStream interface {
	drpc.Stream
	SendAndClose(*Sync) error
}

type drpcDomain_WaitForReplayStream struct {
	drpc.Stream
}

func (x *drpcDomain_WaitForReplayStream) SendAndClose(m *Sync) error {
	if err := x.MsgSend(m, drpcEncoding_File_packet_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

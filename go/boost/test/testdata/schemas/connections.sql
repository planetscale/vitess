CREATE TABLE `connections` (
   `id` bigint unsigned NOT NULL AUTO_INCREMENT,
   `public_nanoid` varchar(18) NOT NULL COMMENT 'Every row will receive a unique NanoID created for it.',
   `instance_nanoid` varchar(18) NOT NULL COMMENT 'Every program instance that is running will have a unique NanoID created for it.',
   `from_region` varchar(100) NOT NULL COMMENT 'A label representing the server running the connection tests.',
   `to_region` varchar(100) NOT NULL COMMENT 'A label representing the PlanetScale region.',
   `uses_edge` tinyint NOT NULL COMMENT 'Flagged when to_region is using our new edge.',
   `is_local` tinyint NOT NULL COMMENT 'Flagged when from_region is local to the to_region.',
   `iteration` int unsigned NOT NULL COMMENT 'Current iteration for the instance of the connection tester script that is running.',
   `insecure_connection_attempt_start` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the insecure connection attempt started.',
   `insecure_connection_attempt_end` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the insecure connection attempt ended.',
   `insecure_connection_attempt_time` decimal(22,11) NOT NULL COMMENT 'Insecure connection attempt time in milliseconds',
   `connection_attempt_start` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the real connection attempt started.',
   `connection_attempt_end` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the real connection attempt ended.',
   `connection_time` decimal(22,11) NOT NULL COMMENT 'Real connection attempt time in milliseconds',
   `was_connection_successful` tinyint NOT NULL COMMENT 'Flagged when the connection is established successfully (which should be most rows).',
   `test_query_attempt_start` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the test query attempt started.',
   `test_query_attempt_end` datetime(6) NOT NULL COMMENT 'Datetime with microseconds when the test query attempt ended.',
   `test_query_time` decimal(22,11) NOT NULL COMMENT 'Time is in milliseconds',
   `test_query_result` datetime(6) NOT NULL COMMENT 'Query regional database and return current datetime sysdate(6)',
   `server_version` int NOT NULL COMMENT 'PlanetScale server version as an integer. The form of this version number is main_version * 10000 + minor_version * 100 + sub_version (i.e. version 8.0.23 is 80023).',
   `from_provider` varchar(100) NOT NULL COMMENT 'The from provider info (e.g. AWS, GCP, Azure, Digital Ocean, Linode, Vultr, Other, etc.)',
   `from_type` varchar(100) NOT NULL COMMENT 'The from type for the machine running the connection tests (e.g. the instance type).',
   `from_load` decimal(22,11) NOT NULL COMMENT 'The load for the machine running the connection tests at the time of the connection (since load can contribute to connection slowness).',
   `from_os` varchar(100) NOT NULL COMMENT 'The operating system of the machine running the connection tests.',
   `to_provider` varchar(100) NOT NULL COMMENT 'As we grow and offer databases from providers other than AWS this column should be helpful to include.',
   `program_version` int NOT NULL COMMENT 'The version of the connection tester program running at the time of the connection.',
   `created` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
   UNIQUE KEY `id` (`id`),
   UNIQUE KEY `public_nanoid` (`public_nanoid`),
   UNIQUE KEY `idx_instance_nanoid_and_iteration` (`instance_nanoid`, `iteration`),
   KEY `idx_from_and_to_region` (`from_region`, `to_region`),
   KEY `idx_uses_edge` (`uses_edge`),
   KEY `idx_is_local` (`is_local`),
   KEY `idx_was_connection_successful` (`was_connection_successful`),
   KEY `idx_from_provider` (`from_provider`),
   KEY `idx_insecure_connection_attempt_time` (`insecure_connection_attempt_time`),
   KEY `idx_connection_time` (`connection_time`),
   KEY `idx_test_query_time` (`test_query_time`),
   KEY `idx_created` (`created`),
   KEY `idx_to_and_from_region` (`to_region`, `from_region`)
) ENGINE InnoDB,
  CHARSET utf8mb4,
  COLLATE utf8mb4_unicode_ci;

select /*VT+ NAME=query0 PUBLIC */ from_region, to_region, from_os, count(id) as number_of_test_connections_made, avg(connection_time) as average_connection_time, max(connection_time) as max_connection_time, min(connection_time) as min_connection_time, avg(test_query_time) as average_test_query_time, max(test_query_time) as max_test_query_time, min(test_query_time) as min_test_query_time, avg(insecure_connection_attempt_time) as average_insecure_connection_attempt_time, max(insecure_connection_attempt_time) as max_insecure_connection_attempt_time, min(insecure_connection_attempt_time) as min_insecure_connection_attempt_time, avg(from_load) as average_from_load, max(from_load) as max_from_load, min(from_load) as min_from_load from connections as c group by from_region, to_region, from_os order by from_region asc, to_region asc, from_os asc limit 10;

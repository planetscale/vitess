// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql.proto

package sql

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	vitess_io_vitess_go_mysql_collations "vitess.io/vitess/go/mysql/collations"
	vitess_io_vitess_go_sqltypes "vitess.io/vitess/go/sqltypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Record struct {
	Row      Row   `protobuf:"bytes,1,opt,name=row,proto3,casttype=Row" json:"row,omitempty"`
	Offset   int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Positive bool  `protobuf:"varint,3,opt,name=positive,proto3" json:"positive,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_698b595ef5cec090, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type Type struct {
	T         vitess_io_vitess_go_sqltypes.Type       `protobuf:"varint,1,opt,name=t,proto3,casttype=vitess.io/vitess/go/sqltypes.Type" json:"t,omitempty"`
	Collation vitess_io_vitess_go_mysql_collations.ID `protobuf:"varint,2,opt,name=collation,proto3,casttype=vitess.io/vitess/go/mysql/collations.ID" json:"collation,omitempty"`
	Nullable  bool                                    `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Default   Value                                   `protobuf:"bytes,4,opt,name=default,proto3,casttype=Value" json:"default,omitempty"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_698b595ef5cec090, []int{1}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Record)(nil), "sql.Record")
	proto.RegisterType((*Type)(nil), "sql.Type")
}

func init() { proto.RegisterFile("sql.proto", fileDescriptor_698b595ef5cec090) }

var fileDescriptor_698b595ef5cec090 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x3f, 0x4f, 0x83, 0x40,
	0x18, 0xc6, 0x39, 0xe9, 0x3f, 0x2e, 0x71, 0xb9, 0x18, 0x83, 0x4d, 0x3c, 0x6a, 0x8d, 0xb1, 0x89,
	0x09, 0x0c, 0x1d, 0xdd, 0x88, 0x4b, 0xd7, 0x8b, 0xd1, 0xc4, 0x0d, 0xda, 0x83, 0x90, 0x9c, 0x7d,
	0x81, 0x3b, 0xda, 0xf0, 0x2d, 0xfc, 0x56, 0x76, 0xec, 0xe8, 0x44, 0x14, 0xbe, 0x05, 0x93, 0x81,
	0x5a, 0x5c, 0xba, 0xbd, 0xbf, 0x7b, 0xee, 0xb9, 0x7b, 0x9e, 0x17, 0x1b, 0x32, 0x11, 0x76, 0x9c,
	0x82, 0x02, 0xa2, 0xcb, 0x44, 0x8c, 0x2f, 0x42, 0x08, 0xa1, 0x65, 0xa7, 0x99, 0x0e, 0xd2, 0xf4,
	0x15, 0x0f, 0x18, 0x5f, 0x42, 0xba, 0x22, 0x57, 0x58, 0x4f, 0x61, 0x6b, 0xa2, 0x09, 0x9a, 0x19,
	0xee, 0xb0, 0x2e, 0x2c, 0x9d, 0xc1, 0x96, 0x35, 0x67, 0xe4, 0x12, 0x0f, 0x20, 0x08, 0x24, 0x57,
	0xe6, 0xd9, 0x04, 0xcd, 0xfa, 0xec, 0x8f, 0xc8, 0x18, 0x8f, 0x62, 0x90, 0x91, 0x8a, 0x36, 0xdc,
	0xd4, 0x27, 0x68, 0x36, 0x62, 0x1d, 0x4f, 0x3f, 0x11, 0xee, 0x3d, 0xe7, 0x31, 0x27, 0x73, 0x8c,
	0x54, 0xfb, 0x6a, 0xdf, 0xbd, 0xab, 0x0b, 0xeb, 0x66, 0x13, 0x29, 0x2e, 0xa5, 0x1d, 0x81, 0x73,
	0x98, 0x9c, 0x10, 0x1c, 0x99, 0x08, 0x95, 0xc7, 0x5c, 0xda, 0x8d, 0x83, 0x21, 0x45, 0x16, 0xd8,
	0x58, 0x82, 0x10, 0x9e, 0x8a, 0x60, 0xdd, 0x7e, 0x7a, 0xee, 0x3e, 0xd4, 0x85, 0x75, 0x7f, 0xca,
	0xfc, 0x9e, 0xcb, 0x44, 0x38, 0xdd, 0x75, 0x69, 0x2f, 0x9e, 0xd8, 0xbf, 0xbb, 0x09, 0xb9, 0xce,
	0x84, 0xf0, 0x7c, 0xd1, 0x85, 0x3c, 0x32, 0xb9, 0xc5, 0xc3, 0x15, 0x0f, 0xbc, 0x4c, 0x28, 0xb3,
	0xd7, 0xf6, 0x36, 0xea, 0xc2, 0xea, 0xbf, 0x78, 0x22, 0xe3, 0xec, 0xa8, 0xb8, 0x8f, 0xbb, 0x1f,
	0xaa, 0xed, 0x4a, 0x8a, 0xf6, 0x25, 0x45, 0xdf, 0x25, 0x45, 0x1f, 0x15, 0xd5, 0xf6, 0x15, 0xd5,
	0xbe, 0x2a, 0xaa, 0xbd, 0x5d, 0x9f, 0x8a, 0xe4, 0x03, 0x48, 0xd5, 0xb4, 0xf2, 0x07, 0xed, 0x9a,
	0xe7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x85, 0x3c, 0x1f, 0x8e, 0x01, 0x00, 0x00,
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Positive {
		i--
		if m.Positive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSql(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Row) > 0 {
		i -= len(m.Row)
		copy(dAtA[i:], m.Row)
		i = encodeVarintSql(dAtA, i, uint64(len(m.Row)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Type) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Default) > 0 {
		i -= len(m.Default)
		copy(dAtA[i:], m.Default)
		i = encodeVarintSql(dAtA, i, uint64(len(m.Default)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nullable {
		i--
		if m.Nullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Collation != 0 {
		i = encodeVarintSql(dAtA, i, uint64(m.Collation))
		i--
		dAtA[i] = 0x10
	}
	if m.T != 0 {
		i = encodeVarintSql(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSql(dAtA []byte, offset int, v uint64) int {
	offset -= sovSql(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Row)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSql(uint64(m.Offset))
	}
	if m.Positive {
		n += 2
	}
	return n
}

func (m *Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovSql(uint64(m.T))
	}
	if m.Collation != 0 {
		n += 1 + sovSql(uint64(m.Collation))
	}
	if m.Nullable {
		n += 2
	}
	l = len(m.Default)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func sovSql(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSql(x uint64) (n int) {
	return sovSql(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Row = Row(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Positive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= vitess_io_vitess_go_sqltypes.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collation", wireType)
			}
			m.Collation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collation |= vitess_io_vitess_go_mysql_collations.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nullable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSql
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Default = Value(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSql(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSql
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSql
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSql
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSql
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSql        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSql          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSql = fmt.Errorf("proto: unexpected end of group")
)

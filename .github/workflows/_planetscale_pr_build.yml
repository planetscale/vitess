name: Build on PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

# Serialize workflow runs
# Also, if previous build hasn't finished, cancel it
concurrency:
  group: pr-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-tag-push-lite:
    name: vitess/lite

    runs-on: ubuntu-latest

    steps:
      - name: Checkout planetscale/vitess-private
        uses: actions/checkout@v3
        with:
          # Build HEAD of PR branch not branch merged into master
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::997601596833:role/ci
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.PLANETSCALE_GITHUB_PROD_SA_KEY }}

      - name: Set credentials for private go deps
        env:
          PLANETSCALE_ACTIONS_BOT_TOKEN: ${{ secrets.PLANETSCALE_ACTIONS_BOT_TOKEN }}
        run: |
          git config --global credential.helper store
          echo "https://planetscale-actions-bot:${PLANETSCALE_ACTIONS_BOT_TOKEN}@github.com" >> ~/.git-credentials

      - uses: actions/github-script@v6
        id: check-pr-state
        with:
          result-encoding: string
          script: |
            const full_repo = '${{ github.repository }}';
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: '${{ github.repository_owner }}',
              repo: full_repo.split('/')[1],
              pull_number: '${{ github.event.pull_request.number }}'
            });

            const review_states = new Map();
            for (const review of reviews) {
              console.log(`Reviewer: ${review.user.login} State: ${review.state}`);
              review_states.set(review.user.login, review.state);
            }

            let state = 'pending';
            for (const review_state of review_states.values()) {
              if (review_state == 'APPROVED') {
                state = 'approved';
              } else if (review_state == 'REQUEST_CHANGES') {
                state = 'request_changes';
                break;
              }
            }

            return state;

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ format('us-docker.pkg.dev/planetscale-registry/{0}/vitess/lite', steps.check-pr-state.outputs.result == 'approved' && 'prod' || 'dev') }}
            ${{ format('997601596833.dkr.ecr.us-east-1.amazonaws.com/{0}/vitess', steps.check-pr-state.outputs.result == 'approved' && 'main' || 'branch') }}
          flavor: |
            latest=false
            prefix=mysql80-
          tags: |
            type=ref,event=pr,prefix=mysql80-pr-

      - name: Build and push
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: docker/lite/Dockerfile.private
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          secrets: github_token=${{ secrets.PLANETSCALE_ACTIONS_BOT_TOKEN }}
          build-args: | 
            BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.9

      - name: Cache the go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test kmsbackup
        run: |
          echo '${{ secrets.VITESS_PRIVATE_AWS_CREDENTIALS }}' >> "$RUNNER_TEMP/aws.credentials"
          echo '${{ secrets.VITESS_PRIVATE_GCP_CREDENTIALS }}' >> "$RUNNER_TEMP/gcp.credentials"
          go test vitess.io/vitess/go/vt/mysqlctl/kmsbackup -v -race --aws-credentials-file "$RUNNER_TEMP/aws.credentials" --aws-credentials-profile vitess-private-ci
          go test vitess.io/vitess/go/vt/mysqlctl/gcsbackup -v -race --gcp-credentials-file "$RUNNER_TEMP/gcp.credentials"

      - name: Notify api-bb of new Vitess image version
        if: steps.check-pr-state.outputs.result == 'approved'
        run: >-
          go run vitess.io/vitess/go/cmd/planetscale/push-image-version
          --hmac-key ${{ secrets.PS_API_BB_EXTERNAL_ADMIN_HMAC }}
          --url "https://admin.planetscale.com/external/vitess-image-versions"
          --pr-number ${{ github.event.pull_request.number }} 
          --commit-sha ${{ github.event.pull_request.head.sha }} 
          --commit-date ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

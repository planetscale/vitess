name: Get Latest Versions of Vitess
on:
  workflow_call:
    outputs:
      matrix:
        description: The matrix of the latest versions of Vitess
        value: ${{ jobs.get_release_matrix.outputs.matrix }}

jobs:
  get_release_matrix:
    if: github.repository == 'vitessio/vitess'
    name: Get matrix for endtoend tests on Cluster (upgrade)
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-releases.outputs.matrix }}

    steps:
      - name: Check out to HEAD
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest Vitess tag
        run: |
          last_major_releases=$(git show-ref --tags | grep -E 'refs/tags/v[0-9]*.[0-9]*.0$' | sed 's/[a-z0-9]* refs\/tags\/v//' | sort -nr | head -n1)
          last_major_release_nb=$(echo "$last_major_releases" | head -n1 | sed 's/.[0-9]*.[0-9]*$//')
          last_minor_release=$(git show-ref --tags | grep -E "refs/tags/v$last_major_release_nb.[0-9]*.[1-9]*$" | sed 's/[a-z0-9]* refs\/tags\/v//' | sort -nr | head -n1)
          major_and_minor_releases=$last_major_releases

          if [ "$last_minor_release" != " " ];
          then
            major_and_minor_releases=$(echo -e "$last_major_releases\n$last_minor_release")
          fi

          echo "latest_releases=$(echo "$major_and_minor_releases" | awk ' BEGIN { ORS = ""; print "["; } { print "\/\@{\\\"project\\\":\\\"v"$0"\\\"}\/\@"; } END { print "]"; }' | sed "s^\/\@\/\@^, ^g;s^\/\@^^g")" >> $GITHUB_ENV

      - name: Set Releases
        id: set-releases
        run: |
          echo "::set-output name=matrix::{\"include\":${{ env.latest_releases }} }"
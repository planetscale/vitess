# DO NOT MODIFY: THIS FILE IS GENERATED USING "make generate_ci_workflows"

name: Cluster (vttablet_prscomplex)
on: [push]

jobs:
  build:
    name: Run endtoend tests on Cluster (vttablet_prscomplex)
    runs-on: ubuntu-shr-4cpu-16gb
    timeout-minutes: 60

    steps:
    - name: Configure git private repo access
      env:
        GITHUB_TOKEN: ${{ secrets.PLANETSCALE_ACTIONS_BOT_TOKEN }}
      run: |
        git config --global --add url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

    - name: Check out code
      uses: actions/checkout@v4

    - name: Check for changes in relevant files
      uses: dorny/paths-filter@v3.0.1
      id: changes
      with:
        token: ''
        filters: |
          end_to_end:
            - 'go/**/*.go'
            - 'go/vt/sidecardb/**/*.sql'
            - 'test.go'
            - 'Makefile'
            - 'build.env'
            - 'go.sum'
            - 'go.mod'
            - 'proto/*.proto'
            - 'tools/**'
            - 'config/**'
            - 'bootstrap.sh'
            - '.github/workflows/cluster_endtoend_vttablet_prscomplex.yml'

    - name: Set up Go
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: 1.20.13

    - name: Set up python
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/setup-python@v5

    - name: Tune the OS
      if: steps.changes.outputs.end_to_end == 'true'
      run: |
        sudo sysctl -w net.ipv4.ip_local_port_range="22768 65535"
        # Increase the asynchronous non-blocking I/O. More information at https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_use_native_aio
        echo "fs.aio-max-nr = 1048576" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p /etc/sysctl.conf

    - name: Check out code
      if: steps.changes.outputs.end_to_end == 'true'
      uses: actions/checkout@v4

    - name: Get dependencies
      if: steps.changes.outputs.end_to_end == 'true'
      env: # Or as an environment variable
        AWS_ACCESS_KEY_ID: ${{ secrets.BUILDKITE_S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.BUILDKITE_S3_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        sudo apt-get update
        # stop any existing running instance of mysql
        sudo service mysql stop
        sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld

        # Uninstall any previously installed MySQL first
        sudo DEBIAN_FRONTEND="noninteractive" apt-get remove -y --purge mysql-server mysql-client mysql-common
        sudo apt-get -y autoremove
        sudo apt-get -y autoclean
        sudo deluser mysql
        sudo rm -rf /var/lib/mysql
        sudo rm -rf /etc/mysql

        # install necessary tools
        sudo apt-get install -y make unzip g++ etcd curl git wget awscli eatmydata xz-utils libncurses5
        sudo service etcd stop

        # Get latest version of mysql from s3 bucket
        LATEST_BUILD=$(aws s3api list-objects-v2 --bucket "planetscale-mysql-server-private-ci-artifacts" --prefix mysql/main/dist --query 'reverse(sort_by(Contents[?contains(Key, `jammy`)], &LastModified))[:1].Key' --output=text)
        echo "latest build is $LATEST_BUILD"
        # Pin this to 8.0.34
        LAST_BUILD="mysql/main/8.0.34.20240216-ps-6ce6a79427b/dist/mysql-8.0.34.20240216-ps-6ce6a79427b-jammy-linux-x86_64.tar.gz"
        echo "installing psdb mysql $LAST_BUILD"
        aws s3 cp "s3://planetscale-mysql-server-private-ci-artifacts/${LAST_BUILD}" .
        sudo tar xf $(basename $LAST_BUILD) -v -C /usr --strip-components=1

        go mod download

    - name: Run cluster endtoend test
      if: steps.changes.outputs.end_to_end == 'true'
      timeout-minutes: 45
      run: |
        # We set the VTDATAROOT to the /tmp folder to reduce the file path of mysql.sock file
        # which musn't be more than 107 characters long.
        export VTDATAROOT="/tmp/"
        source build.env

        set -x

        eatmydata -- go run test.go -docker=false -follow -shard vttablet_prscomplex

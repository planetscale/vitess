name: Upgrade Downgrade Testing Backups Manual
on:
  push:
  pull_request:

concurrency:
  group: format('{0}-{1}', ${{ github.ref }}, 'Upgrade Downgrade Testing Backups Manual')
  cancel-in-progress: true

jobs:
  get_upgrade_downgrade_label:
    if: github.repository == 'vitessio/vitess'
    name: Get the Upgrade Downgrade pull request label
    runs-on: ubuntu-latest
    outputs:
      hasLabel: ${{ steps.check_label.outputs.hasLabel }}

    steps:
      - name: Check Label for PR
        if: github.event_name == 'pull_request'
        uses: Dreamcodeio/pr-has-label-action@master
        id: check_label
        with:
          label: Skip Upgrade Downgrade

  get_latest_release:
    if: always() && (github.event_name != 'pull_request' || needs.get_upgrade_downgrade_label.outputs.hasLabel != 'true')
    name: Get latest release
    runs-on: ubuntu-latest
    needs:
      - get_upgrade_downgrade_label
    outputs:
      latest_release: ${{ steps.set-outpout.outputs.matrix }}

    steps:
      - name: Check out to HEAD
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest major release of Vitess
        run: |
          last_major_releases=$(git show-ref --tags | grep -E 'refs/tags/v[0-9]*.[0-9]*.0$' | sed 's/[a-z0-9]* refs\/tags\/v//' | sort -nr | head -n1)
          echo "latest_releases=$(echo "$last_major_releases" | awk ' BEGIN { ORS = ""; print "["; } { print "\/\@{\\\"project\\\":\\\"v"$0"\\\"}\/\@"; } END { print "]"; }' | sed "s^\/\@\/\@^, ^g;s^\/\@^^g")" >> $GITHUB_ENV

      - name: Set output
        id: set-outpout
        run: |
          echo "::set-output name=matrix::{\"include\":${{ env.latest_releases }} }"

  upgrade_downgrade_test:
    timeout-minutes: 60
    if: always() && (github.event_name != 'pull_request' || needs.get_upgrade_downgrade_label.outputs.hasLabel != 'false')
    name: Run Upgrade Downgrade Test Backup Manual
    runs-on: ubuntu-latest
    needs:
      - get_upgrade_downgrade_label
      - get_latest_release
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.get_latest_release.outputs.latest_release)}}

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Set up python
      uses: actions/setup-python@v2

    - name: Tune the OS
      run: |
        echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range

    - name: Get base dependencies
      run: |
        sudo DEBIAN_FRONTEND="noninteractive" apt-get update
        # Uninstall any previously installed MySQL first
        sudo systemctl stop apparmor
        sudo DEBIAN_FRONTEND="noninteractive" apt-get remove -y --purge mysql-server mysql-client mysql-common
        sudo apt-get -y autoremove
        sudo apt-get -y autoclean
        sudo deluser mysql
        sudo rm -rf /var/lib/mysql
        sudo rm -rf /etc/mysql
        # Install mysql80
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29
        wget -c https://dev.mysql.com/get/mysql-apt-config_0.8.20-1_all.deb
        echo mysql-apt-config mysql-apt-config/select-server select mysql-8.0 | sudo debconf-set-selections
        sudo DEBIAN_FRONTEND="noninteractive" dpkg -i mysql-apt-config*
        sudo apt-get update
        sudo DEBIAN_FRONTEND="noninteractive" apt-get install -y mysql-server mysql-client
        # Install everything else we need, and configure
        sudo apt-get install -y make unzip g++ etcd curl git wget eatmydata grep
        sudo service mysql stop
        sudo service etcd stop
        sudo bash -c "echo '/usr/sbin/mysqld { }' > /etc/apparmor.d/usr.sbin.mysqld" # https://bugs.launchpad.net/ubuntu/+source/mariadb-10.1/+bug/1806263
        sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld || echo "could not remove mysqld profile"

        # install JUnit report formatter
        go get -u github.com/vitessio/go-junit-report@HEAD

        wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get install -y gnupg2
        sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get update
        sudo apt-get install percona-xtrabackup-24

    # Checkout to the last release of Vitess
    - name: Checkout to the other version's code (${{ matrix.project }})
      uses: actions/checkout@v2
      with:
        ref: ${{ matrix.project }}

    - name: Get dependencies for the last release
      run: |
        go mod download

    - name: Building last release's binaries
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-other/
        cp -R bin /tmp/vitess-build-other/
        rm -Rf bin/*

    # Checkout to this build's commit
    - name: Checkout to commit's code
      uses: actions/checkout@v2

    - name: Get dependencies for this commit
      run: |
        go mod download

    - name: Run make minimaltools
      run: |
        make minimaltools

    - name: Building the binaries for this commit
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-current/
        cp -R bin /tmp/vitess-build-current/

    - name: Create the example Vitess cluster with all components using version N
      run: |
        source build.env ; cd examples/local
        ./backups/start_cluster.sh

    - name: Take a backup of all the shards
      run: |
        source build.env ; cd examples/local
        ./backups/take_backups.sh

    - name: Insert more data after the backup
      run: |
        source build.env ; cd examples/local ; source ./env.sh

        echo "insert into customer(email) values('new_user_1@domain.com');" | mysql
        echo "insert into product(sku, description, price) values('SKU-1009', 'description', 89);" | mysql
        echo "insert into corder(customer_id, sku, price) values(1, 'SKU-1009', 100);" | mysql

    - name: Stop tablets
      run: |
        source build.env ; cd examples/local
        ./backups/stop_tablets.sh

    - name: Use VTTablet N-1
      run: |
        source build.env

        rm -f $PWD/bin/vttablet
        cp /tmp/vitess-build-other/bin/vttablet $PWD/bin/vttablet
        vttablet --version

    - name: Start new tablets using version n-1 and restoring old backup made on version n
      run: |
        source build.env ; cd examples/local
        ./backups/restart_tablets.sh
        # give enough time to the tablets to restore the backup
        sleep 60

    - name: Check grep
      run: |
        source build.env ; cd examples/local ; source ./env.sh

        echo "2" | grep 2

    - name: Query the new tablets to make sure the data has been restored
      run: |
        source build.env ; cd examples/local ; source ./env.sh

        echo "select count(sku) from product;" | mysql | grep 2
        echo "select count(email) from customer;" | mysql | grep 5
        echo "select count(sku) from corder;" | mysql | grep 5

    - name: Insert more data before the backup
      run: |
        source build.env ; cd examples/local ; source ./env.sh

        echo "insert into customer(email) values('new_user_2@domain.com');" | mysql
        echo "insert into product(sku, description, price) values('SKU-1011', 'description', 111);" | mysql
        echo "insert into corder(customer_id, sku, price) values(1, 'SKU-1011', 111);" | mysql

    - name: Take a second backup of all the shards
      run: |
        source build.env ; cd examples/local
        ./backups/take_backups.sh

    - name: Stop tablets
      run: |
        source build.env ; cd examples/local
        ./backups/stop_tablets.sh

    - name: Use current version VTTablet, and other version VTBackup
      run: |
        source build.env

        rm -f $PWD/bin/vttablet
        cp /tmp/vitess-build-current/bin/vttablet $PWD/bin/vttablet
        vttablet --version

    - name: Start new tablets using version n and restoring old backup made on version n-1
      run: |
        source build.env ; cd examples/local
        ./backups/restart_tablets.sh
        # give enough time to the tablets to restore the backup
        sleep 60

    - name: Query the new tablets to make sure the data has been restored
      run: |
        source build.env ; cd examples/local ; source ./env.sh

        echo "select count(sku) from product;" | mysql | grep 3
        echo "select count(email) from customer;" | mysql | grep 6
        echo "select count(sku) from corder;" | mysql | grep 6

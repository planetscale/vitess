name: Upgrade Downgrade Testing
on:
  push:
  pull_request:

concurrency:
  group: format('{0}-{1}', ${{ github.ref }}, 'Upgrade Downgrade Testing')
  cancel-in-progress: true

# This test ensures that our end-to-end tests work using Vitess components
# (vtgate, vttablet, etc) built on different versions.

jobs:
  get_latest_release:
    if: github.repository == 'vitessio/vitess'
    name: Get latest release
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.set-outpout.outputs.matrix }}

    steps:
      - name: Check out to HEAD
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest major release of Vitess
        run: |
          last_major_releases=$(git show-ref --tags | grep -E 'refs/tags/v[0-9]*.[0-9]*.0$' | sed 's/[a-z0-9]* refs\/tags\/v//' | sort -nr | head -n1)
          echo "latest_releases=$(echo "$last_major_releases" | awk ' BEGIN { ORS = ""; print "["; } { print "\/\@{\\\"project\\\":\\\"v"$0"\\\"}\/\@"; } END { print "]"; }' | sed "s^\/\@\/\@^, ^g;s^\/\@^^g")" >> $GITHUB_ENV

      - name: Set output
        id: set-outpout
        run: |
          echo "::set-output name=matrix::{\"include\":${{ env.latest_releases }} }"


  upgrade_downgrade_test:
    name: Run Upgrade Downgrade Test
    runs-on: ubuntu-18.04
    needs:
      - get_latest_release
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.get_latest_release.outputs.latest_release)}}

    steps:
    - name: Check latest versions
      run: echo ${{ matrix.project }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Set up python
      uses: actions/setup-python@v2

    - name: Tune the OS
      run: |
        echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range

    - name: Get base dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata
        sudo service mysql stop
        sudo service etcd stop
        sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
        sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld

        # install JUnit report formatter
        go get -u github.com/vitessio/go-junit-report@HEAD

        wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get install -y gnupg2
        sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
        sudo apt-get update
        sudo apt-get install percona-xtrabackup-24

    # Checkout to the other version of Vitess
    - name: Check out other version's code (${{ matrix.project }})
      uses: actions/checkout@v2
      with:
        ref: ${{ matrix.project }}

    - name: Get dependencies for other version
      run: |
        go mod download

    - name: Building other version's binaries
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-other/
        cp -R bin /tmp/vitess-build-other/
        rm -Rf bin/*

      # Checkout to the current version of Vitess
    - name: Check out current version's code
      uses: actions/checkout@v2

    - name: Get dependencies for current version
      run: |
        go mod download

    - name: Building current version's binaries
      timeout-minutes: 10
      run: |
        source build.env
        make build
        mkdir -p /tmp/vitess-build-current/
        cp -R bin /tmp/vitess-build-current/

    - name: Run simple test with current versions for both binaries
      run: |
        rm -rf /tmp/vtdataroot
        mkdir -p /tmp/vtdataroot

        source build.env
        eatmydata -- go run test.go -skip-build -keep-data -docker=false -print-log -follow -shard 30

    - name: Use other version VTGate
      run: |
        source build.env

        cp /tmp/vitess-build-other/bin/vtgate $PWD/bin/vtgate
        vtgate --version

    - name: Run simple test old version vtgate and current version vttablet
      run: |
        rm -rf /tmp/vtdataroot
        mkdir -p /tmp/vtdataroot

        source build.env
        eatmydata -- go run test.go -skip-build -keep-data -docker=false -print-log -follow -shard 30

    - name: Use current version VTGate, and other version VTTablet
      run: |
        source build.env

        cp /tmp/vitess-build-current/bin/vtgate $PWD/bin/vtgate
        cp /tmp/vitess-build-other/bin/vttablet $PWD/bin/vttablet
        vtgate --version
        vttablet --version

    - name: Run simple test current version vtgate and old version vttablet
      run: |
        rm -rf /tmp/vtdataroot
        mkdir -p /tmp/vtdataroot

        source build.env
        eatmydata -- go run test.go -skip-build -keep-data -docker=false -print-log -follow -shard 30

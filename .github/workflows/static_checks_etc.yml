name: Static Code Checks, Etc.

on:
  - pull_request
  - push

jobs:
  build:
    name: Static Code Checks Etc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run FOSSA scan and upload build data
        uses: fossa-contrib/fossa-action@v1
        with:
          fossa-api-key: 76d7483ea206d530d9452e44bffe7ba8

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.9

      - name: Tune the OS
        run: |
          echo '1024 65535' | sudo tee -a /proc/sys/net/ipv4/ip_local_port_range

      - name: Run go fmt
        run: |
          gofmt -l . | grep -vF vendor/ && exit 1 || echo "All files formatted correctly"

      - name: Install goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Run goimports
        run: |
          out=$(goimports -local vitess.io/vitess -l -w $(find . -name "*.go" | grep -v ".pb.go"))
          echo $out | grep go > /dev/null && echo -e "The following files are malformatted:\n$out" && exit 1 || echo "All the files are formatted correctly"

      - name: Get dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make unzip g++ etcd curl git wget
          sudo service etcd stop
          go mod download

      - name: Run make minimaltools
        run: |
          make minimaltools

      - name: check_make_parser
        run: |
          tools/check_make_parser.sh || exit 1

      - name: check_make_sizegen
        run: |
          tools/check_make_sizegen.sh || exit 1

      - name: check_make_visitor
        run: |
          misc/git/hooks/asthelpers || exit 1

      - name: run ensure_bootstrap_version
        run: |
          make ensure_bootstrap_version
          git status
          test -z "$(git diff-index --name-only HEAD --)" || exit 1

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.2

      - name: Clean Env
        run: $(go env GOPATH)/bin/golangci-lint cache clean

      - name: Print linter version
        run: $(go env GOPATH)/bin/golangci-lint --version

      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run go/... --timeout 10m || exit 1

      - name: Run go mod tidy
        run: |
          set -e
          go mod tidy
          output=$(git status -s)
          if [ -z "${output}" ]; then
            exit 0
          fi
          echo 'We wish to maintain a tidy state for go mod. Please run `go mod tidy` on your branch, commit and push again.'
          echo 'Running `go mod tidy` on this CI test yields with the following changes:'
          echo "$output"
          exit 1

      - name: check_make_proto
        run: |
          tools/check_make_proto.sh || exit 1

      - name: Check test/config.json
        run: |
          go run ./go/tools/ci-config/main.go || exit 1

      - name: Check changelog
        run: |
          set -e
          go run ./go/tools/releases/releases.go
          output=$(git status -s)
          if [ -z "${output}" ]; then
            exit 0
          fi
          echo 'We wish to maintain a consistent changelog directory, please run `go run ./go/tools/releases/releases.go`, commit and push again.'
          echo 'Running `go run ./go/tools/releases/releases.go` on CI yields the following changes:'
          echo "$output"
          echo ""
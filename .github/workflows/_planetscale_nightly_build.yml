name: Nightly Build

on:
  # Enable manually trigger button in UI
  workflow_dispatch:
    inputs:
      # This is kinda sad. It's a hack that makes it possible for us to tie a
      # workflow dispatch event we created back to the workflow run it creates.
      #
      # - Dispatch event: https://docs.github.com/en/rest/actions/workflows#create-a-workflow-dispatch-event
      # - Workflow run: https://docs.github.com/en/rest/actions/workflow-runs
      #
      # The POST request to trigger a workflow run doesn't return any kind of
      # handle that you can use to retrieve the run once it's started. The
      # closest we can do is have an input to the workflow, set it as a step
      # name in the first job, and search for it by polling the list API.
      #
      # - List API: https://docs.github.com/en/rest/actions/workflow-runs#list-workflow-runs
      user_supplied_id:
        description: "Identifier provided by workflow dispatch event to look up workflow run later"
        required: false
        default: "unset"

  schedule:
    # Every day at 5am UTC (9pm PST / 10pm PDT)
    - cron: '0 5 * * *'

jobs:
  id:
    name: user-supplied-workflow-id
    runs-on: ubuntu-latest
    steps:
      - name: ${{github.event.inputs.user_supplied_id}}
        run: |
          echo "User-supplied Workflow ID is: ${{inputs.user_supplied_id}}"

  build-tag-push-lite:
    name: vitess/lite

    runs-on: ubuntu-latest

    strategy:
      matrix:
        ref:
          - main
          - latest
        image:
          - mysql80
        include:
          # Default image is tagged as 'latest'
          - image: mysql80
            ref: latest
            default: 'true'

    steps:
      - name: Checkout planetscale/vitess-private
        uses: actions/checkout@v3
        with:
          ref: ${{ matrix.ref }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          # Vitess build context causes tar header problem with containerd
          driver: docker

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::997601596833:role/ci
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: us-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.PLANETSCALE_GITHUB_PROD_SA_KEY }}

      - name: Determine SHA
        id: determine-sha
        run: |
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ format('us-docker.pkg.dev/planetscale-registry/{0}/vitess/lite', matrix.ref == 'main' && 'prod' || 'dev') }}
            ${{ format('997601596833.dkr.ecr.us-east-1.amazonaws.com/{0}/vitess', matrix.ref == 'main' && 'main' || 'branch') }}
          flavor: |
            latest=${{ matrix.default == 'true' }}
            prefix=${{ matrix.image }}-,onlatest=true
          # head tag is so we have 2 well-known tags to a vitess image for CI
          tags: |
            type=raw,value={{date 'YYYY-MM-DD'}}.${{ steps.determine-sha.outputs.sha }}
            type=raw,value=head,enable=${{ matrix.ref == 'latest' }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/lite/Dockerfile.${{ matrix.image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          secrets: github_token=${{ secrets.PLANETSCALE_ACTIONS_BOT_TOKEN }}

  slack-notify:
    name: "Send Slack Notification to #builds"
    needs:
      - build-tag-push-lite
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/_planetscale_slack-notify
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
